
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee54  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800f128  0800f128  0001f128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f54c  0800f54c  0001f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f554  0800f554  0001f554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800f55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  240001e0  0800f73c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a58  0800f73c  00020a58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034aa6  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004da9  00000000  00000000  00054cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001900  00000000  00000000  00059a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001768  00000000  00000000  0005b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388aa  00000000  00000000  0005cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023363  00000000  00000000  00095372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cb0b  00000000  00000000  000b86d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002251e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007820  00000000  00000000  00225234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f10c 	.word	0x0800f10c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800f10c 	.word	0x0800f10c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->k0 = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	741a      	strb	r2, [r3, #16]
	dev->k1 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	745a      	strb	r2, [r3, #17]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	891b      	ldrh	r3, [r3, #8]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f006 f864 	bl	80067e4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f103 010a 	add.w	r1, r3, #10
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2201      	movs	r2, #1
 800072a:	f00a fdfb 	bl	800b324 <HAL_UART_Transmit>
			sizeof(dev->address), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f006 f853 	bl	80067e4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 010c 	add.w	r1, r3, #12
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	2202      	movs	r2, #2
 800074c:	f00a fe80 	bl	800b450 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x400) == 0x400;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	899b      	ldrh	r3, [r3, #12]
 8000754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	741a      	strb	r2, [r3, #16]
	dev->k1 = (dev->uart_buf & 0x800) == 0x800;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	745a      	strb	r2, [r3, #17]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2224      	movs	r2, #36	; 0x24
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c f877 	bl	800c894 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <MX_ADC1_Init+0xe4>)
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <MX_ADC1_Init+0xe8>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_ADC1_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC1_Init+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC1_Init+0xe4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_ADC1_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <MX_ADC1_Init+0xe4>)
 8000806:	f002 fcc3 	bl	8003190 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 fbc6 	bl	8000fa0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_ADC1_Init+0xe4>)
 8000820:	f003 ff86 	bl	8004730 <HAL_ADCEx_MultiModeConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800082a:	f000 fbb9 	bl	8000fa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ADC1_Init+0xec>)
 8000830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2306      	movs	r3, #6
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000840:	2304      	movs	r3, #4
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_ADC1_Init+0xe4>)
 8000854:	f003 f8fc 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800085e:	f000 fb9f 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3730      	adds	r7, #48	; 0x30
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2400020c 	.word	0x2400020c
 8000870:	40022000 	.word	0x40022000
 8000874:	2a000400 	.word	0x2a000400

08000878 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2224      	movs	r2, #36	; 0x24
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f00c f805 	bl	800c894 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <MX_ADC3_Init+0xd4>)
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <MX_ADC3_Init+0xd8>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_ADC3_Init+0xd4>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_ADC3_Init+0xd4>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_ADC3_Init+0xd4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_ADC3_Init+0xd4>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_ADC3_Init+0xd4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <MX_ADC3_Init+0xd4>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <MX_ADC3_Init+0xd4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_ADC3_Init+0xd4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_ADC3_Init+0xd4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_ADC3_Init+0xd4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC3_Init+0xd4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_ADC3_Init+0xd4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_ADC3_Init+0xd4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_ADC3_Init+0xd4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_ADC3_Init+0xd4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC3_Init+0xd4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <MX_ADC3_Init+0xd4>)
 80008f8:	f002 fc4a 	bl	8003190 <HAL_ADC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000902:	f000 fb4d 	bl	8000fa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ADC3_Init+0xdc>)
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2306      	movs	r3, #6
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 800090e:	2302      	movs	r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000912:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000918:	2304      	movs	r3, #4
 800091a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC3_Init+0xd4>)
 8000936:	f003 f88b 	bl	8003a50 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000940:	f000 fb2e 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2400027c 	.word	0x2400027c
 8000950:	58026000 	.word	0x58026000
 8000954:	c7520000 	.word	0xc7520000

08000958 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <HAL_ADC_MspInit+0xb8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12a      	bne.n	80009d0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 800097c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000980:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 8000982:	f043 0320 	orr.w	r3, r3, #32
 8000986:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 800098c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000990:	f003 0320 	and.w	r3, r3, #32
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_ADC_MspInit+0xc0>)
 80009ca:	f005 fd63 	bl	8006494 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009ce:	e01b      	b.n	8000a08 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_ADC_MspInit+0xc4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d116      	bne.n	8000a08 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 80009e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_ADC_MspInit+0xbc>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	207f      	movs	r0, #127	; 0x7f
 80009fe:	f004 f854 	bl	8004aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000a02:	207f      	movs	r0, #127	; 0x7f
 8000a04:	f004 f86b 	bl	8004ade <HAL_NVIC_EnableIRQ>
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40022000 	.word	0x40022000
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58026000 	.word	0x58026000

08000a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DMA_Init+0x3c>)
 8000a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <MX_DMA_Init+0x3c>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_DMA_Init+0x3c>)
 8000a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	200b      	movs	r0, #11
 8000a4a:	f004 f82e 	bl	8004aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a4e:	200b      	movs	r0, #11
 8000a50:	f004 f845 	bl	8004ade <HAL_NVIC_EnableIRQ>

}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58024400 	.word	0x58024400

08000a60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a67      	ldr	r2, [pc, #412]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a58      	ldr	r2, [pc, #352]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a51      	ldr	r2, [pc, #324]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a49      	ldr	r2, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8000b30:	483b      	ldr	r0, [pc, #236]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000b32:	f005 fe57 	bl	80067e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 8000b36:	2200      	movs	r2, #0
 8000b38:	f24c 3120 	movw	r1, #49952	; 0xc320
 8000b3c:	4839      	ldr	r0, [pc, #228]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000b3e:	f005 fe51 	bl	80067e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	21f7      	movs	r1, #247	; 0xf7
 8000b46:	4838      	ldr	r0, [pc, #224]	; (8000c28 <MX_GPIO_Init+0x1c8>)
 8000b48:	f005 fe4c 	bl	80067e4 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f640 7111 	movw	r1, #3857	; 0xf11
 8000b52:	4836      	ldr	r0, [pc, #216]	; (8000c2c <MX_GPIO_Init+0x1cc>)
 8000b54:	f005 fe46 	bl	80067e4 <HAL_GPIO_WritePin>
                          |SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000b5e:	4834      	ldr	r0, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x1d0>)
 8000b60:	f005 fe40 	bl	80067e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin;
 8000b64:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4828      	ldr	r0, [pc, #160]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000b7e:	f005 fc89 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_SS3_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI4_SS3_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000b98:	f005 fc7c 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 8000b9c:	f24c 3320 	movw	r3, #49952	; 0xc320
 8000ba0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481b      	ldr	r0, [pc, #108]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000bb6:	f005 fc6d 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 8000bba:	23f7      	movs	r3, #247	; 0xf7
 8000bbc:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_GPIO_Init+0x1c8>)
 8000bd2:	f005 fc5f 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bd6:	f640 7311 	movw	r3, #3857	; 0xf11
 8000bda:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_GPIO_Init+0x1cc>)
 8000bf0:	f005 fc50 	bl	8006494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000bf4:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x1d0>)
 8000c0e:	f005 fc41 	bl	8006494 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58021000 	.word	0x58021000
 8000c24:	58020800 	.word	0x58020800
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58020c00 	.word	0x58020c00
 8000c30:	58020000 	.word	0x58020000

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b0c6      	sub	sp, #280	; 0x118
 8000c38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f001 ff8f 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f8f1 	bl	8000e24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c42:	f000 f969 	bl	8000f18 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f7ff ff0b 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f7ff fee9 	bl	8000a20 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c4e:	f7ff fd9b 	bl	8000788 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000c52:	f7ff fe11 	bl	8000878 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000c56:	f000 fa67 	bl	8001128 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000c5a:	f000 fabb 	bl	80011d4 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000c5e:	f000 fd63 	bl	8001728 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c62:	f000 fdbb 	bl	80017dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c66:	f000 fe0d 	bl	8001884 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c6a:	f000 fe61 	bl	8001930 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000c6e:	f000 feb5 	bl	80019dc <MX_TIM12_Init>
  MX_TIM13_Init();
 8000c72:	f000 ff17 	bl	8001aa4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000c76:	f000 ff65 	bl	8001b44 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000c7a:	f000 ffb3 	bl	8001be4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000c7e:	f001 f839 	bl	8001cf4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000c82:	f001 f8b3 	bl	8001dec <MX_TIM17_Init>
  MX_UART4_Init();
 8000c86:	f001 fc95 	bl	80025b4 <MX_UART4_Init>
  MX_UART5_Init();
 8000c8a:	f001 fcdf 	bl	800264c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000c8e:	f001 fd29 	bl	80026e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c92:	f001 fd73 	bl	800277c <MX_USART3_UART_Init>
  MX_TIM24_Init();
 8000c96:	f001 f975 	bl	8001f84 <MX_TIM24_Init>
  MX_TIM23_Init();
 8000c9a:	f001 f923 	bl	8001ee4 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  /*
   * Initialise Struct
   */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1); //Enable Level-Shifter IC
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca4:	4853      	ldr	r0, [pc, #332]	; (8000df4 <main+0x1c0>)
 8000ca6:	f005 fd9d 	bl	80067e4 <HAL_GPIO_WritePin>
  Stepper_Motor stepper_2;
  Stepper_Motor stepper_3;
  Stepper_Motor stepper_4;
  Stepper_Motor stepper_5;
  Servo_Motor servo_gripper;
  stepper_initialise(&stepper_1, &htim12, DIR1_GPIO_Port, DIR1_Pin);
 8000caa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000cae:	2320      	movs	r3, #32
 8000cb0:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <main+0x1c4>)
 8000cb2:	4952      	ldr	r1, [pc, #328]	; (8000dfc <main+0x1c8>)
 8000cb4:	f000 f97a 	bl	8000fac <stepper_initialise>
  stepper_initialise(&stepper_2, &htim13, DIR2_GPIO_Port, DIR2_Pin);
 8000cb8:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	4a50      	ldr	r2, [pc, #320]	; (8000e00 <main+0x1cc>)
 8000cc0:	4950      	ldr	r1, [pc, #320]	; (8000e04 <main+0x1d0>)
 8000cc2:	f000 f973 	bl	8000fac <stepper_initialise>
  stepper_initialise(&stepper_3, &htim14, DIR3_GPIO_Port, DIR3_Pin);
 8000cc6:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8000cca:	2302      	movs	r3, #2
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <main+0x1cc>)
 8000cce:	494e      	ldr	r1, [pc, #312]	; (8000e08 <main+0x1d4>)
 8000cd0:	f000 f96c 	bl	8000fac <stepper_initialise>
  stepper_initialise(&stepper_4, &htim15, DIR4_GPIO_Port, DIR4_Pin);
 8000cd4:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000cd8:	2304      	movs	r3, #4
 8000cda:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <main+0x1cc>)
 8000cdc:	494b      	ldr	r1, [pc, #300]	; (8000e0c <main+0x1d8>)
 8000cde:	f000 f965 	bl	8000fac <stepper_initialise>
  stepper_initialise(&stepper_5, &htim16, DIR5_GPIO_Port, DIR5_Pin);
 8000ce2:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	4a42      	ldr	r2, [pc, #264]	; (8000df4 <main+0x1c0>)
 8000cea:	4949      	ldr	r1, [pc, #292]	; (8000e10 <main+0x1dc>)
 8000cec:	f000 f95e 	bl	8000fac <stepper_initialise>
  AMT21 encoder_1;
  AMT21 encoder_2;
  AMT21 encoder_3;
  AMT21 encoder_4;
  AMT21 encoder_5;
  AMT21 encoders[5] = {encoder_1, encoder_2, encoder_3, encoder_4, encoder_5};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	602b      	str	r3, [r5, #0]
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	f103 0414 	add.w	r4, r3, #20
 8000d06:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8000d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000d18:	f107 0590 	add.w	r5, r7, #144	; 0x90
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	6023      	str	r3, [r4, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000d2a:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000d3c:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	6023      	str	r3, [r4, #0]
  AMT21_initialise(&encoder_1, &huart2, 0x2C , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000d48:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <main+0x1e0>)
 8000d52:	222c      	movs	r2, #44	; 0x2c
 8000d54:	4930      	ldr	r1, [pc, #192]	; (8000e18 <main+0x1e4>)
 8000d56:	f7ff fcaf 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_2, &huart2, 0x34 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000d5a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000d5e:	2310      	movs	r3, #16
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <main+0x1e0>)
 8000d64:	2234      	movs	r2, #52	; 0x34
 8000d66:	492c      	ldr	r1, [pc, #176]	; (8000e18 <main+0x1e4>)
 8000d68:	f7ff fca6 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_3, &huart2, 0x4c , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000d6c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000d70:	2310      	movs	r3, #16
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <main+0x1e0>)
 8000d76:	224c      	movs	r2, #76	; 0x4c
 8000d78:	4927      	ldr	r1, [pc, #156]	; (8000e18 <main+0x1e4>)
 8000d7a:	f7ff fc9d 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_4, &huart2, 0x5C , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000d7e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000d82:	2310      	movs	r3, #16
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <main+0x1e0>)
 8000d88:	225c      	movs	r2, #92	; 0x5c
 8000d8a:	4923      	ldr	r1, [pc, #140]	; (8000e18 <main+0x1e4>)
 8000d8c:	f7ff fc94 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_5, &huart2, 0x78 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000d90:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000d94:	2310      	movs	r3, #16
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <main+0x1e0>)
 8000d9a:	2278      	movs	r2, #120	; 0x78
 8000d9c:	491e      	ldr	r1, [pc, #120]	; (8000e18 <main+0x1e4>)
 8000d9e:	f7ff fc8b 	bl	80006b8 <AMT21_initialise>
  servo_initialise(&servo_gripper, &htim17);
 8000da2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000da6:	491d      	ldr	r1, [pc, #116]	; (8000e1c <main+0x1e8>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f92f 	bl	800100c <servo_initialise>
  servo_set_degree(&servo_gripper, 90);
 8000dae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db2:	215a      	movs	r1, #90	; 0x5a
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f97f 	bl	80010b8 <servo_set_degree>
  /*
   * HAL Start Timer
   */
  HAL_TIM_Base_Start_IT(&htim24);
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <main+0x1ec>)
 8000dbc:	f008 fed4 	bl	8009b68 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  /*
	   * TEST ENCODER
	   */
	  for (int i = 0; i<5; i++){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000dc6:	e00f      	b.n	8000de8 <main+0x1b4>
		  AMT21_read_value(&(encoders[i]));
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fc93 	bl	8000704 <AMT21_read_value>
	  for (int i = 0; i<5; i++){
 8000dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000de2:	3301      	adds	r3, #1
 8000de4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	ddeb      	ble.n	8000dc8 <main+0x194>
 8000df0:	e7e6      	b.n	8000dc0 <main+0x18c>
 8000df2:	bf00      	nop
 8000df4:	58021000 	.word	0x58021000
 8000df8:	58020800 	.word	0x58020800
 8000dfc:	240006f4 	.word	0x240006f4
 8000e00:	58020400 	.word	0x58020400
 8000e04:	24000578 	.word	0x24000578
 8000e08:	240006a8 	.word	0x240006a8
 8000e0c:	24000494 	.word	0x24000494
 8000e10:	24000740 	.word	0x24000740
 8000e14:	58020c00 	.word	0x58020c00
 8000e18:	240009b4 	.word	0x240009b4
 8000e1c:	240004e0 	.word	0x240004e0
 8000e20:	240003fc 	.word	0x240003fc

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b09c      	sub	sp, #112	; 0x70
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	224c      	movs	r2, #76	; 0x4c
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f00b fd2e 	bl	800c894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00b fd28 	bl	800c894 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f005 fce7 	bl	8006818 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <SystemClock_Config+0xec>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <SystemClock_Config+0xec>)
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <SystemClock_Config+0xec>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e66:	bf00      	nop
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <SystemClock_Config+0xec>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e74:	d1f8      	bne.n	8000e68 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <SystemClock_Config+0xf0>)
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <SystemClock_Config+0xf0>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000e9c:	232c      	movs	r3, #44	; 0x2c
 8000e9e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eac:	230c      	movs	r3, #12
 8000eae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 fce5 	bl	800688c <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ec8:	f000 f86a 	bl	8000fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	233f      	movs	r3, #63	; 0x3f
 8000ece:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f006 f876 	bl	8006fe4 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000efe:	f000 f84f 	bl	8000fa0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f02:	f006 fa25 	bl	8007350 <HAL_RCC_EnableCSS>
}
 8000f06:	bf00      	nop
 8000f08:	3770      	adds	r7, #112	; 0x70
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58024800 	.word	0x58024800
 8000f14:	58024400 	.word	0x58024400

08000f18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ae      	sub	sp, #184	; 0xb8
 8000f1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	22b4      	movs	r2, #180	; 0xb4
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00b fcb5 	bl	800c894 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f2e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8000f34:	230f      	movs	r3, #15
 8000f36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f44:	23c0      	movs	r3, #192	; 0xc0
 8000f46:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000f4c:	f640 3386 	movw	r3, #2950	; 0xb86
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fbfa 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000f66:	f000 f81b 	bl	8000fa0 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	37b8      	adds	r7, #184	; 0xb8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if (htim == &htim24)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d102      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		control_en = 1;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	240003fc 	.word	0x240003fc
 8000f9c:	240001fc 	.word	0x240001fc

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		GPIO_TypeDef *dir_port, uint16_t dir_pin) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	807b      	strh	r3, [r7, #2]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	601a      	str	r2, [r3, #0]
	dev->dir_port = dir_port;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	605a      	str	r2, [r3, #4]
	dev->dir_pin = dir_pin;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6858      	ldr	r0, [r3, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	891b      	ldrh	r3, [r3, #8]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f005 fc04 	bl	80067e4 <HAL_GPIO_WritePin>
	if (timHandle->Instance == TIM15) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <stepper_initialise+0x5c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d106      	bne.n	8000ff4 <stepper_initialise+0x48>
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_2);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fe99 	bl	8009d24 <HAL_TIM_PWM_Start>
	} else {
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
	}
}
 8000ff2:	e005      	b.n	8001000 <stepper_initialise+0x54>
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f008 fe92 	bl	8009d24 <HAL_TIM_PWM_Start>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40014000 	.word	0x40014000

0800100c <servo_initialise>:

void servo_initialise(Servo_Motor *dev, TIM_HandleTypeDef *timHandle) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->timHandle = timHandle;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f008 fe7e 	bl	8009d24 <HAL_TIM_PWM_Start>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <set_pwm>:

void set_pwm(TIM_HandleTypeDef *TIM_pwm, double freq, float duty_cycle) {
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	ed87 0b00 	vstr	d0, [r7]
 800103c:	ed87 1a02 	vstr	s2, [r7, #8]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	uint16_t ARR_value = 1000000 / freq; //1000000 come from 275MHz/275
 8001040:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80010a8 <set_pwm+0x78>
 8001044:	ed97 6b00 	vldr	d6, [r7]
 8001048:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800104c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001050:	ee17 3a90 	vmov	r3, s15
 8001054:	82fb      	strh	r3, [r7, #22]
	uint16_t CCRx_value = ARR_value * duty_cycle;
 8001056:	8afb      	ldrh	r3, [r7, #22]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001060:	edd7 7a02 	vldr	s15, [r7, #8]
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	82bb      	strh	r3, [r7, #20]
	TIM_pwm->Instance->ARR = ARR_value;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	8afa      	ldrh	r2, [r7, #22]
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
	if (TIM_pwm->Instance == TIM15) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <set_pwm+0x80>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d104      	bne.n	800108e <set_pwm+0x5e>
		TIM_pwm->Instance->CCR2 = CCRx_value;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	8aba      	ldrh	r2, [r7, #20]
 800108a:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		TIM_pwm->Instance->CCR1 = CCRx_value;
	}
}
 800108c:	e003      	b.n	8001096 <set_pwm+0x66>
		TIM_pwm->Instance->CCR1 = CCRx_value;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	8aba      	ldrh	r2, [r7, #20]
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	00000000 	.word	0x00000000
 80010ac:	412e8480 	.word	0x412e8480
 80010b0:	40014000 	.word	0x40014000
 80010b4:	00000000 	.word	0x00000000

080010b8 <servo_set_degree>:

void servo_set_degree(Servo_Motor *dev, uint8_t degree) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	 servo_set_degree does set your servo to your given value.

	 :param degree is degree of servo motor (0-180)
	 :return: None
	 */
	if (degree > 180) {
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2bb4      	cmp	r3, #180	; 0xb4
 80010c8:	d901      	bls.n	80010ce <servo_set_degree+0x16>
		degree = 180;
 80010ca:	23b4      	movs	r3, #180	; 0xb4
 80010cc:	70fb      	strb	r3, [r7, #3]
	}
	else if (degree < 0){
		degree = 0;
	}
	float cyc = (degree / 180.0) * 0.2;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010d8:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001110 <servo_set_degree+0x58>
 80010dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010e0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001118 <servo_set_degree+0x60>
 80010e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ec:	edc7 7a03 	vstr	s15, [r7, #12]
	set_pwm(dev->timHandle, 50, cyc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ed97 1a03 	vldr	s2, [r7, #12]
 80010f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001120 <servo_set_degree+0x68>
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff97 	bl	8001030 <set_pwm>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	00000000 	.word	0x00000000
 8001114:	40668000 	.word	0x40668000
 8001118:	9999999a 	.word	0x9999999a
 800111c:	3fc99999 	.word	0x3fc99999
 8001120:	00000000 	.word	0x00000000
 8001124:	40490000 	.word	0x40490000

08001128 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_SPI3_Init+0xa4>)
 800112e:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <MX_SPI3_Init+0xa8>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001138:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_SPI3_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001142:	2203      	movs	r2, #3
 8001144:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_SPI3_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001154:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001158:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_SPI3_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI3_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI3_Init+0xa4>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI3_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI3_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI3_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_SPI3_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI3_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_SPI3_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI3_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_SPI3_Init+0xa4>)
 80011b8:	f008 fb5e 	bl	8009878 <HAL_SPI_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80011c2:	f7ff feed 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	240002ec 	.word	0x240002ec
 80011d0:	40003c00 	.word	0x40003c00

080011d4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_SPI4_Init+0xa8>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_SPI4_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001200:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001204:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI4_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI4_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI4_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI4_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI4_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SPI4_Init+0xa4>)
 8001264:	f008 fb08 	bl	8009878 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800126e:	f7ff fe97 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000374 	.word	0x24000374
 800127c:	40013400 	.word	0x40013400

08001280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0b8      	sub	sp, #224	; 0xe0
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	22b4      	movs	r2, #180	; 0xb4
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00b faf7 	bl	800c894 <memset>
  if(spiHandle->Instance==SPI3)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_SPI_MspInit+0x150>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d143      	bne.n	8001338 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fa48 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80012ca:	f7ff fe69 	bl	8000fa0 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d4:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800130a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800130e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001324:	2306      	movs	r3, #6
 8001326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800132e:	4619      	mov	r1, r3
 8001330:	4829      	ldr	r0, [pc, #164]	; (80013d8 <HAL_SPI_MspInit+0x158>)
 8001332:	f005 f8af 	bl	8006494 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001336:	e047      	b.n	80013c8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_SPI_MspInit+0x15c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d142      	bne.n	80013c8 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f006 f9ff 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 800135c:	f7ff fe20 	bl	8000fa0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_14;
 800139c:	f244 0324 	movw	r3, #16420	; 0x4024
 80013a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013b6:	2305      	movs	r3, #5
 80013b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <HAL_SPI_MspInit+0x160>)
 80013c4:	f005 f866 	bl	8006494 <HAL_GPIO_Init>
}
 80013c8:	bf00      	nop
 80013ca:	37e0      	adds	r7, #224	; 0xe0
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40003c00 	.word	0x40003c00
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020800 	.word	0x58020800
 80013dc:	40013400 	.word	0x40013400
 80013e0:	58021000 	.word	0x58021000

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x30>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x30>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x30>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58024400 	.word	0x58024400

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800141c:	f006 f97e 	bl	800771c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x8>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f001 fbea 	bl	8002c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream0_IRQHandler+0x10>)
 8001476:	f003 fea7 	bl	80051c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2400078c 	.word	0x2400078c

08001484 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <ADC3_IRQHandler+0x10>)
 800148a:	f002 f889 	bl	80035a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400027c 	.word	0x2400027c

08001498 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM24_IRQHandler+0x10>)
 800149e:	f008 fe03 	bl	800a0a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	240003fc 	.word	0x240003fc

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_kill>:

int _kill(int pid, int sig)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c6:	f00b f9ad 	bl	800c824 <__errno>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2216      	movs	r2, #22
 80014ce:	601a      	str	r2, [r3, #0]
	return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_exit>:

void _exit (int status)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffe7 	bl	80014bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ee:	e7fe      	b.n	80014ee <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f00b f912 	bl	800c824 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	24050000 	.word	0x24050000
 800162c:	00000400 	.word	0x00000400
 8001630:	24000200 	.word	0x24000200
 8001634:	24000a58 	.word	0x24000a58

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <SystemInit+0xd0>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <SystemInit+0xd0>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <SystemInit+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	2b06      	cmp	r3, #6
 8001656:	d807      	bhi.n	8001668 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <SystemInit+0xd4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 030f 	bic.w	r3, r3, #15
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <SystemInit+0xd4>)
 8001662:	f043 0307 	orr.w	r3, r3, #7
 8001666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <SystemInit+0xd8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a28      	ldr	r2, [pc, #160]	; (8001710 <SystemInit+0xd8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <SystemInit+0xd8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <SystemInit+0xd8>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <SystemInit+0xd8>)
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <SystemInit+0xdc>)
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <SystemInit+0xd4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <SystemInit+0xd4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 030f 	bic.w	r3, r3, #15
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <SystemInit+0xd4>)
 800169c:	f043 0307 	orr.w	r3, r3, #7
 80016a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <SystemInit+0xd8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <SystemInit+0xd8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <SystemInit+0xd8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <SystemInit+0xd8>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <SystemInit+0xe0>)
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <SystemInit+0xd8>)
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <SystemInit+0xe4>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <SystemInit+0xd8>)
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <SystemInit+0xe8>)
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <SystemInit+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <SystemInit+0xd8>)
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <SystemInit+0xe8>)
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <SystemInit+0xd8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <SystemInit+0xd8>)
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <SystemInit+0xe8>)
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SystemInit+0xd8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <SystemInit+0xd8>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <SystemInit+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <SystemInit+0xec>)
 80016f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016fc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	52002000 	.word	0x52002000
 8001710:	58024400 	.word	0x58024400
 8001714:	eaf6ed7f 	.word	0xeaf6ed7f
 8001718:	02020200 	.word	0x02020200
 800171c:	01ff0000 	.word	0x01ff0000
 8001720:	01010280 	.word	0x01010280
 8001724:	52004000 	.word	0x52004000

08001728 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00b f8ac 	bl	800c894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <MX_TIM1_Init+0xb0>)
 800174a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_TIM1_Init+0xac>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_TIM1_Init+0xac>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM1_Init+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM1_Init+0xac>)
 800179e:	f008 fbdd 	bl	8009f5c <HAL_TIM_Encoder_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017a8:	f7ff fbfa 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM1_Init+0xac>)
 80017be:	f009 fc07 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017c8:	f7ff fbea 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	240005c4 	.word	0x240005c4
 80017d8:	40010000 	.word	0x40010000

080017dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00b f852 	bl	800c894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_TIM2_Init+0xa4>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001822:	2301      	movs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM2_Init+0xa4>)
 800184e:	f008 fb85 	bl	8009f5c <HAL_TIM_Encoder_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001858:	f7ff fba2 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM2_Init+0xa4>)
 800186a:	f009 fbb1 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001874:	f7ff fb94 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24000610 	.word	0x24000610

08001884 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00a fffe 	bl	800c894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <MX_TIM3_Init+0xa8>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_TIM3_Init+0xa4>)
 80018f4:	f008 fb32 	bl	8009f5c <HAL_TIM_Encoder_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018fe:	f7ff fb4f 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190a:	463b      	mov	r3, r7
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <MX_TIM3_Init+0xa4>)
 8001910:	f009 fb5e 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800191a:	f7ff fb41 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400052c 	.word	0x2400052c
 800192c:	40000400 	.word	0x40000400

08001930 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00a ffa8 	bl	800c894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <MX_TIM4_Init+0xa4>)
 8001950:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <MX_TIM4_Init+0xa8>)
 8001952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_TIM4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM4_Init+0xa4>)
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM4_Init+0xa4>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_TIM4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001974:	2301      	movs	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800197c:	2301      	movs	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM4_Init+0xa4>)
 80019a0:	f008 fadc 	bl	8009f5c <HAL_TIM_Encoder_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019aa:	f7ff faf9 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM4_Init+0xa4>)
 80019bc:	f009 fb08 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80019c6:	f7ff faeb 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	24000448 	.word	0x24000448
 80019d8:	40000800 	.word	0x40000800

080019dc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	615a      	str	r2, [r3, #20]
 8001a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <MX_TIM12_Init+0xc4>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 275-1;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001a0e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a1c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a2a:	481c      	ldr	r0, [pc, #112]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a2c:	f008 f845 	bl	8009aba <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001a36:	f7ff fab3 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4619      	mov	r1, r3
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a48:	f008 fd62 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001a52:	f7ff faa5 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a58:	f008 f90c 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001a62:	f7ff fa9d 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	; 0x60
 8001a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8001a6a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001a6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a80:	f008 fc32 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001a8a:	f7ff fa89 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM12_Init+0xc0>)
 8001a90:	f000 fc8e 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	240006f4 	.word	0x240006f4
 8001aa0:	40001800 	.word	0x40001800

08001aa4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <MX_TIM13_Init+0x9c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001ac4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001ac8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ae4:	4815      	ldr	r0, [pc, #84]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001ae6:	f007 ffe8 	bl	8009aba <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8001af0:	f7ff fa56 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001af4:	4811      	ldr	r0, [pc, #68]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001af6:	f008 f8bd 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001b00:	f7ff fa4e 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001b08:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001b1e:	f008 fbe3 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001b28:	f7ff fa3a 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM13_Init+0x98>)
 8001b2e:	f000 fc3f 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24000578 	.word	0x24000578
 8001b40:	40001c00 	.word	0x40001c00

08001b44 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <MX_TIM14_Init+0x9c>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b64:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001b68:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b76:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b84:	4815      	ldr	r0, [pc, #84]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b86:	f007 ff98 	bl	8009aba <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8001b90:	f7ff fa06 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001b96:	f008 f86d 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8001ba0:	f7ff f9fe 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	; 0x60
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001ba8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001bac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001bbe:	f008 fb93 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8001bc8:	f7ff f9ea 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM14_Init+0x98>)
 8001bce:	f000 fbef 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	240006a8 	.word	0x240006a8
 8001be0:	40002000 	.word	0x40002000

08001be4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b098      	sub	sp, #96	; 0x60
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2234      	movs	r2, #52	; 0x34
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00a fe3f 	bl	800c894 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c18:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <MX_TIM15_Init+0x10c>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001c22:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c30:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c44:	4829      	ldr	r0, [pc, #164]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c46:	f008 f815 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001c50:	f7ff f9a6 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c60:	4619      	mov	r1, r3
 8001c62:	4822      	ldr	r0, [pc, #136]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c64:	f009 f9b4 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001c6e:	f7ff f997 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c72:	2360      	movs	r3, #96	; 0x60
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8001c76:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c94:	2204      	movs	r2, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_TIM15_Init+0x108>)
 8001c9a:	f008 fb25 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8001ca4:	f7ff f97c 	bl	8000fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <MX_TIM15_Init+0x108>)
 8001cd0:	f009 fa1a 	bl	800b108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001cda:	f7ff f961 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cde:	4803      	ldr	r0, [pc, #12]	; (8001cec <MX_TIM15_Init+0x108>)
 8001ce0:	f000 fb66 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001ce4:	bf00      	nop
 8001ce6:	3760      	adds	r7, #96	; 0x60
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	24000494 	.word	0x24000494
 8001cf0:	40014000 	.word	0x40014000

08001cf4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	; 0x50
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2234      	movs	r2, #52	; 0x34
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00a fdbd 	bl	800c894 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d1c:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <MX_TIM16_Init+0xf4>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001d26:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d34:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d48:	4826      	ldr	r0, [pc, #152]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d4a:	f007 feb6 	bl	8009aba <HAL_TIM_Base_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001d54:	f7ff f924 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d58:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d5a:	f007 ff8b 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001d64:	f7ff f91c 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d68:	2360      	movs	r3, #96	; 0x60
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001d6c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d76:	2300      	movs	r3, #0
 8001d78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4815      	ldr	r0, [pc, #84]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001d90:	f008 faaa 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8001d9a:	f7ff f901 	bl	8000fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001dc6:	f009 f99f 	bl	800b108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8001dd0:	f7ff f8e6 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM16_Init+0xf0>)
 8001dd6:	f000 faeb 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001dda:	bf00      	nop
 8001ddc:	3750      	adds	r7, #80	; 0x50
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	24000740 	.word	0x24000740
 8001de8:	40014400 	.word	0x40014400

08001dec <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b094      	sub	sp, #80	; 0x50
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e06:	463b      	mov	r3, r7
 8001e08:	2234      	movs	r2, #52	; 0x34
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00a fd41 	bl	800c894 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <MX_TIM17_Init+0xf4>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001e1e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e2c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e40:	4826      	ldr	r0, [pc, #152]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e42:	f007 fe3a 	bl	8009aba <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001e4c:	f7ff f8a8 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e50:	4822      	ldr	r0, [pc, #136]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e52:	f007 ff0f 	bl	8009c74 <HAL_TIM_PWM_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001e5c:	f7ff f8a0 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e60:	2360      	movs	r3, #96	; 0x60
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001e64:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4815      	ldr	r0, [pc, #84]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001e88:	f008 fa2e 	bl	800a2e8 <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8001e92:	f7ff f885 	bl	8000fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001ebe:	f009 f923 	bl	800b108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8001ec8:	f7ff f86a 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <MX_TIM17_Init+0xf0>)
 8001ece:	f000 fa6f 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001ed2:	bf00      	nop
 8001ed4:	3750      	adds	r7, #80	; 0x50
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	240004e0 	.word	0x240004e0
 8001ee0:	40014800 	.word	0x40014800

08001ee4 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f04:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <MX_TIM23_Init+0x9c>)
 8001f06:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001f0e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001f2a:	4814      	ldr	r0, [pc, #80]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f2c:	f007 fdc5 	bl	8009aba <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8001f36:	f7ff f833 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f48:	f008 fae2 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8001f52:	f7ff f825 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM23_Init+0x98>)
 8001f64:	f009 f834 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8001f6e:	f7ff f817 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2400065c 	.word	0x2400065c
 8001f80:	4000e000 	.word	0x4000e000

08001f84 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_TIM24_Init+0x98>)
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <MX_TIM24_Init+0x9c>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_TIM24_Init+0x98>)
 8001faa:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001fae:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_TIM24_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM24_Init+0x98>)
 8001fb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fbc:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_TIM24_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_TIM24_Init+0x98>)
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <MX_TIM24_Init+0x98>)
 8001fcc:	f007 fd75 	bl	8009aba <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8001fd6:	f7fe ffe3 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_TIM24_Init+0x98>)
 8001fe8:	f008 fa92 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8001ff2:	f7fe ffd5 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_TIM24_Init+0x98>)
 8002004:	f008 ffe4 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800200e:	f7fe ffc7 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	240003fc 	.word	0x240003fc
 8002020:	4000e400 	.word	0x4000e400

08002024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b090      	sub	sp, #64	; 0x40
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12f      	bne.n	80020a6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4b69      	ldr	r3, [pc, #420]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800204c:	4a67      	ldr	r2, [pc, #412]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002064:	4b61      	ldr	r3, [pc, #388]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206a:	4a60      	ldr	r2, [pc, #384]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002074:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002082:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002094:	2301      	movs	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209c:	4619      	mov	r1, r3
 800209e:	4854      	ldr	r0, [pc, #336]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80020a0:	f004 f9f8 	bl	8006494 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020a4:	e09b      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d12e      	bne.n	800210e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b0:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020b6:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020c0:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a45      	ldr	r2, [pc, #276]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b43      	ldr	r3, [pc, #268]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ec:	2303      	movs	r3, #3
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fc:	2301      	movs	r3, #1
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	483b      	ldr	r0, [pc, #236]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002108:	f004 f9c4 	bl	8006494 <HAL_GPIO_Init>
}
 800210c:	e067      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12e      	bne.n	8002176 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	4a33      	ldr	r2, [pc, #204]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 800212a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002154:	23c0      	movs	r3, #192	; 0xc0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002164:	2302      	movs	r3, #2
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216c:	4619      	mov	r1, r3
 800216e:	4823      	ldr	r0, [pc, #140]	; (80021fc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002170:	f004 f990 	bl	8006494 <HAL_GPIO_Init>
}
 8002174:	e033      	b.n	80021de <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12e      	bne.n	80021de <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002186:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ce:	2302      	movs	r3, #2
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	480a      	ldr	r0, [pc, #40]	; (8002204 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80021da:	f004 f95b 	bl	8006494 <HAL_GPIO_Init>
}
 80021de:	bf00      	nop
 80021e0:	3740      	adds	r7, #64	; 0x40
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	58024400 	.word	0x58024400
 80021f0:	58021000 	.word	0x58021000
 80021f4:	58020000 	.word	0x58020000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	58020800 	.word	0x58020800
 8002200:	40000800 	.word	0x40000800
 8002204:	58020c00 	.word	0x58020c00

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4d      	ldr	r2, [pc, #308]	; (800234c <HAL_TIM_Base_MspInit+0x144>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10f      	bne.n	800223a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002238:	e084      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM13)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_TIM_Base_MspInit+0x14c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10f      	bne.n	8002264 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224a:	4a41      	ldr	r2, [pc, #260]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 800224c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002254:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	6a3b      	ldr	r3, [r7, #32]
}
 8002262:	e06f      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM14)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_TIM_Base_MspInit+0x150>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10f      	bne.n	800228e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002274:	4a36      	ldr	r2, [pc, #216]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	69fb      	ldr	r3, [r7, #28]
}
 800228c:	e05a      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM16)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a32      	ldr	r2, [pc, #200]	; (800235c <HAL_TIM_Base_MspInit+0x154>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10f      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 800229a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
}
 80022b6:	e045      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM17)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_TIM_Base_MspInit+0x158>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10f      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
}
 80022e0:	e030      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM23)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_TIM_Base_MspInit+0x15c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d10f      	bne.n	800230c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 80022fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
}
 800230a:	e01b      	b.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM24)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_TIM_Base_MspInit+0x160>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d116      	bne.n	8002344 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002318:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800231c:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 800231e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002322:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_TIM_Base_MspInit+0x148>)
 8002328:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	20a2      	movs	r0, #162	; 0xa2
 800233a:	f002 fbb6 	bl	8004aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 800233e:	20a2      	movs	r0, #162	; 0xa2
 8002340:	f002 fbcd 	bl	8004ade <HAL_NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40001800 	.word	0x40001800
 8002350:	58024400 	.word	0x58024400
 8002354:	40001c00 	.word	0x40001c00
 8002358:	40002000 	.word	0x40002000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800
 8002364:	4000e000 	.word	0x4000e000
 8002368:	4000e400 	.word	0x4000e400

0800236c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10e      	bne.n	800239c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_TIM_PWM_MspInit+0x40>)
 8002380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_TIM_PWM_MspInit+0x40>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_TIM_PWM_MspInit+0x40>)
 8002390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40014000 	.word	0x40014000
 80023ac:	58024400 	.word	0x58024400

080023b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08e      	sub	sp, #56	; 0x38
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a70      	ldr	r2, [pc, #448]	; (8002590 <HAL_TIM_MspPostInit+0x1e0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d120      	bne.n	8002414 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002402:	2302      	movs	r3, #2
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	4862      	ldr	r0, [pc, #392]	; (8002598 <HAL_TIM_MspPostInit+0x1e8>)
 800240e:	f004 f841 	bl	8006494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002412:	e0b9      	b.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM13)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a60      	ldr	r2, [pc, #384]	; (800259c <HAL_TIM_MspPostInit+0x1ec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11f      	bne.n	800245e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	4a5b      	ldr	r2, [pc, #364]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800243c:	2340      	movs	r3, #64	; 0x40
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800244c:	2309      	movs	r3, #9
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4852      	ldr	r0, [pc, #328]	; (80025a0 <HAL_TIM_MspPostInit+0x1f0>)
 8002458:	f004 f81c 	bl	8006494 <HAL_GPIO_Init>
}
 800245c:	e094      	b.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM14)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_TIM_MspPostInit+0x1f4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d11f      	bne.n	80024a8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002496:	2309      	movs	r3, #9
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	483f      	ldr	r0, [pc, #252]	; (80025a0 <HAL_TIM_MspPostInit+0x1f0>)
 80024a2:	f003 fff7 	bl	8006494 <HAL_GPIO_Init>
}
 80024a6:	e06f      	b.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM15)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3e      	ldr	r2, [pc, #248]	; (80025a8 <HAL_TIM_MspPostInit+0x1f8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11f      	bne.n	80024f2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b8:	4a36      	ldr	r2, [pc, #216]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024d0:	2308      	movs	r3, #8
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80024e0:	2304      	movs	r3, #4
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	4619      	mov	r1, r3
 80024ea:	482d      	ldr	r0, [pc, #180]	; (80025a0 <HAL_TIM_MspPostInit+0x1f0>)
 80024ec:	f003 ffd2 	bl	8006494 <HAL_GPIO_Init>
}
 80024f0:	e04a      	b.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM16)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_TIM_MspPostInit+0x1fc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d120      	bne.n	800253e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800252c:	2301      	movs	r3, #1
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002534:	4619      	mov	r1, r3
 8002536:	4818      	ldr	r0, [pc, #96]	; (8002598 <HAL_TIM_MspPostInit+0x1e8>)
 8002538:	f003 ffac 	bl	8006494 <HAL_GPIO_Init>
}
 800253c:	e024      	b.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM17)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_TIM_MspPostInit+0x200>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d11f      	bne.n	8002588 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_TIM_MspPostInit+0x1e4>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002578:	2301      	movs	r3, #1
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_TIM_MspPostInit+0x1e8>)
 8002584:	f003 ff86 	bl	8006494 <HAL_GPIO_Init>
}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40001800 	.word	0x40001800
 8002594:	58024400 	.word	0x58024400
 8002598:	58020400 	.word	0x58020400
 800259c:	40001c00 	.word	0x40001c00
 80025a0:	58020000 	.word	0x58020000
 80025a4:	40002000 	.word	0x40002000
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800

080025b4 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_UART4_Init+0x90>)
 80025ba:	4a23      	ldr	r2, [pc, #140]	; (8002648 <MX_UART4_Init+0x94>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <MX_UART4_Init+0x90>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_UART4_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_UART4_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <MX_UART4_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_UART4_Init+0x90>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_UART4_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_UART4_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_UART4_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_UART4_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_UART4_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025fc:	4811      	ldr	r0, [pc, #68]	; (8002644 <MX_UART4_Init+0x90>)
 80025fe:	f008 fe41 	bl	800b284 <HAL_UART_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002608:	f7fe fcca 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800260c:	2100      	movs	r1, #0
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <MX_UART4_Init+0x90>)
 8002610:	f00a f83e 	bl	800c690 <HAL_UARTEx_SetTxFifoThreshold>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800261a:	f7fe fcc1 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <MX_UART4_Init+0x90>)
 8002622:	f00a f873 	bl	800c70c <HAL_UARTEx_SetRxFifoThreshold>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800262c:	f7fe fcb8 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_UART4_Init+0x90>)
 8002632:	f009 fff4 	bl	800c61e <HAL_UARTEx_DisableFifoMode>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800263c:	f7fe fcb0 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	24000924 	.word	0x24000924
 8002648:	40004c00 	.word	0x40004c00

0800264c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_UART5_Init+0x90>)
 8002652:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <MX_UART5_Init+0x94>)
 8002654:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_UART5_Init+0x90>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_UART5_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_UART5_Init+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_UART5_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_UART5_Init+0x90>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_UART5_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <MX_UART5_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_UART5_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_UART5_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_UART5_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_UART5_Init+0x90>)
 8002696:	f008 fdf5 	bl	800b284 <HAL_UART_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80026a0:	f7fe fc7e 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_UART5_Init+0x90>)
 80026a8:	f009 fff2 	bl	800c690 <HAL_UARTEx_SetTxFifoThreshold>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80026b2:	f7fe fc75 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <MX_UART5_Init+0x90>)
 80026ba:	f00a f827 	bl	800c70c <HAL_UARTEx_SetRxFifoThreshold>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80026c4:	f7fe fc6c 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <MX_UART5_Init+0x90>)
 80026ca:	f009 ffa8 	bl	800c61e <HAL_UARTEx_DisableFifoMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80026d4:	f7fe fc64 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	24000894 	.word	0x24000894
 80026e0:	40005000 	.word	0x40005000

080026e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_USART2_UART_Init+0x90>)
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <MX_USART2_UART_Init+0x94>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <MX_USART2_UART_Init+0x90>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <MX_USART2_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <MX_USART2_UART_Init+0x90>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_USART2_UART_Init+0x90>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_USART2_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800272c:	4811      	ldr	r0, [pc, #68]	; (8002774 <MX_USART2_UART_Init+0x90>)
 800272e:	f008 fda9 	bl	800b284 <HAL_UART_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002738:	f7fe fc32 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002740:	f009 ffa6 	bl	800c690 <HAL_UARTEx_SetTxFifoThreshold>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800274a:	f7fe fc29 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274e:	2100      	movs	r1, #0
 8002750:	4808      	ldr	r0, [pc, #32]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002752:	f009 ffdb 	bl	800c70c <HAL_UARTEx_SetRxFifoThreshold>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800275c:	f7fe fc20 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_USART2_UART_Init+0x90>)
 8002762:	f009 ff5c 	bl	800c61e <HAL_UARTEx_DisableFifoMode>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7fe fc18 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	240009b4 	.word	0x240009b4
 8002778:	40004400 	.word	0x40004400

0800277c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <MX_USART3_UART_Init+0x90>)
 8002782:	4a23      	ldr	r2, [pc, #140]	; (8002810 <MX_USART3_UART_Init+0x94>)
 8002784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <MX_USART3_UART_Init+0x90>)
 8002788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800278c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <MX_USART3_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <MX_USART3_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <MX_USART3_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027c4:	4811      	ldr	r0, [pc, #68]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027c6:	f008 fd5d 	bl	800b284 <HAL_UART_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80027d0:	f7fe fbe6 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d4:	2100      	movs	r1, #0
 80027d6:	480d      	ldr	r0, [pc, #52]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027d8:	f009 ff5a 	bl	800c690 <HAL_UARTEx_SetTxFifoThreshold>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80027e2:	f7fe fbdd 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e6:	2100      	movs	r1, #0
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027ea:	f009 ff8f 	bl	800c70c <HAL_UARTEx_SetRxFifoThreshold>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027f4:	f7fe fbd4 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <MX_USART3_UART_Init+0x90>)
 80027fa:	f009 ff10 	bl	800c61e <HAL_UARTEx_DisableFifoMode>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002804:	f7fe fbcc 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	24000804 	.word	0x24000804
 8002810:	40004800 	.word	0x40004800

08002814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0bc      	sub	sp, #240	; 0xf0
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800282c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002830:	22b4      	movs	r2, #180	; 0xb4
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f00a f82d 	bl	800c894 <memset>
  if(uartHandle->Instance==UART4)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4aa8      	ldr	r2, [pc, #672]	; (8002ae0 <HAL_UART_MspInit+0x2cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d143      	bne.n	80028cc <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002852:	4618      	mov	r0, r3
 8002854:	f004 ff7e 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800285e:	f7fe fb9f 	bl	8000fa0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002862:	4ba0      	ldr	r3, [pc, #640]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002868:	4a9e      	ldr	r2, [pc, #632]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 800286a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800286e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002872:	4b9c      	ldr	r3, [pc, #624]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	4b98      	ldr	r3, [pc, #608]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002886:	4a97      	ldr	r2, [pc, #604]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002890:	4b94      	ldr	r3, [pc, #592]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800289e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80028b8:	2306      	movs	r3, #6
 80028ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028c2:	4619      	mov	r1, r3
 80028c4:	4888      	ldr	r0, [pc, #544]	; (8002ae8 <HAL_UART_MspInit+0x2d4>)
 80028c6:	f003 fde5 	bl	8006494 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028ca:	e105      	b.n	8002ad8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==UART5)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a86      	ldr	r2, [pc, #536]	; (8002aec <HAL_UART_MspInit+0x2d8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d143      	bne.n	800295e <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80028d6:	2302      	movs	r3, #2
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 ff35 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80028f0:	f7fe fb56 	bl	8000fa0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80028f4:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 80028f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028fa:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 80028fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002904:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002918:	4a72      	ldr	r2, [pc, #456]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 800291a:	f043 0302 	orr.w	r3, r3, #2
 800291e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002922:	4b70      	ldr	r3, [pc, #448]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002930:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800294a:	230e      	movs	r3, #14
 800294c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002954:	4619      	mov	r1, r3
 8002956:	4866      	ldr	r0, [pc, #408]	; (8002af0 <HAL_UART_MspInit+0x2dc>)
 8002958:	f003 fd9c 	bl	8006494 <HAL_GPIO_Init>
}
 800295c:	e0bc      	b.n	8002ad8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a64      	ldr	r2, [pc, #400]	; (8002af4 <HAL_UART_MspInit+0x2e0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d16f      	bne.n	8002a48 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002968:	2302      	movs	r3, #2
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002976:	4618      	mov	r0, r3
 8002978:	f004 feec 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002982:	f7fe fb0d 	bl	8000fa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800298c:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 80029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029aa:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029c2:	2360      	movs	r3, #96	; 0x60
 80029c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029da:	2307      	movs	r3, #7
 80029dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029e4:	4619      	mov	r1, r3
 80029e6:	4844      	ldr	r0, [pc, #272]	; (8002af8 <HAL_UART_MspInit+0x2e4>)
 80029e8:	f003 fd54 	bl	8006494 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 80029ee:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <HAL_UART_MspInit+0x2ec>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 80029f4:	222b      	movs	r2, #43	; 0x2b
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a2a:	4834      	ldr	r0, [pc, #208]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a2c:	f002 f872 	bl	8004b14 <HAL_DMA_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002a36:	f7fe fab3 	bl	8000fa0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a40:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <HAL_UART_MspInit+0x2e8>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a46:	e047      	b.n	8002ad8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	; (8002b04 <HAL_UART_MspInit+0x2f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d142      	bne.n	8002ad8 <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a52:	2302      	movs	r3, #2
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fe77 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002a6c:	f7fe fa98 	bl	8000fa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_UART_MspInit+0x2d0>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002aac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <HAL_UART_MspInit+0x2dc>)
 8002ad4:	f003 fcde 	bl	8006494 <HAL_GPIO_Init>
}
 8002ad8:	bf00      	nop
 8002ada:	37f0      	adds	r7, #240	; 0xf0
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40004c00 	.word	0x40004c00
 8002ae4:	58024400 	.word	0x58024400
 8002ae8:	58020000 	.word	0x58020000
 8002aec:	40005000 	.word	0x40005000
 8002af0:	58020400 	.word	0x58020400
 8002af4:	40004400 	.word	0x40004400
 8002af8:	58020c00 	.word	0x58020c00
 8002afc:	2400078c 	.word	0x2400078c
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40004800 	.word	0x40004800

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b0c:	f7fe fd94 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f009 fe7b 	bl	800c830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7fe f87b 	bl	8000c34 <main>
  bx  lr
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b48:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002b4c:	0800f55c 	.word	0x0800f55c
  ldr r2, =_sbss
 8002b50:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002b54:	24000a58 	.word	0x24000a58

08002b58 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f001 ff96 	bl	8004a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b68:	f004 fc02 	bl	8007370 <HAL_RCC_GetSysClockFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_Init+0x68>)
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	4913      	ldr	r1, [pc, #76]	; (8002bc8 <HAL_Init+0x6c>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_Init+0x68>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_Init+0x6c>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_Init+0x70>)
 8002b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_Init+0x74>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f000 f814 	bl	8002bd4 <HAL_InitTick>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e002      	b.n	8002bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb6:	f7fe fc15 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	0800f128 	.word	0x0800f128
 8002bcc:	24000004 	.word	0x24000004
 8002bd0:	24000000 	.word	0x24000000

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_InitTick+0x60>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e021      	b.n	8002c2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_InitTick+0x64>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_InitTick+0x60>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 ff7b 	bl	8004afa <HAL_SYSTICK_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00e      	b.n	8002c2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d80a      	bhi.n	8002c2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f001 ff45 	bl	8004aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c20:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <HAL_InitTick+0x68>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2400000c 	.word	0x2400000c
 8002c38:	24000000 	.word	0x24000000
 8002c3c:	24000008 	.word	0x24000008

08002c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x20>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x24>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_IncTick+0x24>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2400000c 	.word	0x2400000c
 8002c64:	24000a44 	.word	0x24000a44

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_GetTick+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	24000a44 	.word	0x24000a44

08002c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <LL_ADC_SetOffset+0x60>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10b      	bne.n	8002d24 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d22:	e00b      	b.n	8002d3c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	58026000 	.word	0x58026000

08002d4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	601a      	str	r2, [r3, #0]
  }
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58026000 	.word	0x58026000

08002df0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <LL_ADC_SetOffsetSaturation+0x40>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10e      	bne.n	8002e22 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	58026000 	.word	0x58026000

08002e34 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <LL_ADC_SetOffsetSign+0x40>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10e      	bne.n	8002e66 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3360      	adds	r3, #96	; 0x60
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	58026000 	.word	0x58026000

08002e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3360      	adds	r3, #96	; 0x60
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <LL_ADC_SetOffsetState+0x50>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d108      	bne.n	8002eac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002eaa:	e007      	b.n	8002ebc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	58026000 	.word	0x58026000

08002ecc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3330      	adds	r3, #48	; 0x30
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	211f      	movs	r1, #31
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 011f 	and.w	r1, r3, #31
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0e5b      	lsrs	r3, r3, #25
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0d1b      	lsrs	r3, r3, #20
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2107      	movs	r1, #7
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0d1b      	lsrs	r3, r3, #20
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d115      	bne.n	8003008 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0318 	and.w	r3, r3, #24
 8002ff2:	4914      	ldr	r1, [pc, #80]	; (8003044 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ff4:	40d9      	lsrs	r1, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003006:	e014      	b.n	8003032 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0318 	and.w	r3, r3, #24
 800301e:	4909      	ldr	r1, [pc, #36]	; (8003044 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003020:	40d9      	lsrs	r1, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	400b      	ands	r3, r1
 8003026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	58026000 	.word	0x58026000
 8003044:	000fffff 	.word	0x000fffff

08003048 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 031f 	and.w	r3, r3, #31
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6093      	str	r3, [r2, #8]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	5fffffc0 	.word	0x5fffffc0

080030a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b8:	d101      	bne.n	80030be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	6fffffc0 	.word	0x6fffffc0

080030f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003108:	d101      	bne.n	800310e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <LL_ADC_IsEnabled+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_IsEnabled+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d101      	bne.n	800315a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d101      	bne.n	8003180 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1ee      	b.n	8003588 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fbcd 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff67 	bl	80030a4 <LL_ADC_IsDeepPowerDownEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff4d 	bl	8003080 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff82 	bl	80030f4 <LL_ADC_IsInternalRegulatorEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d114      	bne.n	8003220 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff66 	bl	80030cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003200:	4b8e      	ldr	r3, [pc, #568]	; (800343c <HAL_ADC_Init+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	4a8e      	ldr	r2, [pc, #568]	; (8003440 <HAL_ADC_Init+0x2b0>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	3301      	adds	r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003212:	e002      	b.n	800321a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3b01      	subs	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff65 	bl	80030f4 <LL_ADC_IsInternalRegulatorEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff76 	bl	8003142 <LL_ADC_REG_IsConversionOngoing>
 8003256:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8188 	bne.w	8003576 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 8184 	bne.w	8003576 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff4a 	bl	800311c <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d136      	bne.n	80032fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	; (8003444 <HAL_ADC_Init+0x2b4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_Init+0x112>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6a      	ldr	r2, [pc, #424]	; (8003448 <HAL_ADC_Init+0x2b8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10e      	bne.n	80032c0 <HAL_ADC_Init+0x130>
 80032a2:	4868      	ldr	r0, [pc, #416]	; (8003444 <HAL_ADC_Init+0x2b4>)
 80032a4:	f7ff ff3a 	bl	800311c <LL_ADC_IsEnabled>
 80032a8:	4604      	mov	r4, r0
 80032aa:	4867      	ldr	r0, [pc, #412]	; (8003448 <HAL_ADC_Init+0x2b8>)
 80032ac:	f7ff ff36 	bl	800311c <LL_ADC_IsEnabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4323      	orrs	r3, r4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <HAL_ADC_Init+0x142>
 80032c0:	4862      	ldr	r0, [pc, #392]	; (800344c <HAL_ADC_Init+0x2bc>)
 80032c2:	f7ff ff2b 	bl	800311c <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5a      	ldr	r2, [pc, #360]	; (8003444 <HAL_ADC_Init+0x2b4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_ADC_Init+0x15a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_ADC_Init+0x2b8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x15e>
 80032ea:	4a59      	ldr	r2, [pc, #356]	; (8003450 <HAL_ADC_Init+0x2c0>)
 80032ec:	e000      	b.n	80032f0 <HAL_ADC_Init+0x160>
 80032ee:	4a59      	ldr	r2, [pc, #356]	; (8003454 <HAL_ADC_Init+0x2c4>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7ff fcc2 	bl	8002c80 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_ADC_Init+0x2bc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d129      	bne.n	800335a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7e5b      	ldrb	r3, [r3, #25]
 800330a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003310:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003316:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d013      	beq.n	8003348 <HAL_ADC_Init+0x1b8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d00d      	beq.n	8003344 <HAL_ADC_Init+0x1b4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b1c      	cmp	r3, #28
 800332e:	d007      	beq.n	8003340 <HAL_ADC_Init+0x1b0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b18      	cmp	r3, #24
 8003336:	d101      	bne.n	800333c <HAL_ADC_Init+0x1ac>
 8003338:	2318      	movs	r3, #24
 800333a:	e006      	b.n	800334a <HAL_ADC_Init+0x1ba>
 800333c:	2300      	movs	r3, #0
 800333e:	e004      	b.n	800334a <HAL_ADC_Init+0x1ba>
 8003340:	2310      	movs	r3, #16
 8003342:	e002      	b.n	800334a <HAL_ADC_Init+0x1ba>
 8003344:	2308      	movs	r3, #8
 8003346:	e000      	b.n	800334a <HAL_ADC_Init+0x1ba>
 8003348:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800334a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003352:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e00e      	b.n	8003378 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7e5b      	ldrb	r3, [r3, #25]
 800335e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003364:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800336a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003372:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	3b01      	subs	r3, #1
 8003388:	045b      	lsls	r3, r3, #17
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_ADC_Init+0x2bc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d115      	bne.n	80033e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <HAL_ADC_Init+0x2c8>)
 80033be:	4013      	ands	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	69b9      	ldr	r1, [r7, #24]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	e009      	b.n	80033f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_ADC_Init+0x2cc>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	430b      	orrs	r3, r1
 80033f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fea1 	bl	8003142 <LL_ADC_REG_IsConversionOngoing>
 8003400:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff feae 	bl	8003168 <LL_ADC_INJ_IsConversionOngoing>
 800340c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 808e 	bne.w	8003532 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 808a 	bne.w	8003532 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_ADC_Init+0x2bc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d11b      	bne.n	8003460 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7e1b      	ldrb	r3, [r3, #24]
 800342c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003434:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e018      	b.n	800346e <HAL_ADC_Init+0x2de>
 800343c:	24000000 	.word	0x24000000
 8003440:	053e2d63 	.word	0x053e2d63
 8003444:	40022000 	.word	0x40022000
 8003448:	40022100 	.word	0x40022100
 800344c:	58026000 	.word	0x58026000
 8003450:	40022300 	.word	0x40022300
 8003454:	58026300 	.word	0x58026300
 8003458:	fff04007 	.word	0xfff04007
 800345c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7e1b      	ldrb	r3, [r3, #24]
 8003464:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4b46      	ldr	r3, [pc, #280]	; (8003590 <HAL_ADC_Init+0x400>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	69b9      	ldr	r1, [r7, #24]
 800347e:	430b      	orrs	r3, r1
 8003480:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003488:	2b01      	cmp	r3, #1
 800348a:	d137      	bne.n	80034fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3f      	ldr	r2, [pc, #252]	; (8003594 <HAL_ADC_Init+0x404>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d116      	bne.n	80034ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_ADC_Init+0x408>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034ba:	430a      	orrs	r2, r1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	611a      	str	r2, [r3, #16]
 80034c8:	e020      	b.n	800350c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_ADC_Init+0x40c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034d8:	3a01      	subs	r2, #1
 80034da:	0411      	lsls	r1, r2, #16
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034ec:	430a      	orrs	r2, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	e007      	b.n	800350c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_ADC_Init+0x404>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d002      	beq.n	8003532 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 ffbb 	bl	80044a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10c      	bne.n	8003554 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f023 010f 	bic.w	r1, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
 8003552:	e007      	b.n	8003564 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020f 	bic.w	r2, r2, #15
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	f023 0303 	bic.w	r3, r3, #3
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
 8003574:	e007      	b.n	8003586 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003586:	7ffb      	ldrb	r3, [r7, #31]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	ffffbffc 	.word	0xffffbffc
 8003594:	58026000 	.word	0x58026000
 8003598:	fc00f81f 	.word	0xfc00f81f
 800359c:	fc00f81e 	.word	0xfc00f81e

080035a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x30>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a86      	ldr	r2, [pc, #536]	; (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x34>
 80035d0:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_ADC_IRQHandler+0x248>)
 80035d2:	e000      	b.n	80035d6 <HAL_ADC_IRQHandler+0x36>
 80035d4:	4b85      	ldr	r3, [pc, #532]	; (80037ec <HAL_ADC_IRQHandler+0x24c>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fd36 	bl	8003048 <LL_ADC_GetMultimode>
 80035dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <HAL_ADC_IRQHandler+0x78>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 f886 	bl	800471c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_ADC_IRQHandler+0x8c>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8083 	beq.w	800373e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07d      	beq.n	800373e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fc34 	bl	8002ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d062      	beq.n	8003730 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5d      	ldr	r2, [pc, #372]	; (80037e4 <HAL_ADC_IRQHandler+0x244>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d002      	beq.n	800367a <HAL_ADC_IRQHandler+0xda>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e000      	b.n	800367c <HAL_ADC_IRQHandler+0xdc>
 800367a:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_ADC_IRQHandler+0x240>)
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	4293      	cmp	r3, r2
 8003682:	d008      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d002      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b09      	cmp	r3, #9
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	e00c      	b.n	80036ba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4f      	ldr	r2, [pc, #316]	; (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d002      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x110>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_IRQHandler+0x112>
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80036b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d135      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d12e      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd33 	bl	8003142 <LL_ADC_REG_IsConversionOngoing>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020c 	bic.w	r2, r2, #12
 80036f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d112      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	661a      	str	r2, [r3, #96]	; 0x60
 8003716:	e00b      	b.n	8003730 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f96f 	bl	8003a14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_ADC_IRQHandler+0x1b2>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80a0 	beq.w	800389e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 809a 	beq.w	800389e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fbdf 	bl	8002f4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800378c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fb9a 	bl	8002ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003798:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d002      	beq.n	80037aa <HAL_ADC_IRQHandler+0x20a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	e000      	b.n	80037ac <HAL_ADC_IRQHandler+0x20c>
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d008      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b06      	cmp	r3, #6
 80037be:	d002      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d104      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	e014      	b.n	80037fa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00a      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x250>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e008      	b.n	80037f2 <HAL_ADC_IRQHandler+0x252>
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40022100 	.word	0x40022100
 80037e8:	40022300 	.word	0x40022300
 80037ec:	58026300 	.word	0x58026300
 80037f0:	4b84      	ldr	r3, [pc, #528]	; (8003a04 <HAL_ADC_IRQHandler+0x464>)
 80037f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d047      	beq.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_ADC_IRQHandler+0x27a>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d03f      	beq.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13a      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d133      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d12e      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fc96 	bl	8003168 <LL_ADC_INJ_IsConversionOngoing>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11a      	bne.n	8003878 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003850:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d112      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	661a      	str	r2, [r3, #96]	; 0x60
 8003876:	e00b      	b.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	f043 0210 	orr.w	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 ff1b 	bl	80046cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2260      	movs	r2, #96	; 0x60
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <HAL_ADC_IRQHandler+0x32c>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8b2 	bl	8003a28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_ADC_IRQHandler+0x35c>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 ff01 	bl	80046f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_ADC_IRQHandler+0x38c>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fef3 	bl	8004708 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d043      	beq.n	80039be <HAL_ADC_IRQHandler+0x41e>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03e      	beq.n	80039be <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003948:	2301      	movs	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
 800394c:	e021      	b.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_ADC_IRQHandler+0x464>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_ADC_IRQHandler+0x3c8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <HAL_ADC_IRQHandler+0x468>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_ADC_IRQHandler+0x3cc>
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_ADC_IRQHandler+0x46c>)
 800396a:	e000      	b.n	800396e <HAL_ADC_IRQHandler+0x3ce>
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_ADC_IRQHandler+0x470>)
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fb78 	bl	8003064 <LL_ADC_GetMultiDMATransfer>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800397a:	2301      	movs	r3, #1
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e008      	b.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800398e:	2301      	movs	r3, #1
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10e      	bne.n	80039b6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f843 	bl	8003a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d018      	beq.n	80039fa <HAL_ADC_IRQHandler+0x45a>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e2:	f043 0208 	orr.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fe73 	bl	80046e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022100 	.word	0x40022100
 8003a0c:	40022300 	.word	0x40022300
 8003a10:	58026300 	.word	0x58026300

08003a14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b0b9      	sub	sp, #228	; 0xe4
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4ab3      	ldr	r2, [pc, #716]	; (8003d40 <HAL_ADC_ConfigChannel+0x2f0>)
 8003a72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x34>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f000 bcfa 	b.w	8004478 <HAL_ADC_ConfigChannel+0xa28>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fb56 	bl	8003142 <LL_ADC_REG_IsConversionOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 84de 	bne.w	800445a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4aa8      	ldr	r2, [pc, #672]	; (8003d44 <HAL_ADC_ConfigChannel+0x2f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d033      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x76>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e9b      	lsrs	r3, r3, #26
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2201      	movs	r2, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	e01d      	b.n	8003b02 <HAL_ADC_ConfigChannel+0xb2>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2201      	movs	r2, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	69d1      	ldr	r1, [r2, #28]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7ff f9e8 	bl	8002ef2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fb0b 	bl	8003142 <LL_ADC_REG_IsConversionOngoing>
 8003b2c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fb17 	bl	8003168 <LL_ADC_INJ_IsConversionOngoing>
 8003b3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8270 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 826b 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f7ff fa06 	bl	8002f70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a76      	ldr	r2, [pc, #472]	; (8003d44 <HAL_ADC_ConfigChannel+0x2f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b88:	e032      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b8a:	4b6f      	ldr	r3, [pc, #444]	; (8003d48 <HAL_ADC_ConfigChannel+0x2f8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x160>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	e01d      	b.n	8003bec <HAL_ADC_ConfigChannel+0x19c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x186>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	e00a      	b.n	8003bec <HAL_ADC_ConfigChannel+0x19c>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d048      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6919      	ldr	r1, [r3, #16]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c08:	f7ff f86e 	bl	8002ce8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_ADC_ConfigChannel+0x2f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d119      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7ff f906 	bl	8002e34 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6919      	ldr	r1, [r3, #16]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1f0>
 8003c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3e:	e000      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x1f2>
 8003c40:	2300      	movs	r3, #0
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7ff f8d4 	bl	8002df0 <LL_ADC_SetOffsetSaturation>
 8003c48:	e1ee      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x212>
 8003c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c60:	e000      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x214>
 8003c62:	2300      	movs	r3, #0
 8003c64:	461a      	mov	r2, r3
 8003c66:	f7ff f8a1 	bl	8002dac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6919      	ldr	r1, [r3, #16]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	7e1b      	ldrb	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x230>
 8003c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c7e:	e000      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x232>
 8003c80:	2300      	movs	r3, #0
 8003c82:	461a      	mov	r2, r3
 8003c84:	f7ff f878 	bl	8002d78 <LL_ADC_SetDataRightShift>
 8003c88:	e1ce      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <HAL_ADC_ConfigChannel+0x2f4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f040 8181 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff f855 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x272>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f84a 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	e01e      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x2b0>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f83f 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e004      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x2c8>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	e01e      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x306>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d107      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e00a      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x306>
 8003d40:	47ff0000 	.word	0x47ff0000
 8003d44:	58026000 	.word	0x58026000
 8003d48:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d106      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f888 	bl	8002e78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe ffec 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x344>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe ffe1 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	f003 021f 	and.w	r2, r3, #31
 8003d92:	e01e      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x382>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe ffd6 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e004      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x39a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0e9b      	lsrs	r3, r3, #26
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3cc>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d106      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff f825 	bl	8002e78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe ff89 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x40a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe ff7e 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	0e9b      	lsrs	r3, r3, #26
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	e01e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x448>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe ff73 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e004      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x460>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e014      	b.n	8003eda <HAL_ADC_ConfigChannel+0x48a>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e004      	b.n	8003eda <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d106      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe ffc6 	bl	8002e78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe ff2a 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x4c8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2103      	movs	r1, #3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ff1f 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	0e9b      	lsrs	r3, r3, #26
 8003f12:	f003 021f 	and.w	r2, r3, #31
 8003f16:	e017      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x4f8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2103      	movs	r1, #3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe ff14 	bl	8002d4c <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e003      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x510>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	e011      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x534>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003f78:	2320      	movs	r3, #32
 8003f7a:	e003      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7e:	fab3 f383 	clz	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d14f      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2103      	movs	r1, #3
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe ff71 	bl	8002e78 <LL_ADC_SetOffsetState>
 8003f96:	e047      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fde:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004002:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	069b      	lsls	r3, r3, #26
 8004014:	429a      	cmp	r2, r3
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004026:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f875 	bl	800311c <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8219 	bne.w	800446c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fe ffbe 	bl	8002fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4aa1      	ldr	r2, [pc, #644]	; (80042d8 <HAL_ADC_ConfigChannel+0x888>)
 8004052:	4293      	cmp	r3, r2
 8004054:	f040 812e 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x630>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b09      	cmp	r3, #9
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e019      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x664>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004090:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800409c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	bf94      	ite	ls
 80040ae:	2301      	movls	r3, #1
 80040b0:	2300      	movhi	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d079      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x684>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d2:	e015      	b.n	8004100 <HAL_ADC_ConfigChannel+0x6b0>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x6d0>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	e017      	b.n	8004150 <HAL_ADC_ConfigChannel+0x700>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x726>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0e9b      	lsrs	r3, r3, #26
 8004166:	3301      	adds	r3, #1
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	051b      	lsls	r3, r3, #20
 8004174:	e018      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x758>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800418e:	2320      	movs	r3, #32
 8004190:	e003      	b.n	800419a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a8:	430b      	orrs	r3, r1
 80041aa:	e07e      	b.n	80042aa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x778>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c6:	e015      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x7a4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x7c4>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	e017      	b.n	8004244 <HAL_ADC_ConfigChannel+0x7f4>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	61bb      	str	r3, [r7, #24]
  return result;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x820>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	3b1e      	subs	r3, #30
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800426e:	e01b      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x858>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	60fb      	str	r3, [r7, #12]
  return result;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 021f 	and.w	r2, r3, #31
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	3b1e      	subs	r3, #30
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a8:	430b      	orrs	r3, r1
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fe fe5e 	bl	8002f70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f280 80d7 	bge.w	800446c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a06      	ldr	r2, [pc, #24]	; (80042dc <HAL_ADC_ConfigChannel+0x88c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x882>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_ADC_ConfigChannel+0x890>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10a      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x898>
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_ADC_ConfigChannel+0x894>)
 80042d4:	e009      	b.n	80042ea <HAL_ADC_ConfigChannel+0x89a>
 80042d6:	bf00      	nop
 80042d8:	47ff0000 	.word	0x47ff0000
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40022100 	.word	0x40022100
 80042e4:	40022300 	.word	0x40022300
 80042e8:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_ADC_ConfigChannel+0xa30>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fcee 	bl	8002ccc <LL_ADC_GetCommonPathInternalCh>
 80042f0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a62      	ldr	r2, [pc, #392]	; (8004484 <HAL_ADC_ConfigChannel+0xa34>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_ADC_ConfigChannel+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a61      	ldr	r2, [pc, #388]	; (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10e      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x8d6>
 8004308:	485e      	ldr	r0, [pc, #376]	; (8004484 <HAL_ADC_ConfigChannel+0xa34>)
 800430a:	f7fe ff07 	bl	800311c <LL_ADC_IsEnabled>
 800430e:	4604      	mov	r4, r0
 8004310:	485d      	ldr	r0, [pc, #372]	; (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 8004312:	f7fe ff03 	bl	800311c <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	4323      	orrs	r3, r4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e008      	b.n	8004338 <HAL_ADC_ConfigChannel+0x8e8>
 8004326:	4859      	ldr	r0, [pc, #356]	; (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 8004328:	f7fe fef8 	bl	800311c <LL_ADC_IsEnabled>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8084 	beq.w	8004446 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a53      	ldr	r2, [pc, #332]	; (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d132      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x95e>
 8004348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800434c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d12c      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a4c      	ldr	r2, [pc, #304]	; (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f040 8086 	bne.w	800446c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a47      	ldr	r2, [pc, #284]	; (8004484 <HAL_ADC_ConfigChannel+0xa34>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_ADC_ConfigChannel+0x924>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a46      	ldr	r2, [pc, #280]	; (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x928>
 8004374:	4a47      	ldr	r2, [pc, #284]	; (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 8004376:	e000      	b.n	800437a <HAL_ADC_ConfigChannel+0x92a>
 8004378:	4a41      	ldr	r2, [pc, #260]	; (8004480 <HAL_ADC_ConfigChannel+0xa30>)
 800437a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800437e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7fe fc8e 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_ADC_ConfigChannel+0xa48>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	4a42      	ldr	r2, [pc, #264]	; (800449c <HAL_ADC_ConfigChannel+0xa4c>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	3301      	adds	r3, #1
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800439e:	e002      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f9      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ac:	e05e      	b.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3b      	ldr	r2, [pc, #236]	; (80044a0 <HAL_ADC_ConfigChannel+0xa50>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d120      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x9aa>
 80043b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11a      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	; (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d14e      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <HAL_ADC_ConfigChannel+0xa34>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0x992>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x996>
 80043e2:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 80043e4:	e000      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x998>
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_ADC_ConfigChannel+0xa30>)
 80043e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7fe fc57 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f8:	e038      	b.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_ADC_ConfigChannel+0xa54>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d133      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
 8004404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d12d      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d128      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a19      	ldr	r2, [pc, #100]	; (8004484 <HAL_ADC_ConfigChannel+0xa34>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_ADC_ConfigChannel+0x9de>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x9e2>
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 8004430:	e000      	b.n	8004434 <HAL_ADC_ConfigChannel+0x9e4>
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <HAL_ADC_ConfigChannel+0xa30>)
 8004434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe fc31 	bl	8002ca6 <LL_ADC_SetCommonPathInternalCh>
 8004444:	e012      	b.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004458:	e008      	b.n	800446c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004474:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004478:	4618      	mov	r0, r3
 800447a:	37e4      	adds	r7, #228	; 0xe4
 800447c:	46bd      	mov	sp, r7
 800447e:	bd90      	pop	{r4, r7, pc}
 8004480:	58026300 	.word	0x58026300
 8004484:	40022000 	.word	0x40022000
 8004488:	40022100 	.word	0x40022100
 800448c:	58026000 	.word	0x58026000
 8004490:	c7520000 	.word	0xc7520000
 8004494:	40022300 	.word	0x40022300
 8004498:	24000000 	.word	0x24000000
 800449c:	053e2d63 	.word	0x053e2d63
 80044a0:	c3210000 	.word	0xc3210000
 80044a4:	cb840000 	.word	0xcb840000

080044a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6b      	ldr	r2, [pc, #428]	; (8004664 <ADC_ConfigureBoostMode+0x1bc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <ADC_ConfigureBoostMode+0x1c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6a      	ldr	r2, [pc, #424]	; (8004668 <ADC_ConfigureBoostMode+0x1c0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d109      	bne.n	80044d8 <ADC_ConfigureBoostMode+0x30>
 80044c4:	4b69      	ldr	r3, [pc, #420]	; (800466c <ADC_ConfigureBoostMode+0x1c4>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e008      	b.n	80044ea <ADC_ConfigureBoostMode+0x42>
 80044d8:	4b65      	ldr	r3, [pc, #404]	; (8004670 <ADC_ConfigureBoostMode+0x1c8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80044ee:	f003 f8b9 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80044f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044fc:	d010      	beq.n	8004520 <ADC_ConfigureBoostMode+0x78>
 80044fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004502:	d871      	bhi.n	80045e8 <ADC_ConfigureBoostMode+0x140>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d002      	beq.n	8004510 <ADC_ConfigureBoostMode+0x68>
 800450a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450e:	d16b      	bne.n	80045e8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	60fb      	str	r3, [r7, #12]
        break;
 800451e:	e066      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	60fb      	str	r3, [r7, #12]
        break;
 8004526:	e062      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004528:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800452c:	f004 f80c 	bl	8008548 <HAL_RCCEx_GetPeriphCLKFreq>
 8004530:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800453a:	d051      	beq.n	80045e0 <ADC_ConfigureBoostMode+0x138>
 800453c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004540:	d854      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 8004542:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004546:	d047      	beq.n	80045d8 <ADC_ConfigureBoostMode+0x130>
 8004548:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800454c:	d84e      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 800454e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004552:	d03d      	beq.n	80045d0 <ADC_ConfigureBoostMode+0x128>
 8004554:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004558:	d848      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 800455a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455e:	d033      	beq.n	80045c8 <ADC_ConfigureBoostMode+0x120>
 8004560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004564:	d842      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 8004566:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800456a:	d029      	beq.n	80045c0 <ADC_ConfigureBoostMode+0x118>
 800456c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004570:	d83c      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 8004572:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004576:	d01a      	beq.n	80045ae <ADC_ConfigureBoostMode+0x106>
 8004578:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800457c:	d836      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 800457e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004582:	d014      	beq.n	80045ae <ADC_ConfigureBoostMode+0x106>
 8004584:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004588:	d830      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d00e      	beq.n	80045ae <ADC_ConfigureBoostMode+0x106>
 8004590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004594:	d82a      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 8004596:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800459a:	d008      	beq.n	80045ae <ADC_ConfigureBoostMode+0x106>
 800459c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045a0:	d824      	bhi.n	80045ec <ADC_ConfigureBoostMode+0x144>
 80045a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a6:	d002      	beq.n	80045ae <ADC_ConfigureBoostMode+0x106>
 80045a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045ac:	d11e      	bne.n	80045ec <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	0c9b      	lsrs	r3, r3, #18
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	60fb      	str	r3, [r7, #12]
        break;
 80045be:	e016      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	60fb      	str	r3, [r7, #12]
        break;
 80045c6:	e012      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	60fb      	str	r3, [r7, #12]
        break;
 80045ce:	e00e      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	60fb      	str	r3, [r7, #12]
        break;
 80045d6:	e00a      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]
        break;
 80045de:	e006      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	60fb      	str	r3, [r7, #12]
        break;
 80045e6:	e002      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
        break;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80045ec:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <ADC_ConfigureBoostMode+0x1cc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d808      	bhi.n	800460e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800460a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800460c:	e025      	b.n	800465a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <ADC_ConfigureBoostMode+0x1d0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d80a      	bhi.n	800462c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	e016      	b.n	800465a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <ADC_ConfigureBoostMode+0x1d4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d80a      	bhi.n	800464a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	e007      	b.n	800465a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40022000 	.word	0x40022000
 8004668:	40022100 	.word	0x40022100
 800466c:	40022300 	.word	0x40022300
 8004670:	58026300 	.word	0x58026300
 8004674:	005f5e10 	.word	0x005f5e10
 8004678:	00bebc20 	.word	0x00bebc20
 800467c:	017d7840 	.word	0x017d7840

08004680 <LL_ADC_IsEnabled>:
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <LL_ADC_IsEnabled+0x18>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <LL_ADC_IsEnabled+0x1a>
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d101      	bne.n	80046be <LL_ADC_REG_IsConversionOngoing+0x18>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b0a3      	sub	sp, #140	; 0x8c
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800474a:	2302      	movs	r3, #2
 800474c:	e0c1      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d102      	bne.n	800476e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004768:	4b5d      	ldr	r3, [pc, #372]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e001      	b.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0a0      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff87 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 8004798:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff80 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8081 	bne.w	80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d17c      	bne.n	80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a48      	ldr	r2, [pc, #288]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80047ca:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047cc:	e000      	b.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80047ce:	4b46      	ldr	r3, [pc, #280]	; (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047d0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d039      	beq.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a39      	ldr	r2, [pc, #228]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10e      	bne.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004800:	4836      	ldr	r0, [pc, #216]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004802:	f7ff ff3d 	bl	8004680 <LL_ADC_IsEnabled>
 8004806:	4604      	mov	r4, r0
 8004808:	4835      	ldr	r0, [pc, #212]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800480a:	f7ff ff39 	bl	8004680 <LL_ADC_IsEnabled>
 800480e:	4603      	mov	r3, r0
 8004810:	4323      	orrs	r3, r4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e008      	b.n	8004830 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800481e:	4833      	ldr	r0, [pc, #204]	; (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004820:	f7ff ff2e 	bl	8004680 <LL_ADC_IsEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d047      	beq.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800483a:	4013      	ands	r3, r2
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	6811      	ldr	r1, [r2, #0]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	430a      	orrs	r2, r1
 8004846:	431a      	orrs	r2, r3
 8004848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800484a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800484c:	e03a      	b.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800484e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004858:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10e      	bne.n	800488c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800486e:	481b      	ldr	r0, [pc, #108]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004870:	f7ff ff06 	bl	8004680 <LL_ADC_IsEnabled>
 8004874:	4604      	mov	r4, r0
 8004876:	481a      	ldr	r0, [pc, #104]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004878:	f7ff ff02 	bl	8004680 <LL_ADC_IsEnabled>
 800487c:	4603      	mov	r3, r0
 800487e:	4323      	orrs	r3, r4
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e008      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800488c:	4817      	ldr	r0, [pc, #92]	; (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800488e:	f7ff fef7 	bl	8004680 <LL_ADC_IsEnabled>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ae:	e009      	b.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80048c2:	e000      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80048ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	378c      	adds	r7, #140	; 0x8c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd90      	pop	{r4, r7, pc}
 80048da:	bf00      	nop
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40022100 	.word	0x40022100
 80048e4:	40022300 	.word	0x40022300
 80048e8:	58026300 	.word	0x58026300
 80048ec:	58026000 	.word	0x58026000
 80048f0:	fffff0e0 	.word	0xfffff0e0

080048f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <__NVIC_SetPriorityGrouping+0x40>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004910:	4013      	ands	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <__NVIC_SetPriorityGrouping+0x44>)
 800491e:	4313      	orrs	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004922:	4a04      	ldr	r2, [pc, #16]	; (8004934 <__NVIC_SetPriorityGrouping+0x40>)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	60d3      	str	r3, [r2, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00
 8004938:	05fa0000 	.word	0x05fa0000

0800493c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <__NVIC_GetPriorityGrouping+0x18>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 0307 	and.w	r3, r3, #7
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db0b      	blt.n	8004982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <__NVIC_EnableIRQ+0x38>)
 8004972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2001      	movs	r0, #1
 800497a:	fa00 f202 	lsl.w	r2, r0, r2
 800497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e100 	.word	0xe000e100

08004994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db0a      	blt.n	80049be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	490c      	ldr	r1, [pc, #48]	; (80049e0 <__NVIC_SetPriority+0x4c>)
 80049ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	440b      	add	r3, r1
 80049b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049bc:	e00a      	b.n	80049d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4908      	ldr	r1, [pc, #32]	; (80049e4 <__NVIC_SetPriority+0x50>)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	3b04      	subs	r3, #4
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	440b      	add	r3, r1
 80049d2:	761a      	strb	r2, [r3, #24]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000e100 	.word	0xe000e100
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f1c3 0307 	rsb	r3, r3, #7
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	bf28      	it	cs
 8004a06:	2304      	movcs	r3, #4
 8004a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d902      	bls.n	8004a18 <NVIC_EncodePriority+0x30>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3b03      	subs	r3, #3
 8004a16:	e000      	b.n	8004a1a <NVIC_EncodePriority+0x32>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a30:	f04f 31ff 	mov.w	r1, #4294967295
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	43d9      	mvns	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a40:	4313      	orrs	r3, r2
         );
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a60:	d301      	bcc.n	8004a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a62:	2301      	movs	r3, #1
 8004a64:	e00f      	b.n	8004a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <SysTick_Config+0x40>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a6e:	210f      	movs	r1, #15
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	f7ff ff8e 	bl	8004994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <SysTick_Config+0x40>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <SysTick_Config+0x40>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	e000e010 	.word	0xe000e010

08004a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff29 	bl	80048f4 <__NVIC_SetPriorityGrouping>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab8:	f7ff ff40 	bl	800493c <__NVIC_GetPriorityGrouping>
 8004abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff90 	bl	80049e8 <NVIC_EncodePriority>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff5f 	bl	8004994 <__NVIC_SetPriority>
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff33 	bl	8004958 <__NVIC_EnableIRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ffa4 	bl	8004a50 <SysTick_Config>
 8004b08:	4603      	mov	r3, r0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b1c:	f7fe f8a4 	bl	8002c68 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e314      	b.n	8005156 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_DMA_Init+0x1b8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a65      	ldr	r2, [pc, #404]	; (8004cd0 <HAL_DMA_Init+0x1bc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a63      	ldr	r2, [pc, #396]	; (8004cd4 <HAL_DMA_Init+0x1c0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a62      	ldr	r2, [pc, #392]	; (8004cd8 <HAL_DMA_Init+0x1c4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a60      	ldr	r2, [pc, #384]	; (8004cdc <HAL_DMA_Init+0x1c8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a5f      	ldr	r2, [pc, #380]	; (8004ce0 <HAL_DMA_Init+0x1cc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a5d      	ldr	r2, [pc, #372]	; (8004ce4 <HAL_DMA_Init+0x1d0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5c      	ldr	r2, [pc, #368]	; (8004ce8 <HAL_DMA_Init+0x1d4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5a      	ldr	r2, [pc, #360]	; (8004cec <HAL_DMA_Init+0x1d8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a59      	ldr	r2, [pc, #356]	; (8004cf0 <HAL_DMA_Init+0x1dc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a57      	ldr	r2, [pc, #348]	; (8004cf4 <HAL_DMA_Init+0x1e0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <HAL_DMA_Init+0x1e4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a54      	ldr	r2, [pc, #336]	; (8004cfc <HAL_DMA_Init+0x1e8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a53      	ldr	r2, [pc, #332]	; (8004d00 <HAL_DMA_Init+0x1ec>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a51      	ldr	r2, [pc, #324]	; (8004d04 <HAL_DMA_Init+0x1f0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_Init+0xb8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a50      	ldr	r2, [pc, #320]	; (8004d08 <HAL_DMA_Init+0x1f4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_DMA_Init+0xbc>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_Init+0xbe>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 813c 	beq.w	8004e50 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a37      	ldr	r2, [pc, #220]	; (8004ccc <HAL_DMA_Init+0x1b8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04a      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a36      	ldr	r2, [pc, #216]	; (8004cd0 <HAL_DMA_Init+0x1bc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d045      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <HAL_DMA_Init+0x1c0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d040      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <HAL_DMA_Init+0x1c4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d03b      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <HAL_DMA_Init+0x1c8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d036      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <HAL_DMA_Init+0x1cc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d031      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_DMA_Init+0x1d0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d02c      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2d      	ldr	r2, [pc, #180]	; (8004ce8 <HAL_DMA_Init+0x1d4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d027      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <HAL_DMA_Init+0x1d8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <HAL_DMA_Init+0x1dc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <HAL_DMA_Init+0x1e0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <HAL_DMA_Init+0x1e4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	; (8004cfc <HAL_DMA_Init+0x1e8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <HAL_DMA_Init+0x1ec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <HAL_DMA_Init+0x1f0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_DMA_Init+0x174>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <HAL_DMA_Init+0x1f4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <HAL_DMA_Init+0x186>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e007      	b.n	8004caa <HAL_DMA_Init+0x196>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004caa:	e02f      	b.n	8004d0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cac:	f7fd ffdc 	bl	8002c68 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d928      	bls.n	8004d0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e244      	b.n	8005156 <HAL_DMA_Init+0x642>
 8004ccc:	40020010 	.word	0x40020010
 8004cd0:	40020028 	.word	0x40020028
 8004cd4:	40020040 	.word	0x40020040
 8004cd8:	40020058 	.word	0x40020058
 8004cdc:	40020070 	.word	0x40020070
 8004ce0:	40020088 	.word	0x40020088
 8004ce4:	400200a0 	.word	0x400200a0
 8004ce8:	400200b8 	.word	0x400200b8
 8004cec:	40020410 	.word	0x40020410
 8004cf0:	40020428 	.word	0x40020428
 8004cf4:	40020440 	.word	0x40020440
 8004cf8:	40020458 	.word	0x40020458
 8004cfc:	40020470 	.word	0x40020470
 8004d00:	40020488 	.word	0x40020488
 8004d04:	400204a0 	.word	0x400204a0
 8004d08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1c8      	bne.n	8004cac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4b84      	ldr	r3, [pc, #528]	; (8004f38 <HAL_DMA_Init+0x424>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d107      	bne.n	8004d70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b28      	cmp	r3, #40	; 0x28
 8004d76:	d903      	bls.n	8004d80 <HAL_DMA_Init+0x26c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d7e:	d91f      	bls.n	8004dc0 <HAL_DMA_Init+0x2ac>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b3e      	cmp	r3, #62	; 0x3e
 8004d86:	d903      	bls.n	8004d90 <HAL_DMA_Init+0x27c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b42      	cmp	r3, #66	; 0x42
 8004d8e:	d917      	bls.n	8004dc0 <HAL_DMA_Init+0x2ac>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b46      	cmp	r3, #70	; 0x46
 8004d96:	d903      	bls.n	8004da0 <HAL_DMA_Init+0x28c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b48      	cmp	r3, #72	; 0x48
 8004d9e:	d90f      	bls.n	8004dc0 <HAL_DMA_Init+0x2ac>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b4e      	cmp	r3, #78	; 0x4e
 8004da6:	d903      	bls.n	8004db0 <HAL_DMA_Init+0x29c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b52      	cmp	r3, #82	; 0x52
 8004dae:	d907      	bls.n	8004dc0 <HAL_DMA_Init+0x2ac>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b73      	cmp	r3, #115	; 0x73
 8004db6:	d905      	bls.n	8004dc4 <HAL_DMA_Init+0x2b0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b77      	cmp	r3, #119	; 0x77
 8004dbe:	d801      	bhi.n	8004dc4 <HAL_DMA_Init+0x2b0>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_DMA_Init+0x2b2>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d117      	bne.n	8004e2c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 f9b6 	bl	8006180 <DMA_CheckFifoParam>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2240      	movs	r2, #64	; 0x40
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e194      	b.n	8005156 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 f8f1 	bl	800601c <DMA_CalcBaseAndBitshift>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	223f      	movs	r2, #63	; 0x3f
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	609a      	str	r2, [r3, #8]
 8004e4e:	e0ca      	b.n	8004fe6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a39      	ldr	r2, [pc, #228]	; (8004f3c <HAL_DMA_Init+0x428>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <HAL_DMA_Init+0x42c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a36      	ldr	r2, [pc, #216]	; (8004f44 <HAL_DMA_Init+0x430>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a35      	ldr	r2, [pc, #212]	; (8004f48 <HAL_DMA_Init+0x434>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <HAL_DMA_Init+0x438>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a32      	ldr	r2, [pc, #200]	; (8004f50 <HAL_DMA_Init+0x43c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <HAL_DMA_Init+0x440>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_Init+0x38c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <HAL_DMA_Init+0x444>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Init+0x390>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_Init+0x392>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8094 	beq.w	8004fd4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_DMA_Init+0x428>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d021      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_DMA_Init+0x42c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01c      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_DMA_Init+0x430>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d017      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_DMA_Init+0x434>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d012      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_DMA_Init+0x438>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00d      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_DMA_Init+0x43c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d008      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_DMA_Init+0x440>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_Init+0x3e6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_DMA_Init+0x444>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_DMA_Init+0x448>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_Init+0x44c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d102      	bne.n	8004f32 <HAL_DMA_Init+0x41e>
 8004f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f30:	e017      	b.n	8004f62 <HAL_DMA_Init+0x44e>
 8004f32:	2300      	movs	r3, #0
 8004f34:	e015      	b.n	8004f62 <HAL_DMA_Init+0x44e>
 8004f36:	bf00      	nop
 8004f38:	fe10803f 	.word	0xfe10803f
 8004f3c:	58025408 	.word	0x58025408
 8004f40:	5802541c 	.word	0x5802541c
 8004f44:	58025430 	.word	0x58025430
 8004f48:	58025444 	.word	0x58025444
 8004f4c:	58025458 	.word	0x58025458
 8004f50:	5802546c 	.word	0x5802546c
 8004f54:	58025480 	.word	0x58025480
 8004f58:	58025494 	.word	0x58025494
 8004f5c:	fffe000f 	.word	0xfffe000f
 8004f60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b6e      	ldr	r3, [pc, #440]	; (8005160 <HAL_DMA_Init+0x64c>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	4a6e      	ldr	r2, [pc, #440]	; (8005164 <HAL_DMA_Init+0x650>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 f82f 	bl	800601c <DMA_CalcBaseAndBitshift>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e008      	b.n	8004fe6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0b7      	b.n	8005156 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a5f      	ldr	r2, [pc, #380]	; (8005168 <HAL_DMA_Init+0x654>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d072      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5d      	ldr	r2, [pc, #372]	; (800516c <HAL_DMA_Init+0x658>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d06d      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a5c      	ldr	r2, [pc, #368]	; (8005170 <HAL_DMA_Init+0x65c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d068      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a5a      	ldr	r2, [pc, #360]	; (8005174 <HAL_DMA_Init+0x660>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d063      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a59      	ldr	r2, [pc, #356]	; (8005178 <HAL_DMA_Init+0x664>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d05e      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a57      	ldr	r2, [pc, #348]	; (800517c <HAL_DMA_Init+0x668>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d059      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a56      	ldr	r2, [pc, #344]	; (8005180 <HAL_DMA_Init+0x66c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d054      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a54      	ldr	r2, [pc, #336]	; (8005184 <HAL_DMA_Init+0x670>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04f      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a53      	ldr	r2, [pc, #332]	; (8005188 <HAL_DMA_Init+0x674>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d04a      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a51      	ldr	r2, [pc, #324]	; (800518c <HAL_DMA_Init+0x678>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d045      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a50      	ldr	r2, [pc, #320]	; (8005190 <HAL_DMA_Init+0x67c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d040      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a4e      	ldr	r2, [pc, #312]	; (8005194 <HAL_DMA_Init+0x680>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d03b      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4d      	ldr	r2, [pc, #308]	; (8005198 <HAL_DMA_Init+0x684>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d036      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a4b      	ldr	r2, [pc, #300]	; (800519c <HAL_DMA_Init+0x688>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d031      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a4a      	ldr	r2, [pc, #296]	; (80051a0 <HAL_DMA_Init+0x68c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d02c      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a48      	ldr	r2, [pc, #288]	; (80051a4 <HAL_DMA_Init+0x690>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d027      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a47      	ldr	r2, [pc, #284]	; (80051a8 <HAL_DMA_Init+0x694>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d022      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a45      	ldr	r2, [pc, #276]	; (80051ac <HAL_DMA_Init+0x698>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a44      	ldr	r2, [pc, #272]	; (80051b0 <HAL_DMA_Init+0x69c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a42      	ldr	r2, [pc, #264]	; (80051b4 <HAL_DMA_Init+0x6a0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <HAL_DMA_Init+0x6a4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <HAL_DMA_Init+0x6a8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3e      	ldr	r2, [pc, #248]	; (80051c0 <HAL_DMA_Init+0x6ac>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_DMA_Init+0x5c2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <HAL_DMA_Init+0x6b0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d101      	bne.n	80050da <HAL_DMA_Init+0x5c6>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_DMA_Init+0x5c8>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d032      	beq.n	8005146 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f8c9 	bl	8006278 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d102      	bne.n	80050f4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005108:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_DMA_Init+0x620>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d80c      	bhi.n	8005134 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 f946 	bl	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	e008      	b.n	8005146 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	a7fdabf8 	.word	0xa7fdabf8
 8005164:	cccccccd 	.word	0xcccccccd
 8005168:	40020010 	.word	0x40020010
 800516c:	40020028 	.word	0x40020028
 8005170:	40020040 	.word	0x40020040
 8005174:	40020058 	.word	0x40020058
 8005178:	40020070 	.word	0x40020070
 800517c:	40020088 	.word	0x40020088
 8005180:	400200a0 	.word	0x400200a0
 8005184:	400200b8 	.word	0x400200b8
 8005188:	40020410 	.word	0x40020410
 800518c:	40020428 	.word	0x40020428
 8005190:	40020440 	.word	0x40020440
 8005194:	40020458 	.word	0x40020458
 8005198:	40020470 	.word	0x40020470
 800519c:	40020488 	.word	0x40020488
 80051a0:	400204a0 	.word	0x400204a0
 80051a4:	400204b8 	.word	0x400204b8
 80051a8:	58025408 	.word	0x58025408
 80051ac:	5802541c 	.word	0x5802541c
 80051b0:	58025430 	.word	0x58025430
 80051b4:	58025444 	.word	0x58025444
 80051b8:	58025458 	.word	0x58025458
 80051bc:	5802546c 	.word	0x5802546c
 80051c0:	58025480 	.word	0x58025480
 80051c4:	58025494 	.word	0x58025494

080051c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051d4:	4b67      	ldr	r3, [pc, #412]	; (8005374 <HAL_DMA_IRQHandler+0x1ac>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a67      	ldr	r2, [pc, #412]	; (8005378 <HAL_DMA_IRQHandler+0x1b0>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a5f      	ldr	r2, [pc, #380]	; (800537c <HAL_DMA_IRQHandler+0x1b4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d04a      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <HAL_DMA_IRQHandler+0x1b8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d045      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5c      	ldr	r2, [pc, #368]	; (8005384 <HAL_DMA_IRQHandler+0x1bc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d040      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5a      	ldr	r2, [pc, #360]	; (8005388 <HAL_DMA_IRQHandler+0x1c0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d03b      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a59      	ldr	r2, [pc, #356]	; (800538c <HAL_DMA_IRQHandler+0x1c4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d036      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a57      	ldr	r2, [pc, #348]	; (8005390 <HAL_DMA_IRQHandler+0x1c8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d031      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a56      	ldr	r2, [pc, #344]	; (8005394 <HAL_DMA_IRQHandler+0x1cc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d02c      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a54      	ldr	r2, [pc, #336]	; (8005398 <HAL_DMA_IRQHandler+0x1d0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d027      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a53      	ldr	r2, [pc, #332]	; (800539c <HAL_DMA_IRQHandler+0x1d4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a51      	ldr	r2, [pc, #324]	; (80053a0 <HAL_DMA_IRQHandler+0x1d8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a50      	ldr	r2, [pc, #320]	; (80053a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d018      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a4e      	ldr	r2, [pc, #312]	; (80053a8 <HAL_DMA_IRQHandler+0x1e0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <HAL_DMA_IRQHandler+0x1e4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a4b      	ldr	r2, [pc, #300]	; (80053b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4a      	ldr	r2, [pc, #296]	; (80053b4 <HAL_DMA_IRQHandler+0x1ec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_DMA_IRQHandler+0xd2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a48      	ldr	r2, [pc, #288]	; (80053b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_DMA_IRQHandler+0xd6>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_DMA_IRQHandler+0xd8>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 842b 	beq.w	8005afc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2208      	movs	r2, #8
 80052b0:	409a      	lsls	r2, r3
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80a2 	beq.w	8005400 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_DMA_IRQHandler+0x1b4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_DMA_IRQHandler+0x1b8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_DMA_IRQHandler+0x1bc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <HAL_DMA_IRQHandler+0x1c0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a28      	ldr	r2, [pc, #160]	; (800538c <HAL_DMA_IRQHandler+0x1c4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_DMA_IRQHandler+0x1c8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_DMA_IRQHandler+0x1cc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_DMA_IRQHandler+0x1d0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_DMA_IRQHandler+0x1d4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_DMA_IRQHandler+0x1d8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_DMA_IRQHandler+0x1e4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_DMA_IRQHandler+0x1ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_IRQHandler+0x194>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d12f      	bne.n	80053bc <HAL_DMA_IRQHandler+0x1f4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e02e      	b.n	80053d0 <HAL_DMA_IRQHandler+0x208>
 8005372:	bf00      	nop
 8005374:	24000000 	.word	0x24000000
 8005378:	1b4e81b5 	.word	0x1b4e81b5
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0204 	bic.w	r2, r2, #4
 80053e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2208      	movs	r2, #8
 80053ee:	409a      	lsls	r2, r3
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f043 0201 	orr.w	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d06e      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a69      	ldr	r2, [pc, #420]	; (80055c0 <HAL_DMA_IRQHandler+0x3f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_DMA_IRQHandler+0x400>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a64      	ldr	r2, [pc, #400]	; (80055cc <HAL_DMA_IRQHandler+0x404>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a63      	ldr	r2, [pc, #396]	; (80055d0 <HAL_DMA_IRQHandler+0x408>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a61      	ldr	r2, [pc, #388]	; (80055d4 <HAL_DMA_IRQHandler+0x40c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a60      	ldr	r2, [pc, #384]	; (80055d8 <HAL_DMA_IRQHandler+0x410>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a5e      	ldr	r2, [pc, #376]	; (80055dc <HAL_DMA_IRQHandler+0x414>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5d      	ldr	r2, [pc, #372]	; (80055e0 <HAL_DMA_IRQHandler+0x418>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5b      	ldr	r2, [pc, #364]	; (80055e4 <HAL_DMA_IRQHandler+0x41c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_DMA_IRQHandler+0x420>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_DMA_IRQHandler+0x424>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_DMA_IRQHandler+0x428>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a55      	ldr	r2, [pc, #340]	; (80055f4 <HAL_DMA_IRQHandler+0x42c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a54      	ldr	r2, [pc, #336]	; (80055f8 <HAL_DMA_IRQHandler+0x430>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x2ee>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a52      	ldr	r2, [pc, #328]	; (80055fc <HAL_DMA_IRQHandler+0x434>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10a      	bne.n	80054cc <HAL_DMA_IRQHandler+0x304>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e003      	b.n	80054d4 <HAL_DMA_IRQHandler+0x30c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0202 	orr.w	r2, r3, #2
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2204      	movs	r2, #4
 80054fe:	409a      	lsls	r2, r3
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808f 	beq.w	8005628 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <HAL_DMA_IRQHandler+0x3fc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <HAL_DMA_IRQHandler+0x400>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <HAL_DMA_IRQHandler+0x404>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <HAL_DMA_IRQHandler+0x408>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <HAL_DMA_IRQHandler+0x40c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <HAL_DMA_IRQHandler+0x410>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a21      	ldr	r2, [pc, #132]	; (80055dc <HAL_DMA_IRQHandler+0x414>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <HAL_DMA_IRQHandler+0x418>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_DMA_IRQHandler+0x41c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_DMA_IRQHandler+0x420>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_DMA_IRQHandler+0x424>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_DMA_IRQHandler+0x428>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_DMA_IRQHandler+0x42c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <HAL_DMA_IRQHandler+0x430>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_IRQHandler+0x3e2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <HAL_DMA_IRQHandler+0x434>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d12a      	bne.n	8005600 <HAL_DMA_IRQHandler+0x438>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf14      	ite	ne
 80055b8:	2301      	movne	r3, #1
 80055ba:	2300      	moveq	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	e023      	b.n	8005608 <HAL_DMA_IRQHandler+0x440>
 80055c0:	40020010 	.word	0x40020010
 80055c4:	40020028 	.word	0x40020028
 80055c8:	40020040 	.word	0x40020040
 80055cc:	40020058 	.word	0x40020058
 80055d0:	40020070 	.word	0x40020070
 80055d4:	40020088 	.word	0x40020088
 80055d8:	400200a0 	.word	0x400200a0
 80055dc:	400200b8 	.word	0x400200b8
 80055e0:	40020410 	.word	0x40020410
 80055e4:	40020428 	.word	0x40020428
 80055e8:	40020440 	.word	0x40020440
 80055ec:	40020458 	.word	0x40020458
 80055f0:	40020470 	.word	0x40020470
 80055f4:	40020488 	.word	0x40020488
 80055f8:	400204a0 	.word	0x400204a0
 80055fc:	400204b8 	.word	0x400204b8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00d      	beq.n	8005628 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2204      	movs	r2, #4
 8005616:	409a      	lsls	r2, r3
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f043 0204 	orr.w	r2, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2210      	movs	r2, #16
 8005632:	409a      	lsls	r2, r3
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a6 	beq.w	800578a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a85      	ldr	r2, [pc, #532]	; (8005858 <HAL_DMA_IRQHandler+0x690>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d04a      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a83      	ldr	r2, [pc, #524]	; (800585c <HAL_DMA_IRQHandler+0x694>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d045      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a82      	ldr	r2, [pc, #520]	; (8005860 <HAL_DMA_IRQHandler+0x698>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d040      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a80      	ldr	r2, [pc, #512]	; (8005864 <HAL_DMA_IRQHandler+0x69c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d03b      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a7f      	ldr	r2, [pc, #508]	; (8005868 <HAL_DMA_IRQHandler+0x6a0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d036      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a7d      	ldr	r2, [pc, #500]	; (800586c <HAL_DMA_IRQHandler+0x6a4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d031      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a7c      	ldr	r2, [pc, #496]	; (8005870 <HAL_DMA_IRQHandler+0x6a8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d02c      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7a      	ldr	r2, [pc, #488]	; (8005874 <HAL_DMA_IRQHandler+0x6ac>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d027      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a79      	ldr	r2, [pc, #484]	; (8005878 <HAL_DMA_IRQHandler+0x6b0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a77      	ldr	r2, [pc, #476]	; (800587c <HAL_DMA_IRQHandler+0x6b4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01d      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a76      	ldr	r2, [pc, #472]	; (8005880 <HAL_DMA_IRQHandler+0x6b8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a74      	ldr	r2, [pc, #464]	; (8005884 <HAL_DMA_IRQHandler+0x6bc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a73      	ldr	r2, [pc, #460]	; (8005888 <HAL_DMA_IRQHandler+0x6c0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a71      	ldr	r2, [pc, #452]	; (800588c <HAL_DMA_IRQHandler+0x6c4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a70      	ldr	r2, [pc, #448]	; (8005890 <HAL_DMA_IRQHandler+0x6c8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_DMA_IRQHandler+0x516>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <HAL_DMA_IRQHandler+0x6cc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10a      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x52c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e009      	b.n	8005708 <HAL_DMA_IRQHandler+0x540>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d03e      	beq.n	800578a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2210      	movs	r2, #16
 8005716:	409a      	lsls	r2, r3
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d024      	beq.n	800578a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
 8005748:	e01f      	b.n	800578a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01b      	beq.n	800578a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3
 800575a:	e016      	b.n	800578a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0208 	bic.w	r2, r2, #8
 8005778:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2220      	movs	r2, #32
 8005794:	409a      	lsls	r2, r3
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8110 	beq.w	80059c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <HAL_DMA_IRQHandler+0x690>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04a      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2b      	ldr	r2, [pc, #172]	; (800585c <HAL_DMA_IRQHandler+0x694>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d045      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a29      	ldr	r2, [pc, #164]	; (8005860 <HAL_DMA_IRQHandler+0x698>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d040      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a28      	ldr	r2, [pc, #160]	; (8005864 <HAL_DMA_IRQHandler+0x69c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d03b      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <HAL_DMA_IRQHandler+0x6a0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d036      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a25      	ldr	r2, [pc, #148]	; (800586c <HAL_DMA_IRQHandler+0x6a4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d031      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a23      	ldr	r2, [pc, #140]	; (8005870 <HAL_DMA_IRQHandler+0x6a8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02c      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_DMA_IRQHandler+0x6ac>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d027      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <HAL_DMA_IRQHandler+0x6b0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d022      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HAL_DMA_IRQHandler+0x6b4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d01d      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <HAL_DMA_IRQHandler+0x6b8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <HAL_DMA_IRQHandler+0x6bc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <HAL_DMA_IRQHandler+0x6c0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a19      	ldr	r2, [pc, #100]	; (800588c <HAL_DMA_IRQHandler+0x6c4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <HAL_DMA_IRQHandler+0x6c8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_DMA_IRQHandler+0x678>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <HAL_DMA_IRQHandler+0x6cc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d12b      	bne.n	8005898 <HAL_DMA_IRQHandler+0x6d0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e02a      	b.n	80058ac <HAL_DMA_IRQHandler+0x6e4>
 8005856:	bf00      	nop
 8005858:	40020010 	.word	0x40020010
 800585c:	40020028 	.word	0x40020028
 8005860:	40020040 	.word	0x40020040
 8005864:	40020058 	.word	0x40020058
 8005868:	40020070 	.word	0x40020070
 800586c:	40020088 	.word	0x40020088
 8005870:	400200a0 	.word	0x400200a0
 8005874:	400200b8 	.word	0x400200b8
 8005878:	40020410 	.word	0x40020410
 800587c:	40020428 	.word	0x40020428
 8005880:	40020440 	.word	0x40020440
 8005884:	40020458 	.word	0x40020458
 8005888:	40020470 	.word	0x40020470
 800588c:	40020488 	.word	0x40020488
 8005890:	400204a0 	.word	0x400204a0
 8005894:	400204b8 	.word	0x400204b8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8087 	beq.w	80059c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2220      	movs	r2, #32
 80058bc:	409a      	lsls	r2, r3
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d139      	bne.n	8005942 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0216 	bic.w	r2, r2, #22
 80058dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_DMA_IRQHandler+0x736>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	223f      	movs	r2, #63	; 0x3f
 8005918:	409a      	lsls	r2, r3
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 834a 	beq.w	8005fcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
          }
          return;
 8005940:	e344      	b.n	8005fcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02c      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
 800596e:	e027      	b.n	80059c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d023      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
 8005980:	e01e      	b.n	80059c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0210 	bic.w	r2, r2, #16
 800599e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8306 	beq.w	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8088 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2204      	movs	r2, #4
 80059dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a7a      	ldr	r2, [pc, #488]	; (8005bd0 <HAL_DMA_IRQHandler+0xa08>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04a      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a79      	ldr	r2, [pc, #484]	; (8005bd4 <HAL_DMA_IRQHandler+0xa0c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d045      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a77      	ldr	r2, [pc, #476]	; (8005bd8 <HAL_DMA_IRQHandler+0xa10>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d040      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a76      	ldr	r2, [pc, #472]	; (8005bdc <HAL_DMA_IRQHandler+0xa14>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d03b      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a74      	ldr	r2, [pc, #464]	; (8005be0 <HAL_DMA_IRQHandler+0xa18>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d036      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a73      	ldr	r2, [pc, #460]	; (8005be4 <HAL_DMA_IRQHandler+0xa1c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d031      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a71      	ldr	r2, [pc, #452]	; (8005be8 <HAL_DMA_IRQHandler+0xa20>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02c      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a70      	ldr	r2, [pc, #448]	; (8005bec <HAL_DMA_IRQHandler+0xa24>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d027      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a6e      	ldr	r2, [pc, #440]	; (8005bf0 <HAL_DMA_IRQHandler+0xa28>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d022      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a6d      	ldr	r2, [pc, #436]	; (8005bf4 <HAL_DMA_IRQHandler+0xa2c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01d      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a6b      	ldr	r2, [pc, #428]	; (8005bf8 <HAL_DMA_IRQHandler+0xa30>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d018      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6a      	ldr	r2, [pc, #424]	; (8005bfc <HAL_DMA_IRQHandler+0xa34>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a68      	ldr	r2, [pc, #416]	; (8005c00 <HAL_DMA_IRQHandler+0xa38>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a67      	ldr	r2, [pc, #412]	; (8005c04 <HAL_DMA_IRQHandler+0xa3c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_DMA_IRQHandler+0xa40>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x8b8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a64      	ldr	r2, [pc, #400]	; (8005c0c <HAL_DMA_IRQHandler+0xa44>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <HAL_DMA_IRQHandler+0x8ca>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e007      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x8da>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d307      	bcc.n	8005abe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f2      	bne.n	8005aa2 <HAL_DMA_IRQHandler+0x8da>
 8005abc:	e000      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005abe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005ad6:	e003      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8272 	beq.w	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
 8005afa:	e26c      	b.n	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a43      	ldr	r2, [pc, #268]	; (8005c10 <HAL_DMA_IRQHandler+0xa48>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d022      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a42      	ldr	r2, [pc, #264]	; (8005c14 <HAL_DMA_IRQHandler+0xa4c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01d      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a40      	ldr	r2, [pc, #256]	; (8005c18 <HAL_DMA_IRQHandler+0xa50>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <HAL_DMA_IRQHandler+0xa54>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <HAL_DMA_IRQHandler+0xa58>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <HAL_DMA_IRQHandler+0xa5c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a3a      	ldr	r2, [pc, #232]	; (8005c28 <HAL_DMA_IRQHandler+0xa60>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x984>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a39      	ldr	r2, [pc, #228]	; (8005c2c <HAL_DMA_IRQHandler+0xa64>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x988>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_DMA_IRQHandler+0x98a>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 823f 	beq.w	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2204      	movs	r2, #4
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80cd 	beq.w	8005d10 <HAL_DMA_IRQHandler+0xb48>
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80c7 	beq.w	8005d10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	409a      	lsls	r2, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d049      	beq.n	8005c30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8210 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb8:	e20a      	b.n	8005fd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8206 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bcc:	e200      	b.n	8005fd0 <HAL_DMA_IRQHandler+0xe08>
 8005bce:	bf00      	nop
 8005bd0:	40020010 	.word	0x40020010
 8005bd4:	40020028 	.word	0x40020028
 8005bd8:	40020040 	.word	0x40020040
 8005bdc:	40020058 	.word	0x40020058
 8005be0:	40020070 	.word	0x40020070
 8005be4:	40020088 	.word	0x40020088
 8005be8:	400200a0 	.word	0x400200a0
 8005bec:	400200b8 	.word	0x400200b8
 8005bf0:	40020410 	.word	0x40020410
 8005bf4:	40020428 	.word	0x40020428
 8005bf8:	40020440 	.word	0x40020440
 8005bfc:	40020458 	.word	0x40020458
 8005c00:	40020470 	.word	0x40020470
 8005c04:	40020488 	.word	0x40020488
 8005c08:	400204a0 	.word	0x400204a0
 8005c0c:	400204b8 	.word	0x400204b8
 8005c10:	58025408 	.word	0x58025408
 8005c14:	5802541c 	.word	0x5802541c
 8005c18:	58025430 	.word	0x58025430
 8005c1c:	58025444 	.word	0x58025444
 8005c20:	58025458 	.word	0x58025458
 8005c24:	5802546c 	.word	0x5802546c
 8005c28:	58025480 	.word	0x58025480
 8005c2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d160      	bne.n	8005cfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a8c      	ldr	r2, [pc, #560]	; (8005e70 <HAL_DMA_IRQHandler+0xca8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d04a      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a8a      	ldr	r2, [pc, #552]	; (8005e74 <HAL_DMA_IRQHandler+0xcac>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d045      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a89      	ldr	r2, [pc, #548]	; (8005e78 <HAL_DMA_IRQHandler+0xcb0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d040      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a87      	ldr	r2, [pc, #540]	; (8005e7c <HAL_DMA_IRQHandler+0xcb4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d03b      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a86      	ldr	r2, [pc, #536]	; (8005e80 <HAL_DMA_IRQHandler+0xcb8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d036      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a84      	ldr	r2, [pc, #528]	; (8005e84 <HAL_DMA_IRQHandler+0xcbc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d031      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a83      	ldr	r2, [pc, #524]	; (8005e88 <HAL_DMA_IRQHandler+0xcc0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02c      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a81      	ldr	r2, [pc, #516]	; (8005e8c <HAL_DMA_IRQHandler+0xcc4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d027      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a80      	ldr	r2, [pc, #512]	; (8005e90 <HAL_DMA_IRQHandler+0xcc8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7e      	ldr	r2, [pc, #504]	; (8005e94 <HAL_DMA_IRQHandler+0xccc>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01d      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7d      	ldr	r2, [pc, #500]	; (8005e98 <HAL_DMA_IRQHandler+0xcd0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a7b      	ldr	r2, [pc, #492]	; (8005e9c <HAL_DMA_IRQHandler+0xcd4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7a      	ldr	r2, [pc, #488]	; (8005ea0 <HAL_DMA_IRQHandler+0xcd8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a78      	ldr	r2, [pc, #480]	; (8005ea4 <HAL_DMA_IRQHandler+0xcdc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a77      	ldr	r2, [pc, #476]	; (8005ea8 <HAL_DMA_IRQHandler+0xce0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_DMA_IRQHandler+0xb12>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a75      	ldr	r2, [pc, #468]	; (8005eac <HAL_DMA_IRQHandler+0xce4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <HAL_DMA_IRQHandler+0xb24>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0208 	bic.w	r2, r2, #8
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e007      	b.n	8005cfc <HAL_DMA_IRQHandler+0xb34>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0204 	bic.w	r2, r2, #4
 8005cfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8165 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d0e:	e15f      	b.n	8005fd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2202      	movs	r2, #2
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80c5 	beq.w	8005eb0 <HAL_DMA_IRQHandler+0xce8>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80bf 	beq.w	8005eb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 813a 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d68:	e134      	b.n	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8130 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7c:	e12a      	b.n	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d168      	bne.n	8005e5a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a38      	ldr	r2, [pc, #224]	; (8005e70 <HAL_DMA_IRQHandler+0xca8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d04a      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a37      	ldr	r2, [pc, #220]	; (8005e74 <HAL_DMA_IRQHandler+0xcac>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d045      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a35      	ldr	r2, [pc, #212]	; (8005e78 <HAL_DMA_IRQHandler+0xcb0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d040      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <HAL_DMA_IRQHandler+0xcb4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d03b      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a32      	ldr	r2, [pc, #200]	; (8005e80 <HAL_DMA_IRQHandler+0xcb8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d036      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a31      	ldr	r2, [pc, #196]	; (8005e84 <HAL_DMA_IRQHandler+0xcbc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d031      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_DMA_IRQHandler+0xcc0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02c      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	; (8005e8c <HAL_DMA_IRQHandler+0xcc4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d027      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <HAL_DMA_IRQHandler+0xcc8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <HAL_DMA_IRQHandler+0xccc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d01d      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <HAL_DMA_IRQHandler+0xcd0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <HAL_DMA_IRQHandler+0xcd4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <HAL_DMA_IRQHandler+0xcd8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a25      	ldr	r2, [pc, #148]	; (8005ea4 <HAL_DMA_IRQHandler+0xcdc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <HAL_DMA_IRQHandler+0xce0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xc60>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a22      	ldr	r2, [pc, #136]	; (8005eac <HAL_DMA_IRQHandler+0xce4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <HAL_DMA_IRQHandler+0xc72>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0214 	bic.w	r2, r2, #20
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e007      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc82>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 020a 	bic.w	r2, r2, #10
 8005e48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80b8 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e6c:	e0b2      	b.n	8005fd4 <HAL_DMA_IRQHandler+0xe0c>
 8005e6e:	bf00      	nop
 8005e70:	40020010 	.word	0x40020010
 8005e74:	40020028 	.word	0x40020028
 8005e78:	40020040 	.word	0x40020040
 8005e7c:	40020058 	.word	0x40020058
 8005e80:	40020070 	.word	0x40020070
 8005e84:	40020088 	.word	0x40020088
 8005e88:	400200a0 	.word	0x400200a0
 8005e8c:	400200b8 	.word	0x400200b8
 8005e90:	40020410 	.word	0x40020410
 8005e94:	40020428 	.word	0x40020428
 8005e98:	40020440 	.word	0x40020440
 8005e9c:	40020458 	.word	0x40020458
 8005ea0:	40020470 	.word	0x40020470
 8005ea4:	40020488 	.word	0x40020488
 8005ea8:	400204a0 	.word	0x400204a0
 8005eac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2208      	movs	r2, #8
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8088 	beq.w	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8082 	beq.w	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a41      	ldr	r2, [pc, #260]	; (8005fdc <HAL_DMA_IRQHandler+0xe14>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d04a      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <HAL_DMA_IRQHandler+0xe18>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d045      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a3e      	ldr	r2, [pc, #248]	; (8005fe4 <HAL_DMA_IRQHandler+0xe1c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d040      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <HAL_DMA_IRQHandler+0xe20>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d03b      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <HAL_DMA_IRQHandler+0xe24>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d036      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a39      	ldr	r2, [pc, #228]	; (8005ff0 <HAL_DMA_IRQHandler+0xe28>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a38      	ldr	r2, [pc, #224]	; (8005ff4 <HAL_DMA_IRQHandler+0xe2c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d02c      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a36      	ldr	r2, [pc, #216]	; (8005ff8 <HAL_DMA_IRQHandler+0xe30>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d027      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a35      	ldr	r2, [pc, #212]	; (8005ffc <HAL_DMA_IRQHandler+0xe34>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a33      	ldr	r2, [pc, #204]	; (8006000 <HAL_DMA_IRQHandler+0xe38>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a32      	ldr	r2, [pc, #200]	; (8006004 <HAL_DMA_IRQHandler+0xe3c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a30      	ldr	r2, [pc, #192]	; (8006008 <HAL_DMA_IRQHandler+0xe40>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	; (800600c <HAL_DMA_IRQHandler+0xe44>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <HAL_DMA_IRQHandler+0xe48>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <HAL_DMA_IRQHandler+0xe4c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xdaa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <HAL_DMA_IRQHandler+0xe50>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d108      	bne.n	8005f84 <HAL_DMA_IRQHandler+0xdbc>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 021c 	bic.w	r2, r2, #28
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e007      	b.n	8005f94 <HAL_DMA_IRQHandler+0xdcc>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 020e 	bic.w	r2, r2, #14
 8005f92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	e004      	b.n	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8

0800601c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a42      	ldr	r2, [pc, #264]	; (8006134 <DMA_CalcBaseAndBitshift+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a41      	ldr	r2, [pc, #260]	; (8006138 <DMA_CalcBaseAndBitshift+0x11c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3f      	ldr	r2, [pc, #252]	; (800613c <DMA_CalcBaseAndBitshift+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <DMA_CalcBaseAndBitshift+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3c      	ldr	r2, [pc, #240]	; (8006144 <DMA_CalcBaseAndBitshift+0x128>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3b      	ldr	r2, [pc, #236]	; (8006148 <DMA_CalcBaseAndBitshift+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a39      	ldr	r2, [pc, #228]	; (800614c <DMA_CalcBaseAndBitshift+0x130>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a38      	ldr	r2, [pc, #224]	; (8006150 <DMA_CalcBaseAndBitshift+0x134>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a36      	ldr	r2, [pc, #216]	; (8006154 <DMA_CalcBaseAndBitshift+0x138>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a35      	ldr	r2, [pc, #212]	; (8006158 <DMA_CalcBaseAndBitshift+0x13c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <DMA_CalcBaseAndBitshift+0x140>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a32      	ldr	r2, [pc, #200]	; (8006160 <DMA_CalcBaseAndBitshift+0x144>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a30      	ldr	r2, [pc, #192]	; (8006164 <DMA_CalcBaseAndBitshift+0x148>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2f      	ldr	r2, [pc, #188]	; (8006168 <DMA_CalcBaseAndBitshift+0x14c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	; (800616c <DMA_CalcBaseAndBitshift+0x150>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <DMA_CalcBaseAndBitshift+0xa8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <DMA_CalcBaseAndBitshift+0x154>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d101      	bne.n	80060c8 <DMA_CalcBaseAndBitshift+0xac>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <DMA_CalcBaseAndBitshift+0xae>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d024      	beq.n	8006118 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3b10      	subs	r3, #16
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <DMA_CalcBaseAndBitshift+0x158>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <DMA_CalcBaseAndBitshift+0x15c>)
 80060e8:	5cd3      	ldrb	r3, [r2, r3]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d908      	bls.n	8006108 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b1f      	ldr	r3, [pc, #124]	; (800617c <DMA_CalcBaseAndBitshift+0x160>)
 80060fe:	4013      	ands	r3, r2
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	659a      	str	r2, [r3, #88]	; 0x58
 8006106:	e00d      	b.n	8006124 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	4b1b      	ldr	r3, [pc, #108]	; (800617c <DMA_CalcBaseAndBitshift+0x160>)
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6593      	str	r3, [r2, #88]	; 0x58
 8006116:	e005      	b.n	8006124 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
 8006174:	aaaaaaab 	.word	0xaaaaaaab
 8006178:	0800f138 	.word	0x0800f138
 800617c:	fffffc00 	.word	0xfffffc00

08006180 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d120      	bne.n	80061d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	2b03      	cmp	r3, #3
 800619a:	d858      	bhi.n	800624e <DMA_CheckFifoParam+0xce>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <DMA_CheckFifoParam+0x24>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c7 	.word	0x080061c7
 80061ac:	080061b5 	.word	0x080061b5
 80061b0:	0800624f 	.word	0x0800624f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d048      	beq.n	8006252 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061c4:	e045      	b.n	8006252 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ce:	d142      	bne.n	8006256 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061d4:	e03f      	b.n	8006256 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061de:	d123      	bne.n	8006228 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d838      	bhi.n	800625a <DMA_CheckFifoParam+0xda>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <DMA_CheckFifoParam+0x70>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006207 	.word	0x08006207
 80061f8:	08006201 	.word	0x08006201
 80061fc:	08006219 	.word	0x08006219
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
        break;
 8006204:	e030      	b.n	8006268 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d025      	beq.n	800625e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006216:	e022      	b.n	800625e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006220:	d11f      	bne.n	8006262 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006226:	e01c      	b.n	8006262 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	2b02      	cmp	r3, #2
 800622e:	d902      	bls.n	8006236 <DMA_CheckFifoParam+0xb6>
 8006230:	2b03      	cmp	r3, #3
 8006232:	d003      	beq.n	800623c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006234:	e018      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
        break;
 800623a:	e015      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
    break;
 800624c:	e00b      	b.n	8006266 <DMA_CheckFifoParam+0xe6>
        break;
 800624e:	bf00      	nop
 8006250:	e00a      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006252:	bf00      	nop
 8006254:	e008      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006256:	bf00      	nop
 8006258:	e006      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
        break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <DMA_CheckFifoParam+0xe8>
    break;
 8006266:	bf00      	nop
    }
  }

  return status;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop

08006278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a38      	ldr	r2, [pc, #224]	; (800636c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a36      	ldr	r2, [pc, #216]	; (8006370 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a35      	ldr	r2, [pc, #212]	; (8006374 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a33      	ldr	r2, [pc, #204]	; (8006378 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a32      	ldr	r2, [pc, #200]	; (800637c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a30      	ldr	r2, [pc, #192]	; (8006380 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2f      	ldr	r2, [pc, #188]	; (8006384 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3b08      	subs	r3, #8
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a24      	ldr	r2, [pc, #144]	; (8006394 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006304:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2201      	movs	r2, #1
 800630e:	409a      	lsls	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006314:	e024      	b.n	8006360 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	3b10      	subs	r3, #16
 800631e:	4a1e      	ldr	r2, [pc, #120]	; (8006398 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a1c      	ldr	r2, [pc, #112]	; (800639c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d806      	bhi.n	800633e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4a1b      	ldr	r2, [pc, #108]	; (80063a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d902      	bls.n	800633e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3308      	adds	r3, #8
 800633c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006350:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2201      	movs	r2, #1
 800635a:	409a      	lsls	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	58025408 	.word	0x58025408
 8006370:	5802541c 	.word	0x5802541c
 8006374:	58025430 	.word	0x58025430
 8006378:	58025444 	.word	0x58025444
 800637c:	58025458 	.word	0x58025458
 8006380:	5802546c 	.word	0x5802546c
 8006384:	58025480 	.word	0x58025480
 8006388:	58025494 	.word	0x58025494
 800638c:	cccccccd 	.word	0xcccccccd
 8006390:	16009600 	.word	0x16009600
 8006394:	58025880 	.word	0x58025880
 8006398:	aaaaaaab 	.word	0xaaaaaaab
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	4002040f 	.word	0x4002040f
 80063a4:	10008200 	.word	0x10008200
 80063a8:	40020880 	.word	0x40020880

080063ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04a      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d847      	bhi.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d01d      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4b17      	ldr	r3, [pc, #92]	; (8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006434:	671a      	str	r2, [r3, #112]	; 0x70
 8006436:	e009      	b.n	800644c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4b14      	ldr	r3, [pc, #80]	; (800648c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a11      	ldr	r2, [pc, #68]	; (8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800644a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3b01      	subs	r3, #1
 8006450:	2201      	movs	r2, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	58025408 	.word	0x58025408
 8006468:	5802541c 	.word	0x5802541c
 800646c:	58025430 	.word	0x58025430
 8006470:	58025444 	.word	0x58025444
 8006474:	58025458 	.word	0x58025458
 8006478:	5802546c 	.word	0x5802546c
 800647c:	58025480 	.word	0x58025480
 8006480:	58025494 	.word	0x58025494
 8006484:	1600963f 	.word	0x1600963f
 8006488:	58025940 	.word	0x58025940
 800648c:	1000823f 	.word	0x1000823f
 8006490:	40020940 	.word	0x40020940

08006494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006494:	b480      	push	{r7}
 8006496:	b089      	sub	sp, #36	; 0x24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064a2:	4b86      	ldr	r3, [pc, #536]	; (80066bc <HAL_GPIO_Init+0x228>)
 80064a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064a6:	e18c      	b.n	80067c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	2101      	movs	r1, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 817e 	beq.w	80067bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d005      	beq.n	80064d8 <HAL_GPIO_Init+0x44>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d130      	bne.n	800653a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	2203      	movs	r2, #3
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800650e:	2201      	movs	r2, #1
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	f003 0201 	and.w	r2, r3, #1
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d017      	beq.n	8006576 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	2203      	movs	r2, #3
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d123      	bne.n	80065ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	08da      	lsrs	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3208      	adds	r2, #8
 800658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	220f      	movs	r2, #15
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	43db      	mvns	r3, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4013      	ands	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	08da      	lsrs	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3208      	adds	r2, #8
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	2203      	movs	r2, #3
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0203 	and.w	r2, r3, #3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80d8 	beq.w	80067bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <HAL_GPIO_Init+0x22c>)
 800660e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006612:	4a2b      	ldr	r2, [pc, #172]	; (80066c0 <HAL_GPIO_Init+0x22c>)
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800661c:	4b28      	ldr	r3, [pc, #160]	; (80066c0 <HAL_GPIO_Init+0x22c>)
 800661e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800662a:	4a26      	ldr	r2, [pc, #152]	; (80066c4 <HAL_GPIO_Init+0x230>)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	3302      	adds	r3, #2
 8006632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	220f      	movs	r2, #15
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43db      	mvns	r3, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <HAL_GPIO_Init+0x234>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d04a      	beq.n	80066ec <HAL_GPIO_Init+0x258>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_GPIO_Init+0x238>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d02b      	beq.n	80066b6 <HAL_GPIO_Init+0x222>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <HAL_GPIO_Init+0x23c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d025      	beq.n	80066b2 <HAL_GPIO_Init+0x21e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <HAL_GPIO_Init+0x240>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01f      	beq.n	80066ae <HAL_GPIO_Init+0x21a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <HAL_GPIO_Init+0x244>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d019      	beq.n	80066aa <HAL_GPIO_Init+0x216>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_GPIO_Init+0x248>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_GPIO_Init+0x212>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_GPIO_Init+0x24c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00d      	beq.n	80066a2 <HAL_GPIO_Init+0x20e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_GPIO_Init+0x250>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <HAL_GPIO_Init+0x20a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <HAL_GPIO_Init+0x254>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_GPIO_Init+0x206>
 8006696:	2309      	movs	r3, #9
 8006698:	e029      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 800669a:	230a      	movs	r3, #10
 800669c:	e027      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 800669e:	2307      	movs	r3, #7
 80066a0:	e025      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066a2:	2306      	movs	r3, #6
 80066a4:	e023      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066a6:	2305      	movs	r3, #5
 80066a8:	e021      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066aa:	2304      	movs	r3, #4
 80066ac:	e01f      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e01d      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e01b      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e019      	b.n	80066ee <HAL_GPIO_Init+0x25a>
 80066ba:	bf00      	nop
 80066bc:	58000080 	.word	0x58000080
 80066c0:	58024400 	.word	0x58024400
 80066c4:	58000400 	.word	0x58000400
 80066c8:	58020000 	.word	0x58020000
 80066cc:	58020400 	.word	0x58020400
 80066d0:	58020800 	.word	0x58020800
 80066d4:	58020c00 	.word	0x58020c00
 80066d8:	58021000 	.word	0x58021000
 80066dc:	58021400 	.word	0x58021400
 80066e0:	58021800 	.word	0x58021800
 80066e4:	58021c00 	.word	0x58021c00
 80066e8:	58022400 	.word	0x58022400
 80066ec:	2300      	movs	r3, #0
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	f002 0203 	and.w	r2, r2, #3
 80066f4:	0092      	lsls	r2, r2, #2
 80066f6:	4093      	lsls	r3, r2
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066fe:	4938      	ldr	r1, [pc, #224]	; (80067e0 <HAL_GPIO_Init+0x34c>)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	089b      	lsrs	r3, r3, #2
 8006704:	3302      	adds	r3, #2
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800670c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	43db      	mvns	r3, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4013      	ands	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800673a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	43db      	mvns	r3, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4013      	ands	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f ae6b 	bne.w	80064a8 <HAL_GPIO_Init+0x14>
  }
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	3724      	adds	r7, #36	; 0x24
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	58000400 	.word	0x58000400

080067e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
 80067f0:	4613      	mov	r3, r2
 80067f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067f4:	787b      	ldrb	r3, [r7, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067fa:	887a      	ldrh	r2, [r7, #2]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006800:	e003      	b.n	800680a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006802:	887b      	ldrh	r3, [r7, #2]
 8006804:	041a      	lsls	r2, r3, #16
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	619a      	str	r2, [r3, #24]
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_PWREx_ConfigSupply+0x70>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d00a      	beq.n	8006842 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800682c:	4b16      	ldr	r3, [pc, #88]	; (8006888 <HAL_PWREx_ConfigSupply+0x70>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d001      	beq.n	800683e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e01f      	b.n	800687e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e01d      	b.n	800687e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <HAL_PWREx_ConfigSupply+0x70>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 0207 	bic.w	r2, r3, #7
 800684a:	490f      	ldr	r1, [pc, #60]	; (8006888 <HAL_PWREx_ConfigSupply+0x70>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4313      	orrs	r3, r2
 8006850:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006852:	f7fc fa09 	bl	8002c68 <HAL_GetTick>
 8006856:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006858:	e009      	b.n	800686e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800685a:	f7fc fa05 	bl	8002c68 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006868:	d901      	bls.n	800686e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e007      	b.n	800687e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_PWREx_ConfigSupply+0x70>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687a:	d1ee      	bne.n	800685a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	58024800 	.word	0x58024800

0800688c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	; 0x30
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e397      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8087 	beq.w	80069ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ac:	4b9e      	ldr	r3, [pc, #632]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068b6:	4b9c      	ldr	r3, [pc, #624]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d007      	beq.n	80068d2 <HAL_RCC_OscConfig+0x46>
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	2b18      	cmp	r3, #24
 80068c6:	d110      	bne.n	80068ea <HAL_RCC_OscConfig+0x5e>
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d10b      	bne.n	80068ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d2:	4b95      	ldr	r3, [pc, #596]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06c      	beq.n	80069b8 <HAL_RCC_OscConfig+0x12c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d168      	bne.n	80069b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e371      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x76>
 80068f4:	4b8c      	ldr	r3, [pc, #560]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a8b      	ldr	r2, [pc, #556]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e02e      	b.n	8006960 <HAL_RCC_OscConfig+0xd4>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x98>
 800690a:	4b87      	ldr	r3, [pc, #540]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a86      	ldr	r2, [pc, #536]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b84      	ldr	r3, [pc, #528]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800691c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e01d      	b.n	8006960 <HAL_RCC_OscConfig+0xd4>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800692c:	d10c      	bne.n	8006948 <HAL_RCC_OscConfig+0xbc>
 800692e:	4b7e      	ldr	r3, [pc, #504]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7d      	ldr	r2, [pc, #500]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	4b7b      	ldr	r3, [pc, #492]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7a      	ldr	r2, [pc, #488]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e00b      	b.n	8006960 <HAL_RCC_OscConfig+0xd4>
 8006948:	4b77      	ldr	r3, [pc, #476]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a76      	ldr	r2, [pc, #472]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800694e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b74      	ldr	r3, [pc, #464]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a73      	ldr	r2, [pc, #460]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 800695a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800695e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fc f97e 	bl	8002c68 <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006970:	f7fc f97a 	bl	8002c68 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	; 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e325      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006982:	4b69      	ldr	r3, [pc, #420]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0xe4>
 800698e:	e014      	b.n	80069ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fc f96a 	bl	8002c68 <HAL_GetTick>
 8006994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006998:	f7fc f966 	bl	8002c68 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	; 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e311      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069aa:	4b5f      	ldr	r3, [pc, #380]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x10c>
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 808a 	beq.w	8006adc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c8:	4b57      	ldr	r3, [pc, #348]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069d2:	4b55      	ldr	r3, [pc, #340]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_RCC_OscConfig+0x162>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b18      	cmp	r3, #24
 80069e2:	d137      	bne.n	8006a54 <HAL_RCC_OscConfig+0x1c8>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d132      	bne.n	8006a54 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_RCC_OscConfig+0x17a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e2e3      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a06:	4b48      	ldr	r3, [pc, #288]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 0219 	bic.w	r2, r3, #25
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	4945      	ldr	r1, [pc, #276]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a18:	f7fc f926 	bl	8002c68 <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a20:	f7fc f922 	bl	8002c68 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e2cd      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a32:	4b3d      	ldr	r3, [pc, #244]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3e:	4b3a      	ldr	r3, [pc, #232]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	4936      	ldr	r1, [pc, #216]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a52:	e043      	b.n	8006adc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d026      	beq.n	8006aaa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a5c:	4b32      	ldr	r3, [pc, #200]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 0219 	bic.w	r2, r3, #25
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	492f      	ldr	r1, [pc, #188]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6e:	f7fc f8fb 	bl	8002c68 <HAL_GetTick>
 8006a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a76:	f7fc f8f7 	bl	8002c68 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e2a2      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a88:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f0      	beq.n	8006a76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	4921      	ldr	r1, [pc, #132]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	e018      	b.n	8006adc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aaa:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7fc f8d7 	bl	8002c68 <HAL_GetTick>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006abe:	f7fc f8d3 	bl	8002c68 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e27e      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ad0:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d06d      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d007      	beq.n	8006b0e <HAL_RCC_OscConfig+0x282>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b18      	cmp	r3, #24
 8006b02:	d11e      	bne.n	8006b42 <HAL_RCC_OscConfig+0x2b6>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d119      	bne.n	8006b42 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RCC_OscConfig+0x29c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <HAL_RCC_OscConfig+0x2a0>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	d004      	beq.n	8006b2c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e253      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b2c:	4ba3      	ldr	r3, [pc, #652]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	061b      	lsls	r3, r3, #24
 8006b3a:	49a0      	ldr	r1, [pc, #640]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b40:	e040      	b.n	8006bc4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b4a:	4b9c      	ldr	r3, [pc, #624]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a9b      	ldr	r2, [pc, #620]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fc f887 	bl	8002c68 <HAL_GetTick>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b5e:	f7fc f883 	bl	8002c68 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e22e      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b70:	4b92      	ldr	r3, [pc, #584]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f0      	beq.n	8006b5e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b7c:	4b8f      	ldr	r3, [pc, #572]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	061b      	lsls	r3, r3, #24
 8006b8a:	498c      	ldr	r1, [pc, #560]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60cb      	str	r3, [r1, #12]
 8006b90:	e018      	b.n	8006bc4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b92:	4b8a      	ldr	r3, [pc, #552]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a89      	ldr	r2, [pc, #548]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fc f863 	bl	8002c68 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ba6:	f7fc f85f 	bl	8002c68 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e20a      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bb8:	4b80      	ldr	r3, [pc, #512]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d036      	beq.n	8006c3e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d019      	beq.n	8006c0c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bd8:	4b78      	ldr	r3, [pc, #480]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bdc:	4a77      	ldr	r2, [pc, #476]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be4:	f7fc f840 	bl	8002c68 <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bec:	f7fc f83c 	bl	8002c68 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e1e7      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bfe:	4b6f      	ldr	r3, [pc, #444]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x360>
 8006c0a:	e018      	b.n	8006c3e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c0c:	4b6b      	ldr	r3, [pc, #428]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	4a6a      	ldr	r2, [pc, #424]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c12:	f023 0301 	bic.w	r3, r3, #1
 8006c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fc f826 	bl	8002c68 <HAL_GetTick>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fc f822 	bl	8002c68 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1cd      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c32:	4b62      	ldr	r3, [pc, #392]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d036      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d019      	beq.n	8006c86 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c52:	4b5a      	ldr	r3, [pc, #360]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a59      	ldr	r2, [pc, #356]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c5e:	f7fc f803 	bl	8002c68 <HAL_GetTick>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c66:	f7fb ffff 	bl	8002c68 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e1aa      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c78:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x3da>
 8006c84:	e018      	b.n	8006cb8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c86:	4b4d      	ldr	r3, [pc, #308]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a4c      	ldr	r2, [pc, #304]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c92:	f7fb ffe9 	bl	8002c68 <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c9a:	f7fb ffe5 	bl	8002c68 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e190      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cac:	4b43      	ldr	r3, [pc, #268]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8085 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cc6:	4b3e      	ldr	r3, [pc, #248]	; (8006dc0 <HAL_RCC_OscConfig+0x534>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3d      	ldr	r2, [pc, #244]	; (8006dc0 <HAL_RCC_OscConfig+0x534>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cd2:	f7fb ffc9 	bl	8002c68 <HAL_GetTick>
 8006cd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cda:	f7fb ffc5 	bl	8002c68 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e170      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cec:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <HAL_RCC_OscConfig+0x534>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCC_OscConfig+0x482>
 8006d00:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d04:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0c:	e02d      	b.n	8006d6a <HAL_RCC_OscConfig+0x4de>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4a4>
 8006d16:	4b29      	ldr	r3, [pc, #164]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	6713      	str	r3, [r2, #112]	; 0x70
 8006d22:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d28:	f023 0304 	bic.w	r3, r3, #4
 8006d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2e:	e01c      	b.n	8006d6a <HAL_RCC_OscConfig+0x4de>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	d10c      	bne.n	8006d52 <HAL_RCC_OscConfig+0x4c6>
 8006d38:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a1f      	ldr	r2, [pc, #124]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d3e:	f043 0304 	orr.w	r3, r3, #4
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d50:	e00b      	b.n	8006d6a <HAL_RCC_OscConfig+0x4de>
 8006d52:	4b1a      	ldr	r3, [pc, #104]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d015      	beq.n	8006d9e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d72:	f7fb ff79 	bl	8002c68 <HAL_GetTick>
 8006d76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d78:	e00a      	b.n	8006d90 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d7a:	f7fb ff75 	bl	8002c68 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e11e      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <HAL_RCC_OscConfig+0x530>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ee      	beq.n	8006d7a <HAL_RCC_OscConfig+0x4ee>
 8006d9c:	e018      	b.n	8006dd0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9e:	f7fb ff63 	bl	8002c68 <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006da4:	e00e      	b.n	8006dc4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006da6:	f7fb ff5f 	bl	8002c68 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d905      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e108      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dc4:	4b84      	ldr	r3, [pc, #528]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ea      	bne.n	8006da6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80f9 	beq.w	8006fcc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006dda:	4b7f      	ldr	r3, [pc, #508]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de2:	2b18      	cmp	r3, #24
 8006de4:	f000 80b4 	beq.w	8006f50 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	f040 8095 	bne.w	8006f1c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df2:	4b79      	ldr	r3, [pc, #484]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a78      	ldr	r2, [pc, #480]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006df8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfe:	f7fb ff33 	bl	8002c68 <HAL_GetTick>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e06:	f7fb ff2f 	bl	8002c68 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e0da      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e18:	4b6f      	ldr	r3, [pc, #444]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e24:	4b6c      	ldr	r3, [pc, #432]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e28:	4b6c      	ldr	r3, [pc, #432]	; (8006fdc <HAL_RCC_OscConfig+0x750>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e34:	0112      	lsls	r2, r2, #4
 8006e36:	430a      	orrs	r2, r1
 8006e38:	4967      	ldr	r1, [pc, #412]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	628b      	str	r3, [r1, #40]	; 0x28
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	025b      	lsls	r3, r3, #9
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	3b01      	subs	r3, #1
 8006e68:	061b      	lsls	r3, r3, #24
 8006e6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e6e:	495a      	ldr	r1, [pc, #360]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e74:	4b58      	ldr	r3, [pc, #352]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4a57      	ldr	r2, [pc, #348]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e80:	4b55      	ldr	r3, [pc, #340]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e84:	4b56      	ldr	r3, [pc, #344]	; (8006fe0 <HAL_RCC_OscConfig+0x754>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e8c:	00d2      	lsls	r2, r2, #3
 8006e8e:	4952      	ldr	r1, [pc, #328]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e94:	4b50      	ldr	r3, [pc, #320]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	f023 020c 	bic.w	r2, r3, #12
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	494d      	ldr	r1, [pc, #308]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ea6:	4b4c      	ldr	r3, [pc, #304]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f023 0202 	bic.w	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	4949      	ldr	r1, [pc, #292]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006eb8:	4b47      	ldr	r3, [pc, #284]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a46      	ldr	r2, [pc, #280]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a43      	ldr	r2, [pc, #268]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ed0:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a40      	ldr	r2, [pc, #256]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006edc:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a3d      	ldr	r2, [pc, #244]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee8:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a3a      	ldr	r2, [pc, #232]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fb feb8 	bl	8002c68 <HAL_GetTick>
 8006ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006efc:	f7fb feb4 	bl	8002c68 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e05f      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f0e:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0x670>
 8006f1a:	e057      	b.n	8006fcc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2d      	ldr	r2, [pc, #180]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fb fe9e 	bl	8002c68 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fb fe9a 	bl	8002c68 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e045      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f42:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x6a4>
 8006f4e:	e03d      	b.n	8006fcc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f50:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f56:	4b20      	ldr	r3, [pc, #128]	; (8006fd8 <HAL_RCC_OscConfig+0x74c>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d031      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f003 0203 	and.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d12a      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d122      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11a      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	0a5b      	lsrs	r3, r3, #9
 8006f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d111      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d108      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3730      	adds	r7, #48	; 0x30
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	fffffc0c 	.word	0xfffffc0c
 8006fe0:	ffff0007 	.word	0xffff0007

08006fe4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e19c      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff8:	4b8a      	ldr	r3, [pc, #552]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d910      	bls.n	8007028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007006:	4b87      	ldr	r3, [pc, #540]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f023 020f 	bic.w	r2, r3, #15
 800700e:	4985      	ldr	r1, [pc, #532]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007016:	4b83      	ldr	r3, [pc, #524]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e184      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007040:	429a      	cmp	r2, r3
 8007042:	d908      	bls.n	8007056 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007044:	4b78      	ldr	r3, [pc, #480]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	4975      	ldr	r1, [pc, #468]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007052:	4313      	orrs	r3, r2
 8007054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d010      	beq.n	8007084 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	4b70      	ldr	r3, [pc, #448]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800706e:	429a      	cmp	r2, r3
 8007070:	d908      	bls.n	8007084 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007072:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	496a      	ldr	r1, [pc, #424]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007080:	4313      	orrs	r3, r2
 8007082:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	4b64      	ldr	r3, [pc, #400]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709c:	429a      	cmp	r2, r3
 800709e:	d908      	bls.n	80070b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070a0:	4b61      	ldr	r3, [pc, #388]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	495e      	ldr	r1, [pc, #376]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d010      	beq.n	80070e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	4b59      	ldr	r3, [pc, #356]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d908      	bls.n	80070e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070ce:	4b56      	ldr	r3, [pc, #344]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	4953      	ldr	r1, [pc, #332]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d010      	beq.n	800710e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	4b4d      	ldr	r3, [pc, #308]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d908      	bls.n	800710e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070fc:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f023 020f 	bic.w	r2, r3, #15
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4947      	ldr	r1, [pc, #284]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 800710a:	4313      	orrs	r3, r2
 800710c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d055      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800711a:	4b43      	ldr	r3, [pc, #268]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	4940      	ldr	r1, [pc, #256]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007128:	4313      	orrs	r3, r2
 800712a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d107      	bne.n	8007144 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007134:	4b3c      	ldr	r3, [pc, #240]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d121      	bne.n	8007184 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0f6      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b03      	cmp	r3, #3
 800714a:	d107      	bne.n	800715c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800714c:	4b36      	ldr	r3, [pc, #216]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d115      	bne.n	8007184 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0ea      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007164:	4b30      	ldr	r3, [pc, #192]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e0de      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007174:	4b2c      	ldr	r3, [pc, #176]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0d6      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f023 0207 	bic.w	r2, r3, #7
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	4925      	ldr	r1, [pc, #148]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 8007192:	4313      	orrs	r3, r2
 8007194:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fb fd67 	bl	8002c68 <HAL_GetTick>
 800719a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719c:	e00a      	b.n	80071b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800719e:	f7fb fd63 	bl	8002c68 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e0be      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b4:	4b1c      	ldr	r3, [pc, #112]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d1eb      	bne.n	800719e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d010      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	429a      	cmp	r2, r3
 80071e0:	d208      	bcs.n	80071f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f023 020f 	bic.w	r2, r3, #15
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	490e      	ldr	r1, [pc, #56]	; (8007228 <HAL_RCC_ClockConfig+0x244>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071f4:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d214      	bcs.n	800722c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	4b08      	ldr	r3, [pc, #32]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 020f 	bic.w	r2, r3, #15
 800720a:	4906      	ldr	r1, [pc, #24]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007212:	4b04      	ldr	r3, [pc, #16]	; (8007224 <HAL_RCC_ClockConfig+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d005      	beq.n	800722c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e086      	b.n	8007332 <HAL_RCC_ClockConfig+0x34e>
 8007224:	52002000 	.word	0x52002000
 8007228:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	4b3f      	ldr	r3, [pc, #252]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007244:	429a      	cmp	r2, r3
 8007246:	d208      	bcs.n	800725a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007248:	4b3c      	ldr	r3, [pc, #240]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4939      	ldr	r1, [pc, #228]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 8007256:	4313      	orrs	r3, r2
 8007258:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d010      	beq.n	8007288 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	4b34      	ldr	r3, [pc, #208]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007272:	429a      	cmp	r2, r3
 8007274:	d208      	bcs.n	8007288 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007276:	4b31      	ldr	r3, [pc, #196]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	492e      	ldr	r1, [pc, #184]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 8007284:	4313      	orrs	r3, r2
 8007286:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699a      	ldr	r2, [r3, #24]
 8007298:	4b28      	ldr	r3, [pc, #160]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d208      	bcs.n	80072b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072a4:	4b25      	ldr	r3, [pc, #148]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	4922      	ldr	r1, [pc, #136]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69da      	ldr	r2, [r3, #28]
 80072c6:	4b1d      	ldr	r3, [pc, #116]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d208      	bcs.n	80072e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4917      	ldr	r1, [pc, #92]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072e4:	f000 f844 	bl	8007370 <HAL_RCC_GetSysClockFreq>
 80072e8:	4602      	mov	r2, r0
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	4912      	ldr	r1, [pc, #72]	; (8007340 <HAL_RCC_ClockConfig+0x35c>)
 80072f6:	5ccb      	ldrb	r3, [r1, r3]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007302:	4b0e      	ldr	r3, [pc, #56]	; (800733c <HAL_RCC_ClockConfig+0x358>)
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	4a0d      	ldr	r2, [pc, #52]	; (8007340 <HAL_RCC_ClockConfig+0x35c>)
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
 8007318:	4a0a      	ldr	r2, [pc, #40]	; (8007344 <HAL_RCC_ClockConfig+0x360>)
 800731a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800731c:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <HAL_RCC_ClockConfig+0x364>)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_RCC_ClockConfig+0x368>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f7fb fc54 	bl	8002bd4 <HAL_InitTick>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	58024400 	.word	0x58024400
 8007340:	0800f128 	.word	0x0800f128
 8007344:	24000004 	.word	0x24000004
 8007348:	24000000 	.word	0x24000000
 800734c:	24000008 	.word	0x24000008

08007350 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_RCC_EnableCSS+0x1c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a04      	ldr	r2, [pc, #16]	; (800736c <HAL_RCC_EnableCSS+0x1c>)
 800735a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800735e:	6013      	str	r3, [r2, #0]
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400

08007370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007376:	4bb3      	ldr	r3, [pc, #716]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800737e:	2b18      	cmp	r3, #24
 8007380:	f200 8155 	bhi.w	800762e <HAL_RCC_GetSysClockFreq+0x2be>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073f1 	.word	0x080073f1
 8007390:	0800762f 	.word	0x0800762f
 8007394:	0800762f 	.word	0x0800762f
 8007398:	0800762f 	.word	0x0800762f
 800739c:	0800762f 	.word	0x0800762f
 80073a0:	0800762f 	.word	0x0800762f
 80073a4:	0800762f 	.word	0x0800762f
 80073a8:	0800762f 	.word	0x0800762f
 80073ac:	08007417 	.word	0x08007417
 80073b0:	0800762f 	.word	0x0800762f
 80073b4:	0800762f 	.word	0x0800762f
 80073b8:	0800762f 	.word	0x0800762f
 80073bc:	0800762f 	.word	0x0800762f
 80073c0:	0800762f 	.word	0x0800762f
 80073c4:	0800762f 	.word	0x0800762f
 80073c8:	0800762f 	.word	0x0800762f
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800762f 	.word	0x0800762f
 80073d4:	0800762f 	.word	0x0800762f
 80073d8:	0800762f 	.word	0x0800762f
 80073dc:	0800762f 	.word	0x0800762f
 80073e0:	0800762f 	.word	0x0800762f
 80073e4:	0800762f 	.word	0x0800762f
 80073e8:	0800762f 	.word	0x0800762f
 80073ec:	08007423 	.word	0x08007423
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f0:	4b94      	ldr	r3, [pc, #592]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073fc:	4b91      	ldr	r3, [pc, #580]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a90      	ldr	r2, [pc, #576]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800740e:	e111      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007410:	4b8d      	ldr	r3, [pc, #564]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007412:	61bb      	str	r3, [r7, #24]
    break;
 8007414:	e10e      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007416:	4b8d      	ldr	r3, [pc, #564]	; (800764c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007418:	61bb      	str	r3, [r7, #24]
    break;
 800741a:	e10b      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800741c:	4b8c      	ldr	r3, [pc, #560]	; (8007650 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800741e:	61bb      	str	r3, [r7, #24]
    break;
 8007420:	e108      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007422:	4b88      	ldr	r3, [pc, #544]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800742c:	4b85      	ldr	r3, [pc, #532]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007436:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007438:	4b82      	ldr	r3, [pc, #520]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007442:	4b80      	ldr	r3, [pc, #512]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	08db      	lsrs	r3, r3, #3
 8007448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80e1 	beq.w	8007628 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b02      	cmp	r3, #2
 800746a:	f000 8083 	beq.w	8007574 <HAL_RCC_GetSysClockFreq+0x204>
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b02      	cmp	r3, #2
 8007472:	f200 80a1 	bhi.w	80075b8 <HAL_RCC_GetSysClockFreq+0x248>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0x114>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d056      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007482:	e099      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007484:	4b6f      	ldr	r3, [pc, #444]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d02d      	beq.n	80074ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007490:	4b6c      	ldr	r3, [pc, #432]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	08db      	lsrs	r3, r3, #3
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	4a6b      	ldr	r2, [pc, #428]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b62      	ldr	r3, [pc, #392]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074ea:	e087      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007658 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b51      	ldr	r3, [pc, #324]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007512:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752e:	e065      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800765c <HAL_RCC_GetSysClockFreq+0x2ec>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b40      	ldr	r3, [pc, #256]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a02 	vldr	s12, [r7, #8]
 8007556:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007572:	e043      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007660 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a02 	vldr	s12, [r7, #8]
 800759a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b6:	e021      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800765c <HAL_RCC_GetSysClockFreq+0x2ec>
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a02 	vldr	s12, [r7, #8]
 80075de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	0a5b      	lsrs	r3, r3, #9
 8007602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007606:	3301      	adds	r3, #1
 8007608:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007614:	edd7 6a07 	vldr	s13, [r7, #28]
 8007618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 3a90 	vmov	r3, s15
 8007624:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007626:	e005      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	61bb      	str	r3, [r7, #24]
    break;
 800762c:	e002      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007630:	61bb      	str	r3, [r7, #24]
    break;
 8007632:	bf00      	nop
  }

  return sysclockfreq;
 8007634:	69bb      	ldr	r3, [r7, #24]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3724      	adds	r7, #36	; 0x24
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
 8007648:	03d09000 	.word	0x03d09000
 800764c:	003d0900 	.word	0x003d0900
 8007650:	017d7840 	.word	0x017d7840
 8007654:	46000000 	.word	0x46000000
 8007658:	4c742400 	.word	0x4c742400
 800765c:	4a742400 	.word	0x4a742400
 8007660:	4bbebc20 	.word	0x4bbebc20

08007664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800766a:	f7ff fe81 	bl	8007370 <HAL_RCC_GetSysClockFreq>
 800766e:	4602      	mov	r2, r0
 8007670:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	490f      	ldr	r1, [pc, #60]	; (80076b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800767c:	5ccb      	ldrb	r3, [r1, r3]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007692:	5cd3      	ldrb	r3, [r2, r3]
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	4a07      	ldr	r2, [pc, #28]	; (80076bc <HAL_RCC_GetHCLKFreq+0x58>)
 80076a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076a2:	4a07      	ldr	r2, [pc, #28]	; (80076c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076a8:	4b04      	ldr	r3, [pc, #16]	; (80076bc <HAL_RCC_GetHCLKFreq+0x58>)
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	58024400 	.word	0x58024400
 80076b8:	0800f128 	.word	0x0800f128
 80076bc:	24000004 	.word	0x24000004
 80076c0:	24000000 	.word	0x24000000

080076c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076c8:	f7ff ffcc 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	091b      	lsrs	r3, r3, #4
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	4904      	ldr	r1, [pc, #16]	; (80076ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	58024400 	.word	0x58024400
 80076ec:	0800f128 	.word	0x0800f128

080076f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076f4:	f7ff ffb6 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80076f8:	4602      	mov	r2, r0
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4904      	ldr	r1, [pc, #16]	; (8007718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007706:	5ccb      	ldrb	r3, [r1, r3]
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007710:	4618      	mov	r0, r3
 8007712:	bd80      	pop	{r7, pc}
 8007714:	58024400 	.word	0x58024400
 8007718:	0800f128 	.word	0x0800f128

0800771c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	d105      	bne.n	800773a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800772e:	f000 f809 	bl	8007744 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007738:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400

08007744 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800775c:	2300      	movs	r3, #0
 800775e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007760:	2300      	movs	r3, #0
 8007762:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d03f      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007774:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007778:	d02a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800777a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800777e:	d824      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007784:	d018      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800778a:	d81e      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007794:	d007      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007796:	e018      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007798:	4bab      	ldr	r3, [pc, #684]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4aaa      	ldr	r2, [pc, #680]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800779e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077a4:	e015      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3304      	adds	r3, #4
 80077aa:	2102      	movs	r1, #2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 feff 	bl	80095b0 <RCCEx_PLL2_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077b6:	e00c      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3324      	adds	r3, #36	; 0x24
 80077bc:	2102      	movs	r1, #2
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 ffa8 	bl	8009714 <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
      break;
 80077ce:	e000      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077d8:	4b9b      	ldr	r3, [pc, #620]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e4:	4998      	ldr	r1, [pc, #608]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	650b      	str	r3, [r1, #80]	; 0x50
 80077ea:	e001      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d03d      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	2b04      	cmp	r3, #4
 8007802:	d826      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007821 	.word	0x08007821
 8007810:	0800782f 	.word	0x0800782f
 8007814:	08007841 	.word	0x08007841
 8007818:	08007859 	.word	0x08007859
 800781c:	08007859 	.word	0x08007859
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007820:	4b89      	ldr	r3, [pc, #548]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a88      	ldr	r2, [pc, #544]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800782c:	e015      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3304      	adds	r3, #4
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f001 febb 	bl	80095b0 <RCCEx_PLL2_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800783e:	e00c      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3324      	adds	r3, #36	; 0x24
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f001 ff64 	bl	8009714 <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007850:	e003      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
      break;
 8007856:	e000      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007860:	4b79      	ldr	r3, [pc, #484]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f023 0207 	bic.w	r2, r3, #7
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	4976      	ldr	r1, [pc, #472]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800786e:	4313      	orrs	r3, r2
 8007870:	650b      	str	r3, [r1, #80]	; 0x50
 8007872:	e001      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007880:	2b00      	cmp	r3, #0
 8007882:	d051      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800788a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800788e:	d036      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007890:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007894:	d830      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800789a:	d032      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800789c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078a0:	d82a      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078a6:	d02e      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80078a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078ac:	d824      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b2:	d018      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80078b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b8:	d81e      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80078be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078c2:	d007      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80078c4:	e018      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c6:	4b60      	ldr	r3, [pc, #384]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	4a5f      	ldr	r2, [pc, #380]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078d2:	e019      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fe68 	bl	80095b0 <RCCEx_PLL2_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078e4:	e010      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 ff11 	bl	8009714 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078f6:	e007      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	e004      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80078fe:	bf00      	nop
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007902:	bf00      	nop
 8007904:	e000      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10a      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800790e:	4b4e      	ldr	r3, [pc, #312]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007912:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800791c:	494a      	ldr	r1, [pc, #296]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800791e:	4313      	orrs	r3, r2
 8007920:	658b      	str	r3, [r1, #88]	; 0x58
 8007922:	e001      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007930:	2b00      	cmp	r3, #0
 8007932:	d051      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800793a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800793e:	d036      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007940:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007944:	d830      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800794a:	d032      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800794c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007950:	d82a      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007952:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007956:	d02e      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800795c:	d824      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800795e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007962:	d018      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007968:	d81e      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800796e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007972:	d007      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007974:	e018      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007976:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a33      	ldr	r2, [pc, #204]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800797c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007982:	e019      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fe10 	bl	80095b0 <RCCEx_PLL2_Config>
 8007990:	4603      	mov	r3, r0
 8007992:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007994:	e010      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3324      	adds	r3, #36	; 0x24
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f001 feb9 	bl	8009714 <RCCEx_PLL3_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079a6:	e007      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
      break;
 80079ac:	e004      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079ae:	bf00      	nop
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80079b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079cc:	491e      	ldr	r1, [pc, #120]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	658b      	str	r3, [r1, #88]	; 0x58
 80079d2:	e001      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d035      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e8:	2b30      	cmp	r3, #48	; 0x30
 80079ea:	d01c      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80079ec:	2b30      	cmp	r3, #48	; 0x30
 80079ee:	d817      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d00c      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d813      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d016      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d10f      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007a0c:	e00e      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2102      	movs	r1, #2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fdcb 	bl	80095b0 <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007a1e:	e005      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
      break;
 8007a24:	e002      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a3e:	4902      	ldr	r1, [pc, #8]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a44:	e004      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d047      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a64:	d030      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a6a:	d82a      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a70:	d02c      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007a72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a76:	d824      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7c:	d018      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a82:	d81e      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d007      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a8e:	e018      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4bac      	ldr	r3, [pc, #688]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4aab      	ldr	r2, [pc, #684]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a9c:	e017      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 fd83 	bl	80095b0 <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aae:	e00e      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 fe2c 	bl	8009714 <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ac0:	e005      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac6:	e002      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ad4:	4b9b      	ldr	r3, [pc, #620]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae0:	4998      	ldr	r1, [pc, #608]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ae6:	e001      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d049      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b00:	d02e      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b06:	d828      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b0c:	d02a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b12:	d822      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b18:	d026      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b1e:	d81c      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b24:	d010      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2a:	d816      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01d      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b34:	d111      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fd37 	bl	80095b0 <RCCEx_PLL2_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b46:	e012      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3324      	adds	r3, #36	; 0x24
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fde0 	bl	8009714 <RCCEx_PLL3_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b58:	e009      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5e:	e006      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b60:	bf00      	nop
 8007b62:	e004      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b64:	bf00      	nop
 8007b66:	e002      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b74:	4b73      	ldr	r3, [pc, #460]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b80:	4970      	ldr	r1, [pc, #448]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	650b      	str	r3, [r1, #80]	; 0x50
 8007b86:	e001      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d04b      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba2:	d02e      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba8:	d828      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bae:	d02a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d822      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bba:	d026      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bc0:	d81c      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc6:	d010      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d816      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01d      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bd6:	d111      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 fce6 	bl	80095b0 <RCCEx_PLL2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007be8:	e012      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 fd8f 	bl	8009714 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bfa:	e009      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007c00:	e006      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c02:	bf00      	nop
 8007c04:	e004      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c16:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c24:	4947      	ldr	r1, [pc, #284]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	658b      	str	r3, [r1, #88]	; 0x58
 8007c2a:	e001      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02f      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c44:	d00e      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4a:	d814      	bhi.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d015      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c54:	d10f      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c56:	4b3b      	ldr	r3, [pc, #236]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c62:	e00c      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fca0 	bl	80095b0 <RCCEx_PLL2_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c74:	e003      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c90:	492c      	ldr	r1, [pc, #176]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	650b      	str	r3, [r1, #80]	; 0x50
 8007c96:	e001      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d032      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d81b      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cef 	.word	0x08007cef
 8007cbc:	08007cc9 	.word	0x08007cc9
 8007cc0:	08007cd7 	.word	0x08007cd7
 8007cc4:	08007cef 	.word	0x08007cef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cd4:	e00c      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2102      	movs	r1, #2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fc67 	bl	80095b0 <RCCEx_PLL2_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e000      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	f023 0203 	bic.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	4910      	ldr	r1, [pc, #64]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d08:	e001      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 808a 	beq.w	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a09      	ldr	r2, [pc, #36]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d28:	f7fa ff9e 	bl	8002c68 <HAL_GetTick>
 8007d2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d2e:	e00d      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d30:	f7fa ff9a 	bl	8002c68 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b64      	cmp	r3, #100	; 0x64
 8007d3c:	d906      	bls.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	75fb      	strb	r3, [r7, #23]
        break;
 8007d42:	e009      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007d44:	58024400 	.word	0x58024400
 8007d48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d4c:	4bb9      	ldr	r3, [pc, #740]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0eb      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d166      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d5e:	4bb6      	ldr	r3, [pc, #728]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d68:	4053      	eors	r3, r2
 8007d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d013      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d72:	4bb1      	ldr	r3, [pc, #708]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d7c:	4bae      	ldr	r3, [pc, #696]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	4aad      	ldr	r2, [pc, #692]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d88:	4bab      	ldr	r3, [pc, #684]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	4aaa      	ldr	r2, [pc, #680]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d94:	4aa8      	ldr	r2, [pc, #672]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	d115      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da6:	f7fa ff5f 	bl	8002c68 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dac:	e00b      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fa ff5b 	bl	8002c68 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d902      	bls.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8007dc4:	e005      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dc6:	4b9c      	ldr	r3, [pc, #624]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0ed      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d126      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de6:	d10d      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007de8:	4b93      	ldr	r3, [pc, #588]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007df6:	0919      	lsrs	r1, r3, #4
 8007df8:	4b90      	ldr	r3, [pc, #576]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dfa:	400b      	ands	r3, r1
 8007dfc:	498e      	ldr	r1, [pc, #568]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]
 8007e02:	e005      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007e04:	4b8c      	ldr	r3, [pc, #560]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	4a8b      	ldr	r2, [pc, #556]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e0e:	6113      	str	r3, [r2, #16]
 8007e10:	4b89      	ldr	r3, [pc, #548]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e1e:	4986      	ldr	r1, [pc, #536]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	670b      	str	r3, [r1, #112]	; 0x70
 8007e24:	e004      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	75bb      	strb	r3, [r7, #22]
 8007e2a:	e001      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d07e      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e40:	2b28      	cmp	r3, #40	; 0x28
 8007e42:	d867      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007f1b 	.word	0x08007f1b
 8007e50:	08007f15 	.word	0x08007f15
 8007e54:	08007f15 	.word	0x08007f15
 8007e58:	08007f15 	.word	0x08007f15
 8007e5c:	08007f15 	.word	0x08007f15
 8007e60:	08007f15 	.word	0x08007f15
 8007e64:	08007f15 	.word	0x08007f15
 8007e68:	08007f15 	.word	0x08007f15
 8007e6c:	08007ef1 	.word	0x08007ef1
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f15 	.word	0x08007f15
 8007e78:	08007f15 	.word	0x08007f15
 8007e7c:	08007f15 	.word	0x08007f15
 8007e80:	08007f15 	.word	0x08007f15
 8007e84:	08007f15 	.word	0x08007f15
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f03 	.word	0x08007f03
 8007e90:	08007f15 	.word	0x08007f15
 8007e94:	08007f15 	.word	0x08007f15
 8007e98:	08007f15 	.word	0x08007f15
 8007e9c:	08007f15 	.word	0x08007f15
 8007ea0:	08007f15 	.word	0x08007f15
 8007ea4:	08007f15 	.word	0x08007f15
 8007ea8:	08007f15 	.word	0x08007f15
 8007eac:	08007f1b 	.word	0x08007f1b
 8007eb0:	08007f15 	.word	0x08007f15
 8007eb4:	08007f15 	.word	0x08007f15
 8007eb8:	08007f15 	.word	0x08007f15
 8007ebc:	08007f15 	.word	0x08007f15
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08007f15 	.word	0x08007f15
 8007ec8:	08007f15 	.word	0x08007f15
 8007ecc:	08007f1b 	.word	0x08007f1b
 8007ed0:	08007f15 	.word	0x08007f15
 8007ed4:	08007f15 	.word	0x08007f15
 8007ed8:	08007f15 	.word	0x08007f15
 8007edc:	08007f15 	.word	0x08007f15
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08007f15 	.word	0x08007f15
 8007ee8:	08007f15 	.word	0x08007f15
 8007eec:	08007f1b 	.word	0x08007f1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fb5a 	bl	80095b0 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f00:	e00c      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fc03 	bl	8009714 <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
      break;
 8007f18:	e000      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f22:	4b45      	ldr	r3, [pc, #276]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2e:	4942      	ldr	r1, [pc, #264]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	654b      	str	r3, [r1, #84]	; 0x54
 8007f34:	e001      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d037      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d820      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f97 	.word	0x08007f97
 8007f58:	08007f6d 	.word	0x08007f6d
 8007f5c:	08007f7f 	.word	0x08007f7f
 8007f60:	08007f97 	.word	0x08007f97
 8007f64:	08007f97 	.word	0x08007f97
 8007f68:	08007f97 	.word	0x08007f97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	2101      	movs	r1, #1
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 fb1c 	bl	80095b0 <RCCEx_PLL2_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f7c:	e00c      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3324      	adds	r3, #36	; 0x24
 8007f82:	2101      	movs	r1, #1
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 fbc5 	bl	8009714 <RCCEx_PLL3_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f9e:	4b26      	ldr	r3, [pc, #152]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	f023 0207 	bic.w	r2, r3, #7
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	4923      	ldr	r1, [pc, #140]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	654b      	str	r3, [r1, #84]	; 0x54
 8007fb0:	e001      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d040      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	d821      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007fcc:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08008017 	.word	0x08008017
 8007fd8:	08007fed 	.word	0x08007fed
 8007fdc:	08007fff 	.word	0x08007fff
 8007fe0:	08008017 	.word	0x08008017
 8007fe4:	08008017 	.word	0x08008017
 8007fe8:	08008017 	.word	0x08008017
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fadc 	bl	80095b0 <RCCEx_PLL2_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ffc:	e00c      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3324      	adds	r3, #36	; 0x24
 8008002:	2101      	movs	r1, #1
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fb85 	bl	8009714 <RCCEx_PLL3_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800800e:	e003      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
      break;
 8008014:	e000      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d110      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008022:	f023 0207 	bic.w	r2, r3, #7
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800802c:	4902      	ldr	r1, [pc, #8]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800802e:	4313      	orrs	r3, r2
 8008030:	658b      	str	r3, [r1, #88]	; 0x58
 8008032:	e007      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008034:	58024800 	.word	0x58024800
 8008038:	58024400 	.word	0x58024400
 800803c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d04b      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800805a:	d02e      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x966>
 800805c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008060:	d828      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d02a      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806c:	d822      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800806e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008072:	d026      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008078:	d81c      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807e:	d010      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008084:	d816      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01d      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800808a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808e:	d111      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fa8a 	bl	80095b0 <RCCEx_PLL2_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080a0:	e012      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3324      	adds	r3, #36	; 0x24
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fb33 	bl	8009714 <RCCEx_PLL3_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080b2:	e009      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
      break;
 80080b8:	e006      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080ba:	bf00      	nop
 80080bc:	e004      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080be:	bf00      	nop
 80080c0:	e002      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080c2:	bf00      	nop
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ce:	4bb2      	ldr	r3, [pc, #712]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080dc:	49ae      	ldr	r1, [pc, #696]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	654b      	str	r3, [r1, #84]	; 0x54
 80080e2:	e001      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d04b      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080fe:	d02e      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008100:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008104:	d828      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810a:	d02a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d822      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008116:	d026      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811c:	d81c      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800811e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008122:	d010      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008128:	d816      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01d      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d111      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3304      	adds	r3, #4
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fa38 	bl	80095b0 <RCCEx_PLL2_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008144:	e012      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3324      	adds	r3, #36	; 0x24
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f001 fae1 	bl	8009714 <RCCEx_PLL3_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008156:	e009      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
      break;
 800815c:	e006      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800815e:	bf00      	nop
 8008160:	e004      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800816a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008172:	4b89      	ldr	r3, [pc, #548]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008180:	4985      	ldr	r1, [pc, #532]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008182:	4313      	orrs	r3, r2
 8008184:	658b      	str	r3, [r1, #88]	; 0x58
 8008186:	e001      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	d04b      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800819e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081a2:	d02e      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80081a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081a8:	d828      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ae:	d02a      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80081b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b4:	d822      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081ba:	d026      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80081bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081c0:	d81c      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d010      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081cc:	d816      	bhi.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01d      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	d111      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3304      	adds	r3, #4
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 f9e6 	bl	80095b0 <RCCEx_PLL2_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081e8:	e012      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	2102      	movs	r1, #2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fa8f 	bl	8009714 <RCCEx_PLL3_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081fa:	e009      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	e006      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008202:	bf00      	nop
 8008204:	e004      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008206:	bf00      	nop
 8008208:	e002      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800820e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008216:	4b60      	ldr	r3, [pc, #384]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008224:	495c      	ldr	r1, [pc, #368]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008226:	4313      	orrs	r3, r2
 8008228:	658b      	str	r3, [r1, #88]	; 0x58
 800822a:	e001      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d018      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008244:	d10a      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3324      	adds	r3, #36	; 0x24
 800824a:	2102      	movs	r1, #2
 800824c:	4618      	mov	r0, r3
 800824e:	f001 fa61 	bl	8009714 <RCCEx_PLL3_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800825c:	4b4e      	ldr	r3, [pc, #312]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800825e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008268:	494b      	ldr	r1, [pc, #300]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800826a:	4313      	orrs	r3, r2
 800826c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0310 	and.w	r3, r3, #16
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01a      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d10a      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3324      	adds	r3, #36	; 0x24
 800828a:	2102      	movs	r1, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f001 fa41 	bl	8009714 <RCCEx_PLL3_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800829c:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800829e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	493b      	ldr	r1, [pc, #236]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d034      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c6:	d01d      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80082c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082cc:	d817      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80082d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d6:	d009      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80082d8:	e011      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3304      	adds	r3, #4
 80082de:	2100      	movs	r1, #0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 f965 	bl	80095b0 <RCCEx_PLL2_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082ea:	e00c      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	2102      	movs	r1, #2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 fa0e 	bl	8009714 <RCCEx_PLL3_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
      break;
 8008302:	e000      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800830c:	4b22      	ldr	r3, [pc, #136]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800830e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800831a:	491f      	ldr	r1, [pc, #124]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800831c:	4313      	orrs	r3, r2
 800831e:	658b      	str	r3, [r1, #88]	; 0x58
 8008320:	e001      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d036      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800833c:	d01c      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800833e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008342:	d816      	bhi.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008348:	d003      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800834a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800834e:	d007      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008350:	e00f      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008352:	4b11      	ldr	r3, [pc, #68]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	4a10      	ldr	r2, [pc, #64]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800835e:	e00c      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3324      	adds	r3, #36	; 0x24
 8008364:	2101      	movs	r1, #1
 8008366:	4618      	mov	r0, r3
 8008368:	f001 f9d4 	bl	8009714 <RCCEx_PLL3_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008370:	e003      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	75fb      	strb	r3, [r7, #23]
      break;
 8008376:	e000      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838e:	4902      	ldr	r1, [pc, #8]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008390:	4313      	orrs	r3, r2
 8008392:	654b      	str	r3, [r1, #84]	; 0x54
 8008394:	e004      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d029      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d007      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80083ba:	e00f      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083bc:	4b61      	ldr	r3, [pc, #388]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	4a60      	ldr	r2, [pc, #384]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083c8:	e00b      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3304      	adds	r3, #4
 80083ce:	2102      	movs	r1, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f8ed 	bl	80095b0 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
      break;
 80083e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083e8:	4b56      	ldr	r3, [pc, #344]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f4:	4953      	ldr	r1, [pc, #332]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083fa:	e001      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3324      	adds	r3, #36	; 0x24
 8008410:	2102      	movs	r1, #2
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f97e 	bl	8009714 <RCCEx_PLL3_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d030      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008436:	d017      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843c:	d811      	bhi.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800843e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008442:	d013      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008448:	d80b      	bhi.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d010      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800844e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008452:	d106      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008454:	4b3b      	ldr	r3, [pc, #236]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	4a3a      	ldr	r2, [pc, #232]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800845a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800845e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008460:	e007      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]
      break;
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008478:	4b32      	ldr	r3, [pc, #200]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008484:	492f      	ldr	r1, [pc, #188]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008486:	4313      	orrs	r3, r2
 8008488:	654b      	str	r3, [r1, #84]	; 0x54
 800848a:	e001      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800849c:	4b29      	ldr	r3, [pc, #164]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a8:	4926      	ldr	r1, [pc, #152]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ba:	4b22      	ldr	r3, [pc, #136]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c6:	491f      	ldr	r1, [pc, #124]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00d      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084d8:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	4a19      	ldr	r2, [pc, #100]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084e2:	6113      	str	r3, [r2, #16]
 80084e4:	4b17      	ldr	r3, [pc, #92]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ee:	4915      	ldr	r1, [pc, #84]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	da08      	bge.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008500:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008508:	490e      	ldr	r1, [pc, #56]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800850a:	4313      	orrs	r3, r2
 800850c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800851c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008528:	4906      	ldr	r1, [pc, #24]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800852a:	4313      	orrs	r3, r2
 800852c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800852e:	7dbb      	ldrb	r3, [r7, #22]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400

08008548 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b090      	sub	sp, #64	; 0x40
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008556:	f040 8089 	bne.w	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800855a:	4b95      	ldr	r3, [pc, #596]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	2b04      	cmp	r3, #4
 8008568:	d87d      	bhi.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008585 	.word	0x08008585
 8008574:	080085a9 	.word	0x080085a9
 8008578:	080085cd 	.word	0x080085cd
 800857c:	08008661 	.word	0x08008661
 8008580:	080085f1 	.word	0x080085f1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008584:	4b8a      	ldr	r3, [pc, #552]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008590:	d107      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008596:	4618      	mov	r0, r3
 8008598:	f000 feb8 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085a0:	e3ed      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a6:	e3ea      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a8:	4b81      	ldr	r3, [pc, #516]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b6:	f107 0318 	add.w	r3, r7, #24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fbfe 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085c4:	e3db      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ca:	e3d8      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085cc:	4b78      	ldr	r3, [pc, #480]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fd40 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085e8:	e3c9      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ee:	e3c6      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085f0:	4b6f      	ldr	r3, [pc, #444]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085fa:	4b6d      	ldr	r3, [pc, #436]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b04      	cmp	r3, #4
 8008604:	d10c      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800860c:	4b68      	ldr	r3, [pc, #416]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	4a67      	ldr	r2, [pc, #412]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800861e:	e01e      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008620:	4b63      	ldr	r3, [pc, #396]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862c:	d106      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008634:	d102      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008636:	4b60      	ldr	r3, [pc, #384]	; (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800863a:	e010      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800863c:	4b5c      	ldr	r3, [pc, #368]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008648:	d106      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008650:	d102      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008652:	4b5a      	ldr	r3, [pc, #360]	; (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008656:	e002      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800865c:	e38f      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800865e:	e38e      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008660:	4b57      	ldr	r3, [pc, #348]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008664:	e38b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800866a:	e388      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008672:	f040 80a7 	bne.w	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008676:	4b4e      	ldr	r3, [pc, #312]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800867e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008686:	d054      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800868e:	f200 808b 	bhi.w	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008698:	f000 8083 	beq.w	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086a2:	f200 8081 	bhi.w	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ac:	d02f      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b4:	d878      	bhi.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086c2:	d012      	beq.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80086c4:	e070      	b.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086c6:	4b3a      	ldr	r3, [pc, #232]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d2:	d107      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fe17 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086e2:	e34c      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e8:	e349      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086f6:	d107      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f8:	f107 0318 	add.w	r3, r7, #24
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fb5d 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008706:	e33a      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800870c:	e337      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800870e:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871a:	d107      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fc9f 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800872a:	e328      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e325      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008732:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800873a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b04      	cmp	r3, #4
 8008746:	d10c      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800874e:	4b18      	ldr	r3, [pc, #96]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	08db      	lsrs	r3, r3, #3
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008760:	e01e      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876e:	d106      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008776:	d102      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008778:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877c:	e010      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800878a:	d106      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008792:	d102      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008794:	4b09      	ldr	r3, [pc, #36]	; (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008798:	e002      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800879e:	e2ee      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087a0:	e2ed      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a6:	e2ea      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ac:	e2e7      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
 80087b4:	03d09000 	.word	0x03d09000
 80087b8:	003d0900 	.word	0x003d0900
 80087bc:	017d7840 	.word	0x017d7840
 80087c0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	f040 809c 	bne.w	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80087ce:	4b9e      	ldr	r3, [pc, #632]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087de:	d054      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087e6:	f200 808b 	bhi.w	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087f0:	f000 8083 	beq.w	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087fa:	f200 8081 	bhi.w	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008804:	d02f      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880c:	d878      	bhi.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	2b00      	cmp	r3, #0
 8008812:	d004      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800881a:	d012      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800881c:	e070      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800881e:	4b8a      	ldr	r3, [pc, #552]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800882a:	d107      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800882c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fd6b 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800883a:	e2a0      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008840:	e29d      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008842:	4b81      	ldr	r3, [pc, #516]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800884a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800884e:	d107      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008850:	f107 0318 	add.w	r3, r7, #24
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fab1 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800885e:	e28e      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008864:	e28b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008866:	4b78      	ldr	r3, [pc, #480]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800886e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008872:	d107      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008874:	f107 030c 	add.w	r3, r7, #12
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fbf3 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008882:	e27c      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008888:	e279      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800888a:	4b6f      	ldr	r3, [pc, #444]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008892:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008894:	4b6c      	ldr	r3, [pc, #432]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b04      	cmp	r3, #4
 800889e:	d10c      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088a6:	4b68      	ldr	r3, [pc, #416]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a66      	ldr	r2, [pc, #408]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b8:	e01e      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ba:	4b63      	ldr	r3, [pc, #396]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	d106      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088d0:	4b5f      	ldr	r3, [pc, #380]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d4:	e010      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088d6:	4b5c      	ldr	r3, [pc, #368]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088e2:	d106      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ea:	d102      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088ec:	4b59      	ldr	r3, [pc, #356]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f0:	e002      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088f6:	e242      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80088f8:	e241      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088fa:	4b57      	ldr	r3, [pc, #348]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088fe:	e23e      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008904:	e23b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890c:	f040 80a6 	bne.w	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008910:	4b4d      	ldr	r3, [pc, #308]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008914:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008918:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008920:	d054      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008928:	f200 808b 	bhi.w	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008932:	f000 8083 	beq.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800893c:	f200 8081 	bhi.w	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008946:	d02f      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894e:	d878      	bhi.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895c:	d012      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800895e:	e070      	b.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008960:	4b39      	ldr	r3, [pc, #228]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800896c:	d107      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800896e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fcca 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800897c:	e1ff      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008982:	e1fc      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008984:	4b30      	ldr	r3, [pc, #192]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800898c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008990:	d107      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008992:	f107 0318 	add.w	r3, r7, #24
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fa10 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089a0:	e1ed      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a6:	e1ea      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a8:	4b27      	ldr	r3, [pc, #156]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b4:	d107      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b6:	f107 030c 	add.w	r3, r7, #12
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fb52 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089c4:	e1db      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ca:	e1d8      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d10c      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	4a16      	ldr	r2, [pc, #88]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fa:	e01e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a08:	d106      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a10:	d102      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a12:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a16:	e010      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a24:	d106      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2c:	d102      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a32:	e002      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a38:	e1a1      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a3a:	e1a0      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a40:	e19d      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a46:	e19a      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	03d09000 	.word	0x03d09000
 8008a50:	003d0900 	.word	0x003d0900
 8008a54:	017d7840 	.word	0x017d7840
 8008a58:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a62:	d173      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008a64:	4b9a      	ldr	r3, [pc, #616]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a74:	d02f      	beq.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a7c:	d863      	bhi.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8a:	d012      	beq.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008a8c:	e05b      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a8e:	4b90      	ldr	r3, [pc, #576]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a9a:	d107      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9c:	f107 0318 	add.w	r3, r7, #24
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f98b 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aaa:	e168      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab0:	e165      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ab2:	4b87      	ldr	r3, [pc, #540]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac0:	f107 030c 	add.w	r3, r7, #12
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 facd 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ace:	e156      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad4:	e153      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ad6:	4b7e      	ldr	r3, [pc, #504]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae0:	4b7b      	ldr	r3, [pc, #492]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008af2:	4b77      	ldr	r3, [pc, #476]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	4a75      	ldr	r2, [pc, #468]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008afe:	fa22 f303 	lsr.w	r3, r2, r3
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	e01e      	b.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b06:	4b72      	ldr	r3, [pc, #456]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b1c:	4b6e      	ldr	r3, [pc, #440]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	e010      	b.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b22:	4b6b      	ldr	r3, [pc, #428]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b2e:	d106      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b36:	d102      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b38:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b42:	e11c      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b44:	e11b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b4a:	e118      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b52:	d133      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008b54:	4b5e      	ldr	r3, [pc, #376]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6a:	d012      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008b6c:	e023      	b.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b6e:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7a:	d107      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fbc3 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b8a:	e0f8      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b90:	e0f5      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b92:	4b4f      	ldr	r3, [pc, #316]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b9e:	d107      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba0:	f107 0318 	add.w	r3, r7, #24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f909 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bae:	e0e6      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb4:	e0e3      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bba:	e0e0      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bc2:	f040 808d 	bne.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008bc6:	4b42      	ldr	r3, [pc, #264]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd6:	d06b      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bde:	d874      	bhi.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d056      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bee:	d86c      	bhi.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf6:	d03b      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bfe:	d864      	bhi.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c06:	d021      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0e:	d85c      	bhi.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c1c:	d004      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008c1e:	e054      	b.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c20:	f000 f8b6 	bl	8008d90 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c24:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008c26:	e0aa      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c28:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c34:	d107      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c36:	f107 0318 	add.w	r3, r7, #24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f8be 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c44:	e09b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4a:	e098      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c4c:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5a:	f107 030c 	add.w	r3, r7, #12
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fa00 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c68:	e089      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6e:	e086      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c70:	4b17      	ldr	r3, [pc, #92]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d109      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c7c:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	4a13      	ldr	r2, [pc, #76]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c8e:	e076      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c94:	e073      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c96:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca2:	d102      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ca8:	e069      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e066      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008cc2:	e05c      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc8:	e059      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cce:	e056      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	03d09000 	.word	0x03d09000
 8008cd8:	003d0900 	.word	0x003d0900
 8008cdc:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce6:	d148      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008ce8:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cf0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf8:	d02a      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d00:	d838      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d0e:	d00d      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008d10:	e030      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d12:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d1e:	d102      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008d20:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d24:	e02b      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2a:	e028      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d2c:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fae4 	bl	800930c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d48:	e019      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4e:	e016      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5e:	f107 0318 	add.w	r3, r7, #24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f82a 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d6c:	e007      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d72:	e004      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d78:	e001      	b.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3740      	adds	r7, #64	; 0x40
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	017d7840 	.word	0x017d7840

08008d90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d94:	f7fe fc66 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	4904      	ldr	r1, [pc, #16]	; (8008db8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008da6:	5ccb      	ldrb	r3, [r1, r3]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	58024400 	.word	0x58024400
 8008db8:	0800f128 	.word	0x0800f128

08008dbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b089      	sub	sp, #36	; 0x24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dc4:	4ba1      	ldr	r3, [pc, #644]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008dce:	4b9f      	ldr	r3, [pc, #636]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	0b1b      	lsrs	r3, r3, #12
 8008dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dda:	4b9c      	ldr	r3, [pc, #624]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008de6:	4b99      	ldr	r3, [pc, #612]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dea:	08db      	lsrs	r3, r3, #3
 8008dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8111 	beq.w	800902c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	f000 8083 	beq.w	8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	f200 80a1 	bhi.w	8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d056      	beq.n	8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e26:	e099      	b.n	8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e28:	4b88      	ldr	r3, [pc, #544]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02d      	beq.n	8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e34:	4b85      	ldr	r3, [pc, #532]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	4a84      	ldr	r2, [pc, #528]	; (8009050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e40:	fa22 f303 	lsr.w	r3, r2, r3
 8008e44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b7b      	ldr	r3, [pc, #492]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e8e:	e087      	b.n	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b6a      	ldr	r3, [pc, #424]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ed2:	e065      	b.n	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800905c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b59      	ldr	r3, [pc, #356]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f16:	e043      	b.n	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b48      	ldr	r3, [pc, #288]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f5a:	e021      	b.n	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800905c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b37      	ldr	r3, [pc, #220]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008fa0:	4b2a      	ldr	r3, [pc, #168]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	0a5b      	lsrs	r3, r3, #9
 8008fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc6:	ee17 2a90 	vmov	r2, s15
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008fce:	4b1f      	ldr	r3, [pc, #124]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	0c1b      	lsrs	r3, r3, #16
 8008fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff4:	ee17 2a90 	vmov	r2, s15
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008ffc:	4b13      	ldr	r3, [pc, #76]	; (800904c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	0e1b      	lsrs	r3, r3, #24
 8009002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009016:	edd7 6a07 	vldr	s13, [r7, #28]
 800901a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800901e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009022:	ee17 2a90 	vmov	r2, s15
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800902a:	e008      	b.n	800903e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	609a      	str	r2, [r3, #8]
}
 800903e:	bf00      	nop
 8009040:	3724      	adds	r7, #36	; 0x24
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400
 8009050:	03d09000 	.word	0x03d09000
 8009054:	46000000 	.word	0x46000000
 8009058:	4c742400 	.word	0x4c742400
 800905c:	4a742400 	.word	0x4a742400
 8009060:	4bbebc20 	.word	0x4bbebc20

08009064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009064:	b480      	push	{r7}
 8009066:	b089      	sub	sp, #36	; 0x24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800906c:	4ba1      	ldr	r3, [pc, #644]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009076:	4b9f      	ldr	r3, [pc, #636]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	0d1b      	lsrs	r3, r3, #20
 800907c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009082:	4b9c      	ldr	r3, [pc, #624]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800908e:	4b99      	ldr	r3, [pc, #612]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	08db      	lsrs	r3, r3, #3
 8009094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8111 	beq.w	80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	f000 8083 	beq.w	80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f200 80a1 	bhi.w	8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d056      	beq.n	800917c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090ce:	e099      	b.n	8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d0:	4b88      	ldr	r3, [pc, #544]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0320 	and.w	r3, r3, #32
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d02d      	beq.n	8009138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090dc:	4b85      	ldr	r3, [pc, #532]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	08db      	lsrs	r3, r3, #3
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	4a84      	ldr	r2, [pc, #528]	; (80092f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	ee07 3a90 	vmov	s15, r3
 80090f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009106:	4b7b      	ldr	r3, [pc, #492]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009116:	ed97 6a03 	vldr	s12, [r7, #12]
 800911a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800911e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800912a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009132:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009136:	e087      	b.n	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914a:	4b6a      	ldr	r3, [pc, #424]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	ed97 6a03 	vldr	s12, [r7, #12]
 800915e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800917a:	e065      	b.n	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918e:	4b59      	ldr	r3, [pc, #356]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919e:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091be:	e043      	b.n	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d2:	4b48      	ldr	r3, [pc, #288]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009202:	e021      	b.n	8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009216:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009226:	ed97 6a03 	vldr	s12, [r7, #12]
 800922a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009248:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924c:	0a5b      	lsrs	r3, r3, #9
 800924e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800925e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009262:	edd7 6a07 	vldr	s13, [r7, #28]
 8009266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800926e:	ee17 2a90 	vmov	r2, s15
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	0c1b      	lsrs	r3, r3, #16
 800927c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800928c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009290:	edd7 6a07 	vldr	s13, [r7, #28]
 8009294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929c:	ee17 2a90 	vmov	r2, s15
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	0e1b      	lsrs	r3, r3, #24
 80092aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092be:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ca:	ee17 2a90 	vmov	r2, s15
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092d2:	e008      	b.n	80092e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	609a      	str	r2, [r3, #8]
}
 80092e6:	bf00      	nop
 80092e8:	3724      	adds	r7, #36	; 0x24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	03d09000 	.word	0x03d09000
 80092fc:	46000000 	.word	0x46000000
 8009300:	4c742400 	.word	0x4c742400
 8009304:	4a742400 	.word	0x4a742400
 8009308:	4bbebc20 	.word	0x4bbebc20

0800930c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800930c:	b480      	push	{r7}
 800930e:	b089      	sub	sp, #36	; 0x24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009314:	4ba0      	ldr	r3, [pc, #640]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800931e:	4b9e      	ldr	r3, [pc, #632]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	091b      	lsrs	r3, r3, #4
 8009324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009328:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800932a:	4b9b      	ldr	r3, [pc, #620]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009334:	4b98      	ldr	r3, [pc, #608]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	08db      	lsrs	r3, r3, #3
 800933a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	fb02 f303 	mul.w	r3, r2, r3
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8111 	beq.w	800957a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b02      	cmp	r3, #2
 800935c:	f000 8083 	beq.w	8009466 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b02      	cmp	r3, #2
 8009364:	f200 80a1 	bhi.w	80094aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d056      	beq.n	8009422 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009374:	e099      	b.n	80094aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009376:	4b88      	ldr	r3, [pc, #544]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d02d      	beq.n	80093de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009382:	4b85      	ldr	r3, [pc, #532]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	08db      	lsrs	r3, r3, #3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	4a83      	ldr	r2, [pc, #524]	; (800959c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800938e:	fa22 f303 	lsr.w	r3, r2, r3
 8009392:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ac:	4b7a      	ldr	r3, [pc, #488]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093dc:	e087      	b.n	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f0:	4b69      	ldr	r3, [pc, #420]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009400:	ed97 6a03 	vldr	s12, [r7, #12]
 8009404:	eddf 5a66 	vldr	s11, [pc, #408]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009420:	e065      	b.n	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	ee07 3a90 	vmov	s15, r3
 8009428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80095a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009434:	4b58      	ldr	r3, [pc, #352]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009444:	ed97 6a03 	vldr	s12, [r7, #12]
 8009448:	eddf 5a55 	vldr	s11, [pc, #340]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800944c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009460:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009464:	e043      	b.n	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009470:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80095ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009478:	4b47      	ldr	r3, [pc, #284]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009480:	ee07 3a90 	vmov	s15, r3
 8009484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009488:	ed97 6a03 	vldr	s12, [r7, #12]
 800948c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094a8:	e021      	b.n	80094ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094bc:	4b36      	ldr	r3, [pc, #216]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c4:	ee07 3a90 	vmov	s15, r3
 80094c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80094ee:	4b2a      	ldr	r3, [pc, #168]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	0a5b      	lsrs	r3, r3, #9
 80094f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009508:	edd7 6a07 	vldr	s13, [r7, #28]
 800950c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009514:	ee17 2a90 	vmov	r2, s15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800954a:	4b13      	ldr	r3, [pc, #76]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	0e1b      	lsrs	r3, r3, #24
 8009550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009564:	edd7 6a07 	vldr	s13, [r7, #28]
 8009568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800956c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009570:	ee17 2a90 	vmov	r2, s15
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009578:	e008      	b.n	800958c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	609a      	str	r2, [r3, #8]
}
 800958c:	bf00      	nop
 800958e:	3724      	adds	r7, #36	; 0x24
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	58024400 	.word	0x58024400
 800959c:	03d09000 	.word	0x03d09000
 80095a0:	46000000 	.word	0x46000000
 80095a4:	4c742400 	.word	0x4c742400
 80095a8:	4a742400 	.word	0x4a742400
 80095ac:	4bbebc20 	.word	0x4bbebc20

080095b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095be:	4b53      	ldr	r3, [pc, #332]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d101      	bne.n	80095ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e099      	b.n	8009702 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095ce:	4b4f      	ldr	r3, [pc, #316]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a4e      	ldr	r2, [pc, #312]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80095d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095da:	f7f9 fb45 	bl	8002c68 <HAL_GetTick>
 80095de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095e0:	e008      	b.n	80095f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80095e2:	f7f9 fb41 	bl	8002c68 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e086      	b.n	8009702 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095f4:	4b45      	ldr	r3, [pc, #276]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1f0      	bne.n	80095e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009600:	4b42      	ldr	r3, [pc, #264]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	031b      	lsls	r3, r3, #12
 800960e:	493f      	ldr	r1, [pc, #252]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009610:	4313      	orrs	r3, r2
 8009612:	628b      	str	r3, [r1, #40]	; 0x28
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	3b01      	subs	r3, #1
 8009624:	025b      	lsls	r3, r3, #9
 8009626:	b29b      	uxth	r3, r3
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	3b01      	subs	r3, #1
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	3b01      	subs	r3, #1
 800963e:	061b      	lsls	r3, r3, #24
 8009640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009644:	4931      	ldr	r1, [pc, #196]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009646:	4313      	orrs	r3, r2
 8009648:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800964a:	4b30      	ldr	r3, [pc, #192]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	492d      	ldr	r1, [pc, #180]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009658:	4313      	orrs	r3, r2
 800965a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800965c:	4b2b      	ldr	r3, [pc, #172]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	f023 0220 	bic.w	r2, r3, #32
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	4928      	ldr	r1, [pc, #160]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 800966a:	4313      	orrs	r3, r2
 800966c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800966e:	4b27      	ldr	r3, [pc, #156]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	4a26      	ldr	r2, [pc, #152]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009674:	f023 0310 	bic.w	r3, r3, #16
 8009678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 800967c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <RCCEx_PLL2_Config+0x160>)
 8009680:	4013      	ands	r3, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	69d2      	ldr	r2, [r2, #28]
 8009686:	00d2      	lsls	r2, r2, #3
 8009688:	4920      	ldr	r1, [pc, #128]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 800968a:	4313      	orrs	r3, r2
 800968c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800968e:	4b1f      	ldr	r3, [pc, #124]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	4a1e      	ldr	r2, [pc, #120]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 8009694:	f043 0310 	orr.w	r3, r3, #16
 8009698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	4a19      	ldr	r2, [pc, #100]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096ac:	e00f      	b.n	80096ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d106      	bne.n	80096c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a14      	ldr	r2, [pc, #80]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096c0:	e005      	b.n	80096ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096c2:	4b12      	ldr	r3, [pc, #72]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	4a11      	ldr	r2, [pc, #68]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a0e      	ldr	r2, [pc, #56]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096da:	f7f9 fac5 	bl	8002c68 <HAL_GetTick>
 80096de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096e0:	e008      	b.n	80096f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096e2:	f7f9 fac1 	bl	8002c68 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d901      	bls.n	80096f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e006      	b.n	8009702 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <RCCEx_PLL2_Config+0x15c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f0      	beq.n	80096e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	58024400 	.word	0x58024400
 8009710:	ffff0007 	.word	0xffff0007

08009714 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009722:	4b53      	ldr	r3, [pc, #332]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	2b03      	cmp	r3, #3
 800972c:	d101      	bne.n	8009732 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e099      	b.n	8009866 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009732:	4b4f      	ldr	r3, [pc, #316]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a4e      	ldr	r2, [pc, #312]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800973c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800973e:	f7f9 fa93 	bl	8002c68 <HAL_GetTick>
 8009742:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009744:	e008      	b.n	8009758 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009746:	f7f9 fa8f 	bl	8002c68 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e086      	b.n	8009866 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009758:	4b45      	ldr	r3, [pc, #276]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1f0      	bne.n	8009746 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009764:	4b42      	ldr	r3, [pc, #264]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	051b      	lsls	r3, r3, #20
 8009772:	493f      	ldr	r1, [pc, #252]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009774:	4313      	orrs	r3, r2
 8009776:	628b      	str	r3, [r1, #40]	; 0x28
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	3b01      	subs	r3, #1
 800977e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	3b01      	subs	r3, #1
 8009788:	025b      	lsls	r3, r3, #9
 800978a:	b29b      	uxth	r3, r3
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	3b01      	subs	r3, #1
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800979a:	431a      	orrs	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	061b      	lsls	r3, r3, #24
 80097a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097a8:	4931      	ldr	r1, [pc, #196]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097ae:	4b30      	ldr	r3, [pc, #192]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	492d      	ldr	r1, [pc, #180]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097c0:	4b2b      	ldr	r3, [pc, #172]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	4928      	ldr	r1, [pc, #160]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097d2:	4b27      	ldr	r3, [pc, #156]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	4a26      	ldr	r2, [pc, #152]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097de:	4b24      	ldr	r3, [pc, #144]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e2:	4b24      	ldr	r3, [pc, #144]	; (8009874 <RCCEx_PLL3_Config+0x160>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	69d2      	ldr	r2, [r2, #28]
 80097ea:	00d2      	lsls	r2, r2, #3
 80097ec:	4920      	ldr	r1, [pc, #128]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097f2:	4b1f      	ldr	r3, [pc, #124]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	4a1e      	ldr	r2, [pc, #120]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 80097f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009804:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a19      	ldr	r2, [pc, #100]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800980a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800980e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009810:	e00f      	b.n	8009832 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d106      	bne.n	8009826 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009818:	4b15      	ldr	r3, [pc, #84]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4a14      	ldr	r2, [pc, #80]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800981e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009824:	e005      	b.n	8009832 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	4a11      	ldr	r2, [pc, #68]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800982c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009830:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a0e      	ldr	r2, [pc, #56]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 8009838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983e:	f7f9 fa13 	bl	8002c68 <HAL_GetTick>
 8009842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009844:	e008      	b.n	8009858 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009846:	f7f9 fa0f 	bl	8002c68 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e006      	b.n	8009866 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009858:	4b05      	ldr	r3, [pc, #20]	; (8009870 <RCCEx_PLL3_Config+0x15c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009864:	7bfb      	ldrb	r3, [r7, #15]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	58024400 	.word	0x58024400
 8009874:	ffff0007 	.word	0xffff0007

08009878 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e0f1      	b.n	8009a6e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a78      	ldr	r2, [pc, #480]	; (8009a78 <HAL_SPI_Init+0x200>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00f      	beq.n	80098ba <HAL_SPI_Init+0x42>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a77      	ldr	r2, [pc, #476]	; (8009a7c <HAL_SPI_Init+0x204>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00a      	beq.n	80098ba <HAL_SPI_Init+0x42>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a75      	ldr	r2, [pc, #468]	; (8009a80 <HAL_SPI_Init+0x208>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d005      	beq.n	80098ba <HAL_SPI_Init+0x42>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b0f      	cmp	r3, #15
 80098b4:	d901      	bls.n	80098ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e0d9      	b.n	8009a6e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f8e2 	bl	8009a84 <SPI_GetPacketSize>
 80098c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a6c      	ldr	r2, [pc, #432]	; (8009a78 <HAL_SPI_Init+0x200>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00c      	beq.n	80098e6 <HAL_SPI_Init+0x6e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a6a      	ldr	r2, [pc, #424]	; (8009a7c <HAL_SPI_Init+0x204>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <HAL_SPI_Init+0x6e>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a69      	ldr	r2, [pc, #420]	; (8009a80 <HAL_SPI_Init+0x208>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d002      	beq.n	80098e6 <HAL_SPI_Init+0x6e>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d811      	bhi.n	800990a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098ea:	4a63      	ldr	r2, [pc, #396]	; (8009a78 <HAL_SPI_Init+0x200>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a61      	ldr	r2, [pc, #388]	; (8009a7c <HAL_SPI_Init+0x204>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_SPI_Init+0x8c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a60      	ldr	r2, [pc, #384]	; (8009a80 <HAL_SPI_Init+0x208>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d104      	bne.n	800990e <HAL_SPI_Init+0x96>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b10      	cmp	r3, #16
 8009908:	d901      	bls.n	800990e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e0af      	b.n	8009a6e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7f7 fcac 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0201 	bic.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800994a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009954:	d119      	bne.n	800998a <HAL_SPI_Init+0x112>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800995e:	d103      	bne.n	8009968 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10c      	bne.n	800998a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009978:	d107      	bne.n	800998a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009988:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69da      	ldr	r2, [r3, #28]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009992:	431a      	orrs	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999c:	ea42 0103 	orr.w	r1, r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	431a      	orrs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ea:	ea42 0103 	orr.w	r1, r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d113      	bne.n	8009a2a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0201 	bic.w	r2, r2, #1
 8009a38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40013000 	.word	0x40013000
 8009a7c:	40003800 	.word	0x40003800
 8009a80:	40003c00 	.word	0x40003c00

08009a84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e049      	b.n	8009b60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7f8 fb91 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	f000 fe29 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d001      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e05e      	b.n	8009c3e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a2b      	ldr	r2, [pc, #172]	; (8009c4c <HAL_TIM_Base_Start_IT+0xe4>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d02c      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009baa:	d027      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a27      	ldr	r2, [pc, #156]	; (8009c50 <HAL_TIM_Base_Start_IT+0xe8>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d022      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <HAL_TIM_Base_Start_IT+0xec>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d01d      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a24      	ldr	r2, [pc, #144]	; (8009c58 <HAL_TIM_Base_Start_IT+0xf0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d018      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a23      	ldr	r2, [pc, #140]	; (8009c5c <HAL_TIM_Base_Start_IT+0xf4>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d013      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <HAL_TIM_Base_Start_IT+0xf8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00e      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a20      	ldr	r2, [pc, #128]	; (8009c64 <HAL_TIM_Base_Start_IT+0xfc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d009      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <HAL_TIM_Base_Start_IT+0x100>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x94>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	; (8009c6c <HAL_TIM_Base_Start_IT+0x104>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d115      	bne.n	8009c28 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <HAL_TIM_Base_Start_IT+0x108>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b06      	cmp	r3, #6
 8009c0c:	d015      	beq.n	8009c3a <HAL_TIM_Base_Start_IT+0xd2>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c14:	d011      	beq.n	8009c3a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0201 	orr.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c26:	e008      	b.n	8009c3a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	e000      	b.n	8009c3c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40000400 	.word	0x40000400
 8009c54:	40000800 	.word	0x40000800
 8009c58:	40000c00 	.word	0x40000c00
 8009c5c:	40010400 	.word	0x40010400
 8009c60:	40001800 	.word	0x40001800
 8009c64:	40014000 	.word	0x40014000
 8009c68:	4000e000 	.word	0x4000e000
 8009c6c:	4000e400 	.word	0x4000e400
 8009c70:	00010007 	.word	0x00010007

08009c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e049      	b.n	8009d1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7f8 fb66 	bl	800236c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f000 fd4c 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_TIM_PWM_Start+0x24>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	e03c      	b.n	8009dc2 <HAL_TIM_PWM_Start+0x9e>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d109      	bne.n	8009d62 <HAL_TIM_PWM_Start+0x3e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	bf14      	ite	ne
 8009d5a:	2301      	movne	r3, #1
 8009d5c:	2300      	moveq	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	e02f      	b.n	8009dc2 <HAL_TIM_PWM_Start+0x9e>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d109      	bne.n	8009d7c <HAL_TIM_PWM_Start+0x58>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	bf14      	ite	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	2300      	moveq	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e022      	b.n	8009dc2 <HAL_TIM_PWM_Start+0x9e>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b0c      	cmp	r3, #12
 8009d80:	d109      	bne.n	8009d96 <HAL_TIM_PWM_Start+0x72>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	bf14      	ite	ne
 8009d8e:	2301      	movne	r3, #1
 8009d90:	2300      	moveq	r3, #0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	e015      	b.n	8009dc2 <HAL_TIM_PWM_Start+0x9e>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d109      	bne.n	8009db0 <HAL_TIM_PWM_Start+0x8c>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	bf14      	ite	ne
 8009da8:	2301      	movne	r3, #1
 8009daa:	2300      	moveq	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	e008      	b.n	8009dc2 <HAL_TIM_PWM_Start+0x9e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	bf14      	ite	ne
 8009dbc:	2301      	movne	r3, #1
 8009dbe:	2300      	moveq	r3, #0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e0ab      	b.n	8009f22 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <HAL_TIM_PWM_Start+0xb6>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dd8:	e023      	b.n	8009e22 <HAL_TIM_PWM_Start+0xfe>
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d104      	bne.n	8009dea <HAL_TIM_PWM_Start+0xc6>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009de8:	e01b      	b.n	8009e22 <HAL_TIM_PWM_Start+0xfe>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d104      	bne.n	8009dfa <HAL_TIM_PWM_Start+0xd6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2202      	movs	r2, #2
 8009df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009df8:	e013      	b.n	8009e22 <HAL_TIM_PWM_Start+0xfe>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b0c      	cmp	r3, #12
 8009dfe:	d104      	bne.n	8009e0a <HAL_TIM_PWM_Start+0xe6>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e08:	e00b      	b.n	8009e22 <HAL_TIM_PWM_Start+0xfe>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d104      	bne.n	8009e1a <HAL_TIM_PWM_Start+0xf6>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e18:	e003      	b.n	8009e22 <HAL_TIM_PWM_Start+0xfe>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2201      	movs	r2, #1
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f8aa 	bl	800af84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a3d      	ldr	r2, [pc, #244]	; (8009f2c <HAL_TIM_PWM_Start+0x208>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d013      	beq.n	8009e62 <HAL_TIM_PWM_Start+0x13e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a3c      	ldr	r2, [pc, #240]	; (8009f30 <HAL_TIM_PWM_Start+0x20c>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d00e      	beq.n	8009e62 <HAL_TIM_PWM_Start+0x13e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a3a      	ldr	r2, [pc, #232]	; (8009f34 <HAL_TIM_PWM_Start+0x210>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d009      	beq.n	8009e62 <HAL_TIM_PWM_Start+0x13e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a39      	ldr	r2, [pc, #228]	; (8009f38 <HAL_TIM_PWM_Start+0x214>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d004      	beq.n	8009e62 <HAL_TIM_PWM_Start+0x13e>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a37      	ldr	r2, [pc, #220]	; (8009f3c <HAL_TIM_PWM_Start+0x218>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <HAL_TIM_PWM_Start+0x142>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e000      	b.n	8009e68 <HAL_TIM_PWM_Start+0x144>
 8009e66:	2300      	movs	r3, #0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d007      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a2a      	ldr	r2, [pc, #168]	; (8009f2c <HAL_TIM_PWM_Start+0x208>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d02c      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8e:	d027      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a2a      	ldr	r2, [pc, #168]	; (8009f40 <HAL_TIM_PWM_Start+0x21c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d022      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <HAL_TIM_PWM_Start+0x220>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d01d      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a27      	ldr	r2, [pc, #156]	; (8009f48 <HAL_TIM_PWM_Start+0x224>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d018      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <HAL_TIM_PWM_Start+0x20c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d013      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a23      	ldr	r2, [pc, #140]	; (8009f4c <HAL_TIM_PWM_Start+0x228>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00e      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a1b      	ldr	r2, [pc, #108]	; (8009f34 <HAL_TIM_PWM_Start+0x210>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d009      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <HAL_TIM_PWM_Start+0x22c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x1bc>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <HAL_TIM_PWM_Start+0x230>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d115      	bne.n	8009f0c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <HAL_TIM_PWM_Start+0x234>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b06      	cmp	r3, #6
 8009ef0:	d015      	beq.n	8009f1e <HAL_TIM_PWM_Start+0x1fa>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef8:	d011      	beq.n	8009f1e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0201 	orr.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f0a:	e008      	b.n	8009f1e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e000      	b.n	8009f20 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40014400 	.word	0x40014400
 8009f3c:	40014800 	.word	0x40014800
 8009f40:	40000400 	.word	0x40000400
 8009f44:	40000800 	.word	0x40000800
 8009f48:	40000c00 	.word	0x40000c00
 8009f4c:	40001800 	.word	0x40001800
 8009f50:	4000e000 	.word	0x4000e000
 8009f54:	4000e400 	.word	0x4000e400
 8009f58:	00010007 	.word	0x00010007

08009f5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e08f      	b.n	800a090 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7f8 f84d 	bl	8002024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6899      	ldr	r1, [r3, #8]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	4b3e      	ldr	r3, [pc, #248]	; (800a098 <HAL_TIM_Encoder_Init+0x13c>)
 8009f9e:	400b      	ands	r3, r1
 8009fa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4610      	mov	r0, r2
 8009fae:	f000 fbcf 	bl	800a750 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4b31      	ldr	r3, [pc, #196]	; (800a09c <HAL_TIM_Encoder_Init+0x140>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <HAL_TIM_Encoder_Init+0x144>)
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <HAL_TIM_Encoder_Init+0x148>)
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	68da      	ldr	r2, [r3, #12]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	4313      	orrs	r3, r2
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	011a      	lsls	r2, r3, #4
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	031b      	lsls	r3, r3, #12
 800a01c:	4313      	orrs	r3, r2
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a02a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a032:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	4313      	orrs	r3, r2
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	fffebff8 	.word	0xfffebff8
 800a09c:	fffffcfc 	.word	0xfffffcfc
 800a0a0:	fffff3f3 	.word	0xfffff3f3
 800a0a4:	ffff0f0f 	.word	0xffff0f0f

0800a0a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d122      	bne.n	800a104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d11b      	bne.n	800a104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0202 	mvn.w	r2, #2
 800a0d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fb12 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a0f0:	e005      	b.n	800a0fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fb04 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb15 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d122      	bne.n	800a158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d11b      	bne.n	800a158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f06f 0204 	mvn.w	r2, #4
 800a128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fae8 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a144:	e005      	b.n	800a152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fada 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 faeb 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	f003 0308 	and.w	r3, r3, #8
 800a162:	2b08      	cmp	r3, #8
 800a164:	d122      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b08      	cmp	r3, #8
 800a172:	d11b      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f06f 0208 	mvn.w	r2, #8
 800a17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2204      	movs	r2, #4
 800a182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fabe 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a198:	e005      	b.n	800a1a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fab0 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fac1 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b10      	cmp	r3, #16
 800a1b8:	d122      	bne.n	800a200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d11b      	bne.n	800a200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0210 	mvn.w	r2, #16
 800a1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fa94 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a1ec:	e005      	b.n	800a1fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa86 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fa97 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d10e      	bne.n	800a22c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d107      	bne.n	800a22c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f06f 0201 	mvn.w	r2, #1
 800a224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7f6 fea4 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a236:	2b80      	cmp	r3, #128	; 0x80
 800a238:	d10e      	bne.n	800a258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a244:	2b80      	cmp	r3, #128	; 0x80
 800a246:	d107      	bne.n	800a258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 f802 	bl	800b25c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a266:	d10e      	bne.n	800a286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b80      	cmp	r3, #128	; 0x80
 800a274:	d107      	bne.n	800a286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fff5 	bl	800b270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a290:	2b40      	cmp	r3, #64	; 0x40
 800a292:	d10e      	bne.n	800a2b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d107      	bne.n	800a2b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa45 	bl	800a73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f003 0320 	and.w	r3, r3, #32
 800a2bc:	2b20      	cmp	r3, #32
 800a2be:	d10e      	bne.n	800a2de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d107      	bne.n	800a2de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f06f 0220 	mvn.w	r2, #32
 800a2d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 ffb5 	bl	800b248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a302:	2302      	movs	r3, #2
 800a304:	e0ff      	b.n	800a506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b14      	cmp	r3, #20
 800a312:	f200 80f0 	bhi.w	800a4f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a4f7 	.word	0x0800a4f7
 800a324:	0800a4f7 	.word	0x0800a4f7
 800a328:	0800a4f7 	.word	0x0800a4f7
 800a32c:	0800a3b1 	.word	0x0800a3b1
 800a330:	0800a4f7 	.word	0x0800a4f7
 800a334:	0800a4f7 	.word	0x0800a4f7
 800a338:	0800a4f7 	.word	0x0800a4f7
 800a33c:	0800a3f3 	.word	0x0800a3f3
 800a340:	0800a4f7 	.word	0x0800a4f7
 800a344:	0800a4f7 	.word	0x0800a4f7
 800a348:	0800a4f7 	.word	0x0800a4f7
 800a34c:	0800a433 	.word	0x0800a433
 800a350:	0800a4f7 	.word	0x0800a4f7
 800a354:	0800a4f7 	.word	0x0800a4f7
 800a358:	0800a4f7 	.word	0x0800a4f7
 800a35c:	0800a475 	.word	0x0800a475
 800a360:	0800a4f7 	.word	0x0800a4f7
 800a364:	0800a4f7 	.word	0x0800a4f7
 800a368:	0800a4f7 	.word	0x0800a4f7
 800a36c:	0800a4b5 	.word	0x0800a4b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68b9      	ldr	r1, [r7, #8]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fa90 	bl	800a89c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699a      	ldr	r2, [r3, #24]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f042 0208 	orr.w	r2, r2, #8
 800a38a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0204 	bic.w	r2, r2, #4
 800a39a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6999      	ldr	r1, [r3, #24]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	619a      	str	r2, [r3, #24]
      break;
 800a3ae:	e0a5      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fb00 	bl	800a9bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6999      	ldr	r1, [r3, #24]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	021a      	lsls	r2, r3, #8
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	619a      	str	r2, [r3, #24]
      break;
 800a3f0:	e084      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fb69 	bl	800aad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f042 0208 	orr.w	r2, r2, #8
 800a40c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69da      	ldr	r2, [r3, #28]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0204 	bic.w	r2, r2, #4
 800a41c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69d9      	ldr	r1, [r3, #28]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	691a      	ldr	r2, [r3, #16]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	61da      	str	r2, [r3, #28]
      break;
 800a430:	e064      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fbd1 	bl	800abe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a44c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69da      	ldr	r2, [r3, #28]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a45c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69d9      	ldr	r1, [r3, #28]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	021a      	lsls	r2, r3, #8
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	61da      	str	r2, [r3, #28]
      break;
 800a472:	e043      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fc1a 	bl	800acb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0208 	orr.w	r2, r2, #8
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0204 	bic.w	r2, r2, #4
 800a49e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4b2:	e023      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fc5e 	bl	800ad7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	021a      	lsls	r2, r3, #8
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4f4:	e002      	b.n	800a4fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop

0800a510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_TIM_ConfigClockSource+0x1c>
 800a528:	2302      	movs	r3, #2
 800a52a:	e0dc      	b.n	800a6e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	4b6a      	ldr	r3, [pc, #424]	; (800a6f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a548:	4013      	ands	r3, r2
 800a54a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a64      	ldr	r2, [pc, #400]	; (800a6f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	f000 80a9 	beq.w	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a568:	4a62      	ldr	r2, [pc, #392]	; (800a6f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f200 80ae 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a570:	4a61      	ldr	r2, [pc, #388]	; (800a6f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a572:	4293      	cmp	r3, r2
 800a574:	f000 80a1 	beq.w	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a578:	4a5f      	ldr	r2, [pc, #380]	; (800a6f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	f200 80a6 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a580:	4a5e      	ldr	r2, [pc, #376]	; (800a6fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a582:	4293      	cmp	r3, r2
 800a584:	f000 8099 	beq.w	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a588:	4a5c      	ldr	r2, [pc, #368]	; (800a6fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	f200 809e 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a594:	f000 8091 	beq.w	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a59c:	f200 8096 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a4:	f000 8089 	beq.w	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5ac:	f200 808e 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b4:	d03e      	beq.n	800a634 <HAL_TIM_ConfigClockSource+0x124>
 800a5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ba:	f200 8087 	bhi.w	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c2:	f000 8086 	beq.w	800a6d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ca:	d87f      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5cc:	2b70      	cmp	r3, #112	; 0x70
 800a5ce:	d01a      	beq.n	800a606 <HAL_TIM_ConfigClockSource+0xf6>
 800a5d0:	2b70      	cmp	r3, #112	; 0x70
 800a5d2:	d87b      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5d4:	2b60      	cmp	r3, #96	; 0x60
 800a5d6:	d050      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x16a>
 800a5d8:	2b60      	cmp	r3, #96	; 0x60
 800a5da:	d877      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5dc:	2b50      	cmp	r3, #80	; 0x50
 800a5de:	d03c      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x14a>
 800a5e0:	2b50      	cmp	r3, #80	; 0x50
 800a5e2:	d873      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d058      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x18a>
 800a5e8:	2b40      	cmp	r3, #64	; 0x40
 800a5ea:	d86f      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d064      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a5f0:	2b30      	cmp	r3, #48	; 0x30
 800a5f2:	d86b      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d060      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d867      	bhi.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d05c      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a600:	2b10      	cmp	r3, #16
 800a602:	d05a      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x1aa>
 800a604:	e062      	b.n	800a6cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	f000 fc95 	bl	800af44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	609a      	str	r2, [r3, #8]
      break;
 800a632:	e04f      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	6899      	ldr	r1, [r3, #8]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f000 fc7e 	bl	800af44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689a      	ldr	r2, [r3, #8]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a656:	609a      	str	r2, [r3, #8]
      break;
 800a658:	e03c      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6859      	ldr	r1, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	461a      	mov	r2, r3
 800a668:	f000 fbee 	bl	800ae48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2150      	movs	r1, #80	; 0x50
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fc48 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800a678:	e02c      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	461a      	mov	r2, r3
 800a688:	f000 fc0d 	bl	800aea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2160      	movs	r1, #96	; 0x60
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fc38 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800a698:	e01c      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	6859      	ldr	r1, [r3, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f000 fbce 	bl	800ae48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2140      	movs	r1, #64	; 0x40
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fc28 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800a6b8:	e00c      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	f000 fc1f 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800a6ca:	e003      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d0:	e000      	b.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a6d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	ffceff88 	.word	0xffceff88
 800a6f4:	00100040 	.word	0x00100040
 800a6f8:	00100030 	.word	0x00100030
 800a6fc:	00100020 	.word	0x00100020

0800a700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a44      	ldr	r2, [pc, #272]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d013      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d00f      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a41      	ldr	r2, [pc, #260]	; (800a878 <TIM_Base_SetConfig+0x128>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a40      	ldr	r2, [pc, #256]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a3f      	ldr	r2, [pc, #252]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_Base_SetConfig+0x40>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a3e      	ldr	r2, [pc, #248]	; (800a884 <TIM_Base_SetConfig+0x134>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d108      	bne.n	800a7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a33      	ldr	r2, [pc, #204]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d027      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d023      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a30      	ldr	r2, [pc, #192]	; (800a878 <TIM_Base_SetConfig+0x128>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01f      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2f      	ldr	r2, [pc, #188]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d01b      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2e      	ldr	r2, [pc, #184]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d017      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2d      	ldr	r2, [pc, #180]	; (800a884 <TIM_Base_SetConfig+0x134>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d013      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a2c      	ldr	r2, [pc, #176]	; (800a888 <TIM_Base_SetConfig+0x138>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00f      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2b      	ldr	r2, [pc, #172]	; (800a88c <TIM_Base_SetConfig+0x13c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00b      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a2a      	ldr	r2, [pc, #168]	; (800a890 <TIM_Base_SetConfig+0x140>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d007      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a29      	ldr	r2, [pc, #164]	; (800a894 <TIM_Base_SetConfig+0x144>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d003      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a28      	ldr	r2, [pc, #160]	; (800a898 <TIM_Base_SetConfig+0x148>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d108      	bne.n	800a80c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a10      	ldr	r2, [pc, #64]	; (800a874 <TIM_Base_SetConfig+0x124>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00f      	beq.n	800a858 <TIM_Base_SetConfig+0x108>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a12      	ldr	r2, [pc, #72]	; (800a884 <TIM_Base_SetConfig+0x134>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00b      	beq.n	800a858 <TIM_Base_SetConfig+0x108>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a11      	ldr	r2, [pc, #68]	; (800a888 <TIM_Base_SetConfig+0x138>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d007      	beq.n	800a858 <TIM_Base_SetConfig+0x108>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a10      	ldr	r2, [pc, #64]	; (800a88c <TIM_Base_SetConfig+0x13c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d003      	beq.n	800a858 <TIM_Base_SetConfig+0x108>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a0f      	ldr	r2, [pc, #60]	; (800a890 <TIM_Base_SetConfig+0x140>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d103      	bne.n	800a860 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	615a      	str	r2, [r3, #20]
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	40010000 	.word	0x40010000
 800a878:	40000400 	.word	0x40000400
 800a87c:	40000800 	.word	0x40000800
 800a880:	40000c00 	.word	0x40000c00
 800a884:	40010400 	.word	0x40010400
 800a888:	40014000 	.word	0x40014000
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800
 800a894:	4000e000 	.word	0x4000e000
 800a898:	4000e400 	.word	0x4000e400

0800a89c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	f023 0201 	bic.w	r2, r3, #1
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4b37      	ldr	r3, [pc, #220]	; (800a9a4 <TIM_OC1_SetConfig+0x108>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0303 	bic.w	r3, r3, #3
 800a8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 0302 	bic.w	r3, r3, #2
 800a8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a2d      	ldr	r2, [pc, #180]	; (800a9a8 <TIM_OC1_SetConfig+0x10c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00f      	beq.n	800a918 <TIM_OC1_SetConfig+0x7c>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a2c      	ldr	r2, [pc, #176]	; (800a9ac <TIM_OC1_SetConfig+0x110>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00b      	beq.n	800a918 <TIM_OC1_SetConfig+0x7c>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a2b      	ldr	r2, [pc, #172]	; (800a9b0 <TIM_OC1_SetConfig+0x114>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d007      	beq.n	800a918 <TIM_OC1_SetConfig+0x7c>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a2a      	ldr	r2, [pc, #168]	; (800a9b4 <TIM_OC1_SetConfig+0x118>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_OC1_SetConfig+0x7c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a29      	ldr	r2, [pc, #164]	; (800a9b8 <TIM_OC1_SetConfig+0x11c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d10c      	bne.n	800a932 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f023 0308 	bic.w	r3, r3, #8
 800a91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4313      	orrs	r3, r2
 800a928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f023 0304 	bic.w	r3, r3, #4
 800a930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <TIM_OC1_SetConfig+0x10c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00f      	beq.n	800a95a <TIM_OC1_SetConfig+0xbe>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <TIM_OC1_SetConfig+0x110>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00b      	beq.n	800a95a <TIM_OC1_SetConfig+0xbe>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a1a      	ldr	r2, [pc, #104]	; (800a9b0 <TIM_OC1_SetConfig+0x114>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d007      	beq.n	800a95a <TIM_OC1_SetConfig+0xbe>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a19      	ldr	r2, [pc, #100]	; (800a9b4 <TIM_OC1_SetConfig+0x118>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d003      	beq.n	800a95a <TIM_OC1_SetConfig+0xbe>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a18      	ldr	r2, [pc, #96]	; (800a9b8 <TIM_OC1_SetConfig+0x11c>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d111      	bne.n	800a97e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	621a      	str	r2, [r3, #32]
}
 800a998:	bf00      	nop
 800a99a:	371c      	adds	r7, #28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	fffeff8f 	.word	0xfffeff8f
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40014400 	.word	0x40014400
 800a9b8:	40014800 	.word	0x40014800

0800a9bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	f023 0210 	bic.w	r2, r3, #16
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4b34      	ldr	r3, [pc, #208]	; (800aab8 <TIM_OC2_SetConfig+0xfc>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f023 0320 	bic.w	r3, r3, #32
 800aa06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a29      	ldr	r2, [pc, #164]	; (800aabc <TIM_OC2_SetConfig+0x100>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_OC2_SetConfig+0x68>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a28      	ldr	r2, [pc, #160]	; (800aac0 <TIM_OC2_SetConfig+0x104>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d10d      	bne.n	800aa40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	011b      	lsls	r3, r3, #4
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a1e      	ldr	r2, [pc, #120]	; (800aabc <TIM_OC2_SetConfig+0x100>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d00f      	beq.n	800aa68 <TIM_OC2_SetConfig+0xac>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a1d      	ldr	r2, [pc, #116]	; (800aac0 <TIM_OC2_SetConfig+0x104>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00b      	beq.n	800aa68 <TIM_OC2_SetConfig+0xac>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a1c      	ldr	r2, [pc, #112]	; (800aac4 <TIM_OC2_SetConfig+0x108>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d007      	beq.n	800aa68 <TIM_OC2_SetConfig+0xac>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a1b      	ldr	r2, [pc, #108]	; (800aac8 <TIM_OC2_SetConfig+0x10c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d003      	beq.n	800aa68 <TIM_OC2_SetConfig+0xac>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a1a      	ldr	r2, [pc, #104]	; (800aacc <TIM_OC2_SetConfig+0x110>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d113      	bne.n	800aa90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	621a      	str	r2, [r3, #32]
}
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	feff8fff 	.word	0xfeff8fff
 800aabc:	40010000 	.word	0x40010000
 800aac0:	40010400 	.word	0x40010400
 800aac4:	40014000 	.word	0x40014000
 800aac8:	40014400 	.word	0x40014400
 800aacc:	40014800 	.word	0x40014800

0800aad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <TIM_OC3_SetConfig+0xf8>)
 800aafc:	4013      	ands	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a28      	ldr	r2, [pc, #160]	; (800abcc <TIM_OC3_SetConfig+0xfc>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d003      	beq.n	800ab36 <TIM_OC3_SetConfig+0x66>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a27      	ldr	r2, [pc, #156]	; (800abd0 <TIM_OC3_SetConfig+0x100>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d10d      	bne.n	800ab52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a1d      	ldr	r2, [pc, #116]	; (800abcc <TIM_OC3_SetConfig+0xfc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00f      	beq.n	800ab7a <TIM_OC3_SetConfig+0xaa>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a1c      	ldr	r2, [pc, #112]	; (800abd0 <TIM_OC3_SetConfig+0x100>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00b      	beq.n	800ab7a <TIM_OC3_SetConfig+0xaa>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a1b      	ldr	r2, [pc, #108]	; (800abd4 <TIM_OC3_SetConfig+0x104>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d007      	beq.n	800ab7a <TIM_OC3_SetConfig+0xaa>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a1a      	ldr	r2, [pc, #104]	; (800abd8 <TIM_OC3_SetConfig+0x108>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d003      	beq.n	800ab7a <TIM_OC3_SetConfig+0xaa>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <TIM_OC3_SetConfig+0x10c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d113      	bne.n	800aba2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	011b      	lsls	r3, r3, #4
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	621a      	str	r2, [r3, #32]
}
 800abbc:	bf00      	nop
 800abbe:	371c      	adds	r7, #28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	fffeff8f 	.word	0xfffeff8f
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40010400 	.word	0x40010400
 800abd4:	40014000 	.word	0x40014000
 800abd8:	40014400 	.word	0x40014400
 800abdc:	40014800 	.word	0x40014800

0800abe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <TIM_OC4_SetConfig+0xbc>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	031b      	lsls	r3, r3, #12
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a19      	ldr	r2, [pc, #100]	; (800aca0 <TIM_OC4_SetConfig+0xc0>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00f      	beq.n	800ac60 <TIM_OC4_SetConfig+0x80>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <TIM_OC4_SetConfig+0xc4>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00b      	beq.n	800ac60 <TIM_OC4_SetConfig+0x80>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a17      	ldr	r2, [pc, #92]	; (800aca8 <TIM_OC4_SetConfig+0xc8>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d007      	beq.n	800ac60 <TIM_OC4_SetConfig+0x80>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a16      	ldr	r2, [pc, #88]	; (800acac <TIM_OC4_SetConfig+0xcc>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <TIM_OC4_SetConfig+0x80>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a15      	ldr	r2, [pc, #84]	; (800acb0 <TIM_OC4_SetConfig+0xd0>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d109      	bne.n	800ac74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	019b      	lsls	r3, r3, #6
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	621a      	str	r2, [r3, #32]
}
 800ac8e:	bf00      	nop
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	feff8fff 	.word	0xfeff8fff
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40010400 	.word	0x40010400
 800aca8:	40014000 	.word	0x40014000
 800acac:	40014400 	.word	0x40014400
 800acb0:	40014800 	.word	0x40014800

0800acb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4b21      	ldr	r3, [pc, #132]	; (800ad64 <TIM_OC5_SetConfig+0xb0>)
 800ace0:	4013      	ands	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <TIM_OC5_SetConfig+0xb4>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00f      	beq.n	800ad2a <TIM_OC5_SetConfig+0x76>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a17      	ldr	r2, [pc, #92]	; (800ad6c <TIM_OC5_SetConfig+0xb8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00b      	beq.n	800ad2a <TIM_OC5_SetConfig+0x76>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a16      	ldr	r2, [pc, #88]	; (800ad70 <TIM_OC5_SetConfig+0xbc>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d007      	beq.n	800ad2a <TIM_OC5_SetConfig+0x76>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <TIM_OC5_SetConfig+0xc0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_OC5_SetConfig+0x76>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <TIM_OC5_SetConfig+0xc4>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d109      	bne.n	800ad3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	021b      	lsls	r3, r3, #8
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	621a      	str	r2, [r3, #32]
}
 800ad58:	bf00      	nop
 800ad5a:	371c      	adds	r7, #28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	fffeff8f 	.word	0xfffeff8f
 800ad68:	40010000 	.word	0x40010000
 800ad6c:	40010400 	.word	0x40010400
 800ad70:	40014000 	.word	0x40014000
 800ad74:	40014400 	.word	0x40014400
 800ad78:	40014800 	.word	0x40014800

0800ad7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4b22      	ldr	r3, [pc, #136]	; (800ae30 <TIM_OC6_SetConfig+0xb4>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	021b      	lsls	r3, r3, #8
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	051b      	lsls	r3, r3, #20
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <TIM_OC6_SetConfig+0xb8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d00f      	beq.n	800adf4 <TIM_OC6_SetConfig+0x78>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a18      	ldr	r2, [pc, #96]	; (800ae38 <TIM_OC6_SetConfig+0xbc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d00b      	beq.n	800adf4 <TIM_OC6_SetConfig+0x78>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a17      	ldr	r2, [pc, #92]	; (800ae3c <TIM_OC6_SetConfig+0xc0>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d007      	beq.n	800adf4 <TIM_OC6_SetConfig+0x78>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a16      	ldr	r2, [pc, #88]	; (800ae40 <TIM_OC6_SetConfig+0xc4>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d003      	beq.n	800adf4 <TIM_OC6_SetConfig+0x78>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a15      	ldr	r2, [pc, #84]	; (800ae44 <TIM_OC6_SetConfig+0xc8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d109      	bne.n	800ae08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	029b      	lsls	r3, r3, #10
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	621a      	str	r2, [r3, #32]
}
 800ae22:	bf00      	nop
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	feff8fff 	.word	0xfeff8fff
 800ae34:	40010000 	.word	0x40010000
 800ae38:	40010400 	.word	0x40010400
 800ae3c:	40014000 	.word	0x40014000
 800ae40:	40014400 	.word	0x40014400
 800ae44:	40014800 	.word	0x40014800

0800ae48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f023 0201 	bic.w	r2, r3, #1
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	011b      	lsls	r3, r3, #4
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f023 030a 	bic.w	r3, r3, #10
 800ae84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	621a      	str	r2, [r3, #32]
}
 800ae9a:	bf00      	nop
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b087      	sub	sp, #28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	f023 0210 	bic.w	r2, r3, #16
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	031b      	lsls	r3, r3, #12
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	621a      	str	r2, [r3, #32]
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <TIM_ITRx_SetConfig+0x38>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	4313      	orrs	r3, r2
 800af26:	f043 0307 	orr.w	r3, r3, #7
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	609a      	str	r2, [r3, #8]
}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	ffcfff8f 	.word	0xffcfff8f

0800af44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	021a      	lsls	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	431a      	orrs	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	609a      	str	r2, [r3, #8]
}
 800af78:	bf00      	nop
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f003 031f 	and.w	r3, r3, #31
 800af96:	2201      	movs	r2, #1
 800af98:	fa02 f303 	lsl.w	r3, r2, r3
 800af9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a1a      	ldr	r2, [r3, #32]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	43db      	mvns	r3, r3
 800afa6:	401a      	ands	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a1a      	ldr	r2, [r3, #32]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	fa01 f303 	lsl.w	r3, r1, r3
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	621a      	str	r2, [r3, #32]
}
 800afc2:	bf00      	nop
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
	...

0800afd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e077      	b.n	800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a35      	ldr	r2, [pc, #212]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a34      	ldr	r2, [pc, #208]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d108      	bne.n	800b02e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a25      	ldr	r2, [pc, #148]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d02c      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d027      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a22      	ldr	r2, [pc, #136]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d022      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a21      	ldr	r2, [pc, #132]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d01d      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a1f      	ldr	r2, [pc, #124]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d018      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a1a      	ldr	r2, [pc, #104]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d013      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1b      	ldr	r2, [pc, #108]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00e      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d009      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a18      	ldr	r2, [pc, #96]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d004      	beq.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a17      	ldr	r2, [pc, #92]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d10c      	bne.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40010400 	.word	0x40010400
 800b0ec:	40000400 	.word	0x40000400
 800b0f0:	40000800 	.word	0x40000800
 800b0f4:	40000c00 	.word	0x40000c00
 800b0f8:	40001800 	.word	0x40001800
 800b0fc:	40014000 	.word	0x40014000
 800b100:	4000e000 	.word	0x4000e000
 800b104:	4000e400 	.word	0x4000e400

0800b108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d101      	bne.n	800b124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b120:	2302      	movs	r3, #2
 800b122:	e087      	b.n	800b234 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	041b      	lsls	r3, r3, #16
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a27      	ldr	r2, [pc, #156]	; (800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d004      	beq.n	800b1b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a25      	ldr	r2, [pc, #148]	; (800b244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d106      	bne.n	800b1c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1e      	ldr	r2, [pc, #120]	; (800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d004      	beq.n	800b1d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a1d      	ldr	r2, [pc, #116]	; (800b244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d126      	bne.n	800b222 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1de:	051b      	lsls	r3, r3, #20
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a0e      	ldr	r2, [pc, #56]	; (800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d004      	beq.n	800b214 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a0d      	ldr	r2, [pc, #52]	; (800b244 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d106      	bne.n	800b222 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	40010000 	.word	0x40010000
 800b244:	40010400 	.word	0x40010400

0800b248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e042      	b.n	800b31c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7f7 fab3 	bl	8002814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2224      	movs	r2, #36	; 0x24
 800b2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0201 	bic.w	r2, r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f996 	bl	800b5f8 <UART_SetConfig>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d101      	bne.n	800b2d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e022      	b.n	800b31c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d002      	beq.n	800b2e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 ffe8 	bl	800c2b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 f86f 	bl	800c3f8 <UART_CheckIdleState>
 800b31a:	4603      	mov	r3, r0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08a      	sub	sp, #40	; 0x28
 800b328:	af02      	add	r7, sp, #8
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	4613      	mov	r3, r2
 800b332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	f040 8083 	bne.w	800b446 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_UART_Transmit+0x28>
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e07b      	b.n	800b448 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b356:	2b01      	cmp	r3, #1
 800b358:	d101      	bne.n	800b35e <HAL_UART_Transmit+0x3a>
 800b35a:	2302      	movs	r3, #2
 800b35c:	e074      	b.n	800b448 <HAL_UART_Transmit+0x124>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2221      	movs	r2, #33	; 0x21
 800b372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b376:	f7f7 fc77 	bl	8002c68 <HAL_GetTick>
 800b37a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	88fa      	ldrh	r2, [r7, #6]
 800b380:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	88fa      	ldrh	r2, [r7, #6]
 800b388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b394:	d108      	bne.n	800b3a8 <HAL_UART_Transmit+0x84>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d104      	bne.n	800b3a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	61bb      	str	r3, [r7, #24]
 800b3a6:	e003      	b.n	800b3b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b3b8:	e02c      	b.n	800b414 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2180      	movs	r1, #128	; 0x80
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f001 f862 	bl	800c48e <UART_WaitOnFlagUntilTimeout>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e039      	b.n	800b448 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	3302      	adds	r3, #2
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	e007      	b.n	800b402 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	781a      	ldrb	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	3301      	adds	r3, #1
 800b400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b408:	b29b      	uxth	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1cc      	bne.n	800b3ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2200      	movs	r2, #0
 800b428:	2140      	movs	r1, #64	; 0x40
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f001 f82f 	bl	800c48e <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e006      	b.n	800b448 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	e000      	b.n	800b448 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b446:	2302      	movs	r3, #2
  }
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	; 0x28
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	4613      	mov	r3, r2
 800b45e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b466:	2b20      	cmp	r3, #32
 800b468:	f040 80c0 	bne.w	800b5ec <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_UART_Receive+0x28>
 800b472:	88fb      	ldrh	r3, [r7, #6]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e0b8      	b.n	800b5ee <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_UART_Receive+0x3a>
 800b486:	2302      	movs	r3, #2
 800b488:	e0b1      	b.n	800b5ee <HAL_UART_Receive+0x19e>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2222      	movs	r2, #34	; 0x22
 800b49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4a8:	f7f7 fbde 	bl	8002c68 <HAL_GetTick>
 800b4ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	88fa      	ldrh	r2, [r7, #6]
 800b4b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	88fa      	ldrh	r2, [r7, #6]
 800b4ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c6:	d10e      	bne.n	800b4e6 <HAL_UART_Receive+0x96>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d105      	bne.n	800b4dc <HAL_UART_Receive+0x8c>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b4d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4da:	e02d      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	22ff      	movs	r2, #255	; 0xff
 800b4e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4e4:	e028      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10d      	bne.n	800b50a <HAL_UART_Receive+0xba>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d104      	bne.n	800b500 <HAL_UART_Receive+0xb0>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	22ff      	movs	r2, #255	; 0xff
 800b4fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4fe:	e01b      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	227f      	movs	r2, #127	; 0x7f
 800b504:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b508:	e016      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b512:	d10d      	bne.n	800b530 <HAL_UART_Receive+0xe0>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d104      	bne.n	800b526 <HAL_UART_Receive+0xd6>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	227f      	movs	r2, #127	; 0x7f
 800b520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b524:	e008      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	223f      	movs	r2, #63	; 0x3f
 800b52a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b52e:	e003      	b.n	800b538 <HAL_UART_Receive+0xe8>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b53e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b548:	d108      	bne.n	800b55c <HAL_UART_Receive+0x10c>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d104      	bne.n	800b55c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	e003      	b.n	800b564 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b56c:	e032      	b.n	800b5d4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2200      	movs	r2, #0
 800b576:	2120      	movs	r1, #32
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 ff88 	bl	800c48e <UART_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e032      	b.n	800b5ee <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10c      	bne.n	800b5a8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	b29a      	uxth	r2, r3
 800b596:	8a7b      	ldrh	r3, [r7, #18]
 800b598:	4013      	ands	r3, r2
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	3302      	adds	r3, #2
 800b5a4:	61bb      	str	r3, [r7, #24]
 800b5a6:	e00c      	b.n	800b5c2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	8a7b      	ldrh	r3, [r7, #18]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1c6      	bne.n	800b56e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e000      	b.n	800b5ee <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800b5ec:	2302      	movs	r3, #2
  }
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
	...

0800b5f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5f8:	b5b0      	push	{r4, r5, r7, lr}
 800b5fa:	b08e      	sub	sp, #56	; 0x38
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	431a      	orrs	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	4bbf      	ldr	r3, [pc, #764]	; (800b924 <UART_SetConfig+0x32c>)
 800b626:	4013      	ands	r3, r2
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b62e:	430b      	orrs	r3, r1
 800b630:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4ab5      	ldr	r2, [pc, #724]	; (800b928 <UART_SetConfig+0x330>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d004      	beq.n	800b662 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b65e:	4313      	orrs	r3, r2
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	4bb0      	ldr	r3, [pc, #704]	; (800b92c <UART_SetConfig+0x334>)
 800b66a:	4013      	ands	r3, r2
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6812      	ldr	r2, [r2, #0]
 800b670:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b672:	430b      	orrs	r3, r1
 800b674:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	f023 010f 	bic.w	r1, r3, #15
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4aa7      	ldr	r2, [pc, #668]	; (800b930 <UART_SetConfig+0x338>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d176      	bne.n	800b784 <UART_SetConfig+0x18c>
 800b696:	4ba7      	ldr	r3, [pc, #668]	; (800b934 <UART_SetConfig+0x33c>)
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b69e:	2b28      	cmp	r3, #40	; 0x28
 800b6a0:	d86c      	bhi.n	800b77c <UART_SetConfig+0x184>
 800b6a2:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <UART_SetConfig+0xb0>)
 800b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a8:	0800b74d 	.word	0x0800b74d
 800b6ac:	0800b77d 	.word	0x0800b77d
 800b6b0:	0800b77d 	.word	0x0800b77d
 800b6b4:	0800b77d 	.word	0x0800b77d
 800b6b8:	0800b77d 	.word	0x0800b77d
 800b6bc:	0800b77d 	.word	0x0800b77d
 800b6c0:	0800b77d 	.word	0x0800b77d
 800b6c4:	0800b77d 	.word	0x0800b77d
 800b6c8:	0800b755 	.word	0x0800b755
 800b6cc:	0800b77d 	.word	0x0800b77d
 800b6d0:	0800b77d 	.word	0x0800b77d
 800b6d4:	0800b77d 	.word	0x0800b77d
 800b6d8:	0800b77d 	.word	0x0800b77d
 800b6dc:	0800b77d 	.word	0x0800b77d
 800b6e0:	0800b77d 	.word	0x0800b77d
 800b6e4:	0800b77d 	.word	0x0800b77d
 800b6e8:	0800b75d 	.word	0x0800b75d
 800b6ec:	0800b77d 	.word	0x0800b77d
 800b6f0:	0800b77d 	.word	0x0800b77d
 800b6f4:	0800b77d 	.word	0x0800b77d
 800b6f8:	0800b77d 	.word	0x0800b77d
 800b6fc:	0800b77d 	.word	0x0800b77d
 800b700:	0800b77d 	.word	0x0800b77d
 800b704:	0800b77d 	.word	0x0800b77d
 800b708:	0800b765 	.word	0x0800b765
 800b70c:	0800b77d 	.word	0x0800b77d
 800b710:	0800b77d 	.word	0x0800b77d
 800b714:	0800b77d 	.word	0x0800b77d
 800b718:	0800b77d 	.word	0x0800b77d
 800b71c:	0800b77d 	.word	0x0800b77d
 800b720:	0800b77d 	.word	0x0800b77d
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b76d 	.word	0x0800b76d
 800b72c:	0800b77d 	.word	0x0800b77d
 800b730:	0800b77d 	.word	0x0800b77d
 800b734:	0800b77d 	.word	0x0800b77d
 800b738:	0800b77d 	.word	0x0800b77d
 800b73c:	0800b77d 	.word	0x0800b77d
 800b740:	0800b77d 	.word	0x0800b77d
 800b744:	0800b77d 	.word	0x0800b77d
 800b748:	0800b775 	.word	0x0800b775
 800b74c:	2301      	movs	r3, #1
 800b74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b752:	e326      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b754:	2304      	movs	r3, #4
 800b756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b75a:	e322      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b75c:	2308      	movs	r3, #8
 800b75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b762:	e31e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b764:	2310      	movs	r3, #16
 800b766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b76a:	e31a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b76c:	2320      	movs	r3, #32
 800b76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b772:	e316      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b774:	2340      	movs	r3, #64	; 0x40
 800b776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b77a:	e312      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b77c:	2380      	movs	r3, #128	; 0x80
 800b77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b782:	e30e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a6b      	ldr	r2, [pc, #428]	; (800b938 <UART_SetConfig+0x340>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d130      	bne.n	800b7f0 <UART_SetConfig+0x1f8>
 800b78e:	4b69      	ldr	r3, [pc, #420]	; (800b934 <UART_SetConfig+0x33c>)
 800b790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b792:	f003 0307 	and.w	r3, r3, #7
 800b796:	2b05      	cmp	r3, #5
 800b798:	d826      	bhi.n	800b7e8 <UART_SetConfig+0x1f0>
 800b79a:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <UART_SetConfig+0x1a8>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7b9 	.word	0x0800b7b9
 800b7a4:	0800b7c1 	.word	0x0800b7c1
 800b7a8:	0800b7c9 	.word	0x0800b7c9
 800b7ac:	0800b7d1 	.word	0x0800b7d1
 800b7b0:	0800b7d9 	.word	0x0800b7d9
 800b7b4:	0800b7e1 	.word	0x0800b7e1
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7be:	e2f0      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7c0:	2304      	movs	r3, #4
 800b7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7c6:	e2ec      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7c8:	2308      	movs	r3, #8
 800b7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ce:	e2e8      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7d0:	2310      	movs	r3, #16
 800b7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7d6:	e2e4      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7d8:	2320      	movs	r3, #32
 800b7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7de:	e2e0      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7e0:	2340      	movs	r3, #64	; 0x40
 800b7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7e6:	e2dc      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ee:	e2d8      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a51      	ldr	r2, [pc, #324]	; (800b93c <UART_SetConfig+0x344>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d130      	bne.n	800b85c <UART_SetConfig+0x264>
 800b7fa:	4b4e      	ldr	r3, [pc, #312]	; (800b934 <UART_SetConfig+0x33c>)
 800b7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	2b05      	cmp	r3, #5
 800b804:	d826      	bhi.n	800b854 <UART_SetConfig+0x25c>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <UART_SetConfig+0x214>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b825 	.word	0x0800b825
 800b810:	0800b82d 	.word	0x0800b82d
 800b814:	0800b835 	.word	0x0800b835
 800b818:	0800b83d 	.word	0x0800b83d
 800b81c:	0800b845 	.word	0x0800b845
 800b820:	0800b84d 	.word	0x0800b84d
 800b824:	2300      	movs	r3, #0
 800b826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b82a:	e2ba      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b82c:	2304      	movs	r3, #4
 800b82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b832:	e2b6      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b834:	2308      	movs	r3, #8
 800b836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b83a:	e2b2      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b83c:	2310      	movs	r3, #16
 800b83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b842:	e2ae      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b844:	2320      	movs	r3, #32
 800b846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b84a:	e2aa      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b84c:	2340      	movs	r3, #64	; 0x40
 800b84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b852:	e2a6      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b854:	2380      	movs	r3, #128	; 0x80
 800b856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b85a:	e2a2      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a37      	ldr	r2, [pc, #220]	; (800b940 <UART_SetConfig+0x348>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d130      	bne.n	800b8c8 <UART_SetConfig+0x2d0>
 800b866:	4b33      	ldr	r3, [pc, #204]	; (800b934 <UART_SetConfig+0x33c>)
 800b868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86a:	f003 0307 	and.w	r3, r3, #7
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d826      	bhi.n	800b8c0 <UART_SetConfig+0x2c8>
 800b872:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <UART_SetConfig+0x280>)
 800b874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b878:	0800b891 	.word	0x0800b891
 800b87c:	0800b899 	.word	0x0800b899
 800b880:	0800b8a1 	.word	0x0800b8a1
 800b884:	0800b8a9 	.word	0x0800b8a9
 800b888:	0800b8b1 	.word	0x0800b8b1
 800b88c:	0800b8b9 	.word	0x0800b8b9
 800b890:	2300      	movs	r3, #0
 800b892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b896:	e284      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b898:	2304      	movs	r3, #4
 800b89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b89e:	e280      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8a0:	2308      	movs	r3, #8
 800b8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8a6:	e27c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8a8:	2310      	movs	r3, #16
 800b8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ae:	e278      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8b0:	2320      	movs	r3, #32
 800b8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8b6:	e274      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8b8:	2340      	movs	r3, #64	; 0x40
 800b8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8be:	e270      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8c0:	2380      	movs	r3, #128	; 0x80
 800b8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8c6:	e26c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <UART_SetConfig+0x34c>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d142      	bne.n	800b958 <UART_SetConfig+0x360>
 800b8d2:	4b18      	ldr	r3, [pc, #96]	; (800b934 <UART_SetConfig+0x33c>)
 800b8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	d838      	bhi.n	800b950 <UART_SetConfig+0x358>
 800b8de:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <UART_SetConfig+0x2ec>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800b8fd 	.word	0x0800b8fd
 800b8e8:	0800b905 	.word	0x0800b905
 800b8ec:	0800b90d 	.word	0x0800b90d
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b91d 	.word	0x0800b91d
 800b8f8:	0800b949 	.word	0x0800b949
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b902:	e24e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b904:	2304      	movs	r3, #4
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b90a:	e24a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b912:	e246      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b914:	2310      	movs	r3, #16
 800b916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b91a:	e242      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b91c:	2320      	movs	r3, #32
 800b91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b922:	e23e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b924:	cfff69f3 	.word	0xcfff69f3
 800b928:	58000c00 	.word	0x58000c00
 800b92c:	11fff4ff 	.word	0x11fff4ff
 800b930:	40011000 	.word	0x40011000
 800b934:	58024400 	.word	0x58024400
 800b938:	40004400 	.word	0x40004400
 800b93c:	40004800 	.word	0x40004800
 800b940:	40004c00 	.word	0x40004c00
 800b944:	40005000 	.word	0x40005000
 800b948:	2340      	movs	r3, #64	; 0x40
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e228      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b950:	2380      	movs	r3, #128	; 0x80
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b956:	e224      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4ab1      	ldr	r2, [pc, #708]	; (800bc24 <UART_SetConfig+0x62c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d176      	bne.n	800ba50 <UART_SetConfig+0x458>
 800b962:	4bb1      	ldr	r3, [pc, #708]	; (800bc28 <UART_SetConfig+0x630>)
 800b964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b96a:	2b28      	cmp	r3, #40	; 0x28
 800b96c:	d86c      	bhi.n	800ba48 <UART_SetConfig+0x450>
 800b96e:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <UART_SetConfig+0x37c>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800ba19 	.word	0x0800ba19
 800b978:	0800ba49 	.word	0x0800ba49
 800b97c:	0800ba49 	.word	0x0800ba49
 800b980:	0800ba49 	.word	0x0800ba49
 800b984:	0800ba49 	.word	0x0800ba49
 800b988:	0800ba49 	.word	0x0800ba49
 800b98c:	0800ba49 	.word	0x0800ba49
 800b990:	0800ba49 	.word	0x0800ba49
 800b994:	0800ba21 	.word	0x0800ba21
 800b998:	0800ba49 	.word	0x0800ba49
 800b99c:	0800ba49 	.word	0x0800ba49
 800b9a0:	0800ba49 	.word	0x0800ba49
 800b9a4:	0800ba49 	.word	0x0800ba49
 800b9a8:	0800ba49 	.word	0x0800ba49
 800b9ac:	0800ba49 	.word	0x0800ba49
 800b9b0:	0800ba49 	.word	0x0800ba49
 800b9b4:	0800ba29 	.word	0x0800ba29
 800b9b8:	0800ba49 	.word	0x0800ba49
 800b9bc:	0800ba49 	.word	0x0800ba49
 800b9c0:	0800ba49 	.word	0x0800ba49
 800b9c4:	0800ba49 	.word	0x0800ba49
 800b9c8:	0800ba49 	.word	0x0800ba49
 800b9cc:	0800ba49 	.word	0x0800ba49
 800b9d0:	0800ba49 	.word	0x0800ba49
 800b9d4:	0800ba31 	.word	0x0800ba31
 800b9d8:	0800ba49 	.word	0x0800ba49
 800b9dc:	0800ba49 	.word	0x0800ba49
 800b9e0:	0800ba49 	.word	0x0800ba49
 800b9e4:	0800ba49 	.word	0x0800ba49
 800b9e8:	0800ba49 	.word	0x0800ba49
 800b9ec:	0800ba49 	.word	0x0800ba49
 800b9f0:	0800ba49 	.word	0x0800ba49
 800b9f4:	0800ba39 	.word	0x0800ba39
 800b9f8:	0800ba49 	.word	0x0800ba49
 800b9fc:	0800ba49 	.word	0x0800ba49
 800ba00:	0800ba49 	.word	0x0800ba49
 800ba04:	0800ba49 	.word	0x0800ba49
 800ba08:	0800ba49 	.word	0x0800ba49
 800ba0c:	0800ba49 	.word	0x0800ba49
 800ba10:	0800ba49 	.word	0x0800ba49
 800ba14:	0800ba41 	.word	0x0800ba41
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba1e:	e1c0      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba20:	2304      	movs	r3, #4
 800ba22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba26:	e1bc      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba28:	2308      	movs	r3, #8
 800ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2e:	e1b8      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba30:	2310      	movs	r3, #16
 800ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba36:	e1b4      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba38:	2320      	movs	r3, #32
 800ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3e:	e1b0      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba40:	2340      	movs	r3, #64	; 0x40
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e1ac      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba48:	2380      	movs	r3, #128	; 0x80
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4e:	e1a8      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a75      	ldr	r2, [pc, #468]	; (800bc2c <UART_SetConfig+0x634>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d130      	bne.n	800babc <UART_SetConfig+0x4c4>
 800ba5a:	4b73      	ldr	r3, [pc, #460]	; (800bc28 <UART_SetConfig+0x630>)
 800ba5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5e:	f003 0307 	and.w	r3, r3, #7
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d826      	bhi.n	800bab4 <UART_SetConfig+0x4bc>
 800ba66:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <UART_SetConfig+0x474>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba8d 	.word	0x0800ba8d
 800ba74:	0800ba95 	.word	0x0800ba95
 800ba78:	0800ba9d 	.word	0x0800ba9d
 800ba7c:	0800baa5 	.word	0x0800baa5
 800ba80:	0800baad 	.word	0x0800baad
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8a:	e18a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba8c:	2304      	movs	r3, #4
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e186      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba94:	2308      	movs	r3, #8
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e182      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e17e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800baa4:	2320      	movs	r3, #32
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e17a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800baac:	2340      	movs	r3, #64	; 0x40
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e176      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bab4:	2380      	movs	r3, #128	; 0x80
 800bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baba:	e172      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a5b      	ldr	r2, [pc, #364]	; (800bc30 <UART_SetConfig+0x638>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d130      	bne.n	800bb28 <UART_SetConfig+0x530>
 800bac6:	4b58      	ldr	r3, [pc, #352]	; (800bc28 <UART_SetConfig+0x630>)
 800bac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d826      	bhi.n	800bb20 <UART_SetConfig+0x528>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <UART_SetConfig+0x4e0>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800baf1 	.word	0x0800baf1
 800badc:	0800baf9 	.word	0x0800baf9
 800bae0:	0800bb01 	.word	0x0800bb01
 800bae4:	0800bb09 	.word	0x0800bb09
 800bae8:	0800bb11 	.word	0x0800bb11
 800baec:	0800bb19 	.word	0x0800bb19
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e154      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800baf8:	2304      	movs	r3, #4
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e150      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb00:	2308      	movs	r3, #8
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e14c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb08:	2310      	movs	r3, #16
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e148      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb10:	2320      	movs	r3, #32
 800bb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb16:	e144      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb18:	2340      	movs	r3, #64	; 0x40
 800bb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1e:	e140      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb20:	2380      	movs	r3, #128	; 0x80
 800bb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb26:	e13c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a41      	ldr	r2, [pc, #260]	; (800bc34 <UART_SetConfig+0x63c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	f040 8082 	bne.w	800bc38 <UART_SetConfig+0x640>
 800bb34:	4b3c      	ldr	r3, [pc, #240]	; (800bc28 <UART_SetConfig+0x630>)
 800bb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb3c:	2b28      	cmp	r3, #40	; 0x28
 800bb3e:	d86d      	bhi.n	800bc1c <UART_SetConfig+0x624>
 800bb40:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <UART_SetConfig+0x550>)
 800bb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb46:	bf00      	nop
 800bb48:	0800bbed 	.word	0x0800bbed
 800bb4c:	0800bc1d 	.word	0x0800bc1d
 800bb50:	0800bc1d 	.word	0x0800bc1d
 800bb54:	0800bc1d 	.word	0x0800bc1d
 800bb58:	0800bc1d 	.word	0x0800bc1d
 800bb5c:	0800bc1d 	.word	0x0800bc1d
 800bb60:	0800bc1d 	.word	0x0800bc1d
 800bb64:	0800bc1d 	.word	0x0800bc1d
 800bb68:	0800bbf5 	.word	0x0800bbf5
 800bb6c:	0800bc1d 	.word	0x0800bc1d
 800bb70:	0800bc1d 	.word	0x0800bc1d
 800bb74:	0800bc1d 	.word	0x0800bc1d
 800bb78:	0800bc1d 	.word	0x0800bc1d
 800bb7c:	0800bc1d 	.word	0x0800bc1d
 800bb80:	0800bc1d 	.word	0x0800bc1d
 800bb84:	0800bc1d 	.word	0x0800bc1d
 800bb88:	0800bbfd 	.word	0x0800bbfd
 800bb8c:	0800bc1d 	.word	0x0800bc1d
 800bb90:	0800bc1d 	.word	0x0800bc1d
 800bb94:	0800bc1d 	.word	0x0800bc1d
 800bb98:	0800bc1d 	.word	0x0800bc1d
 800bb9c:	0800bc1d 	.word	0x0800bc1d
 800bba0:	0800bc1d 	.word	0x0800bc1d
 800bba4:	0800bc1d 	.word	0x0800bc1d
 800bba8:	0800bc05 	.word	0x0800bc05
 800bbac:	0800bc1d 	.word	0x0800bc1d
 800bbb0:	0800bc1d 	.word	0x0800bc1d
 800bbb4:	0800bc1d 	.word	0x0800bc1d
 800bbb8:	0800bc1d 	.word	0x0800bc1d
 800bbbc:	0800bc1d 	.word	0x0800bc1d
 800bbc0:	0800bc1d 	.word	0x0800bc1d
 800bbc4:	0800bc1d 	.word	0x0800bc1d
 800bbc8:	0800bc0d 	.word	0x0800bc0d
 800bbcc:	0800bc1d 	.word	0x0800bc1d
 800bbd0:	0800bc1d 	.word	0x0800bc1d
 800bbd4:	0800bc1d 	.word	0x0800bc1d
 800bbd8:	0800bc1d 	.word	0x0800bc1d
 800bbdc:	0800bc1d 	.word	0x0800bc1d
 800bbe0:	0800bc1d 	.word	0x0800bc1d
 800bbe4:	0800bc1d 	.word	0x0800bc1d
 800bbe8:	0800bc15 	.word	0x0800bc15
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf2:	e0d6      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfa:	e0d2      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc02:	e0ce      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc0a:	e0ca      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc12:	e0c6      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bc14:	2340      	movs	r3, #64	; 0x40
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1a:	e0c2      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e0be      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bc24:	40011400 	.word	0x40011400
 800bc28:	58024400 	.word	0x58024400
 800bc2c:	40007800 	.word	0x40007800
 800bc30:	40007c00 	.word	0x40007c00
 800bc34:	40011800 	.word	0x40011800
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4aad      	ldr	r2, [pc, #692]	; (800bef4 <UART_SetConfig+0x8fc>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d176      	bne.n	800bd30 <UART_SetConfig+0x738>
 800bc42:	4bad      	ldr	r3, [pc, #692]	; (800bef8 <UART_SetConfig+0x900>)
 800bc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc4a:	2b28      	cmp	r3, #40	; 0x28
 800bc4c:	d86c      	bhi.n	800bd28 <UART_SetConfig+0x730>
 800bc4e:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <UART_SetConfig+0x65c>)
 800bc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc54:	0800bcf9 	.word	0x0800bcf9
 800bc58:	0800bd29 	.word	0x0800bd29
 800bc5c:	0800bd29 	.word	0x0800bd29
 800bc60:	0800bd29 	.word	0x0800bd29
 800bc64:	0800bd29 	.word	0x0800bd29
 800bc68:	0800bd29 	.word	0x0800bd29
 800bc6c:	0800bd29 	.word	0x0800bd29
 800bc70:	0800bd29 	.word	0x0800bd29
 800bc74:	0800bd01 	.word	0x0800bd01
 800bc78:	0800bd29 	.word	0x0800bd29
 800bc7c:	0800bd29 	.word	0x0800bd29
 800bc80:	0800bd29 	.word	0x0800bd29
 800bc84:	0800bd29 	.word	0x0800bd29
 800bc88:	0800bd29 	.word	0x0800bd29
 800bc8c:	0800bd29 	.word	0x0800bd29
 800bc90:	0800bd29 	.word	0x0800bd29
 800bc94:	0800bd09 	.word	0x0800bd09
 800bc98:	0800bd29 	.word	0x0800bd29
 800bc9c:	0800bd29 	.word	0x0800bd29
 800bca0:	0800bd29 	.word	0x0800bd29
 800bca4:	0800bd29 	.word	0x0800bd29
 800bca8:	0800bd29 	.word	0x0800bd29
 800bcac:	0800bd29 	.word	0x0800bd29
 800bcb0:	0800bd29 	.word	0x0800bd29
 800bcb4:	0800bd11 	.word	0x0800bd11
 800bcb8:	0800bd29 	.word	0x0800bd29
 800bcbc:	0800bd29 	.word	0x0800bd29
 800bcc0:	0800bd29 	.word	0x0800bd29
 800bcc4:	0800bd29 	.word	0x0800bd29
 800bcc8:	0800bd29 	.word	0x0800bd29
 800bccc:	0800bd29 	.word	0x0800bd29
 800bcd0:	0800bd29 	.word	0x0800bd29
 800bcd4:	0800bd19 	.word	0x0800bd19
 800bcd8:	0800bd29 	.word	0x0800bd29
 800bcdc:	0800bd29 	.word	0x0800bd29
 800bce0:	0800bd29 	.word	0x0800bd29
 800bce4:	0800bd29 	.word	0x0800bd29
 800bce8:	0800bd29 	.word	0x0800bd29
 800bcec:	0800bd29 	.word	0x0800bd29
 800bcf0:	0800bd29 	.word	0x0800bd29
 800bcf4:	0800bd21 	.word	0x0800bd21
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e050      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd00:	2304      	movs	r3, #4
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e04c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd08:	2308      	movs	r3, #8
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e048      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd10:	2310      	movs	r3, #16
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e044      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd18:	2320      	movs	r3, #32
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e040      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd20:	2340      	movs	r3, #64	; 0x40
 800bd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd26:	e03c      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd28:	2380      	movs	r3, #128	; 0x80
 800bd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd2e:	e038      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a71      	ldr	r2, [pc, #452]	; (800befc <UART_SetConfig+0x904>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d130      	bne.n	800bd9c <UART_SetConfig+0x7a4>
 800bd3a:	4b6f      	ldr	r3, [pc, #444]	; (800bef8 <UART_SetConfig+0x900>)
 800bd3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3e:	f003 0307 	and.w	r3, r3, #7
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d826      	bhi.n	800bd94 <UART_SetConfig+0x79c>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <UART_SetConfig+0x754>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd65 	.word	0x0800bd65
 800bd50:	0800bd6d 	.word	0x0800bd6d
 800bd54:	0800bd75 	.word	0x0800bd75
 800bd58:	0800bd7d 	.word	0x0800bd7d
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	2302      	movs	r3, #2
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6a:	e01a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e016      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd74:	2308      	movs	r3, #8
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e012      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e00e      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd84:	2320      	movs	r3, #32
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e00a      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd92:	e006      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd94:	2380      	movs	r3, #128	; 0x80
 800bd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9a:	e002      	b.n	800bda2 <UART_SetConfig+0x7aa>
 800bd9c:	2380      	movs	r3, #128	; 0x80
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a55      	ldr	r2, [pc, #340]	; (800befc <UART_SetConfig+0x904>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	f040 80f0 	bne.w	800bf8e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdb2:	2b20      	cmp	r3, #32
 800bdb4:	dc46      	bgt.n	800be44 <UART_SetConfig+0x84c>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	db75      	blt.n	800bea6 <UART_SetConfig+0x8ae>
 800bdba:	3b02      	subs	r3, #2
 800bdbc:	2b1e      	cmp	r3, #30
 800bdbe:	d872      	bhi.n	800bea6 <UART_SetConfig+0x8ae>
 800bdc0:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <UART_SetConfig+0x7d0>)
 800bdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc6:	bf00      	nop
 800bdc8:	0800be4b 	.word	0x0800be4b
 800bdcc:	0800bea7 	.word	0x0800bea7
 800bdd0:	0800be53 	.word	0x0800be53
 800bdd4:	0800bea7 	.word	0x0800bea7
 800bdd8:	0800bea7 	.word	0x0800bea7
 800bddc:	0800bea7 	.word	0x0800bea7
 800bde0:	0800be63 	.word	0x0800be63
 800bde4:	0800bea7 	.word	0x0800bea7
 800bde8:	0800bea7 	.word	0x0800bea7
 800bdec:	0800bea7 	.word	0x0800bea7
 800bdf0:	0800bea7 	.word	0x0800bea7
 800bdf4:	0800bea7 	.word	0x0800bea7
 800bdf8:	0800bea7 	.word	0x0800bea7
 800bdfc:	0800bea7 	.word	0x0800bea7
 800be00:	0800be73 	.word	0x0800be73
 800be04:	0800bea7 	.word	0x0800bea7
 800be08:	0800bea7 	.word	0x0800bea7
 800be0c:	0800bea7 	.word	0x0800bea7
 800be10:	0800bea7 	.word	0x0800bea7
 800be14:	0800bea7 	.word	0x0800bea7
 800be18:	0800bea7 	.word	0x0800bea7
 800be1c:	0800bea7 	.word	0x0800bea7
 800be20:	0800bea7 	.word	0x0800bea7
 800be24:	0800bea7 	.word	0x0800bea7
 800be28:	0800bea7 	.word	0x0800bea7
 800be2c:	0800bea7 	.word	0x0800bea7
 800be30:	0800bea7 	.word	0x0800bea7
 800be34:	0800bea7 	.word	0x0800bea7
 800be38:	0800bea7 	.word	0x0800bea7
 800be3c:	0800bea7 	.word	0x0800bea7
 800be40:	0800be99 	.word	0x0800be99
 800be44:	2b40      	cmp	r3, #64	; 0x40
 800be46:	d02a      	beq.n	800be9e <UART_SetConfig+0x8a6>
 800be48:	e02d      	b.n	800bea6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be4a:	f7fc ffa1 	bl	8008d90 <HAL_RCCEx_GetD3PCLK1Freq>
 800be4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be50:	e02f      	b.n	800beb2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be52:	f107 0314 	add.w	r3, r7, #20
 800be56:	4618      	mov	r0, r3
 800be58:	f7fc ffb0 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be60:	e027      	b.n	800beb2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	4618      	mov	r0, r3
 800be68:	f7fd f8fc 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be70:	e01f      	b.n	800beb2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <UART_SetConfig+0x900>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 0320 	and.w	r3, r3, #32
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be7e:	4b1e      	ldr	r3, [pc, #120]	; (800bef8 <UART_SetConfig+0x900>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	08db      	lsrs	r3, r3, #3
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	4a1d      	ldr	r2, [pc, #116]	; (800bf00 <UART_SetConfig+0x908>)
 800be8a:	fa22 f303 	lsr.w	r3, r2, r3
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be90:	e00f      	b.n	800beb2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800be92:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <UART_SetConfig+0x908>)
 800be94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be96:	e00c      	b.n	800beb2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be98:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <UART_SetConfig+0x90c>)
 800be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be9c:	e009      	b.n	800beb2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bea4:	e005      	b.n	800beb2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800beb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 81e6 	beq.w	800c286 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	4a12      	ldr	r2, [pc, #72]	; (800bf08 <UART_SetConfig+0x910>)
 800bec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec4:	461a      	mov	r2, r3
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	fbb3 f3f2 	udiv	r3, r3, r2
 800becc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	4613      	mov	r3, r2
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	4413      	add	r3, r2
 800bed8:	6a3a      	ldr	r2, [r7, #32]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d305      	bcc.n	800beea <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bee4:	6a3a      	ldr	r2, [r7, #32]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d910      	bls.n	800bf0c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bef0:	e1c9      	b.n	800c286 <UART_SetConfig+0xc8e>
 800bef2:	bf00      	nop
 800bef4:	40011c00 	.word	0x40011c00
 800bef8:	58024400 	.word	0x58024400
 800befc:	58000c00 	.word	0x58000c00
 800bf00:	03d09000 	.word	0x03d09000
 800bf04:	003d0900 	.word	0x003d0900
 800bf08:	0800f140 	.word	0x0800f140
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f04f 0100 	mov.w	r1, #0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	4ac1      	ldr	r2, [pc, #772]	; (800c220 <UART_SetConfig+0xc28>)
 800bf1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	f7f4 fa4c 	bl	80003c0 <__aeabi_uldivmod>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	f04f 0300 	mov.w	r3, #0
 800bf38:	020b      	lsls	r3, r1, #8
 800bf3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf3e:	0202      	lsls	r2, r0, #8
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	6849      	ldr	r1, [r1, #4]
 800bf44:	0849      	lsrs	r1, r1, #1
 800bf46:	4608      	mov	r0, r1
 800bf48:	f04f 0100 	mov.w	r1, #0
 800bf4c:	1814      	adds	r4, r2, r0
 800bf4e:	eb43 0501 	adc.w	r5, r3, r1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	461a      	mov	r2, r3
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 fa2e 	bl	80003c0 <__aeabi_uldivmod>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4613      	mov	r3, r2
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf72:	d308      	bcc.n	800bf86 <UART_SetConfig+0x98e>
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf7a:	d204      	bcs.n	800bf86 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf82:	60da      	str	r2, [r3, #12]
 800bf84:	e17f      	b.n	800c286 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf8c:	e17b      	b.n	800c286 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf96:	f040 80bd 	bne.w	800c114 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800bf9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf9e:	2b20      	cmp	r3, #32
 800bfa0:	dc48      	bgt.n	800c034 <UART_SetConfig+0xa3c>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	db7b      	blt.n	800c09e <UART_SetConfig+0xaa6>
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	d879      	bhi.n	800c09e <UART_SetConfig+0xaa6>
 800bfaa:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <UART_SetConfig+0x9b8>)
 800bfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb0:	0800c03b 	.word	0x0800c03b
 800bfb4:	0800c043 	.word	0x0800c043
 800bfb8:	0800c09f 	.word	0x0800c09f
 800bfbc:	0800c09f 	.word	0x0800c09f
 800bfc0:	0800c04b 	.word	0x0800c04b
 800bfc4:	0800c09f 	.word	0x0800c09f
 800bfc8:	0800c09f 	.word	0x0800c09f
 800bfcc:	0800c09f 	.word	0x0800c09f
 800bfd0:	0800c05b 	.word	0x0800c05b
 800bfd4:	0800c09f 	.word	0x0800c09f
 800bfd8:	0800c09f 	.word	0x0800c09f
 800bfdc:	0800c09f 	.word	0x0800c09f
 800bfe0:	0800c09f 	.word	0x0800c09f
 800bfe4:	0800c09f 	.word	0x0800c09f
 800bfe8:	0800c09f 	.word	0x0800c09f
 800bfec:	0800c09f 	.word	0x0800c09f
 800bff0:	0800c06b 	.word	0x0800c06b
 800bff4:	0800c09f 	.word	0x0800c09f
 800bff8:	0800c09f 	.word	0x0800c09f
 800bffc:	0800c09f 	.word	0x0800c09f
 800c000:	0800c09f 	.word	0x0800c09f
 800c004:	0800c09f 	.word	0x0800c09f
 800c008:	0800c09f 	.word	0x0800c09f
 800c00c:	0800c09f 	.word	0x0800c09f
 800c010:	0800c09f 	.word	0x0800c09f
 800c014:	0800c09f 	.word	0x0800c09f
 800c018:	0800c09f 	.word	0x0800c09f
 800c01c:	0800c09f 	.word	0x0800c09f
 800c020:	0800c09f 	.word	0x0800c09f
 800c024:	0800c09f 	.word	0x0800c09f
 800c028:	0800c09f 	.word	0x0800c09f
 800c02c:	0800c09f 	.word	0x0800c09f
 800c030:	0800c091 	.word	0x0800c091
 800c034:	2b40      	cmp	r3, #64	; 0x40
 800c036:	d02e      	beq.n	800c096 <UART_SetConfig+0xa9e>
 800c038:	e031      	b.n	800c09e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c03a:	f7fb fb43 	bl	80076c4 <HAL_RCC_GetPCLK1Freq>
 800c03e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c040:	e033      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c042:	f7fb fb55 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 800c046:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c048:	e02f      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c04a:	f107 0314 	add.w	r3, r7, #20
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fc feb4 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c058:	e027      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c05a:	f107 0308 	add.w	r3, r7, #8
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd f800 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c068:	e01f      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c06a:	4b6e      	ldr	r3, [pc, #440]	; (800c224 <UART_SetConfig+0xc2c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0320 	and.w	r3, r3, #32
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c076:	4b6b      	ldr	r3, [pc, #428]	; (800c224 <UART_SetConfig+0xc2c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	08db      	lsrs	r3, r3, #3
 800c07c:	f003 0303 	and.w	r3, r3, #3
 800c080:	4a69      	ldr	r2, [pc, #420]	; (800c228 <UART_SetConfig+0xc30>)
 800c082:	fa22 f303 	lsr.w	r3, r2, r3
 800c086:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c088:	e00f      	b.n	800c0aa <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c08a:	4b67      	ldr	r3, [pc, #412]	; (800c228 <UART_SetConfig+0xc30>)
 800c08c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c08e:	e00c      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c090:	4b66      	ldr	r3, [pc, #408]	; (800c22c <UART_SetConfig+0xc34>)
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c094:	e009      	b.n	800c0aa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c09c:	e005      	b.n	800c0aa <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c0a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 80ea 	beq.w	800c286 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b6:	4a5a      	ldr	r2, [pc, #360]	; (800c220 <UART_SetConfig+0xc28>)
 800c0b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0c4:	005a      	lsls	r2, r3, #1
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	085b      	lsrs	r3, r3, #1
 800c0cc:	441a      	add	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	2b0f      	cmp	r3, #15
 800c0dc:	d916      	bls.n	800c10c <UART_SetConfig+0xb14>
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0e4:	d212      	bcs.n	800c10c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	f023 030f 	bic.w	r3, r3, #15
 800c0ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	085b      	lsrs	r3, r3, #1
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0fe:	4313      	orrs	r3, r2
 800c100:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c108:	60da      	str	r2, [r3, #12]
 800c10a:	e0bc      	b.n	800c286 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c112:	e0b8      	b.n	800c286 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c118:	2b20      	cmp	r3, #32
 800c11a:	dc4b      	bgt.n	800c1b4 <UART_SetConfig+0xbbc>
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f2c0 8087 	blt.w	800c230 <UART_SetConfig+0xc38>
 800c122:	2b20      	cmp	r3, #32
 800c124:	f200 8084 	bhi.w	800c230 <UART_SetConfig+0xc38>
 800c128:	a201      	add	r2, pc, #4	; (adr r2, 800c130 <UART_SetConfig+0xb38>)
 800c12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12e:	bf00      	nop
 800c130:	0800c1bb 	.word	0x0800c1bb
 800c134:	0800c1c3 	.word	0x0800c1c3
 800c138:	0800c231 	.word	0x0800c231
 800c13c:	0800c231 	.word	0x0800c231
 800c140:	0800c1cb 	.word	0x0800c1cb
 800c144:	0800c231 	.word	0x0800c231
 800c148:	0800c231 	.word	0x0800c231
 800c14c:	0800c231 	.word	0x0800c231
 800c150:	0800c1db 	.word	0x0800c1db
 800c154:	0800c231 	.word	0x0800c231
 800c158:	0800c231 	.word	0x0800c231
 800c15c:	0800c231 	.word	0x0800c231
 800c160:	0800c231 	.word	0x0800c231
 800c164:	0800c231 	.word	0x0800c231
 800c168:	0800c231 	.word	0x0800c231
 800c16c:	0800c231 	.word	0x0800c231
 800c170:	0800c1eb 	.word	0x0800c1eb
 800c174:	0800c231 	.word	0x0800c231
 800c178:	0800c231 	.word	0x0800c231
 800c17c:	0800c231 	.word	0x0800c231
 800c180:	0800c231 	.word	0x0800c231
 800c184:	0800c231 	.word	0x0800c231
 800c188:	0800c231 	.word	0x0800c231
 800c18c:	0800c231 	.word	0x0800c231
 800c190:	0800c231 	.word	0x0800c231
 800c194:	0800c231 	.word	0x0800c231
 800c198:	0800c231 	.word	0x0800c231
 800c19c:	0800c231 	.word	0x0800c231
 800c1a0:	0800c231 	.word	0x0800c231
 800c1a4:	0800c231 	.word	0x0800c231
 800c1a8:	0800c231 	.word	0x0800c231
 800c1ac:	0800c231 	.word	0x0800c231
 800c1b0:	0800c211 	.word	0x0800c211
 800c1b4:	2b40      	cmp	r3, #64	; 0x40
 800c1b6:	d02e      	beq.n	800c216 <UART_SetConfig+0xc1e>
 800c1b8:	e03a      	b.n	800c230 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ba:	f7fb fa83 	bl	80076c4 <HAL_RCC_GetPCLK1Freq>
 800c1be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1c0:	e03c      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1c2:	f7fb fa95 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 800c1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1c8:	e038      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ca:	f107 0314 	add.w	r3, r7, #20
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fc fdf4 	bl	8008dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1d8:	e030      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fc ff40 	bl	8009064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e8:	e028      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <UART_SetConfig+0xc2c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0320 	and.w	r3, r3, #32
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <UART_SetConfig+0xc2c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	08db      	lsrs	r3, r3, #3
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	4a09      	ldr	r2, [pc, #36]	; (800c228 <UART_SetConfig+0xc30>)
 800c202:	fa22 f303 	lsr.w	r3, r2, r3
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c208:	e018      	b.n	800c23c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <UART_SetConfig+0xc30>)
 800c20c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c20e:	e015      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c210:	4b06      	ldr	r3, [pc, #24]	; (800c22c <UART_SetConfig+0xc34>)
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c214:	e012      	b.n	800c23c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c21c:	e00e      	b.n	800c23c <UART_SetConfig+0xc44>
 800c21e:	bf00      	nop
 800c220:	0800f140 	.word	0x0800f140
 800c224:	58024400 	.word	0x58024400
 800c228:	03d09000 	.word	0x03d09000
 800c22c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c23a:	bf00      	nop
    }

    if (pclk != 0U)
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d021      	beq.n	800c286 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	4a1a      	ldr	r2, [pc, #104]	; (800c2b0 <UART_SetConfig+0xcb8>)
 800c248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c24c:	461a      	mov	r2, r3
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	fbb3 f2f2 	udiv	r2, r3, r2
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	085b      	lsrs	r3, r3, #1
 800c25a:	441a      	add	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	2b0f      	cmp	r3, #15
 800c26a:	d909      	bls.n	800c280 <UART_SetConfig+0xc88>
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c272:	d205      	bcs.n	800c280 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e002      	b.n	800c286 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c2a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3738      	adds	r7, #56	; 0x38
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	0800f140 	.word	0x0800f140

0800c2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00a      	beq.n	800c2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	f003 0302 	and.w	r3, r3, #2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c348:	f003 0310 	and.w	r3, r3, #16
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	430a      	orrs	r2, r1
 800c386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01a      	beq.n	800c3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3b2:	d10a      	bne.n	800c3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00a      	beq.n	800c3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	605a      	str	r2, [r3, #4]
  }
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c408:	f7f6 fc2e 	bl	8002c68 <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d10e      	bne.n	800c43a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c41c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f82f 	bl	800c48e <UART_WaitOnFlagUntilTimeout>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c436:	2303      	movs	r3, #3
 800c438:	e025      	b.n	800c486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b04      	cmp	r3, #4
 800c446:	d10e      	bne.n	800c466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f819 	bl	800c48e <UART_WaitOnFlagUntilTimeout>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e00f      	b.n	800c486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2220      	movs	r2, #32
 800c46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b09c      	sub	sp, #112	; 0x70
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	60b9      	str	r1, [r7, #8]
 800c498:	603b      	str	r3, [r7, #0]
 800c49a:	4613      	mov	r3, r2
 800c49c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c49e:	e0a9      	b.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a6:	f000 80a5 	beq.w	800c5f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4aa:	f7f6 fbdd 	bl	8002c68 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d302      	bcc.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800c4ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d140      	bne.n	800c542 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4d4:	667b      	str	r3, [r7, #100]	; 0x64
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e6      	bne.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	f023 0301 	bic.w	r3, r3, #1
 800c508:	663b      	str	r3, [r7, #96]	; 0x60
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3308      	adds	r3, #8
 800c510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c512:	64ba      	str	r2, [r7, #72]	; 0x48
 800c514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e5      	bne.n	800c4f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2220      	movs	r2, #32
 800c52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2220      	movs	r2, #32
 800c532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e069      	b.n	800c616 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0304 	and.w	r3, r3, #4
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d051      	beq.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c55a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c55e:	d149      	bne.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c57e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
 800c58a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c590:	e841 2300 	strex	r3, r2, [r1]
 800c594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e6      	bne.n	800c56a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f023 0301 	bic.w	r3, r3, #1
 800c5b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5bc:	623a      	str	r2, [r7, #32]
 800c5be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	69f9      	ldr	r1, [r7, #28]
 800c5c2:	6a3a      	ldr	r2, [r7, #32]
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e5      	bne.n	800c59c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e010      	b.n	800c616 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	69da      	ldr	r2, [r3, #28]
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	429a      	cmp	r2, r3
 800c602:	bf0c      	ite	eq
 800c604:	2301      	moveq	r3, #1
 800c606:	2300      	movne	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	461a      	mov	r2, r3
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	429a      	cmp	r2, r3
 800c610:	f43f af46 	beq.w	800c4a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3770      	adds	r7, #112	; 0x70
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c61e:	b480      	push	{r7}
 800c620:	b085      	sub	sp, #20
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d101      	bne.n	800c634 <HAL_UARTEx_DisableFifoMode+0x16>
 800c630:	2302      	movs	r3, #2
 800c632:	e027      	b.n	800c684 <HAL_UARTEx_DisableFifoMode+0x66>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2224      	movs	r2, #36	; 0x24
 800c640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f022 0201 	bic.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c662:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2220      	movs	r2, #32
 800c676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e02d      	b.n	800c704 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2224      	movs	r2, #36	; 0x24
 800c6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 0201 	bic.w	r2, r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f84f 	bl	800c788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d101      	bne.n	800c724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c720:	2302      	movs	r3, #2
 800c722:	e02d      	b.n	800c780 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2224      	movs	r2, #36	; 0x24
 800c730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0201 	bic.w	r2, r2, #1
 800c74a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f811 	bl	800c788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2220      	movs	r2, #32
 800c772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c794:	2b00      	cmp	r3, #0
 800c796:	d108      	bne.n	800c7aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7a8:	e031      	b.n	800c80e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7aa:	2310      	movs	r3, #16
 800c7ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7ae:	2310      	movs	r3, #16
 800c7b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	0e5b      	lsrs	r3, r3, #25
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	0f5b      	lsrs	r3, r3, #29
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 0307 	and.w	r3, r3, #7
 800c7d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	7b3a      	ldrb	r2, [r7, #12]
 800c7d6:	4911      	ldr	r1, [pc, #68]	; (800c81c <UARTEx_SetNbDataToProcess+0x94>)
 800c7d8:	5c8a      	ldrb	r2, [r1, r2]
 800c7da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7de:	7b3a      	ldrb	r2, [r7, #12]
 800c7e0:	490f      	ldr	r1, [pc, #60]	; (800c820 <UARTEx_SetNbDataToProcess+0x98>)
 800c7e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	7b7a      	ldrb	r2, [r7, #13]
 800c7f4:	4909      	ldr	r1, [pc, #36]	; (800c81c <UARTEx_SetNbDataToProcess+0x94>)
 800c7f6:	5c8a      	ldrb	r2, [r1, r2]
 800c7f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7fc:	7b7a      	ldrb	r2, [r7, #13]
 800c7fe:	4908      	ldr	r1, [pc, #32]	; (800c820 <UARTEx_SetNbDataToProcess+0x98>)
 800c800:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c802:	fb93 f3f2 	sdiv	r3, r3, r2
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c80e:	bf00      	nop
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	0800f158 	.word	0x0800f158
 800c820:	0800f160 	.word	0x0800f160

0800c824 <__errno>:
 800c824:	4b01      	ldr	r3, [pc, #4]	; (800c82c <__errno+0x8>)
 800c826:	6818      	ldr	r0, [r3, #0]
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	24000010 	.word	0x24000010

0800c830 <__libc_init_array>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	4d0d      	ldr	r5, [pc, #52]	; (800c868 <__libc_init_array+0x38>)
 800c834:	4c0d      	ldr	r4, [pc, #52]	; (800c86c <__libc_init_array+0x3c>)
 800c836:	1b64      	subs	r4, r4, r5
 800c838:	10a4      	asrs	r4, r4, #2
 800c83a:	2600      	movs	r6, #0
 800c83c:	42a6      	cmp	r6, r4
 800c83e:	d109      	bne.n	800c854 <__libc_init_array+0x24>
 800c840:	4d0b      	ldr	r5, [pc, #44]	; (800c870 <__libc_init_array+0x40>)
 800c842:	4c0c      	ldr	r4, [pc, #48]	; (800c874 <__libc_init_array+0x44>)
 800c844:	f002 fc62 	bl	800f10c <_init>
 800c848:	1b64      	subs	r4, r4, r5
 800c84a:	10a4      	asrs	r4, r4, #2
 800c84c:	2600      	movs	r6, #0
 800c84e:	42a6      	cmp	r6, r4
 800c850:	d105      	bne.n	800c85e <__libc_init_array+0x2e>
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	f855 3b04 	ldr.w	r3, [r5], #4
 800c858:	4798      	blx	r3
 800c85a:	3601      	adds	r6, #1
 800c85c:	e7ee      	b.n	800c83c <__libc_init_array+0xc>
 800c85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c862:	4798      	blx	r3
 800c864:	3601      	adds	r6, #1
 800c866:	e7f2      	b.n	800c84e <__libc_init_array+0x1e>
 800c868:	0800f554 	.word	0x0800f554
 800c86c:	0800f554 	.word	0x0800f554
 800c870:	0800f554 	.word	0x0800f554
 800c874:	0800f558 	.word	0x0800f558

0800c878 <memcpy>:
 800c878:	440a      	add	r2, r1
 800c87a:	4291      	cmp	r1, r2
 800c87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c880:	d100      	bne.n	800c884 <memcpy+0xc>
 800c882:	4770      	bx	lr
 800c884:	b510      	push	{r4, lr}
 800c886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c88e:	4291      	cmp	r1, r2
 800c890:	d1f9      	bne.n	800c886 <memcpy+0xe>
 800c892:	bd10      	pop	{r4, pc}

0800c894 <memset>:
 800c894:	4402      	add	r2, r0
 800c896:	4603      	mov	r3, r0
 800c898:	4293      	cmp	r3, r2
 800c89a:	d100      	bne.n	800c89e <memset+0xa>
 800c89c:	4770      	bx	lr
 800c89e:	f803 1b01 	strb.w	r1, [r3], #1
 800c8a2:	e7f9      	b.n	800c898 <memset+0x4>

0800c8a4 <__cvt>:
 800c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a6:	ed2d 8b02 	vpush	{d8}
 800c8aa:	eeb0 8b40 	vmov.f64	d8, d0
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	4617      	mov	r7, r2
 800c8b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c8b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c8b6:	ee18 2a90 	vmov	r2, s17
 800c8ba:	f025 0520 	bic.w	r5, r5, #32
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	bfb6      	itet	lt
 800c8c2:	222d      	movlt	r2, #45	; 0x2d
 800c8c4:	2200      	movge	r2, #0
 800c8c6:	eeb1 8b40 	vneglt.f64	d8, d0
 800c8ca:	2d46      	cmp	r5, #70	; 0x46
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	d004      	beq.n	800c8dc <__cvt+0x38>
 800c8d2:	2d45      	cmp	r5, #69	; 0x45
 800c8d4:	d100      	bne.n	800c8d8 <__cvt+0x34>
 800c8d6:	3401      	adds	r4, #1
 800c8d8:	2102      	movs	r1, #2
 800c8da:	e000      	b.n	800c8de <__cvt+0x3a>
 800c8dc:	2103      	movs	r1, #3
 800c8de:	ab03      	add	r3, sp, #12
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	ab02      	add	r3, sp, #8
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	4633      	mov	r3, r6
 800c8ea:	eeb0 0b48 	vmov.f64	d0, d8
 800c8ee:	f000 fcab 	bl	800d248 <_dtoa_r>
 800c8f2:	2d47      	cmp	r5, #71	; 0x47
 800c8f4:	d109      	bne.n	800c90a <__cvt+0x66>
 800c8f6:	07fb      	lsls	r3, r7, #31
 800c8f8:	d407      	bmi.n	800c90a <__cvt+0x66>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8fe:	1a1b      	subs	r3, r3, r0
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	b005      	add	sp, #20
 800c904:	ecbd 8b02 	vpop	{d8}
 800c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90a:	2d46      	cmp	r5, #70	; 0x46
 800c90c:	eb00 0204 	add.w	r2, r0, r4
 800c910:	d10c      	bne.n	800c92c <__cvt+0x88>
 800c912:	7803      	ldrb	r3, [r0, #0]
 800c914:	2b30      	cmp	r3, #48	; 0x30
 800c916:	d107      	bne.n	800c928 <__cvt+0x84>
 800c918:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c920:	bf1c      	itt	ne
 800c922:	f1c4 0401 	rsbne	r4, r4, #1
 800c926:	6034      	strne	r4, [r6, #0]
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	441a      	add	r2, r3
 800c92c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c934:	bf08      	it	eq
 800c936:	9203      	streq	r2, [sp, #12]
 800c938:	2130      	movs	r1, #48	; 0x30
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d2dc      	bcs.n	800c8fa <__cvt+0x56>
 800c940:	1c5c      	adds	r4, r3, #1
 800c942:	9403      	str	r4, [sp, #12]
 800c944:	7019      	strb	r1, [r3, #0]
 800c946:	e7f8      	b.n	800c93a <__cvt+0x96>

0800c948 <__exponent>:
 800c948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c94a:	4603      	mov	r3, r0
 800c94c:	2900      	cmp	r1, #0
 800c94e:	bfb8      	it	lt
 800c950:	4249      	neglt	r1, r1
 800c952:	f803 2b02 	strb.w	r2, [r3], #2
 800c956:	bfb4      	ite	lt
 800c958:	222d      	movlt	r2, #45	; 0x2d
 800c95a:	222b      	movge	r2, #43	; 0x2b
 800c95c:	2909      	cmp	r1, #9
 800c95e:	7042      	strb	r2, [r0, #1]
 800c960:	dd2a      	ble.n	800c9b8 <__exponent+0x70>
 800c962:	f10d 0407 	add.w	r4, sp, #7
 800c966:	46a4      	mov	ip, r4
 800c968:	270a      	movs	r7, #10
 800c96a:	46a6      	mov	lr, r4
 800c96c:	460a      	mov	r2, r1
 800c96e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c972:	fb07 1516 	mls	r5, r7, r6, r1
 800c976:	3530      	adds	r5, #48	; 0x30
 800c978:	2a63      	cmp	r2, #99	; 0x63
 800c97a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c97e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c982:	4631      	mov	r1, r6
 800c984:	dcf1      	bgt.n	800c96a <__exponent+0x22>
 800c986:	3130      	adds	r1, #48	; 0x30
 800c988:	f1ae 0502 	sub.w	r5, lr, #2
 800c98c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c990:	1c44      	adds	r4, r0, #1
 800c992:	4629      	mov	r1, r5
 800c994:	4561      	cmp	r1, ip
 800c996:	d30a      	bcc.n	800c9ae <__exponent+0x66>
 800c998:	f10d 0209 	add.w	r2, sp, #9
 800c99c:	eba2 020e 	sub.w	r2, r2, lr
 800c9a0:	4565      	cmp	r5, ip
 800c9a2:	bf88      	it	hi
 800c9a4:	2200      	movhi	r2, #0
 800c9a6:	4413      	add	r3, r2
 800c9a8:	1a18      	subs	r0, r3, r0
 800c9aa:	b003      	add	sp, #12
 800c9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c9b6:	e7ed      	b.n	800c994 <__exponent+0x4c>
 800c9b8:	2330      	movs	r3, #48	; 0x30
 800c9ba:	3130      	adds	r1, #48	; 0x30
 800c9bc:	7083      	strb	r3, [r0, #2]
 800c9be:	70c1      	strb	r1, [r0, #3]
 800c9c0:	1d03      	adds	r3, r0, #4
 800c9c2:	e7f1      	b.n	800c9a8 <__exponent+0x60>
 800c9c4:	0000      	movs	r0, r0
	...

0800c9c8 <_printf_float>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	b08b      	sub	sp, #44	; 0x2c
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c9d4:	4616      	mov	r6, r2
 800c9d6:	461f      	mov	r7, r3
 800c9d8:	4605      	mov	r5, r0
 800c9da:	f001 f9b7 	bl	800dd4c <_localeconv_r>
 800c9de:	f8d0 b000 	ldr.w	fp, [r0]
 800c9e2:	4658      	mov	r0, fp
 800c9e4:	f7f3 fc94 	bl	8000310 <strlen>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	9308      	str	r3, [sp, #32]
 800c9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c9f4:	6822      	ldr	r2, [r4, #0]
 800c9f6:	3307      	adds	r3, #7
 800c9f8:	f023 0307 	bic.w	r3, r3, #7
 800c9fc:	f103 0108 	add.w	r1, r3, #8
 800ca00:	f8c8 1000 	str.w	r1, [r8]
 800ca04:	4682      	mov	sl, r0
 800ca06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ca0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cc70 <_printf_float+0x2a8>
 800ca12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ca16:	eeb0 6bc0 	vabs.f64	d6, d0
 800ca1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	dd24      	ble.n	800ca6e <_printf_float+0xa6>
 800ca24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2c:	d502      	bpl.n	800ca34 <_printf_float+0x6c>
 800ca2e:	232d      	movs	r3, #45	; 0x2d
 800ca30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca34:	4b90      	ldr	r3, [pc, #576]	; (800cc78 <_printf_float+0x2b0>)
 800ca36:	4891      	ldr	r0, [pc, #580]	; (800cc7c <_printf_float+0x2b4>)
 800ca38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ca3c:	bf94      	ite	ls
 800ca3e:	4698      	movls	r8, r3
 800ca40:	4680      	movhi	r8, r0
 800ca42:	2303      	movs	r3, #3
 800ca44:	6123      	str	r3, [r4, #16]
 800ca46:	f022 0204 	bic.w	r2, r2, #4
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	9700      	str	r7, [sp, #0]
 800ca52:	4633      	mov	r3, r6
 800ca54:	aa09      	add	r2, sp, #36	; 0x24
 800ca56:	4621      	mov	r1, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f000 f9d3 	bl	800ce04 <_printf_common>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	f040 808a 	bne.w	800cb78 <_printf_float+0x1b0>
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295
 800ca68:	b00b      	add	sp, #44	; 0x2c
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca76:	d709      	bvc.n	800ca8c <_printf_float+0xc4>
 800ca78:	ee10 3a90 	vmov	r3, s1
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bfbc      	itt	lt
 800ca80:	232d      	movlt	r3, #45	; 0x2d
 800ca82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca86:	487e      	ldr	r0, [pc, #504]	; (800cc80 <_printf_float+0x2b8>)
 800ca88:	4b7e      	ldr	r3, [pc, #504]	; (800cc84 <_printf_float+0x2bc>)
 800ca8a:	e7d5      	b.n	800ca38 <_printf_float+0x70>
 800ca8c:	6863      	ldr	r3, [r4, #4]
 800ca8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ca92:	9104      	str	r1, [sp, #16]
 800ca94:	1c59      	adds	r1, r3, #1
 800ca96:	d13c      	bne.n	800cb12 <_printf_float+0x14a>
 800ca98:	2306      	movs	r3, #6
 800ca9a:	6063      	str	r3, [r4, #4]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9303      	str	r3, [sp, #12]
 800caa0:	ab08      	add	r3, sp, #32
 800caa2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800caa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800caaa:	ab07      	add	r3, sp, #28
 800caac:	6861      	ldr	r1, [r4, #4]
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	6022      	str	r2, [r4, #0]
 800cab2:	f10d 031b 	add.w	r3, sp, #27
 800cab6:	4628      	mov	r0, r5
 800cab8:	f7ff fef4 	bl	800c8a4 <__cvt>
 800cabc:	9b04      	ldr	r3, [sp, #16]
 800cabe:	9907      	ldr	r1, [sp, #28]
 800cac0:	2b47      	cmp	r3, #71	; 0x47
 800cac2:	4680      	mov	r8, r0
 800cac4:	d108      	bne.n	800cad8 <_printf_float+0x110>
 800cac6:	1cc8      	adds	r0, r1, #3
 800cac8:	db02      	blt.n	800cad0 <_printf_float+0x108>
 800caca:	6863      	ldr	r3, [r4, #4]
 800cacc:	4299      	cmp	r1, r3
 800cace:	dd41      	ble.n	800cb54 <_printf_float+0x18c>
 800cad0:	f1a9 0902 	sub.w	r9, r9, #2
 800cad4:	fa5f f989 	uxtb.w	r9, r9
 800cad8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cadc:	d820      	bhi.n	800cb20 <_printf_float+0x158>
 800cade:	3901      	subs	r1, #1
 800cae0:	464a      	mov	r2, r9
 800cae2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cae6:	9107      	str	r1, [sp, #28]
 800cae8:	f7ff ff2e 	bl	800c948 <__exponent>
 800caec:	9a08      	ldr	r2, [sp, #32]
 800caee:	9004      	str	r0, [sp, #16]
 800caf0:	1813      	adds	r3, r2, r0
 800caf2:	2a01      	cmp	r2, #1
 800caf4:	6123      	str	r3, [r4, #16]
 800caf6:	dc02      	bgt.n	800cafe <_printf_float+0x136>
 800caf8:	6822      	ldr	r2, [r4, #0]
 800cafa:	07d2      	lsls	r2, r2, #31
 800cafc:	d501      	bpl.n	800cb02 <_printf_float+0x13a>
 800cafe:	3301      	adds	r3, #1
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0a2      	beq.n	800ca50 <_printf_float+0x88>
 800cb0a:	232d      	movs	r3, #45	; 0x2d
 800cb0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb10:	e79e      	b.n	800ca50 <_printf_float+0x88>
 800cb12:	9904      	ldr	r1, [sp, #16]
 800cb14:	2947      	cmp	r1, #71	; 0x47
 800cb16:	d1c1      	bne.n	800ca9c <_printf_float+0xd4>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1bf      	bne.n	800ca9c <_printf_float+0xd4>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e7bc      	b.n	800ca9a <_printf_float+0xd2>
 800cb20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cb24:	d118      	bne.n	800cb58 <_printf_float+0x190>
 800cb26:	2900      	cmp	r1, #0
 800cb28:	6863      	ldr	r3, [r4, #4]
 800cb2a:	dd0b      	ble.n	800cb44 <_printf_float+0x17c>
 800cb2c:	6121      	str	r1, [r4, #16]
 800cb2e:	b913      	cbnz	r3, 800cb36 <_printf_float+0x16e>
 800cb30:	6822      	ldr	r2, [r4, #0]
 800cb32:	07d0      	lsls	r0, r2, #31
 800cb34:	d502      	bpl.n	800cb3c <_printf_float+0x174>
 800cb36:	3301      	adds	r3, #1
 800cb38:	440b      	add	r3, r1
 800cb3a:	6123      	str	r3, [r4, #16]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb40:	9304      	str	r3, [sp, #16]
 800cb42:	e7de      	b.n	800cb02 <_printf_float+0x13a>
 800cb44:	b913      	cbnz	r3, 800cb4c <_printf_float+0x184>
 800cb46:	6822      	ldr	r2, [r4, #0]
 800cb48:	07d2      	lsls	r2, r2, #31
 800cb4a:	d501      	bpl.n	800cb50 <_printf_float+0x188>
 800cb4c:	3302      	adds	r3, #2
 800cb4e:	e7f4      	b.n	800cb3a <_printf_float+0x172>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e7f2      	b.n	800cb3a <_printf_float+0x172>
 800cb54:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cb58:	9b08      	ldr	r3, [sp, #32]
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	db05      	blt.n	800cb6a <_printf_float+0x1a2>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	6121      	str	r1, [r4, #16]
 800cb62:	07d8      	lsls	r0, r3, #31
 800cb64:	d5ea      	bpl.n	800cb3c <_printf_float+0x174>
 800cb66:	1c4b      	adds	r3, r1, #1
 800cb68:	e7e7      	b.n	800cb3a <_printf_float+0x172>
 800cb6a:	2900      	cmp	r1, #0
 800cb6c:	bfd4      	ite	le
 800cb6e:	f1c1 0202 	rsble	r2, r1, #2
 800cb72:	2201      	movgt	r2, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	e7e0      	b.n	800cb3a <_printf_float+0x172>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	055a      	lsls	r2, r3, #21
 800cb7c:	d407      	bmi.n	800cb8e <_printf_float+0x1c6>
 800cb7e:	6923      	ldr	r3, [r4, #16]
 800cb80:	4642      	mov	r2, r8
 800cb82:	4631      	mov	r1, r6
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b8      	blx	r7
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d12a      	bne.n	800cbe2 <_printf_float+0x21a>
 800cb8c:	e76a      	b.n	800ca64 <_printf_float+0x9c>
 800cb8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb92:	f240 80e2 	bls.w	800cd5a <_printf_float+0x392>
 800cb96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cb9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba2:	d133      	bne.n	800cc0c <_printf_float+0x244>
 800cba4:	4a38      	ldr	r2, [pc, #224]	; (800cc88 <_printf_float+0x2c0>)
 800cba6:	2301      	movs	r3, #1
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f af58 	beq.w	800ca64 <_printf_float+0x9c>
 800cbb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	db02      	blt.n	800cbc2 <_printf_float+0x1fa>
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	07d8      	lsls	r0, r3, #31
 800cbc0:	d50f      	bpl.n	800cbe2 <_printf_float+0x21a>
 800cbc2:	4653      	mov	r3, sl
 800cbc4:	465a      	mov	r2, fp
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b8      	blx	r7
 800cbcc:	3001      	adds	r0, #1
 800cbce:	f43f af49 	beq.w	800ca64 <_printf_float+0x9c>
 800cbd2:	f04f 0800 	mov.w	r8, #0
 800cbd6:	f104 091a 	add.w	r9, r4, #26
 800cbda:	9b08      	ldr	r3, [sp, #32]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	4543      	cmp	r3, r8
 800cbe0:	dc09      	bgt.n	800cbf6 <_printf_float+0x22e>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	079b      	lsls	r3, r3, #30
 800cbe6:	f100 8108 	bmi.w	800cdfa <_printf_float+0x432>
 800cbea:	68e0      	ldr	r0, [r4, #12]
 800cbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbee:	4298      	cmp	r0, r3
 800cbf0:	bfb8      	it	lt
 800cbf2:	4618      	movlt	r0, r3
 800cbf4:	e738      	b.n	800ca68 <_printf_float+0xa0>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	464a      	mov	r2, r9
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b8      	blx	r7
 800cc00:	3001      	adds	r0, #1
 800cc02:	f43f af2f 	beq.w	800ca64 <_printf_float+0x9c>
 800cc06:	f108 0801 	add.w	r8, r8, #1
 800cc0a:	e7e6      	b.n	800cbda <_printf_float+0x212>
 800cc0c:	9b07      	ldr	r3, [sp, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	dc3c      	bgt.n	800cc8c <_printf_float+0x2c4>
 800cc12:	4a1d      	ldr	r2, [pc, #116]	; (800cc88 <_printf_float+0x2c0>)
 800cc14:	2301      	movs	r3, #1
 800cc16:	4631      	mov	r1, r6
 800cc18:	4628      	mov	r0, r5
 800cc1a:	47b8      	blx	r7
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	f43f af21 	beq.w	800ca64 <_printf_float+0x9c>
 800cc22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	d102      	bne.n	800cc30 <_printf_float+0x268>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	07d9      	lsls	r1, r3, #31
 800cc2e:	d5d8      	bpl.n	800cbe2 <_printf_float+0x21a>
 800cc30:	4653      	mov	r3, sl
 800cc32:	465a      	mov	r2, fp
 800cc34:	4631      	mov	r1, r6
 800cc36:	4628      	mov	r0, r5
 800cc38:	47b8      	blx	r7
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f43f af12 	beq.w	800ca64 <_printf_float+0x9c>
 800cc40:	f04f 0900 	mov.w	r9, #0
 800cc44:	f104 0a1a 	add.w	sl, r4, #26
 800cc48:	9b07      	ldr	r3, [sp, #28]
 800cc4a:	425b      	negs	r3, r3
 800cc4c:	454b      	cmp	r3, r9
 800cc4e:	dc01      	bgt.n	800cc54 <_printf_float+0x28c>
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	e795      	b.n	800cb80 <_printf_float+0x1b8>
 800cc54:	2301      	movs	r3, #1
 800cc56:	4652      	mov	r2, sl
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f af00 	beq.w	800ca64 <_printf_float+0x9c>
 800cc64:	f109 0901 	add.w	r9, r9, #1
 800cc68:	e7ee      	b.n	800cc48 <_printf_float+0x280>
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w
 800cc70:	ffffffff 	.word	0xffffffff
 800cc74:	7fefffff 	.word	0x7fefffff
 800cc78:	0800f16c 	.word	0x0800f16c
 800cc7c:	0800f170 	.word	0x0800f170
 800cc80:	0800f178 	.word	0x0800f178
 800cc84:	0800f174 	.word	0x0800f174
 800cc88:	0800f17c 	.word	0x0800f17c
 800cc8c:	9a08      	ldr	r2, [sp, #32]
 800cc8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc90:	429a      	cmp	r2, r3
 800cc92:	bfa8      	it	ge
 800cc94:	461a      	movge	r2, r3
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	4691      	mov	r9, r2
 800cc9a:	dc38      	bgt.n	800cd0e <_printf_float+0x346>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9305      	str	r3, [sp, #20]
 800cca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cca4:	f104 021a 	add.w	r2, r4, #26
 800cca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ccaa:	9905      	ldr	r1, [sp, #20]
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	eba3 0309 	sub.w	r3, r3, r9
 800ccb2:	428b      	cmp	r3, r1
 800ccb4:	dc33      	bgt.n	800cd1e <_printf_float+0x356>
 800ccb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	db3c      	blt.n	800cd38 <_printf_float+0x370>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	07da      	lsls	r2, r3, #31
 800ccc2:	d439      	bmi.n	800cd38 <_printf_float+0x370>
 800ccc4:	9a08      	ldr	r2, [sp, #32]
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	9907      	ldr	r1, [sp, #28]
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	eba2 0901 	sub.w	r9, r2, r1
 800ccd0:	4599      	cmp	r9, r3
 800ccd2:	bfa8      	it	ge
 800ccd4:	4699      	movge	r9, r3
 800ccd6:	f1b9 0f00 	cmp.w	r9, #0
 800ccda:	dc35      	bgt.n	800cd48 <_printf_float+0x380>
 800ccdc:	f04f 0800 	mov.w	r8, #0
 800cce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cce4:	f104 0a1a 	add.w	sl, r4, #26
 800cce8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	eba3 0309 	sub.w	r3, r3, r9
 800ccf2:	4543      	cmp	r3, r8
 800ccf4:	f77f af75 	ble.w	800cbe2 <_printf_float+0x21a>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4652      	mov	r2, sl
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f aeae 	beq.w	800ca64 <_printf_float+0x9c>
 800cd08:	f108 0801 	add.w	r8, r8, #1
 800cd0c:	e7ec      	b.n	800cce8 <_printf_float+0x320>
 800cd0e:	4613      	mov	r3, r2
 800cd10:	4631      	mov	r1, r6
 800cd12:	4642      	mov	r2, r8
 800cd14:	4628      	mov	r0, r5
 800cd16:	47b8      	blx	r7
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d1bf      	bne.n	800cc9c <_printf_float+0x2d4>
 800cd1c:	e6a2      	b.n	800ca64 <_printf_float+0x9c>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	4631      	mov	r1, r6
 800cd22:	4628      	mov	r0, r5
 800cd24:	9204      	str	r2, [sp, #16]
 800cd26:	47b8      	blx	r7
 800cd28:	3001      	adds	r0, #1
 800cd2a:	f43f ae9b 	beq.w	800ca64 <_printf_float+0x9c>
 800cd2e:	9b05      	ldr	r3, [sp, #20]
 800cd30:	9a04      	ldr	r2, [sp, #16]
 800cd32:	3301      	adds	r3, #1
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	e7b7      	b.n	800cca8 <_printf_float+0x2e0>
 800cd38:	4653      	mov	r3, sl
 800cd3a:	465a      	mov	r2, fp
 800cd3c:	4631      	mov	r1, r6
 800cd3e:	4628      	mov	r0, r5
 800cd40:	47b8      	blx	r7
 800cd42:	3001      	adds	r0, #1
 800cd44:	d1be      	bne.n	800ccc4 <_printf_float+0x2fc>
 800cd46:	e68d      	b.n	800ca64 <_printf_float+0x9c>
 800cd48:	9a04      	ldr	r2, [sp, #16]
 800cd4a:	464b      	mov	r3, r9
 800cd4c:	4442      	add	r2, r8
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b8      	blx	r7
 800cd54:	3001      	adds	r0, #1
 800cd56:	d1c1      	bne.n	800ccdc <_printf_float+0x314>
 800cd58:	e684      	b.n	800ca64 <_printf_float+0x9c>
 800cd5a:	9a08      	ldr	r2, [sp, #32]
 800cd5c:	2a01      	cmp	r2, #1
 800cd5e:	dc01      	bgt.n	800cd64 <_printf_float+0x39c>
 800cd60:	07db      	lsls	r3, r3, #31
 800cd62:	d537      	bpl.n	800cdd4 <_printf_float+0x40c>
 800cd64:	2301      	movs	r3, #1
 800cd66:	4642      	mov	r2, r8
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	47b8      	blx	r7
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f43f ae78 	beq.w	800ca64 <_printf_float+0x9c>
 800cd74:	4653      	mov	r3, sl
 800cd76:	465a      	mov	r2, fp
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	47b8      	blx	r7
 800cd7e:	3001      	adds	r0, #1
 800cd80:	f43f ae70 	beq.w	800ca64 <_printf_float+0x9c>
 800cd84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cd88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd90:	d01b      	beq.n	800cdca <_printf_float+0x402>
 800cd92:	9b08      	ldr	r3, [sp, #32]
 800cd94:	f108 0201 	add.w	r2, r8, #1
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	d10e      	bne.n	800cdc2 <_printf_float+0x3fa>
 800cda4:	e65e      	b.n	800ca64 <_printf_float+0x9c>
 800cda6:	2301      	movs	r3, #1
 800cda8:	464a      	mov	r2, r9
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f ae57 	beq.w	800ca64 <_printf_float+0x9c>
 800cdb6:	f108 0801 	add.w	r8, r8, #1
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	4543      	cmp	r3, r8
 800cdc0:	dcf1      	bgt.n	800cda6 <_printf_float+0x3de>
 800cdc2:	9b04      	ldr	r3, [sp, #16]
 800cdc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdc8:	e6db      	b.n	800cb82 <_printf_float+0x1ba>
 800cdca:	f04f 0800 	mov.w	r8, #0
 800cdce:	f104 091a 	add.w	r9, r4, #26
 800cdd2:	e7f2      	b.n	800cdba <_printf_float+0x3f2>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	e7df      	b.n	800cd9a <_printf_float+0x3d2>
 800cdda:	2301      	movs	r3, #1
 800cddc:	464a      	mov	r2, r9
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b8      	blx	r7
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f ae3d 	beq.w	800ca64 <_printf_float+0x9c>
 800cdea:	f108 0801 	add.w	r8, r8, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	dcf0      	bgt.n	800cdda <_printf_float+0x412>
 800cdf8:	e6f7      	b.n	800cbea <_printf_float+0x222>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	f104 0919 	add.w	r9, r4, #25
 800ce02:	e7f4      	b.n	800cdee <_printf_float+0x426>

0800ce04 <_printf_common>:
 800ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	4616      	mov	r6, r2
 800ce0a:	4699      	mov	r9, r3
 800ce0c:	688a      	ldr	r2, [r1, #8]
 800ce0e:	690b      	ldr	r3, [r1, #16]
 800ce10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bfb8      	it	lt
 800ce18:	4613      	movlt	r3, r2
 800ce1a:	6033      	str	r3, [r6, #0]
 800ce1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce20:	4607      	mov	r7, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	b10a      	cbz	r2, 800ce2a <_printf_common+0x26>
 800ce26:	3301      	adds	r3, #1
 800ce28:	6033      	str	r3, [r6, #0]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	0699      	lsls	r1, r3, #26
 800ce2e:	bf42      	ittt	mi
 800ce30:	6833      	ldrmi	r3, [r6, #0]
 800ce32:	3302      	addmi	r3, #2
 800ce34:	6033      	strmi	r3, [r6, #0]
 800ce36:	6825      	ldr	r5, [r4, #0]
 800ce38:	f015 0506 	ands.w	r5, r5, #6
 800ce3c:	d106      	bne.n	800ce4c <_printf_common+0x48>
 800ce3e:	f104 0a19 	add.w	sl, r4, #25
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	6832      	ldr	r2, [r6, #0]
 800ce46:	1a9b      	subs	r3, r3, r2
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	dc26      	bgt.n	800ce9a <_printf_common+0x96>
 800ce4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce50:	1e13      	subs	r3, r2, #0
 800ce52:	6822      	ldr	r2, [r4, #0]
 800ce54:	bf18      	it	ne
 800ce56:	2301      	movne	r3, #1
 800ce58:	0692      	lsls	r2, r2, #26
 800ce5a:	d42b      	bmi.n	800ceb4 <_printf_common+0xb0>
 800ce5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce60:	4649      	mov	r1, r9
 800ce62:	4638      	mov	r0, r7
 800ce64:	47c0      	blx	r8
 800ce66:	3001      	adds	r0, #1
 800ce68:	d01e      	beq.n	800cea8 <_printf_common+0xa4>
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	68e5      	ldr	r5, [r4, #12]
 800ce6e:	6832      	ldr	r2, [r6, #0]
 800ce70:	f003 0306 	and.w	r3, r3, #6
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	bf08      	it	eq
 800ce78:	1aad      	subeq	r5, r5, r2
 800ce7a:	68a3      	ldr	r3, [r4, #8]
 800ce7c:	6922      	ldr	r2, [r4, #16]
 800ce7e:	bf0c      	ite	eq
 800ce80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce84:	2500      	movne	r5, #0
 800ce86:	4293      	cmp	r3, r2
 800ce88:	bfc4      	itt	gt
 800ce8a:	1a9b      	subgt	r3, r3, r2
 800ce8c:	18ed      	addgt	r5, r5, r3
 800ce8e:	2600      	movs	r6, #0
 800ce90:	341a      	adds	r4, #26
 800ce92:	42b5      	cmp	r5, r6
 800ce94:	d11a      	bne.n	800cecc <_printf_common+0xc8>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e008      	b.n	800ceac <_printf_common+0xa8>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4652      	mov	r2, sl
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4638      	mov	r0, r7
 800cea2:	47c0      	blx	r8
 800cea4:	3001      	adds	r0, #1
 800cea6:	d103      	bne.n	800ceb0 <_printf_common+0xac>
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	e7c6      	b.n	800ce42 <_printf_common+0x3e>
 800ceb4:	18e1      	adds	r1, r4, r3
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	2030      	movs	r0, #48	; 0x30
 800ceba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cebe:	4422      	add	r2, r4
 800cec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cec8:	3302      	adds	r3, #2
 800ceca:	e7c7      	b.n	800ce5c <_printf_common+0x58>
 800cecc:	2301      	movs	r3, #1
 800cece:	4622      	mov	r2, r4
 800ced0:	4649      	mov	r1, r9
 800ced2:	4638      	mov	r0, r7
 800ced4:	47c0      	blx	r8
 800ced6:	3001      	adds	r0, #1
 800ced8:	d0e6      	beq.n	800cea8 <_printf_common+0xa4>
 800ceda:	3601      	adds	r6, #1
 800cedc:	e7d9      	b.n	800ce92 <_printf_common+0x8e>
	...

0800cee0 <_printf_i>:
 800cee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	460c      	mov	r4, r1
 800cee6:	4691      	mov	r9, r2
 800cee8:	7e27      	ldrb	r7, [r4, #24]
 800ceea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ceec:	2f78      	cmp	r7, #120	; 0x78
 800ceee:	4680      	mov	r8, r0
 800cef0:	469a      	mov	sl, r3
 800cef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cef6:	d807      	bhi.n	800cf08 <_printf_i+0x28>
 800cef8:	2f62      	cmp	r7, #98	; 0x62
 800cefa:	d80a      	bhi.n	800cf12 <_printf_i+0x32>
 800cefc:	2f00      	cmp	r7, #0
 800cefe:	f000 80d8 	beq.w	800d0b2 <_printf_i+0x1d2>
 800cf02:	2f58      	cmp	r7, #88	; 0x58
 800cf04:	f000 80a3 	beq.w	800d04e <_printf_i+0x16e>
 800cf08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf10:	e03a      	b.n	800cf88 <_printf_i+0xa8>
 800cf12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf16:	2b15      	cmp	r3, #21
 800cf18:	d8f6      	bhi.n	800cf08 <_printf_i+0x28>
 800cf1a:	a001      	add	r0, pc, #4	; (adr r0, 800cf20 <_printf_i+0x40>)
 800cf1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cf20:	0800cf79 	.word	0x0800cf79
 800cf24:	0800cf8d 	.word	0x0800cf8d
 800cf28:	0800cf09 	.word	0x0800cf09
 800cf2c:	0800cf09 	.word	0x0800cf09
 800cf30:	0800cf09 	.word	0x0800cf09
 800cf34:	0800cf09 	.word	0x0800cf09
 800cf38:	0800cf8d 	.word	0x0800cf8d
 800cf3c:	0800cf09 	.word	0x0800cf09
 800cf40:	0800cf09 	.word	0x0800cf09
 800cf44:	0800cf09 	.word	0x0800cf09
 800cf48:	0800cf09 	.word	0x0800cf09
 800cf4c:	0800d099 	.word	0x0800d099
 800cf50:	0800cfbd 	.word	0x0800cfbd
 800cf54:	0800d07b 	.word	0x0800d07b
 800cf58:	0800cf09 	.word	0x0800cf09
 800cf5c:	0800cf09 	.word	0x0800cf09
 800cf60:	0800d0bb 	.word	0x0800d0bb
 800cf64:	0800cf09 	.word	0x0800cf09
 800cf68:	0800cfbd 	.word	0x0800cfbd
 800cf6c:	0800cf09 	.word	0x0800cf09
 800cf70:	0800cf09 	.word	0x0800cf09
 800cf74:	0800d083 	.word	0x0800d083
 800cf78:	680b      	ldr	r3, [r1, #0]
 800cf7a:	1d1a      	adds	r2, r3, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	600a      	str	r2, [r1, #0]
 800cf80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e0a3      	b.n	800d0d4 <_printf_i+0x1f4>
 800cf8c:	6825      	ldr	r5, [r4, #0]
 800cf8e:	6808      	ldr	r0, [r1, #0]
 800cf90:	062e      	lsls	r6, r5, #24
 800cf92:	f100 0304 	add.w	r3, r0, #4
 800cf96:	d50a      	bpl.n	800cfae <_printf_i+0xce>
 800cf98:	6805      	ldr	r5, [r0, #0]
 800cf9a:	600b      	str	r3, [r1, #0]
 800cf9c:	2d00      	cmp	r5, #0
 800cf9e:	da03      	bge.n	800cfa8 <_printf_i+0xc8>
 800cfa0:	232d      	movs	r3, #45	; 0x2d
 800cfa2:	426d      	negs	r5, r5
 800cfa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa8:	485e      	ldr	r0, [pc, #376]	; (800d124 <_printf_i+0x244>)
 800cfaa:	230a      	movs	r3, #10
 800cfac:	e019      	b.n	800cfe2 <_printf_i+0x102>
 800cfae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cfb2:	6805      	ldr	r5, [r0, #0]
 800cfb4:	600b      	str	r3, [r1, #0]
 800cfb6:	bf18      	it	ne
 800cfb8:	b22d      	sxthne	r5, r5
 800cfba:	e7ef      	b.n	800cf9c <_printf_i+0xbc>
 800cfbc:	680b      	ldr	r3, [r1, #0]
 800cfbe:	6825      	ldr	r5, [r4, #0]
 800cfc0:	1d18      	adds	r0, r3, #4
 800cfc2:	6008      	str	r0, [r1, #0]
 800cfc4:	0628      	lsls	r0, r5, #24
 800cfc6:	d501      	bpl.n	800cfcc <_printf_i+0xec>
 800cfc8:	681d      	ldr	r5, [r3, #0]
 800cfca:	e002      	b.n	800cfd2 <_printf_i+0xf2>
 800cfcc:	0669      	lsls	r1, r5, #25
 800cfce:	d5fb      	bpl.n	800cfc8 <_printf_i+0xe8>
 800cfd0:	881d      	ldrh	r5, [r3, #0]
 800cfd2:	4854      	ldr	r0, [pc, #336]	; (800d124 <_printf_i+0x244>)
 800cfd4:	2f6f      	cmp	r7, #111	; 0x6f
 800cfd6:	bf0c      	ite	eq
 800cfd8:	2308      	moveq	r3, #8
 800cfda:	230a      	movne	r3, #10
 800cfdc:	2100      	movs	r1, #0
 800cfde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfe2:	6866      	ldr	r6, [r4, #4]
 800cfe4:	60a6      	str	r6, [r4, #8]
 800cfe6:	2e00      	cmp	r6, #0
 800cfe8:	bfa2      	ittt	ge
 800cfea:	6821      	ldrge	r1, [r4, #0]
 800cfec:	f021 0104 	bicge.w	r1, r1, #4
 800cff0:	6021      	strge	r1, [r4, #0]
 800cff2:	b90d      	cbnz	r5, 800cff8 <_printf_i+0x118>
 800cff4:	2e00      	cmp	r6, #0
 800cff6:	d04d      	beq.n	800d094 <_printf_i+0x1b4>
 800cff8:	4616      	mov	r6, r2
 800cffa:	fbb5 f1f3 	udiv	r1, r5, r3
 800cffe:	fb03 5711 	mls	r7, r3, r1, r5
 800d002:	5dc7      	ldrb	r7, [r0, r7]
 800d004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d008:	462f      	mov	r7, r5
 800d00a:	42bb      	cmp	r3, r7
 800d00c:	460d      	mov	r5, r1
 800d00e:	d9f4      	bls.n	800cffa <_printf_i+0x11a>
 800d010:	2b08      	cmp	r3, #8
 800d012:	d10b      	bne.n	800d02c <_printf_i+0x14c>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	07df      	lsls	r7, r3, #31
 800d018:	d508      	bpl.n	800d02c <_printf_i+0x14c>
 800d01a:	6923      	ldr	r3, [r4, #16]
 800d01c:	6861      	ldr	r1, [r4, #4]
 800d01e:	4299      	cmp	r1, r3
 800d020:	bfde      	ittt	le
 800d022:	2330      	movle	r3, #48	; 0x30
 800d024:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d02c:	1b92      	subs	r2, r2, r6
 800d02e:	6122      	str	r2, [r4, #16]
 800d030:	f8cd a000 	str.w	sl, [sp]
 800d034:	464b      	mov	r3, r9
 800d036:	aa03      	add	r2, sp, #12
 800d038:	4621      	mov	r1, r4
 800d03a:	4640      	mov	r0, r8
 800d03c:	f7ff fee2 	bl	800ce04 <_printf_common>
 800d040:	3001      	adds	r0, #1
 800d042:	d14c      	bne.n	800d0de <_printf_i+0x1fe>
 800d044:	f04f 30ff 	mov.w	r0, #4294967295
 800d048:	b004      	add	sp, #16
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	4835      	ldr	r0, [pc, #212]	; (800d124 <_printf_i+0x244>)
 800d050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	680e      	ldr	r6, [r1, #0]
 800d058:	061f      	lsls	r7, r3, #24
 800d05a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d05e:	600e      	str	r6, [r1, #0]
 800d060:	d514      	bpl.n	800d08c <_printf_i+0x1ac>
 800d062:	07d9      	lsls	r1, r3, #31
 800d064:	bf44      	itt	mi
 800d066:	f043 0320 	orrmi.w	r3, r3, #32
 800d06a:	6023      	strmi	r3, [r4, #0]
 800d06c:	b91d      	cbnz	r5, 800d076 <_printf_i+0x196>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	f023 0320 	bic.w	r3, r3, #32
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	2310      	movs	r3, #16
 800d078:	e7b0      	b.n	800cfdc <_printf_i+0xfc>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	f043 0320 	orr.w	r3, r3, #32
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	2378      	movs	r3, #120	; 0x78
 800d084:	4828      	ldr	r0, [pc, #160]	; (800d128 <_printf_i+0x248>)
 800d086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d08a:	e7e3      	b.n	800d054 <_printf_i+0x174>
 800d08c:	065e      	lsls	r6, r3, #25
 800d08e:	bf48      	it	mi
 800d090:	b2ad      	uxthmi	r5, r5
 800d092:	e7e6      	b.n	800d062 <_printf_i+0x182>
 800d094:	4616      	mov	r6, r2
 800d096:	e7bb      	b.n	800d010 <_printf_i+0x130>
 800d098:	680b      	ldr	r3, [r1, #0]
 800d09a:	6826      	ldr	r6, [r4, #0]
 800d09c:	6960      	ldr	r0, [r4, #20]
 800d09e:	1d1d      	adds	r5, r3, #4
 800d0a0:	600d      	str	r5, [r1, #0]
 800d0a2:	0635      	lsls	r5, r6, #24
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	d501      	bpl.n	800d0ac <_printf_i+0x1cc>
 800d0a8:	6018      	str	r0, [r3, #0]
 800d0aa:	e002      	b.n	800d0b2 <_printf_i+0x1d2>
 800d0ac:	0671      	lsls	r1, r6, #25
 800d0ae:	d5fb      	bpl.n	800d0a8 <_printf_i+0x1c8>
 800d0b0:	8018      	strh	r0, [r3, #0]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6123      	str	r3, [r4, #16]
 800d0b6:	4616      	mov	r6, r2
 800d0b8:	e7ba      	b.n	800d030 <_printf_i+0x150>
 800d0ba:	680b      	ldr	r3, [r1, #0]
 800d0bc:	1d1a      	adds	r2, r3, #4
 800d0be:	600a      	str	r2, [r1, #0]
 800d0c0:	681e      	ldr	r6, [r3, #0]
 800d0c2:	6862      	ldr	r2, [r4, #4]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f7f3 f92a 	bl	8000320 <memchr>
 800d0cc:	b108      	cbz	r0, 800d0d2 <_printf_i+0x1f2>
 800d0ce:	1b80      	subs	r0, r0, r6
 800d0d0:	6060      	str	r0, [r4, #4]
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	6123      	str	r3, [r4, #16]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0dc:	e7a8      	b.n	800d030 <_printf_i+0x150>
 800d0de:	6923      	ldr	r3, [r4, #16]
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	47d0      	blx	sl
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d0ab      	beq.n	800d044 <_printf_i+0x164>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	079b      	lsls	r3, r3, #30
 800d0f0:	d413      	bmi.n	800d11a <_printf_i+0x23a>
 800d0f2:	68e0      	ldr	r0, [r4, #12]
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	4298      	cmp	r0, r3
 800d0f8:	bfb8      	it	lt
 800d0fa:	4618      	movlt	r0, r3
 800d0fc:	e7a4      	b.n	800d048 <_printf_i+0x168>
 800d0fe:	2301      	movs	r3, #1
 800d100:	4632      	mov	r2, r6
 800d102:	4649      	mov	r1, r9
 800d104:	4640      	mov	r0, r8
 800d106:	47d0      	blx	sl
 800d108:	3001      	adds	r0, #1
 800d10a:	d09b      	beq.n	800d044 <_printf_i+0x164>
 800d10c:	3501      	adds	r5, #1
 800d10e:	68e3      	ldr	r3, [r4, #12]
 800d110:	9903      	ldr	r1, [sp, #12]
 800d112:	1a5b      	subs	r3, r3, r1
 800d114:	42ab      	cmp	r3, r5
 800d116:	dcf2      	bgt.n	800d0fe <_printf_i+0x21e>
 800d118:	e7eb      	b.n	800d0f2 <_printf_i+0x212>
 800d11a:	2500      	movs	r5, #0
 800d11c:	f104 0619 	add.w	r6, r4, #25
 800d120:	e7f5      	b.n	800d10e <_printf_i+0x22e>
 800d122:	bf00      	nop
 800d124:	0800f17e 	.word	0x0800f17e
 800d128:	0800f18f 	.word	0x0800f18f

0800d12c <quorem>:
 800d12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	6903      	ldr	r3, [r0, #16]
 800d132:	690c      	ldr	r4, [r1, #16]
 800d134:	42a3      	cmp	r3, r4
 800d136:	4607      	mov	r7, r0
 800d138:	f2c0 8081 	blt.w	800d23e <quorem+0x112>
 800d13c:	3c01      	subs	r4, #1
 800d13e:	f101 0814 	add.w	r8, r1, #20
 800d142:	f100 0514 	add.w	r5, r0, #20
 800d146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d154:	3301      	adds	r3, #1
 800d156:	429a      	cmp	r2, r3
 800d158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d15c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d160:	fbb2 f6f3 	udiv	r6, r2, r3
 800d164:	d331      	bcc.n	800d1ca <quorem+0x9e>
 800d166:	f04f 0e00 	mov.w	lr, #0
 800d16a:	4640      	mov	r0, r8
 800d16c:	46ac      	mov	ip, r5
 800d16e:	46f2      	mov	sl, lr
 800d170:	f850 2b04 	ldr.w	r2, [r0], #4
 800d174:	b293      	uxth	r3, r2
 800d176:	fb06 e303 	mla	r3, r6, r3, lr
 800d17a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d17e:	b29b      	uxth	r3, r3
 800d180:	ebaa 0303 	sub.w	r3, sl, r3
 800d184:	0c12      	lsrs	r2, r2, #16
 800d186:	f8dc a000 	ldr.w	sl, [ip]
 800d18a:	fb06 e202 	mla	r2, r6, r2, lr
 800d18e:	fa13 f38a 	uxtah	r3, r3, sl
 800d192:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d196:	fa1f fa82 	uxth.w	sl, r2
 800d19a:	f8dc 2000 	ldr.w	r2, [ip]
 800d19e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d1a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ac:	4581      	cmp	r9, r0
 800d1ae:	f84c 3b04 	str.w	r3, [ip], #4
 800d1b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1b6:	d2db      	bcs.n	800d170 <quorem+0x44>
 800d1b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1bc:	b92b      	cbnz	r3, 800d1ca <quorem+0x9e>
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	3b04      	subs	r3, #4
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	d32e      	bcc.n	800d226 <quorem+0xfa>
 800d1c8:	613c      	str	r4, [r7, #16]
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f001 f848 	bl	800e260 <__mcmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	db24      	blt.n	800d21e <quorem+0xf2>
 800d1d4:	3601      	adds	r6, #1
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f04f 0c00 	mov.w	ip, #0
 800d1dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1e0:	f8d0 e000 	ldr.w	lr, [r0]
 800d1e4:	b293      	uxth	r3, r2
 800d1e6:	ebac 0303 	sub.w	r3, ip, r3
 800d1ea:	0c12      	lsrs	r2, r2, #16
 800d1ec:	fa13 f38e 	uxtah	r3, r3, lr
 800d1f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d1f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fe:	45c1      	cmp	r9, r8
 800d200:	f840 3b04 	str.w	r3, [r0], #4
 800d204:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d208:	d2e8      	bcs.n	800d1dc <quorem+0xb0>
 800d20a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d20e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d212:	b922      	cbnz	r2, 800d21e <quorem+0xf2>
 800d214:	3b04      	subs	r3, #4
 800d216:	429d      	cmp	r5, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	d30a      	bcc.n	800d232 <quorem+0x106>
 800d21c:	613c      	str	r4, [r7, #16]
 800d21e:	4630      	mov	r0, r6
 800d220:	b003      	add	sp, #12
 800d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d226:	6812      	ldr	r2, [r2, #0]
 800d228:	3b04      	subs	r3, #4
 800d22a:	2a00      	cmp	r2, #0
 800d22c:	d1cc      	bne.n	800d1c8 <quorem+0x9c>
 800d22e:	3c01      	subs	r4, #1
 800d230:	e7c7      	b.n	800d1c2 <quorem+0x96>
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	3b04      	subs	r3, #4
 800d236:	2a00      	cmp	r2, #0
 800d238:	d1f0      	bne.n	800d21c <quorem+0xf0>
 800d23a:	3c01      	subs	r4, #1
 800d23c:	e7eb      	b.n	800d216 <quorem+0xea>
 800d23e:	2000      	movs	r0, #0
 800d240:	e7ee      	b.n	800d220 <quorem+0xf4>
 800d242:	0000      	movs	r0, r0
 800d244:	0000      	movs	r0, r0
	...

0800d248 <_dtoa_r>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	ec59 8b10 	vmov	r8, r9, d0
 800d250:	b095      	sub	sp, #84	; 0x54
 800d252:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d254:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d256:	9107      	str	r1, [sp, #28]
 800d258:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d25c:	4606      	mov	r6, r0
 800d25e:	9209      	str	r2, [sp, #36]	; 0x24
 800d260:	9310      	str	r3, [sp, #64]	; 0x40
 800d262:	b975      	cbnz	r5, 800d282 <_dtoa_r+0x3a>
 800d264:	2010      	movs	r0, #16
 800d266:	f000 fd75 	bl	800dd54 <malloc>
 800d26a:	4602      	mov	r2, r0
 800d26c:	6270      	str	r0, [r6, #36]	; 0x24
 800d26e:	b920      	cbnz	r0, 800d27a <_dtoa_r+0x32>
 800d270:	4bab      	ldr	r3, [pc, #684]	; (800d520 <_dtoa_r+0x2d8>)
 800d272:	21ea      	movs	r1, #234	; 0xea
 800d274:	48ab      	ldr	r0, [pc, #684]	; (800d524 <_dtoa_r+0x2dc>)
 800d276:	f001 f9bd 	bl	800e5f4 <__assert_func>
 800d27a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d27e:	6005      	str	r5, [r0, #0]
 800d280:	60c5      	str	r5, [r0, #12]
 800d282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d284:	6819      	ldr	r1, [r3, #0]
 800d286:	b151      	cbz	r1, 800d29e <_dtoa_r+0x56>
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	604a      	str	r2, [r1, #4]
 800d28c:	2301      	movs	r3, #1
 800d28e:	4093      	lsls	r3, r2
 800d290:	608b      	str	r3, [r1, #8]
 800d292:	4630      	mov	r0, r6
 800d294:	f000 fda6 	bl	800dde4 <_Bfree>
 800d298:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d29a:	2200      	movs	r2, #0
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f1b9 0300 	subs.w	r3, r9, #0
 800d2a2:	bfbb      	ittet	lt
 800d2a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2a8:	9303      	strlt	r3, [sp, #12]
 800d2aa:	2300      	movge	r3, #0
 800d2ac:	2201      	movlt	r2, #1
 800d2ae:	bfac      	ite	ge
 800d2b0:	6023      	strge	r3, [r4, #0]
 800d2b2:	6022      	strlt	r2, [r4, #0]
 800d2b4:	4b9c      	ldr	r3, [pc, #624]	; (800d528 <_dtoa_r+0x2e0>)
 800d2b6:	9c03      	ldr	r4, [sp, #12]
 800d2b8:	43a3      	bics	r3, r4
 800d2ba:	d11a      	bne.n	800d2f2 <_dtoa_r+0xaa>
 800d2bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2be:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d2c8:	ea53 0308 	orrs.w	r3, r3, r8
 800d2cc:	f000 8512 	beq.w	800dcf4 <_dtoa_r+0xaac>
 800d2d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2d2:	b953      	cbnz	r3, 800d2ea <_dtoa_r+0xa2>
 800d2d4:	4b95      	ldr	r3, [pc, #596]	; (800d52c <_dtoa_r+0x2e4>)
 800d2d6:	e01f      	b.n	800d318 <_dtoa_r+0xd0>
 800d2d8:	4b95      	ldr	r3, [pc, #596]	; (800d530 <_dtoa_r+0x2e8>)
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	9800      	ldr	r0, [sp, #0]
 800d2e4:	b015      	add	sp, #84	; 0x54
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	4b90      	ldr	r3, [pc, #576]	; (800d52c <_dtoa_r+0x2e4>)
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	3303      	adds	r3, #3
 800d2f0:	e7f5      	b.n	800d2de <_dtoa_r+0x96>
 800d2f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d302:	d10b      	bne.n	800d31c <_dtoa_r+0xd4>
 800d304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d306:	2301      	movs	r3, #1
 800d308:	6013      	str	r3, [r2, #0]
 800d30a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 84ee 	beq.w	800dcee <_dtoa_r+0xaa6>
 800d312:	4888      	ldr	r0, [pc, #544]	; (800d534 <_dtoa_r+0x2ec>)
 800d314:	6018      	str	r0, [r3, #0]
 800d316:	1e43      	subs	r3, r0, #1
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	e7e2      	b.n	800d2e2 <_dtoa_r+0x9a>
 800d31c:	a913      	add	r1, sp, #76	; 0x4c
 800d31e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d322:	aa12      	add	r2, sp, #72	; 0x48
 800d324:	4630      	mov	r0, r6
 800d326:	f001 f83f 	bl	800e3a8 <__d2b>
 800d32a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d32e:	4605      	mov	r5, r0
 800d330:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d332:	2900      	cmp	r1, #0
 800d334:	d047      	beq.n	800d3c6 <_dtoa_r+0x17e>
 800d336:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d338:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d33c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d340:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d344:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d348:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d34c:	2400      	movs	r4, #0
 800d34e:	ec43 2b16 	vmov	d6, r2, r3
 800d352:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d356:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d508 <_dtoa_r+0x2c0>
 800d35a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d35e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d510 <_dtoa_r+0x2c8>
 800d362:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d366:	eeb0 7b46 	vmov.f64	d7, d6
 800d36a:	ee06 1a90 	vmov	s13, r1
 800d36e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d372:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d518 <_dtoa_r+0x2d0>
 800d376:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d37a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d37e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	ee16 ba90 	vmov	fp, s13
 800d38a:	9411      	str	r4, [sp, #68]	; 0x44
 800d38c:	d508      	bpl.n	800d3a0 <_dtoa_r+0x158>
 800d38e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d392:	eeb4 6b47 	vcmp.f64	d6, d7
 800d396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39a:	bf18      	it	ne
 800d39c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d3a0:	f1bb 0f16 	cmp.w	fp, #22
 800d3a4:	d832      	bhi.n	800d40c <_dtoa_r+0x1c4>
 800d3a6:	4b64      	ldr	r3, [pc, #400]	; (800d538 <_dtoa_r+0x2f0>)
 800d3a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d3ac:	ed93 7b00 	vldr	d7, [r3]
 800d3b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d3b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3bc:	d501      	bpl.n	800d3c2 <_dtoa_r+0x17a>
 800d3be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e023      	b.n	800d40e <_dtoa_r+0x1c6>
 800d3c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d3c8:	4401      	add	r1, r0
 800d3ca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d3ce:	2b20      	cmp	r3, #32
 800d3d0:	bfc3      	ittte	gt
 800d3d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d3d6:	fa04 f303 	lslgt.w	r3, r4, r3
 800d3da:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d3de:	f1c3 0320 	rsble	r3, r3, #32
 800d3e2:	bfc6      	itte	gt
 800d3e4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d3e8:	ea43 0308 	orrgt.w	r3, r3, r8
 800d3ec:	fa08 f303 	lslle.w	r3, r8, r3
 800d3f0:	ee07 3a90 	vmov	s15, r3
 800d3f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d3f8:	3901      	subs	r1, #1
 800d3fa:	ed8d 7b00 	vstr	d7, [sp]
 800d3fe:	9c01      	ldr	r4, [sp, #4]
 800d400:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d404:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d408:	2401      	movs	r4, #1
 800d40a:	e7a0      	b.n	800d34e <_dtoa_r+0x106>
 800d40c:	2301      	movs	r3, #1
 800d40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d410:	1a43      	subs	r3, r0, r1
 800d412:	1e5a      	subs	r2, r3, #1
 800d414:	bf45      	ittet	mi
 800d416:	f1c3 0301 	rsbmi	r3, r3, #1
 800d41a:	9305      	strmi	r3, [sp, #20]
 800d41c:	2300      	movpl	r3, #0
 800d41e:	2300      	movmi	r3, #0
 800d420:	9206      	str	r2, [sp, #24]
 800d422:	bf54      	ite	pl
 800d424:	9305      	strpl	r3, [sp, #20]
 800d426:	9306      	strmi	r3, [sp, #24]
 800d428:	f1bb 0f00 	cmp.w	fp, #0
 800d42c:	db18      	blt.n	800d460 <_dtoa_r+0x218>
 800d42e:	9b06      	ldr	r3, [sp, #24]
 800d430:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d434:	445b      	add	r3, fp
 800d436:	9306      	str	r3, [sp, #24]
 800d438:	2300      	movs	r3, #0
 800d43a:	9a07      	ldr	r2, [sp, #28]
 800d43c:	2a09      	cmp	r2, #9
 800d43e:	d849      	bhi.n	800d4d4 <_dtoa_r+0x28c>
 800d440:	2a05      	cmp	r2, #5
 800d442:	bfc4      	itt	gt
 800d444:	3a04      	subgt	r2, #4
 800d446:	9207      	strgt	r2, [sp, #28]
 800d448:	9a07      	ldr	r2, [sp, #28]
 800d44a:	f1a2 0202 	sub.w	r2, r2, #2
 800d44e:	bfcc      	ite	gt
 800d450:	2400      	movgt	r4, #0
 800d452:	2401      	movle	r4, #1
 800d454:	2a03      	cmp	r2, #3
 800d456:	d848      	bhi.n	800d4ea <_dtoa_r+0x2a2>
 800d458:	e8df f002 	tbb	[pc, r2]
 800d45c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	2200      	movs	r2, #0
 800d464:	eba3 030b 	sub.w	r3, r3, fp
 800d468:	9305      	str	r3, [sp, #20]
 800d46a:	920e      	str	r2, [sp, #56]	; 0x38
 800d46c:	f1cb 0300 	rsb	r3, fp, #0
 800d470:	e7e3      	b.n	800d43a <_dtoa_r+0x1f2>
 800d472:	2200      	movs	r2, #0
 800d474:	9208      	str	r2, [sp, #32]
 800d476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d478:	2a00      	cmp	r2, #0
 800d47a:	dc39      	bgt.n	800d4f0 <_dtoa_r+0x2a8>
 800d47c:	f04f 0a01 	mov.w	sl, #1
 800d480:	46d1      	mov	r9, sl
 800d482:	4652      	mov	r2, sl
 800d484:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d488:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d48a:	2100      	movs	r1, #0
 800d48c:	6079      	str	r1, [r7, #4]
 800d48e:	2004      	movs	r0, #4
 800d490:	f100 0c14 	add.w	ip, r0, #20
 800d494:	4594      	cmp	ip, r2
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	d92f      	bls.n	800d4fa <_dtoa_r+0x2b2>
 800d49a:	4630      	mov	r0, r6
 800d49c:	930c      	str	r3, [sp, #48]	; 0x30
 800d49e:	f000 fc61 	bl	800dd64 <_Balloc>
 800d4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a4:	9000      	str	r0, [sp, #0]
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d149      	bne.n	800d540 <_dtoa_r+0x2f8>
 800d4ac:	4b23      	ldr	r3, [pc, #140]	; (800d53c <_dtoa_r+0x2f4>)
 800d4ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d4b2:	e6df      	b.n	800d274 <_dtoa_r+0x2c>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	e7dd      	b.n	800d474 <_dtoa_r+0x22c>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	9208      	str	r2, [sp, #32]
 800d4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4be:	eb0b 0a02 	add.w	sl, fp, r2
 800d4c2:	f10a 0901 	add.w	r9, sl, #1
 800d4c6:	464a      	mov	r2, r9
 800d4c8:	2a01      	cmp	r2, #1
 800d4ca:	bfb8      	it	lt
 800d4cc:	2201      	movlt	r2, #1
 800d4ce:	e7db      	b.n	800d488 <_dtoa_r+0x240>
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	e7f2      	b.n	800d4ba <_dtoa_r+0x272>
 800d4d4:	2401      	movs	r4, #1
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d4dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	46d1      	mov	r9, sl
 800d4e4:	2212      	movs	r2, #18
 800d4e6:	9109      	str	r1, [sp, #36]	; 0x24
 800d4e8:	e7ce      	b.n	800d488 <_dtoa_r+0x240>
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	9208      	str	r2, [sp, #32]
 800d4ee:	e7f5      	b.n	800d4dc <_dtoa_r+0x294>
 800d4f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d4f4:	46d1      	mov	r9, sl
 800d4f6:	4652      	mov	r2, sl
 800d4f8:	e7c6      	b.n	800d488 <_dtoa_r+0x240>
 800d4fa:	3101      	adds	r1, #1
 800d4fc:	6079      	str	r1, [r7, #4]
 800d4fe:	0040      	lsls	r0, r0, #1
 800d500:	e7c6      	b.n	800d490 <_dtoa_r+0x248>
 800d502:	bf00      	nop
 800d504:	f3af 8000 	nop.w
 800d508:	636f4361 	.word	0x636f4361
 800d50c:	3fd287a7 	.word	0x3fd287a7
 800d510:	8b60c8b3 	.word	0x8b60c8b3
 800d514:	3fc68a28 	.word	0x3fc68a28
 800d518:	509f79fb 	.word	0x509f79fb
 800d51c:	3fd34413 	.word	0x3fd34413
 800d520:	0800f1ad 	.word	0x0800f1ad
 800d524:	0800f1c4 	.word	0x0800f1c4
 800d528:	7ff00000 	.word	0x7ff00000
 800d52c:	0800f1a9 	.word	0x0800f1a9
 800d530:	0800f1a0 	.word	0x0800f1a0
 800d534:	0800f17d 	.word	0x0800f17d
 800d538:	0800f2c0 	.word	0x0800f2c0
 800d53c:	0800f223 	.word	0x0800f223
 800d540:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d542:	9900      	ldr	r1, [sp, #0]
 800d544:	6011      	str	r1, [r2, #0]
 800d546:	f1b9 0f0e 	cmp.w	r9, #14
 800d54a:	d872      	bhi.n	800d632 <_dtoa_r+0x3ea>
 800d54c:	2c00      	cmp	r4, #0
 800d54e:	d070      	beq.n	800d632 <_dtoa_r+0x3ea>
 800d550:	f1bb 0f00 	cmp.w	fp, #0
 800d554:	f340 80a6 	ble.w	800d6a4 <_dtoa_r+0x45c>
 800d558:	49ca      	ldr	r1, [pc, #808]	; (800d884 <_dtoa_r+0x63c>)
 800d55a:	f00b 020f 	and.w	r2, fp, #15
 800d55e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d562:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d566:	ed92 7b00 	vldr	d7, [r2]
 800d56a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d56e:	f000 808d 	beq.w	800d68c <_dtoa_r+0x444>
 800d572:	4ac5      	ldr	r2, [pc, #788]	; (800d888 <_dtoa_r+0x640>)
 800d574:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d578:	ed92 6b08 	vldr	d6, [r2, #32]
 800d57c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d580:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d584:	f001 010f 	and.w	r1, r1, #15
 800d588:	2203      	movs	r2, #3
 800d58a:	48bf      	ldr	r0, [pc, #764]	; (800d888 <_dtoa_r+0x640>)
 800d58c:	2900      	cmp	r1, #0
 800d58e:	d17f      	bne.n	800d690 <_dtoa_r+0x448>
 800d590:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d594:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d598:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d59c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d59e:	2900      	cmp	r1, #0
 800d5a0:	f000 80b2 	beq.w	800d708 <_dtoa_r+0x4c0>
 800d5a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d5a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b4:	f140 80a8 	bpl.w	800d708 <_dtoa_r+0x4c0>
 800d5b8:	f1b9 0f00 	cmp.w	r9, #0
 800d5bc:	f000 80a4 	beq.w	800d708 <_dtoa_r+0x4c0>
 800d5c0:	f1ba 0f00 	cmp.w	sl, #0
 800d5c4:	dd31      	ble.n	800d62a <_dtoa_r+0x3e2>
 800d5c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d5ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d5d6:	3201      	adds	r2, #1
 800d5d8:	4650      	mov	r0, sl
 800d5da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d5de:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d5e2:	ee07 2a90 	vmov	s15, r2
 800d5e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d5ee:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d5f2:	9c03      	ldr	r4, [sp, #12]
 800d5f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d5f8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 8086 	bne.w	800d70e <_dtoa_r+0x4c6>
 800d602:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d606:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d60a:	ec42 1b17 	vmov	d7, r1, r2
 800d60e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d616:	f300 8272 	bgt.w	800dafe <_dtoa_r+0x8b6>
 800d61a:	eeb1 7b47 	vneg.f64	d7, d7
 800d61e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d626:	f100 8267 	bmi.w	800daf8 <_dtoa_r+0x8b0>
 800d62a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d62e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d634:	2a00      	cmp	r2, #0
 800d636:	f2c0 8129 	blt.w	800d88c <_dtoa_r+0x644>
 800d63a:	f1bb 0f0e 	cmp.w	fp, #14
 800d63e:	f300 8125 	bgt.w	800d88c <_dtoa_r+0x644>
 800d642:	4b90      	ldr	r3, [pc, #576]	; (800d884 <_dtoa_r+0x63c>)
 800d644:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d648:	ed93 6b00 	vldr	d6, [r3]
 800d64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f280 80c3 	bge.w	800d7da <_dtoa_r+0x592>
 800d654:	f1b9 0f00 	cmp.w	r9, #0
 800d658:	f300 80bf 	bgt.w	800d7da <_dtoa_r+0x592>
 800d65c:	f040 824c 	bne.w	800daf8 <_dtoa_r+0x8b0>
 800d660:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d664:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d66c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	464c      	mov	r4, r9
 800d676:	464f      	mov	r7, r9
 800d678:	f280 8222 	bge.w	800dac0 <_dtoa_r+0x878>
 800d67c:	f8dd 8000 	ldr.w	r8, [sp]
 800d680:	2331      	movs	r3, #49	; 0x31
 800d682:	f808 3b01 	strb.w	r3, [r8], #1
 800d686:	f10b 0b01 	add.w	fp, fp, #1
 800d68a:	e21e      	b.n	800daca <_dtoa_r+0x882>
 800d68c:	2202      	movs	r2, #2
 800d68e:	e77c      	b.n	800d58a <_dtoa_r+0x342>
 800d690:	07cc      	lsls	r4, r1, #31
 800d692:	d504      	bpl.n	800d69e <_dtoa_r+0x456>
 800d694:	ed90 6b00 	vldr	d6, [r0]
 800d698:	3201      	adds	r2, #1
 800d69a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d69e:	1049      	asrs	r1, r1, #1
 800d6a0:	3008      	adds	r0, #8
 800d6a2:	e773      	b.n	800d58c <_dtoa_r+0x344>
 800d6a4:	d02e      	beq.n	800d704 <_dtoa_r+0x4bc>
 800d6a6:	f1cb 0100 	rsb	r1, fp, #0
 800d6aa:	4a76      	ldr	r2, [pc, #472]	; (800d884 <_dtoa_r+0x63c>)
 800d6ac:	f001 000f 	and.w	r0, r1, #15
 800d6b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d6b4:	ed92 7b00 	vldr	d7, [r2]
 800d6b8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d6bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d6c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d6c4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d6c8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d6cc:	486e      	ldr	r0, [pc, #440]	; (800d888 <_dtoa_r+0x640>)
 800d6ce:	1109      	asrs	r1, r1, #4
 800d6d0:	2400      	movs	r4, #0
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	b939      	cbnz	r1, 800d6e6 <_dtoa_r+0x49e>
 800d6d6:	2c00      	cmp	r4, #0
 800d6d8:	f43f af60 	beq.w	800d59c <_dtoa_r+0x354>
 800d6dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e4:	e75a      	b.n	800d59c <_dtoa_r+0x354>
 800d6e6:	07cf      	lsls	r7, r1, #31
 800d6e8:	d509      	bpl.n	800d6fe <_dtoa_r+0x4b6>
 800d6ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d6ee:	ed90 7b00 	vldr	d7, [r0]
 800d6f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d6f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d6fa:	3201      	adds	r2, #1
 800d6fc:	2401      	movs	r4, #1
 800d6fe:	1049      	asrs	r1, r1, #1
 800d700:	3008      	adds	r0, #8
 800d702:	e7e7      	b.n	800d6d4 <_dtoa_r+0x48c>
 800d704:	2202      	movs	r2, #2
 800d706:	e749      	b.n	800d59c <_dtoa_r+0x354>
 800d708:	465f      	mov	r7, fp
 800d70a:	4648      	mov	r0, r9
 800d70c:	e765      	b.n	800d5da <_dtoa_r+0x392>
 800d70e:	ec42 1b17 	vmov	d7, r1, r2
 800d712:	4a5c      	ldr	r2, [pc, #368]	; (800d884 <_dtoa_r+0x63c>)
 800d714:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d718:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d71c:	9a00      	ldr	r2, [sp, #0]
 800d71e:	1814      	adds	r4, r2, r0
 800d720:	9a08      	ldr	r2, [sp, #32]
 800d722:	b352      	cbz	r2, 800d77a <_dtoa_r+0x532>
 800d724:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d728:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d72c:	f8dd 8000 	ldr.w	r8, [sp]
 800d730:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d734:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d738:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d73c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d740:	ee14 2a90 	vmov	r2, s9
 800d744:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d748:	3230      	adds	r2, #48	; 0x30
 800d74a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d74e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	f808 2b01 	strb.w	r2, [r8], #1
 800d75a:	d439      	bmi.n	800d7d0 <_dtoa_r+0x588>
 800d75c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d760:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	d472      	bmi.n	800d850 <_dtoa_r+0x608>
 800d76a:	45a0      	cmp	r8, r4
 800d76c:	f43f af5d 	beq.w	800d62a <_dtoa_r+0x3e2>
 800d770:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d774:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d778:	e7e0      	b.n	800d73c <_dtoa_r+0x4f4>
 800d77a:	f8dd 8000 	ldr.w	r8, [sp]
 800d77e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d782:	4621      	mov	r1, r4
 800d784:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d788:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d78c:	ee14 2a90 	vmov	r2, s9
 800d790:	3230      	adds	r2, #48	; 0x30
 800d792:	f808 2b01 	strb.w	r2, [r8], #1
 800d796:	45a0      	cmp	r8, r4
 800d798:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d79c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d7a0:	d118      	bne.n	800d7d4 <_dtoa_r+0x58c>
 800d7a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d7a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d7aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b2:	dc4d      	bgt.n	800d850 <_dtoa_r+0x608>
 800d7b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d7b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	f57f af33 	bpl.w	800d62a <_dtoa_r+0x3e2>
 800d7c4:	4688      	mov	r8, r1
 800d7c6:	3901      	subs	r1, #1
 800d7c8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d7cc:	2b30      	cmp	r3, #48	; 0x30
 800d7ce:	d0f9      	beq.n	800d7c4 <_dtoa_r+0x57c>
 800d7d0:	46bb      	mov	fp, r7
 800d7d2:	e02a      	b.n	800d82a <_dtoa_r+0x5e2>
 800d7d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d7d8:	e7d6      	b.n	800d788 <_dtoa_r+0x540>
 800d7da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d7e2:	f8dd 8000 	ldr.w	r8, [sp]
 800d7e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d7ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d7ee:	ee15 3a10 	vmov	r3, s10
 800d7f2:	3330      	adds	r3, #48	; 0x30
 800d7f4:	f808 3b01 	strb.w	r3, [r8], #1
 800d7f8:	9b00      	ldr	r3, [sp, #0]
 800d7fa:	eba8 0303 	sub.w	r3, r8, r3
 800d7fe:	4599      	cmp	r9, r3
 800d800:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d804:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d808:	d133      	bne.n	800d872 <_dtoa_r+0x62a>
 800d80a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d80e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d816:	dc1a      	bgt.n	800d84e <_dtoa_r+0x606>
 800d818:	eeb4 7b46 	vcmp.f64	d7, d6
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	d103      	bne.n	800d82a <_dtoa_r+0x5e2>
 800d822:	ee15 3a10 	vmov	r3, s10
 800d826:	07d9      	lsls	r1, r3, #31
 800d828:	d411      	bmi.n	800d84e <_dtoa_r+0x606>
 800d82a:	4629      	mov	r1, r5
 800d82c:	4630      	mov	r0, r6
 800d82e:	f000 fad9 	bl	800dde4 <_Bfree>
 800d832:	2300      	movs	r3, #0
 800d834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d836:	f888 3000 	strb.w	r3, [r8]
 800d83a:	f10b 0301 	add.w	r3, fp, #1
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d842:	2b00      	cmp	r3, #0
 800d844:	f43f ad4d 	beq.w	800d2e2 <_dtoa_r+0x9a>
 800d848:	f8c3 8000 	str.w	r8, [r3]
 800d84c:	e549      	b.n	800d2e2 <_dtoa_r+0x9a>
 800d84e:	465f      	mov	r7, fp
 800d850:	4643      	mov	r3, r8
 800d852:	4698      	mov	r8, r3
 800d854:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d858:	2a39      	cmp	r2, #57	; 0x39
 800d85a:	d106      	bne.n	800d86a <_dtoa_r+0x622>
 800d85c:	9a00      	ldr	r2, [sp, #0]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d1f7      	bne.n	800d852 <_dtoa_r+0x60a>
 800d862:	9900      	ldr	r1, [sp, #0]
 800d864:	2230      	movs	r2, #48	; 0x30
 800d866:	3701      	adds	r7, #1
 800d868:	700a      	strb	r2, [r1, #0]
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	3201      	adds	r2, #1
 800d86e:	701a      	strb	r2, [r3, #0]
 800d870:	e7ae      	b.n	800d7d0 <_dtoa_r+0x588>
 800d872:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d876:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87e:	d1b2      	bne.n	800d7e6 <_dtoa_r+0x59e>
 800d880:	e7d3      	b.n	800d82a <_dtoa_r+0x5e2>
 800d882:	bf00      	nop
 800d884:	0800f2c0 	.word	0x0800f2c0
 800d888:	0800f298 	.word	0x0800f298
 800d88c:	9908      	ldr	r1, [sp, #32]
 800d88e:	2900      	cmp	r1, #0
 800d890:	f000 80d1 	beq.w	800da36 <_dtoa_r+0x7ee>
 800d894:	9907      	ldr	r1, [sp, #28]
 800d896:	2901      	cmp	r1, #1
 800d898:	f300 80b4 	bgt.w	800da04 <_dtoa_r+0x7bc>
 800d89c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d89e:	2900      	cmp	r1, #0
 800d8a0:	f000 80ac 	beq.w	800d9fc <_dtoa_r+0x7b4>
 800d8a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d8ac:	461c      	mov	r4, r3
 800d8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d8b0:	9b05      	ldr	r3, [sp, #20]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	9b06      	ldr	r3, [sp, #24]
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	4413      	add	r3, r2
 800d8bc:	4630      	mov	r0, r6
 800d8be:	9306      	str	r3, [sp, #24]
 800d8c0:	f000 fb4c 	bl	800df5c <__i2b>
 800d8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c6:	4607      	mov	r7, r0
 800d8c8:	f1b8 0f00 	cmp.w	r8, #0
 800d8cc:	dd0d      	ble.n	800d8ea <_dtoa_r+0x6a2>
 800d8ce:	9a06      	ldr	r2, [sp, #24]
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	dd0a      	ble.n	800d8ea <_dtoa_r+0x6a2>
 800d8d4:	4542      	cmp	r2, r8
 800d8d6:	9905      	ldr	r1, [sp, #20]
 800d8d8:	bfa8      	it	ge
 800d8da:	4642      	movge	r2, r8
 800d8dc:	1a89      	subs	r1, r1, r2
 800d8de:	9105      	str	r1, [sp, #20]
 800d8e0:	9906      	ldr	r1, [sp, #24]
 800d8e2:	eba8 0802 	sub.w	r8, r8, r2
 800d8e6:	1a8a      	subs	r2, r1, r2
 800d8e8:	9206      	str	r2, [sp, #24]
 800d8ea:	b303      	cbz	r3, 800d92e <_dtoa_r+0x6e6>
 800d8ec:	9a08      	ldr	r2, [sp, #32]
 800d8ee:	2a00      	cmp	r2, #0
 800d8f0:	f000 80a6 	beq.w	800da40 <_dtoa_r+0x7f8>
 800d8f4:	2c00      	cmp	r4, #0
 800d8f6:	dd13      	ble.n	800d920 <_dtoa_r+0x6d8>
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	4622      	mov	r2, r4
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d900:	f000 fbe8 	bl	800e0d4 <__pow5mult>
 800d904:	462a      	mov	r2, r5
 800d906:	4601      	mov	r1, r0
 800d908:	4607      	mov	r7, r0
 800d90a:	4630      	mov	r0, r6
 800d90c:	f000 fb3c 	bl	800df88 <__multiply>
 800d910:	4629      	mov	r1, r5
 800d912:	900a      	str	r0, [sp, #40]	; 0x28
 800d914:	4630      	mov	r0, r6
 800d916:	f000 fa65 	bl	800dde4 <_Bfree>
 800d91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d91e:	4615      	mov	r5, r2
 800d920:	1b1a      	subs	r2, r3, r4
 800d922:	d004      	beq.n	800d92e <_dtoa_r+0x6e6>
 800d924:	4629      	mov	r1, r5
 800d926:	4630      	mov	r0, r6
 800d928:	f000 fbd4 	bl	800e0d4 <__pow5mult>
 800d92c:	4605      	mov	r5, r0
 800d92e:	2101      	movs	r1, #1
 800d930:	4630      	mov	r0, r6
 800d932:	f000 fb13 	bl	800df5c <__i2b>
 800d936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d938:	2b00      	cmp	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	f340 8082 	ble.w	800da44 <_dtoa_r+0x7fc>
 800d940:	461a      	mov	r2, r3
 800d942:	4601      	mov	r1, r0
 800d944:	4630      	mov	r0, r6
 800d946:	f000 fbc5 	bl	800e0d4 <__pow5mult>
 800d94a:	9b07      	ldr	r3, [sp, #28]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	4604      	mov	r4, r0
 800d950:	dd7b      	ble.n	800da4a <_dtoa_r+0x802>
 800d952:	2300      	movs	r3, #0
 800d954:	930a      	str	r3, [sp, #40]	; 0x28
 800d956:	6922      	ldr	r2, [r4, #16]
 800d958:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d95c:	6910      	ldr	r0, [r2, #16]
 800d95e:	f000 faad 	bl	800debc <__hi0bits>
 800d962:	f1c0 0020 	rsb	r0, r0, #32
 800d966:	9b06      	ldr	r3, [sp, #24]
 800d968:	4418      	add	r0, r3
 800d96a:	f010 001f 	ands.w	r0, r0, #31
 800d96e:	f000 808d 	beq.w	800da8c <_dtoa_r+0x844>
 800d972:	f1c0 0220 	rsb	r2, r0, #32
 800d976:	2a04      	cmp	r2, #4
 800d978:	f340 8086 	ble.w	800da88 <_dtoa_r+0x840>
 800d97c:	f1c0 001c 	rsb	r0, r0, #28
 800d980:	9b05      	ldr	r3, [sp, #20]
 800d982:	4403      	add	r3, r0
 800d984:	9305      	str	r3, [sp, #20]
 800d986:	9b06      	ldr	r3, [sp, #24]
 800d988:	4403      	add	r3, r0
 800d98a:	4480      	add	r8, r0
 800d98c:	9306      	str	r3, [sp, #24]
 800d98e:	9b05      	ldr	r3, [sp, #20]
 800d990:	2b00      	cmp	r3, #0
 800d992:	dd05      	ble.n	800d9a0 <_dtoa_r+0x758>
 800d994:	4629      	mov	r1, r5
 800d996:	461a      	mov	r2, r3
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 fbf5 	bl	800e188 <__lshift>
 800d99e:	4605      	mov	r5, r0
 800d9a0:	9b06      	ldr	r3, [sp, #24]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dd05      	ble.n	800d9b2 <_dtoa_r+0x76a>
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f000 fbec 	bl	800e188 <__lshift>
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d06b      	beq.n	800da90 <_dtoa_r+0x848>
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f000 fc50 	bl	800e260 <__mcmp>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	da65      	bge.n	800da90 <_dtoa_r+0x848>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	220a      	movs	r2, #10
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f000 fa2c 	bl	800de28 <__multadd>
 800d9d0:	9b08      	ldr	r3, [sp, #32]
 800d9d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 8192 	beq.w	800dd02 <_dtoa_r+0xaba>
 800d9de:	4639      	mov	r1, r7
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	220a      	movs	r2, #10
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f000 fa1f 	bl	800de28 <__multadd>
 800d9ea:	f1ba 0f00 	cmp.w	sl, #0
 800d9ee:	4607      	mov	r7, r0
 800d9f0:	f300 808e 	bgt.w	800db10 <_dtoa_r+0x8c8>
 800d9f4:	9b07      	ldr	r3, [sp, #28]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	dc51      	bgt.n	800da9e <_dtoa_r+0x856>
 800d9fa:	e089      	b.n	800db10 <_dtoa_r+0x8c8>
 800d9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d9fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da02:	e751      	b.n	800d8a8 <_dtoa_r+0x660>
 800da04:	f109 34ff 	add.w	r4, r9, #4294967295
 800da08:	42a3      	cmp	r3, r4
 800da0a:	bfbf      	itttt	lt
 800da0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800da0e:	1ae3      	sublt	r3, r4, r3
 800da10:	18d2      	addlt	r2, r2, r3
 800da12:	4613      	movlt	r3, r2
 800da14:	bfb7      	itett	lt
 800da16:	930e      	strlt	r3, [sp, #56]	; 0x38
 800da18:	1b1c      	subge	r4, r3, r4
 800da1a:	4623      	movlt	r3, r4
 800da1c:	2400      	movlt	r4, #0
 800da1e:	f1b9 0f00 	cmp.w	r9, #0
 800da22:	bfb5      	itete	lt
 800da24:	9a05      	ldrlt	r2, [sp, #20]
 800da26:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800da2a:	eba2 0809 	sublt.w	r8, r2, r9
 800da2e:	464a      	movge	r2, r9
 800da30:	bfb8      	it	lt
 800da32:	2200      	movlt	r2, #0
 800da34:	e73b      	b.n	800d8ae <_dtoa_r+0x666>
 800da36:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800da3a:	9f08      	ldr	r7, [sp, #32]
 800da3c:	461c      	mov	r4, r3
 800da3e:	e743      	b.n	800d8c8 <_dtoa_r+0x680>
 800da40:	461a      	mov	r2, r3
 800da42:	e76f      	b.n	800d924 <_dtoa_r+0x6dc>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	2b01      	cmp	r3, #1
 800da48:	dc18      	bgt.n	800da7c <_dtoa_r+0x834>
 800da4a:	9b02      	ldr	r3, [sp, #8]
 800da4c:	b9b3      	cbnz	r3, 800da7c <_dtoa_r+0x834>
 800da4e:	9b03      	ldr	r3, [sp, #12]
 800da50:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800da54:	b9a2      	cbnz	r2, 800da80 <_dtoa_r+0x838>
 800da56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800da5a:	0d12      	lsrs	r2, r2, #20
 800da5c:	0512      	lsls	r2, r2, #20
 800da5e:	b18a      	cbz	r2, 800da84 <_dtoa_r+0x83c>
 800da60:	9b05      	ldr	r3, [sp, #20]
 800da62:	3301      	adds	r3, #1
 800da64:	9305      	str	r3, [sp, #20]
 800da66:	9b06      	ldr	r3, [sp, #24]
 800da68:	3301      	adds	r3, #1
 800da6a:	9306      	str	r3, [sp, #24]
 800da6c:	2301      	movs	r3, #1
 800da6e:	930a      	str	r3, [sp, #40]	; 0x28
 800da70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da72:	2b00      	cmp	r3, #0
 800da74:	f47f af6f 	bne.w	800d956 <_dtoa_r+0x70e>
 800da78:	2001      	movs	r0, #1
 800da7a:	e774      	b.n	800d966 <_dtoa_r+0x71e>
 800da7c:	2300      	movs	r3, #0
 800da7e:	e7f6      	b.n	800da6e <_dtoa_r+0x826>
 800da80:	9b02      	ldr	r3, [sp, #8]
 800da82:	e7f4      	b.n	800da6e <_dtoa_r+0x826>
 800da84:	920a      	str	r2, [sp, #40]	; 0x28
 800da86:	e7f3      	b.n	800da70 <_dtoa_r+0x828>
 800da88:	d081      	beq.n	800d98e <_dtoa_r+0x746>
 800da8a:	4610      	mov	r0, r2
 800da8c:	301c      	adds	r0, #28
 800da8e:	e777      	b.n	800d980 <_dtoa_r+0x738>
 800da90:	f1b9 0f00 	cmp.w	r9, #0
 800da94:	dc37      	bgt.n	800db06 <_dtoa_r+0x8be>
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	dd34      	ble.n	800db06 <_dtoa_r+0x8be>
 800da9c:	46ca      	mov	sl, r9
 800da9e:	f1ba 0f00 	cmp.w	sl, #0
 800daa2:	d10d      	bne.n	800dac0 <_dtoa_r+0x878>
 800daa4:	4621      	mov	r1, r4
 800daa6:	4653      	mov	r3, sl
 800daa8:	2205      	movs	r2, #5
 800daaa:	4630      	mov	r0, r6
 800daac:	f000 f9bc 	bl	800de28 <__multadd>
 800dab0:	4601      	mov	r1, r0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4628      	mov	r0, r5
 800dab6:	f000 fbd3 	bl	800e260 <__mcmp>
 800daba:	2800      	cmp	r0, #0
 800dabc:	f73f adde 	bgt.w	800d67c <_dtoa_r+0x434>
 800dac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac2:	f8dd 8000 	ldr.w	r8, [sp]
 800dac6:	ea6f 0b03 	mvn.w	fp, r3
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	4621      	mov	r1, r4
 800dad0:	4630      	mov	r0, r6
 800dad2:	f000 f987 	bl	800dde4 <_Bfree>
 800dad6:	2f00      	cmp	r7, #0
 800dad8:	f43f aea7 	beq.w	800d82a <_dtoa_r+0x5e2>
 800dadc:	f1b9 0f00 	cmp.w	r9, #0
 800dae0:	d005      	beq.n	800daee <_dtoa_r+0x8a6>
 800dae2:	45b9      	cmp	r9, r7
 800dae4:	d003      	beq.n	800daee <_dtoa_r+0x8a6>
 800dae6:	4649      	mov	r1, r9
 800dae8:	4630      	mov	r0, r6
 800daea:	f000 f97b 	bl	800dde4 <_Bfree>
 800daee:	4639      	mov	r1, r7
 800daf0:	4630      	mov	r0, r6
 800daf2:	f000 f977 	bl	800dde4 <_Bfree>
 800daf6:	e698      	b.n	800d82a <_dtoa_r+0x5e2>
 800daf8:	2400      	movs	r4, #0
 800dafa:	4627      	mov	r7, r4
 800dafc:	e7e0      	b.n	800dac0 <_dtoa_r+0x878>
 800dafe:	46bb      	mov	fp, r7
 800db00:	4604      	mov	r4, r0
 800db02:	4607      	mov	r7, r0
 800db04:	e5ba      	b.n	800d67c <_dtoa_r+0x434>
 800db06:	9b08      	ldr	r3, [sp, #32]
 800db08:	46ca      	mov	sl, r9
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 8100 	beq.w	800dd10 <_dtoa_r+0xac8>
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	dd05      	ble.n	800db22 <_dtoa_r+0x8da>
 800db16:	4639      	mov	r1, r7
 800db18:	4642      	mov	r2, r8
 800db1a:	4630      	mov	r0, r6
 800db1c:	f000 fb34 	bl	800e188 <__lshift>
 800db20:	4607      	mov	r7, r0
 800db22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db24:	2b00      	cmp	r3, #0
 800db26:	d05d      	beq.n	800dbe4 <_dtoa_r+0x99c>
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 f91a 	bl	800dd64 <_Balloc>
 800db30:	4680      	mov	r8, r0
 800db32:	b928      	cbnz	r0, 800db40 <_dtoa_r+0x8f8>
 800db34:	4b82      	ldr	r3, [pc, #520]	; (800dd40 <_dtoa_r+0xaf8>)
 800db36:	4602      	mov	r2, r0
 800db38:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db3c:	f7ff bb9a 	b.w	800d274 <_dtoa_r+0x2c>
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	3202      	adds	r2, #2
 800db44:	0092      	lsls	r2, r2, #2
 800db46:	f107 010c 	add.w	r1, r7, #12
 800db4a:	300c      	adds	r0, #12
 800db4c:	f7fe fe94 	bl	800c878 <memcpy>
 800db50:	2201      	movs	r2, #1
 800db52:	4641      	mov	r1, r8
 800db54:	4630      	mov	r0, r6
 800db56:	f000 fb17 	bl	800e188 <__lshift>
 800db5a:	9b00      	ldr	r3, [sp, #0]
 800db5c:	3301      	adds	r3, #1
 800db5e:	9305      	str	r3, [sp, #20]
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	4453      	add	r3, sl
 800db64:	9309      	str	r3, [sp, #36]	; 0x24
 800db66:	9b02      	ldr	r3, [sp, #8]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	46b9      	mov	r9, r7
 800db6e:	9308      	str	r3, [sp, #32]
 800db70:	4607      	mov	r7, r0
 800db72:	9b05      	ldr	r3, [sp, #20]
 800db74:	4621      	mov	r1, r4
 800db76:	3b01      	subs	r3, #1
 800db78:	4628      	mov	r0, r5
 800db7a:	9302      	str	r3, [sp, #8]
 800db7c:	f7ff fad6 	bl	800d12c <quorem>
 800db80:	4603      	mov	r3, r0
 800db82:	3330      	adds	r3, #48	; 0x30
 800db84:	9006      	str	r0, [sp, #24]
 800db86:	4649      	mov	r1, r9
 800db88:	4628      	mov	r0, r5
 800db8a:	930a      	str	r3, [sp, #40]	; 0x28
 800db8c:	f000 fb68 	bl	800e260 <__mcmp>
 800db90:	463a      	mov	r2, r7
 800db92:	4682      	mov	sl, r0
 800db94:	4621      	mov	r1, r4
 800db96:	4630      	mov	r0, r6
 800db98:	f000 fb7e 	bl	800e298 <__mdiff>
 800db9c:	68c2      	ldr	r2, [r0, #12]
 800db9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba0:	4680      	mov	r8, r0
 800dba2:	bb0a      	cbnz	r2, 800dbe8 <_dtoa_r+0x9a0>
 800dba4:	4601      	mov	r1, r0
 800dba6:	4628      	mov	r0, r5
 800dba8:	f000 fb5a 	bl	800e260 <__mcmp>
 800dbac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbae:	4602      	mov	r2, r0
 800dbb0:	4641      	mov	r1, r8
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	920e      	str	r2, [sp, #56]	; 0x38
 800dbb6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbb8:	f000 f914 	bl	800dde4 <_Bfree>
 800dbbc:	9b07      	ldr	r3, [sp, #28]
 800dbbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbc0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dbc4:	ea43 0102 	orr.w	r1, r3, r2
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	430b      	orrs	r3, r1
 800dbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbce:	d10d      	bne.n	800dbec <_dtoa_r+0x9a4>
 800dbd0:	2b39      	cmp	r3, #57	; 0x39
 800dbd2:	d029      	beq.n	800dc28 <_dtoa_r+0x9e0>
 800dbd4:	f1ba 0f00 	cmp.w	sl, #0
 800dbd8:	dd01      	ble.n	800dbde <_dtoa_r+0x996>
 800dbda:	9b06      	ldr	r3, [sp, #24]
 800dbdc:	3331      	adds	r3, #49	; 0x31
 800dbde:	9a02      	ldr	r2, [sp, #8]
 800dbe0:	7013      	strb	r3, [r2, #0]
 800dbe2:	e774      	b.n	800dace <_dtoa_r+0x886>
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	e7b8      	b.n	800db5a <_dtoa_r+0x912>
 800dbe8:	2201      	movs	r2, #1
 800dbea:	e7e1      	b.n	800dbb0 <_dtoa_r+0x968>
 800dbec:	f1ba 0f00 	cmp.w	sl, #0
 800dbf0:	db06      	blt.n	800dc00 <_dtoa_r+0x9b8>
 800dbf2:	9907      	ldr	r1, [sp, #28]
 800dbf4:	ea41 0a0a 	orr.w	sl, r1, sl
 800dbf8:	9908      	ldr	r1, [sp, #32]
 800dbfa:	ea5a 0101 	orrs.w	r1, sl, r1
 800dbfe:	d120      	bne.n	800dc42 <_dtoa_r+0x9fa>
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	ddec      	ble.n	800dbde <_dtoa_r+0x996>
 800dc04:	4629      	mov	r1, r5
 800dc06:	2201      	movs	r2, #1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	9305      	str	r3, [sp, #20]
 800dc0c:	f000 fabc 	bl	800e188 <__lshift>
 800dc10:	4621      	mov	r1, r4
 800dc12:	4605      	mov	r5, r0
 800dc14:	f000 fb24 	bl	800e260 <__mcmp>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	9b05      	ldr	r3, [sp, #20]
 800dc1c:	dc02      	bgt.n	800dc24 <_dtoa_r+0x9dc>
 800dc1e:	d1de      	bne.n	800dbde <_dtoa_r+0x996>
 800dc20:	07da      	lsls	r2, r3, #31
 800dc22:	d5dc      	bpl.n	800dbde <_dtoa_r+0x996>
 800dc24:	2b39      	cmp	r3, #57	; 0x39
 800dc26:	d1d8      	bne.n	800dbda <_dtoa_r+0x992>
 800dc28:	9a02      	ldr	r2, [sp, #8]
 800dc2a:	2339      	movs	r3, #57	; 0x39
 800dc2c:	7013      	strb	r3, [r2, #0]
 800dc2e:	4643      	mov	r3, r8
 800dc30:	4698      	mov	r8, r3
 800dc32:	3b01      	subs	r3, #1
 800dc34:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dc38:	2a39      	cmp	r2, #57	; 0x39
 800dc3a:	d051      	beq.n	800dce0 <_dtoa_r+0xa98>
 800dc3c:	3201      	adds	r2, #1
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e745      	b.n	800dace <_dtoa_r+0x886>
 800dc42:	2a00      	cmp	r2, #0
 800dc44:	dd03      	ble.n	800dc4e <_dtoa_r+0xa06>
 800dc46:	2b39      	cmp	r3, #57	; 0x39
 800dc48:	d0ee      	beq.n	800dc28 <_dtoa_r+0x9e0>
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	e7c7      	b.n	800dbde <_dtoa_r+0x996>
 800dc4e:	9a05      	ldr	r2, [sp, #20]
 800dc50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc52:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc56:	428a      	cmp	r2, r1
 800dc58:	d02b      	beq.n	800dcb2 <_dtoa_r+0xa6a>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	220a      	movs	r2, #10
 800dc60:	4630      	mov	r0, r6
 800dc62:	f000 f8e1 	bl	800de28 <__multadd>
 800dc66:	45b9      	cmp	r9, r7
 800dc68:	4605      	mov	r5, r0
 800dc6a:	f04f 0300 	mov.w	r3, #0
 800dc6e:	f04f 020a 	mov.w	r2, #10
 800dc72:	4649      	mov	r1, r9
 800dc74:	4630      	mov	r0, r6
 800dc76:	d107      	bne.n	800dc88 <_dtoa_r+0xa40>
 800dc78:	f000 f8d6 	bl	800de28 <__multadd>
 800dc7c:	4681      	mov	r9, r0
 800dc7e:	4607      	mov	r7, r0
 800dc80:	9b05      	ldr	r3, [sp, #20]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	e774      	b.n	800db72 <_dtoa_r+0x92a>
 800dc88:	f000 f8ce 	bl	800de28 <__multadd>
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	4681      	mov	r9, r0
 800dc90:	2300      	movs	r3, #0
 800dc92:	220a      	movs	r2, #10
 800dc94:	4630      	mov	r0, r6
 800dc96:	f000 f8c7 	bl	800de28 <__multadd>
 800dc9a:	4607      	mov	r7, r0
 800dc9c:	e7f0      	b.n	800dc80 <_dtoa_r+0xa38>
 800dc9e:	f1ba 0f00 	cmp.w	sl, #0
 800dca2:	9a00      	ldr	r2, [sp, #0]
 800dca4:	bfcc      	ite	gt
 800dca6:	46d0      	movgt	r8, sl
 800dca8:	f04f 0801 	movle.w	r8, #1
 800dcac:	4490      	add	r8, r2
 800dcae:	f04f 0900 	mov.w	r9, #0
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	9302      	str	r3, [sp, #8]
 800dcba:	f000 fa65 	bl	800e188 <__lshift>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	f000 facd 	bl	800e260 <__mcmp>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	dcb1      	bgt.n	800dc2e <_dtoa_r+0x9e6>
 800dcca:	d102      	bne.n	800dcd2 <_dtoa_r+0xa8a>
 800dccc:	9b02      	ldr	r3, [sp, #8]
 800dcce:	07db      	lsls	r3, r3, #31
 800dcd0:	d4ad      	bmi.n	800dc2e <_dtoa_r+0x9e6>
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	4698      	mov	r8, r3
 800dcd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcda:	2a30      	cmp	r2, #48	; 0x30
 800dcdc:	d0fa      	beq.n	800dcd4 <_dtoa_r+0xa8c>
 800dcde:	e6f6      	b.n	800dace <_dtoa_r+0x886>
 800dce0:	9a00      	ldr	r2, [sp, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d1a4      	bne.n	800dc30 <_dtoa_r+0x9e8>
 800dce6:	f10b 0b01 	add.w	fp, fp, #1
 800dcea:	2331      	movs	r3, #49	; 0x31
 800dcec:	e778      	b.n	800dbe0 <_dtoa_r+0x998>
 800dcee:	4b15      	ldr	r3, [pc, #84]	; (800dd44 <_dtoa_r+0xafc>)
 800dcf0:	f7ff bb12 	b.w	800d318 <_dtoa_r+0xd0>
 800dcf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f47f aaee 	bne.w	800d2d8 <_dtoa_r+0x90>
 800dcfc:	4b12      	ldr	r3, [pc, #72]	; (800dd48 <_dtoa_r+0xb00>)
 800dcfe:	f7ff bb0b 	b.w	800d318 <_dtoa_r+0xd0>
 800dd02:	f1ba 0f00 	cmp.w	sl, #0
 800dd06:	dc03      	bgt.n	800dd10 <_dtoa_r+0xac8>
 800dd08:	9b07      	ldr	r3, [sp, #28]
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	f73f aec7 	bgt.w	800da9e <_dtoa_r+0x856>
 800dd10:	f8dd 8000 	ldr.w	r8, [sp]
 800dd14:	4621      	mov	r1, r4
 800dd16:	4628      	mov	r0, r5
 800dd18:	f7ff fa08 	bl	800d12c <quorem>
 800dd1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dd20:	f808 3b01 	strb.w	r3, [r8], #1
 800dd24:	9a00      	ldr	r2, [sp, #0]
 800dd26:	eba8 0202 	sub.w	r2, r8, r2
 800dd2a:	4592      	cmp	sl, r2
 800dd2c:	ddb7      	ble.n	800dc9e <_dtoa_r+0xa56>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	2300      	movs	r3, #0
 800dd32:	220a      	movs	r2, #10
 800dd34:	4630      	mov	r0, r6
 800dd36:	f000 f877 	bl	800de28 <__multadd>
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	e7ea      	b.n	800dd14 <_dtoa_r+0xacc>
 800dd3e:	bf00      	nop
 800dd40:	0800f223 	.word	0x0800f223
 800dd44:	0800f17c 	.word	0x0800f17c
 800dd48:	0800f1a0 	.word	0x0800f1a0

0800dd4c <_localeconv_r>:
 800dd4c:	4800      	ldr	r0, [pc, #0]	; (800dd50 <_localeconv_r+0x4>)
 800dd4e:	4770      	bx	lr
 800dd50:	24000164 	.word	0x24000164

0800dd54 <malloc>:
 800dd54:	4b02      	ldr	r3, [pc, #8]	; (800dd60 <malloc+0xc>)
 800dd56:	4601      	mov	r1, r0
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	f000 bbe1 	b.w	800e520 <_malloc_r>
 800dd5e:	bf00      	nop
 800dd60:	24000010 	.word	0x24000010

0800dd64 <_Balloc>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	b976      	cbnz	r6, 800dd8c <_Balloc+0x28>
 800dd6e:	2010      	movs	r0, #16
 800dd70:	f7ff fff0 	bl	800dd54 <malloc>
 800dd74:	4602      	mov	r2, r0
 800dd76:	6260      	str	r0, [r4, #36]	; 0x24
 800dd78:	b920      	cbnz	r0, 800dd84 <_Balloc+0x20>
 800dd7a:	4b18      	ldr	r3, [pc, #96]	; (800dddc <_Balloc+0x78>)
 800dd7c:	4818      	ldr	r0, [pc, #96]	; (800dde0 <_Balloc+0x7c>)
 800dd7e:	2166      	movs	r1, #102	; 0x66
 800dd80:	f000 fc38 	bl	800e5f4 <__assert_func>
 800dd84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd88:	6006      	str	r6, [r0, #0]
 800dd8a:	60c6      	str	r6, [r0, #12]
 800dd8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd8e:	68f3      	ldr	r3, [r6, #12]
 800dd90:	b183      	cbz	r3, 800ddb4 <_Balloc+0x50>
 800dd92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd9a:	b9b8      	cbnz	r0, 800ddcc <_Balloc+0x68>
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	fa01 f605 	lsl.w	r6, r1, r5
 800dda2:	1d72      	adds	r2, r6, #5
 800dda4:	0092      	lsls	r2, r2, #2
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 fb5a 	bl	800e460 <_calloc_r>
 800ddac:	b160      	cbz	r0, 800ddc8 <_Balloc+0x64>
 800ddae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddb2:	e00e      	b.n	800ddd2 <_Balloc+0x6e>
 800ddb4:	2221      	movs	r2, #33	; 0x21
 800ddb6:	2104      	movs	r1, #4
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fb51 	bl	800e460 <_calloc_r>
 800ddbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddc0:	60f0      	str	r0, [r6, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e4      	bne.n	800dd92 <_Balloc+0x2e>
 800ddc8:	2000      	movs	r0, #0
 800ddca:	bd70      	pop	{r4, r5, r6, pc}
 800ddcc:	6802      	ldr	r2, [r0, #0]
 800ddce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddd8:	e7f7      	b.n	800ddca <_Balloc+0x66>
 800ddda:	bf00      	nop
 800dddc:	0800f1ad 	.word	0x0800f1ad
 800dde0:	0800f234 	.word	0x0800f234

0800dde4 <_Bfree>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dde8:	4605      	mov	r5, r0
 800ddea:	460c      	mov	r4, r1
 800ddec:	b976      	cbnz	r6, 800de0c <_Bfree+0x28>
 800ddee:	2010      	movs	r0, #16
 800ddf0:	f7ff ffb0 	bl	800dd54 <malloc>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	6268      	str	r0, [r5, #36]	; 0x24
 800ddf8:	b920      	cbnz	r0, 800de04 <_Bfree+0x20>
 800ddfa:	4b09      	ldr	r3, [pc, #36]	; (800de20 <_Bfree+0x3c>)
 800ddfc:	4809      	ldr	r0, [pc, #36]	; (800de24 <_Bfree+0x40>)
 800ddfe:	218a      	movs	r1, #138	; 0x8a
 800de00:	f000 fbf8 	bl	800e5f4 <__assert_func>
 800de04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de08:	6006      	str	r6, [r0, #0]
 800de0a:	60c6      	str	r6, [r0, #12]
 800de0c:	b13c      	cbz	r4, 800de1e <_Bfree+0x3a>
 800de0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de10:	6862      	ldr	r2, [r4, #4]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de18:	6021      	str	r1, [r4, #0]
 800de1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	0800f1ad 	.word	0x0800f1ad
 800de24:	0800f234 	.word	0x0800f234

0800de28 <__multadd>:
 800de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de2c:	690e      	ldr	r6, [r1, #16]
 800de2e:	4607      	mov	r7, r0
 800de30:	4698      	mov	r8, r3
 800de32:	460c      	mov	r4, r1
 800de34:	f101 0014 	add.w	r0, r1, #20
 800de38:	2300      	movs	r3, #0
 800de3a:	6805      	ldr	r5, [r0, #0]
 800de3c:	b2a9      	uxth	r1, r5
 800de3e:	fb02 8101 	mla	r1, r2, r1, r8
 800de42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800de46:	0c2d      	lsrs	r5, r5, #16
 800de48:	fb02 c505 	mla	r5, r2, r5, ip
 800de4c:	b289      	uxth	r1, r1
 800de4e:	3301      	adds	r3, #1
 800de50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800de54:	429e      	cmp	r6, r3
 800de56:	f840 1b04 	str.w	r1, [r0], #4
 800de5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800de5e:	dcec      	bgt.n	800de3a <__multadd+0x12>
 800de60:	f1b8 0f00 	cmp.w	r8, #0
 800de64:	d022      	beq.n	800deac <__multadd+0x84>
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	42b3      	cmp	r3, r6
 800de6a:	dc19      	bgt.n	800dea0 <__multadd+0x78>
 800de6c:	6861      	ldr	r1, [r4, #4]
 800de6e:	4638      	mov	r0, r7
 800de70:	3101      	adds	r1, #1
 800de72:	f7ff ff77 	bl	800dd64 <_Balloc>
 800de76:	4605      	mov	r5, r0
 800de78:	b928      	cbnz	r0, 800de86 <__multadd+0x5e>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <__multadd+0x8c>)
 800de7e:	480e      	ldr	r0, [pc, #56]	; (800deb8 <__multadd+0x90>)
 800de80:	21b5      	movs	r1, #181	; 0xb5
 800de82:	f000 fbb7 	bl	800e5f4 <__assert_func>
 800de86:	6922      	ldr	r2, [r4, #16]
 800de88:	3202      	adds	r2, #2
 800de8a:	f104 010c 	add.w	r1, r4, #12
 800de8e:	0092      	lsls	r2, r2, #2
 800de90:	300c      	adds	r0, #12
 800de92:	f7fe fcf1 	bl	800c878 <memcpy>
 800de96:	4621      	mov	r1, r4
 800de98:	4638      	mov	r0, r7
 800de9a:	f7ff ffa3 	bl	800dde4 <_Bfree>
 800de9e:	462c      	mov	r4, r5
 800dea0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dea4:	3601      	adds	r6, #1
 800dea6:	f8c3 8014 	str.w	r8, [r3, #20]
 800deaa:	6126      	str	r6, [r4, #16]
 800deac:	4620      	mov	r0, r4
 800deae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb2:	bf00      	nop
 800deb4:	0800f223 	.word	0x0800f223
 800deb8:	0800f234 	.word	0x0800f234

0800debc <__hi0bits>:
 800debc:	0c03      	lsrs	r3, r0, #16
 800debe:	041b      	lsls	r3, r3, #16
 800dec0:	b9d3      	cbnz	r3, 800def8 <__hi0bits+0x3c>
 800dec2:	0400      	lsls	r0, r0, #16
 800dec4:	2310      	movs	r3, #16
 800dec6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800deca:	bf04      	itt	eq
 800decc:	0200      	lsleq	r0, r0, #8
 800dece:	3308      	addeq	r3, #8
 800ded0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ded4:	bf04      	itt	eq
 800ded6:	0100      	lsleq	r0, r0, #4
 800ded8:	3304      	addeq	r3, #4
 800deda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dede:	bf04      	itt	eq
 800dee0:	0080      	lsleq	r0, r0, #2
 800dee2:	3302      	addeq	r3, #2
 800dee4:	2800      	cmp	r0, #0
 800dee6:	db05      	blt.n	800def4 <__hi0bits+0x38>
 800dee8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800deec:	f103 0301 	add.w	r3, r3, #1
 800def0:	bf08      	it	eq
 800def2:	2320      	moveq	r3, #32
 800def4:	4618      	mov	r0, r3
 800def6:	4770      	bx	lr
 800def8:	2300      	movs	r3, #0
 800defa:	e7e4      	b.n	800dec6 <__hi0bits+0xa>

0800defc <__lo0bits>:
 800defc:	6803      	ldr	r3, [r0, #0]
 800defe:	f013 0207 	ands.w	r2, r3, #7
 800df02:	4601      	mov	r1, r0
 800df04:	d00b      	beq.n	800df1e <__lo0bits+0x22>
 800df06:	07da      	lsls	r2, r3, #31
 800df08:	d424      	bmi.n	800df54 <__lo0bits+0x58>
 800df0a:	0798      	lsls	r0, r3, #30
 800df0c:	bf49      	itett	mi
 800df0e:	085b      	lsrmi	r3, r3, #1
 800df10:	089b      	lsrpl	r3, r3, #2
 800df12:	2001      	movmi	r0, #1
 800df14:	600b      	strmi	r3, [r1, #0]
 800df16:	bf5c      	itt	pl
 800df18:	600b      	strpl	r3, [r1, #0]
 800df1a:	2002      	movpl	r0, #2
 800df1c:	4770      	bx	lr
 800df1e:	b298      	uxth	r0, r3
 800df20:	b9b0      	cbnz	r0, 800df50 <__lo0bits+0x54>
 800df22:	0c1b      	lsrs	r3, r3, #16
 800df24:	2010      	movs	r0, #16
 800df26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df2a:	bf04      	itt	eq
 800df2c:	0a1b      	lsreq	r3, r3, #8
 800df2e:	3008      	addeq	r0, #8
 800df30:	071a      	lsls	r2, r3, #28
 800df32:	bf04      	itt	eq
 800df34:	091b      	lsreq	r3, r3, #4
 800df36:	3004      	addeq	r0, #4
 800df38:	079a      	lsls	r2, r3, #30
 800df3a:	bf04      	itt	eq
 800df3c:	089b      	lsreq	r3, r3, #2
 800df3e:	3002      	addeq	r0, #2
 800df40:	07da      	lsls	r2, r3, #31
 800df42:	d403      	bmi.n	800df4c <__lo0bits+0x50>
 800df44:	085b      	lsrs	r3, r3, #1
 800df46:	f100 0001 	add.w	r0, r0, #1
 800df4a:	d005      	beq.n	800df58 <__lo0bits+0x5c>
 800df4c:	600b      	str	r3, [r1, #0]
 800df4e:	4770      	bx	lr
 800df50:	4610      	mov	r0, r2
 800df52:	e7e8      	b.n	800df26 <__lo0bits+0x2a>
 800df54:	2000      	movs	r0, #0
 800df56:	4770      	bx	lr
 800df58:	2020      	movs	r0, #32
 800df5a:	4770      	bx	lr

0800df5c <__i2b>:
 800df5c:	b510      	push	{r4, lr}
 800df5e:	460c      	mov	r4, r1
 800df60:	2101      	movs	r1, #1
 800df62:	f7ff feff 	bl	800dd64 <_Balloc>
 800df66:	4602      	mov	r2, r0
 800df68:	b928      	cbnz	r0, 800df76 <__i2b+0x1a>
 800df6a:	4b05      	ldr	r3, [pc, #20]	; (800df80 <__i2b+0x24>)
 800df6c:	4805      	ldr	r0, [pc, #20]	; (800df84 <__i2b+0x28>)
 800df6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df72:	f000 fb3f 	bl	800e5f4 <__assert_func>
 800df76:	2301      	movs	r3, #1
 800df78:	6144      	str	r4, [r0, #20]
 800df7a:	6103      	str	r3, [r0, #16]
 800df7c:	bd10      	pop	{r4, pc}
 800df7e:	bf00      	nop
 800df80:	0800f223 	.word	0x0800f223
 800df84:	0800f234 	.word	0x0800f234

0800df88 <__multiply>:
 800df88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8c:	4614      	mov	r4, r2
 800df8e:	690a      	ldr	r2, [r1, #16]
 800df90:	6923      	ldr	r3, [r4, #16]
 800df92:	429a      	cmp	r2, r3
 800df94:	bfb8      	it	lt
 800df96:	460b      	movlt	r3, r1
 800df98:	460d      	mov	r5, r1
 800df9a:	bfbc      	itt	lt
 800df9c:	4625      	movlt	r5, r4
 800df9e:	461c      	movlt	r4, r3
 800dfa0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dfa4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfa8:	68ab      	ldr	r3, [r5, #8]
 800dfaa:	6869      	ldr	r1, [r5, #4]
 800dfac:	eb0a 0709 	add.w	r7, sl, r9
 800dfb0:	42bb      	cmp	r3, r7
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	bfb8      	it	lt
 800dfb6:	3101      	addlt	r1, #1
 800dfb8:	f7ff fed4 	bl	800dd64 <_Balloc>
 800dfbc:	b930      	cbnz	r0, 800dfcc <__multiply+0x44>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	4b42      	ldr	r3, [pc, #264]	; (800e0cc <__multiply+0x144>)
 800dfc2:	4843      	ldr	r0, [pc, #268]	; (800e0d0 <__multiply+0x148>)
 800dfc4:	f240 115d 	movw	r1, #349	; 0x15d
 800dfc8:	f000 fb14 	bl	800e5f4 <__assert_func>
 800dfcc:	f100 0614 	add.w	r6, r0, #20
 800dfd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dfd4:	4633      	mov	r3, r6
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	4543      	cmp	r3, r8
 800dfda:	d31e      	bcc.n	800e01a <__multiply+0x92>
 800dfdc:	f105 0c14 	add.w	ip, r5, #20
 800dfe0:	f104 0314 	add.w	r3, r4, #20
 800dfe4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dfe8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dfec:	9202      	str	r2, [sp, #8]
 800dfee:	ebac 0205 	sub.w	r2, ip, r5
 800dff2:	3a15      	subs	r2, #21
 800dff4:	f022 0203 	bic.w	r2, r2, #3
 800dff8:	3204      	adds	r2, #4
 800dffa:	f105 0115 	add.w	r1, r5, #21
 800dffe:	458c      	cmp	ip, r1
 800e000:	bf38      	it	cc
 800e002:	2204      	movcc	r2, #4
 800e004:	9201      	str	r2, [sp, #4]
 800e006:	9a02      	ldr	r2, [sp, #8]
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d808      	bhi.n	800e020 <__multiply+0x98>
 800e00e:	2f00      	cmp	r7, #0
 800e010:	dc55      	bgt.n	800e0be <__multiply+0x136>
 800e012:	6107      	str	r7, [r0, #16]
 800e014:	b005      	add	sp, #20
 800e016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01a:	f843 2b04 	str.w	r2, [r3], #4
 800e01e:	e7db      	b.n	800dfd8 <__multiply+0x50>
 800e020:	f8b3 a000 	ldrh.w	sl, [r3]
 800e024:	f1ba 0f00 	cmp.w	sl, #0
 800e028:	d020      	beq.n	800e06c <__multiply+0xe4>
 800e02a:	f105 0e14 	add.w	lr, r5, #20
 800e02e:	46b1      	mov	r9, r6
 800e030:	2200      	movs	r2, #0
 800e032:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e036:	f8d9 b000 	ldr.w	fp, [r9]
 800e03a:	b2a1      	uxth	r1, r4
 800e03c:	fa1f fb8b 	uxth.w	fp, fp
 800e040:	fb0a b101 	mla	r1, sl, r1, fp
 800e044:	4411      	add	r1, r2
 800e046:	f8d9 2000 	ldr.w	r2, [r9]
 800e04a:	0c24      	lsrs	r4, r4, #16
 800e04c:	0c12      	lsrs	r2, r2, #16
 800e04e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e052:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e056:	b289      	uxth	r1, r1
 800e058:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e05c:	45f4      	cmp	ip, lr
 800e05e:	f849 1b04 	str.w	r1, [r9], #4
 800e062:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e066:	d8e4      	bhi.n	800e032 <__multiply+0xaa>
 800e068:	9901      	ldr	r1, [sp, #4]
 800e06a:	5072      	str	r2, [r6, r1]
 800e06c:	9a03      	ldr	r2, [sp, #12]
 800e06e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e072:	3304      	adds	r3, #4
 800e074:	f1b9 0f00 	cmp.w	r9, #0
 800e078:	d01f      	beq.n	800e0ba <__multiply+0x132>
 800e07a:	6834      	ldr	r4, [r6, #0]
 800e07c:	f105 0114 	add.w	r1, r5, #20
 800e080:	46b6      	mov	lr, r6
 800e082:	f04f 0a00 	mov.w	sl, #0
 800e086:	880a      	ldrh	r2, [r1, #0]
 800e088:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e08c:	fb09 b202 	mla	r2, r9, r2, fp
 800e090:	4492      	add	sl, r2
 800e092:	b2a4      	uxth	r4, r4
 800e094:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e098:	f84e 4b04 	str.w	r4, [lr], #4
 800e09c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e0a0:	f8be 2000 	ldrh.w	r2, [lr]
 800e0a4:	0c24      	lsrs	r4, r4, #16
 800e0a6:	fb09 2404 	mla	r4, r9, r4, r2
 800e0aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e0ae:	458c      	cmp	ip, r1
 800e0b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e0b4:	d8e7      	bhi.n	800e086 <__multiply+0xfe>
 800e0b6:	9a01      	ldr	r2, [sp, #4]
 800e0b8:	50b4      	str	r4, [r6, r2]
 800e0ba:	3604      	adds	r6, #4
 800e0bc:	e7a3      	b.n	800e006 <__multiply+0x7e>
 800e0be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d1a5      	bne.n	800e012 <__multiply+0x8a>
 800e0c6:	3f01      	subs	r7, #1
 800e0c8:	e7a1      	b.n	800e00e <__multiply+0x86>
 800e0ca:	bf00      	nop
 800e0cc:	0800f223 	.word	0x0800f223
 800e0d0:	0800f234 	.word	0x0800f234

0800e0d4 <__pow5mult>:
 800e0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d8:	4615      	mov	r5, r2
 800e0da:	f012 0203 	ands.w	r2, r2, #3
 800e0de:	4606      	mov	r6, r0
 800e0e0:	460f      	mov	r7, r1
 800e0e2:	d007      	beq.n	800e0f4 <__pow5mult+0x20>
 800e0e4:	4c25      	ldr	r4, [pc, #148]	; (800e17c <__pow5mult+0xa8>)
 800e0e6:	3a01      	subs	r2, #1
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0ee:	f7ff fe9b 	bl	800de28 <__multadd>
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	10ad      	asrs	r5, r5, #2
 800e0f6:	d03d      	beq.n	800e174 <__pow5mult+0xa0>
 800e0f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e0fa:	b97c      	cbnz	r4, 800e11c <__pow5mult+0x48>
 800e0fc:	2010      	movs	r0, #16
 800e0fe:	f7ff fe29 	bl	800dd54 <malloc>
 800e102:	4602      	mov	r2, r0
 800e104:	6270      	str	r0, [r6, #36]	; 0x24
 800e106:	b928      	cbnz	r0, 800e114 <__pow5mult+0x40>
 800e108:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <__pow5mult+0xac>)
 800e10a:	481e      	ldr	r0, [pc, #120]	; (800e184 <__pow5mult+0xb0>)
 800e10c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e110:	f000 fa70 	bl	800e5f4 <__assert_func>
 800e114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e118:	6004      	str	r4, [r0, #0]
 800e11a:	60c4      	str	r4, [r0, #12]
 800e11c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e124:	b94c      	cbnz	r4, 800e13a <__pow5mult+0x66>
 800e126:	f240 2171 	movw	r1, #625	; 0x271
 800e12a:	4630      	mov	r0, r6
 800e12c:	f7ff ff16 	bl	800df5c <__i2b>
 800e130:	2300      	movs	r3, #0
 800e132:	f8c8 0008 	str.w	r0, [r8, #8]
 800e136:	4604      	mov	r4, r0
 800e138:	6003      	str	r3, [r0, #0]
 800e13a:	f04f 0900 	mov.w	r9, #0
 800e13e:	07eb      	lsls	r3, r5, #31
 800e140:	d50a      	bpl.n	800e158 <__pow5mult+0x84>
 800e142:	4639      	mov	r1, r7
 800e144:	4622      	mov	r2, r4
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ff1e 	bl	800df88 <__multiply>
 800e14c:	4639      	mov	r1, r7
 800e14e:	4680      	mov	r8, r0
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff fe47 	bl	800dde4 <_Bfree>
 800e156:	4647      	mov	r7, r8
 800e158:	106d      	asrs	r5, r5, #1
 800e15a:	d00b      	beq.n	800e174 <__pow5mult+0xa0>
 800e15c:	6820      	ldr	r0, [r4, #0]
 800e15e:	b938      	cbnz	r0, 800e170 <__pow5mult+0x9c>
 800e160:	4622      	mov	r2, r4
 800e162:	4621      	mov	r1, r4
 800e164:	4630      	mov	r0, r6
 800e166:	f7ff ff0f 	bl	800df88 <__multiply>
 800e16a:	6020      	str	r0, [r4, #0]
 800e16c:	f8c0 9000 	str.w	r9, [r0]
 800e170:	4604      	mov	r4, r0
 800e172:	e7e4      	b.n	800e13e <__pow5mult+0x6a>
 800e174:	4638      	mov	r0, r7
 800e176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e17a:	bf00      	nop
 800e17c:	0800f388 	.word	0x0800f388
 800e180:	0800f1ad 	.word	0x0800f1ad
 800e184:	0800f234 	.word	0x0800f234

0800e188 <__lshift>:
 800e188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e18c:	460c      	mov	r4, r1
 800e18e:	6849      	ldr	r1, [r1, #4]
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	4607      	mov	r7, r0
 800e19a:	4691      	mov	r9, r2
 800e19c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1a0:	f108 0601 	add.w	r6, r8, #1
 800e1a4:	42b3      	cmp	r3, r6
 800e1a6:	db0b      	blt.n	800e1c0 <__lshift+0x38>
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	f7ff fddb 	bl	800dd64 <_Balloc>
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	b948      	cbnz	r0, 800e1c6 <__lshift+0x3e>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	4b28      	ldr	r3, [pc, #160]	; (800e258 <__lshift+0xd0>)
 800e1b6:	4829      	ldr	r0, [pc, #164]	; (800e25c <__lshift+0xd4>)
 800e1b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1bc:	f000 fa1a 	bl	800e5f4 <__assert_func>
 800e1c0:	3101      	adds	r1, #1
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	e7ee      	b.n	800e1a4 <__lshift+0x1c>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f100 0114 	add.w	r1, r0, #20
 800e1cc:	f100 0210 	add.w	r2, r0, #16
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	4553      	cmp	r3, sl
 800e1d4:	db33      	blt.n	800e23e <__lshift+0xb6>
 800e1d6:	6920      	ldr	r0, [r4, #16]
 800e1d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1dc:	f104 0314 	add.w	r3, r4, #20
 800e1e0:	f019 091f 	ands.w	r9, r9, #31
 800e1e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1ec:	d02b      	beq.n	800e246 <__lshift+0xbe>
 800e1ee:	f1c9 0e20 	rsb	lr, r9, #32
 800e1f2:	468a      	mov	sl, r1
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	fa00 f009 	lsl.w	r0, r0, r9
 800e1fc:	4302      	orrs	r2, r0
 800e1fe:	f84a 2b04 	str.w	r2, [sl], #4
 800e202:	f853 2b04 	ldr.w	r2, [r3], #4
 800e206:	459c      	cmp	ip, r3
 800e208:	fa22 f20e 	lsr.w	r2, r2, lr
 800e20c:	d8f3      	bhi.n	800e1f6 <__lshift+0x6e>
 800e20e:	ebac 0304 	sub.w	r3, ip, r4
 800e212:	3b15      	subs	r3, #21
 800e214:	f023 0303 	bic.w	r3, r3, #3
 800e218:	3304      	adds	r3, #4
 800e21a:	f104 0015 	add.w	r0, r4, #21
 800e21e:	4584      	cmp	ip, r0
 800e220:	bf38      	it	cc
 800e222:	2304      	movcc	r3, #4
 800e224:	50ca      	str	r2, [r1, r3]
 800e226:	b10a      	cbz	r2, 800e22c <__lshift+0xa4>
 800e228:	f108 0602 	add.w	r6, r8, #2
 800e22c:	3e01      	subs	r6, #1
 800e22e:	4638      	mov	r0, r7
 800e230:	612e      	str	r6, [r5, #16]
 800e232:	4621      	mov	r1, r4
 800e234:	f7ff fdd6 	bl	800dde4 <_Bfree>
 800e238:	4628      	mov	r0, r5
 800e23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e23e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e242:	3301      	adds	r3, #1
 800e244:	e7c5      	b.n	800e1d2 <__lshift+0x4a>
 800e246:	3904      	subs	r1, #4
 800e248:	f853 2b04 	ldr.w	r2, [r3], #4
 800e24c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e250:	459c      	cmp	ip, r3
 800e252:	d8f9      	bhi.n	800e248 <__lshift+0xc0>
 800e254:	e7ea      	b.n	800e22c <__lshift+0xa4>
 800e256:	bf00      	nop
 800e258:	0800f223 	.word	0x0800f223
 800e25c:	0800f234 	.word	0x0800f234

0800e260 <__mcmp>:
 800e260:	b530      	push	{r4, r5, lr}
 800e262:	6902      	ldr	r2, [r0, #16]
 800e264:	690c      	ldr	r4, [r1, #16]
 800e266:	1b12      	subs	r2, r2, r4
 800e268:	d10e      	bne.n	800e288 <__mcmp+0x28>
 800e26a:	f100 0314 	add.w	r3, r0, #20
 800e26e:	3114      	adds	r1, #20
 800e270:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e274:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e278:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e27c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e280:	42a5      	cmp	r5, r4
 800e282:	d003      	beq.n	800e28c <__mcmp+0x2c>
 800e284:	d305      	bcc.n	800e292 <__mcmp+0x32>
 800e286:	2201      	movs	r2, #1
 800e288:	4610      	mov	r0, r2
 800e28a:	bd30      	pop	{r4, r5, pc}
 800e28c:	4283      	cmp	r3, r0
 800e28e:	d3f3      	bcc.n	800e278 <__mcmp+0x18>
 800e290:	e7fa      	b.n	800e288 <__mcmp+0x28>
 800e292:	f04f 32ff 	mov.w	r2, #4294967295
 800e296:	e7f7      	b.n	800e288 <__mcmp+0x28>

0800e298 <__mdiff>:
 800e298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29c:	460c      	mov	r4, r1
 800e29e:	4606      	mov	r6, r0
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	4617      	mov	r7, r2
 800e2a6:	f7ff ffdb 	bl	800e260 <__mcmp>
 800e2aa:	1e05      	subs	r5, r0, #0
 800e2ac:	d110      	bne.n	800e2d0 <__mdiff+0x38>
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff fd57 	bl	800dd64 <_Balloc>
 800e2b6:	b930      	cbnz	r0, 800e2c6 <__mdiff+0x2e>
 800e2b8:	4b39      	ldr	r3, [pc, #228]	; (800e3a0 <__mdiff+0x108>)
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	f240 2132 	movw	r1, #562	; 0x232
 800e2c0:	4838      	ldr	r0, [pc, #224]	; (800e3a4 <__mdiff+0x10c>)
 800e2c2:	f000 f997 	bl	800e5f4 <__assert_func>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d0:	bfa4      	itt	ge
 800e2d2:	463b      	movge	r3, r7
 800e2d4:	4627      	movge	r7, r4
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	bfa6      	itte	ge
 800e2dc:	461c      	movge	r4, r3
 800e2de:	2500      	movge	r5, #0
 800e2e0:	2501      	movlt	r5, #1
 800e2e2:	f7ff fd3f 	bl	800dd64 <_Balloc>
 800e2e6:	b920      	cbnz	r0, 800e2f2 <__mdiff+0x5a>
 800e2e8:	4b2d      	ldr	r3, [pc, #180]	; (800e3a0 <__mdiff+0x108>)
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e2f0:	e7e6      	b.n	800e2c0 <__mdiff+0x28>
 800e2f2:	693e      	ldr	r6, [r7, #16]
 800e2f4:	60c5      	str	r5, [r0, #12]
 800e2f6:	6925      	ldr	r5, [r4, #16]
 800e2f8:	f107 0114 	add.w	r1, r7, #20
 800e2fc:	f104 0914 	add.w	r9, r4, #20
 800e300:	f100 0e14 	add.w	lr, r0, #20
 800e304:	f107 0210 	add.w	r2, r7, #16
 800e308:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e30c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e310:	46f2      	mov	sl, lr
 800e312:	2700      	movs	r7, #0
 800e314:	f859 3b04 	ldr.w	r3, [r9], #4
 800e318:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e31c:	fa1f f883 	uxth.w	r8, r3
 800e320:	fa17 f78b 	uxtah	r7, r7, fp
 800e324:	0c1b      	lsrs	r3, r3, #16
 800e326:	eba7 0808 	sub.w	r8, r7, r8
 800e32a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e32e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e332:	fa1f f888 	uxth.w	r8, r8
 800e336:	141f      	asrs	r7, r3, #16
 800e338:	454d      	cmp	r5, r9
 800e33a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e33e:	f84a 3b04 	str.w	r3, [sl], #4
 800e342:	d8e7      	bhi.n	800e314 <__mdiff+0x7c>
 800e344:	1b2b      	subs	r3, r5, r4
 800e346:	3b15      	subs	r3, #21
 800e348:	f023 0303 	bic.w	r3, r3, #3
 800e34c:	3304      	adds	r3, #4
 800e34e:	3415      	adds	r4, #21
 800e350:	42a5      	cmp	r5, r4
 800e352:	bf38      	it	cc
 800e354:	2304      	movcc	r3, #4
 800e356:	4419      	add	r1, r3
 800e358:	4473      	add	r3, lr
 800e35a:	469e      	mov	lr, r3
 800e35c:	460d      	mov	r5, r1
 800e35e:	4565      	cmp	r5, ip
 800e360:	d30e      	bcc.n	800e380 <__mdiff+0xe8>
 800e362:	f10c 0203 	add.w	r2, ip, #3
 800e366:	1a52      	subs	r2, r2, r1
 800e368:	f022 0203 	bic.w	r2, r2, #3
 800e36c:	3903      	subs	r1, #3
 800e36e:	458c      	cmp	ip, r1
 800e370:	bf38      	it	cc
 800e372:	2200      	movcc	r2, #0
 800e374:	441a      	add	r2, r3
 800e376:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e37a:	b17b      	cbz	r3, 800e39c <__mdiff+0x104>
 800e37c:	6106      	str	r6, [r0, #16]
 800e37e:	e7a5      	b.n	800e2cc <__mdiff+0x34>
 800e380:	f855 8b04 	ldr.w	r8, [r5], #4
 800e384:	fa17 f488 	uxtah	r4, r7, r8
 800e388:	1422      	asrs	r2, r4, #16
 800e38a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e38e:	b2a4      	uxth	r4, r4
 800e390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e394:	f84e 4b04 	str.w	r4, [lr], #4
 800e398:	1417      	asrs	r7, r2, #16
 800e39a:	e7e0      	b.n	800e35e <__mdiff+0xc6>
 800e39c:	3e01      	subs	r6, #1
 800e39e:	e7ea      	b.n	800e376 <__mdiff+0xde>
 800e3a0:	0800f223 	.word	0x0800f223
 800e3a4:	0800f234 	.word	0x0800f234

0800e3a8 <__d2b>:
 800e3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	4689      	mov	r9, r1
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	ec57 6b10 	vmov	r6, r7, d0
 800e3b4:	4690      	mov	r8, r2
 800e3b6:	f7ff fcd5 	bl	800dd64 <_Balloc>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	b930      	cbnz	r0, 800e3cc <__d2b+0x24>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	4b25      	ldr	r3, [pc, #148]	; (800e458 <__d2b+0xb0>)
 800e3c2:	4826      	ldr	r0, [pc, #152]	; (800e45c <__d2b+0xb4>)
 800e3c4:	f240 310a 	movw	r1, #778	; 0x30a
 800e3c8:	f000 f914 	bl	800e5f4 <__assert_func>
 800e3cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3d4:	bb35      	cbnz	r5, 800e424 <__d2b+0x7c>
 800e3d6:	2e00      	cmp	r6, #0
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	d028      	beq.n	800e42e <__d2b+0x86>
 800e3dc:	4668      	mov	r0, sp
 800e3de:	9600      	str	r6, [sp, #0]
 800e3e0:	f7ff fd8c 	bl	800defc <__lo0bits>
 800e3e4:	9900      	ldr	r1, [sp, #0]
 800e3e6:	b300      	cbz	r0, 800e42a <__d2b+0x82>
 800e3e8:	9a01      	ldr	r2, [sp, #4]
 800e3ea:	f1c0 0320 	rsb	r3, r0, #32
 800e3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f2:	430b      	orrs	r3, r1
 800e3f4:	40c2      	lsrs	r2, r0
 800e3f6:	6163      	str	r3, [r4, #20]
 800e3f8:	9201      	str	r2, [sp, #4]
 800e3fa:	9b01      	ldr	r3, [sp, #4]
 800e3fc:	61a3      	str	r3, [r4, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bf14      	ite	ne
 800e402:	2202      	movne	r2, #2
 800e404:	2201      	moveq	r2, #1
 800e406:	6122      	str	r2, [r4, #16]
 800e408:	b1d5      	cbz	r5, 800e440 <__d2b+0x98>
 800e40a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e40e:	4405      	add	r5, r0
 800e410:	f8c9 5000 	str.w	r5, [r9]
 800e414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e418:	f8c8 0000 	str.w	r0, [r8]
 800e41c:	4620      	mov	r0, r4
 800e41e:	b003      	add	sp, #12
 800e420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e428:	e7d5      	b.n	800e3d6 <__d2b+0x2e>
 800e42a:	6161      	str	r1, [r4, #20]
 800e42c:	e7e5      	b.n	800e3fa <__d2b+0x52>
 800e42e:	a801      	add	r0, sp, #4
 800e430:	f7ff fd64 	bl	800defc <__lo0bits>
 800e434:	9b01      	ldr	r3, [sp, #4]
 800e436:	6163      	str	r3, [r4, #20]
 800e438:	2201      	movs	r2, #1
 800e43a:	6122      	str	r2, [r4, #16]
 800e43c:	3020      	adds	r0, #32
 800e43e:	e7e3      	b.n	800e408 <__d2b+0x60>
 800e440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e448:	f8c9 0000 	str.w	r0, [r9]
 800e44c:	6918      	ldr	r0, [r3, #16]
 800e44e:	f7ff fd35 	bl	800debc <__hi0bits>
 800e452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e456:	e7df      	b.n	800e418 <__d2b+0x70>
 800e458:	0800f223 	.word	0x0800f223
 800e45c:	0800f234 	.word	0x0800f234

0800e460 <_calloc_r>:
 800e460:	b513      	push	{r0, r1, r4, lr}
 800e462:	434a      	muls	r2, r1
 800e464:	4611      	mov	r1, r2
 800e466:	9201      	str	r2, [sp, #4]
 800e468:	f000 f85a 	bl	800e520 <_malloc_r>
 800e46c:	4604      	mov	r4, r0
 800e46e:	b118      	cbz	r0, 800e478 <_calloc_r+0x18>
 800e470:	9a01      	ldr	r2, [sp, #4]
 800e472:	2100      	movs	r1, #0
 800e474:	f7fe fa0e 	bl	800c894 <memset>
 800e478:	4620      	mov	r0, r4
 800e47a:	b002      	add	sp, #8
 800e47c:	bd10      	pop	{r4, pc}
	...

0800e480 <_free_r>:
 800e480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e482:	2900      	cmp	r1, #0
 800e484:	d048      	beq.n	800e518 <_free_r+0x98>
 800e486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48a:	9001      	str	r0, [sp, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f1a1 0404 	sub.w	r4, r1, #4
 800e492:	bfb8      	it	lt
 800e494:	18e4      	addlt	r4, r4, r3
 800e496:	f000 f8ef 	bl	800e678 <__malloc_lock>
 800e49a:	4a20      	ldr	r2, [pc, #128]	; (800e51c <_free_r+0x9c>)
 800e49c:	9801      	ldr	r0, [sp, #4]
 800e49e:	6813      	ldr	r3, [r2, #0]
 800e4a0:	4615      	mov	r5, r2
 800e4a2:	b933      	cbnz	r3, 800e4b2 <_free_r+0x32>
 800e4a4:	6063      	str	r3, [r4, #4]
 800e4a6:	6014      	str	r4, [r2, #0]
 800e4a8:	b003      	add	sp, #12
 800e4aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4ae:	f000 b8e9 	b.w	800e684 <__malloc_unlock>
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	d90b      	bls.n	800e4ce <_free_r+0x4e>
 800e4b6:	6821      	ldr	r1, [r4, #0]
 800e4b8:	1862      	adds	r2, r4, r1
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	bf04      	itt	eq
 800e4be:	681a      	ldreq	r2, [r3, #0]
 800e4c0:	685b      	ldreq	r3, [r3, #4]
 800e4c2:	6063      	str	r3, [r4, #4]
 800e4c4:	bf04      	itt	eq
 800e4c6:	1852      	addeq	r2, r2, r1
 800e4c8:	6022      	streq	r2, [r4, #0]
 800e4ca:	602c      	str	r4, [r5, #0]
 800e4cc:	e7ec      	b.n	800e4a8 <_free_r+0x28>
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	b10b      	cbz	r3, 800e4d8 <_free_r+0x58>
 800e4d4:	42a3      	cmp	r3, r4
 800e4d6:	d9fa      	bls.n	800e4ce <_free_r+0x4e>
 800e4d8:	6811      	ldr	r1, [r2, #0]
 800e4da:	1855      	adds	r5, r2, r1
 800e4dc:	42a5      	cmp	r5, r4
 800e4de:	d10b      	bne.n	800e4f8 <_free_r+0x78>
 800e4e0:	6824      	ldr	r4, [r4, #0]
 800e4e2:	4421      	add	r1, r4
 800e4e4:	1854      	adds	r4, r2, r1
 800e4e6:	42a3      	cmp	r3, r4
 800e4e8:	6011      	str	r1, [r2, #0]
 800e4ea:	d1dd      	bne.n	800e4a8 <_free_r+0x28>
 800e4ec:	681c      	ldr	r4, [r3, #0]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	6053      	str	r3, [r2, #4]
 800e4f2:	4421      	add	r1, r4
 800e4f4:	6011      	str	r1, [r2, #0]
 800e4f6:	e7d7      	b.n	800e4a8 <_free_r+0x28>
 800e4f8:	d902      	bls.n	800e500 <_free_r+0x80>
 800e4fa:	230c      	movs	r3, #12
 800e4fc:	6003      	str	r3, [r0, #0]
 800e4fe:	e7d3      	b.n	800e4a8 <_free_r+0x28>
 800e500:	6825      	ldr	r5, [r4, #0]
 800e502:	1961      	adds	r1, r4, r5
 800e504:	428b      	cmp	r3, r1
 800e506:	bf04      	itt	eq
 800e508:	6819      	ldreq	r1, [r3, #0]
 800e50a:	685b      	ldreq	r3, [r3, #4]
 800e50c:	6063      	str	r3, [r4, #4]
 800e50e:	bf04      	itt	eq
 800e510:	1949      	addeq	r1, r1, r5
 800e512:	6021      	streq	r1, [r4, #0]
 800e514:	6054      	str	r4, [r2, #4]
 800e516:	e7c7      	b.n	800e4a8 <_free_r+0x28>
 800e518:	b003      	add	sp, #12
 800e51a:	bd30      	pop	{r4, r5, pc}
 800e51c:	24000204 	.word	0x24000204

0800e520 <_malloc_r>:
 800e520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e522:	1ccd      	adds	r5, r1, #3
 800e524:	f025 0503 	bic.w	r5, r5, #3
 800e528:	3508      	adds	r5, #8
 800e52a:	2d0c      	cmp	r5, #12
 800e52c:	bf38      	it	cc
 800e52e:	250c      	movcc	r5, #12
 800e530:	2d00      	cmp	r5, #0
 800e532:	4606      	mov	r6, r0
 800e534:	db01      	blt.n	800e53a <_malloc_r+0x1a>
 800e536:	42a9      	cmp	r1, r5
 800e538:	d903      	bls.n	800e542 <_malloc_r+0x22>
 800e53a:	230c      	movs	r3, #12
 800e53c:	6033      	str	r3, [r6, #0]
 800e53e:	2000      	movs	r0, #0
 800e540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e542:	f000 f899 	bl	800e678 <__malloc_lock>
 800e546:	4921      	ldr	r1, [pc, #132]	; (800e5cc <_malloc_r+0xac>)
 800e548:	680a      	ldr	r2, [r1, #0]
 800e54a:	4614      	mov	r4, r2
 800e54c:	b99c      	cbnz	r4, 800e576 <_malloc_r+0x56>
 800e54e:	4f20      	ldr	r7, [pc, #128]	; (800e5d0 <_malloc_r+0xb0>)
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	b923      	cbnz	r3, 800e55e <_malloc_r+0x3e>
 800e554:	4621      	mov	r1, r4
 800e556:	4630      	mov	r0, r6
 800e558:	f000 f83c 	bl	800e5d4 <_sbrk_r>
 800e55c:	6038      	str	r0, [r7, #0]
 800e55e:	4629      	mov	r1, r5
 800e560:	4630      	mov	r0, r6
 800e562:	f000 f837 	bl	800e5d4 <_sbrk_r>
 800e566:	1c43      	adds	r3, r0, #1
 800e568:	d123      	bne.n	800e5b2 <_malloc_r+0x92>
 800e56a:	230c      	movs	r3, #12
 800e56c:	6033      	str	r3, [r6, #0]
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 f888 	bl	800e684 <__malloc_unlock>
 800e574:	e7e3      	b.n	800e53e <_malloc_r+0x1e>
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	1b5b      	subs	r3, r3, r5
 800e57a:	d417      	bmi.n	800e5ac <_malloc_r+0x8c>
 800e57c:	2b0b      	cmp	r3, #11
 800e57e:	d903      	bls.n	800e588 <_malloc_r+0x68>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	441c      	add	r4, r3
 800e584:	6025      	str	r5, [r4, #0]
 800e586:	e004      	b.n	800e592 <_malloc_r+0x72>
 800e588:	6863      	ldr	r3, [r4, #4]
 800e58a:	42a2      	cmp	r2, r4
 800e58c:	bf0c      	ite	eq
 800e58e:	600b      	streq	r3, [r1, #0]
 800e590:	6053      	strne	r3, [r2, #4]
 800e592:	4630      	mov	r0, r6
 800e594:	f000 f876 	bl	800e684 <__malloc_unlock>
 800e598:	f104 000b 	add.w	r0, r4, #11
 800e59c:	1d23      	adds	r3, r4, #4
 800e59e:	f020 0007 	bic.w	r0, r0, #7
 800e5a2:	1ac2      	subs	r2, r0, r3
 800e5a4:	d0cc      	beq.n	800e540 <_malloc_r+0x20>
 800e5a6:	1a1b      	subs	r3, r3, r0
 800e5a8:	50a3      	str	r3, [r4, r2]
 800e5aa:	e7c9      	b.n	800e540 <_malloc_r+0x20>
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	6864      	ldr	r4, [r4, #4]
 800e5b0:	e7cc      	b.n	800e54c <_malloc_r+0x2c>
 800e5b2:	1cc4      	adds	r4, r0, #3
 800e5b4:	f024 0403 	bic.w	r4, r4, #3
 800e5b8:	42a0      	cmp	r0, r4
 800e5ba:	d0e3      	beq.n	800e584 <_malloc_r+0x64>
 800e5bc:	1a21      	subs	r1, r4, r0
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f000 f808 	bl	800e5d4 <_sbrk_r>
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d1dd      	bne.n	800e584 <_malloc_r+0x64>
 800e5c8:	e7cf      	b.n	800e56a <_malloc_r+0x4a>
 800e5ca:	bf00      	nop
 800e5cc:	24000204 	.word	0x24000204
 800e5d0:	24000208 	.word	0x24000208

0800e5d4 <_sbrk_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d06      	ldr	r5, [pc, #24]	; (800e5f0 <_sbrk_r+0x1c>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	f7f2 fff4 	bl	80015cc <_sbrk>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d102      	bne.n	800e5ee <_sbrk_r+0x1a>
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	b103      	cbz	r3, 800e5ee <_sbrk_r+0x1a>
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	24000a48 	.word	0x24000a48

0800e5f4 <__assert_func>:
 800e5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5f6:	4614      	mov	r4, r2
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4b09      	ldr	r3, [pc, #36]	; (800e620 <__assert_func+0x2c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4605      	mov	r5, r0
 800e600:	68d8      	ldr	r0, [r3, #12]
 800e602:	b14c      	cbz	r4, 800e618 <__assert_func+0x24>
 800e604:	4b07      	ldr	r3, [pc, #28]	; (800e624 <__assert_func+0x30>)
 800e606:	9100      	str	r1, [sp, #0]
 800e608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e60c:	4906      	ldr	r1, [pc, #24]	; (800e628 <__assert_func+0x34>)
 800e60e:	462b      	mov	r3, r5
 800e610:	f000 f80e 	bl	800e630 <fiprintf>
 800e614:	f000 fa64 	bl	800eae0 <abort>
 800e618:	4b04      	ldr	r3, [pc, #16]	; (800e62c <__assert_func+0x38>)
 800e61a:	461c      	mov	r4, r3
 800e61c:	e7f3      	b.n	800e606 <__assert_func+0x12>
 800e61e:	bf00      	nop
 800e620:	24000010 	.word	0x24000010
 800e624:	0800f394 	.word	0x0800f394
 800e628:	0800f3a1 	.word	0x0800f3a1
 800e62c:	0800f3cf 	.word	0x0800f3cf

0800e630 <fiprintf>:
 800e630:	b40e      	push	{r1, r2, r3}
 800e632:	b503      	push	{r0, r1, lr}
 800e634:	4601      	mov	r1, r0
 800e636:	ab03      	add	r3, sp, #12
 800e638:	4805      	ldr	r0, [pc, #20]	; (800e650 <fiprintf+0x20>)
 800e63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e63e:	6800      	ldr	r0, [r0, #0]
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	f000 f84f 	bl	800e6e4 <_vfiprintf_r>
 800e646:	b002      	add	sp, #8
 800e648:	f85d eb04 	ldr.w	lr, [sp], #4
 800e64c:	b003      	add	sp, #12
 800e64e:	4770      	bx	lr
 800e650:	24000010 	.word	0x24000010

0800e654 <__ascii_mbtowc>:
 800e654:	b082      	sub	sp, #8
 800e656:	b901      	cbnz	r1, 800e65a <__ascii_mbtowc+0x6>
 800e658:	a901      	add	r1, sp, #4
 800e65a:	b142      	cbz	r2, 800e66e <__ascii_mbtowc+0x1a>
 800e65c:	b14b      	cbz	r3, 800e672 <__ascii_mbtowc+0x1e>
 800e65e:	7813      	ldrb	r3, [r2, #0]
 800e660:	600b      	str	r3, [r1, #0]
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	1e10      	subs	r0, r2, #0
 800e666:	bf18      	it	ne
 800e668:	2001      	movne	r0, #1
 800e66a:	b002      	add	sp, #8
 800e66c:	4770      	bx	lr
 800e66e:	4610      	mov	r0, r2
 800e670:	e7fb      	b.n	800e66a <__ascii_mbtowc+0x16>
 800e672:	f06f 0001 	mvn.w	r0, #1
 800e676:	e7f8      	b.n	800e66a <__ascii_mbtowc+0x16>

0800e678 <__malloc_lock>:
 800e678:	4801      	ldr	r0, [pc, #4]	; (800e680 <__malloc_lock+0x8>)
 800e67a:	f000 bbf1 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800e67e:	bf00      	nop
 800e680:	24000a50 	.word	0x24000a50

0800e684 <__malloc_unlock>:
 800e684:	4801      	ldr	r0, [pc, #4]	; (800e68c <__malloc_unlock+0x8>)
 800e686:	f000 bbec 	b.w	800ee62 <__retarget_lock_release_recursive>
 800e68a:	bf00      	nop
 800e68c:	24000a50 	.word	0x24000a50

0800e690 <__sfputc_r>:
 800e690:	6893      	ldr	r3, [r2, #8]
 800e692:	3b01      	subs	r3, #1
 800e694:	2b00      	cmp	r3, #0
 800e696:	b410      	push	{r4}
 800e698:	6093      	str	r3, [r2, #8]
 800e69a:	da08      	bge.n	800e6ae <__sfputc_r+0x1e>
 800e69c:	6994      	ldr	r4, [r2, #24]
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	db01      	blt.n	800e6a6 <__sfputc_r+0x16>
 800e6a2:	290a      	cmp	r1, #10
 800e6a4:	d103      	bne.n	800e6ae <__sfputc_r+0x1e>
 800e6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6aa:	f000 b94b 	b.w	800e944 <__swbuf_r>
 800e6ae:	6813      	ldr	r3, [r2, #0]
 800e6b0:	1c58      	adds	r0, r3, #1
 800e6b2:	6010      	str	r0, [r2, #0]
 800e6b4:	7019      	strb	r1, [r3, #0]
 800e6b6:	4608      	mov	r0, r1
 800e6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6bc:	4770      	bx	lr

0800e6be <__sfputs_r>:
 800e6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	460f      	mov	r7, r1
 800e6c4:	4614      	mov	r4, r2
 800e6c6:	18d5      	adds	r5, r2, r3
 800e6c8:	42ac      	cmp	r4, r5
 800e6ca:	d101      	bne.n	800e6d0 <__sfputs_r+0x12>
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	e007      	b.n	800e6e0 <__sfputs_r+0x22>
 800e6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d4:	463a      	mov	r2, r7
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f7ff ffda 	bl	800e690 <__sfputc_r>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d1f3      	bne.n	800e6c8 <__sfputs_r+0xa>
 800e6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6e4 <_vfiprintf_r>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	b09d      	sub	sp, #116	; 0x74
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	4698      	mov	r8, r3
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	b118      	cbz	r0, 800e6fc <_vfiprintf_r+0x18>
 800e6f4:	6983      	ldr	r3, [r0, #24]
 800e6f6:	b90b      	cbnz	r3, 800e6fc <_vfiprintf_r+0x18>
 800e6f8:	f000 fb14 	bl	800ed24 <__sinit>
 800e6fc:	4b89      	ldr	r3, [pc, #548]	; (800e924 <_vfiprintf_r+0x240>)
 800e6fe:	429d      	cmp	r5, r3
 800e700:	d11b      	bne.n	800e73a <_vfiprintf_r+0x56>
 800e702:	6875      	ldr	r5, [r6, #4]
 800e704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e706:	07d9      	lsls	r1, r3, #31
 800e708:	d405      	bmi.n	800e716 <_vfiprintf_r+0x32>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	059a      	lsls	r2, r3, #22
 800e70e:	d402      	bmi.n	800e716 <_vfiprintf_r+0x32>
 800e710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e712:	f000 fba5 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800e716:	89ab      	ldrh	r3, [r5, #12]
 800e718:	071b      	lsls	r3, r3, #28
 800e71a:	d501      	bpl.n	800e720 <_vfiprintf_r+0x3c>
 800e71c:	692b      	ldr	r3, [r5, #16]
 800e71e:	b9eb      	cbnz	r3, 800e75c <_vfiprintf_r+0x78>
 800e720:	4629      	mov	r1, r5
 800e722:	4630      	mov	r0, r6
 800e724:	f000 f96e 	bl	800ea04 <__swsetup_r>
 800e728:	b1c0      	cbz	r0, 800e75c <_vfiprintf_r+0x78>
 800e72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e72c:	07dc      	lsls	r4, r3, #31
 800e72e:	d50e      	bpl.n	800e74e <_vfiprintf_r+0x6a>
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	b01d      	add	sp, #116	; 0x74
 800e736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73a:	4b7b      	ldr	r3, [pc, #492]	; (800e928 <_vfiprintf_r+0x244>)
 800e73c:	429d      	cmp	r5, r3
 800e73e:	d101      	bne.n	800e744 <_vfiprintf_r+0x60>
 800e740:	68b5      	ldr	r5, [r6, #8]
 800e742:	e7df      	b.n	800e704 <_vfiprintf_r+0x20>
 800e744:	4b79      	ldr	r3, [pc, #484]	; (800e92c <_vfiprintf_r+0x248>)
 800e746:	429d      	cmp	r5, r3
 800e748:	bf08      	it	eq
 800e74a:	68f5      	ldreq	r5, [r6, #12]
 800e74c:	e7da      	b.n	800e704 <_vfiprintf_r+0x20>
 800e74e:	89ab      	ldrh	r3, [r5, #12]
 800e750:	0598      	lsls	r0, r3, #22
 800e752:	d4ed      	bmi.n	800e730 <_vfiprintf_r+0x4c>
 800e754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e756:	f000 fb84 	bl	800ee62 <__retarget_lock_release_recursive>
 800e75a:	e7e9      	b.n	800e730 <_vfiprintf_r+0x4c>
 800e75c:	2300      	movs	r3, #0
 800e75e:	9309      	str	r3, [sp, #36]	; 0x24
 800e760:	2320      	movs	r3, #32
 800e762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e766:	f8cd 800c 	str.w	r8, [sp, #12]
 800e76a:	2330      	movs	r3, #48	; 0x30
 800e76c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e930 <_vfiprintf_r+0x24c>
 800e770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e774:	f04f 0901 	mov.w	r9, #1
 800e778:	4623      	mov	r3, r4
 800e77a:	469a      	mov	sl, r3
 800e77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e780:	b10a      	cbz	r2, 800e786 <_vfiprintf_r+0xa2>
 800e782:	2a25      	cmp	r2, #37	; 0x25
 800e784:	d1f9      	bne.n	800e77a <_vfiprintf_r+0x96>
 800e786:	ebba 0b04 	subs.w	fp, sl, r4
 800e78a:	d00b      	beq.n	800e7a4 <_vfiprintf_r+0xc0>
 800e78c:	465b      	mov	r3, fp
 800e78e:	4622      	mov	r2, r4
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f7ff ff93 	bl	800e6be <__sfputs_r>
 800e798:	3001      	adds	r0, #1
 800e79a:	f000 80aa 	beq.w	800e8f2 <_vfiprintf_r+0x20e>
 800e79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7a0:	445a      	add	r2, fp
 800e7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 80a2 	beq.w	800e8f2 <_vfiprintf_r+0x20e>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7b8:	f10a 0a01 	add.w	sl, sl, #1
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	9307      	str	r3, [sp, #28]
 800e7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c6:	4654      	mov	r4, sl
 800e7c8:	2205      	movs	r2, #5
 800e7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ce:	4858      	ldr	r0, [pc, #352]	; (800e930 <_vfiprintf_r+0x24c>)
 800e7d0:	f7f1 fda6 	bl	8000320 <memchr>
 800e7d4:	9a04      	ldr	r2, [sp, #16]
 800e7d6:	b9d8      	cbnz	r0, 800e810 <_vfiprintf_r+0x12c>
 800e7d8:	06d1      	lsls	r1, r2, #27
 800e7da:	bf44      	itt	mi
 800e7dc:	2320      	movmi	r3, #32
 800e7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e2:	0713      	lsls	r3, r2, #28
 800e7e4:	bf44      	itt	mi
 800e7e6:	232b      	movmi	r3, #43	; 0x2b
 800e7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f2:	d015      	beq.n	800e820 <_vfiprintf_r+0x13c>
 800e7f4:	9a07      	ldr	r2, [sp, #28]
 800e7f6:	4654      	mov	r4, sl
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	f04f 0c0a 	mov.w	ip, #10
 800e7fe:	4621      	mov	r1, r4
 800e800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e804:	3b30      	subs	r3, #48	; 0x30
 800e806:	2b09      	cmp	r3, #9
 800e808:	d94e      	bls.n	800e8a8 <_vfiprintf_r+0x1c4>
 800e80a:	b1b0      	cbz	r0, 800e83a <_vfiprintf_r+0x156>
 800e80c:	9207      	str	r2, [sp, #28]
 800e80e:	e014      	b.n	800e83a <_vfiprintf_r+0x156>
 800e810:	eba0 0308 	sub.w	r3, r0, r8
 800e814:	fa09 f303 	lsl.w	r3, r9, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	9304      	str	r3, [sp, #16]
 800e81c:	46a2      	mov	sl, r4
 800e81e:	e7d2      	b.n	800e7c6 <_vfiprintf_r+0xe2>
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	1d19      	adds	r1, r3, #4
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	9103      	str	r1, [sp, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	bfbb      	ittet	lt
 800e82c:	425b      	neglt	r3, r3
 800e82e:	f042 0202 	orrlt.w	r2, r2, #2
 800e832:	9307      	strge	r3, [sp, #28]
 800e834:	9307      	strlt	r3, [sp, #28]
 800e836:	bfb8      	it	lt
 800e838:	9204      	strlt	r2, [sp, #16]
 800e83a:	7823      	ldrb	r3, [r4, #0]
 800e83c:	2b2e      	cmp	r3, #46	; 0x2e
 800e83e:	d10c      	bne.n	800e85a <_vfiprintf_r+0x176>
 800e840:	7863      	ldrb	r3, [r4, #1]
 800e842:	2b2a      	cmp	r3, #42	; 0x2a
 800e844:	d135      	bne.n	800e8b2 <_vfiprintf_r+0x1ce>
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	1d1a      	adds	r2, r3, #4
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	9203      	str	r2, [sp, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfb8      	it	lt
 800e852:	f04f 33ff 	movlt.w	r3, #4294967295
 800e856:	3402      	adds	r4, #2
 800e858:	9305      	str	r3, [sp, #20]
 800e85a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e940 <_vfiprintf_r+0x25c>
 800e85e:	7821      	ldrb	r1, [r4, #0]
 800e860:	2203      	movs	r2, #3
 800e862:	4650      	mov	r0, sl
 800e864:	f7f1 fd5c 	bl	8000320 <memchr>
 800e868:	b140      	cbz	r0, 800e87c <_vfiprintf_r+0x198>
 800e86a:	2340      	movs	r3, #64	; 0x40
 800e86c:	eba0 000a 	sub.w	r0, r0, sl
 800e870:	fa03 f000 	lsl.w	r0, r3, r0
 800e874:	9b04      	ldr	r3, [sp, #16]
 800e876:	4303      	orrs	r3, r0
 800e878:	3401      	adds	r4, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e880:	482c      	ldr	r0, [pc, #176]	; (800e934 <_vfiprintf_r+0x250>)
 800e882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e886:	2206      	movs	r2, #6
 800e888:	f7f1 fd4a 	bl	8000320 <memchr>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d03f      	beq.n	800e910 <_vfiprintf_r+0x22c>
 800e890:	4b29      	ldr	r3, [pc, #164]	; (800e938 <_vfiprintf_r+0x254>)
 800e892:	bb1b      	cbnz	r3, 800e8dc <_vfiprintf_r+0x1f8>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	3307      	adds	r3, #7
 800e898:	f023 0307 	bic.w	r3, r3, #7
 800e89c:	3308      	adds	r3, #8
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	443b      	add	r3, r7
 800e8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a6:	e767      	b.n	800e778 <_vfiprintf_r+0x94>
 800e8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ac:	460c      	mov	r4, r1
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7a5      	b.n	800e7fe <_vfiprintf_r+0x11a>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	3401      	adds	r4, #1
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f04f 0c0a 	mov.w	ip, #10
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c4:	3a30      	subs	r2, #48	; 0x30
 800e8c6:	2a09      	cmp	r2, #9
 800e8c8:	d903      	bls.n	800e8d2 <_vfiprintf_r+0x1ee>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0c5      	beq.n	800e85a <_vfiprintf_r+0x176>
 800e8ce:	9105      	str	r1, [sp, #20]
 800e8d0:	e7c3      	b.n	800e85a <_vfiprintf_r+0x176>
 800e8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e7f0      	b.n	800e8be <_vfiprintf_r+0x1da>
 800e8dc:	ab03      	add	r3, sp, #12
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	462a      	mov	r2, r5
 800e8e2:	4b16      	ldr	r3, [pc, #88]	; (800e93c <_vfiprintf_r+0x258>)
 800e8e4:	a904      	add	r1, sp, #16
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7fe f86e 	bl	800c9c8 <_printf_float>
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	1c78      	adds	r0, r7, #1
 800e8f0:	d1d6      	bne.n	800e8a0 <_vfiprintf_r+0x1bc>
 800e8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8f4:	07d9      	lsls	r1, r3, #31
 800e8f6:	d405      	bmi.n	800e904 <_vfiprintf_r+0x220>
 800e8f8:	89ab      	ldrh	r3, [r5, #12]
 800e8fa:	059a      	lsls	r2, r3, #22
 800e8fc:	d402      	bmi.n	800e904 <_vfiprintf_r+0x220>
 800e8fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e900:	f000 faaf 	bl	800ee62 <__retarget_lock_release_recursive>
 800e904:	89ab      	ldrh	r3, [r5, #12]
 800e906:	065b      	lsls	r3, r3, #25
 800e908:	f53f af12 	bmi.w	800e730 <_vfiprintf_r+0x4c>
 800e90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e90e:	e711      	b.n	800e734 <_vfiprintf_r+0x50>
 800e910:	ab03      	add	r3, sp, #12
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	462a      	mov	r2, r5
 800e916:	4b09      	ldr	r3, [pc, #36]	; (800e93c <_vfiprintf_r+0x258>)
 800e918:	a904      	add	r1, sp, #16
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7fe fae0 	bl	800cee0 <_printf_i>
 800e920:	e7e4      	b.n	800e8ec <_vfiprintf_r+0x208>
 800e922:	bf00      	nop
 800e924:	0800f50c 	.word	0x0800f50c
 800e928:	0800f52c 	.word	0x0800f52c
 800e92c:	0800f4ec 	.word	0x0800f4ec
 800e930:	0800f3da 	.word	0x0800f3da
 800e934:	0800f3e4 	.word	0x0800f3e4
 800e938:	0800c9c9 	.word	0x0800c9c9
 800e93c:	0800e6bf 	.word	0x0800e6bf
 800e940:	0800f3e0 	.word	0x0800f3e0

0800e944 <__swbuf_r>:
 800e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e946:	460e      	mov	r6, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	4605      	mov	r5, r0
 800e94c:	b118      	cbz	r0, 800e956 <__swbuf_r+0x12>
 800e94e:	6983      	ldr	r3, [r0, #24]
 800e950:	b90b      	cbnz	r3, 800e956 <__swbuf_r+0x12>
 800e952:	f000 f9e7 	bl	800ed24 <__sinit>
 800e956:	4b21      	ldr	r3, [pc, #132]	; (800e9dc <__swbuf_r+0x98>)
 800e958:	429c      	cmp	r4, r3
 800e95a:	d12b      	bne.n	800e9b4 <__swbuf_r+0x70>
 800e95c:	686c      	ldr	r4, [r5, #4]
 800e95e:	69a3      	ldr	r3, [r4, #24]
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	071a      	lsls	r2, r3, #28
 800e966:	d52f      	bpl.n	800e9c8 <__swbuf_r+0x84>
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	b36b      	cbz	r3, 800e9c8 <__swbuf_r+0x84>
 800e96c:	6923      	ldr	r3, [r4, #16]
 800e96e:	6820      	ldr	r0, [r4, #0]
 800e970:	1ac0      	subs	r0, r0, r3
 800e972:	6963      	ldr	r3, [r4, #20]
 800e974:	b2f6      	uxtb	r6, r6
 800e976:	4283      	cmp	r3, r0
 800e978:	4637      	mov	r7, r6
 800e97a:	dc04      	bgt.n	800e986 <__swbuf_r+0x42>
 800e97c:	4621      	mov	r1, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f93c 	bl	800ebfc <_fflush_r>
 800e984:	bb30      	cbnz	r0, 800e9d4 <__swbuf_r+0x90>
 800e986:	68a3      	ldr	r3, [r4, #8]
 800e988:	3b01      	subs	r3, #1
 800e98a:	60a3      	str	r3, [r4, #8]
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	6022      	str	r2, [r4, #0]
 800e992:	701e      	strb	r6, [r3, #0]
 800e994:	6963      	ldr	r3, [r4, #20]
 800e996:	3001      	adds	r0, #1
 800e998:	4283      	cmp	r3, r0
 800e99a:	d004      	beq.n	800e9a6 <__swbuf_r+0x62>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d506      	bpl.n	800e9b0 <__swbuf_r+0x6c>
 800e9a2:	2e0a      	cmp	r6, #10
 800e9a4:	d104      	bne.n	800e9b0 <__swbuf_r+0x6c>
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f000 f927 	bl	800ebfc <_fflush_r>
 800e9ae:	b988      	cbnz	r0, 800e9d4 <__swbuf_r+0x90>
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <__swbuf_r+0x9c>)
 800e9b6:	429c      	cmp	r4, r3
 800e9b8:	d101      	bne.n	800e9be <__swbuf_r+0x7a>
 800e9ba:	68ac      	ldr	r4, [r5, #8]
 800e9bc:	e7cf      	b.n	800e95e <__swbuf_r+0x1a>
 800e9be:	4b09      	ldr	r3, [pc, #36]	; (800e9e4 <__swbuf_r+0xa0>)
 800e9c0:	429c      	cmp	r4, r3
 800e9c2:	bf08      	it	eq
 800e9c4:	68ec      	ldreq	r4, [r5, #12]
 800e9c6:	e7ca      	b.n	800e95e <__swbuf_r+0x1a>
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f000 f81a 	bl	800ea04 <__swsetup_r>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d0cb      	beq.n	800e96c <__swbuf_r+0x28>
 800e9d4:	f04f 37ff 	mov.w	r7, #4294967295
 800e9d8:	e7ea      	b.n	800e9b0 <__swbuf_r+0x6c>
 800e9da:	bf00      	nop
 800e9dc:	0800f50c 	.word	0x0800f50c
 800e9e0:	0800f52c 	.word	0x0800f52c
 800e9e4:	0800f4ec 	.word	0x0800f4ec

0800e9e8 <__ascii_wctomb>:
 800e9e8:	b149      	cbz	r1, 800e9fe <__ascii_wctomb+0x16>
 800e9ea:	2aff      	cmp	r2, #255	; 0xff
 800e9ec:	bf85      	ittet	hi
 800e9ee:	238a      	movhi	r3, #138	; 0x8a
 800e9f0:	6003      	strhi	r3, [r0, #0]
 800e9f2:	700a      	strbls	r2, [r1, #0]
 800e9f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9f8:	bf98      	it	ls
 800e9fa:	2001      	movls	r0, #1
 800e9fc:	4770      	bx	lr
 800e9fe:	4608      	mov	r0, r1
 800ea00:	4770      	bx	lr
	...

0800ea04 <__swsetup_r>:
 800ea04:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <__swsetup_r+0xcc>)
 800ea06:	b570      	push	{r4, r5, r6, lr}
 800ea08:	681d      	ldr	r5, [r3, #0]
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b125      	cbz	r5, 800ea1a <__swsetup_r+0x16>
 800ea10:	69ab      	ldr	r3, [r5, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__swsetup_r+0x16>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f000 f985 	bl	800ed24 <__sinit>
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <__swsetup_r+0xd0>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d10f      	bne.n	800ea40 <__swsetup_r+0x3c>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea28:	0719      	lsls	r1, r3, #28
 800ea2a:	d42c      	bmi.n	800ea86 <__swsetup_r+0x82>
 800ea2c:	06dd      	lsls	r5, r3, #27
 800ea2e:	d411      	bmi.n	800ea54 <__swsetup_r+0x50>
 800ea30:	2309      	movs	r3, #9
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3e:	e03e      	b.n	800eabe <__swsetup_r+0xba>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__swsetup_r+0xd4>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swsetup_r+0x46>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7eb      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__swsetup_r+0xd8>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7e6      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea54:	0758      	lsls	r0, r3, #29
 800ea56:	d512      	bpl.n	800ea7e <__swsetup_r+0x7a>
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	b141      	cbz	r1, 800ea6e <__swsetup_r+0x6a>
 800ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <__swsetup_r+0x66>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f7ff fd0b 	bl	800e480 <_free_r>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	2300      	movs	r3, #0
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	b94b      	cbnz	r3, 800ea9e <__swsetup_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea94:	d003      	beq.n	800ea9e <__swsetup_r+0x9a>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 fa07 	bl	800eeac <__smakebuf_r>
 800ea9e:	89a0      	ldrh	r0, [r4, #12]
 800eaa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaa4:	f010 0301 	ands.w	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <__swsetup_r+0xbc>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	425b      	negs	r3, r3
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b943      	cbnz	r3, 800eaca <__swsetup_r+0xc6>
 800eab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eabc:	d1ba      	bne.n	800ea34 <__swsetup_r+0x30>
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	0781      	lsls	r1, r0, #30
 800eac2:	bf58      	it	pl
 800eac4:	6963      	ldrpl	r3, [r4, #20]
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	e7f4      	b.n	800eab4 <__swsetup_r+0xb0>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7f7      	b.n	800eabe <__swsetup_r+0xba>
 800eace:	bf00      	nop
 800ead0:	24000010 	.word	0x24000010
 800ead4:	0800f50c 	.word	0x0800f50c
 800ead8:	0800f52c 	.word	0x0800f52c
 800eadc:	0800f4ec 	.word	0x0800f4ec

0800eae0 <abort>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	2006      	movs	r0, #6
 800eae4:	f000 fa4a 	bl	800ef7c <raise>
 800eae8:	2001      	movs	r0, #1
 800eaea:	f7f2 fcf7 	bl	80014dc <_exit>
	...

0800eaf0 <__sflush_r>:
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	0710      	lsls	r0, r2, #28
 800eafa:	460c      	mov	r4, r1
 800eafc:	d458      	bmi.n	800ebb0 <__sflush_r+0xc0>
 800eafe:	684b      	ldr	r3, [r1, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc05      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	dc02      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d0f9      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb1c:	682f      	ldr	r7, [r5, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	d032      	beq.n	800eb88 <__sflush_r+0x98>
 800eb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	075a      	lsls	r2, r3, #29
 800eb28:	d505      	bpl.n	800eb36 <__sflush_r+0x46>
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb30:	b10b      	cbz	r3, 800eb36 <__sflush_r+0x46>
 800eb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3c:	6a21      	ldr	r1, [r4, #32]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b0      	blx	r6
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	d106      	bne.n	800eb56 <__sflush_r+0x66>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	291d      	cmp	r1, #29
 800eb4c:	d82c      	bhi.n	800eba8 <__sflush_r+0xb8>
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <__sflush_r+0x108>)
 800eb50:	40ca      	lsrs	r2, r1
 800eb52:	07d6      	lsls	r6, r2, #31
 800eb54:	d528      	bpl.n	800eba8 <__sflush_r+0xb8>
 800eb56:	2200      	movs	r2, #0
 800eb58:	6062      	str	r2, [r4, #4]
 800eb5a:	04d9      	lsls	r1, r3, #19
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	d504      	bpl.n	800eb6c <__sflush_r+0x7c>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0x7a>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b903      	cbnz	r3, 800eb6c <__sflush_r+0x7c>
 800eb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	602f      	str	r7, [r5, #0]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d0ca      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x92>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fc7f 	bl	800e480 <_free_r>
 800eb82:	2000      	movs	r0, #0
 800eb84:	6360      	str	r0, [r4, #52]	; 0x34
 800eb86:	e7c1      	b.n	800eb0c <__sflush_r+0x1c>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b0      	blx	r6
 800eb90:	1c41      	adds	r1, r0, #1
 800eb92:	d1c7      	bne.n	800eb24 <__sflush_r+0x34>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c4      	beq.n	800eb24 <__sflush_r+0x34>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xb2>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0xb6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	e7b1      	b.n	800eb0a <__sflush_r+0x1a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	e7ad      	b.n	800eb0c <__sflush_r+0x1c>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0a9      	beq.n	800eb0a <__sflush_r+0x1a>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	680e      	ldr	r6, [r1, #0]
 800ebba:	bf08      	it	eq
 800ebbc:	694b      	ldreq	r3, [r1, #20]
 800ebbe:	600f      	str	r7, [r1, #0]
 800ebc0:	bf18      	it	ne
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	eba6 0807 	sub.w	r8, r6, r7
 800ebc8:	608b      	str	r3, [r1, #8]
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	dd9c      	ble.n	800eb0a <__sflush_r+0x1a>
 800ebd0:	6a21      	ldr	r1, [r4, #32]
 800ebd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd4:	4643      	mov	r3, r8
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc06      	bgt.n	800ebee <__sflush_r+0xfe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e78e      	b.n	800eb0c <__sflush_r+0x1c>
 800ebee:	4407      	add	r7, r0
 800ebf0:	eba8 0800 	sub.w	r8, r8, r0
 800ebf4:	e7e9      	b.n	800ebca <__sflush_r+0xda>
 800ebf6:	bf00      	nop
 800ebf8:	20400001 	.word	0x20400001

0800ebfc <_fflush_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	690b      	ldr	r3, [r1, #16]
 800ec00:	4605      	mov	r5, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b913      	cbnz	r3, 800ec0c <_fflush_r+0x10>
 800ec06:	2500      	movs	r5, #0
 800ec08:	4628      	mov	r0, r5
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	b118      	cbz	r0, 800ec16 <_fflush_r+0x1a>
 800ec0e:	6983      	ldr	r3, [r0, #24]
 800ec10:	b90b      	cbnz	r3, 800ec16 <_fflush_r+0x1a>
 800ec12:	f000 f887 	bl	800ed24 <__sinit>
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <_fflush_r+0x6c>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	d11b      	bne.n	800ec54 <_fflush_r+0x58>
 800ec1c:	686c      	ldr	r4, [r5, #4]
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0ef      	beq.n	800ec06 <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f000 f915 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff59 	bl	800eaf0 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e0      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4dd      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f000 f908 	bl	800ee62 <__retarget_lock_release_recursive>
 800ec52:	e7d9      	b.n	800ec08 <_fflush_r+0xc>
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_fflush_r+0x70>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d101      	bne.n	800ec5e <_fflush_r+0x62>
 800ec5a:	68ac      	ldr	r4, [r5, #8]
 800ec5c:	e7df      	b.n	800ec1e <_fflush_r+0x22>
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <_fflush_r+0x74>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	bf08      	it	eq
 800ec64:	68ec      	ldreq	r4, [r5, #12]
 800ec66:	e7da      	b.n	800ec1e <_fflush_r+0x22>
 800ec68:	0800f50c 	.word	0x0800f50c
 800ec6c:	0800f52c 	.word	0x0800f52c
 800ec70:	0800f4ec 	.word	0x0800f4ec

0800ec74 <std>:
 800ec74:	2300      	movs	r3, #0
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec82:	6083      	str	r3, [r0, #8]
 800ec84:	8181      	strh	r1, [r0, #12]
 800ec86:	6643      	str	r3, [r0, #100]	; 0x64
 800ec88:	81c2      	strh	r2, [r0, #14]
 800ec8a:	6183      	str	r3, [r0, #24]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2208      	movs	r2, #8
 800ec90:	305c      	adds	r0, #92	; 0x5c
 800ec92:	f7fd fdff 	bl	800c894 <memset>
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <std+0x38>)
 800ec98:	6263      	str	r3, [r4, #36]	; 0x24
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <std+0x3c>)
 800ec9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec9e:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <std+0x40>)
 800eca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eca2:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <std+0x44>)
 800eca4:	6224      	str	r4, [r4, #32]
 800eca6:	6323      	str	r3, [r4, #48]	; 0x30
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	0800efb5 	.word	0x0800efb5
 800ecb0:	0800efd7 	.word	0x0800efd7
 800ecb4:	0800f00f 	.word	0x0800f00f
 800ecb8:	0800f033 	.word	0x0800f033

0800ecbc <_cleanup_r>:
 800ecbc:	4901      	ldr	r1, [pc, #4]	; (800ecc4 <_cleanup_r+0x8>)
 800ecbe:	f000 b8af 	b.w	800ee20 <_fwalk_reent>
 800ecc2:	bf00      	nop
 800ecc4:	0800ebfd 	.word	0x0800ebfd

0800ecc8 <__sfmoreglue>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	1e4a      	subs	r2, r1, #1
 800eccc:	2568      	movs	r5, #104	; 0x68
 800ecce:	4355      	muls	r5, r2
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecd6:	f7ff fc23 	bl	800e520 <_malloc_r>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	b140      	cbz	r0, 800ecf0 <__sfmoreglue+0x28>
 800ecde:	2100      	movs	r1, #0
 800ece0:	e9c0 1600 	strd	r1, r6, [r0]
 800ece4:	300c      	adds	r0, #12
 800ece6:	60a0      	str	r0, [r4, #8]
 800ece8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecec:	f7fd fdd2 	bl	800c894 <memset>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <__sfp_lock_acquire>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__sfp_lock_acquire+0x8>)
 800ecf6:	f000 b8b3 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	24000a54 	.word	0x24000a54

0800ed00 <__sfp_lock_release>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__sfp_lock_release+0x8>)
 800ed02:	f000 b8ae 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	24000a54 	.word	0x24000a54

0800ed0c <__sinit_lock_acquire>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__sinit_lock_acquire+0x8>)
 800ed0e:	f000 b8a7 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ed12:	bf00      	nop
 800ed14:	24000a4f 	.word	0x24000a4f

0800ed18 <__sinit_lock_release>:
 800ed18:	4801      	ldr	r0, [pc, #4]	; (800ed20 <__sinit_lock_release+0x8>)
 800ed1a:	f000 b8a2 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed1e:	bf00      	nop
 800ed20:	24000a4f 	.word	0x24000a4f

0800ed24 <__sinit>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	f7ff fff0 	bl	800ed0c <__sinit_lock_acquire>
 800ed2c:	69a3      	ldr	r3, [r4, #24]
 800ed2e:	b11b      	cbz	r3, 800ed38 <__sinit+0x14>
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f7ff bff0 	b.w	800ed18 <__sinit_lock_release>
 800ed38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed3e:	4b13      	ldr	r3, [pc, #76]	; (800ed8c <__sinit+0x68>)
 800ed40:	4a13      	ldr	r2, [pc, #76]	; (800ed90 <__sinit+0x6c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed46:	42a3      	cmp	r3, r4
 800ed48:	bf04      	itt	eq
 800ed4a:	2301      	moveq	r3, #1
 800ed4c:	61a3      	streq	r3, [r4, #24]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f820 	bl	800ed94 <__sfp>
 800ed54:	6060      	str	r0, [r4, #4]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f81c 	bl	800ed94 <__sfp>
 800ed5c:	60a0      	str	r0, [r4, #8]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 f818 	bl	800ed94 <__sfp>
 800ed64:	2200      	movs	r2, #0
 800ed66:	60e0      	str	r0, [r4, #12]
 800ed68:	2104      	movs	r1, #4
 800ed6a:	6860      	ldr	r0, [r4, #4]
 800ed6c:	f7ff ff82 	bl	800ec74 <std>
 800ed70:	68a0      	ldr	r0, [r4, #8]
 800ed72:	2201      	movs	r2, #1
 800ed74:	2109      	movs	r1, #9
 800ed76:	f7ff ff7d 	bl	800ec74 <std>
 800ed7a:	68e0      	ldr	r0, [r4, #12]
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	2112      	movs	r1, #18
 800ed80:	f7ff ff78 	bl	800ec74 <std>
 800ed84:	2301      	movs	r3, #1
 800ed86:	61a3      	str	r3, [r4, #24]
 800ed88:	e7d2      	b.n	800ed30 <__sinit+0xc>
 800ed8a:	bf00      	nop
 800ed8c:	0800f168 	.word	0x0800f168
 800ed90:	0800ecbd 	.word	0x0800ecbd

0800ed94 <__sfp>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	4607      	mov	r7, r0
 800ed98:	f7ff ffac 	bl	800ecf4 <__sfp_lock_acquire>
 800ed9c:	4b1e      	ldr	r3, [pc, #120]	; (800ee18 <__sfp+0x84>)
 800ed9e:	681e      	ldr	r6, [r3, #0]
 800eda0:	69b3      	ldr	r3, [r6, #24]
 800eda2:	b913      	cbnz	r3, 800edaa <__sfp+0x16>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ffbd 	bl	800ed24 <__sinit>
 800edaa:	3648      	adds	r6, #72	; 0x48
 800edac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	d503      	bpl.n	800edbc <__sfp+0x28>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	b30b      	cbz	r3, 800edfc <__sfp+0x68>
 800edb8:	6836      	ldr	r6, [r6, #0]
 800edba:	e7f7      	b.n	800edac <__sfp+0x18>
 800edbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edc0:	b9d5      	cbnz	r5, 800edf8 <__sfp+0x64>
 800edc2:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <__sfp+0x88>)
 800edc4:	60e3      	str	r3, [r4, #12]
 800edc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edca:	6665      	str	r5, [r4, #100]	; 0x64
 800edcc:	f000 f847 	bl	800ee5e <__retarget_lock_init_recursive>
 800edd0:	f7ff ff96 	bl	800ed00 <__sfp_lock_release>
 800edd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eddc:	6025      	str	r5, [r4, #0]
 800edde:	61a5      	str	r5, [r4, #24]
 800ede0:	2208      	movs	r2, #8
 800ede2:	4629      	mov	r1, r5
 800ede4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ede8:	f7fd fd54 	bl	800c894 <memset>
 800edec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edf4:	4620      	mov	r0, r4
 800edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf8:	3468      	adds	r4, #104	; 0x68
 800edfa:	e7d9      	b.n	800edb0 <__sfp+0x1c>
 800edfc:	2104      	movs	r1, #4
 800edfe:	4638      	mov	r0, r7
 800ee00:	f7ff ff62 	bl	800ecc8 <__sfmoreglue>
 800ee04:	4604      	mov	r4, r0
 800ee06:	6030      	str	r0, [r6, #0]
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d1d5      	bne.n	800edb8 <__sfp+0x24>
 800ee0c:	f7ff ff78 	bl	800ed00 <__sfp_lock_release>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	e7ee      	b.n	800edf4 <__sfp+0x60>
 800ee16:	bf00      	nop
 800ee18:	0800f168 	.word	0x0800f168
 800ee1c:	ffff0001 	.word	0xffff0001

0800ee20 <_fwalk_reent>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4606      	mov	r6, r0
 800ee26:	4688      	mov	r8, r1
 800ee28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee32:	f1b9 0901 	subs.w	r9, r9, #1
 800ee36:	d505      	bpl.n	800ee44 <_fwalk_reent+0x24>
 800ee38:	6824      	ldr	r4, [r4, #0]
 800ee3a:	2c00      	cmp	r4, #0
 800ee3c:	d1f7      	bne.n	800ee2e <_fwalk_reent+0xe>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee44:	89ab      	ldrh	r3, [r5, #12]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d907      	bls.n	800ee5a <_fwalk_reent+0x3a>
 800ee4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	d003      	beq.n	800ee5a <_fwalk_reent+0x3a>
 800ee52:	4629      	mov	r1, r5
 800ee54:	4630      	mov	r0, r6
 800ee56:	47c0      	blx	r8
 800ee58:	4307      	orrs	r7, r0
 800ee5a:	3568      	adds	r5, #104	; 0x68
 800ee5c:	e7e9      	b.n	800ee32 <_fwalk_reent+0x12>

0800ee5e <__retarget_lock_init_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <__retarget_lock_acquire_recursive>:
 800ee60:	4770      	bx	lr

0800ee62 <__retarget_lock_release_recursive>:
 800ee62:	4770      	bx	lr

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b096      	sub	sp, #88	; 0x58
 800ee70:	4614      	mov	r4, r2
 800ee72:	461d      	mov	r5, r3
 800ee74:	da07      	bge.n	800ee86 <__swhatbuf_r+0x22>
 800ee76:	2300      	movs	r3, #0
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	89b3      	ldrh	r3, [r6, #12]
 800ee7c:	061a      	lsls	r2, r3, #24
 800ee7e:	d410      	bmi.n	800eea2 <__swhatbuf_r+0x3e>
 800ee80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee84:	e00e      	b.n	800eea4 <__swhatbuf_r+0x40>
 800ee86:	466a      	mov	r2, sp
 800ee88:	f000 f8fa 	bl	800f080 <_fstat_r>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	dbf2      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee90:	9a01      	ldr	r2, [sp, #4]
 800ee92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee9a:	425a      	negs	r2, r3
 800ee9c:	415a      	adcs	r2, r3
 800ee9e:	602a      	str	r2, [r5, #0]
 800eea0:	e7ee      	b.n	800ee80 <__swhatbuf_r+0x1c>
 800eea2:	2340      	movs	r3, #64	; 0x40
 800eea4:	2000      	movs	r0, #0
 800eea6:	6023      	str	r3, [r4, #0]
 800eea8:	b016      	add	sp, #88	; 0x58
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}

0800eeac <__smakebuf_r>:
 800eeac:	898b      	ldrh	r3, [r1, #12]
 800eeae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb0:	079d      	lsls	r5, r3, #30
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	d507      	bpl.n	800eec8 <__smakebuf_r+0x1c>
 800eeb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	6123      	str	r3, [r4, #16]
 800eec0:	2301      	movs	r3, #1
 800eec2:	6163      	str	r3, [r4, #20]
 800eec4:	b002      	add	sp, #8
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	ab01      	add	r3, sp, #4
 800eeca:	466a      	mov	r2, sp
 800eecc:	f7ff ffca 	bl	800ee64 <__swhatbuf_r>
 800eed0:	9900      	ldr	r1, [sp, #0]
 800eed2:	4605      	mov	r5, r0
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7ff fb23 	bl	800e520 <_malloc_r>
 800eeda:	b948      	cbnz	r0, 800eef0 <__smakebuf_r+0x44>
 800eedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee0:	059a      	lsls	r2, r3, #22
 800eee2:	d4ef      	bmi.n	800eec4 <__smakebuf_r+0x18>
 800eee4:	f023 0303 	bic.w	r3, r3, #3
 800eee8:	f043 0302 	orr.w	r3, r3, #2
 800eeec:	81a3      	strh	r3, [r4, #12]
 800eeee:	e7e3      	b.n	800eeb8 <__smakebuf_r+0xc>
 800eef0:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <__smakebuf_r+0x7c>)
 800eef2:	62b3      	str	r3, [r6, #40]	; 0x28
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	6020      	str	r0, [r4, #0]
 800eef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefc:	81a3      	strh	r3, [r4, #12]
 800eefe:	9b00      	ldr	r3, [sp, #0]
 800ef00:	6163      	str	r3, [r4, #20]
 800ef02:	9b01      	ldr	r3, [sp, #4]
 800ef04:	6120      	str	r0, [r4, #16]
 800ef06:	b15b      	cbz	r3, 800ef20 <__smakebuf_r+0x74>
 800ef08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f000 f8c9 	bl	800f0a4 <_isatty_r>
 800ef12:	b128      	cbz	r0, 800ef20 <__smakebuf_r+0x74>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f023 0303 	bic.w	r3, r3, #3
 800ef1a:	f043 0301 	orr.w	r3, r3, #1
 800ef1e:	81a3      	strh	r3, [r4, #12]
 800ef20:	89a0      	ldrh	r0, [r4, #12]
 800ef22:	4305      	orrs	r5, r0
 800ef24:	81a5      	strh	r5, [r4, #12]
 800ef26:	e7cd      	b.n	800eec4 <__smakebuf_r+0x18>
 800ef28:	0800ecbd 	.word	0x0800ecbd

0800ef2c <_raise_r>:
 800ef2c:	291f      	cmp	r1, #31
 800ef2e:	b538      	push	{r3, r4, r5, lr}
 800ef30:	4604      	mov	r4, r0
 800ef32:	460d      	mov	r5, r1
 800ef34:	d904      	bls.n	800ef40 <_raise_r+0x14>
 800ef36:	2316      	movs	r3, #22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef42:	b112      	cbz	r2, 800ef4a <_raise_r+0x1e>
 800ef44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef48:	b94b      	cbnz	r3, 800ef5e <_raise_r+0x32>
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 f830 	bl	800efb0 <_getpid_r>
 800ef50:	462a      	mov	r2, r5
 800ef52:	4601      	mov	r1, r0
 800ef54:	4620      	mov	r0, r4
 800ef56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5a:	f000 b817 	b.w	800ef8c <_kill_r>
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d00a      	beq.n	800ef78 <_raise_r+0x4c>
 800ef62:	1c59      	adds	r1, r3, #1
 800ef64:	d103      	bne.n	800ef6e <_raise_r+0x42>
 800ef66:	2316      	movs	r3, #22
 800ef68:	6003      	str	r3, [r0, #0]
 800ef6a:	2001      	movs	r0, #1
 800ef6c:	e7e7      	b.n	800ef3e <_raise_r+0x12>
 800ef6e:	2400      	movs	r4, #0
 800ef70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef74:	4628      	mov	r0, r5
 800ef76:	4798      	blx	r3
 800ef78:	2000      	movs	r0, #0
 800ef7a:	e7e0      	b.n	800ef3e <_raise_r+0x12>

0800ef7c <raise>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <raise+0xc>)
 800ef7e:	4601      	mov	r1, r0
 800ef80:	6818      	ldr	r0, [r3, #0]
 800ef82:	f7ff bfd3 	b.w	800ef2c <_raise_r>
 800ef86:	bf00      	nop
 800ef88:	24000010 	.word	0x24000010

0800ef8c <_kill_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d07      	ldr	r5, [pc, #28]	; (800efac <_kill_r+0x20>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	4611      	mov	r1, r2
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	f7f2 fa8f 	bl	80014bc <_kill>
 800ef9e:	1c43      	adds	r3, r0, #1
 800efa0:	d102      	bne.n	800efa8 <_kill_r+0x1c>
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	b103      	cbz	r3, 800efa8 <_kill_r+0x1c>
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	bd38      	pop	{r3, r4, r5, pc}
 800efaa:	bf00      	nop
 800efac:	24000a48 	.word	0x24000a48

0800efb0 <_getpid_r>:
 800efb0:	f7f2 ba7c 	b.w	80014ac <_getpid>

0800efb4 <__sread>:
 800efb4:	b510      	push	{r4, lr}
 800efb6:	460c      	mov	r4, r1
 800efb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efbc:	f000 f894 	bl	800f0e8 <_read_r>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	bfab      	itete	ge
 800efc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efc6:	89a3      	ldrhlt	r3, [r4, #12]
 800efc8:	181b      	addge	r3, r3, r0
 800efca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efce:	bfac      	ite	ge
 800efd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800efd2:	81a3      	strhlt	r3, [r4, #12]
 800efd4:	bd10      	pop	{r4, pc}

0800efd6 <__swrite>:
 800efd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efda:	461f      	mov	r7, r3
 800efdc:	898b      	ldrh	r3, [r1, #12]
 800efde:	05db      	lsls	r3, r3, #23
 800efe0:	4605      	mov	r5, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	4616      	mov	r6, r2
 800efe6:	d505      	bpl.n	800eff4 <__swrite+0x1e>
 800efe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efec:	2302      	movs	r3, #2
 800efee:	2200      	movs	r2, #0
 800eff0:	f000 f868 	bl	800f0c4 <_lseek_r>
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800effa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800effe:	81a3      	strh	r3, [r4, #12]
 800f000:	4632      	mov	r2, r6
 800f002:	463b      	mov	r3, r7
 800f004:	4628      	mov	r0, r5
 800f006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f00a:	f000 b817 	b.w	800f03c <_write_r>

0800f00e <__sseek>:
 800f00e:	b510      	push	{r4, lr}
 800f010:	460c      	mov	r4, r1
 800f012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f016:	f000 f855 	bl	800f0c4 <_lseek_r>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	bf15      	itete	ne
 800f020:	6560      	strne	r0, [r4, #84]	; 0x54
 800f022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f02a:	81a3      	strheq	r3, [r4, #12]
 800f02c:	bf18      	it	ne
 800f02e:	81a3      	strhne	r3, [r4, #12]
 800f030:	bd10      	pop	{r4, pc}

0800f032 <__sclose>:
 800f032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f036:	f000 b813 	b.w	800f060 <_close_r>
	...

0800f03c <_write_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d07      	ldr	r5, [pc, #28]	; (800f05c <_write_r+0x20>)
 800f040:	4604      	mov	r4, r0
 800f042:	4608      	mov	r0, r1
 800f044:	4611      	mov	r1, r2
 800f046:	2200      	movs	r2, #0
 800f048:	602a      	str	r2, [r5, #0]
 800f04a:	461a      	mov	r2, r3
 800f04c:	f7f2 fa6d 	bl	800152a <_write>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_write_r+0x1e>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_write_r+0x1e>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	24000a48 	.word	0x24000a48

0800f060 <_close_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d06      	ldr	r5, [pc, #24]	; (800f07c <_close_r+0x1c>)
 800f064:	2300      	movs	r3, #0
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	f7f2 fa79 	bl	8001562 <_close>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d102      	bne.n	800f07a <_close_r+0x1a>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	b103      	cbz	r3, 800f07a <_close_r+0x1a>
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	24000a48 	.word	0x24000a48

0800f080 <_fstat_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4d07      	ldr	r5, [pc, #28]	; (800f0a0 <_fstat_r+0x20>)
 800f084:	2300      	movs	r3, #0
 800f086:	4604      	mov	r4, r0
 800f088:	4608      	mov	r0, r1
 800f08a:	4611      	mov	r1, r2
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	f7f2 fa74 	bl	800157a <_fstat>
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	d102      	bne.n	800f09c <_fstat_r+0x1c>
 800f096:	682b      	ldr	r3, [r5, #0]
 800f098:	b103      	cbz	r3, 800f09c <_fstat_r+0x1c>
 800f09a:	6023      	str	r3, [r4, #0]
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
 800f09e:	bf00      	nop
 800f0a0:	24000a48 	.word	0x24000a48

0800f0a4 <_isatty_r>:
 800f0a4:	b538      	push	{r3, r4, r5, lr}
 800f0a6:	4d06      	ldr	r5, [pc, #24]	; (800f0c0 <_isatty_r+0x1c>)
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	602b      	str	r3, [r5, #0]
 800f0b0:	f7f2 fa73 	bl	800159a <_isatty>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d102      	bne.n	800f0be <_isatty_r+0x1a>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	b103      	cbz	r3, 800f0be <_isatty_r+0x1a>
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	24000a48 	.word	0x24000a48

0800f0c4 <_lseek_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d07      	ldr	r5, [pc, #28]	; (800f0e4 <_lseek_r+0x20>)
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	602a      	str	r2, [r5, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f7f2 fa6c 	bl	80015b0 <_lseek>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_lseek_r+0x1e>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_lseek_r+0x1e>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	24000a48 	.word	0x24000a48

0800f0e8 <_read_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4d07      	ldr	r5, [pc, #28]	; (800f108 <_read_r+0x20>)
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	602a      	str	r2, [r5, #0]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	f7f2 f9fa 	bl	80014f0 <_read>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_read_r+0x1e>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_read_r+0x1e>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	24000a48 	.word	0x24000a48

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr

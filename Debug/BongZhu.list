
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014154  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08014428  08014428  00024428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014a50  08014a50  00024a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014a58  08014a58  00024a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014a5c  08014a5c  00024a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08014a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  240001e0  08014c40  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a58  08014c40  00030a58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd13  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003da9  00000000  00000000  0005bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001830  00000000  00000000  0005fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001708  00000000  00000000  00061500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037769  00000000  00000000  00062c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020ab7  00000000  00000000  0009a371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c965  00000000  00000000  000bae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022778d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078d4  00000000  00000000  002277e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801440c 	.word	0x0801440c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0801440c 	.word	0x0801440c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(float q[5], float x_dot[5], float *m_dot){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	ed2d 8b04 	vpush	{d8-d9}
 80006be:	b0bc      	sub	sp, #240	; 0xf0
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	float e_J_inv_tmp;
	float e_J_inv_tmp_tmp;
	float f_J_inv_tmp_tmp;
	int i;
	int i1;
	J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3304      	adds	r3, #4
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3308      	adds	r3, #8
 80006d8:	edd3 7a00 	vldr	s15, [r3]
 80006dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80006e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ec:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	b_J_inv_tmp_tmp = ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	330c      	adds	r3, #12
 80006f4:	ed93 7a00 	vldr	s14, [r3]
 80006f8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000704:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8000ad8 <IVK+0x420>
 8000708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800070c:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8000ae0 <IVK+0x428>
 8000710:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000714:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8000ae8 <IVK+0x430>
 8000718:	ee37 7b46 	vsub.f64	d7, d7, d6
 800071c:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8000af0 <IVK+0x438>
 8000720:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000724:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000728:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	1.52205;
	c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 800072c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000730:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000734:	eeb0 0b47 	vmov.f64	d0, d7
 8000738:	f013 f896 	bl	8013868 <sin>
 800073c:	eeb0 7b40 	vmov.f64	d7, d0
 8000740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000744:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	d_J_inv_tmp_tmp = sin(q[0]);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000752:	eeb0 0b47 	vmov.f64	d0, d7
 8000756:	f013 f887 	bl	8013868 <sin>
 800075a:	eeb0 7b40 	vmov.f64	d7, d0
 800075e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000762:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8000766:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800076a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800076e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8000ad8 <IVK+0x420>
 8000772:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000776:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8000ae0 <IVK+0x428>
 800077a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800077e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8000ae8 <IVK+0x430>
 8000782:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000786:	eeb0 0b47 	vmov.f64	d0, d7
 800078a:	f013 f819 	bl	80137c0 <cos>
 800078e:	eeb0 7b40 	vmov.f64	d7, d0
 8000792:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000796:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 800079a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800079e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a2:	eeb0 0b47 	vmov.f64	d0, d7
 80007a6:	f013 f80b 	bl	80137c0 <cos>
 80007aa:	eeb0 7b40 	vmov.f64	d7, d0
 80007ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007b2:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3304      	adds	r3, #4
 80007ba:	ed93 7a00 	vldr	s14, [r3]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3308      	adds	r3, #8
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ce:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 8000ad8 <IVK+0x420>
 80007d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007d6:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 8000ae0 <IVK+0x428>
 80007da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	c_J_inv_tmp = cos(J_inv_tmp_tmp);
 80007e6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80007ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ee:	eeb0 0b47 	vmov.f64	d0, d7
 80007f2:	f012 ffe5 	bl	80137c0 <cos>
 80007f6:	eeb0 7b40 	vmov.f64	d7, d0
 80007fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007fe:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8000802:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000806:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800080a:	eeb0 0b47 	vmov.f64	d0, d7
 800080e:	f013 f82b 	bl	8013868 <sin>
 8000812:	eeb0 7b40 	vmov.f64	d7, d0
 8000816:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800081a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3304      	adds	r3, #4
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3308      	adds	r3, #8
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000836:	ee37 7b07 	vadd.f64	d7, d7, d7
 800083a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800083e:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8000ad8 <IVK+0x420>
 8000842:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000846:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8000ae0 <IVK+0x428>
 800084a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800084e:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8000ae8 <IVK+0x430>
 8000852:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000856:	eeb0 0b47 	vmov.f64	d0, d7
 800085a:	f013 f805 	bl	8013868 <sin>
 800085e:	eeb0 7b40 	vmov.f64	d7, d0
 8000862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000866:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3304      	adds	r3, #4
 800086e:	edd3 7a00 	vldr	s15, [r3]
 8000872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000876:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8000ad8 <IVK+0x420>
 800087a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800087e:	eeb0 0b47 	vmov.f64	d0, d7
 8000882:	f012 ff9d 	bl	80137c0 <cos>
 8000886:	eeb0 7b40 	vmov.f64	d7, d0
 800088a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088e:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3304      	adds	r3, #4
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800089e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8000ad8 <IVK+0x420>
 80008a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008a6:	eeb0 0b47 	vmov.f64	d0, d7
 80008aa:	f012 ffdd 	bl	8013868 <sin>
 80008ae:	eeb0 7b40 	vmov.f64	d7, d0
 80008b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	f_J_inv_tmp_tmp = cos(q[0]);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c4:	eeb0 0b47 	vmov.f64	d0, d7
 80008c8:	f012 ff7a 	bl	80137c0 <cos>
 80008cc:	eeb0 7b40 	vmov.f64	d7, d0
 80008d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	e_J_inv_tmp = cos(q[2]);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3308      	adds	r3, #8
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e4:	eeb0 0b47 	vmov.f64	d0, d7
 80008e8:	f012 ff6a 	bl	80137c0 <cos>
 80008ec:	eeb0 7b40 	vmov.f64	d7, d0
 80008f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	dv[0] = 0.0;
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
	dv[5] = 0.0;
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
	d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 8000904:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000908:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800090c:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
	d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8000910:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000918:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	dv[10] = -(25.0 * d_J_inv_tmp_tmp) / (9.0 * (((((((146.0 * c_J_inv_tmp_tmp * d
 800091c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000924:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000928:	ee27 7b06 	vmul.f64	d7, d7, d6
 800092c:	eeb1 8b47 	vneg.f64	d8, d7
 8000930:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8000934:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000938:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8000b00 <IVK+0x448>
 800093c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000940:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8000944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000948:	ee26 6b07 	vmul.f64	d6, d6, d7
	+ 410.488 * J_inv_tmp * d) + 146.0 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 800094c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8000950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000954:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8000b08 <IVK+0x450>
 8000958:	ee27 5b05 	vmul.f64	d5, d7, d5
 800095c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8000960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000964:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000968:	ee36 9b07 	vadd.f64	d9, d6, d7
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3304      	adds	r3, #4
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3308      	adds	r3, #8
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000984:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000988:	ee36 6b07 	vadd.f64	d6, d6, d7
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	330c      	adds	r3, #12
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000998:	ee36 7b07 	vadd.f64	d7, d6, d7
 800099c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000ad8 <IVK+0x420>
 80009a0:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 80009a4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000ae0 <IVK+0x428>
 80009a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80009ac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000ae8 <IVK+0x430>
 80009b0:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 410.488 * J_inv_tmp * d) + 146.0 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80009b4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000af0 <IVK+0x438>
 80009b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009bc:	eeb0 0b47 	vmov.f64	d0, d7
 80009c0:	f012 ff52 	bl	8013868 <sin>
 80009c4:	eeb0 7b40 	vmov.f64	d7, d0
 80009c8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000b00 <IVK+0x448>
 80009cc:	ee27 6b06 	vmul.f64	d6, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 80009d0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80009d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d8:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ 410.488 * J_inv_tmp * d) + 146.0 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80009dc:	ee39 9b07 	vadd.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3304      	adds	r3, #4
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * d1) + 60.0 * c_J_inv_tmp * d)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3308      	adds	r3, #8
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f8:	ee37 7b07 	vadd.f64	d7, d7, d7
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 80009fc:	ee36 7b07 	vadd.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * d1) + 60.0 * c_J_inv_tmp * d)
 8000a00:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000ad8 <IVK+0x420>
 8000a04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a08:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000ae0 <IVK+0x428>
 8000a0c:	ee37 7b46 	vsub.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 8000a10:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000ae8 <IVK+0x430>
 8000a14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a18:	eeb0 0b47 	vmov.f64	d0, d7
 8000a1c:	f012 fed0 	bl	80137c0 <cos>
 8000a20:	eeb0 7b40 	vmov.f64	d7, d0
 8000a24:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000b08 <IVK+0x450>
 8000a28:	ee27 6b06 	vmul.f64	d6, d7, d6
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * d1) + 60.0 * c_J_inv_tmp * d)
 8000a2c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8000a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a34:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) + -0.8995) + -0.73665) + 1.52205) * d1) + 410.488 * cos((((q[1] +
 8000a38:	ee39 6b07 	vadd.f64	d6, d9, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * d1) + 60.0 * c_J_inv_tmp * d)
 8000a3c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8000a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a44:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000b10 <IVK+0x458>
 8000a48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000a4c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8000a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a58:	ee36 9b07 	vadd.f64	d9, d6, d7
	+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) + 352.278 *
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	ed93 7a00 	vldr	s14, [r3]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3308      	adds	r3, #8
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a74:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000ad8 <IVK+0x420>
 8000a78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a7c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000ae0 <IVK+0x428>
 8000a80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a84:	eeb0 0b47 	vmov.f64	d0, d7
 8000a88:	f012 fe9a 	bl	80137c0 <cos>
 8000a8c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a90:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000b10 <IVK+0x458>
 8000a94:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a98:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8000a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000aa4:	ee39 6b07 	vadd.f64	d6, d9, d7
 8000aa8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000aac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000b18 <IVK+0x460>
 8000ab4:	ee27 5b05 	vmul.f64	d5, d7, d5
	b_J_inv_tmp_tmp * d) + 352.278 * cos(q[1] + 1.6845) * d1));
 8000ab8:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8000abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac0:	ee25 7b07 	vmul.f64	d7, d5, d7
	+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) + 352.278 *
 8000ac4:	ee36 9b07 	vadd.f64	d9, d6, d7
	b_J_inv_tmp_tmp * d) + 352.278 * cos(q[1] + 1.6845) * d1));
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3304      	adds	r3, #4
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	e036      	b.n	8000b40 <IVK+0x488>
 8000ad2:	bf00      	nop
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	45a1cac1 	.word	0x45a1cac1
 8000adc:	3ffaf3b6 	.word	0x3ffaf3b6
 8000ae0:	39581062 	.word	0x39581062
 8000ae4:	3fecc8b4 	.word	0x3fecc8b4
 8000ae8:	05532618 	.word	0x05532618
 8000aec:	3fe792a3 	.word	0x3fe792a3
 8000af0:	19ce075f 	.word	0x19ce075f
 8000af4:	3ff85a51 	.word	0x3ff85a51
 8000af8:	19ce075f 	.word	0x19ce075f
 8000afc:	3ff85a51 	.word	0x3ff85a51
 8000b00:	00000000 	.word	0x00000000
 8000b04:	40624000 	.word	0x40624000
 8000b08:	d916872b 	.word	0xd916872b
 8000b0c:	4079a7ce 	.word	0x4079a7ce
 8000b10:	00000000 	.word	0x00000000
 8000b14:	404e0000 	.word	0x404e0000
 8000b18:	b020c49c 	.word	0xb020c49c
 8000b1c:	40760472 	.word	0x40760472
 8000b20:	45a1cac1 	.word	0x45a1cac1
 8000b24:	3ffaf3b6 	.word	0x3ffaf3b6
 8000b28:	39581062 	.word	0x39581062
 8000b2c:	3fecc8b4 	.word	0x3fecc8b4
 8000b30:	05532618 	.word	0x05532618
 8000b34:	3fe792a3 	.word	0x3fe792a3
 8000b38:	eb851eb8 	.word	0xeb851eb8
 8000b3c:	40d80d51 	.word	0x40d80d51
 8000b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b44:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8000b20 <IVK+0x468>
 8000b48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b50:	f012 fe36 	bl	80137c0 <cos>
 8000b54:	eeb0 7b40 	vmov.f64	d7, d0
 8000b58:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8000b18 <IVK+0x460>
 8000b5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b60:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b6c:	ee39 7b07 	vadd.f64	d7, d9, d7
	dv[10] = -(25.0 * d_J_inv_tmp_tmp) / (9.0 * (((((((146.0 * c_J_inv_tmp_tmp * d
 8000b70:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8000b74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b78:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000b7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	dv[15] = 25.0 * f_J_inv_tmp_tmp / (9.0 * (((((((146.0 * sin((((((q[1] + 2.0 *
 8000b84:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000b90:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3304      	adds	r3, #4
 8000b98:	edd3 7a00 	vldr	s15, [r3]
 8000b9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * (f_J_inv_tmp_tmp
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	edd3 7a00 	vldr	s15, [r3]
 8000ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	dv[15] = 25.0 * f_J_inv_tmp_tmp / (9.0 * (((((((146.0 * sin((((((q[1] + 2.0 *
 8000bac:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bb0:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * (f_J_inv_tmp_tmp
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	330c      	adds	r3, #12
 8000bb8:	edd3 7a00 	vldr	s15, [r3]
 8000bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bc4:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8000b20 <IVK+0x468>
 8000bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bcc:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8000b28 <IVK+0x470>
 8000bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bd4:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8000b30 <IVK+0x478>
 8000bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
	dv[15] = 25.0 * f_J_inv_tmp_tmp / (9.0 * (((((((146.0 * sin((((((q[1] + 2.0 *
 8000bdc:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8000af8 <IVK+0x440>
 8000be0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000be4:	eeb0 0b47 	vmov.f64	d0, d7
 8000be8:	f012 fe3e 	bl	8013868 <sin>
 8000bec:	eeb0 7b40 	vmov.f64	d7, d0
 8000bf0:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8000b00 <IVK+0x448>
 8000bf4:	ee27 6b06 	vmul.f64	d6, d7, d6
	* f_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8000bf8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000bfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * (f_J_inv_tmp_tmp
 8000c04:	ee26 9b07 	vmul.f64	d9, d6, d7
	* f_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
 8000c10:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3308      	adds	r3, #8
 8000c18:	edd3 7a00 	vldr	s15, [r3]
 8000c1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c28:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8000b20 <IVK+0x468>
 8000c2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c30:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8000b28 <IVK+0x470>
 8000c34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c38:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8000b30 <IVK+0x478>
 8000c3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c40:	eeb0 0b47 	vmov.f64	d0, d7
 8000c44:	f012 fdbc 	bl	80137c0 <cos>
 8000c48:	eeb0 7b40 	vmov.f64	d7, d0
 8000c4c:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8000b08 <IVK+0x450>
 8000c50:	ee27 6b06 	vmul.f64	d6, d7, d6
	+ -0.73665) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 146.0 * sin((((((q[1] +
 8000c54:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000c58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c60:	ee26 7b07 	vmul.f64	d7, d6, d7
	* f_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8000c64:	ee39 9b07 	vadd.f64	d9, d9, d7
	+ -0.73665) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 146.0 * sin((((((q[1] +
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	edd3 7a00 	vldr	s15, [r3]
 8000c70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3308      	adds	r3, #8
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c80:	ee37 7b07 	vadd.f64	d7, d7, d7
	+ -0.73665) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 146.0 * sin((((((q[1] +
 8000c84:	ee36 6b07 	vadd.f64	d6, d6, d7
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	330c      	adds	r3, #12
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c98:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8000b20 <IVK+0x468>
 8000c9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ca0:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8000b28 <IVK+0x470>
 8000ca4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ca8:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8000b30 <IVK+0x478>
 8000cac:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ -0.73665) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 146.0 * sin((((((q[1] +
 8000cb0:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8000af8 <IVK+0x440>
 8000cb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000cbc:	f012 fdd4 	bl	8013868 <sin>
 8000cc0:	eeb0 7b40 	vmov.f64	d7, d0
 8000cc4:	ed1f 6b72 	vldr	d6, [pc, #-456]	; 8000b00 <IVK+0x448>
 8000cc8:	ee27 6b06 	vmul.f64	d6, d7, d6
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8000ccc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000cd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8000cd8:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ -0.73665) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 146.0 * sin((((((q[1] +
 8000cdc:	ee39 9b07 	vadd.f64	d9, d9, d7
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d00:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8000b20 <IVK+0x468>
 8000d04:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 60.0
 8000d08:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8000b28 <IVK+0x470>
 8000d0c:	ee37 7b46 	vsub.f64	d7, d7, d6
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8000d10:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8000b30 <IVK+0x478>
 8000d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d18:	eeb0 0b47 	vmov.f64	d0, d7
 8000d1c:	f012 fd50 	bl	80137c0 <cos>
 8000d20:	eeb0 7b40 	vmov.f64	d7, d0
 8000d24:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8000b08 <IVK+0x450>
 8000d28:	ee27 6b06 	vmul.f64	d6, d7, d6
	1.6845) + -0.8995) + -0.73665) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 60.0
 8000d2c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000d30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d38:	ee26 7b07 	vmul.f64	d7, d6, d7
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8000d3c:	ee39 9b07 	vadd.f64	d9, d9, d7
	* cos(((q[1] + q[2]) + 1.6845) + -0.8995) * (f_J_inv_tmp_tmp *
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3304      	adds	r3, #4
 8000d44:	ed93 7a00 	vldr	s14, [r3]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3308      	adds	r3, #8
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d58:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8000b20 <IVK+0x468>
 8000d5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d60:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8000b28 <IVK+0x470>
 8000d64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d68:	eeb0 0b47 	vmov.f64	d0, d7
 8000d6c:	f012 fd28 	bl	80137c0 <cos>
 8000d70:	eeb0 7b40 	vmov.f64	d7, d0
 8000d74:	ed1f 6b9a 	vldr	d6, [pc, #-616]	; 8000b10 <IVK+0x458>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000d80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d88:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) + -0.8995) + -0.73665) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 60.0
 8000d8c:	ee39 9b07 	vadd.f64	d9, d9, d7
	f_J_inv_tmp_tmp)) + 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3304      	adds	r3, #4
 8000d94:	ed93 7a00 	vldr	s14, [r3]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da8:	ed1f 6ba3 	vldr	d6, [pc, #-652]	; 8000b20 <IVK+0x468>
 8000dac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000db0:	ed1f 6ba3 	vldr	d6, [pc, #-652]	; 8000b28 <IVK+0x470>
 8000db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db8:	eeb0 0b47 	vmov.f64	d0, d7
 8000dbc:	f012 fd00 	bl	80137c0 <cos>
 8000dc0:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc4:	ed1f 6bae 	vldr	d6, [pc, #-696]	; 8000b10 <IVK+0x458>
 8000dc8:	ee27 6b06 	vmul.f64	d6, d7, d6
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000dcc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000dd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000dd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	f_J_inv_tmp_tmp)) + 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8000dd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ddc:	ee39 9b07 	vadd.f64	d9, d9, d7
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3304      	adds	r3, #4
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dec:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8000b20 <IVK+0x468>
 8000df0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df4:	eeb0 0b47 	vmov.f64	d0, d7
 8000df8:	f012 fce2 	bl	80137c0 <cos>
 8000dfc:	eeb0 7b40 	vmov.f64	d7, d0
 8000e00:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8000b18 <IVK+0x460>
 8000e04:	ee27 6b06 	vmul.f64	d6, d7, d6
	(f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000e08:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8000e0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e18:	ee39 9b07 	vadd.f64	d9, d9, d7
	(f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e28:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8000b20 <IVK+0x468>
 8000e2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e30:	eeb0 0b47 	vmov.f64	d0, d7
 8000e34:	f012 fcc4 	bl	80137c0 <cos>
 8000e38:	eeb0 7b40 	vmov.f64	d7, d0
 8000e3c:	ed1f 6bca 	vldr	d6, [pc, #-808]	; 8000b18 <IVK+0x460>
 8000e40:	ee27 6b06 	vmul.f64	d6, d7, d6
	(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8000e44:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000e48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	(f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + 352.278 * cos(q[1] + 1.6845) *
 8000e50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e54:	ee39 7b07 	vadd.f64	d7, d9, d7
	dv[15] = 25.0 * f_J_inv_tmp_tmp / (9.0 * (((((((146.0 * sin((((((q[1] + 2.0 *
 8000e58:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8000e5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e60:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000e64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	dv[20] = 0.0;
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	667b      	str	r3, [r7, #100]	; 0x64
	d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3304      	adds	r3, #4
 8000e76:	ed93 7a00 	vldr	s14, [r3]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e8a:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8000b20 <IVK+0x468>
 8000e8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e92:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8000b28 <IVK+0x470>
 8000e96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e9e:	f012 fce3 	bl	8013868 <sin>
 8000ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eaa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000eca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ece:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8000b20 <IVK+0x468>
 8000ed2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ed6:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8000b28 <IVK+0x470>
 8000eda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ede:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8000b30 <IVK+0x478>
 8000ee2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee6:	eeb0 0b47 	vmov.f64	d0, d7
 8000eea:	f012 fc69 	bl	80137c0 <cos>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8000b38 <IVK+0x480>
 8000ef6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000efa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8000efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f0a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	d2;
	d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8000f0e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000f12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f16:	ed9f 6bf8 	vldr	d6, [pc, #992]	; 80012f8 <IVK+0xc40>
 8000f1a:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f36:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001300 <IVK+0xc48>
 8000f3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f3e:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001308 <IVK+0xc50>
 8000f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f46:	eeb0 0b47 	vmov.f64	d0, d7
 8000f4a:	f012 fc39 	bl	80137c0 <cos>
 8000f4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f52:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	d5 = 289211.783328 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f7e:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001300 <IVK+0xc48>
 8000f82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f86:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001308 <IVK+0xc50>
 8000f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f8e:	ed9f 6bea 	vldr	d6, [pc, #936]	; 8001338 <IVK+0xc80>
 8000f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f96:	eeb0 0b47 	vmov.f64	d0, d7
 8000f9a:	f012 fc11 	bl	80137c0 <cos>
 8000f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa2:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8001310 <IVK+0xc58>
 8000fa6:	ee27 6b06 	vmul.f64	d6, d7, d6
	* e_J_inv_tmp_tmp;
 8000faa:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8000fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb2:	ee26 7b07 	vmul.f64	d7, d6, d7
	d5 = 289211.783328 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 8000fb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8000fbe:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001310 <IVK+0xc58>
 8000fca:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fce:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fde:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8001300 <IVK+0xc48>
 8000ffe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001002:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8001308 <IVK+0xc50>
 8001006:	ee37 7b46 	vsub.f64	d7, d7, d6
 800100a:	eeb0 0b47 	vmov.f64	d0, d7
 800100e:	f012 fbd7 	bl	80137c0 <cos>
 8001012:	eeb0 7b40 	vmov.f64	d7, d0
 8001016:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001318 <IVK+0xc60>
 800101a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800101e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001026:	ee26 7b07 	vmul.f64	d7, d6, d7
 800102a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800102e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 8001032:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800103a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8001318 <IVK+0xc60>
 800103e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001042:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800104a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800104e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001052:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	dv[1] = 18.0 * (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8001056:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001320 <IVK+0xc68>
 8001062:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001066:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800106a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001072:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107a:	ee26 6b07 	vmul.f64	d6, d6, d7
					119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 800107e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001086:	ed9f 5baa 	vldr	d5, [pc, #680]	; 8001330 <IVK+0xc78>
 800108a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800108e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001096:	ee25 5b07 	vmul.f64	d5, d5, d7
 800109a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800109e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a2:	ee25 7b07 	vmul.f64	d7, d5, d7
	dv[1] = 18.0 * (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80010a6:	ee36 6b07 	vadd.f64	d6, d6, d7
				   119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 80010aa:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80010ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b2:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001330 <IVK+0xc78>
 80010b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80010ba:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80010be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80010c6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80010ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ce:	ee25 7b07 	vmul.f64	d7, d5, d7
					119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 80010d2:	ee36 6b07 	vadd.f64	d6, d6, d7
				   d_J_inv_tmp_tmp) + 8760.0 * b_J_inv_tmp * c_J_inv_tmp *
 80010d6:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ed9f 5b90 	vldr	d5, [pc, #576]	; 8001320 <IVK+0xc68>
 80010e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80010e6:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ee25 5b07 	vmul.f64	d5, d5, d7
 80010f2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80010f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010fe:	ee36 7b07 	vadd.f64	d7, d6, d7
	dv[1] = 18.0 * (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8001102:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8001106:	ee27 5b06 	vmul.f64	d5, d7, d6
				  d_J_inv_tmp_tmp) / (((((((((((24629.28 * J_inv_tmp *
 800110a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800110e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001112:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80012f8 <IVK+0xc40>
 8001116:	ee27 6b06 	vmul.f64	d6, d7, d6
 800111a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800111e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001122:	ee26 6b07 	vmul.f64	d6, d6, d7
	d_J_inv_tmp * d - 24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) + d3 * d1) -
 8001126:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800112a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001132:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113a:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 80012f8 <IVK+0xc40>
 800113e:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001142:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800114e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8001152:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001156:	ee24 7b07 	vmul.f64	d7, d4, d7
 800115a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800115e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001162:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116e:	ee36 6b07 	vadd.f64	d6, d6, d7
	d4 * d1) + 289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) - d6 * d) + d5 *
 8001172:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001176:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	d_J_inv_tmp * d - 24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) + d3 * d1) -
 8001182:	ee36 6b47 	vsub.f64	d6, d6, d7
	d4 * d1) + 289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) - d6 * d) + d5 *
 8001186:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800118a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118e:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8001310 <IVK+0xc58>
 8001192:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001196:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800119a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800119e:	ee24 4b07 	vmul.f64	d4, d4, d7
 80011a2:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80011a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011aa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80011ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011b2:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80011b6:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80011ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011c6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80011ca:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d6:	ee36 6b07 	vadd.f64	d6, d6, d7
	d1) - d6 * d1) + 21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) - 21136.68 *
 80011da:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80011de:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011ee:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80011f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f6:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8001318 <IVK+0xc60>
 80011fa:	ee27 4b04 	vmul.f64	d4, d7, d4
 80011fe:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ee24 4b07 	vmul.f64	d4, d4, d7
 800120a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800120e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001212:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001216:	ee36 6b07 	vadd.f64	d6, d6, d7
 800121a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800121e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001222:	ed9f 4b3d 	vldr	d4, [pc, #244]	; 8001318 <IVK+0xc60>
 8001226:	ee27 4b04 	vmul.f64	d4, d7, d4
	d_J_inv_tmp * b_J_inv_tmp_tmp * d) + d7 * d1) - d8 * d1);
 800122a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001236:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800123a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800123e:	ee24 7b07 	vmul.f64	d7, d4, d7
	d1) - d6 * d1) + 21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) - 21136.68 *
 8001242:	ee36 6b47 	vsub.f64	d6, d6, d7
	d_J_inv_tmp * b_J_inv_tmp_tmp * d) + d7 * d1) - d8 * d1);
 8001246:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800124a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001256:	ee36 6b07 	vadd.f64	d6, d6, d7
 800125a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800125e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800126a:	ee36 6b47 	vsub.f64	d6, d6, d7
				  d_J_inv_tmp_tmp) / (((((((((((24629.28 * J_inv_tmp *
 800126e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001272:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[1] = 18.0 * (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8001276:	edc7 7a06 	vstr	s15, [r7, #24]
	d9 = 8760.0 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3304      	adds	r3, #4
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3308      	adds	r3, #8
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001292:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001296:	ee36 6b07 	vadd.f64	d6, d6, d7
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012aa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001300 <IVK+0xc48>
 80012ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012b2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001308 <IVK+0xc50>
 80012b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012ba:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001338 <IVK+0xc80>
 80012be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012c2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001328 <IVK+0xc70>
 80012c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012ca:	eeb0 0b47 	vmov.f64	d0, d7
 80012ce:	f012 fa77 	bl	80137c0 <cos>
 80012d2:	eeb0 7b40 	vmov.f64	d7, d0
 80012d6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001320 <IVK+0xc68>
 80012da:	ee27 8b06 	vmul.f64	d8, d7, d6
					 -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3304      	adds	r3, #4
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3308      	adds	r3, #8
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	e035      	b.n	8001360 <IVK+0xca8>
 80012f4:	f3af 8000 	nop.w
 80012f8:	eb851eb8 	.word	0xeb851eb8
 80012fc:	40d80d51 	.word	0x40d80d51
 8001300:	45a1cac1 	.word	0x45a1cac1
 8001304:	3ffaf3b6 	.word	0x3ffaf3b6
 8001308:	39581062 	.word	0x39581062
 800130c:	3fecc8b4 	.word	0x3fecc8b4
 8001310:	2220bc38 	.word	0x2220bc38
 8001314:	4111a6ef 	.word	0x4111a6ef
 8001318:	851eb852 	.word	0x851eb852
 800131c:	40d4a42b 	.word	0x40d4a42b
 8001320:	00000000 	.word	0x00000000
 8001324:	40c11c00 	.word	0x40c11c00
 8001328:	19ce075f 	.word	0x19ce075f
 800132c:	3ff85a51 	.word	0x3ff85a51
 8001330:	ef9db22d 	.word	0xef9db22d
 8001334:	40fd4367 	.word	0x40fd4367
 8001338:	05532618 	.word	0x05532618
 800133c:	3fe792a3 	.word	0x3fe792a3
 8001340:	d916872b 	.word	0xd916872b
 8001344:	4089a7ce 	.word	0x4089a7ce
 8001348:	45a1cac1 	.word	0x45a1cac1
 800134c:	3ffaf3b6 	.word	0x3ffaf3b6
 8001350:	39581062 	.word	0x39581062
 8001354:	3fecc8b4 	.word	0x3fecc8b4
 8001358:	00000000 	.word	0x00000000
 800135c:	404e0000 	.word	0x404e0000
 8001360:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001364:	ed1f 6b08 	vldr	d6, [pc, #-32]	; 8001348 <IVK+0xc90>
 8001368:	ee37 7b06 	vadd.f64	d7, d7, d6
 800136c:	ed1f 6b08 	vldr	d6, [pc, #-32]	; 8001350 <IVK+0xc98>
 8001370:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001374:	eeb0 0b47 	vmov.f64	d0, d7
 8001378:	f012 fa22 	bl	80137c0 <cos>
 800137c:	eeb0 7b40 	vmov.f64	d7, d0
 8001380:	ee28 7b07 	vmul.f64	d7, d8, d7
	d9 = 8760.0 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001384:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001388:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	-0.8995);
	d10 = 8760.0 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3304      	adds	r3, #4
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3308      	adds	r3, #8
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	330c      	adds	r3, #12
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013bc:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8001348 <IVK+0xc90>
 80013c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013c4:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8001350 <IVK+0xc98>
 80013c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013cc:	ed1f 6b26 	vldr	d6, [pc, #-152]	; 8001338 <IVK+0xc80>
 80013d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013d4:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8001328 <IVK+0xc70>
 80013d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013dc:	eeb0 0b47 	vmov.f64	d0, d7
 80013e0:	f012 fa42 	bl	8013868 <sin>
 80013e4:	eeb0 7b40 	vmov.f64	d7, d0
 80013e8:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8001320 <IVK+0xc68>
 80013ec:	ee27 8b06 	vmul.f64	d8, d7, d6
					  -0.73665) + 1.52205) * sin(((q[1] + q[2]) + 1.6845) +
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3308      	adds	r3, #8
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001408:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8001348 <IVK+0xc90>
 800140c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001410:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8001350 <IVK+0xc98>
 8001414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001418:	eeb0 0b47 	vmov.f64	d0, d7
 800141c:	f012 fa24 	bl	8013868 <sin>
 8001420:	eeb0 7b40 	vmov.f64	d7, d0
 8001424:	ee28 7b07 	vmul.f64	d7, d8, d7
	d10 = 8760.0 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001428:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800142c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	-0.8995);
	d3 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8001430:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001434:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001438:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
				 (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d3 * (d_J_inv_tmp_tmp *
 8001440:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001444:	ee67 6aa7 	vmul.f32	s13, s15, s15
	d3 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8001448:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800144c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001450:	ee37 7a67 	vsub.f32	s14, s14, s15
				 (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d3 * (d_J_inv_tmp_tmp *
 8001454:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001458:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800145c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee37 7a27 	vadd.f32	s14, s14, s15
	d_J_inv_tmp_tmp)) - d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d5 *
 8001468:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800146c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001470:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a67 	vsub.f32	s14, s14, s15
			  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) - d6 * (f_J_inv_tmp_tmp *
 800147c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001480:	ee67 6aa7 	vmul.f32	s13, s15, s15
	d_J_inv_tmp_tmp)) - d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d5 *
 8001484:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148c:	ee37 7a27 	vadd.f32	s14, s14, s15
			  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) - d6 * (f_J_inv_tmp_tmp *
 8001490:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001494:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001498:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800149c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a0:	ee37 7a67 	vsub.f32	s14, s14, s15
			  f_J_inv_tmp_tmp)) + d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d6
 80014a4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014a8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
		   * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d7 * (f_J_inv_tmp_tmp *
 80014b8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  f_J_inv_tmp_tmp)) + d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d6
 80014c8:	ee37 7a67 	vsub.f32	s14, s14, s15
		   * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d7 * (f_J_inv_tmp_tmp *
 80014cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80014d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
		   f_J_inv_tmp_tmp)) - d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d7 *
 80014e0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80014e4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014e8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80014ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f0:	ee37 7a67 	vsub.f32	s14, s14, s15
		(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d8 * (d_J_inv_tmp_tmp *
 80014f4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
		   f_J_inv_tmp_tmp)) - d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d7 *
 80014fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee37 7a27 	vadd.f32	s14, s14, s15
		(d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d8 * (d_J_inv_tmp_tmp *
 8001508:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800150c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001510:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
	d3 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8001518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	d_J_inv_tmp_tmp);
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 8001520:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001524:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3304      	adds	r3, #4
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 8001548:	ee37 7b07 	vadd.f64	d7, d7, d7
 800154c:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	330c      	adds	r3, #12
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001560:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8001348 <IVK+0xc90>
 8001564:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001568:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8001350 <IVK+0xc98>
 800156c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001570:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8001338 <IVK+0xc80>
 8001574:	ee37 7b46 	vsub.f64	d7, d7, d6
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 8001578:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8001328 <IVK+0xc70>
 800157c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001580:	eeb0 0b47 	vmov.f64	d0, d7
 8001584:	f012 f91c 	bl	80137c0 <cos>
 8001588:	eeb0 7b40 	vmov.f64	d7, d0
 800158c:	ed1f 6b98 	vldr	d6, [pc, #-608]	; 8001330 <IVK+0xc78>
 8001590:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3304      	adds	r3, #4
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp) + 119862.496
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ac:	ee37 7b07 	vadd.f64	d7, d7, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 80015b0:	ee36 7b07 	vadd.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp) + 119862.496
 80015b4:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8001348 <IVK+0xc90>
 80015b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015bc:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8001350 <IVK+0xc98>
 80015c0:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 80015c4:	ed1f 6ba4 	vldr	d6, [pc, #-656]	; 8001338 <IVK+0xc80>
 80015c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015cc:	eeb0 0b47 	vmov.f64	d0, d7
 80015d0:	f012 f8f6 	bl	80137c0 <cos>
 80015d4:	eeb0 7b40 	vmov.f64	d7, d0
 80015d8:	ee29 6b07 	vmul.f64	d6, d9, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp) + 119862.496
 80015dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	ee26 7b07 	vmul.f64	d7, d6, d7
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 80015e8:	ee38 8b07 	vadd.f64	d8, d8, d7
					 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3304      	adds	r3, #4
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3308      	adds	r3, #8
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001604:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001608:	ee36 6b07 	vadd.f64	d6, d6, d7
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	330c      	adds	r3, #12
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800161c:	ed1f 6bb6 	vldr	d6, [pc, #-728]	; 8001348 <IVK+0xc90>
 8001620:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001624:	ed1f 6bb6 	vldr	d6, [pc, #-728]	; 8001350 <IVK+0xc98>
 8001628:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800162c:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8001338 <IVK+0xc80>
 8001630:	ee37 7b46 	vsub.f64	d7, d7, d6
					 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8001634:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8001328 <IVK+0xc70>
 8001638:	ee37 7b06 	vadd.f64	d7, d7, d6
 800163c:	eeb0 0b47 	vmov.f64	d0, d7
 8001640:	f012 f912 	bl	8013868 <sin>
 8001644:	eeb0 7b40 	vmov.f64	d7, d0
 8001648:	ed1f 6bc7 	vldr	d6, [pc, #-796]	; 8001330 <IVK+0xc78>
 800164c:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3304      	adds	r3, #4
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3308      	adds	r3, #8
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001668:	ee37 7b07 	vadd.f64	d7, d7, d7
 800166c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001670:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8001348 <IVK+0xc90>
 8001674:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001678:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8001350 <IVK+0xc98>
 800167c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001680:	ed1f 6bd3 	vldr	d6, [pc, #-844]	; 8001338 <IVK+0xc80>
 8001684:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001688:	eeb0 0b47 	vmov.f64	d0, d7
 800168c:	f012 f8ec 	bl	8013868 <sin>
 8001690:	eeb0 7b40 	vmov.f64	d7, d0
 8001694:	ee29 6b07 	vmul.f64	d6, d9, d7
	-0.73665) * f_J_inv_tmp_tmp) + d9 * f_J_inv_tmp_tmp)) / d3;
 8001698:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800169c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a0:	ee26 7b07 	vmul.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp) + 119862.496
 80016a4:	ee38 6b07 	vadd.f64	d6, d8, d7
	-0.73665) * f_J_inv_tmp_tmp) + d9 * f_J_inv_tmp_tmp)) / d3;
 80016a8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80016ac:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016b8:	ee36 7b07 	vadd.f64	d7, d6, d7
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 80016bc:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 80016c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016c4:	eeb1 5b47 	vneg.f64	d5, d7
	-0.73665) * f_J_inv_tmp_tmp) + d9 * f_J_inv_tmp_tmp)) / d3;
 80016c8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[6] = -(18.0 * (((d10 * f_J_inv_tmp_tmp + 119862.496 * cos((((((q[1] + 2.0 *
 80016d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	dv[11] = -(18.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp + 60.0 * cos(((q[1] +
 80016dc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80016e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e4:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8001340 <IVK+0xc88>
 80016e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80016f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3304      	adds	r3, #4
 80016fc:	ed93 7a00 	vldr	s14, [r3]
	q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp)) / d3;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3308      	adds	r3, #8
 8001704:	edd3 7a00 	vldr	s15, [r3]
	dv[11] = -(18.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp + 60.0 * cos(((q[1] +
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp)) / d3;
 8001710:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8001348 <IVK+0xc90>
 8001714:	ee37 7b06 	vadd.f64	d7, d7, d6
	dv[11] = -(18.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp + 60.0 * cos(((q[1] +
 8001718:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8001350 <IVK+0xc98>
 800171c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001720:	eeb0 0b47 	vmov.f64	d0, d7
 8001724:	f012 f84c 	bl	80137c0 <cos>
 8001728:	eeb0 7b40 	vmov.f64	d7, d0
 800172c:	ed1f 6bf6 	vldr	d6, [pc, #-984]	; 8001358 <IVK+0xca0>
 8001730:	ee27 6b06 	vmul.f64	d6, d7, d6
	q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp)) / d3;
 8001734:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001738:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173c:	ee26 7b07 	vmul.f64	d7, d6, d7
	dv[11] = -(18.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp + 60.0 * cos(((q[1] +
 8001740:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001744:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8001748:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174c:	eeb1 5b47 	vneg.f64	d5, d7
	q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp)) / d3;
 8001750:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001754:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001758:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800175c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[11] = -(18.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp + 60.0 * cos(((q[1] +
 8001760:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	dv[16] = -(18.0 * (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3308      	adds	r3, #8
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800177c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001780:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001784:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001b60 <IVK+0x14a8>
 8001788:	ee37 7b06 	vadd.f64	d7, d7, d6
 800178c:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001b68 <IVK+0x14b0>
 8001790:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001794:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001b70 <IVK+0x14b8>
 8001798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800179c:	eeb0 0b47 	vmov.f64	d0, d7
 80017a0:	f012 f80e 	bl	80137c0 <cos>
 80017a4:	eeb0 7b40 	vmov.f64	d7, d0
 80017a8:	ed9f 6bf3 	vldr	d6, [pc, #972]	; 8001b78 <IVK+0x14c0>
 80017ac:	ee27 6b06 	vmul.f64	d6, d7, d6
	-0.73665) * d_J_inv_tmp_tmp + 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 80017b0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3304      	adds	r3, #4
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3308      	adds	r3, #8
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017d4:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8001b60 <IVK+0x14a8>
 80017d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017dc:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8001b68 <IVK+0x14b0>
 80017e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017e4:	eeb0 0b47 	vmov.f64	d0, d7
 80017e8:	f011 ffea 	bl	80137c0 <cos>
 80017ec:	eeb0 7b40 	vmov.f64	d7, d0
 80017f0:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8001ba8 <IVK+0x14f0>
 80017f4:	ee27 6b06 	vmul.f64	d6, d7, d6
					 * d_J_inv_tmp_tmp)) / d3;
 80017f8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80017fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001800:	ee26 7b07 	vmul.f64	d7, d6, d7
	-0.73665) * d_J_inv_tmp_tmp + 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001804:	ee38 7b07 	vadd.f64	d7, d8, d7
	dv[16] = -(18.0 * (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8001808:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 800180c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001810:	eeb1 5b47 	vneg.f64	d5, d7
					 * d_J_inv_tmp_tmp)) / d3;
 8001814:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001818:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800181c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[16] = -(18.0 * (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8001824:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	dv[21] = -(18.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d3;
 8001828:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800182c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001830:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8001b78 <IVK+0x14c0>
 8001834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001838:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800183c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001840:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8001ba8 <IVK+0x14f0>
 8001844:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001848:	ee36 7b07 	vadd.f64	d7, d6, d7
 800184c:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
 8001850:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001854:	eeb1 5b47 	vneg.f64	d5, d7
 8001858:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800185c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001860:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001864:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001868:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	d4 = 2.0 * d3;
 800186c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001874:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8001878:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800187c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001880:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8001b80 <IVK+0x14c8>
 8001884:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001888:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800188c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001890:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001894:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800189c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018a0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80018a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018a8:	ee26 6b07 	vmul.f64	d6, d6, d7
						d_J_inv_tmp_tmp + 59931.248 * c_J_inv_tmp_tmp *
 80018ac:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80018b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018b4:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8001b80 <IVK+0x14c8>
 80018b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018bc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80018c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c4:	ee25 5b07 	vmul.f64	d5, d5, d7
						J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d9 *
 80018c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80018cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80018d4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80018d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018dc:	ee25 7b07 	vmul.f64	d7, d5, d7
						d_J_inv_tmp_tmp + 59931.248 * c_J_inv_tmp_tmp *
 80018e0:	ee36 6b07 	vadd.f64	d6, d6, d7
						J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d9 *
 80018e4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80018e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80018ec:	ee27 7a27 	vmul.f32	s14, s14, s15
					   e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 * b_J_inv_tmp *
 80018f0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
						J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d9 *
 80018fc:	ee36 6b07 	vadd.f64	d6, d6, d7
					   e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 * b_J_inv_tmp *
 8001900:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001908:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8001b98 <IVK+0x14e0>
 800190c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001910:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001914:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001918:	ee25 5b07 	vmul.f64	d5, d5, d7
					  b_J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d10 *
 800191c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001924:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001928:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800192c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001930:	ee25 7b07 	vmul.f64	d7, d5, d7
					   e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 * b_J_inv_tmp *
 8001934:	ee36 6b07 	vadd.f64	d6, d6, d7
					  b_J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d10 *
 8001938:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800193c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001940:	ee27 7a27 	vmul.f32	s14, s14, s15
					 e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 *
 8001944:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  b_J_inv_tmp_tmp * e_J_inv_tmp * d_J_inv_tmp_tmp) + d10 *
 8001950:	ee36 6b07 	vadd.f64	d6, d6, d7
					 e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 *
 8001954:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001958:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800195c:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8001b98 <IVK+0x14e0>
 8001960:	ee27 5b05 	vmul.f64	d5, d7, d5
					c_J_inv_tmp_tmp * e_J_inv_tmp_tmp * e_J_inv_tmp *
 8001964:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800196c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001970:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001978:	ee25 5b07 	vmul.f64	d5, d5, d7
 800197c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001984:	ee25 7b07 	vmul.f64	d7, d5, d7
					 e_J_inv_tmp * d_J_inv_tmp_tmp) + 51432.588 *
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
	dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 800198c:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8001ba0 <IVK+0x14e8>
 8001990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001994:	eeb1 5b47 	vneg.f64	d5, d7
					d_J_inv_tmp_tmp)) / d4;
 8001998:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800199c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 80019a8:	edc7 7a07 	vstr	s15, [r7, #28]
	dv[7] = 55.0 * (((((59931.248 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3304      	adds	r3, #4
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3308      	adds	r3, #8
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	330c      	adds	r3, #12
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019dc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001b60 <IVK+0x14a8>
 80019e0:	ee37 7b06 	vadd.f64	d7, d7, d6
	+ -0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 80019e4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001b68 <IVK+0x14b0>
 80019e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019ec:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001b70 <IVK+0x14b8>
 80019f0:	ee37 7b46 	vsub.f64	d7, d7, d6
	dv[7] = 55.0 * (((((59931.248 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80019f4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8001b90 <IVK+0x14d8>
 80019f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001a00:	f011 fede 	bl	80137c0 <cos>
 8001a04:	eeb0 7b40 	vmov.f64	d7, d0
 8001a08:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001b80 <IVK+0x14c8>
 8001a0c:	ee27 8b06 	vmul.f64	d8, d7, d6
	+ -0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3304      	adds	r3, #4
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a30:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001b60 <IVK+0x14a8>
 8001a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a38:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001b68 <IVK+0x14b0>
 8001a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a40:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001b70 <IVK+0x14b8>
 8001a44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a48:	eeb0 0b47 	vmov.f64	d0, d7
 8001a4c:	f011 feb8 	bl	80137c0 <cos>
 8001a50:	eeb0 7b40 	vmov.f64	d7, d0
 8001a54:	ee28 6b07 	vmul.f64	d6, d8, d7
	-0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp + 59931.248 * sin
 8001a58:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a64:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a6c:	ee26 8b07 	vmul.f64	d8, d6, d7
					  ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3304      	adds	r3, #4
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	330c      	adds	r3, #12
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aa0:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001b60 <IVK+0x14a8>
 8001aa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001aa8:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001b68 <IVK+0x14b0>
 8001aac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ab0:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001b70 <IVK+0x14b8>
 8001ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp + 59931.248 * sin
 8001ab8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001b90 <IVK+0x14d8>
 8001abc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac4:	f011 fed0 	bl	8013868 <sin>
 8001ac8:	eeb0 7b40 	vmov.f64	d7, d0
 8001acc:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001b80 <IVK+0x14c8>
 8001ad0:	ee27 9b06 	vmul.f64	d9, d7, d6
						-0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aec:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001af0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001af4:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001b60 <IVK+0x14a8>
 8001af8:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 *
 8001afc:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001b68 <IVK+0x14b0>
 8001b00:	ee37 7b46 	vsub.f64	d7, d7, d6
						-0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8001b04:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001b70 <IVK+0x14b8>
 8001b08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b10:	f011 feaa 	bl	8013868 <sin>
 8001b14:	eeb0 7b40 	vmov.f64	d7, d0
 8001b18:	ee29 6b07 	vmul.f64	d6, d9, d7
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 *
 8001b1c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b24:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b30:	ee26 7b07 	vmul.f64	d7, d6, d7
	-0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp + 59931.248 * sin
 8001b34:	ee38 8b07 	vadd.f64	d8, d8, d7
					 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3308      	adds	r3, #8
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b54:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	e03d      	b.n	8001bd8 <IVK+0x1520>
 8001b5c:	f3af 8000 	nop.w
 8001b60:	45a1cac1 	.word	0x45a1cac1
 8001b64:	3ffaf3b6 	.word	0x3ffaf3b6
 8001b68:	39581062 	.word	0x39581062
 8001b6c:	3fecc8b4 	.word	0x3fecc8b4
 8001b70:	05532618 	.word	0x05532618
 8001b74:	3fe792a3 	.word	0x3fe792a3
 8001b78:	d916872b 	.word	0xd916872b
 8001b7c:	4089a7ce 	.word	0x4089a7ce
 8001b80:	ef9db22d 	.word	0xef9db22d
 8001b84:	40ed4367 	.word	0x40ed4367
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40c11c00 	.word	0x40c11c00
 8001b90:	19ce075f 	.word	0x19ce075f
 8001b94:	3ff85a51 	.word	0x3ff85a51
 8001b98:	d0e56042 	.word	0xd0e56042
 8001b9c:	40e91d12 	.word	0x40e91d12
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	404b8000 	.word	0x404b8000
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	404e0000 	.word	0x404e0000
 8001bb0:	b020c49c 	.word	0xb020c49c
 8001bb4:	40760472 	.word	0x40760472
 8001bb8:	45a1cac1 	.word	0x45a1cac1
 8001bbc:	3ffaf3b6 	.word	0x3ffaf3b6
 8001bc0:	39581062 	.word	0x39581062
 8001bc4:	3fecc8b4 	.word	0x3fecc8b4
 8001bc8:	05532618 	.word	0x05532618
 8001bcc:	3fe792a3 	.word	0x3fe792a3
 8001bd0:	d916872b 	.word	0xd916872b
 8001bd4:	4079a7ce 	.word	0x4079a7ce
 8001bd8:	330c      	adds	r3, #12
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001be6:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bb8 <IVK+0x1500>
 8001bea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bee:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bc0 <IVK+0x1508>
 8001bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bf6:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bc8 <IVK+0x1510>
 8001bfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bfe:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 8001b90 <IVK+0x14d8>
 8001c02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c06:	eeb0 0b47 	vmov.f64	d0, d7
 8001c0a:	f011 fdd9 	bl	80137c0 <cos>
 8001c0e:	eeb0 7b40 	vmov.f64	d7, d0
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 *
 8001c12:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8001b88 <IVK+0x14d0>
 8001c16:	ee27 9b06 	vmul.f64	d9, d7, d6
	-0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	ed93 7a00 	vldr	s14, [r3]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3308      	adds	r3, #8
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c32:	ed1f 6b1f 	vldr	d6, [pc, #-124]	; 8001bb8 <IVK+0x1500>
 8001c36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c3a:	ed1f 6b1f 	vldr	d6, [pc, #-124]	; 8001bc0 <IVK+0x1508>
 8001c3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c42:	eeb0 0b47 	vmov.f64	d0, d7
 8001c46:	f011 fdbb 	bl	80137c0 <cos>
 8001c4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c4e:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c5c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c60:	f011 fdae 	bl	80137c0 <cos>
 8001c64:	eeb0 7b40 	vmov.f64	d7, d0
 8001c68:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001c6c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c74:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 *
 8001c78:	ee38 8b07 	vadd.f64	d8, d8, d7
					 e_J_inv_tmp) + 51432.588 * cos((((((q[1] + 2.0 * q[2]) + q
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c94:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c98:	ee36 6b07 	vadd.f64	d6, d6, d7
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) *
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					 e_J_inv_tmp) + 51432.588 * cos((((((q[1] + 2.0 * q[2]) + q
 8001ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) *
 8001cac:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8001bb8 <IVK+0x1500>
 8001cb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cb4:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8001bc0 <IVK+0x1508>
 8001cb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cbc:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8001bc8 <IVK+0x1510>
 8001cc0:	ee37 7b46 	vsub.f64	d7, d7, d6
					 e_J_inv_tmp) + 51432.588 * cos((((((q[1] + 2.0 * q[2]) + q
 8001cc4:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8001b90 <IVK+0x14d8>
 8001cc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd0:	f011 fd76 	bl	80137c0 <cos>
 8001cd4:	eeb0 7b40 	vmov.f64	d7, d0
 8001cd8:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001b98 <IVK+0x14e0>
 8001cdc:	ee27 9b06 	vmul.f64	d9, d7, d6
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) *
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cec:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8001bb8 <IVK+0x1500>
 8001cf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf8:	f011 fd62 	bl	80137c0 <cos>
 8001cfc:	eeb0 7b40 	vmov.f64	d7, d0
 8001d00:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001d04:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0c:	ee26 6b07 	vmul.f64	d6, d6, d7
					f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 * sin((((((q[1] +
 8001d10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d18:	ee26 7b07 	vmul.f64	d7, d6, d7
					 e_J_inv_tmp) + 51432.588 * cos((((((q[1] + 2.0 * q[2]) + q
 8001d1c:	ee38 8b07 	vadd.f64	d8, d8, d7
					f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 * sin((((((q[1] +
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3304      	adds	r3, #4
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin(((q[1]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d38:	ee37 7b07 	vadd.f64	d7, d7, d7
					f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 * sin((((((q[1] +
 8001d3c:	ee36 6b07 	vadd.f64	d6, d6, d7
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin(((q[1]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	330c      	adds	r3, #12
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d50:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001bb8 <IVK+0x1500>
 8001d54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d58:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001bc0 <IVK+0x1508>
 8001d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d60:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001bc8 <IVK+0x1510>
 8001d64:	ee37 7b46 	vsub.f64	d7, d7, d6
					f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 * sin((((((q[1] +
 8001d68:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 8001b90 <IVK+0x14d8>
 8001d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d70:	eeb0 0b47 	vmov.f64	d0, d7
 8001d74:	f011 fd78 	bl	8013868 <sin>
 8001d78:	eeb0 7b40 	vmov.f64	d7, d0
 8001d7c:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8001b88 <IVK+0x14d0>
 8001d80:	ee27 9b06 	vmul.f64	d9, d7, d6
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin(((q[1]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3304      	adds	r3, #4
 8001d88:	ed93 7a00 	vldr	s14, [r3]
	+ q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) + 51432.588 * sin
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d9c:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001bb8 <IVK+0x1500>
 8001da0:	ee37 7b06 	vadd.f64	d7, d7, d6
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin(((q[1]
 8001da4:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001bc0 <IVK+0x1508>
 8001da8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dac:	eeb0 0b47 	vmov.f64	d0, d7
 8001db0:	f011 fd5a 	bl	8013868 <sin>
 8001db4:	eeb0 7b40 	vmov.f64	d7, d0
 8001db8:	ee29 9b07 	vmul.f64	d9, d9, d7
	+ q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) + 51432.588 * sin
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001dca:	f011 fcf9 	bl	80137c0 <cos>
 8001dce:	eeb0 7b40 	vmov.f64	d7, d0
 8001dd2:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001dd6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001dda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dde:	ee26 7b07 	vmul.f64	d7, d6, d7
					f_J_inv_tmp_tmp * e_J_inv_tmp) + 8760.0 * sin((((((q[1] +
 8001de2:	ee38 8b07 	vadd.f64	d8, d8, d7
				  ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3308      	adds	r3, #8
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e16:	ed1f 6b98 	vldr	d6, [pc, #-608]	; 8001bb8 <IVK+0x1500>
 8001e1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e1e:	ed1f 6b98 	vldr	d6, [pc, #-608]	; 8001bc0 <IVK+0x1508>
 8001e22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e26:	ed1f 6b98 	vldr	d6, [pc, #-608]	; 8001bc8 <IVK+0x1510>
 8001e2a:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) + 51432.588 * sin
 8001e2e:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8001b90 <IVK+0x14d8>
 8001e32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e36:	eeb0 0b47 	vmov.f64	d0, d7
 8001e3a:	f011 fd15 	bl	8013868 <sin>
 8001e3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e42:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8001b98 <IVK+0x14e0>
 8001e46:	ee27 9b06 	vmul.f64	d9, d7, d6
					-0.73665) + 1.52205) * sin(q[1] + 1.6845) * f_J_inv_tmp_tmp *
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e56:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8001bb8 <IVK+0x1500>
 8001e5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e5e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e62:	f011 fd01 	bl	8013868 <sin>
 8001e66:	eeb0 7b40 	vmov.f64	d7, d0
 8001e6a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001e6e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e7a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e82:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) + 51432.588 * sin
 8001e86:	ee38 7b07 	vadd.f64	d7, d8, d7
	dv[7] = 55.0 * (((((59931.248 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8001e8a:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8001ba0 <IVK+0x14e8>
 8001e8e:	ee27 5b06 	vmul.f64	d5, d7, d6
				  e_J_inv_tmp) / d4;
 8001e92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e96:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[7] = 55.0 * (((((59931.248 * cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8001ea2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	dv[12] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ebe:	ed1f 6bc2 	vldr	d6, [pc, #-776]	; 8001bb8 <IVK+0x1500>
 8001ec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ec6:	ed1f 6bc2 	vldr	d6, [pc, #-776]	; 8001bc0 <IVK+0x1508>
 8001eca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ece:	eeb0 0b47 	vmov.f64	d0, d7
 8001ed2:	f011 fc75 	bl	80137c0 <cos>
 8001ed6:	eeb0 7b40 	vmov.f64	d7, d0
 8001eda:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 8001ba8 <IVK+0x14f0>
 8001ede:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eec:	eeb0 0b47 	vmov.f64	d0, d7
 8001ef0:	f011 fc66 	bl	80137c0 <cos>
 8001ef4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ef8:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001efc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f04:	ee26 8b07 	vmul.f64	d8, d6, d7
					e_J_inv_tmp + 352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f14:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8001bb8 <IVK+0x1500>
 8001f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f20:	f011 fc4e 	bl	80137c0 <cos>
 8001f24:	eeb0 7b40 	vmov.f64	d7, d0
 8001f28:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8001bb0 <IVK+0x14f8>
 8001f2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f30:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001f34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f38:	ee26 6b07 	vmul.f64	d6, d6, d7
					* e_J_inv_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8001f3c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f44:	ee26 7b07 	vmul.f64	d7, d6, d7
					e_J_inv_tmp + 352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp
 8001f48:	ee38 8b07 	vadd.f64	d8, d8, d7
					* e_J_inv_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f6c:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8001bb8 <IVK+0x1500>
 8001f70:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) / d4;
 8001f74:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8001bc0 <IVK+0x1508>
 8001f78:	ee37 7b46 	vsub.f64	d7, d7, d6
					* e_J_inv_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8001f7c:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8001bc8 <IVK+0x1510>
 8001f80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f84:	eeb0 0b47 	vmov.f64	d0, d7
 8001f88:	f011 fc1a 	bl	80137c0 <cos>
 8001f8c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f90:	ed1f 6bf1 	vldr	d6, [pc, #-964]	; 8001bd0 <IVK+0x1518>
 8001f94:	ee27 6b06 	vmul.f64	d6, d7, d6
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) / d4;
 8001f98:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001f9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001fa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fac:	ee26 7b07 	vmul.f64	d7, d6, d7
					* e_J_inv_tmp) + 410.488 * cos((((q[1] + 2.0 * q[2]) +
 8001fb0:	ee38 7b07 	vadd.f64	d7, d8, d7
	dv[12] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8001fb4:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002388 <IVK+0x1cd0>
 8001fb8:	ee27 5b06 	vmul.f64	d5, d7, d6
	1.6845) + -0.8995) + -0.73665) * f_J_inv_tmp_tmp * e_J_inv_tmp) / d4;
 8001fbc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fc0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fc4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[12] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8001fcc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	dv[17] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe8:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8002390 <IVK+0x1cd8>
 8001fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ff0:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8002398 <IVK+0x1ce0>
 8001ff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ff8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ffc:	f011 fbe0 	bl	80137c0 <cos>
 8002000:	eeb0 7b40 	vmov.f64	d7, d0
 8002004:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80023a0 <IVK+0x1ce8>
 8002008:	ee27 6b06 	vmul.f64	d6, d7, d6
 800200c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002014:	ee26 6b07 	vmul.f64	d6, d6, d7
					* d_J_inv_tmp_tmp + 352.278 * cos(q[1] + 1.6845) *
 8002018:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800201c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002020:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3304      	adds	r3, #4
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002030:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 8002390 <IVK+0x1cd8>
 8002034:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002038:	eeb0 0b47 	vmov.f64	d0, d7
 800203c:	f011 fbc0 	bl	80137c0 <cos>
 8002040:	eeb0 7b40 	vmov.f64	d7, d0
 8002044:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 80023a8 <IVK+0x1cf0>
 8002048:	ee27 6b06 	vmul.f64	d6, d7, d6
 800204c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002054:	ee26 6b07 	vmul.f64	d6, d6, d7
					e_J_inv_tmp * d_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0
 8002058:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800205c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002060:	ee26 7b07 	vmul.f64	d7, d6, d7
					* d_J_inv_tmp_tmp + 352.278 * cos(q[1] + 1.6845) *
 8002064:	ee38 8b07 	vadd.f64	d8, d8, d7
					e_J_inv_tmp * d_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3304      	adds	r3, #4
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	* q[2]) + 1.6845) + -0.8995) + -0.73665) * e_J_inv_tmp * d_J_inv_tmp_tmp) /
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3308      	adds	r3, #8
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002080:	ee37 7b07 	vadd.f64	d7, d7, d7
					e_J_inv_tmp * d_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0
 8002084:	ee36 7b07 	vadd.f64	d7, d6, d7
	* q[2]) + 1.6845) + -0.8995) + -0.73665) * e_J_inv_tmp * d_J_inv_tmp_tmp) /
 8002088:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8002390 <IVK+0x1cd8>
 800208c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002090:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8002398 <IVK+0x1ce0>
 8002094:	ee37 7b46 	vsub.f64	d7, d7, d6
					e_J_inv_tmp * d_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0
 8002098:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8002410 <IVK+0x1d58>
 800209c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020a0:	eeb0 0b47 	vmov.f64	d0, d7
 80020a4:	f011 fb8c 	bl	80137c0 <cos>
 80020a8:	eeb0 7b40 	vmov.f64	d7, d0
 80020ac:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80023b0 <IVK+0x1cf8>
 80020b0:	ee27 6b06 	vmul.f64	d6, d7, d6
	* q[2]) + 1.6845) + -0.8995) + -0.73665) * e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80020b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80020b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020c0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80020c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c8:	ee26 7b07 	vmul.f64	d7, d6, d7
					e_J_inv_tmp * d_J_inv_tmp_tmp) + 410.488 * cos((((q[1] + 2.0
 80020cc:	ee38 7b07 	vadd.f64	d7, d8, d7
	dv[17] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp
 80020d0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002388 <IVK+0x1cd0>
 80020d4:	ee27 5b06 	vmul.f64	d5, d7, d6
	* q[2]) + 1.6845) + -0.8995) + -0.73665) * e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80020d8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80020dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80020e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[17] = 55.0 * ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp
 80020e8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	d4;
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 80020ec:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80020f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020f4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80023b0 <IVK+0x1cf8>
 80020f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020fc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002104:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3304      	adds	r3, #4
 800210c:	ed93 7a00 	vldr	s14, [r3]
	q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) + 352.278 * e_J_inv_tmp_tmp *
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3308      	adds	r3, #8
 8002114:	edd3 7a00 	vldr	s15, [r3]
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) + 352.278 * e_J_inv_tmp_tmp *
 8002120:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8002390 <IVK+0x1cd8>
 8002124:	ee37 7b06 	vadd.f64	d7, d7, d6
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 8002128:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8002398 <IVK+0x1ce0>
 800212c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002130:	eeb0 0b47 	vmov.f64	d0, d7
 8002134:	f011 fb98 	bl	8013868 <sin>
 8002138:	eeb0 7b40 	vmov.f64	d7, d0
 800213c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80023a0 <IVK+0x1ce8>
 8002140:	ee27 6b06 	vmul.f64	d6, d7, d6
	q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) + 352.278 * e_J_inv_tmp_tmp *
 8002144:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800214c:	ee26 7b07 	vmul.f64	d7, d6, d7
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 8002150:	ee38 6b07 	vadd.f64	d6, d8, d7
	q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) + 352.278 * e_J_inv_tmp_tmp *
 8002154:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800215c:	ed9f 5b92 	vldr	d5, [pc, #584]	; 80023a8 <IVK+0x1cf0>
 8002160:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002164:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002168:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800216c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002170:	ee36 7b07 	vadd.f64	d7, d6, d7
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 8002174:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8002388 <IVK+0x1cd0>
 8002178:	ee27 5b06 	vmul.f64	d5, d7, d6
				   e_J_inv_tmp) / d4;
 800217c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002180:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002184:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[22] = 55.0 * ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp + 60.0 * sin(((q[1] +
 800218c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	d4 = 21136.68 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3304      	adds	r3, #4
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3308      	adds	r3, #8
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	330c      	adds	r3, #12
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021c0:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8002390 <IVK+0x1cd8>
 80021c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021c8:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8002398 <IVK+0x1ce0>
 80021cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021d0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8002410 <IVK+0x1d58>
 80021d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021d8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002408 <IVK+0x1d50>
 80021dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021e0:	eeb0 0b47 	vmov.f64	d0, d7
 80021e4:	f011 fb40 	bl	8013868 <sin>
 80021e8:	eeb0 7b40 	vmov.f64	d7, d0
 80021ec:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80023b8 <IVK+0x1d00>
 80021f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021f8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
					   -0.73665) + 1.52205);
	d5 = d4 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 80021fc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002200:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3304      	adds	r3, #4
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3308      	adds	r3, #8
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800221c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002390 <IVK+0x1cd8>
 8002220:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002224:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002398 <IVK+0x1ce0>
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f011 fac6 	bl	80137c0 <cos>
 8002234:	eeb0 7b40 	vmov.f64	d7, d0
 8002238:	ee28 6b07 	vmul.f64	d6, d8, d7
 800223c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002244:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002248:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800224c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	d4 = d4 * d2 * b_J_inv_tmp_tmp;
 8002250:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002254:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	d6 = 24629.28 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3304      	adds	r3, #4
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3308      	adds	r3, #8
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002280:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002284:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	330c      	adds	r3, #12
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002298:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002390 <IVK+0x1cd8>
 800229c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022a0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002398 <IVK+0x1ce0>
 80022a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022a8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002410 <IVK+0x1d58>
 80022ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022b0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8002408 <IVK+0x1d50>
 80022b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022b8:	eeb0 0b47 	vmov.f64	d0, d7
 80022bc:	f011 fad4 	bl	8013868 <sin>
 80022c0:	eeb0 7b40 	vmov.f64	d7, d0
 80022c4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80023c0 <IVK+0x1d08>
 80022c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022d0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
					   -0.73665) + 1.52205);
	d2 *= d6 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 80022d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80022d8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80022dc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80022e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3304      	adds	r3, #4
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3308      	adds	r3, #8
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002300:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002304:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8002390 <IVK+0x1cd8>
 8002308:	ee37 7b06 	vadd.f64	d7, d7, d6
 800230c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8002398 <IVK+0x1ce0>
 8002310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002314:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002410 <IVK+0x1d58>
 8002318:	ee37 7b46 	vsub.f64	d7, d7, d6
 800231c:	eeb0 0b47 	vmov.f64	d0, d7
 8002320:	f011 fa4e 	bl	80137c0 <cos>
 8002324:	eeb0 7b40 	vmov.f64	d7, d0
 8002328:	ee29 7b07 	vmul.f64	d7, d9, d7
 800232c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002330:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002334:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	d6 = d6 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002338:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800233c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3304      	adds	r3, #4
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3308      	adds	r3, #8
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002360:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8002390 <IVK+0x1cd8>
 8002364:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002368:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8002398 <IVK+0x1ce0>
 800236c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002370:	eeb0 0b47 	vmov.f64	d0, d7
 8002374:	f011 fa24 	bl	80137c0 <cos>
 8002378:	eeb0 7b40 	vmov.f64	d7, d0
 800237c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002380:	e052      	b.n	8002428 <IVK+0x1d70>
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	00000000 	.word	0x00000000
 800238c:	404b8000 	.word	0x404b8000
 8002390:	45a1cac1 	.word	0x45a1cac1
 8002394:	3ffaf3b6 	.word	0x3ffaf3b6
 8002398:	39581062 	.word	0x39581062
 800239c:	3fecc8b4 	.word	0x3fecc8b4
 80023a0:	00000000 	.word	0x00000000
 80023a4:	404e0000 	.word	0x404e0000
 80023a8:	b020c49c 	.word	0xb020c49c
 80023ac:	40760472 	.word	0x40760472
 80023b0:	d916872b 	.word	0xd916872b
 80023b4:	4079a7ce 	.word	0x4079a7ce
 80023b8:	851eb852 	.word	0x851eb852
 80023bc:	40d4a42b 	.word	0x40d4a42b
 80023c0:	eb851eb8 	.word	0xeb851eb8
 80023c4:	40d80d51 	.word	0x40d80d51
 80023c8:	2220bc38 	.word	0x2220bc38
 80023cc:	4111a6ef 	.word	0x4111a6ef
 80023d0:	66666666 	.word	0x66666666
 80023d4:	40fe10a6 	.word	0x40fe10a6
 80023d8:	eaa8eb47 	.word	0xeaa8eb47
 80023dc:	413610aa 	.word	0x413610aa
 80023e0:	66666667 	.word	0x66666667
 80023e4:	40f9cd36 	.word	0x40f9cd36
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40f33f80 	.word	0x40f33f80
 80023f0:	2b020c4b 	.word	0x2b020c4b
 80023f4:	412c40b5 	.word	0x412c40b5
 80023f8:	45a1cac1 	.word	0x45a1cac1
 80023fc:	3ffaf3b6 	.word	0x3ffaf3b6
 8002400:	39581062 	.word	0x39581062
 8002404:	3fecc8b4 	.word	0x3fecc8b4
 8002408:	19ce075f 	.word	0x19ce075f
 800240c:	3ff85a51 	.word	0x3ff85a51
 8002410:	05532618 	.word	0x05532618
 8002414:	3fe792a3 	.word	0x3fe792a3
 8002418:	28f5c28f 	.word	0x28f5c28f
 800241c:	410b0efc 	.word	0x410b0efc
 8002420:	0664d3c0 	.word	0x0664d3c0
 8002424:	4143dbcd 	.word	0x4143dbcd
 8002428:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800242c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	d7 = 289211.783328 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3304      	adds	r3, #4
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3308      	adds	r3, #8
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002448:	ee37 7b07 	vadd.f64	d7, d7, d7
 800244c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	330c      	adds	r3, #12
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800245c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002460:	ed1f 6b1b 	vldr	d6, [pc, #-108]	; 80023f8 <IVK+0x1d40>
 8002464:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002468:	ed1f 6b1b 	vldr	d6, [pc, #-108]	; 8002400 <IVK+0x1d48>
 800246c:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ -0.73665) + 1.52205);
 8002470:	ed1f 6b19 	vldr	d6, [pc, #-100]	; 8002410 <IVK+0x1d58>
 8002474:	ee37 7b46 	vsub.f64	d7, d7, d6
	d7 = 289211.783328 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8002478:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8002408 <IVK+0x1d50>
 800247c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002480:	eeb0 0b47 	vmov.f64	d0, d7
 8002484:	f011 f9f0 	bl	8013868 <sin>
 8002488:	eeb0 7b40 	vmov.f64	d7, d0
 800248c:	ed1f 6b32 	vldr	d6, [pc, #-200]	; 80023c8 <IVK+0x1d10>
 8002490:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002494:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002498:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	d8 = d7 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800249c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024a0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3304      	adds	r3, #4
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3308      	adds	r3, #8
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80024c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024c4:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 80023f8 <IVK+0x1d40>
 80024c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024cc:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8002400 <IVK+0x1d48>
 80024d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024d4:	ed1f 6b32 	vldr	d6, [pc, #-200]	; 8002410 <IVK+0x1d58>
 80024d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024dc:	eeb0 0b47 	vmov.f64	d0, d7
 80024e0:	f011 f96e 	bl	80137c0 <cos>
 80024e4:	eeb0 7b40 	vmov.f64	d7, d0
 80024e8:	ee28 6b07 	vmul.f64	d6, d8, d7
 80024ec:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80024f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024fc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	e_J_inv_tmp_tmp;
	d7 = d7 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002500:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002504:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	d9 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 8002518:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800251c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002520:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	d10 = 78840.0 * d9 * d_J_inv_tmp;
 8002524:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800252c:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 80023e8 <IVK+0x1d30>
 8002530:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002534:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800253c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	d9 = 925786.58400000015 * d9 * e_J_inv_tmp_tmp;
 8002548:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800254c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002550:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 80023f0 <IVK+0x1d38>
 8002554:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002558:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800255c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002560:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002564:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002568:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	e_J_inv_tmp = d10 * d_J_inv_tmp_tmp;
 800256c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002570:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002578:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	d11 = d9 * d_J_inv_tmp_tmp;
 800257c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002580:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002588:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	dv[3] = 4.0 * (((((((((((((((123146.4 * J_inv_tmp * d_J_inv_tmp *
 800258c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002590:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002594:	ed1f 6b72 	vldr	d6, [pc, #-456]	; 80023d0 <IVK+0x1d18>
 8002598:	ee27 6b06 	vmul.f64	d6, d7, d6
 800259c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80025a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80025a8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80025ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b0:	ee26 6b07 	vmul.f64	d6, d6, d7
	f_J_inv_tmp_tmp - 123146.4 * J_inv_tmp_tmp * c_J_inv_tmp * f_J_inv_tmp_tmp)
 80025b4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80025b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025bc:	ed1f 5b7c 	vldr	d5, [pc, #-496]	; 80023d0 <IVK+0x1d18>
 80025c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80025c4:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80025c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025cc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80025d0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80025d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025dc:	ee36 6b47 	vsub.f64	d6, d6, d7
	+ 1.4460589166400002E+6 * J_inv_tmp * e_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80025e0:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80025e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e8:	ed1f 5b85 	vldr	d5, [pc, #-532]	; 80023d8 <IVK+0x1d20>
 80025ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80025f0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80025f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025f8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80025fc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002604:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002608:	ee36 6b07 	vadd.f64	d6, d6, d7
	1.4460589166400002E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 800260c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002610:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002614:	ed1f 5b90 	vldr	d5, [pc, #-576]	; 80023d8 <IVK+0x1d20>
 8002618:	ee27 5b05 	vmul.f64	d5, d7, d5
 800261c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002620:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002624:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002628:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800262c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002630:	ee25 7b07 	vmul.f64	d7, d5, d7
	+ 1.4460589166400002E+6 * J_inv_tmp * e_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8002634:	ee36 6b47 	vsub.f64	d6, d6, d7
	105683.40000000001 * c_J_inv_tmp * e_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8002638:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800263c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002640:	ed1f 5b99 	vldr	d5, [pc, #-612]	; 80023e0 <IVK+0x1d28>
 8002644:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002648:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800264c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002650:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002654:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265c:	ee25 7b07 	vmul.f64	d7, d5, d7
	1.4460589166400002E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8002660:	ee36 6b07 	vadd.f64	d6, d6, d7
	105683.40000000001 * d_J_inv_tmp * b_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8002664:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800266c:	ed1f 5ba4 	vldr	d5, [pc, #-656]	; 80023e0 <IVK+0x1d28>
 8002670:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002674:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002680:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002688:	ee25 7b07 	vmul.f64	d7, d5, d7
	105683.40000000001 * c_J_inv_tmp * e_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800268c:	ee36 6b47 	vsub.f64	d6, d6, d7
	105683.40000000001 * d_J_inv_tmp * b_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8002690:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002698:	ee36 6b07 	vadd.f64	d6, d6, d7
	e_J_inv_tmp) + d11) + 78840.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 800269c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80026a8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	ed1f 5bb3 	vldr	d5, [pc, #-716]	; 80023e8 <IVK+0x1d30>
 80026b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026b8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80026bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80026c4:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80026c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026cc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80026d0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80026d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026dc:	ee36 6b07 	vadd.f64	d6, d6, d7
						d_J_inv_tmp_tmp) + 925786.58400000015 * b_J_inv_tmp *
 80026e0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026e8:	ed1f 5bbf 	vldr	d5, [pc, #-764]	; 80023f0 <IVK+0x1d38>
 80026ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026f0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80026f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026f8:	ee25 5b07 	vmul.f64	d5, d5, d7
					   c_J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80026fc:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002704:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002708:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800270c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002710:	ee25 7b07 	vmul.f64	d7, d5, d7
						d_J_inv_tmp_tmp) + 925786.58400000015 * b_J_inv_tmp *
 8002714:	ee36 6b07 	vadd.f64	d6, d6, d7
					  221663.52 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 8002718:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800271c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002720:	ed1f 5bc3 	vldr	d5, [pc, #-780]	; 8002418 <IVK+0x1d60>
 8002724:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002728:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800272c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002730:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002734:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002738:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800273c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002740:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002744:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002748:	ee25 7b07 	vmul.f64	d7, d5, d7
					   c_J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 800274c:	ee36 8b07 	vadd.f64	d8, d6, d7
					  d_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2])
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3304      	adds	r3, #4
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3308      	adds	r3, #8
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002768:	ee37 7b07 	vadd.f64	d7, d7, d7
 800276c:	ee36 6b07 	vadd.f64	d6, d6, d7
	+ q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * J_inv_tmp_tmp *
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	330c      	adds	r3, #12
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800277c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002780:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 80023f8 <IVK+0x1d40>
 8002784:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002788:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 8002400 <IVK+0x1d48>
 800278c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002790:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 8002410 <IVK+0x1d58>
 8002794:	ee37 7b46 	vsub.f64	d7, d7, d6
					  d_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2])
 8002798:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8002408 <IVK+0x1d50>
 800279c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027a0:	eeb0 0b47 	vmov.f64	d0, d7
 80027a4:	f011 f860 	bl	8013868 <sin>
 80027a8:	eeb0 7b40 	vmov.f64	d7, d0
 80027ac:	ed1f 6be6 	vldr	d6, [pc, #-920]	; 8002418 <IVK+0x1d60>
 80027b0:	ee27 6b06 	vmul.f64	d6, d7, d6
	+ q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * J_inv_tmp_tmp *
 80027b4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80027b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80027c0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80027c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c8:	ee26 6b07 	vmul.f64	d6, d6, d7
					 c_J_inv_tmp * d_J_inv_tmp_tmp) + 2.6029060499520004E+6 *
 80027cc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80027d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027d4:	ee26 7b07 	vmul.f64	d7, d6, d7
					  d_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2])
 80027d8:	ee38 6b47 	vsub.f64	d6, d8, d7
					 c_J_inv_tmp * d_J_inv_tmp_tmp) + 2.6029060499520004E+6 *
 80027dc:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80027e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027e4:	ed1f 5bf2 	vldr	d5, [pc, #-968]	; 8002420 <IVK+0x1d68>
 80027e8:	ee27 5b05 	vmul.f64	d5, d7, d5
					c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp *
 80027ec:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80027f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80027f8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002800:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002804:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800280c:	ee25 7b07 	vmul.f64	d7, d5, d7
					 c_J_inv_tmp * d_J_inv_tmp_tmp) + 2.6029060499520004E+6 *
 8002810:	ee36 8b07 	vadd.f64	d8, d6, d7
					d_J_inv_tmp_tmp) - 2.6029060499520004E+6 * sin((((((q[1] +
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3304      	adds	r3, #4
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3308      	adds	r3, #8
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282c:	ee37 7b07 	vadd.f64	d7, d7, d7
					d_J_inv_tmp_tmp) - 2.6029060499520004E+6 * sin((((((q[1] +
 8002830:	ee36 6b07 	vadd.f64	d6, d6, d7
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	330c      	adds	r3, #12
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002840:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002844:	ed9f 6bf8 	vldr	d6, [pc, #992]	; 8002c28 <IVK+0x2570>
 8002848:	ee37 7b06 	vadd.f64	d7, d7, d6
 800284c:	ed9f 6bf8 	vldr	d6, [pc, #992]	; 8002c30 <IVK+0x2578>
 8002850:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002854:	ed9f 6bf8 	vldr	d6, [pc, #992]	; 8002c38 <IVK+0x2580>
 8002858:	ee37 7b46 	vsub.f64	d7, d7, d6
					d_J_inv_tmp_tmp) - 2.6029060499520004E+6 * sin((((((q[1] +
 800285c:	ed9f 6bf8 	vldr	d6, [pc, #992]	; 8002c40 <IVK+0x2588>
 8002860:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002864:	eeb0 0b47 	vmov.f64	d0, d7
 8002868:	f010 fffe 	bl	8013868 <sin>
 800286c:	eeb0 7b40 	vmov.f64	d7, d0
 8002870:	ed9f 6bf5 	vldr	d6, [pc, #980]	; 8002c48 <IVK+0x2590>
 8002874:	ee27 6b06 	vmul.f64	d6, d7, d6
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) *
 8002878:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800287c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002880:	ee26 6b07 	vmul.f64	d6, d6, d7
				   J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8002884:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002888:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800288c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002890:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002898:	ee26 7b07 	vmul.f64	d7, d6, d7
					d_J_inv_tmp_tmp) - 2.6029060499520004E+6 * sin((((((q[1] +
 800289c:	ee38 6b47 	vsub.f64	d6, d8, d7
				  190230.12000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp *
 80028a0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80028a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028a8:	ed9f 5be9 	vldr	d5, [pc, #932]	; 8002c50 <IVK+0x2598>
 80028ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80028b0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80028b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028bc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80028c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c4:	ee25 5b07 	vmul.f64	d5, d5, d7
				  e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) - 190230.12000000002 * sin
 80028c8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80028cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d0:	ee25 7b07 	vmul.f64	d7, d5, d7
				   J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80028d4:	ee36 8b07 	vadd.f64	d8, d6, d7
				 ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3304      	adds	r3, #4
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3308      	adds	r3, #8
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	330c      	adds	r3, #12
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002904:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002908:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8002c28 <IVK+0x2570>
 800290c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002910:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8002c30 <IVK+0x2578>
 8002914:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002918:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8002c38 <IVK+0x2580>
 800291c:	ee37 7b46 	vsub.f64	d7, d7, d6
				  e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) - 190230.12000000002 * sin
 8002920:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8002c40 <IVK+0x2588>
 8002924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002928:	eeb0 0b47 	vmov.f64	d0, d7
 800292c:	f010 ff9c 	bl	8013868 <sin>
 8002930:	eeb0 7b40 	vmov.f64	d7, d0
 8002934:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8002c50 <IVK+0x2598>
 8002938:	ee27 6b06 	vmul.f64	d6, d7, d6
				   -0.73665) + 1.52205) * d_J_inv_tmp * b_J_inv_tmp_tmp *
 800293c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002944:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002948:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800294c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002950:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002954:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002958:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800295c:	ee26 7b07 	vmul.f64	d7, d6, d7
				  e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) - 190230.12000000002 * sin
 8002960:	ee38 7b47 	vsub.f64	d7, d8, d7
	dv[3] = 4.0 * (((((((((((((((123146.4 * J_inv_tmp * d_J_inv_tmp *
 8002964:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002968:	ee27 8b06 	vmul.f64	d8, d7, d6
				 d_J_inv_tmp_tmp) / (9.0 * (((((((((((21136.68 * c_J_inv_tmp_tmp
 800296c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002974:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8002c58 <IVK+0x25a0>
 8002978:	ee27 6b06 	vmul.f64	d6, d7, d6
	* c_J_inv_tmp * e_J_inv_tmp_tmp * d - 21136.68 * sin((((((q[1] + 2.0 * q[2])
 800297c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002984:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002988:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800298c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002990:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002994:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	ee26 9b07 	vmul.f64	d9, d6, d7
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3304      	adds	r3, #4
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3308      	adds	r3, #8
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80029bc:	ee36 6b07 	vadd.f64	d6, d6, d7
	+ q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * d_J_inv_tmp *
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	330c      	adds	r3, #12
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029d0:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002c28 <IVK+0x2570>
 80029d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029d8:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002c30 <IVK+0x2578>
 80029dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029e0:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002c38 <IVK+0x2580>
 80029e4:	ee37 7b46 	vsub.f64	d7, d7, d6
	* c_J_inv_tmp * e_J_inv_tmp_tmp * d - 21136.68 * sin((((((q[1] + 2.0 * q[2])
 80029e8:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002c40 <IVK+0x2588>
 80029ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	f010 ff38 	bl	8013868 <sin>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002c58 <IVK+0x25a0>
 8002a00:	ee27 6b06 	vmul.f64	d6, d7, d6
	+ q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * d_J_inv_tmp *
 8002a04:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a10:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8002a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a18:	ee26 6b07 	vmul.f64	d6, d6, d7
	b_J_inv_tmp_tmp * d) + d5 * d1) - d4 * d1) + 24629.28 * c_J_inv_tmp_tmp *
 8002a1c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a24:	ee26 7b07 	vmul.f64	d7, d6, d7
	* c_J_inv_tmp * e_J_inv_tmp_tmp * d - 21136.68 * sin((((((q[1] + 2.0 * q[2])
 8002a28:	ee39 6b47 	vsub.f64	d6, d9, d7
	b_J_inv_tmp_tmp * d) + d5 * d1) - d4 * d1) + 24629.28 * c_J_inv_tmp_tmp *
 8002a2c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002a30:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a40:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002a44:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a54:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a5c:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8002c60 <IVK+0x25a8>
 8002a60:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a64:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a6c:	ee25 5b07 	vmul.f64	d5, d5, d7
	J_inv_tmp * d_J_inv_tmp * d) - 24629.28 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8002a70:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002a74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a78:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a7c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a84:	ee25 7b07 	vmul.f64	d7, d5, d7
	b_J_inv_tmp_tmp * d) + d5 * d1) - d4 * d1) + 24629.28 * c_J_inv_tmp_tmp *
 8002a88:	ee36 9b07 	vadd.f64	d9, d6, d7
	J_inv_tmp * d_J_inv_tmp * d) - 24629.28 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002aa8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab8:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * J_inv_tmp_tmp * c_J_inv_tmp *
 8002abc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002c28 <IVK+0x2570>
 8002ac0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ac4:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002c30 <IVK+0x2578>
 8002ac8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002acc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002c38 <IVK+0x2580>
 8002ad0:	ee37 7b46 	vsub.f64	d7, d7, d6
	J_inv_tmp * d_J_inv_tmp * d) - 24629.28 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8002ad4:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002c40 <IVK+0x2588>
 8002ad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002adc:	eeb0 0b47 	vmov.f64	d0, d7
 8002ae0:	f010 fec2 	bl	8013868 <sin>
 8002ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8002c60 <IVK+0x25a8>
 8002aec:	ee27 6b06 	vmul.f64	d6, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * J_inv_tmp_tmp * c_J_inv_tmp *
 8002af0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002afc:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002b00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b04:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b08:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b10:	ee26 7b07 	vmul.f64	d7, d6, d7
	J_inv_tmp * d_J_inv_tmp * d) - 24629.28 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8002b14:	ee39 6b47 	vsub.f64	d6, d9, d7
	d) + d2 * d1) - d6 * d1) + 289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp *
 8002b18:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002b1c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b2c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002b30:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002b40:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b48:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8002c68 <IVK+0x25b0>
 8002b4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b50:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b58:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b5c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b64:	ee25 5b07 	vmul.f64	d5, d5, d7
	e_J_inv_tmp_tmp * d) - d7 * d) + d8 * d1) - d7 * d1));
 8002b68:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b70:	ee25 7b07 	vmul.f64	d7, d5, d7
	d) + d2 * d1) - d6 * d1) + 289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp *
 8002b74:	ee36 6b07 	vadd.f64	d6, d6, d7
	e_J_inv_tmp_tmp * d) - d7 * d) + d8 * d1) - d7 * d1));
 8002b78:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002b7c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002b8c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b90:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ba0:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002ba4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	ee36 7b47 	vsub.f64	d7, d6, d7
				 d_J_inv_tmp_tmp) / (9.0 * (((((((((((21136.68 * c_J_inv_tmp_tmp
 8002bb4:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002bb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bbc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002bc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[3] = 4.0 * (((((((((((((((123146.4 * J_inv_tmp * d_J_inv_tmp *
 8002bc4:	edc7 7a08 	vstr	s15, [r7, #32]
	d = 9.0 * (((((((((((d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8002bc8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002bcc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002bd0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
					   (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d5 *
 8002bd8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002bdc:	ee67 6aa7 	vmul.f32	s13, s15, s15
	d = 9.0 * (((((((((((d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8002be0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be8:	ee37 7a67 	vsub.f32	s14, s14, s15
					  (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d4 *
 8002bec:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002bf0:	ee67 6aa7 	vmul.f32	s13, s15, s15
					   (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d5 *
 8002bf4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
					 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d2 *
 8002c00:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002c04:	ee67 6aa7 	vmul.f32	s13, s15, s15
					  (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d4 *
 8002c08:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c10:	ee37 7a67 	vsub.f32	s14, s14, s15
					(f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) - d6 * (f_J_inv_tmp_tmp
 8002c14:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c18:	ee67 6aa7 	vmul.f32	s13, s15, s15
					 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d2 *
 8002c1c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	e03c      	b.n	8002ca0 <IVK+0x25e8>
 8002c26:	bf00      	nop
 8002c28:	45a1cac1 	.word	0x45a1cac1
 8002c2c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002c30:	39581062 	.word	0x39581062
 8002c34:	3fecc8b4 	.word	0x3fecc8b4
 8002c38:	05532618 	.word	0x05532618
 8002c3c:	3fe792a3 	.word	0x3fe792a3
 8002c40:	19ce075f 	.word	0x19ce075f
 8002c44:	3ff85a51 	.word	0x3ff85a51
 8002c48:	0664d3c0 	.word	0x0664d3c0
 8002c4c:	4143dbcd 	.word	0x4143dbcd
 8002c50:	f5c28f5d 	.word	0xf5c28f5d
 8002c54:	410738b0 	.word	0x410738b0
 8002c58:	851eb852 	.word	0x851eb852
 8002c5c:	40d4a42b 	.word	0x40d4a42b
 8002c60:	eb851eb8 	.word	0xeb851eb8
 8002c64:	40d80d51 	.word	0x40d80d51
 8002c68:	2220bc38 	.word	0x2220bc38
 8002c6c:	4111a6ef 	.word	0x4111a6ef
 8002c70:	66666666 	.word	0x66666666
 8002c74:	40fe10a6 	.word	0x40fe10a6
 8002c78:	05532618 	.word	0x05532618
 8002c7c:	3fe792a3 	.word	0x3fe792a3
 8002c80:	eaa8eb47 	.word	0xeaa8eb47
 8002c84:	413610aa 	.word	0x413610aa
 8002c88:	39581062 	.word	0x39581062
 8002c8c:	3fecc8b4 	.word	0x3fecc8b4
 8002c90:	66666667 	.word	0x66666667
 8002c94:	40f9cd36 	.word	0x40f9cd36
 8002c98:	45a1cac1 	.word	0x45a1cac1
 8002c9c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
	* f_J_inv_tmp_tmp)) + d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d6 *
 8002ca4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002ca8:	ee67 6aa7 	vmul.f32	s13, s15, s15
					(f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) - d6 * (f_J_inv_tmp_tmp
 8002cac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
	* f_J_inv_tmp_tmp)) + d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d6 *
 8002cb8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002cbc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002cc0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
				 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d8 * (f_J_inv_tmp_tmp *
 8002ccc:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002cd0:	ee67 6aa7 	vmul.f32	s13, s15, s15
	* f_J_inv_tmp_tmp)) + d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d6 *
 8002cd4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cdc:	ee37 7a67 	vsub.f32	s14, s14, s15
				 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) + d8 * (f_J_inv_tmp_tmp *
 8002ce0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002ce4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002ce8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
	f_J_inv_tmp_tmp)) - d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d8 *
 8002cf4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002cf8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002cfc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d04:	ee37 7a67 	vsub.f32	s14, s14, s15
			  (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d7 * (d_J_inv_tmp_tmp *
 8002d08:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002d0c:	ee67 6aa7 	vmul.f32	s13, s15, s15
	f_J_inv_tmp_tmp)) - d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) + d8 *
 8002d10:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
			  (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) - d7 * (d_J_inv_tmp_tmp *
 8002d1c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002d20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002d24:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
	d = 9.0 * (((((((((((d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) - d4 *
 8002d30:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
			  d_J_inv_tmp_tmp));
	d1 = d10 * f_J_inv_tmp_tmp;
 8002d3c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002d40:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	d2 = d9 * f_J_inv_tmp_tmp;
 8002d4c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	dv[8] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	edd3 7a00 	vldr	s15, [r3]
 8002d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d74:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d7c:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8002c98 <IVK+0x25e0>
 8002d80:	ee37 7b06 	vadd.f64	d7, d7, d6
	+ -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8002d84:	ed1f 6b40 	vldr	d6, [pc, #-256]	; 8002c88 <IVK+0x25d0>
 8002d88:	ee37 7b46 	vsub.f64	d7, d7, d6
	dv[8] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 8002d8c:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 8002c78 <IVK+0x25c0>
 8002d90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d94:	eeb0 0b47 	vmov.f64	d0, d7
 8002d98:	f010 fd66 	bl	8013868 <sin>
 8002d9c:	eeb0 7b40 	vmov.f64	d7, d0
 8002da0:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8002c70 <IVK+0x25b8>
 8002da4:	ee27 8b06 	vmul.f64	d8, d7, d6
	+ -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3304      	adds	r3, #4
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3308      	adds	r3, #8
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dc0:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8002c98 <IVK+0x25e0>
 8002dc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dc8:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8002c88 <IVK+0x25d0>
 8002dcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dd0:	eeb0 0b47 	vmov.f64	d0, d7
 8002dd4:	f010 fcf4 	bl	80137c0 <cos>
 8002dd8:	eeb0 7b40 	vmov.f64	d7, d0
 8002ddc:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002de0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002de8:	ee26 8b07 	vmul.f64	d8, d6, d7
	d_J_inv_tmp_tmp - 123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3304      	adds	r3, #4
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e04:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e0c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8002c98 <IVK+0x25e0>
 8002e10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e14:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 8002c88 <IVK+0x25d0>
 8002e18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e1c:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002c78 <IVK+0x25c0>
 8002e20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e24:	eeb0 0b47 	vmov.f64	d0, d7
 8002e28:	f010 fcca 	bl	80137c0 <cos>
 8002e2c:	eeb0 7b40 	vmov.f64	d7, d0
 8002e30:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 8002c70 <IVK+0x25b8>
 8002e34:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp) -
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3308      	adds	r3, #8
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e50:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8002c98 <IVK+0x25e0>
 8002e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e58:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 8002c88 <IVK+0x25d0>
 8002e5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e60:	eeb0 0b47 	vmov.f64	d0, d7
 8002e64:	f010 fd00 	bl	8013868 <sin>
 8002e68:	eeb0 7b40 	vmov.f64	d7, d0
 8002e6c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002e70:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e78:	ee26 7b07 	vmul.f64	d7, d6, d7
	d_J_inv_tmp_tmp - 123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8002e7c:	ee38 8b47 	vsub.f64	d8, d8, d7
	1.4460589166400002E+6 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3304      	adds	r3, #4
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ea0:	ed1f 6b83 	vldr	d6, [pc, #-524]	; 8002c98 <IVK+0x25e0>
 8002ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ea8:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 8002c88 <IVK+0x25d0>
 8002eac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002eb0:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8002c78 <IVK+0x25c0>
 8002eb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002eb8:	eeb0 0b47 	vmov.f64	d0, d7
 8002ebc:	f010 fc80 	bl	80137c0 <cos>
 8002ec0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ec4:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 8002c80 <IVK+0x25c8>
 8002ec8:	ee27 9b06 	vmul.f64	d9, d7, d6
	-0.73665) * sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) + 1.4460589166400002E+6 *
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ed8:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8002c98 <IVK+0x25e0>
 8002edc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ee0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ee4:	f010 fcc0 	bl	8013868 <sin>
 8002ee8:	eeb0 7b40 	vmov.f64	d7, d0
 8002eec:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002ef0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002ef4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef8:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp) -
 8002efc:	ee38 8b47 	vsub.f64	d8, d8, d7
	sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * cos(q[1] +
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3304      	adds	r3, #4
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f18:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002f1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f20:	ed1f 6ba3 	vldr	d6, [pc, #-652]	; 8002c98 <IVK+0x25e0>
 8002f24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f28:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8002c88 <IVK+0x25d0>
 8002f2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f30:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8002c78 <IVK+0x25c0>
 8002f34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f38:	eeb0 0b47 	vmov.f64	d0, d7
 8002f3c:	f010 fc94 	bl	8013868 <sin>
 8002f40:	eeb0 7b40 	vmov.f64	d7, d0
	-0.73665) * sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) + 1.4460589166400002E+6 *
 8002f44:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8002c80 <IVK+0x25c8>
 8002f48:	ee27 9b06 	vmul.f64	d9, d7, d6
	sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * cos(q[1] +
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f58:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8002c98 <IVK+0x25e0>
 8002f5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f60:	eeb0 0b47 	vmov.f64	d0, d7
 8002f64:	f010 fc2c 	bl	80137c0 <cos>
 8002f68:	eeb0 7b40 	vmov.f64	d7, d0
 8002f6c:	ee29 6b07 	vmul.f64	d6, d9, d7
	1.6845) * d_J_inv_tmp_tmp) + d1) - 105683.40000000001 * cos(((q[1] + q[2]) +
 8002f70:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f78:	ee26 7b07 	vmul.f64	d7, d6, d7
	-0.73665) * sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) + 1.4460589166400002E+6 *
 8002f7c:	ee38 6b07 	vadd.f64	d6, d8, d7
	1.6845) * d_J_inv_tmp_tmp) + d1) - 105683.40000000001 * cos(((q[1] + q[2]) +
 8002f80:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f88:	ee36 8b07 	vadd.f64	d8, d6, d7
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3308      	adds	r3, #8
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa4:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8002c98 <IVK+0x25e0>
 8002fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fac:	ed1f 6bca 	vldr	d6, [pc, #-808]	; 8002c88 <IVK+0x25d0>
 8002fb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8002fb8:	f010 fc02 	bl	80137c0 <cos>
 8002fbc:	eeb0 7b40 	vmov.f64	d7, d0
 8002fc0:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 8002c90 <IVK+0x25d8>
 8002fc4:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) * sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fd4:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 8002c98 <IVK+0x25e0>
 8002fd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8002fe0:	f010 fc42 	bl	8013868 <sin>
 8002fe4:	eeb0 7b40 	vmov.f64	d7, d0
 8002fe8:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002fec:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff4:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) * d_J_inv_tmp_tmp) + d1) - 105683.40000000001 * cos(((q[1] + q[2]) +
 8002ff8:	ee38 8b47 	vsub.f64	d8, d8, d7
	105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] +
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3304      	adds	r3, #4
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3308      	adds	r3, #8
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003014:	ed1f 6be0 	vldr	d6, [pc, #-896]	; 8002c98 <IVK+0x25e0>
 8003018:	ee37 7b06 	vadd.f64	d7, d7, d6
 800301c:	ed1f 6be6 	vldr	d6, [pc, #-920]	; 8002c88 <IVK+0x25d0>
 8003020:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003024:	eeb0 0b47 	vmov.f64	d0, d7
 8003028:	f010 fc1e 	bl	8013868 <sin>
 800302c:	eeb0 7b40 	vmov.f64	d7, d0
 8003030:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8002c90 <IVK+0x25d8>
 8003034:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3304      	adds	r3, #4
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003044:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8002c98 <IVK+0x25e0>
 8003048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800304c:	eeb0 0b47 	vmov.f64	d0, d7
 8003050:	f010 fbb6 	bl	80137c0 <cos>
 8003054:	eeb0 7b40 	vmov.f64	d7, d0
 8003058:	ee29 6b07 	vmul.f64	d6, d9, d7
	1.6845) * d_J_inv_tmp_tmp) + d2) + 78840.0 * cos((((((q[1] + 2.0 * q[2]) +
 800305c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8003060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003064:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) + -0.8995) * sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003068:	ee38 6b07 	vadd.f64	d6, d8, d7
	1.6845) * d_J_inv_tmp_tmp) + d2) + 78840.0 * cos((((((q[1] + 2.0 * q[2]) +
 800306c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003074:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3304      	adds	r3, #4
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3308      	adds	r3, #8
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003090:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003094:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	330c      	adds	r3, #12
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	1.6845) * d_J_inv_tmp_tmp) + d2) + 78840.0 * cos((((((q[1] + 2.0 * q[2]) +
 80030a4:	ee36 7b07 	vadd.f64	d7, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 80030a8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003468 <IVK+0x2db0>
 80030ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030b0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003470 <IVK+0x2db8>
 80030b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80030b8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003478 <IVK+0x2dc0>
 80030bc:	ee37 7b46 	vsub.f64	d7, d7, d6
	1.6845) * d_J_inv_tmp_tmp) + d2) + 78840.0 * cos((((((q[1] + 2.0 * q[2]) +
 80030c0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003480 <IVK+0x2dc8>
 80030c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030c8:	eeb0 0b47 	vmov.f64	d0, d7
 80030cc:	f010 fb78 	bl	80137c0 <cos>
 80030d0:	eeb0 7b40 	vmov.f64	d7, d0
 80030d4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8003488 <IVK+0x2dd0>
 80030d8:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3304      	adds	r3, #4
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2])
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3308      	adds	r3, #8
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 80030f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80030f8:	ee36 6b07 	vadd.f64	d6, d6, d7
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2])
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	330c      	adds	r3, #12
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003108:	ee36 7b07 	vadd.f64	d7, d6, d7
 800310c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003468 <IVK+0x2db0>
 8003110:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003114:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003470 <IVK+0x2db8>
 8003118:	ee37 7b46 	vsub.f64	d7, d7, d6
 800311c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003478 <IVK+0x2dc0>
 8003120:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003124:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003480 <IVK+0x2dc8>
 8003128:	ee37 7b06 	vadd.f64	d7, d7, d6
 800312c:	eeb0 0b47 	vmov.f64	d0, d7
 8003130:	f010 fb9a 	bl	8013868 <sin>
 8003134:	eeb0 7b40 	vmov.f64	d7, d0
 8003138:	ee29 9b07 	vmul.f64	d9, d9, d7
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2])
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	ed93 7a00 	vldr	s14, [r3]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3308      	adds	r3, #8
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	+ 1.6845) + -0.8995) * f_J_inv_tmp_tmp) + 925786.58400000015 * cos((((((q[1]
 8003154:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8003468 <IVK+0x2db0>
 8003158:	ee37 7b06 	vadd.f64	d7, d7, d6
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2])
 800315c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8003470 <IVK+0x2db8>
 8003160:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003164:	eeb0 0b47 	vmov.f64	d0, d7
 8003168:	f010 fb2a 	bl	80137c0 <cos>
 800316c:	eeb0 7b40 	vmov.f64	d7, d0
 8003170:	ee29 6b07 	vmul.f64	d6, d9, d7
	+ 1.6845) + -0.8995) * f_J_inv_tmp_tmp) + 925786.58400000015 * cos((((((q[1]
 8003174:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800317c:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) * d_J_inv_tmp_tmp) + d2) + 78840.0 * cos((((((q[1] + 2.0 * q[2]) +
 8003180:	ee38 8b07 	vadd.f64	d8, d8, d7
	+ 1.6845) + -0.8995) * f_J_inv_tmp_tmp) + 925786.58400000015 * cos((((((q[1]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3304      	adds	r3, #4
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	+ 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3308      	adds	r3, #8
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	330c      	adds	r3, #12
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031b4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8003468 <IVK+0x2db0>
 80031b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031bc:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8003470 <IVK+0x2db8>
 80031c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031c4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8003478 <IVK+0x2dc0>
 80031c8:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) * f_J_inv_tmp_tmp) + 925786.58400000015 * cos((((((q[1]
 80031cc:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8003480 <IVK+0x2dc8>
 80031d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031d4:	eeb0 0b47 	vmov.f64	d0, d7
 80031d8:	f010 faf2 	bl	80137c0 <cos>
 80031dc:	eeb0 7b40 	vmov.f64	d7, d0
 80031e0:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8003490 <IVK+0x2dd8>
 80031e4:	ee27 9b06 	vmul.f64	d9, d7, d6
	((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3304      	adds	r3, #4
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3308      	adds	r3, #8
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003200:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003204:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	330c      	adds	r3, #12
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003214:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003218:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8003468 <IVK+0x2db0>
 800321c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003220:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8003470 <IVK+0x2db8>
 8003224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003228:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8003478 <IVK+0x2dc0>
 800322c:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin
 8003230:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8003480 <IVK+0x2dc8>
 8003234:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003238:	eeb0 0b47 	vmov.f64	d0, d7
 800323c:	f010 fb14 	bl	8013868 <sin>
 8003240:	eeb0 7b40 	vmov.f64	d7, d0
 8003244:	ee29 9b07 	vmul.f64	d9, d9, d7
	* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) + 221663.52 * sin((((((q[1] + 2.0 *
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3304      	adds	r3, #4
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003254:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8003468 <IVK+0x2db0>
 8003258:	ee37 7b06 	vadd.f64	d7, d7, d6
 800325c:	eeb0 0b47 	vmov.f64	d0, d7
 8003260:	f010 faae 	bl	80137c0 <cos>
 8003264:	eeb0 7b40 	vmov.f64	d7, d0
 8003268:	ee29 6b07 	vmul.f64	d6, d9, d7
 800326c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003274:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ 1.6845) + -0.8995) * f_J_inv_tmp_tmp) + 925786.58400000015 * cos((((((q[1]
 8003278:	ee38 8b07 	vadd.f64	d8, d8, d7
	* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) + 221663.52 * sin((((((q[1] + 2.0 *
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3304      	adds	r3, #4
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3308      	adds	r3, #8
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) + 221663.52 * sin((((((q[1] + 2.0 *
 8003294:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003298:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	330c      	adds	r3, #12
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80032ac:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8003468 <IVK+0x2db0>
 80032b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032b4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8003470 <IVK+0x2db8>
 80032b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032bc:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8003478 <IVK+0x2dc0>
 80032c0:	ee37 7b46 	vsub.f64	d7, d7, d6
	* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) + 221663.52 * sin((((((q[1] + 2.0 *
 80032c4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8003480 <IVK+0x2dc8>
 80032c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032cc:	eeb0 0b47 	vmov.f64	d0, d7
 80032d0:	f010 faca 	bl	8013868 <sin>
 80032d4:	eeb0 7b40 	vmov.f64	d7, d0
 80032d8:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8003498 <IVK+0x2de0>
 80032dc:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3308      	adds	r3, #8
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032f8:	ee37 7b07 	vadd.f64	d7, d7, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 80032fc:	ee36 7b07 	vadd.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845)
 8003300:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003468 <IVK+0x2db0>
 8003304:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003308:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003470 <IVK+0x2db8>
 800330c:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8003310:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003478 <IVK+0x2dc0>
 8003314:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003318:	eeb0 0b47 	vmov.f64	d0, d7
 800331c:	f010 fa50 	bl	80137c0 <cos>
 8003320:	eeb0 7b40 	vmov.f64	d7, d0
 8003324:	ee29 9b07 	vmul.f64	d9, d9, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3304      	adds	r3, #4
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3308      	adds	r3, #8
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003340:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003468 <IVK+0x2db0>
 8003344:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003348:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003470 <IVK+0x2db8>
 800334c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003350:	eeb0 0b47 	vmov.f64	d0, d7
 8003354:	f010 fa88 	bl	8013868 <sin>
 8003358:	eeb0 7b40 	vmov.f64	d7, d0
 800335c:	ee29 6b07 	vmul.f64	d6, d9, d7
	+ -0.8995) * f_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q
 8003360:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003364:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003368:	ee26 7b07 	vmul.f64	d7, d6, d7
	* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) + 221663.52 * sin((((((q[1] + 2.0 *
 800336c:	ee38 8b07 	vadd.f64	d8, d8, d7
	+ -0.8995) * f_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3304      	adds	r3, #4
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3308      	adds	r3, #8
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003388:	ee37 7b07 	vadd.f64	d7, d7, d7
 800338c:	ee36 6b07 	vadd.f64	d6, d6, d7
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2])
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	330c      	adds	r3, #12
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	+ -0.8995) * f_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q
 800339c:	ee36 7b07 	vadd.f64	d7, d6, d7
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2])
 80033a0:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003468 <IVK+0x2db0>
 80033a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033a8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003470 <IVK+0x2db8>
 80033ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033b0:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003478 <IVK+0x2dc0>
 80033b4:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ -0.8995) * f_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q
 80033b8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003480 <IVK+0x2dc8>
 80033bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033c0:	eeb0 0b47 	vmov.f64	d0, d7
 80033c4:	f010 fa50 	bl	8013868 <sin>
 80033c8:	eeb0 7b40 	vmov.f64	d7, d0
 80033cc:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003498 <IVK+0x2de0>
 80033d0:	ee27 9b06 	vmul.f64	d9, d7, d6
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2])
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3304      	adds	r3, #4
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3308      	adds	r3, #8
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033f0:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80033f4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8003468 <IVK+0x2db0>
 80033f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033fc:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8003470 <IVK+0x2db8>
 8003400:	ee37 7b46 	vsub.f64	d7, d7, d6
	[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2])
 8003404:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8003478 <IVK+0x2dc0>
 8003408:	ee37 7b46 	vsub.f64	d7, d7, d6
 800340c:	eeb0 0b47 	vmov.f64	d0, d7
 8003410:	f010 fa2a 	bl	8013868 <sin>
 8003414:	eeb0 7b40 	vmov.f64	d7, d0
 8003418:	ee29 9b07 	vmul.f64	d9, d9, d7
	+ 1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3304      	adds	r3, #4
 8003420:	ed93 7a00 	vldr	s14, [r3]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3308      	adds	r3, #8
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003434:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8003468 <IVK+0x2db0>
 8003438:	ee37 7b06 	vadd.f64	d7, d7, d6
 800343c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8003470 <IVK+0x2db8>
 8003440:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003444:	eeb0 0b47 	vmov.f64	d0, d7
 8003448:	f010 f9ba 	bl	80137c0 <cos>
 800344c:	eeb0 7b40 	vmov.f64	d7, d0
 8003450:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003454:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003458:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800345c:	ee26 7b07 	vmul.f64	d7, d6, d7
	+ -0.8995) * f_J_inv_tmp_tmp) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q
 8003460:	ee38 8b47 	vsub.f64	d8, d8, d7
					   f_J_inv_tmp_tmp) + 2.6029060499520004E+6 * sin((((((q[1]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	e033      	b.n	80034d0 <IVK+0x2e18>
 8003468:	45a1cac1 	.word	0x45a1cac1
 800346c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003470:	39581062 	.word	0x39581062
 8003474:	3fecc8b4 	.word	0x3fecc8b4
 8003478:	05532618 	.word	0x05532618
 800347c:	3fe792a3 	.word	0x3fe792a3
 8003480:	19ce075f 	.word	0x19ce075f
 8003484:	3ff85a51 	.word	0x3ff85a51
 8003488:	00000000 	.word	0x00000000
 800348c:	40f33f80 	.word	0x40f33f80
 8003490:	2b020c4b 	.word	0x2b020c4b
 8003494:	412c40b5 	.word	0x412c40b5
 8003498:	28f5c28f 	.word	0x28f5c28f
 800349c:	410b0efc 	.word	0x410b0efc
 80034a0:	0664d3c0 	.word	0x0664d3c0
 80034a4:	4143dbcd 	.word	0x4143dbcd
 80034a8:	19ce075f 	.word	0x19ce075f
 80034ac:	3ff85a51 	.word	0x3ff85a51
 80034b0:	05532618 	.word	0x05532618
 80034b4:	3fe792a3 	.word	0x3fe792a3
 80034b8:	f5c28f5d 	.word	0xf5c28f5d
 80034bc:	410738b0 	.word	0x410738b0
 80034c0:	45a1cac1 	.word	0x45a1cac1
 80034c4:	3ffaf3b6 	.word	0x3ffaf3b6
 80034c8:	39581062 	.word	0x39581062
 80034cc:	3fecc8b4 	.word	0x3fecc8b4
 80034d0:	3304      	adds	r3, #4
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	+ 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3308      	adds	r3, #8
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80034ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	330c      	adds	r3, #12
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034fe:	ed1f 6b10 	vldr	d6, [pc, #-64]	; 80034c0 <IVK+0x2e08>
 8003502:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003506:	ed1f 6b10 	vldr	d6, [pc, #-64]	; 80034c8 <IVK+0x2e10>
 800350a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800350e:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 80034b0 <IVK+0x2df8>
 8003512:	ee37 7b46 	vsub.f64	d7, d7, d6
					   f_J_inv_tmp_tmp) + 2.6029060499520004E+6 * sin((((((q[1]
 8003516:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 80034a8 <IVK+0x2df0>
 800351a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800351e:	eeb0 0b47 	vmov.f64	d0, d7
 8003522:	f010 f9a1 	bl	8013868 <sin>
 8003526:	eeb0 7b40 	vmov.f64	d7, d0
 800352a:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 80034a0 <IVK+0x2de8>
 800352e:	ee27 9b06 	vmul.f64	d9, d7, d6
					  ((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3308      	adds	r3, #8
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800354a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800354e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003552:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 80034c0 <IVK+0x2e08>
 8003556:	ee37 7b06 	vadd.f64	d7, d7, d6
 800355a:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 80034c8 <IVK+0x2e10>
 800355e:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos
 8003562:	ed1f 6b2d 	vldr	d6, [pc, #-180]	; 80034b0 <IVK+0x2df8>
 8003566:	ee37 7b46 	vsub.f64	d7, d7, d6
 800356a:	eeb0 0b47 	vmov.f64	d0, d7
 800356e:	f010 f927 	bl	80137c0 <cos>
 8003572:	eeb0 7b40 	vmov.f64	d7, d0
 8003576:	ee29 9b07 	vmul.f64	d9, d9, d7
					  sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3304      	adds	r3, #4
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003586:	ed1f 6b32 	vldr	d6, [pc, #-200]	; 80034c0 <IVK+0x2e08>
 800358a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800358e:	eeb0 0b47 	vmov.f64	d0, d7
 8003592:	f010 f969 	bl	8013868 <sin>
 8003596:	eeb0 7b40 	vmov.f64	d7, d0
					  ((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800359a:	ee29 6b07 	vmul.f64	d6, d9, d7
					  sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 800359e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80035a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035a6:	ee26 7b07 	vmul.f64	d7, d6, d7
					   f_J_inv_tmp_tmp) + 2.6029060499520004E+6 * sin((((((q[1]
 80035aa:	ee38 8b07 	vadd.f64	d8, d8, d7
					 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3304      	adds	r3, #4
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3308      	adds	r3, #8
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	330c      	adds	r3, #12
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035da:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 80035de:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80034c0 <IVK+0x2e08>
 80035e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035e6:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80034c8 <IVK+0x2e10>
 80035ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035ee:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 80034b0 <IVK+0x2df8>
 80035f2:	ee37 7b46 	vsub.f64	d7, d7, d6
					 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 80035f6:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 80034a8 <IVK+0x2df0>
 80035fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035fe:	eeb0 0b47 	vmov.f64	d0, d7
 8003602:	f010 f931 	bl	8013868 <sin>
 8003606:	eeb0 7b40 	vmov.f64	d7, d0
 800360a:	ed1f 6b5b 	vldr	d6, [pc, #-364]	; 80034a0 <IVK+0x2de8>
 800360e:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3304      	adds	r3, #4
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3308      	adds	r3, #8
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800362a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800362e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003632:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80034c0 <IVK+0x2e08>
 8003636:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800363a:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80034c8 <IVK+0x2e10>
 800363e:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8003642:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 80034b0 <IVK+0x2df8>
 8003646:	ee37 7b46 	vsub.f64	d7, d7, d6
 800364a:	eeb0 0b47 	vmov.f64	d0, d7
 800364e:	f010 f90b 	bl	8013868 <sin>
 8003652:	eeb0 7b40 	vmov.f64	d7, d0
 8003656:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3304      	adds	r3, #4
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003666:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 80034c0 <IVK+0x2e08>
 800366a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800366e:	eeb0 0b47 	vmov.f64	d0, d7
 8003672:	f010 f8a5 	bl	80137c0 <cos>
 8003676:	eeb0 7b40 	vmov.f64	d7, d0
 800367a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800367e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003686:	ee26 7b07 	vmul.f64	d7, d6, d7
					  sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 800368a:	ee38 8b47 	vsub.f64	d8, d8, d7
					190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3304      	adds	r3, #4
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3308      	adds	r3, #8
 800369e:	edd3 7a00 	vldr	s15, [r3]
 80036a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80036aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	330c      	adds	r3, #12
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036be:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 80034c0 <IVK+0x2e08>
 80036c2:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 80036c6:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 80034c8 <IVK+0x2e10>
 80036ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80036ce:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 80034b0 <IVK+0x2df8>
 80036d2:	ee37 7b46 	vsub.f64	d7, d7, d6
					190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80036d6:	ed1f 6b8c 	vldr	d6, [pc, #-560]	; 80034a8 <IVK+0x2df0>
 80036da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036de:	eeb0 0b47 	vmov.f64	d0, d7
 80036e2:	f010 f8c1 	bl	8013868 <sin>
 80036e6:	eeb0 7b40 	vmov.f64	d7, d0
 80036ea:	ed1f 6b8d 	vldr	d6, [pc, #-564]	; 80034b8 <IVK+0x2e00>
 80036ee:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	ed93 7a00 	vldr	s14, [r3]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3308      	adds	r3, #8
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800370a:	ed1f 6b93 	vldr	d6, [pc, #-588]	; 80034c0 <IVK+0x2e08>
 800370e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003712:	ed1f 6b93 	vldr	d6, [pc, #-588]	; 80034c8 <IVK+0x2e10>
 8003716:	ee37 7b46 	vsub.f64	d7, d7, d6
 800371a:	eeb0 0b47 	vmov.f64	d0, d7
 800371e:	f010 f84f 	bl	80137c0 <cos>
 8003722:	eeb0 7b40 	vmov.f64	d7, d0
 8003726:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.8995) * sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) - 190230.12000000002 * sin
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003736:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 80034c0 <IVK+0x2e08>
 800373a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800373e:	eeb0 0b47 	vmov.f64	d0, d7
 8003742:	f010 f891 	bl	8013868 <sin>
 8003746:	eeb0 7b40 	vmov.f64	d7, d0
 800374a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800374e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003756:	ee26 7b07 	vmul.f64	d7, d6, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800375a:	ee38 8b07 	vadd.f64	d8, d8, d7
				   ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3304      	adds	r3, #4
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3308      	adds	r3, #8
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003776:	ee37 7b07 	vadd.f64	d7, d7, d7
 800377a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	330c      	adds	r3, #12
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800378a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800378e:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80034c0 <IVK+0x2e08>
 8003792:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003796:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80034c8 <IVK+0x2e10>
 800379a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800379e:	ed1f 6bbc 	vldr	d6, [pc, #-752]	; 80034b0 <IVK+0x2df8>
 80037a2:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) * sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) - 190230.12000000002 * sin
 80037a6:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 80034a8 <IVK+0x2df0>
 80037aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037ae:	eeb0 0b47 	vmov.f64	d0, d7
 80037b2:	f010 f859 	bl	8013868 <sin>
 80037b6:	eeb0 7b40 	vmov.f64	d7, d0
 80037ba:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 80034b8 <IVK+0x2e00>
 80037be:	ee27 9b06 	vmul.f64	d9, d7, d6
					 -0.73665) + 1.52205) * sin(((q[1] + q[2]) + 1.6845) +
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	ed93 7a00 	vldr	s14, [r3]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3308      	adds	r3, #8
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037da:	ed1f 6bc7 	vldr	d6, [pc, #-796]	; 80034c0 <IVK+0x2e08>
 80037de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037e2:	ed1f 6bc7 	vldr	d6, [pc, #-796]	; 80034c8 <IVK+0x2e10>
 80037e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80037ea:	eeb0 0b47 	vmov.f64	d0, d7
 80037ee:	f010 f83b 	bl	8013868 <sin>
 80037f2:	eeb0 7b40 	vmov.f64	d7, d0
 80037f6:	ee29 9b07 	vmul.f64	d9, d9, d7
			  -0.8995) * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp)) / d;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3304      	adds	r3, #4
 80037fe:	edd3 7a00 	vldr	s15, [r3]
 8003802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003806:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 80034c0 <IVK+0x2e08>
 800380a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800380e:	eeb0 0b47 	vmov.f64	d0, d7
 8003812:	f00f ffd5 	bl	80137c0 <cos>
 8003816:	eeb0 7b40 	vmov.f64	d7, d0
 800381a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800381e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003826:	ee26 7b07 	vmul.f64	d7, d6, d7
	-0.8995) * sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) - 190230.12000000002 * sin
 800382a:	ee38 7b47 	vsub.f64	d7, d8, d7
	dv[8] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 800382e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8003832:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003836:	eeb1 5b47 	vneg.f64	d5, d7
			  -0.8995) * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp)) / d;
 800383a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800383e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003842:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003846:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[8] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 800384a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	dv[13] = -(4.0 * f_J_inv_tmp_tmp * (60.0 * cos(((q[1] + q[2]) + 1.6845) +
 800384e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003856:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800385a:	ee27 8b06 	vmul.f64	d8, d7, d6
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3304      	adds	r3, #4
 8003862:	ed93 7a00 	vldr	s14, [r3]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3308      	adds	r3, #8
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003876:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 80034c0 <IVK+0x2e08>
 800387a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800387e:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 80034c8 <IVK+0x2e10>
 8003882:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003886:	eeb0 0b47 	vmov.f64	d0, d7
 800388a:	f00f ff99 	bl	80137c0 <cos>
 800388e:	eeb0 7b40 	vmov.f64	d7, d0
 8003892:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8003c58 <IVK+0x35a0>
 8003896:	ee27 6b06 	vmul.f64	d6, d7, d6
	-0.8995) + 704.556 * b_J_inv_tmp_tmp)) / d3;
 800389a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800389e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038a2:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8003c60 <IVK+0x35a8>
 80038a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80038aa:	ee36 7b07 	vadd.f64	d7, d6, d7
	dv[13] = -(4.0 * f_J_inv_tmp_tmp * (60.0 * cos(((q[1] + q[2]) + 1.6845) +
 80038ae:	ee28 7b07 	vmul.f64	d7, d8, d7
 80038b2:	eeb1 5b47 	vneg.f64	d5, d7
	-0.8995) + 704.556 * b_J_inv_tmp_tmp)) / d3;
 80038b6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80038ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[13] = -(4.0 * f_J_inv_tmp_tmp * (60.0 * cos(((q[1] + q[2]) + 1.6845) +
 80038c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	dv[18] = -(4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3308      	adds	r3, #8
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038e2:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8003c88 <IVK+0x35d0>
 80038e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038ea:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8003c90 <IVK+0x35d8>
 80038ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038f2:	eeb0 0b47 	vmov.f64	d0, d7
 80038f6:	f00f ff63 	bl	80137c0 <cos>
 80038fa:	eeb0 7b40 	vmov.f64	d7, d0
 80038fe:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003c58 <IVK+0x35a0>
 8003902:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003910:	eeb0 0b47 	vmov.f64	d0, d7
 8003914:	f00f ffa8 	bl	8013868 <sin>
 8003918:	eeb0 7b40 	vmov.f64	d7, d0
 800391c:	ee28 8b07 	vmul.f64	d8, d8, d7
					704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) / d3;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3304      	adds	r3, #4
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800392c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8003c88 <IVK+0x35d0>
 8003930:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003934:	eeb0 0b47 	vmov.f64	d0, d7
 8003938:	f00f ff42 	bl	80137c0 <cos>
 800393c:	eeb0 7b40 	vmov.f64	d7, d0
 8003940:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8003c60 <IVK+0x35a8>
 8003944:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003948:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800394c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003950:	ee26 7b07 	vmul.f64	d7, d6, d7
	dv[18] = -(4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8003954:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003958:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800395c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003960:	eeb1 5b47 	vneg.f64	d5, d7
					704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) / d3;
 8003964:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003968:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800396c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003970:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[18] = -(4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8003974:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	dv[23] = -(4.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) + 704.556 *
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3304      	adds	r3, #4
 800397c:	ed93 7a00 	vldr	s14, [r3]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3308      	adds	r3, #8
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800398c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003990:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8003c88 <IVK+0x35d0>
 8003994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003998:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8003c90 <IVK+0x35d8>
 800399c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039a0:	eeb0 0b47 	vmov.f64	d0, d7
 80039a4:	f00f ff60 	bl	8013868 <sin>
 80039a8:	eeb0 7b40 	vmov.f64	d7, d0
 80039ac:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8003c58 <IVK+0x35a0>
 80039b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80039b4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80039b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039bc:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8003c60 <IVK+0x35a8>
 80039c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80039c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039c8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80039cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039d0:	eeb1 5b47 	vneg.f64	d5, d7
					e_J_inv_tmp_tmp)) / d3;
 80039d4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80039d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80039e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[23] = -(4.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) + 704.556 *
 80039e4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	dv[4] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3304      	adds	r3, #4
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3308      	adds	r3, #8
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a08:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003c88 <IVK+0x35d0>
 8003a0c:	ee37 7b06 	vadd.f64	d7, d7, d6
	+ -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])
 8003a10:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003c90 <IVK+0x35d8>
 8003a14:	ee37 7b46 	vsub.f64	d7, d7, d6
	dv[4] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 8003a18:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8003ca8 <IVK+0x35f0>
 8003a1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a20:	eeb0 0b47 	vmov.f64	d0, d7
 8003a24:	f00f ff20 	bl	8013868 <sin>
 8003a28:	eeb0 7b40 	vmov.f64	d7, d0
 8003a2c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8003c68 <IVK+0x35b0>
 8003a30:	ee27 8b06 	vmul.f64	d8, d7, d6
	+ -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3304      	adds	r3, #4
 8003a38:	ed93 7a00 	vldr	s14, [r3]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a4c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8003c88 <IVK+0x35d0>
 8003a50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a54:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8003c90 <IVK+0x35d8>
 8003a58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a5c:	eeb0 0b47 	vmov.f64	d0, d7
 8003a60:	f00f feae 	bl	80137c0 <cos>
 8003a64:	eeb0 7b40 	vmov.f64	d7, d0
 8003a68:	ee28 8b07 	vmul.f64	d8, d8, d7
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a76:	eeb0 0b47 	vmov.f64	d0, d7
 8003a7a:	f00f fea1 	bl	80137c0 <cos>
 8003a7e:	eeb0 7b40 	vmov.f64	d7, d0
 8003a82:	ee28 8b07 	vmul.f64	d8, d8, d7
	- 123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3308      	adds	r3, #8
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003aa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003aa6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8003c88 <IVK+0x35d0>
 8003aaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003aae:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8003c90 <IVK+0x35d8>
 8003ab2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ab6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8003ca8 <IVK+0x35f0>
 8003aba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003abe:	eeb0 0b47 	vmov.f64	d0, d7
 8003ac2:	f00f fe7d 	bl	80137c0 <cos>
 8003ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8003aca:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003c68 <IVK+0x35b0>
 8003ace:	ee27 9b06 	vmul.f64	d9, d7, d6
	sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) - 1.4460589166400002E+6
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	ed93 7a00 	vldr	s14, [r3]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3308      	adds	r3, #8
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aea:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003c88 <IVK+0x35d0>
 8003aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003af2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003c90 <IVK+0x35d8>
 8003af6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003afa:	eeb0 0b47 	vmov.f64	d0, d7
 8003afe:	f00f feb3 	bl	8013868 <sin>
 8003b02:	eeb0 7b40 	vmov.f64	d7, d0
	- 123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003b06:	ee29 9b07 	vmul.f64	d9, d9, d7
	sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) - 1.4460589166400002E+6
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b14:	eeb0 0b47 	vmov.f64	d0, d7
 8003b18:	f00f fe52 	bl	80137c0 <cos>
 8003b1c:	eeb0 7b40 	vmov.f64	d7, d0
 8003b20:	ee29 7b07 	vmul.f64	d7, d9, d7
	- 123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003b24:	ee38 8b47 	vsub.f64	d8, d8, d7
	* cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] +
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3308      	adds	r3, #8
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b48:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003c88 <IVK+0x35d0>
 8003b4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b50:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003c90 <IVK+0x35d8>
 8003b54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b58:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8003ca8 <IVK+0x35f0>
 8003b5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b60:	eeb0 0b47 	vmov.f64	d0, d7
 8003b64:	f00f fe2c 	bl	80137c0 <cos>
 8003b68:	eeb0 7b40 	vmov.f64	d7, d0
 8003b6c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8003c70 <IVK+0x35b8>
 8003b70:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3304      	adds	r3, #4
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b80:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8003c88 <IVK+0x35d0>
 8003b84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b88:	eeb0 0b47 	vmov.f64	d0, d7
 8003b8c:	f00f fe6c 	bl	8013868 <sin>
 8003b90:	eeb0 7b40 	vmov.f64	d7, d0
 8003b94:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) * cos(q[0])) + 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ba2:	eeb0 0b47 	vmov.f64	d0, d7
 8003ba6:	f00f fe0b 	bl	80137c0 <cos>
 8003baa:	eeb0 7b40 	vmov.f64	d7, d0
 8003bae:	ee29 7b07 	vmul.f64	d7, d9, d7
	sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) - 1.4460589166400002E+6
 8003bb2:	ee38 8b47 	vsub.f64	d8, d8, d7
	1.6845) * cos(q[0])) + 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003bd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bd6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8003c88 <IVK+0x35d0>
 8003bda:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) -
 8003bde:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8003c90 <IVK+0x35d8>
 8003be2:	ee37 7b46 	vsub.f64	d7, d7, d6
	1.6845) * cos(q[0])) + 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 8003be6:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8003ca8 <IVK+0x35f0>
 8003bea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bee:	eeb0 0b47 	vmov.f64	d0, d7
 8003bf2:	f00f fe39 	bl	8013868 <sin>
 8003bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8003bfa:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8003c70 <IVK+0x35b8>
 8003bfe:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) -
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	edd3 7a00 	vldr	s15, [r3]
 8003c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c0e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8003c88 <IVK+0x35d0>
 8003c12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c16:	eeb0 0b47 	vmov.f64	d0, d7
 8003c1a:	f00f fdd1 	bl	80137c0 <cos>
 8003c1e:	eeb0 7b40 	vmov.f64	d7, d0
 8003c22:	ee29 9b07 	vmul.f64	d9, d9, d7
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c30:	eeb0 0b47 	vmov.f64	d0, d7
 8003c34:	f00f fdc4 	bl	80137c0 <cos>
 8003c38:	eeb0 7b40 	vmov.f64	d7, d0
 8003c3c:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) * cos(q[0])) + 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 8003c40:	ee38 8b07 	vadd.f64	d8, d8, d7
	105683.40000000001 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] +
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3304      	adds	r3, #4
 8003c48:	ed93 7a00 	vldr	s14, [r3]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	e03a      	b.n	8003cc8 <IVK+0x3610>
 8003c52:	bf00      	nop
 8003c54:	f3af 8000 	nop.w
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	404e0000 	.word	0x404e0000
 8003c60:	b020c49c 	.word	0xb020c49c
 8003c64:	40860472 	.word	0x40860472
 8003c68:	66666666 	.word	0x66666666
 8003c6c:	40fe10a6 	.word	0x40fe10a6
 8003c70:	eaa8eb47 	.word	0xeaa8eb47
 8003c74:	413610aa 	.word	0x413610aa
 8003c78:	66666667 	.word	0x66666667
 8003c7c:	40f9cd36 	.word	0x40f9cd36
 8003c80:	00000000 	.word	0x00000000
 8003c84:	40f33f80 	.word	0x40f33f80
 8003c88:	45a1cac1 	.word	0x45a1cac1
 8003c8c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003c90:	39581062 	.word	0x39581062
 8003c94:	3fecc8b4 	.word	0x3fecc8b4
 8003c98:	2b020c4b 	.word	0x2b020c4b
 8003c9c:	412c40b5 	.word	0x412c40b5
 8003ca0:	19ce075f 	.word	0x19ce075f
 8003ca4:	3ff85a51 	.word	0x3ff85a51
 8003ca8:	05532618 	.word	0x05532618
 8003cac:	3fe792a3 	.word	0x3fe792a3
 8003cb0:	28f5c28f 	.word	0x28f5c28f
 8003cb4:	410b0efc 	.word	0x410b0efc
 8003cb8:	45a1cac1 	.word	0x45a1cac1
 8003cbc:	3ffaf3b6 	.word	0x3ffaf3b6
 8003cc0:	39581062 	.word	0x39581062
 8003cc4:	3fecc8b4 	.word	0x3fecc8b4
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8003c88 <IVK+0x35d0>
 8003cd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003cdc:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8003c90 <IVK+0x35d8>
 8003ce0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8003ce8:	f00f fd6a 	bl	80137c0 <cos>
 8003cec:	eeb0 7b40 	vmov.f64	d7, d0
 8003cf0:	ed1f 6b1f 	vldr	d6, [pc, #-124]	; 8003c78 <IVK+0x35c0>
 8003cf4:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d04:	ed1f 6b20 	vldr	d6, [pc, #-128]	; 8003c88 <IVK+0x35d0>
 8003d08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d0c:	eeb0 0b47 	vmov.f64	d0, d7
 8003d10:	f00f fdaa 	bl	8013868 <sin>
 8003d14:	eeb0 7b40 	vmov.f64	d7, d0
 8003d18:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) * cos(q[0])) + 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	edd3 7a00 	vldr	s15, [r3]
 8003d22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d26:	eeb0 0b47 	vmov.f64	d0, d7
 8003d2a:	f00f fd49 	bl	80137c0 <cos>
 8003d2e:	eeb0 7b40 	vmov.f64	d7, d0
 8003d32:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) -
 8003d36:	ee38 8b47 	vsub.f64	d8, d8, d7
	1.6845) * cos(q[0])) + 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	ed93 7a00 	vldr	s14, [r3]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3308      	adds	r3, #8
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d52:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8003c88 <IVK+0x35d0>
 8003d56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d5a:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8003c90 <IVK+0x35d8>
 8003d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d62:	eeb0 0b47 	vmov.f64	d0, d7
 8003d66:	f00f fd7f 	bl	8013868 <sin>
 8003d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8003d6e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8003c78 <IVK+0x35c0>
 8003d72:	ee27 9b06 	vmul.f64	d9, d7, d6
	-0.8995) * cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp) + d11) + 78840.0 *
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d82:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8003c88 <IVK+0x35d0>
 8003d86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d8a:	eeb0 0b47 	vmov.f64	d0, d7
 8003d8e:	f00f fd17 	bl	80137c0 <cos>
 8003d92:	eeb0 7b40 	vmov.f64	d7, d0
 8003d96:	ee29 9b07 	vmul.f64	d9, d9, d7
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003da4:	eeb0 0b47 	vmov.f64	d0, d7
 8003da8:	f00f fd0a 	bl	80137c0 <cos>
 8003dac:	eeb0 7b40 	vmov.f64	d7, d0
 8003db0:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) * cos(q[0])) + 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 8003db4:	ee38 6b07 	vadd.f64	d6, d8, d7
	-0.8995) * cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp) + d11) + 78840.0 *
 8003db8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003dc4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dcc:	ee36 8b07 	vadd.f64	d8, d6, d7
	cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	edd3 7a00 	vldr	s15, [r3]
 8003dd8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3308      	adds	r3, #8
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003de8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003dec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	330c      	adds	r3, #12
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e00:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8003c88 <IVK+0x35d0>
 8003e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e08:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8003c90 <IVK+0x35d8>
 8003e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e10:	ed1f 6b5b 	vldr	d6, [pc, #-364]	; 8003ca8 <IVK+0x35f0>
 8003e14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e18:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8003ca0 <IVK+0x35e8>
 8003e1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e20:	eeb0 0b47 	vmov.f64	d0, d7
 8003e24:	f00f fccc 	bl	80137c0 <cos>
 8003e28:	eeb0 7b40 	vmov.f64	d7, d0
	-0.8995) * cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp) + d11) + 78840.0 *
 8003e2c:	ed1f 6b6c 	vldr	d6, [pc, #-432]	; 8003c80 <IVK+0x35c8>
 8003e30:	ee27 9b06 	vmul.f64	d9, d7, d6
		1.52205) * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3304      	adds	r3, #4
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3308      	adds	r3, #8
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	330c      	adds	r3, #12
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e64:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8003c88 <IVK+0x35d0>
 8003e68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e6c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8003c90 <IVK+0x35d8>
 8003e70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e74:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8003ca8 <IVK+0x35f0>
 8003e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e7c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8003ca0 <IVK+0x35e8>
 8003e80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e84:	eeb0 0b47 	vmov.f64	d0, d7
 8003e88:	f00f fcee 	bl	8013868 <sin>
 8003e8c:	eeb0 7b40 	vmov.f64	d7, d0
 8003e90:	ee29 9b07 	vmul.f64	d9, d9, d7
						-0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3304      	adds	r3, #4
 8003e98:	ed93 7a00 	vldr	s14, [r3]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	edd3 7a00 	vldr	s15, [r3]
 8003ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eac:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8003c88 <IVK+0x35d0>
 8003eb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003eb4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8003c90 <IVK+0x35d8>
 8003eb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ebc:	eeb0 0b47 	vmov.f64	d0, d7
 8003ec0:	f00f fc7e 	bl	80137c0 <cos>
 8003ec4:	eeb0 7b40 	vmov.f64	d7, d0
 8003ec8:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.8995) * sin(q[0])) + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) +
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ed6:	eeb0 0b47 	vmov.f64	d0, d7
 8003eda:	f00f fcc5 	bl	8013868 <sin>
 8003ede:	eeb0 7b40 	vmov.f64	d7, d0
 8003ee2:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) * cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp) + d11) + 78840.0 *
 8003ee6:	ee38 8b07 	vadd.f64	d8, d8, d7
	-0.8995) * sin(q[0])) + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) +
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3304      	adds	r3, #4
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f06:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	-0.8995) * sin(q[0])) + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) +
 8003f16:	ee36 7b07 	vadd.f64	d7, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003f1a:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8003c88 <IVK+0x35d0>
 8003f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f22:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8003c90 <IVK+0x35d8>
 8003f26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f2a:	ed1f 6ba1 	vldr	d6, [pc, #-644]	; 8003ca8 <IVK+0x35f0>
 8003f2e:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) * sin(q[0])) + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) +
 8003f32:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8003ca0 <IVK+0x35e8>
 8003f36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f3a:	eeb0 0b47 	vmov.f64	d0, d7
 8003f3e:	f00f fc3f 	bl	80137c0 <cos>
 8003f42:	eeb0 7b40 	vmov.f64	d7, d0
 8003f46:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8003c98 <IVK+0x35e0>
 8003f4a:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003f66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f6a:	ee36 6b07 	vadd.f64	d6, d6, d7
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	330c      	adds	r3, #12
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f7e:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8003cb8 <IVK+0x3600>
 8003f82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f86:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8003cc0 <IVK+0x3608>
 8003f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f8e:	ed1f 6bba 	vldr	d6, [pc, #-744]	; 8003ca8 <IVK+0x35f0>
 8003f92:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q
 8003f96:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8003ca0 <IVK+0x35e8>
 8003f9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8003fa2:	f00f fc61 	bl	8013868 <sin>
 8003fa6:	eeb0 7b40 	vmov.f64	d7, d0
 8003faa:	ee29 9b07 	vmul.f64	d9, d9, d7
	[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fba:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8003cb8 <IVK+0x3600>
 8003fbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fc2:	eeb0 0b47 	vmov.f64	d0, d7
 8003fc6:	f00f fbfb 	bl	80137c0 <cos>
 8003fca:	eeb0 7b40 	vmov.f64	d7, d0
 8003fce:	ee29 9b07 	vmul.f64	d9, d9, d7
	* sin(q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) +
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8003fe0:	f00f fc42 	bl	8013868 <sin>
 8003fe4:	eeb0 7b40 	vmov.f64	d7, d0
 8003fe8:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) * sin(q[0])) + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) +
 8003fec:	ee38 8b07 	vadd.f64	d8, d8, d7
	* sin(q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) +
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3308      	adds	r3, #8
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004008:	ee37 7b07 	vadd.f64	d7, d7, d7
 800400c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	330c      	adds	r3, #12
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800401c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004020:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8003cb8 <IVK+0x3600>
 8004024:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004028:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8003cc0 <IVK+0x3608>
 800402c:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 8004030:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 8003ca8 <IVK+0x35f0>
 8004034:	ee37 7b46 	vsub.f64	d7, d7, d6
	* sin(q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) +
 8004038:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8003ca0 <IVK+0x35e8>
 800403c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004040:	eeb0 0b47 	vmov.f64	d0, d7
 8004044:	f00f fc10 	bl	8013868 <sin>
 8004048:	eeb0 7b40 	vmov.f64	d7, d0
 800404c:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8003cb0 <IVK+0x35f8>
 8004050:	ee27 9b06 	vmul.f64	d9, d7, d6
	-0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3304      	adds	r3, #4
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3308      	adds	r3, #8
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800406c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004070:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004074:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8003cb8 <IVK+0x3600>
 8004078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800407c:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8003cc0 <IVK+0x3608>
 8004080:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004084:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8004440 <IVK+0x3d88>
 8004088:	ee37 7b46 	vsub.f64	d7, d7, d6
 800408c:	eeb0 0b47 	vmov.f64	d0, d7
 8004090:	f00f fb96 	bl	80137c0 <cos>
 8004094:	eeb0 7b40 	vmov.f64	d7, d0
 8004098:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3304      	adds	r3, #4
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3308      	adds	r3, #8
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040b4:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8004448 <IVK+0x3d90>
 80040b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040bc:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8004450 <IVK+0x3d98>
 80040c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040c4:	eeb0 0b47 	vmov.f64	d0, d7
 80040c8:	f00f fbce 	bl	8013868 <sin>
 80040cc:	eeb0 7b40 	vmov.f64	d7, d0
 80040d0:	ee29 9b07 	vmul.f64	d9, d9, d7
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	edd3 7a00 	vldr	s15, [r3]
 80040da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040de:	eeb0 0b47 	vmov.f64	d0, d7
 80040e2:	f00f fbc1 	bl	8013868 <sin>
 80040e6:	eeb0 7b40 	vmov.f64	d7, d0
 80040ea:	ee29 7b07 	vmul.f64	d7, d9, d7
	* sin(q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) +
 80040ee:	ee38 8b07 	vadd.f64	d8, d8, d7
					   - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3304      	adds	r3, #4
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3308      	adds	r3, #8
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800410a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800410e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	330c      	adds	r3, #12
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800411e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004122:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8004448 <IVK+0x3d90>
 8004126:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 800412a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8004450 <IVK+0x3d98>
 800412e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004132:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8004440 <IVK+0x3d88>
 8004136:	ee37 7b46 	vsub.f64	d7, d7, d6
					   - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 800413a:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8004468 <IVK+0x3db0>
 800413e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004142:	eeb0 0b47 	vmov.f64	d0, d7
 8004146:	f00f fb8f 	bl	8013868 <sin>
 800414a:	eeb0 7b40 	vmov.f64	d7, d0
 800414e:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 8004458 <IVK+0x3da0>
 8004152:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3304      	adds	r3, #4
 800415a:	edd3 7a00 	vldr	s15, [r3]
 800415e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3308      	adds	r3, #8
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800416e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004176:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8004448 <IVK+0x3d90>
 800417a:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800417e:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8004450 <IVK+0x3d98>
 8004182:	ee37 7b46 	vsub.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004186:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8004440 <IVK+0x3d88>
 800418a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800418e:	eeb0 0b47 	vmov.f64	d0, d7
 8004192:	f00f fb69 	bl	8013868 <sin>
 8004196:	eeb0 7b40 	vmov.f64	d7, d0
 800419a:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3304      	adds	r3, #4
 80041a2:	ed93 7a00 	vldr	s14, [r3]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3308      	adds	r3, #8
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041b6:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8004448 <IVK+0x3d90>
 80041ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041be:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8004450 <IVK+0x3d98>
 80041c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041c6:	eeb0 0b47 	vmov.f64	d0, d7
 80041ca:	f00f faf9 	bl	80137c0 <cos>
 80041ce:	eeb0 7b40 	vmov.f64	d7, d0
 80041d2:	ee29 9b07 	vmul.f64	d9, d9, d7
					   sin(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041e0:	eeb0 0b47 	vmov.f64	d0, d7
 80041e4:	f00f fb40 	bl	8013868 <sin>
 80041e8:	eeb0 7b40 	vmov.f64	d7, d0
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80041ec:	ee29 7b07 	vmul.f64	d7, d9, d7
					   - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80041f0:	ee38 8b47 	vsub.f64	d8, d8, d7
					   sin(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3304      	adds	r3, #4
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3308      	adds	r3, #8
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					   sin(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 800420c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004210:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	330c      	adds	r3, #12
 8004218:	edd3 7a00 	vldr	s15, [r3]
 800421c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004220:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004224:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004448 <IVK+0x3d90>
 8004228:	ee37 7b06 	vadd.f64	d7, d7, d6
 800422c:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004450 <IVK+0x3d98>
 8004230:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004234:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8004440 <IVK+0x3d88>
 8004238:	ee37 7b46 	vsub.f64	d7, d7, d6
					   sin(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 800423c:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8004468 <IVK+0x3db0>
 8004240:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004244:	eeb0 0b47 	vmov.f64	d0, d7
 8004248:	f00f fb0e 	bl	8013868 <sin>
 800424c:	eeb0 7b40 	vmov.f64	d7, d0
 8004250:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8004460 <IVK+0x3da8>
 8004254:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * sin(q[0]))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3308      	adds	r3, #8
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004270:	ee37 7b07 	vadd.f64	d7, d7, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004274:	ee36 7b07 	vadd.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * sin(q[0]))
 8004278:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8004448 <IVK+0x3d90>
 800427c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004280:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8004450 <IVK+0x3d98>
 8004284:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004288:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8004440 <IVK+0x3d88>
 800428c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004290:	eeb0 0b47 	vmov.f64	d0, d7
 8004294:	f00f fa94 	bl	80137c0 <cos>
 8004298:	eeb0 7b40 	vmov.f64	d7, d0
 800429c:	ee29 9b07 	vmul.f64	d9, d9, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * sin(q[0]))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3304      	adds	r3, #4
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004448 <IVK+0x3d90>
 80042b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042b4:	eeb0 0b47 	vmov.f64	d0, d7
 80042b8:	f00f fad6 	bl	8013868 <sin>
 80042bc:	eeb0 7b40 	vmov.f64	d7, d0
 80042c0:	ee29 9b07 	vmul.f64	d9, d9, d7
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042ce:	eeb0 0b47 	vmov.f64	d0, d7
 80042d2:	f00f fac9 	bl	8013868 <sin>
 80042d6:	eeb0 7b40 	vmov.f64	d7, d0
 80042da:	ee29 7b07 	vmul.f64	d7, d9, d7
					   sin(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 80042de:	ee38 8b07 	vadd.f64	d8, d8, d7
					 - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3308      	adds	r3, #8
 80042f2:	edd3 7a00 	vldr	s15, [r3]
 80042f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	330c      	adds	r3, #12
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800430e:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004312:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8004448 <IVK+0x3d90>
 8004316:	ee37 7b06 	vadd.f64	d7, d7, d6
 800431a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8004450 <IVK+0x3d98>
 800431e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004322:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8004440 <IVK+0x3d88>
 8004326:	ee37 7b46 	vsub.f64	d7, d7, d6
					 - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 800432a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8004468 <IVK+0x3db0>
 800432e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004332:	eeb0 0b47 	vmov.f64	d0, d7
 8004336:	f00f fa97 	bl	8013868 <sin>
 800433a:	eeb0 7b40 	vmov.f64	d7, d0
 800433e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004460 <IVK+0x3da8>
 8004342:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3304      	adds	r3, #4
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3308      	adds	r3, #8
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800435e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004362:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004366:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004448 <IVK+0x3d90>
 800436a:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) +
 800436e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004450 <IVK+0x3d98>
 8004372:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004376:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8004440 <IVK+0x3d88>
 800437a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800437e:	eeb0 0b47 	vmov.f64	d0, d7
 8004382:	f00f fa71 	bl	8013868 <sin>
 8004386:	eeb0 7b40 	vmov.f64	d7, d0
 800438a:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) +
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3304      	adds	r3, #4
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800439a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8004448 <IVK+0x3d90>
 800439e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043a2:	eeb0 0b47 	vmov.f64	d0, d7
 80043a6:	f00f fa0b 	bl	80137c0 <cos>
 80043aa:	eeb0 7b40 	vmov.f64	d7, d0
 80043ae:	ee29 9b07 	vmul.f64	d9, d9, d7
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043bc:	eeb0 0b47 	vmov.f64	d0, d7
 80043c0:	f00f fa52 	bl	8013868 <sin>
 80043c4:	eeb0 7b40 	vmov.f64	d7, d0
 80043c8:	ee29 7b07 	vmul.f64	d7, d9, d7
					 - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 80043cc:	ee38 8b47 	vsub.f64	d8, d8, d7
					190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3304      	adds	r3, #4
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3308      	adds	r3, #8
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	330c      	adds	r3, #12
 80043f4:	edd3 7a00 	vldr	s15, [r3]
 80043f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004400:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8004448 <IVK+0x3d90>
 8004404:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 8004408:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8004450 <IVK+0x3d98>
 800440c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004410:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8004440 <IVK+0x3d88>
 8004414:	ee37 7b46 	vsub.f64	d7, d7, d6
					190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 8004418:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8004468 <IVK+0x3db0>
 800441c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004420:	eeb0 0b47 	vmov.f64	d0, d7
 8004424:	f00f fa20 	bl	8013868 <sin>
 8004428:	eeb0 7b40 	vmov.f64	d7, d0
 800442c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004470 <IVK+0x3db8>
 8004430:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3304      	adds	r3, #4
 8004438:	ed93 7a00 	vldr	s14, [r3]
 800443c:	e030      	b.n	80044a0 <IVK+0x3de8>
 800443e:	bf00      	nop
 8004440:	05532618 	.word	0x05532618
 8004444:	3fe792a3 	.word	0x3fe792a3
 8004448:	45a1cac1 	.word	0x45a1cac1
 800444c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004450:	39581062 	.word	0x39581062
 8004454:	3fecc8b4 	.word	0x3fecc8b4
 8004458:	28f5c28f 	.word	0x28f5c28f
 800445c:	410b0efc 	.word	0x410b0efc
 8004460:	0664d3c0 	.word	0x0664d3c0
 8004464:	4143dbcd 	.word	0x4143dbcd
 8004468:	19ce075f 	.word	0x19ce075f
 800446c:	3ff85a51 	.word	0x3ff85a51
 8004470:	f5c28f5d 	.word	0xf5c28f5d
 8004474:	410738b0 	.word	0x410738b0
 8004478:	66666666 	.word	0x66666666
 800447c:	40fe10a6 	.word	0x40fe10a6
 8004480:	39581062 	.word	0x39581062
 8004484:	3fecc8b4 	.word	0x3fecc8b4
 8004488:	05532618 	.word	0x05532618
 800448c:	3fe792a3 	.word	0x3fe792a3
 8004490:	eaa8eb47 	.word	0xeaa8eb47
 8004494:	413610aa 	.word	0x413610aa
 8004498:	45a1cac1 	.word	0x45a1cac1
 800449c:	3ffaf3b6 	.word	0x3ffaf3b6
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3308      	adds	r3, #8
 80044a4:	edd3 7a00 	vldr	s15, [r3]
 80044a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044b0:	ed1f 6b07 	vldr	d6, [pc, #-28]	; 8004498 <IVK+0x3de0>
 80044b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044b8:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8004480 <IVK+0x3dc8>
 80044bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044c0:	eeb0 0b47 	vmov.f64	d0, d7
 80044c4:	f00f f97c 	bl	80137c0 <cos>
 80044c8:	eeb0 7b40 	vmov.f64	d7, d0
 80044cc:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.8995) * sin(q[1] + 1.6845) * sin(q[0])) - 190230.12000000002 * sin
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3304      	adds	r3, #4
 80044d4:	edd3 7a00 	vldr	s15, [r3]
 80044d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044dc:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 8004498 <IVK+0x3de0>
 80044e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044e4:	eeb0 0b47 	vmov.f64	d0, d7
 80044e8:	f00f f9be 	bl	8013868 <sin>
 80044ec:	eeb0 7b40 	vmov.f64	d7, d0
 80044f0:	ee29 9b07 	vmul.f64	d9, d9, d7
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044fe:	eeb0 0b47 	vmov.f64	d0, d7
 8004502:	f00f f9b1 	bl	8013868 <sin>
 8004506:	eeb0 7b40 	vmov.f64	d7, d0
 800450a:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) +
 800450e:	ee38 8b07 	vadd.f64	d8, d8, d7
				   ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3304      	adds	r3, #4
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3308      	adds	r3, #8
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800452a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800452e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	330c      	adds	r3, #12
 8004536:	edd3 7a00 	vldr	s15, [r3]
 800453a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800453e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004542:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8004498 <IVK+0x3de0>
 8004546:	ee37 7b06 	vadd.f64	d7, d7, d6
 800454a:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8004480 <IVK+0x3dc8>
 800454e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004552:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8004488 <IVK+0x3dd0>
 8004556:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) * sin(q[1] + 1.6845) * sin(q[0])) - 190230.12000000002 * sin
 800455a:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8004468 <IVK+0x3db0>
 800455e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004562:	eeb0 0b47 	vmov.f64	d0, d7
 8004566:	f00f f97f 	bl	8013868 <sin>
 800456a:	eeb0 7b40 	vmov.f64	d7, d0
 800456e:	ed1f 6b40 	vldr	d6, [pc, #-256]	; 8004470 <IVK+0x3db8>
 8004572:	ee27 9b06 	vmul.f64	d9, d7, d6
					 -0.73665) + 1.52205) * sin(((q[1] + q[2]) + 1.6845) +
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3304      	adds	r3, #4
 800457a:	ed93 7a00 	vldr	s14, [r3]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3308      	adds	r3, #8
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800458e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8004498 <IVK+0x3de0>
 8004592:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004596:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 8004480 <IVK+0x3dc8>
 800459a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800459e:	eeb0 0b47 	vmov.f64	d0, d7
 80045a2:	f00f f961 	bl	8013868 <sin>
 80045a6:	eeb0 7b40 	vmov.f64	d7, d0
 80045aa:	ee29 9b07 	vmul.f64	d9, d9, d7
			  -0.8995) * cos(q[1] + 1.6845) * sin(q[0]))) / d;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3304      	adds	r3, #4
 80045b2:	edd3 7a00 	vldr	s15, [r3]
 80045b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045ba:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8004498 <IVK+0x3de0>
 80045be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045c2:	eeb0 0b47 	vmov.f64	d0, d7
 80045c6:	f00f f8fb 	bl	80137c0 <cos>
 80045ca:	eeb0 7b40 	vmov.f64	d7, d0
 80045ce:	ee29 9b07 	vmul.f64	d9, d9, d7
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045dc:	eeb0 0b47 	vmov.f64	d0, d7
 80045e0:	f00f f942 	bl	8013868 <sin>
 80045e4:	eeb0 7b40 	vmov.f64	d7, d0
 80045e8:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) * sin(q[1] + 1.6845) * sin(q[0])) - 190230.12000000002 * sin
 80045ec:	ee38 7b47 	vsub.f64	d7, d8, d7
	dv[4] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 80045f0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80045f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045f8:	eeb1 5b47 	vneg.f64	d5, d7
			  -0.8995) * cos(q[1] + 1.6845) * sin(q[0]))) / d;
 80045fc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004600:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004604:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004608:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[4] = -(4.0 * (((((((((((((((123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845)
 800460c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dv[9] = 4.0 * (((((((((((((((123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3304      	adds	r3, #4
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3308      	adds	r3, #8
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004628:	ee37 7b07 	vadd.f64	d7, d7, d7
 800462c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004630:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8004498 <IVK+0x3de0>
 8004634:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004638:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004480 <IVK+0x3dc8>
 800463c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004640:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004488 <IVK+0x3dd0>
 8004644:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004648:	eeb0 0b47 	vmov.f64	d0, d7
 800464c:	f00f f8b8 	bl	80137c0 <cos>
 8004650:	eeb0 7b40 	vmov.f64	d7, d0
 8004654:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8004478 <IVK+0x3dc0>
 8004658:	ee27 8b06 	vmul.f64	d8, d7, d6
	-0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3304      	adds	r3, #4
 8004660:	ed93 7a00 	vldr	s14, [r3]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3308      	adds	r3, #8
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004674:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8004498 <IVK+0x3de0>
 8004678:	ee37 7b06 	vadd.f64	d7, d7, d6
 800467c:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004480 <IVK+0x3dc8>
 8004680:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004684:	eeb0 0b47 	vmov.f64	d0, d7
 8004688:	f00f f8ee 	bl	8013868 <sin>
 800468c:	eeb0 7b40 	vmov.f64	d7, d0
 8004690:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800469e:	eeb0 0b47 	vmov.f64	d0, d7
 80046a2:	f00f f8e1 	bl	8013868 <sin>
 80046a6:	eeb0 7b40 	vmov.f64	d7, d0
 80046aa:	ee28 8b07 	vmul.f64	d8, d8, d7
	123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * cos
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3304      	adds	r3, #4
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3308      	adds	r3, #8
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80046ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046ce:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8004498 <IVK+0x3de0>
 80046d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046d6:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8004480 <IVK+0x3dc8>
 80046da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046de:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8004488 <IVK+0x3dd0>
 80046e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046e6:	eeb0 0b47 	vmov.f64	d0, d7
 80046ea:	f00f f8bd 	bl	8013868 <sin>
 80046ee:	eeb0 7b40 	vmov.f64	d7, d0
 80046f2:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8004478 <IVK+0x3dc0>
 80046f6:	ee27 9b06 	vmul.f64	d9, d7, d6
	(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) + 1.4460589166400002E+6 *
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	ed93 7a00 	vldr	s14, [r3]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3308      	adds	r3, #8
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004712:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8004498 <IVK+0x3de0>
 8004716:	ee37 7b06 	vadd.f64	d7, d7, d6
	123146.4 * sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * cos
 800471a:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8004480 <IVK+0x3dc8>
 800471e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004722:	eeb0 0b47 	vmov.f64	d0, d7
 8004726:	f00f f84b 	bl	80137c0 <cos>
 800472a:	eeb0 7b40 	vmov.f64	d7, d0
 800472e:	ee29 9b07 	vmul.f64	d9, d9, d7
	(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) + 1.4460589166400002E+6 *
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800473c:	eeb0 0b47 	vmov.f64	d0, d7
 8004740:	f00f f892 	bl	8013868 <sin>
 8004744:	eeb0 7b40 	vmov.f64	d7, d0
 8004748:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 800474c:	ee38 8b47 	vsub.f64	d8, d8, d7
	cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] +
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3308      	adds	r3, #8
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004768:	ee37 7b07 	vadd.f64	d7, d7, d7
 800476c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004770:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 8004498 <IVK+0x3de0>
 8004774:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004778:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8004480 <IVK+0x3dc8>
 800477c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004780:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8004488 <IVK+0x3dd0>
 8004784:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004788:	eeb0 0b47 	vmov.f64	d0, d7
 800478c:	f00f f818 	bl	80137c0 <cos>
 8004790:	eeb0 7b40 	vmov.f64	d7, d0
	(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) + 1.4460589166400002E+6 *
 8004794:	ed1f 6bc2 	vldr	d6, [pc, #-776]	; 8004490 <IVK+0x3dd8>
 8004798:	ee27 9b06 	vmul.f64	d9, d7, d6
	cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] +
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3304      	adds	r3, #4
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047a8:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8004498 <IVK+0x3de0>
 80047ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b0:	eeb0 0b47 	vmov.f64	d0, d7
 80047b4:	f00f f858 	bl	8013868 <sin>
 80047b8:	eeb0 7b40 	vmov.f64	d7, d0
 80047bc:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) * sin(q[0])) - 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	edd3 7a00 	vldr	s15, [r3]
 80047c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047ca:	eeb0 0b47 	vmov.f64	d0, d7
 80047ce:	f00f f84b 	bl	8013868 <sin>
 80047d2:	eeb0 7b40 	vmov.f64	d7, d0
 80047d6:	ee29 7b07 	vmul.f64	d7, d9, d7
	(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) + 1.4460589166400002E+6 *
 80047da:	ee38 8b07 	vadd.f64	d8, d8, d7
	1.6845) * sin(q[0])) - 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3304      	adds	r3, #4
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3308      	adds	r3, #8
 80047ee:	edd3 7a00 	vldr	s15, [r3]
 80047f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80047fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047fe:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8004498 <IVK+0x3de0>
 8004802:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) + d1) +
 8004806:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004480 <IVK+0x3dc8>
 800480a:	ee37 7b46 	vsub.f64	d7, d7, d6
	1.6845) * sin(q[0])) - 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 800480e:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004488 <IVK+0x3dd0>
 8004812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004816:	eeb0 0b47 	vmov.f64	d0, d7
 800481a:	f00f f825 	bl	8013868 <sin>
 800481e:	eeb0 7b40 	vmov.f64	d7, d0
 8004822:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8004490 <IVK+0x3dd8>
 8004826:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) + d1) +
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004836:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8004498 <IVK+0x3de0>
 800483a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800483e:	eeb0 0b47 	vmov.f64	d0, d7
 8004842:	f00e ffbd 	bl	80137c0 <cos>
 8004846:	eeb0 7b40 	vmov.f64	d7, d0
 800484a:	ee29 9b07 	vmul.f64	d9, d9, d7
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004858:	eeb0 0b47 	vmov.f64	d0, d7
 800485c:	f00f f804 	bl	8013868 <sin>
 8004860:	eeb0 7b40 	vmov.f64	d7, d0
 8004864:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) * sin(q[0])) - 1.4460589166400002E+6 * sin((((q[1] + 2.0 * q[2]) +
 8004868:	ee38 6b47 	vsub.f64	d6, d8, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) + d1) +
 800486c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004874:	ee36 8b07 	vadd.f64	d8, d6, d7
	105683.40000000001 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] +
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3304      	adds	r3, #4
 800487c:	ed93 7a00 	vldr	s14, [r3]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3308      	adds	r3, #8
 8004884:	edd3 7a00 	vldr	s15, [r3]
 8004888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004890:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8004c50 <IVK+0x4598>
 8004894:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004898:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8004c58 <IVK+0x45a0>
 800489c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048a0:	eeb0 0b47 	vmov.f64	d0, d7
 80048a4:	f00e ff8c 	bl	80137c0 <cos>
 80048a8:	eeb0 7b40 	vmov.f64	d7, d0
 80048ac:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8004c60 <IVK+0x45a8>
 80048b0:	ee27 9b06 	vmul.f64	d9, d7, d6
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3304      	adds	r3, #4
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048c0:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8004c50 <IVK+0x4598>
 80048c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048c8:	eeb0 0b47 	vmov.f64	d0, d7
 80048cc:	f00e ffcc 	bl	8013868 <sin>
 80048d0:	eeb0 7b40 	vmov.f64	d7, d0
 80048d4:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) * sin(q[0])) - 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048e2:	eeb0 0b47 	vmov.f64	d0, d7
 80048e6:	f00e ffbf 	bl	8013868 <sin>
 80048ea:	eeb0 7b40 	vmov.f64	d7, d0
 80048ee:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * sin(q[0])) + d1) +
 80048f2:	ee38 8b07 	vadd.f64	d8, d8, d7
	1.6845) * sin(q[0])) - 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3304      	adds	r3, #4
 80048fa:	ed93 7a00 	vldr	s14, [r3]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3308      	adds	r3, #8
 8004902:	edd3 7a00 	vldr	s15, [r3]
 8004906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800490e:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8004c50 <IVK+0x4598>
 8004912:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004916:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8004c58 <IVK+0x45a0>
 800491a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800491e:	eeb0 0b47 	vmov.f64	d0, d7
 8004922:	f00e ffa1 	bl	8013868 <sin>
 8004926:	eeb0 7b40 	vmov.f64	d7, d0
 800492a:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8004c60 <IVK+0x45a8>
 800492e:	ee27 9b06 	vmul.f64	d9, d7, d6
	-0.8995) * cos(q[1] + 1.6845) * sin(q[0])) + d2) + 78840.0 * cos((((((q[1] +
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3304      	adds	r3, #4
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800493e:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8004c50 <IVK+0x4598>
 8004942:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004946:	eeb0 0b47 	vmov.f64	d0, d7
 800494a:	f00e ff39 	bl	80137c0 <cos>
 800494e:	eeb0 7b40 	vmov.f64	d7, d0
 8004952:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004960:	eeb0 0b47 	vmov.f64	d0, d7
 8004964:	f00e ff80 	bl	8013868 <sin>
 8004968:	eeb0 7b40 	vmov.f64	d7, d0
 800496c:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) * sin(q[0])) - 105683.40000000001 * sin(((q[1] + q[2]) + 1.6845) +
 8004970:	ee38 6b47 	vsub.f64	d6, d8, d7
	-0.8995) * cos(q[1] + 1.6845) * sin(q[0])) + d2) + 78840.0 * cos((((((q[1] +
 8004974:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004978:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800497c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3304      	adds	r3, #4
 8004984:	edd3 7a00 	vldr	s15, [r3]
 8004988:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3308      	adds	r3, #8
 8004990:	edd3 7a00 	vldr	s15, [r3]
 8004994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004998:	ee37 7b07 	vadd.f64	d7, d7, d7
	-0.8995) * cos(q[1] + 1.6845) * sin(q[0])) + d2) + 78840.0 * cos((((((q[1] +
 800499c:	ee36 6b07 	vadd.f64	d6, d6, d7
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	330c      	adds	r3, #12
 80049a4:	edd3 7a00 	vldr	s15, [r3]
 80049a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049b0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c50 <IVK+0x4598>
 80049b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049b8:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c58 <IVK+0x45a0>
 80049bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80049c0:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8004c98 <IVK+0x45e0>
 80049c4:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) * cos(q[1] + 1.6845) * sin(q[0])) + d2) + 78840.0 * cos((((((q[1] +
 80049c8:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8004c90 <IVK+0x45d8>
 80049cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049d0:	eeb0 0b47 	vmov.f64	d0, d7
 80049d4:	f00e fef4 	bl	80137c0 <cos>
 80049d8:	eeb0 7b40 	vmov.f64	d7, d0
 80049dc:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004c68 <IVK+0x45b0>
 80049e0:	ee27 9b06 	vmul.f64	d9, d7, d6
						((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3304      	adds	r3, #4
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3308      	adds	r3, #8
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	330c      	adds	r3, #12
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a14:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004c50 <IVK+0x4598>
 8004a18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a1c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004c58 <IVK+0x45a0>
 8004a20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a24:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 8004c98 <IVK+0x45e0>
 8004a28:	ee37 7b46 	vsub.f64	d7, d7, d6
	2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin
 8004a2c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8004c90 <IVK+0x45d8>
 8004a30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a34:	eeb0 0b47 	vmov.f64	d0, d7
 8004a38:	f00e ff16 	bl	8013868 <sin>
 8004a3c:	eeb0 7b40 	vmov.f64	d7, d0
 8004a40:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3304      	adds	r3, #4
 8004a48:	ed93 7a00 	vldr	s14, [r3]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a5c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004c50 <IVK+0x4598>
 8004a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a64:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004c58 <IVK+0x45a0>
 8004a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a6c:	eeb0 0b47 	vmov.f64	d0, d7
 8004a70:	f00e fea6 	bl	80137c0 <cos>
 8004a74:	eeb0 7b40 	vmov.f64	d7, d0
 8004a78:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	edd3 7a00 	vldr	s15, [r3]
 8004a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a86:	eeb0 0b47 	vmov.f64	d0, d7
 8004a8a:	f00e fe99 	bl	80137c0 <cos>
 8004a8e:	eeb0 7b40 	vmov.f64	d7, d0
 8004a92:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) * cos(q[1] + 1.6845) * sin(q[0])) + d2) + 78840.0 * cos((((((q[1] +
 8004a96:	ee38 8b07 	vadd.f64	d8, d8, d7
					   + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) + q[3])
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ab6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	330c      	adds	r3, #12
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q[2]) +
 8004aca:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004c50 <IVK+0x4598>
 8004ace:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ad2:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004c58 <IVK+0x45a0>
 8004ad6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ada:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8004c98 <IVK+0x45e0>
 8004ade:	ee37 7b46 	vsub.f64	d7, d7, d6
					   + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) + q[3])
 8004ae2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8004c90 <IVK+0x45d8>
 8004ae6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004aea:	eeb0 0b47 	vmov.f64	d0, d7
 8004aee:	f00e fe67 	bl	80137c0 <cos>
 8004af2:	eeb0 7b40 	vmov.f64	d7, d0
 8004af6:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8004c70 <IVK+0x45b8>
 8004afa:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q[2]) +
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b16:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) * cos
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	330c      	adds	r3, #12
 8004b22:	edd3 7a00 	vldr	s15, [r3]
 8004b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q[2]) +
 8004b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) * cos
 8004b2e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c50 <IVK+0x4598>
 8004b32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b36:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c58 <IVK+0x45a0>
 8004b3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b3e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8004c98 <IVK+0x45e0>
 8004b42:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((((q[1] + 2.0 * q[2]) +
 8004b46:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8004c90 <IVK+0x45d8>
 8004b4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b4e:	eeb0 0b47 	vmov.f64	d0, d7
 8004b52:	f00e fe89 	bl	8013868 <sin>
 8004b56:	eeb0 7b40 	vmov.f64	d7, d0
 8004b5a:	ee29 9b07 	vmul.f64	d9, d9, d7
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) * cos
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3304      	adds	r3, #4
 8004b62:	edd3 7a00 	vldr	s15, [r3]
 8004b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b6a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004c50 <IVK+0x4598>
 8004b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b72:	eeb0 0b47 	vmov.f64	d0, d7
 8004b76:	f00e fe23 	bl	80137c0 <cos>
 8004b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8004b7e:	ee29 9b07 	vmul.f64	d9, d9, d7
					   (q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	edd3 7a00 	vldr	s15, [r3]
	q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(q[1] + 1.6845) * cos
 8004b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b8c:	eeb0 0b47 	vmov.f64	d0, d7
 8004b90:	f00e fe16 	bl	80137c0 <cos>
 8004b94:	eeb0 7b40 	vmov.f64	d7, d0
 8004b98:	ee29 7b07 	vmul.f64	d7, d9, d7
					   + 925786.58400000015 * cos((((((q[1] + 2.0 * q[2]) + q[3])
 8004b9c:	ee38 8b07 	vadd.f64	d8, d8, d7
					   (q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004bbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bcc:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) +
 8004bd0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004c50 <IVK+0x4598>
 8004bd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bd8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004c58 <IVK+0x45a0>
 8004bdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004be0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8004c98 <IVK+0x45e0>
 8004be4:	ee37 7b46 	vsub.f64	d7, d7, d6
					   (q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004be8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004c90 <IVK+0x45d8>
 8004bec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8004bf4:	f00e fe38 	bl	8013868 <sin>
 8004bf8:	eeb0 7b40 	vmov.f64	d7, d0
 8004bfc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8004c78 <IVK+0x45c0>
 8004c00:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) +
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3304      	adds	r3, #4
 8004c08:	edd3 7a00 	vldr	s15, [r3]
 8004c0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3308      	adds	r3, #8
 8004c14:	edd3 7a00 	vldr	s15, [r3]
 8004c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c24:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004c50 <IVK+0x4598>
 8004c28:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004c2c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004c58 <IVK+0x45a0>
 8004c30:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] + 2.0 * q[2]) +
 8004c34:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004c98 <IVK+0x45e0>
 8004c38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c40:	f00e fdbe 	bl	80137c0 <cos>
 8004c44:	eeb0 7b40 	vmov.f64	d7, d0
 8004c48:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004c4c:	e030      	b.n	8004cb0 <IVK+0x45f8>
 8004c4e:	bf00      	nop
 8004c50:	45a1cac1 	.word	0x45a1cac1
 8004c54:	3ffaf3b6 	.word	0x3ffaf3b6
 8004c58:	39581062 	.word	0x39581062
 8004c5c:	3fecc8b4 	.word	0x3fecc8b4
 8004c60:	66666667 	.word	0x66666667
 8004c64:	40f9cd36 	.word	0x40f9cd36
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	40f33f80 	.word	0x40f33f80
 8004c70:	2b020c4b 	.word	0x2b020c4b
 8004c74:	412c40b5 	.word	0x412c40b5
 8004c78:	28f5c28f 	.word	0x28f5c28f
 8004c7c:	410b0efc 	.word	0x410b0efc
 8004c80:	0664d3c0 	.word	0x0664d3c0
 8004c84:	4143dbcd 	.word	0x4143dbcd
 8004c88:	39581062 	.word	0x39581062
 8004c8c:	3fecc8b4 	.word	0x3fecc8b4
 8004c90:	19ce075f 	.word	0x19ce075f
 8004c94:	3ff85a51 	.word	0x3ff85a51
 8004c98:	05532618 	.word	0x05532618
 8004c9c:	3fe792a3 	.word	0x3fe792a3
 8004ca0:	f5c28f5d 	.word	0xf5c28f5d
 8004ca4:	410738b0 	.word	0x410738b0
 8004ca8:	45a1cac1 	.word	0x45a1cac1
 8004cac:	3ffaf3b6 	.word	0x3ffaf3b6
	1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	ed93 7a00 	vldr	s14, [r3]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3308      	adds	r3, #8
 8004cbc:	edd3 7a00 	vldr	s15, [r3]
 8004cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cc8:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8004ca8 <IVK+0x45f0>
 8004ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cd0:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8004c88 <IVK+0x45d0>
 8004cd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cdc:	f00e fdc4 	bl	8013868 <sin>
 8004ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ce4:	ee29 9b07 	vmul.f64	d9, d9, d7
					  cos(q[0])) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	edd3 7a00 	vldr	s15, [r3]
 8004cee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cf2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cf6:	f00e fd63 	bl	80137c0 <cos>
 8004cfa:	eeb0 7b40 	vmov.f64	d7, d0
	1.6845) + -0.8995) + -0.73665) * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004cfe:	ee29 7b07 	vmul.f64	d7, d9, d7
					   (q[0])) + 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004d02:	ee38 8b07 	vadd.f64	d8, d8, d7
					  cos(q[0])) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3308      	adds	r3, #8
 8004d16:	edd3 7a00 	vldr	s15, [r3]
 8004d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	edd3 7a00 	vldr	s15, [r3]
 8004d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d32:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004d36:	ed1f 6b24 	vldr	d6, [pc, #-144]	; 8004ca8 <IVK+0x45f0>
 8004d3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d3e:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8004c88 <IVK+0x45d0>
 8004d42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d46:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004c98 <IVK+0x45e0>
 8004d4a:	ee37 7b46 	vsub.f64	d7, d7, d6
					  cos(q[0])) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004d4e:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8004c90 <IVK+0x45d8>
 8004d52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d56:	eeb0 0b47 	vmov.f64	d0, d7
 8004d5a:	f00e fd85 	bl	8013868 <sin>
 8004d5e:	eeb0 7b40 	vmov.f64	d7, d0
 8004d62:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8004c78 <IVK+0x45c0>
 8004d66:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	edd3 7a00 	vldr	s15, [r3]
 8004d72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	edd3 7a00 	vldr	s15, [r3]
 8004d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d8a:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8004ca8 <IVK+0x45f0>
 8004d8e:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004d92:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8004c88 <IVK+0x45d0>
 8004d96:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004d9a:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8004c98 <IVK+0x45e0>
 8004d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004da2:	eeb0 0b47 	vmov.f64	d0, d7
 8004da6:	f00e fd5f 	bl	8013868 <sin>
 8004daa:	eeb0 7b40 	vmov.f64	d7, d0
 8004dae:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3304      	adds	r3, #4
 8004db6:	ed93 7a00 	vldr	s14, [r3]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	edd3 7a00 	vldr	s15, [r3]
 8004dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dca:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8004ca8 <IVK+0x45f0>
 8004dce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dd2:	ed1f 6b53 	vldr	d6, [pc, #-332]	; 8004c88 <IVK+0x45d0>
 8004dd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004dda:	eeb0 0b47 	vmov.f64	d0, d7
 8004dde:	f00e fcef 	bl	80137c0 <cos>
 8004de2:	eeb0 7b40 	vmov.f64	d7, d0
 8004de6:	ee29 9b07 	vmul.f64	d9, d9, d7
					 cos(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	edd3 7a00 	vldr	s15, [r3]
 8004df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004df4:	eeb0 0b47 	vmov.f64	d0, d7
 8004df8:	f00e fce2 	bl	80137c0 <cos>
 8004dfc:	eeb0 7b40 	vmov.f64	d7, d0
	1.6845) + -0.8995) + -0.73665) * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004e00:	ee29 7b07 	vmul.f64	d7, d9, d7
					  cos(q[0])) - 221663.52 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004e04:	ee38 8b47 	vsub.f64	d8, d8, d7
					 cos(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	edd3 7a00 	vldr	s15, [r3]
 8004e10:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3308      	adds	r3, #8
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					 cos(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 8004e20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e24:	ee36 6b07 	vadd.f64	d6, d6, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	edd3 7a00 	vldr	s15, [r3]
 8004e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e38:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8004ca8 <IVK+0x45f0>
 8004e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e40:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004c88 <IVK+0x45d0>
 8004e44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e48:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 8004c98 <IVK+0x45e0>
 8004e4c:	ee37 7b46 	vsub.f64	d7, d7, d6
					 cos(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 8004e50:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 8004c90 <IVK+0x45d8>
 8004e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e58:	eeb0 0b47 	vmov.f64	d0, d7
 8004e5c:	f00e fd04 	bl	8013868 <sin>
 8004e60:	eeb0 7b40 	vmov.f64	d7, d0
 8004e64:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8004c80 <IVK+0x45c8>
 8004e68:	ee27 9b06 	vmul.f64	d9, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	edd3 7a00 	vldr	s15, [r3]
 8004e74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * cos(q[0]))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e84:	ee37 7b07 	vadd.f64	d7, d7, d7
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004e88:	ee36 7b07 	vadd.f64	d7, d6, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * cos(q[0]))
 8004e8c:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8004ca8 <IVK+0x45f0>
 8004e90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e94:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8004c88 <IVK+0x45d0>
 8004e98:	ee37 7b46 	vsub.f64	d7, d7, d6
	q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205) * cos((((q[1] +
 8004e9c:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8004c98 <IVK+0x45e0>
 8004ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ea4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ea8:	f00e fc8a 	bl	80137c0 <cos>
 8004eac:	eeb0 7b40 	vmov.f64	d7, d0
 8004eb0:	ee29 9b07 	vmul.f64	d9, d9, d7
	2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) * sin(q[1] + 1.6845) * cos(q[0]))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	edd3 7a00 	vldr	s15, [r3]
 8004ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ec0:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8004ca8 <IVK+0x45f0>
 8004ec4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ec8:	eeb0 0b47 	vmov.f64	d0, d7
 8004ecc:	f00e fccc 	bl	8013868 <sin>
 8004ed0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ed4:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	edd3 7a00 	vldr	s15, [r3]
 8004ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8004ee6:	f00e fc6b 	bl	80137c0 <cos>
 8004eea:	eeb0 7b40 	vmov.f64	d7, d0
 8004eee:	ee29 7b07 	vmul.f64	d7, d9, d7
					 cos(q[0])) + 2.6029060499520004E+6 * sin((((((q[1] + 2.0 *
 8004ef2:	ee38 8b07 	vadd.f64	d8, d8, d7
				   - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	edd3 7a00 	vldr	s15, [r3]
 8004efe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3308      	adds	r3, #8
 8004f06:	edd3 7a00 	vldr	s15, [r3]
 8004f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f12:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	edd3 7a00 	vldr	s15, [r3]
 8004f1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f22:	ee36 7b07 	vadd.f64	d7, d6, d7
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004f26:	ed1f 6ba0 	vldr	d6, [pc, #-640]	; 8004ca8 <IVK+0x45f0>
 8004f2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f2e:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8004c88 <IVK+0x45d0>
 8004f32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f36:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8004c98 <IVK+0x45e0>
 8004f3a:	ee37 7b46 	vsub.f64	d7, d7, d6
				   - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004f3e:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8004c90 <IVK+0x45d8>
 8004f42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f46:	eeb0 0b47 	vmov.f64	d0, d7
 8004f4a:	f00e fc8d 	bl	8013868 <sin>
 8004f4e:	eeb0 7b40 	vmov.f64	d7, d0
 8004f52:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8004c80 <IVK+0x45c8>
 8004f56:	ee27 9b06 	vmul.f64	d9, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f7a:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8004ca8 <IVK+0x45f0>
 8004f7e:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) +
 8004f82:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8004c88 <IVK+0x45d0>
 8004f86:	ee37 7b46 	vsub.f64	d7, d7, d6
	+ 1.6845) + -0.8995) + -0.73665) + 1.52205) * sin((((q[1] + 2.0 * q[2]) +
 8004f8a:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8004c98 <IVK+0x45e0>
 8004f8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f92:	eeb0 0b47 	vmov.f64	d0, d7
 8004f96:	f00e fc67 	bl	8013868 <sin>
 8004f9a:	eeb0 7b40 	vmov.f64	d7, d0
 8004f9e:	ee29 9b07 	vmul.f64	d9, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) +
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	edd3 7a00 	vldr	s15, [r3]
 8004faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fae:	ed1f 6bc2 	vldr	d6, [pc, #-776]	; 8004ca8 <IVK+0x45f0>
 8004fb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fb6:	eeb0 0b47 	vmov.f64	d0, d7
 8004fba:	f00e fc01 	bl	80137c0 <cos>
 8004fbe:	eeb0 7b40 	vmov.f64	d7, d0
 8004fc2:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	edd3 7a00 	vldr	s15, [r3]
 8004fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fd0:	eeb0 0b47 	vmov.f64	d0, d7
 8004fd4:	f00e fbf4 	bl	80137c0 <cos>
 8004fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8004fdc:	ee29 7b07 	vmul.f64	d7, d9, d7
				   - 2.6029060499520004E+6 * sin((((((q[1] + 2.0 * q[2]) + q[3])
 8004fe0:	ee38 8b47 	vsub.f64	d8, d8, d7
				  190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	edd3 7a00 	vldr	s15, [r3]
 8004fec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	edd3 7a00 	vldr	s15, [r3]
 8004ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ffc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005000:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	330c      	adds	r3, #12
 8005008:	edd3 7a00 	vldr	s15, [r3]
 800500c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005010:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005014:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 8004ca8 <IVK+0x45f0>
 8005018:	ee37 7b06 	vadd.f64	d7, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 800501c:	ed1f 6be6 	vldr	d6, [pc, #-920]	; 8004c88 <IVK+0x45d0>
 8005020:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005024:	ed1f 6be4 	vldr	d6, [pc, #-912]	; 8004c98 <IVK+0x45e0>
 8005028:	ee37 7b46 	vsub.f64	d7, d7, d6
				  190230.12000000002 * sin((((((q[1] + 2.0 * q[2]) + q[3]) +
 800502c:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8004c90 <IVK+0x45d8>
 8005030:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005034:	eeb0 0b47 	vmov.f64	d0, d7
 8005038:	f00e fc16 	bl	8013868 <sin>
 800503c:	eeb0 7b40 	vmov.f64	d7, d0
 8005040:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8004ca0 <IVK+0x45e8>
 8005044:	ee27 9b06 	vmul.f64	d9, d7, d6
	1.6845) + -0.8995) + -0.73665) + 1.52205) * cos(((q[1] + q[2]) + 1.6845) +
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3304      	adds	r3, #4
 800504c:	ed93 7a00 	vldr	s14, [r3]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3308      	adds	r3, #8
 8005054:	edd3 7a00 	vldr	s15, [r3]
 8005058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800505c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005060:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8004ca8 <IVK+0x45f0>
 8005064:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005068:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 80053b0 <IVK+0x4cf8>
 800506c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005070:	eeb0 0b47 	vmov.f64	d0, d7
 8005074:	f00e fba4 	bl	80137c0 <cos>
 8005078:	eeb0 7b40 	vmov.f64	d7, d0
 800507c:	ee29 9b07 	vmul.f64	d9, d9, d7
	-0.8995) * sin(q[1] + 1.6845) * cos(q[0])) - 190230.12000000002 * sin
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3304      	adds	r3, #4
 8005084:	edd3 7a00 	vldr	s15, [r3]
 8005088:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800508c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80053b8 <IVK+0x4d00>
 8005090:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005094:	eeb0 0b47 	vmov.f64	d0, d7
 8005098:	f00e fbe6 	bl	8013868 <sin>
 800509c:	eeb0 7b40 	vmov.f64	d7, d0
 80050a0:	ee29 9b07 	vmul.f64	d9, d9, d7
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	edd3 7a00 	vldr	s15, [r3]
 80050aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050ae:	eeb0 0b47 	vmov.f64	d0, d7
 80050b2:	f00e fb85 	bl	80137c0 <cos>
 80050b6:	eeb0 7b40 	vmov.f64	d7, d0
 80050ba:	ee29 7b07 	vmul.f64	d7, d9, d7
	1.6845) + -0.8995) + -0.73665) * cos(q[1] + 1.6845) * cos(q[0])) +
 80050be:	ee38 8b07 	vadd.f64	d8, d8, d7
				 ((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3304      	adds	r3, #4
 80050c6:	edd3 7a00 	vldr	s15, [r3]
 80050ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3308      	adds	r3, #8
 80050d2:	edd3 7a00 	vldr	s15, [r3]
 80050d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	330c      	adds	r3, #12
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050f2:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 80053b8 <IVK+0x4d00>
 80050f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050fa:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80053b0 <IVK+0x4cf8>
 80050fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005102:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80053c0 <IVK+0x4d08>
 8005106:	ee37 7b46 	vsub.f64	d7, d7, d6
	-0.8995) * sin(q[1] + 1.6845) * cos(q[0])) - 190230.12000000002 * sin
 800510a:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80053c8 <IVK+0x4d10>
 800510e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005112:	eeb0 0b47 	vmov.f64	d0, d7
 8005116:	f00e fba7 	bl	8013868 <sin>
 800511a:	eeb0 7b40 	vmov.f64	d7, d0
 800511e:	ed9f 6bac 	vldr	d6, [pc, #688]	; 80053d0 <IVK+0x4d18>
 8005122:	ee27 9b06 	vmul.f64	d9, d7, d6
				   -0.73665) + 1.52205) * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3304      	adds	r3, #4
 800512a:	ed93 7a00 	vldr	s14, [r3]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3308      	adds	r3, #8
 8005132:	edd3 7a00 	vldr	s15, [r3]
 8005136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800513e:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 80053b8 <IVK+0x4d00>
 8005142:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005146:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 80053b0 <IVK+0x4cf8>
 800514a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800514e:	eeb0 0b47 	vmov.f64	d0, d7
 8005152:	f00e fb89 	bl	8013868 <sin>
 8005156:	eeb0 7b40 	vmov.f64	d7, d0
 800515a:	ee29 9b07 	vmul.f64	d9, d9, d7
				 * cos(q[1] + 1.6845) * cos(q[0])) / d;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3304      	adds	r3, #4
 8005162:	edd3 7a00 	vldr	s15, [r3]
 8005166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800516a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 80053b8 <IVK+0x4d00>
 800516e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005172:	eeb0 0b47 	vmov.f64	d0, d7
 8005176:	f00e fb23 	bl	80137c0 <cos>
 800517a:	eeb0 7b40 	vmov.f64	d7, d0
 800517e:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	edd3 7a00 	vldr	s15, [r3]
 8005188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800518c:	eeb0 0b47 	vmov.f64	d0, d7
 8005190:	f00e fb16 	bl	80137c0 <cos>
 8005194:	eeb0 7b40 	vmov.f64	d7, d0
 8005198:	ee29 7b07 	vmul.f64	d7, d9, d7
	-0.8995) * sin(q[1] + 1.6845) * cos(q[0])) - 190230.12000000002 * sin
 800519c:	ee38 7b47 	vsub.f64	d7, d8, d7
	dv[9] = 4.0 * (((((((((((((((123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 80051a0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80051a4:	ee27 5b06 	vmul.f64	d5, d7, d6
				 * cos(q[1] + 1.6845) * cos(q[0])) / d;
 80051a8:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80051ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80051b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[9] = 4.0 * (((((((((((((((123146.4 * cos((((q[1] + 2.0 * q[2]) + 1.6845) +
 80051b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	dv[14] = 4.0 * cos(q[0]) * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	edd3 7a00 	vldr	s15, [r3]
 80051c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051c6:	eeb0 0b47 	vmov.f64	d0, d7
 80051ca:	f00e faf9 	bl	80137c0 <cos>
 80051ce:	eeb0 7b40 	vmov.f64	d7, d0
 80051d2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80051d6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3304      	adds	r3, #4
 80051de:	ed93 7a00 	vldr	s14, [r3]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3308      	adds	r3, #8
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051f2:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80053b8 <IVK+0x4d00>
 80051f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051fa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80053b0 <IVK+0x4cf8>
 80051fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005202:	eeb0 0b47 	vmov.f64	d0, d7
 8005206:	f00e fadb 	bl	80137c0 <cos>
 800520a:	eeb0 7b40 	vmov.f64	d7, d0
 800520e:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80053d8 <IVK+0x4d20>
 8005212:	ee27 9b06 	vmul.f64	d9, d7, d6
	704.556 * cos(q[1] + 1.6845)) / d3;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3304      	adds	r3, #4
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005222:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80053b8 <IVK+0x4d00>
 8005226:	ee37 7b06 	vadd.f64	d7, d7, d6
 800522a:	eeb0 0b47 	vmov.f64	d0, d7
 800522e:	f00e fac7 	bl	80137c0 <cos>
 8005232:	eeb0 7b40 	vmov.f64	d7, d0
 8005236:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80053e0 <IVK+0x4d28>
 800523a:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[14] = 4.0 * cos(q[0]) * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800523e:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005242:	ee28 5b07 	vmul.f64	d5, d8, d7
	704.556 * cos(q[1] + 1.6845)) / d3;
 8005246:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800524a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800524e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005252:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[14] = 4.0 * cos(q[0]) * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8005256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	dv[19] = 4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3304      	adds	r3, #4
 800525e:	ed93 7a00 	vldr	s14, [r3]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3308      	adds	r3, #8
 8005266:	edd3 7a00 	vldr	s15, [r3]
 800526a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005272:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80053b8 <IVK+0x4d00>
 8005276:	ee37 7b06 	vadd.f64	d7, d7, d6
 800527a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80053b0 <IVK+0x4cf8>
 800527e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005282:	eeb0 0b47 	vmov.f64	d0, d7
 8005286:	f00e fa9b 	bl	80137c0 <cos>
 800528a:	eeb0 7b40 	vmov.f64	d7, d0
 800528e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80053d8 <IVK+0x4d20>
 8005292:	ee27 8b06 	vmul.f64	d8, d7, d6
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	edd3 7a00 	vldr	s15, [r3]
 800529c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052a0:	eeb0 0b47 	vmov.f64	d0, d7
 80052a4:	f00e fae0 	bl	8013868 <sin>
 80052a8:	eeb0 7b40 	vmov.f64	d7, d0
 80052ac:	ee28 8b07 	vmul.f64	d8, d8, d7
				  704.556 * cos(q[1] + 1.6845) * sin(q[0])) / d3;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3304      	adds	r3, #4
 80052b4:	edd3 7a00 	vldr	s15, [r3]
 80052b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052bc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80053b8 <IVK+0x4d00>
 80052c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052c4:	eeb0 0b47 	vmov.f64	d0, d7
 80052c8:	f00e fa7a 	bl	80137c0 <cos>
 80052cc:	eeb0 7b40 	vmov.f64	d7, d0
 80052d0:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80053e0 <IVK+0x4d28>
 80052d4:	ee27 9b06 	vmul.f64	d9, d7, d6
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	edd3 7a00 	vldr	s15, [r3]
 80052de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052e2:	eeb0 0b47 	vmov.f64	d0, d7
 80052e6:	f00e fabf 	bl	8013868 <sin>
 80052ea:	eeb0 7b40 	vmov.f64	d7, d0
 80052ee:	ee29 7b07 	vmul.f64	d7, d9, d7
	dv[19] = 4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80052f2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80052f6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80052fa:	ee27 5b06 	vmul.f64	d5, d7, d6
				  704.556 * cos(q[1] + 1.6845) * sin(q[0])) / d3;
 80052fe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005302:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800530a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[19] = 4.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 800530e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	dv[24] = 4.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) + 704.556 * sin
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3304      	adds	r3, #4
 8005316:	ed93 7a00 	vldr	s14, [r3]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3308      	adds	r3, #8
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005326:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800532a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80053b8 <IVK+0x4d00>
 800532e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005332:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80053b0 <IVK+0x4cf8>
 8005336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800533a:	eeb0 0b47 	vmov.f64	d0, d7
 800533e:	f00e fa93 	bl	8013868 <sin>
 8005342:	eeb0 7b40 	vmov.f64	d7, d0
 8005346:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80053d8 <IVK+0x4d20>
 800534a:	ee27 8b06 	vmul.f64	d8, d7, d6
				  (q[1] + 1.6845)) / d3;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	edd3 7a00 	vldr	s15, [r3]
 8005356:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	dv[24] = 4.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) + 704.556 * sin
 800535a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80053b8 <IVK+0x4d00>
 800535e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005362:	eeb0 0b47 	vmov.f64	d0, d7
 8005366:	f00e fa7f 	bl	8013868 <sin>
 800536a:	eeb0 7b40 	vmov.f64	d7, d0
 800536e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80053e0 <IVK+0x4d28>
 8005372:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005376:	ee38 7b07 	vadd.f64	d7, d8, d7
 800537a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800537e:	ee27 5b06 	vmul.f64	d5, d7, d6
				  (q[1] + 1.6845)) / d3;
 8005382:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005386:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800538a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800538e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dv[24] = 4.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) + 704.556 * sin
 8005392:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	for (i = 0; i < 5; i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800539c:	e05a      	b.n	8005454 <IVK+0x4d9c>
	d = 0.0;
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	for (i1 = 0; i1 < 5; i1++) {
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ac:	e03f      	b.n	800542e <IVK+0x4d76>
 80053ae:	bf00      	nop
 80053b0:	39581062 	.word	0x39581062
 80053b4:	3fecc8b4 	.word	0x3fecc8b4
 80053b8:	45a1cac1 	.word	0x45a1cac1
 80053bc:	3ffaf3b6 	.word	0x3ffaf3b6
 80053c0:	05532618 	.word	0x05532618
 80053c4:	3fe792a3 	.word	0x3fe792a3
 80053c8:	19ce075f 	.word	0x19ce075f
 80053cc:	3ff85a51 	.word	0x3ff85a51
 80053d0:	f5c28f5d 	.word	0xf5c28f5d
 80053d4:	410738b0 	.word	0x410738b0
 80053d8:	00000000 	.word	0x00000000
 80053dc:	404e0000 	.word	0x404e0000
 80053e0:	b020c49c 	.word	0xb020c49c
 80053e4:	40860472 	.word	0x40860472
	  d += dv[i + 5 * i1] * x_dot[i1];
 80053e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80053fe:	4413      	add	r3, r2
 8005400:	3bdc      	subs	r3, #220	; 0xdc
 8005402:	ed93 7a00 	vldr	s14, [r3]
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4413      	add	r3, r2
 8005410:	edd3 7a00 	vldr	s15, [r3]
 8005414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005418:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800541c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005420:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
	for (i1 = 0; i1 < 5; i1++) {
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005428:	3301      	adds	r3, #1
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	2b04      	cmp	r3, #4
 8005434:	ddd8      	ble.n	80053e8 <IVK+0x4d30>
	}

	m_dot_temp[i] = d;
 8005436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005440:	4413      	add	r3, r2
 8005442:	3b78      	subs	r3, #120	; 0x78
 8005444:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005448:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 800544a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800544e:	3301      	adds	r3, #1
 8005450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005454:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005458:	2b04      	cmp	r3, #4
 800545a:	dda0      	ble.n	800539e <IVK+0x4ce6>
	}
	memcpy(m_dot, m_dot_temp, sizeof(m_dot_temp));
 800545c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005460:	2214      	movs	r2, #20
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f00b fd5f 	bl	8010f28 <memcpy>
}
 800546a:	bf00      	nop
 800546c:	37f0      	adds	r7, #240	; 0xf0
 800546e:	46bd      	mov	sp, r7
 8005470:	ecbd 8b04 	vpop	{d8-d9}
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop

08005478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b090      	sub	sp, #64	; 0x40
 800547c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800547e:	f002 f8c1 	bl	8007604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005482:	f000 f86d 	bl	8005560 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005486:	f000 f8e5 	bl	8005654 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800548a:	f001 f873 	bl	8006574 <MX_GPIO_Init>
  MX_DMA_Init();
 800548e:	f001 f851 	bl	8006534 <MX_DMA_Init>
  MX_ADC1_Init();
 8005492:	f000 f90d 	bl	80056b0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8005496:	f000 f983 	bl	80057a0 <MX_ADC3_Init>
  MX_SPI3_Init();
 800549a:	f000 f9f1 	bl	8005880 <MX_SPI3_Init>
  MX_SPI4_Init();
 800549e:	f000 fa45 	bl	800592c <MX_SPI4_Init>
  MX_TIM1_Init();
 80054a2:	f000 fa99 	bl	80059d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80054a6:	f000 faf1 	bl	8005a8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80054aa:	f000 fb43 	bl	8005b34 <MX_TIM3_Init>
  MX_TIM4_Init();
 80054ae:	f000 fb97 	bl	8005be0 <MX_TIM4_Init>
  MX_TIM12_Init();
 80054b2:	f000 fbeb 	bl	8005c8c <MX_TIM12_Init>
  MX_TIM13_Init();
 80054b6:	f000 fc4d 	bl	8005d54 <MX_TIM13_Init>
  MX_TIM14_Init();
 80054ba:	f000 fc9b 	bl	8005df4 <MX_TIM14_Init>
  MX_TIM15_Init();
 80054be:	f000 fce9 	bl	8005e94 <MX_TIM15_Init>
  MX_TIM16_Init();
 80054c2:	f000 fd6f 	bl	8005fa4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80054c6:	f000 fde9 	bl	800609c <MX_TIM17_Init>
  MX_UART4_Init();
 80054ca:	f000 ff03 	bl	80062d4 <MX_UART4_Init>
  MX_UART5_Init();
 80054ce:	f000 ff4d 	bl	800636c <MX_UART5_Init>
  MX_USART2_UART_Init();
 80054d2:	f000 ff97 	bl	8006404 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80054d6:	f000 ffe1 	bl	800649c <MX_USART3_UART_Init>
  MX_TIM24_Init();
 80054da:	f000 feab 	bl	8006234 <MX_TIM24_Init>
  MX_TIM23_Init();
 80054de:	f000 fe59 	bl	8006194 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim24);
 80054e2:	481a      	ldr	r0, [pc, #104]	; (800554c <main+0xd4>)
 80054e4:	f009 f8ae 	bl	800e644 <HAL_TIM_Base_Start_IT>
  int tic = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  float q_eiei[5] = {1.0, 1.0, 1.0, 1.0, 1.0};
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <main+0xd8>)
 80054ee:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80054f2:	461d      	mov	r5, r3
 80054f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	6023      	str	r3, [r4, #0]
  float xxx[5] = {0.1, 0.1, 5, 5, 5};
 80054fc:	4b15      	ldr	r3, [pc, #84]	; (8005554 <main+0xdc>)
 80054fe:	f107 0414 	add.w	r4, r7, #20
 8005502:	461d      	mov	r5, r3
 8005504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	6023      	str	r3, [r4, #0]
  float ans[5] = {0.0};
 800550c:	463b      	mov	r3, r7
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (control_loop_en == 1){
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <main+0xe0>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d1fb      	bne.n	800551a <main+0xa2>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	480d      	ldr	r0, [pc, #52]	; (800555c <main+0xe4>)
 8005526:	f005 feca 	bl	800b2be <HAL_GPIO_TogglePin>
		  tic = HAL_GetTick();
 800552a:	f002 f8f1 	bl	8007710 <HAL_GetTick>
 800552e:	4603      	mov	r3, r0
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c
		  IVK(q_eiei,xxx,ans);
 8005532:	463a      	mov	r2, r7
 8005534:	f107 0114 	add.w	r1, r7, #20
 8005538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800553c:	4618      	mov	r0, r3
 800553e:	f7fb f8bb 	bl	80006b8 <IVK>
		  control_loop_en = 0;
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <main+0xe0>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
	  if (control_loop_en == 1){
 8005548:	e7e7      	b.n	800551a <main+0xa2>
 800554a:	bf00      	nop
 800554c:	2400020c 	.word	0x2400020c
 8005550:	08014428 	.word	0x08014428
 8005554:	0801443c 	.word	0x0801443c
 8005558:	240001fc 	.word	0x240001fc
 800555c:	58020400 	.word	0x58020400

08005560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b09c      	sub	sp, #112	; 0x70
 8005564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800556a:	224c      	movs	r2, #76	; 0x4c
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f00b fce8 	bl	8010f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	2220      	movs	r2, #32
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f00b fce2 	bl	8010f44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005580:	2002      	movs	r0, #2
 8005582:	f005 feb7 	bl	800b2f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005586:	2300      	movs	r3, #0
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <SystemClock_Config+0xec>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	4a2f      	ldr	r2, [pc, #188]	; (800564c <SystemClock_Config+0xec>)
 8005590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005594:	6193      	str	r3, [r2, #24]
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <SystemClock_Config+0xec>)
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80055a2:	bf00      	nop
 80055a4:	4b29      	ldr	r3, [pc, #164]	; (800564c <SystemClock_Config+0xec>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b0:	d1f8      	bne.n	80055a4 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80055b2:	4b27      	ldr	r3, [pc, #156]	; (8005650 <SystemClock_Config+0xf0>)
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	4a25      	ldr	r2, [pc, #148]	; (8005650 <SystemClock_Config+0xf0>)
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055cc:	2302      	movs	r3, #2
 80055ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055d0:	2302      	movs	r3, #2
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80055d4:	2302      	movs	r3, #2
 80055d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80055d8:	232c      	movs	r3, #44	; 0x2c
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80055dc:	2301      	movs	r3, #1
 80055de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80055e0:	2303      	movs	r3, #3
 80055e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80055e4:	2302      	movs	r3, #2
 80055e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80055e8:	230c      	movs	r3, #12
 80055ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f8:	4618      	mov	r0, r3
 80055fa:	f005 feb5 	bl	800b368 <HAL_RCC_OscConfig>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005604:	f001 f8d4 	bl	80067b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005608:	233f      	movs	r3, #63	; 0x3f
 800560a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800560c:	2303      	movs	r3, #3
 800560e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005614:	2308      	movs	r3, #8
 8005616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005624:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	2103      	movs	r1, #3
 800562e:	4618      	mov	r0, r3
 8005630:	f006 fa46 	bl	800bac0 <HAL_RCC_ClockConfig>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800563a:	f001 f8b9 	bl	80067b0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800563e:	f006 fbf5 	bl	800be2c <HAL_RCC_EnableCSS>
}
 8005642:	bf00      	nop
 8005644:	3770      	adds	r7, #112	; 0x70
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	58024800 	.word	0x58024800
 8005650:	58024400 	.word	0x58024400

08005654 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0ae      	sub	sp, #184	; 0xb8
 8005658:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	22b4      	movs	r2, #180	; 0xb4
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f00b fc6f 	bl	8010f44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005666:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800566a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800566c:	2302      	movs	r3, #2
 800566e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8005670:	230f      	movs	r3, #15
 8005672:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8005674:	2302      	movs	r3, #2
 8005676:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005678:	2302      	movs	r3, #2
 800567a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800567c:	2302      	movs	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8005680:	23c0      	movs	r3, #192	; 0xc0
 8005682:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005684:	2300      	movs	r3, #0
 8005686:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8005688:	f640 3386 	movw	r3, #2950	; 0xb86
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f006 fdca 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80056a2:	f001 f885 	bl	80067b0 <Error_Handler>
  }
}
 80056a6:	bf00      	nop
 80056a8:	37b8      	adds	r7, #184	; 0xb8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80056b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80056c2:	463b      	mov	r3, r7
 80056c4:	2224      	movs	r2, #36	; 0x24
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f00b fc3b 	bl	8010f44 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056d0:	4a31      	ldr	r2, [pc, #196]	; (8005798 <MX_ADC1_Init+0xe8>)
 80056d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80056d4:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80056e0:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056e6:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056e8:	2204      	movs	r2, #4
 80056ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80056ec:	4b29      	ldr	r3, [pc, #164]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80056f2:	4b28      	ldr	r3, [pc, #160]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80056f8:	4b26      	ldr	r3, [pc, #152]	; (8005794 <MX_ADC1_Init+0xe4>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80056fe:	4b25      	ldr	r3, [pc, #148]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005706:	4b23      	ldr	r3, [pc, #140]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005708:	2200      	movs	r2, #0
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <MX_ADC1_Init+0xe4>)
 800570e:	2200      	movs	r2, #0
 8005710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <MX_ADC1_Init+0xe4>)
 800571a:	2200      	movs	r2, #0
 800571c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800571e:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005720:	2200      	movs	r2, #0
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8005724:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800572c:	4819      	ldr	r0, [pc, #100]	; (8005794 <MX_ADC1_Init+0xe4>)
 800572e:	f002 fa83 	bl	8007c38 <HAL_ADC_Init>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005738:	f001 f83a 	bl	80067b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005744:	4619      	mov	r1, r3
 8005746:	4813      	ldr	r0, [pc, #76]	; (8005794 <MX_ADC1_Init+0xe4>)
 8005748:	f003 fd46 	bl	80091d8 <HAL_ADCEx_MultiModeConfigChannel>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005752:	f001 f82d 	bl	80067b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <MX_ADC1_Init+0xec>)
 8005758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800575a:	2306      	movs	r3, #6
 800575c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005762:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005766:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005768:	2304      	movs	r3, #4
 800576a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005776:	463b      	mov	r3, r7
 8005778:	4619      	mov	r1, r3
 800577a:	4806      	ldr	r0, [pc, #24]	; (8005794 <MX_ADC1_Init+0xe4>)
 800577c:	f002 febc 	bl	80084f8 <HAL_ADC_ConfigChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8005786:	f001 f813 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800578a:	bf00      	nop
 800578c:	3730      	adds	r7, #48	; 0x30
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	240005a8 	.word	0x240005a8
 8005798:	40022000 	.word	0x40022000
 800579c:	2a000400 	.word	0x2a000400

080057a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	2224      	movs	r2, #36	; 0x24
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f00b fbc9 	bl	8010f44 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80057b2:	4b30      	ldr	r3, [pc, #192]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057b4:	4a30      	ldr	r2, [pc, #192]	; (8005878 <MX_ADC3_Init+0xd8>)
 80057b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80057b8:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80057be:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80057c4:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80057ca:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057cc:	2204      	movs	r2, #4
 80057ce:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057d8:	2201      	movs	r2, #1
 80057da:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80057dc:	4b25      	ldr	r3, [pc, #148]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057de:	2201      	movs	r2, #1
 80057e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80057ea:	4b22      	ldr	r3, [pc, #136]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80057f6:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <MX_ADC3_Init+0xd4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <MX_ADC3_Init+0xd4>)
 8005800:	2200      	movs	r2, #0
 8005802:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <MX_ADC3_Init+0xd4>)
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <MX_ADC3_Init+0xd4>)
 800580c:	2200      	movs	r2, #0
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005810:	4b18      	ldr	r3, [pc, #96]	; (8005874 <MX_ADC3_Init+0xd4>)
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <MX_ADC3_Init+0xd4>)
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800581e:	4815      	ldr	r0, [pc, #84]	; (8005874 <MX_ADC3_Init+0xd4>)
 8005820:	f002 fa0a 	bl	8007c38 <HAL_ADC_Init>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800582a:	f000 ffc1 	bl	80067b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <MX_ADC3_Init+0xdc>)
 8005830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005832:	2306      	movs	r3, #6
 8005834:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8005836:	2302      	movs	r3, #2
 8005838:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800583a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800583e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005840:	2304      	movs	r3, #4
 8005842:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800584e:	2300      	movs	r3, #0
 8005850:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4805      	ldr	r0, [pc, #20]	; (8005874 <MX_ADC3_Init+0xd4>)
 800585e:	f002 fe4b 	bl	80084f8 <HAL_ADC_ConfigChannel>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8005868:	f000 ffa2 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800586c:	bf00      	nop
 800586e:	3728      	adds	r7, #40	; 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	24000618 	.word	0x24000618
 8005878:	58026000 	.word	0x58026000
 800587c:	c7520000 	.word	0xc7520000

08005880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <MX_SPI3_Init+0xa4>)
 8005886:	4a28      	ldr	r2, [pc, #160]	; (8005928 <MX_SPI3_Init+0xa8>)
 8005888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800588a:	4b26      	ldr	r3, [pc, #152]	; (8005924 <MX_SPI3_Init+0xa4>)
 800588c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <MX_SPI3_Init+0xa4>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <MX_SPI3_Init+0xa4>)
 800589a:	2203      	movs	r2, #3
 800589c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058a4:	4b1f      	ldr	r3, [pc, #124]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80058b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80058ca:	4b16      	ldr	r3, [pc, #88]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058d0:	4b14      	ldr	r3, [pc, #80]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058da:	2200      	movs	r2, #0
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058ea:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <MX_SPI3_Init+0xa4>)
 80058fe:	2200      	movs	r2, #0
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <MX_SPI3_Init+0xa4>)
 8005904:	2200      	movs	r2, #0
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <MX_SPI3_Init+0xa4>)
 800590a:	2200      	movs	r2, #0
 800590c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800590e:	4805      	ldr	r0, [pc, #20]	; (8005924 <MX_SPI3_Init+0xa4>)
 8005910:	f008 fd20 	bl	800e354 <HAL_SPI_Init>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800591a:	f000 ff49 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	24000490 	.word	0x24000490
 8005928:	40003c00 	.word	0x40003c00

0800592c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <MX_SPI4_Init+0xa8>)
 8005934:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005938:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800593c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005940:	2200      	movs	r2, #0
 8005942:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8005944:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005946:	2203      	movs	r2, #3
 8005948:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <MX_SPI4_Init+0xa4>)
 800594c:	2200      	movs	r2, #0
 800594e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005950:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005952:	2200      	movs	r2, #0
 8005954:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800595c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800595e:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005960:	2200      	movs	r2, #0
 8005962:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005964:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005966:	2200      	movs	r2, #0
 8005968:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <MX_SPI4_Init+0xa4>)
 800596c:	2200      	movs	r2, #0
 800596e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005972:	2200      	movs	r2, #0
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005978:	2200      	movs	r2, #0
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800597c:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <MX_SPI4_Init+0xa4>)
 800597e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005982:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005986:	2200      	movs	r2, #0
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <MX_SPI4_Init+0xa4>)
 800598c:	2200      	movs	r2, #0
 800598e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005992:	2200      	movs	r2, #0
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005996:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <MX_SPI4_Init+0xa4>)
 8005998:	2200      	movs	r2, #0
 800599a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <MX_SPI4_Init+0xa4>)
 800599e:	2200      	movs	r2, #0
 80059a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <MX_SPI4_Init+0xa4>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <MX_SPI4_Init+0xa4>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <MX_SPI4_Init+0xa4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <MX_SPI4_Init+0xa4>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80059ba:	4805      	ldr	r0, [pc, #20]	; (80059d0 <MX_SPI4_Init+0xa4>)
 80059bc:	f008 fcca 	bl	800e354 <HAL_SPI_Init>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80059c6:	f000 fef3 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	240006d4 	.word	0x240006d4
 80059d4:	40013400 	.word	0x40013400

080059d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	; 0x30
 80059dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80059de:	f107 030c 	add.w	r3, r7, #12
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f00b faac 	bl	8010f44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ec:	463b      	mov	r3, r7
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <MX_TIM1_Init+0xac>)
 80059f8:	4a23      	ldr	r2, [pc, #140]	; (8005a88 <MX_TIM1_Init+0xb0>)
 80059fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <MX_TIM1_Init+0xac>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a1c:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005a22:	2301      	movs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a4e:	f008 fed7 	bl	800e800 <HAL_TIM_Encoder_Init>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8005a58:	f000 feaa 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a60:	2300      	movs	r3, #0
 8005a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a68:	463b      	mov	r3, r7
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4805      	ldr	r0, [pc, #20]	; (8005a84 <MX_TIM1_Init+0xac>)
 8005a6e:	f009 fedb 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005a78:	f000 fe9a 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005a7c:	bf00      	nop
 8005a7e:	3730      	adds	r7, #48	; 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	2400075c 	.word	0x2400075c
 8005a88:	40010000 	.word	0x40010000

08005a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00b fa52 	bl	8010f44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005aaa:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab8:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005abe:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005acc:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ada:	2301      	movs	r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005aea:	2301      	movs	r3, #1
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005aee:	2300      	movs	r3, #0
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	4619      	mov	r1, r3
 8005afc:	480c      	ldr	r0, [pc, #48]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005afe:	f008 fe7f 	bl	800e800 <HAL_TIM_Encoder_Init>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005b08:	f000 fe52 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b14:	463b      	mov	r3, r7
 8005b16:	4619      	mov	r1, r3
 8005b18:	4805      	ldr	r0, [pc, #20]	; (8005b30 <MX_TIM2_Init+0xa4>)
 8005b1a:	f009 fe85 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005b24:	f000 fe44 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005b28:	bf00      	nop
 8005b2a:	3730      	adds	r7, #48	; 0x30
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	24000838 	.word	0x24000838

08005b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	; 0x30
 8005b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00b f9fe 	bl	8010f44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b48:	463b      	mov	r3, r7
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005b52:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b54:	4a21      	ldr	r2, [pc, #132]	; (8005bdc <MX_TIM3_Init+0xa8>)
 8005b56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005b58:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005ba4:	f008 fe2c 	bl	800e800 <HAL_TIM_Encoder_Init>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005bae:	f000 fdff 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4806      	ldr	r0, [pc, #24]	; (8005bd8 <MX_TIM3_Init+0xa4>)
 8005bc0:	f009 fe32 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005bca:	f000 fdf1 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005bce:	bf00      	nop
 8005bd0:	3730      	adds	r7, #48	; 0x30
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	24000444 	.word	0x24000444
 8005bdc:	40000400 	.word	0x40000400

08005be0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08c      	sub	sp, #48	; 0x30
 8005be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005be6:	f107 030c 	add.w	r3, r7, #12
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00b f9a8 	bl	8010f44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005bfe:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <MX_TIM4_Init+0xa8>)
 8005c02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005c10:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c1e:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005c24:	2301      	movs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480d      	ldr	r0, [pc, #52]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c50:	f008 fdd6 	bl	800e800 <HAL_TIM_Encoder_Init>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005c5a:	f000 fda9 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005c66:	463b      	mov	r3, r7
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4806      	ldr	r0, [pc, #24]	; (8005c84 <MX_TIM4_Init+0xa4>)
 8005c6c:	f009 fddc 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005c76:	f000 fd9b 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005c7a:	bf00      	nop
 8005c7c:	3730      	adds	r7, #48	; 0x30
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	240002d0 	.word	0x240002d0
 8005c88:	40000800 	.word	0x40000800

08005c8c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08c      	sub	sp, #48	; 0x30
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c92:	f107 0320 	add.w	r3, r7, #32
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	609a      	str	r2, [r3, #8]
 8005c9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005cb2:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cb4:	4a26      	ldr	r2, [pc, #152]	; (8005d50 <MX_TIM12_Init+0xc4>)
 8005cb6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 275-1;
 8005cb8:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005cbe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc0:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ccc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cce:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005cda:	481c      	ldr	r0, [pc, #112]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cdc:	f008 fc5b 	bl	800e596 <HAL_TIM_Base_Init>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8005ce6:	f000 fd63 	bl	80067b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005cf0:	f107 0320 	add.w	r3, r7, #32
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4815      	ldr	r0, [pc, #84]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005cf8:	f009 f85c 	bl	800edb4 <HAL_TIM_ConfigClockSource>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8005d02:	f000 fd55 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8005d06:	4811      	ldr	r0, [pc, #68]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005d08:	f008 fd22 	bl	800e750 <HAL_TIM_PWM_Init>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8005d12:	f000 fd4d 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d16:	2360      	movs	r3, #96	; 0x60
 8005d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8005d1a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4807      	ldr	r0, [pc, #28]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005d30:	f008 ff2c 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8005d3a:	f000 fd39 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8005d3e:	4803      	ldr	r0, [pc, #12]	; (8005d4c <MX_TIM12_Init+0xc0>)
 8005d40:	f001 f832 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 8005d44:	bf00      	nop
 8005d46:	3730      	adds	r7, #48	; 0x30
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	240009ac 	.word	0x240009ac
 8005d50:	40001800 	.word	0x40001800

08005d54 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	611a      	str	r2, [r3, #16]
 8005d68:	615a      	str	r2, [r3, #20]
 8005d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005d6c:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d6e:	4a20      	ldr	r2, [pc, #128]	; (8005df0 <MX_TIM13_Init+0x9c>)
 8005d70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 8005d72:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d74:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005d78:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8005d80:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d88:	4b18      	ldr	r3, [pc, #96]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d8e:	4b17      	ldr	r3, [pc, #92]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005d94:	4815      	ldr	r0, [pc, #84]	; (8005dec <MX_TIM13_Init+0x98>)
 8005d96:	f008 fbfe 	bl	800e596 <HAL_TIM_Base_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8005da0:	f000 fd06 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005da4:	4811      	ldr	r0, [pc, #68]	; (8005dec <MX_TIM13_Init+0x98>)
 8005da6:	f008 fcd3 	bl	800e750 <HAL_TIM_PWM_Init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8005db0:	f000 fcfe 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005db4:	2360      	movs	r3, #96	; 0x60
 8005db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005db8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4807      	ldr	r0, [pc, #28]	; (8005dec <MX_TIM13_Init+0x98>)
 8005dce:	f008 fedd 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8005dd8:	f000 fcea 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005ddc:	4803      	ldr	r0, [pc, #12]	; (8005dec <MX_TIM13_Init+0x98>)
 8005dde:	f000 ffe3 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 8005de2:	bf00      	nop
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	24000688 	.word	0x24000688
 8005df0:	40001c00 	.word	0x40001c00

08005df4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	611a      	str	r2, [r3, #16]
 8005e08:	615a      	str	r2, [r3, #20]
 8005e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005e0c:	4b1f      	ldr	r3, [pc, #124]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e0e:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <MX_TIM14_Init+0x9c>)
 8005e10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 8005e12:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e14:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005e18:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8005e20:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e28:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e2e:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005e34:	4815      	ldr	r0, [pc, #84]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e36:	f008 fbae 	bl	800e596 <HAL_TIM_Base_Init>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8005e40:	f000 fcb6 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005e44:	4811      	ldr	r0, [pc, #68]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e46:	f008 fc83 	bl	800e750 <HAL_TIM_PWM_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8005e50:	f000 fcae 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e54:	2360      	movs	r3, #96	; 0x60
 8005e56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005e58:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4807      	ldr	r0, [pc, #28]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e6e:	f008 fe8d 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8005e78:	f000 fc9a 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005e7c:	4803      	ldr	r0, [pc, #12]	; (8005e8c <MX_TIM14_Init+0x98>)
 8005e7e:	f000 ff93 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 8005e82:	bf00      	nop
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	24000960 	.word	0x24000960
 8005e90:	40002000 	.word	0x40002000

08005e94 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b098      	sub	sp, #96	; 0x60
 8005e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	611a      	str	r2, [r3, #16]
 8005eb6:	615a      	str	r2, [r3, #20]
 8005eb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	2234      	movs	r2, #52	; 0x34
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f00b f83f 	bl	8010f44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005ec6:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ec8:	4a35      	ldr	r2, [pc, #212]	; (8005fa0 <MX_TIM15_Init+0x10c>)
 8005eca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8005ecc:	4b33      	ldr	r3, [pc, #204]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ece:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005ed2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed4:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8005eda:	4b30      	ldr	r3, [pc, #192]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ee0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ee2:	4b2e      	ldr	r3, [pc, #184]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005ee8:	4b2c      	ldr	r3, [pc, #176]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eee:	4b2b      	ldr	r3, [pc, #172]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005ef4:	4829      	ldr	r0, [pc, #164]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005ef6:	f008 fc2b 	bl	800e750 <HAL_TIM_PWM_Init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8005f00:	f000 fc56 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f04:	2300      	movs	r3, #0
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005f0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f10:	4619      	mov	r1, r3
 8005f12:	4822      	ldr	r0, [pc, #136]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005f14:	f009 fc88 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8005f1e:	f000 fc47 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f22:	2360      	movs	r3, #96	; 0x60
 8005f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8005f26:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f30:	2300      	movs	r3, #0
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f44:	2204      	movs	r2, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4814      	ldr	r0, [pc, #80]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005f4a:	f008 fe1f 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8005f54:	f000 fc2c 	bl	80067b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005f7a:	1d3b      	adds	r3, r7, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4807      	ldr	r0, [pc, #28]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005f80:	f009 fcee 	bl	800f960 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8005f8a:	f000 fc11 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005f8e:	4803      	ldr	r0, [pc, #12]	; (8005f9c <MX_TIM15_Init+0x108>)
 8005f90:	f000 ff0a 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 8005f94:	bf00      	nop
 8005f96:	3760      	adds	r7, #96	; 0x60
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	240003ac 	.word	0x240003ac
 8005fa0:	40014000 	.word	0x40014000

08005fa4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b094      	sub	sp, #80	; 0x50
 8005fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	611a      	str	r2, [r3, #16]
 8005fba:	615a      	str	r2, [r3, #20]
 8005fbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	2234      	movs	r2, #52	; 0x34
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f00a ffbd 	bl	8010f44 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005fca:	4b32      	ldr	r3, [pc, #200]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <MX_TIM16_Init+0xf4>)
 8005fce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8005fd0:	4b30      	ldr	r3, [pc, #192]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fd2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005fd6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fd8:	4b2e      	ldr	r3, [pc, #184]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005fde:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005fe4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fe6:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005fec:	4b29      	ldr	r3, [pc, #164]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ff2:	4b28      	ldr	r3, [pc, #160]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005ff8:	4826      	ldr	r0, [pc, #152]	; (8006094 <MX_TIM16_Init+0xf0>)
 8005ffa:	f008 facc 	bl	800e596 <HAL_TIM_Base_Init>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8006004:	f000 fbd4 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8006008:	4822      	ldr	r0, [pc, #136]	; (8006094 <MX_TIM16_Init+0xf0>)
 800600a:	f008 fba1 	bl	800e750 <HAL_TIM_PWM_Init>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8006014:	f000 fbcc 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006018:	2360      	movs	r3, #96	; 0x60
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800601c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006020:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006022:	2300      	movs	r3, #0
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006026:	2300      	movs	r3, #0
 8006028:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006032:	2300      	movs	r3, #0
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006036:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800603a:	2200      	movs	r2, #0
 800603c:	4619      	mov	r1, r3
 800603e:	4815      	ldr	r0, [pc, #84]	; (8006094 <MX_TIM16_Init+0xf0>)
 8006040:	f008 fda4 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 800604a:	f000 fbb1 	bl	80067b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800604e:	2300      	movs	r3, #0
 8006050:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006066:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800606c:	2300      	movs	r3, #0
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8006070:	463b      	mov	r3, r7
 8006072:	4619      	mov	r1, r3
 8006074:	4807      	ldr	r0, [pc, #28]	; (8006094 <MX_TIM16_Init+0xf0>)
 8006076:	f009 fc73 	bl	800f960 <HAL_TIMEx_ConfigBreakDeadTime>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8006080:	f000 fb96 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8006084:	4803      	ldr	r0, [pc, #12]	; (8006094 <MX_TIM16_Init+0xf0>)
 8006086:	f000 fe8f 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 800608a:	bf00      	nop
 800608c:	3750      	adds	r7, #80	; 0x50
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	240009f8 	.word	0x240009f8
 8006098:	40014400 	.word	0x40014400

0800609c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b094      	sub	sp, #80	; 0x50
 80060a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80060a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	605a      	str	r2, [r3, #4]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	611a      	str	r2, [r3, #16]
 80060b2:	615a      	str	r2, [r3, #20]
 80060b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80060b6:	463b      	mov	r3, r7
 80060b8:	2234      	movs	r2, #52	; 0x34
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f00a ff41 	bl	8010f44 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80060c2:	4b32      	ldr	r3, [pc, #200]	; (800618c <MX_TIM17_Init+0xf0>)
 80060c4:	4a32      	ldr	r2, [pc, #200]	; (8006190 <MX_TIM17_Init+0xf4>)
 80060c6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 80060c8:	4b30      	ldr	r3, [pc, #192]	; (800618c <MX_TIM17_Init+0xf0>)
 80060ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 80060ce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d0:	4b2e      	ldr	r3, [pc, #184]	; (800618c <MX_TIM17_Init+0xf0>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80060d6:	4b2d      	ldr	r3, [pc, #180]	; (800618c <MX_TIM17_Init+0xf0>)
 80060d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060de:	4b2b      	ldr	r3, [pc, #172]	; (800618c <MX_TIM17_Init+0xf0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80060e4:	4b29      	ldr	r3, [pc, #164]	; (800618c <MX_TIM17_Init+0xf0>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ea:	4b28      	ldr	r3, [pc, #160]	; (800618c <MX_TIM17_Init+0xf0>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80060f0:	4826      	ldr	r0, [pc, #152]	; (800618c <MX_TIM17_Init+0xf0>)
 80060f2:	f008 fa50 	bl	800e596 <HAL_TIM_Base_Init>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80060fc:	f000 fb58 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8006100:	4822      	ldr	r0, [pc, #136]	; (800618c <MX_TIM17_Init+0xf0>)
 8006102:	f008 fb25 	bl	800e750 <HAL_TIM_PWM_Init>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800610c:	f000 fb50 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006110:	2360      	movs	r3, #96	; 0x60
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8006114:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006118:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800611a:	2300      	movs	r3, #0
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800611e:	2300      	movs	r3, #0
 8006120:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006122:	2300      	movs	r3, #0
 8006124:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006126:	2300      	movs	r3, #0
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800612a:	2300      	movs	r3, #0
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800612e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006132:	2200      	movs	r2, #0
 8006134:	4619      	mov	r1, r3
 8006136:	4815      	ldr	r0, [pc, #84]	; (800618c <MX_TIM17_Init+0xf0>)
 8006138:	f008 fd28 	bl	800eb8c <HAL_TIM_PWM_ConfigChannel>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8006142:	f000 fb35 	bl	80067b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006146:	2300      	movs	r3, #0
 8006148:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800615a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800615e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006164:	2300      	movs	r3, #0
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8006168:	463b      	mov	r3, r7
 800616a:	4619      	mov	r1, r3
 800616c:	4807      	ldr	r0, [pc, #28]	; (800618c <MX_TIM17_Init+0xf0>)
 800616e:	f009 fbf7 	bl	800f960 <HAL_TIMEx_ConfigBreakDeadTime>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8006178:	f000 fb1a 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800617c:	4803      	ldr	r0, [pc, #12]	; (800618c <MX_TIM17_Init+0xf0>)
 800617e:	f000 fe13 	bl	8006da8 <HAL_TIM_MspPostInit>

}
 8006182:	bf00      	nop
 8006184:	3750      	adds	r7, #80	; 0x50
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	240003f8 	.word	0x240003f8
 8006190:	40014800 	.word	0x40014800

08006194 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800619a:	f107 0310 	add.w	r3, r7, #16
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	609a      	str	r2, [r3, #8]
 80061a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <MX_TIM23_Init+0x98>)
 80061b4:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <MX_TIM23_Init+0x9c>)
 80061b6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80061b8:	4b1c      	ldr	r3, [pc, #112]	; (800622c <MX_TIM23_Init+0x98>)
 80061ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80061be:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <MX_TIM23_Init+0x98>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80061c6:	4b19      	ldr	r3, [pc, #100]	; (800622c <MX_TIM23_Init+0x98>)
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ce:	4b17      	ldr	r3, [pc, #92]	; (800622c <MX_TIM23_Init+0x98>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061d4:	4b15      	ldr	r3, [pc, #84]	; (800622c <MX_TIM23_Init+0x98>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80061da:	4814      	ldr	r0, [pc, #80]	; (800622c <MX_TIM23_Init+0x98>)
 80061dc:	f008 f9db 	bl	800e596 <HAL_TIM_Base_Init>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80061e6:	f000 fae3 	bl	80067b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80061f0:	f107 0310 	add.w	r3, r7, #16
 80061f4:	4619      	mov	r1, r3
 80061f6:	480d      	ldr	r0, [pc, #52]	; (800622c <MX_TIM23_Init+0x98>)
 80061f8:	f008 fddc 	bl	800edb4 <HAL_TIM_ConfigClockSource>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8006202:	f000 fad5 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800620e:	1d3b      	adds	r3, r7, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4806      	ldr	r0, [pc, #24]	; (800622c <MX_TIM23_Init+0x98>)
 8006214:	f009 fb08 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800621e:	f000 fac7 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8006222:	bf00      	nop
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	24000884 	.word	0x24000884
 8006230:	4000e000 	.word	0x4000e000

08006234 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800623a:	f107 0310 	add.w	r3, r7, #16
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	609a      	str	r2, [r3, #8]
 8006246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <MX_TIM24_Init+0x98>)
 8006254:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <MX_TIM24_Init+0x9c>)
 8006256:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <MX_TIM24_Init+0x98>)
 800625a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800625e:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006260:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <MX_TIM24_Init+0x98>)
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <MX_TIM24_Init+0x98>)
 8006268:	f242 720f 	movw	r2, #9999	; 0x270f
 800626c:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <MX_TIM24_Init+0x98>)
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <MX_TIM24_Init+0x98>)
 8006276:	2280      	movs	r2, #128	; 0x80
 8006278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800627a:	4814      	ldr	r0, [pc, #80]	; (80062cc <MX_TIM24_Init+0x98>)
 800627c:	f008 f98b 	bl	800e596 <HAL_TIM_Base_Init>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8006286:	f000 fa93 	bl	80067b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800628a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800628e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4619      	mov	r1, r3
 8006296:	480d      	ldr	r0, [pc, #52]	; (80062cc <MX_TIM24_Init+0x98>)
 8006298:	f008 fd8c 	bl	800edb4 <HAL_TIM_ConfigClockSource>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80062a2:	f000 fa85 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4806      	ldr	r0, [pc, #24]	; (80062cc <MX_TIM24_Init+0x98>)
 80062b4:	f009 fab8 	bl	800f828 <HAL_TIMEx_MasterConfigSynchronization>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 80062be:	f000 fa77 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80062c2:	bf00      	nop
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2400020c 	.word	0x2400020c
 80062d0:	4000e400 	.word	0x4000e400

080062d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <MX_UART4_Init+0x90>)
 80062da:	4a23      	ldr	r2, [pc, #140]	; (8006368 <MX_UART4_Init+0x94>)
 80062dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80062de:	4b21      	ldr	r3, [pc, #132]	; (8006364 <MX_UART4_Init+0x90>)
 80062e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80062e6:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <MX_UART4_Init+0x90>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80062ec:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <MX_UART4_Init+0x90>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <MX_UART4_Init+0x90>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <MX_UART4_Init+0x90>)
 80062fa:	220c      	movs	r2, #12
 80062fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062fe:	4b19      	ldr	r3, [pc, #100]	; (8006364 <MX_UART4_Init+0x90>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006304:	4b17      	ldr	r3, [pc, #92]	; (8006364 <MX_UART4_Init+0x90>)
 8006306:	2200      	movs	r2, #0
 8006308:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <MX_UART4_Init+0x90>)
 800630c:	2200      	movs	r2, #0
 800630e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006310:	4b14      	ldr	r3, [pc, #80]	; (8006364 <MX_UART4_Init+0x90>)
 8006312:	2200      	movs	r2, #0
 8006314:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <MX_UART4_Init+0x90>)
 8006318:	2200      	movs	r2, #0
 800631a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800631c:	4811      	ldr	r0, [pc, #68]	; (8006364 <MX_UART4_Init+0x90>)
 800631e:	f009 fbdd 	bl	800fadc <HAL_UART_Init>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8006328:	f000 fa42 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800632c:	2100      	movs	r1, #0
 800632e:	480d      	ldr	r0, [pc, #52]	; (8006364 <MX_UART4_Init+0x90>)
 8006330:	f00a fd06 	bl	8010d40 <HAL_UARTEx_SetTxFifoThreshold>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800633a:	f000 fa39 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800633e:	2100      	movs	r1, #0
 8006340:	4808      	ldr	r0, [pc, #32]	; (8006364 <MX_UART4_Init+0x90>)
 8006342:	f00a fd3b 	bl	8010dbc <HAL_UARTEx_SetRxFifoThreshold>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800634c:	f000 fa30 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006350:	4804      	ldr	r0, [pc, #16]	; (8006364 <MX_UART4_Init+0x90>)
 8006352:	f00a fcbc 	bl	8010cce <HAL_UARTEx_DisableFifoMode>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800635c:	f000 fa28 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	240007a8 	.word	0x240007a8
 8006368:	40004c00 	.word	0x40004c00

0800636c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <MX_UART5_Init+0x90>)
 8006372:	4a23      	ldr	r2, [pc, #140]	; (8006400 <MX_UART5_Init+0x94>)
 8006374:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <MX_UART5_Init+0x90>)
 8006378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800637c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800637e:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <MX_UART5_Init+0x90>)
 8006380:	2200      	movs	r2, #0
 8006382:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <MX_UART5_Init+0x90>)
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800638a:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <MX_UART5_Init+0x90>)
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <MX_UART5_Init+0x90>)
 8006392:	220c      	movs	r2, #12
 8006394:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <MX_UART5_Init+0x90>)
 8006398:	2200      	movs	r2, #0
 800639a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <MX_UART5_Init+0x90>)
 800639e:	2200      	movs	r2, #0
 80063a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063a2:	4b16      	ldr	r3, [pc, #88]	; (80063fc <MX_UART5_Init+0x90>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <MX_UART5_Init+0x90>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <MX_UART5_Init+0x90>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80063b4:	4811      	ldr	r0, [pc, #68]	; (80063fc <MX_UART5_Init+0x90>)
 80063b6:	f009 fb91 	bl	800fadc <HAL_UART_Init>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80063c0:	f000 f9f6 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063c4:	2100      	movs	r1, #0
 80063c6:	480d      	ldr	r0, [pc, #52]	; (80063fc <MX_UART5_Init+0x90>)
 80063c8:	f00a fcba 	bl	8010d40 <HAL_UARTEx_SetTxFifoThreshold>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80063d2:	f000 f9ed 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063d6:	2100      	movs	r1, #0
 80063d8:	4808      	ldr	r0, [pc, #32]	; (80063fc <MX_UART5_Init+0x90>)
 80063da:	f00a fcef 	bl	8010dbc <HAL_UARTEx_SetRxFifoThreshold>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80063e4:	f000 f9e4 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80063e8:	4804      	ldr	r0, [pc, #16]	; (80063fc <MX_UART5_Init+0x90>)
 80063ea:	f00a fc70 	bl	8010cce <HAL_UARTEx_DisableFifoMode>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80063f4:	f000 f9dc 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	24000518 	.word	0x24000518
 8006400:	40005000 	.word	0x40005000

08006404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006408:	4b22      	ldr	r3, [pc, #136]	; (8006494 <MX_USART2_UART_Init+0x90>)
 800640a:	4a23      	ldr	r2, [pc, #140]	; (8006498 <MX_USART2_UART_Init+0x94>)
 800640c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800640e:	4b21      	ldr	r3, [pc, #132]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <MX_USART2_UART_Init+0x90>)
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006428:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <MX_USART2_UART_Init+0x90>)
 800642a:	220c      	movs	r2, #12
 800642c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800642e:	4b19      	ldr	r3, [pc, #100]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006430:	2200      	movs	r2, #0
 8006432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006434:	4b17      	ldr	r3, [pc, #92]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006436:	2200      	movs	r2, #0
 8006438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800643a:	4b16      	ldr	r3, [pc, #88]	; (8006494 <MX_USART2_UART_Init+0x90>)
 800643c:	2200      	movs	r2, #0
 800643e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006440:	4b14      	ldr	r3, [pc, #80]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006442:	2200      	movs	r2, #0
 8006444:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006446:	4b13      	ldr	r3, [pc, #76]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006448:	2200      	movs	r2, #0
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800644c:	4811      	ldr	r0, [pc, #68]	; (8006494 <MX_USART2_UART_Init+0x90>)
 800644e:	f009 fb45 	bl	800fadc <HAL_UART_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006458:	f000 f9aa 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800645c:	2100      	movs	r1, #0
 800645e:	480d      	ldr	r0, [pc, #52]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006460:	f00a fc6e 	bl	8010d40 <HAL_UARTEx_SetTxFifoThreshold>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800646a:	f000 f9a1 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800646e:	2100      	movs	r1, #0
 8006470:	4808      	ldr	r0, [pc, #32]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006472:	f00a fca3 	bl	8010dbc <HAL_UARTEx_SetRxFifoThreshold>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800647c:	f000 f998 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006480:	4804      	ldr	r0, [pc, #16]	; (8006494 <MX_USART2_UART_Init+0x90>)
 8006482:	f00a fc24 	bl	8010cce <HAL_UARTEx_DisableFifoMode>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800648c:	f000 f990 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	240008d0 	.word	0x240008d0
 8006498:	40004400 	.word	0x40004400

0800649c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80064a0:	4b22      	ldr	r3, [pc, #136]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064a2:	4a23      	ldr	r2, [pc, #140]	; (8006530 <MX_USART3_UART_Init+0x94>)
 80064a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80064b4:	4b1d      	ldr	r3, [pc, #116]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80064ba:	4b1c      	ldr	r3, [pc, #112]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064bc:	2200      	movs	r2, #0
 80064be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80064c0:	4b1a      	ldr	r3, [pc, #104]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064c2:	220c      	movs	r2, #12
 80064c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064da:	2200      	movs	r2, #0
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80064e4:	4811      	ldr	r0, [pc, #68]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064e6:	f009 faf9 	bl	800fadc <HAL_UART_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80064f0:	f000 f95e 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064f4:	2100      	movs	r1, #0
 80064f6:	480d      	ldr	r0, [pc, #52]	; (800652c <MX_USART3_UART_Init+0x90>)
 80064f8:	f00a fc22 	bl	8010d40 <HAL_UARTEx_SetTxFifoThreshold>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006502:	f000 f955 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006506:	2100      	movs	r1, #0
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <MX_USART3_UART_Init+0x90>)
 800650a:	f00a fc57 	bl	8010dbc <HAL_UARTEx_SetRxFifoThreshold>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006514:	f000 f94c 	bl	80067b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006518:	4804      	ldr	r0, [pc, #16]	; (800652c <MX_USART3_UART_Init+0x90>)
 800651a:	f00a fbd8 	bl	8010cce <HAL_UARTEx_DisableFifoMode>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006524:	f000 f944 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006528:	bf00      	nop
 800652a:	bd80      	pop	{r7, pc}
 800652c:	2400031c 	.word	0x2400031c
 8006530:	40004800 	.word	0x40004800

08006534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <MX_DMA_Init+0x3c>)
 800653c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006540:	4a0b      	ldr	r2, [pc, #44]	; (8006570 <MX_DMA_Init+0x3c>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <MX_DMA_Init+0x3c>)
 800654c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006558:	2200      	movs	r2, #0
 800655a:	2100      	movs	r1, #0
 800655c:	200b      	movs	r0, #11
 800655e:	f002 fff8 	bl	8009552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006562:	200b      	movs	r0, #11
 8006564:	f003 f80f 	bl	8009586 <HAL_NVIC_EnableIRQ>

}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400

08006574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08c      	sub	sp, #48	; 0x30
 8006578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657a:	f107 031c 	add.w	r3, r7, #28
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	609a      	str	r2, [r3, #8]
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800658a:	4b6f      	ldr	r3, [pc, #444]	; (8006748 <MX_GPIO_Init+0x1d4>)
 800658c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006590:	4a6d      	ldr	r2, [pc, #436]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006592:	f043 0310 	orr.w	r3, r3, #16
 8006596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800659a:	4b6b      	ldr	r3, [pc, #428]	; (8006748 <MX_GPIO_Init+0x1d4>)
 800659c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065a8:	4b67      	ldr	r3, [pc, #412]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ae:	4a66      	ldr	r2, [pc, #408]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065b8:	4b63      	ldr	r3, [pc, #396]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80065c6:	4b60      	ldr	r3, [pc, #384]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065cc:	4a5e      	ldr	r2, [pc, #376]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065d6:	4b5c      	ldr	r3, [pc, #368]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e4:	4b58      	ldr	r3, [pc, #352]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ea:	4a57      	ldr	r2, [pc, #348]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065f4:	4b54      	ldr	r3, [pc, #336]	; (8006748 <MX_GPIO_Init+0x1d4>)
 80065f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006602:	4b51      	ldr	r3, [pc, #324]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006608:	4a4f      	ldr	r2, [pc, #316]	; (8006748 <MX_GPIO_Init+0x1d4>)
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006612:	4b4d      	ldr	r3, [pc, #308]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006620:	4b49      	ldr	r3, [pc, #292]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006626:	4a48      	ldr	r2, [pc, #288]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006630:	4b45      	ldr	r3, [pc, #276]	; (8006748 <MX_GPIO_Init+0x1d4>)
 8006632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin, GPIO_PIN_RESET);
 800663e:	2200      	movs	r2, #0
 8006640:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8006644:	4841      	ldr	r0, [pc, #260]	; (800674c <MX_GPIO_Init+0x1d8>)
 8006646:	f004 fe21 	bl	800b28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 800664a:	2200      	movs	r2, #0
 800664c:	f24c 3120 	movw	r1, #49952	; 0xc320
 8006650:	483f      	ldr	r0, [pc, #252]	; (8006750 <MX_GPIO_Init+0x1dc>)
 8006652:	f004 fe1b 	bl	800b28c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 8006656:	2200      	movs	r2, #0
 8006658:	21f7      	movs	r1, #247	; 0xf7
 800665a:	483e      	ldr	r0, [pc, #248]	; (8006754 <MX_GPIO_Init+0x1e0>)
 800665c:	f004 fe16 	bl	800b28c <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006660:	2200      	movs	r2, #0
 8006662:	f640 7111 	movw	r1, #3857	; 0xf11
 8006666:	483c      	ldr	r0, [pc, #240]	; (8006758 <MX_GPIO_Init+0x1e4>)
 8006668:	f004 fe10 	bl	800b28c <HAL_GPIO_WritePin>
                          |SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8006672:	483a      	ldr	r0, [pc, #232]	; (800675c <MX_GPIO_Init+0x1e8>)
 8006674:	f004 fe0a 	bl	800b28c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_SS1_Pin SPI4_SS2_Pin DIR5_Pin OE_Pin */
  GPIO_InitStruct.Pin = SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin;
 8006678:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800667c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667e:	2301      	movs	r3, #1
 8006680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006686:	2300      	movs	r3, #0
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800668a:	f107 031c 	add.w	r3, r7, #28
 800668e:	4619      	mov	r1, r3
 8006690:	482e      	ldr	r0, [pc, #184]	; (800674c <MX_GPIO_Init+0x1d8>)
 8006692:	f004 fc53 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_SS3_Pin */
  GPIO_InitStruct.Pin = SPI4_SS3_Pin;
 8006696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800669a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800669c:	2303      	movs	r3, #3
 800669e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI4_SS3_GPIO_Port, &GPIO_InitStruct);
 80066a4:	f107 031c 	add.w	r3, r7, #28
 80066a8:	4619      	mov	r1, r3
 80066aa:	4829      	ldr	r0, [pc, #164]	; (8006750 <MX_GPIO_Init+0x1dc>)
 80066ac:	f004 fc46 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI4_SS4_Pin SPI4_SS5_Pin DIR1_Pin PC8
                           PC9 */
  GPIO_InitStruct.Pin = SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 80066b0:	f24c 3320 	movw	r3, #49952	; 0xc320
 80066b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066b6:	2301      	movs	r3, #1
 80066b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066c2:	f107 031c 	add.w	r3, r7, #28
 80066c6:	4619      	mov	r1, r3
 80066c8:	4821      	ldr	r0, [pc, #132]	; (8006750 <MX_GPIO_Init+0x1dc>)
 80066ca:	f004 fc37 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80066ce:	2302      	movs	r3, #2
 80066d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066da:	f107 031c 	add.w	r3, r7, #28
 80066de:	4619      	mov	r1, r3
 80066e0:	481b      	ldr	r0, [pc, #108]	; (8006750 <MX_GPIO_Init+0x1dc>)
 80066e2:	f004 fc2b 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR3_Pin DIR4_Pin LED4_Pin
                           LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 80066e6:	23f7      	movs	r3, #247	; 0xf7
 80066e8:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ea:	2301      	movs	r3, #1
 80066ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f2:	2300      	movs	r3, #0
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f6:	f107 031c 	add.w	r3, r7, #28
 80066fa:	4619      	mov	r1, r3
 80066fc:	4815      	ldr	r0, [pc, #84]	; (8006754 <MX_GPIO_Init+0x1e0>)
 80066fe:	f004 fc1d 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           SPI3_SS1_Pin USART2_DE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006702:	f640 7311 	movw	r3, #3857	; 0xf11
 8006706:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006708:	2301      	movs	r3, #1
 800670a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670c:	2300      	movs	r3, #0
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006710:	2300      	movs	r3, #0
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006714:	f107 031c 	add.w	r3, r7, #28
 8006718:	4619      	mov	r1, r3
 800671a:	480f      	ldr	r0, [pc, #60]	; (8006758 <MX_GPIO_Init+0x1e4>)
 800671c:	f004 fc0e 	bl	800af3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 UART4_DE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8006720:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8006724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006726:	2301      	movs	r3, #1
 8006728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800672e:	2300      	movs	r3, #0
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	f107 031c 	add.w	r3, r7, #28
 8006736:	4619      	mov	r1, r3
 8006738:	4808      	ldr	r0, [pc, #32]	; (800675c <MX_GPIO_Init+0x1e8>)
 800673a:	f004 fbff 	bl	800af3c <HAL_GPIO_Init>

}
 800673e:	bf00      	nop
 8006740:	3730      	adds	r7, #48	; 0x30
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	58024400 	.word	0x58024400
 800674c:	58021000 	.word	0x58021000
 8006750:	58020800 	.word	0x58020800
 8006754:	58020400 	.word	0x58020400
 8006758:	58020c00 	.word	0x58020c00
 800675c:	58020000 	.word	0x58020000

08006760 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	if (htim == &htim24)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a06      	ldr	r2, [pc, #24]	; (8006784 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d102      	bne.n	8006776 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
//		now using control loop 200hz
		control_loop_en = 1;
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2400020c 	.word	0x2400020c
 8006788:	240001fc 	.word	0x240001fc

0800678c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 1);
 8006794:	1d39      	adds	r1, r7, #4
 8006796:	2301      	movs	r3, #1
 8006798:	2201      	movs	r2, #1
 800679a:	4804      	ldr	r0, [pc, #16]	; (80067ac <__io_putchar+0x20>)
 800679c:	f009 f9ee 	bl	800fb7c <HAL_UART_Transmit>
  return ch;
 80067a0:	687b      	ldr	r3, [r7, #4]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2400031c 	.word	0x2400031c

080067b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067b4:	b672      	cpsid	i
}
 80067b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067b8:	e7fe      	b.n	80067b8 <Error_Handler+0x8>
	...

080067bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <HAL_MspInit+0x30>)
 80067c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067c8:	4a08      	ldr	r2, [pc, #32]	; (80067ec <HAL_MspInit+0x30>)
 80067ca:	f043 0302 	orr.w	r3, r3, #2
 80067ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <HAL_MspInit+0x30>)
 80067d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	58024400 	.word	0x58024400

080067f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f8:	f107 0314 	add.w	r3, r7, #20
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <HAL_ADC_MspInit+0xb8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d12a      	bne.n	8006868 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006812:	4b26      	ldr	r3, [pc, #152]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006818:	4a24      	ldr	r2, [pc, #144]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 800681a:	f043 0320 	orr.w	r3, r3, #32
 800681e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006822:	4b22      	ldr	r3, [pc, #136]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006830:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006836:	4a1d      	ldr	r2, [pc, #116]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006852:	2303      	movs	r3, #3
 8006854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800685a:	f107 0314 	add.w	r3, r7, #20
 800685e:	4619      	mov	r1, r3
 8006860:	4813      	ldr	r0, [pc, #76]	; (80068b0 <HAL_ADC_MspInit+0xc0>)
 8006862:	f004 fb6b 	bl	800af3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006866:	e01b      	b.n	80068a0 <HAL_ADC_MspInit+0xb0>
  else if(hadc->Instance==ADC3)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a11      	ldr	r2, [pc, #68]	; (80068b4 <HAL_ADC_MspInit+0xc4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d116      	bne.n	80068a0 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006878:	4a0c      	ldr	r2, [pc, #48]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 800687a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800687e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <HAL_ADC_MspInit+0xbc>)
 8006884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8006890:	2200      	movs	r2, #0
 8006892:	2100      	movs	r1, #0
 8006894:	207f      	movs	r0, #127	; 0x7f
 8006896:	f002 fe5c 	bl	8009552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800689a:	207f      	movs	r0, #127	; 0x7f
 800689c:	f002 fe73 	bl	8009586 <HAL_NVIC_EnableIRQ>
}
 80068a0:	bf00      	nop
 80068a2:	3728      	adds	r7, #40	; 0x28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40022000 	.word	0x40022000
 80068ac:	58024400 	.word	0x58024400
 80068b0:	58020800 	.word	0x58020800
 80068b4:	58026000 	.word	0x58026000

080068b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0b8      	sub	sp, #224	; 0xe0
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068d0:	f107 0318 	add.w	r3, r7, #24
 80068d4:	22b4      	movs	r2, #180	; 0xb4
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f00a fb33 	bl	8010f44 <memset>
  if(hspi->Instance==SPI3)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a49      	ldr	r2, [pc, #292]	; (8006a08 <HAL_SPI_MspInit+0x150>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d143      	bne.n	8006970 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80068e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068f2:	f107 0318 	add.w	r3, r7, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f005 fc9a 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8006902:	f7ff ff55 	bl	80067b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006906:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 8006908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800690c:	4a3f      	ldr	r2, [pc, #252]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 800690e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006912:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006916:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 8006918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800691c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006924:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 8006926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800692a:	4a38      	ldr	r2, [pc, #224]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 800692c:	f043 0304 	orr.w	r3, r3, #4
 8006930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006934:	4b35      	ldr	r3, [pc, #212]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 8006936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006942:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694a:	2302      	movs	r3, #2
 800694c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800695c:	2306      	movs	r3, #6
 800695e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006962:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006966:	4619      	mov	r1, r3
 8006968:	4829      	ldr	r0, [pc, #164]	; (8006a10 <HAL_SPI_MspInit+0x158>)
 800696a:	f004 fae7 	bl	800af3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800696e:	e047      	b.n	8006a00 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <HAL_SPI_MspInit+0x15c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d142      	bne.n	8006a00 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800697a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800697e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8006980:	2300      	movs	r3, #0
 8006982:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006984:	f107 0318 	add.w	r3, r7, #24
 8006988:	4618      	mov	r0, r3
 800698a:	f005 fc51 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 8006994:	f7ff ff0c 	bl	80067b0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 800699a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800699e:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 80069a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80069a8:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 80069aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 80069b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069bc:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 80069be:	f043 0310 	orr.w	r3, r3, #16
 80069c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <HAL_SPI_MspInit+0x154>)
 80069c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_14;
 80069d4:	f244 0324 	movw	r3, #16420	; 0x4024
 80069d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069dc:	2302      	movs	r3, #2
 80069de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80069ee:	2305      	movs	r3, #5
 80069f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80069f8:	4619      	mov	r1, r3
 80069fa:	4807      	ldr	r0, [pc, #28]	; (8006a18 <HAL_SPI_MspInit+0x160>)
 80069fc:	f004 fa9e 	bl	800af3c <HAL_GPIO_Init>
}
 8006a00:	bf00      	nop
 8006a02:	37e0      	adds	r7, #224	; 0xe0
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40003c00 	.word	0x40003c00
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	58020800 	.word	0x58020800
 8006a14:	40013400 	.word	0x40013400
 8006a18:	58021000 	.word	0x58021000

08006a1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b090      	sub	sp, #64	; 0x40
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	609a      	str	r2, [r3, #8]
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a69      	ldr	r2, [pc, #420]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d12f      	bne.n	8006a9e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a3e:	4b69      	ldr	r3, [pc, #420]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a44:	4a67      	ldr	r2, [pc, #412]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a4e:	4b65      	ldr	r3, [pc, #404]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a5c:	4b61      	ldr	r3, [pc, #388]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a62:	4a60      	ldr	r2, [pc, #384]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a64:	f043 0310 	orr.w	r3, r3, #16
 8006a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a6c:	4b5d      	ldr	r3, [pc, #372]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006a7a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a80:	2302      	movs	r3, #2
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a94:	4619      	mov	r1, r3
 8006a96:	4854      	ldr	r0, [pc, #336]	; (8006be8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006a98:	f004 fa50 	bl	800af3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006a9c:	e09b      	b.n	8006bd6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM2)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa6:	d12e      	bne.n	8006b06 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006aa8:	4b4e      	ldr	r3, [pc, #312]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aae:	4a4d      	ldr	r2, [pc, #308]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ab8:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac6:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006acc:	4a45      	ldr	r2, [pc, #276]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad6:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006af4:	2301      	movs	r3, #1
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006afc:	4619      	mov	r1, r3
 8006afe:	483b      	ldr	r0, [pc, #236]	; (8006bec <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006b00:	f004 fa1c 	bl	800af3c <HAL_GPIO_Init>
}
 8006b04:	e067      	b.n	8006bd6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a39      	ldr	r2, [pc, #228]	; (8006bf0 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d12e      	bne.n	8006b6e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b10:	4b34      	ldr	r3, [pc, #208]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b16:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b20:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b2e:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b34:	4a2b      	ldr	r2, [pc, #172]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b36:	f043 0304 	orr.w	r3, r3, #4
 8006b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b3e:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b4c:	23c0      	movs	r3, #192	; 0xc0
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b50:	2302      	movs	r3, #2
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b64:	4619      	mov	r1, r3
 8006b66:	4823      	ldr	r0, [pc, #140]	; (8006bf4 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8006b68:	f004 f9e8 	bl	800af3c <HAL_GPIO_Init>
}
 8006b6c:	e033      	b.n	8006bd6 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d12e      	bne.n	8006bd6 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b80:	f043 0304 	orr.w	r3, r3, #4
 8006b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b88:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b9c:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006b9e:	f043 0308 	orr.w	r3, r3, #8
 8006ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006bb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bce:	4619      	mov	r1, r3
 8006bd0:	480a      	ldr	r0, [pc, #40]	; (8006bfc <HAL_TIM_Encoder_MspInit+0x1e0>)
 8006bd2:	f004 f9b3 	bl	800af3c <HAL_GPIO_Init>
}
 8006bd6:	bf00      	nop
 8006bd8:	3740      	adds	r7, #64	; 0x40
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000
 8006be4:	58024400 	.word	0x58024400
 8006be8:	58021000 	.word	0x58021000
 8006bec:	58020000 	.word	0x58020000
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	58020800 	.word	0x58020800
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	58020c00 	.word	0x58020c00

08006c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a4d      	ldr	r2, [pc, #308]	; (8006d44 <HAL_TIM_Base_MspInit+0x144>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d10f      	bne.n	8006c32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006c12:	4b4d      	ldr	r3, [pc, #308]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c18:	4a4b      	ldr	r2, [pc, #300]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c22:	4b49      	ldr	r3, [pc, #292]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8006c30:	e084      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM13)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a45      	ldr	r2, [pc, #276]	; (8006d4c <HAL_TIM_Base_MspInit+0x14c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10f      	bne.n	8006c5c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006c3c:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c42:	4a41      	ldr	r2, [pc, #260]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c4c:	4b3e      	ldr	r3, [pc, #248]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
}
 8006c5a:	e06f      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM14)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a3b      	ldr	r2, [pc, #236]	; (8006d50 <HAL_TIM_Base_MspInit+0x150>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10f      	bne.n	8006c86 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006c66:	4b38      	ldr	r3, [pc, #224]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c6c:	4a36      	ldr	r2, [pc, #216]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c76:	4b34      	ldr	r3, [pc, #208]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	69fb      	ldr	r3, [r7, #28]
}
 8006c84:	e05a      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM16)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <HAL_TIM_Base_MspInit+0x154>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10f      	bne.n	8006cb0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c90:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c96:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	69bb      	ldr	r3, [r7, #24]
}
 8006cae:	e045      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM17)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <HAL_TIM_Base_MspInit+0x158>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d10f      	bne.n	8006cda <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cc0:	4a21      	ldr	r2, [pc, #132]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006cca:	4b1f      	ldr	r3, [pc, #124]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	697b      	ldr	r3, [r7, #20]
}
 8006cd8:	e030      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM23)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <HAL_TIM_Base_MspInit+0x15c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10f      	bne.n	8006d04 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006ce6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cea:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006cf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	693b      	ldr	r3, [r7, #16]
}
 8006d02:	e01b      	b.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM24)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <HAL_TIM_Base_MspInit+0x160>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d116      	bne.n	8006d3c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006d10:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006d14:	4a0c      	ldr	r2, [pc, #48]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d1a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <HAL_TIM_Base_MspInit+0x148>)
 8006d20:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	20a2      	movs	r0, #162	; 0xa2
 8006d32:	f002 fc0e 	bl	8009552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8006d36:	20a2      	movs	r0, #162	; 0xa2
 8006d38:	f002 fc25 	bl	8009586 <HAL_NVIC_EnableIRQ>
}
 8006d3c:	bf00      	nop
 8006d3e:	3728      	adds	r7, #40	; 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40001800 	.word	0x40001800
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	40001c00 	.word	0x40001c00
 8006d50:	40002000 	.word	0x40002000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800
 8006d5c:	4000e000 	.word	0x4000e000
 8006d60:	4000e400 	.word	0x4000e400

08006d64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0b      	ldr	r2, [pc, #44]	; (8006da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10e      	bne.n	8006d94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <HAL_TIM_PWM_MspInit+0x40>)
 8006d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d7c:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <HAL_TIM_PWM_MspInit+0x40>)
 8006d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <HAL_TIM_PWM_MspInit+0x40>)
 8006d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40014000 	.word	0x40014000
 8006da4:	58024400 	.word	0x58024400

08006da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08e      	sub	sp, #56	; 0x38
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	609a      	str	r2, [r3, #8]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a70      	ldr	r2, [pc, #448]	; (8006f88 <HAL_TIM_MspPostInit+0x1e0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d120      	bne.n	8006e0c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dca:	4b70      	ldr	r3, [pc, #448]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dd0:	4a6e      	ldr	r2, [pc, #440]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006dd2:	f043 0302 	orr.w	r3, r3, #2
 8006dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dda:	4b6c      	ldr	r3, [pc, #432]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dee:	2302      	movs	r3, #2
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df6:	2300      	movs	r3, #0
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e02:	4619      	mov	r1, r3
 8006e04:	4862      	ldr	r0, [pc, #392]	; (8006f90 <HAL_TIM_MspPostInit+0x1e8>)
 8006e06:	f004 f899 	bl	800af3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006e0a:	e0b9      	b.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM13)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a60      	ldr	r2, [pc, #384]	; (8006f94 <HAL_TIM_MspPostInit+0x1ec>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d11f      	bne.n	8006e56 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e16:	4b5d      	ldr	r3, [pc, #372]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e1c:	4a5b      	ldr	r2, [pc, #364]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e26:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e40:	2300      	movs	r3, #0
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006e44:	2309      	movs	r3, #9
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4852      	ldr	r0, [pc, #328]	; (8006f98 <HAL_TIM_MspPostInit+0x1f0>)
 8006e50:	f004 f874 	bl	800af3c <HAL_GPIO_Init>
}
 8006e54:	e094      	b.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM14)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a50      	ldr	r2, [pc, #320]	; (8006f9c <HAL_TIM_MspPostInit+0x1f4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d11f      	bne.n	8006ea0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e60:	4b4a      	ldr	r3, [pc, #296]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e66:	4a49      	ldr	r2, [pc, #292]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e70:	4b46      	ldr	r3, [pc, #280]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006e7e:	2380      	movs	r3, #128	; 0x80
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e82:	2302      	movs	r3, #2
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006e8e:	2309      	movs	r3, #9
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e96:	4619      	mov	r1, r3
 8006e98:	483f      	ldr	r0, [pc, #252]	; (8006f98 <HAL_TIM_MspPostInit+0x1f0>)
 8006e9a:	f004 f84f 	bl	800af3c <HAL_GPIO_Init>
}
 8006e9e:	e06f      	b.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM15)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <HAL_TIM_MspPostInit+0x1f8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d11f      	bne.n	8006eea <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eaa:	4b38      	ldr	r3, [pc, #224]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eb0:	4a36      	ldr	r2, [pc, #216]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eba:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ec8:	2308      	movs	r3, #8
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006ed8:	2304      	movs	r3, #4
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	482d      	ldr	r0, [pc, #180]	; (8006f98 <HAL_TIM_MspPostInit+0x1f0>)
 8006ee4:	f004 f82a 	bl	800af3c <HAL_GPIO_Init>
}
 8006ee8:	e04a      	b.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM16)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <HAL_TIM_MspPostInit+0x1fc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d120      	bne.n	8006f36 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006efa:	4a24      	ldr	r2, [pc, #144]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006efc:	f043 0302 	orr.w	r3, r3, #2
 8006f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f20:	2300      	movs	r3, #0
 8006f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006f24:	2301      	movs	r3, #1
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4818      	ldr	r0, [pc, #96]	; (8006f90 <HAL_TIM_MspPostInit+0x1e8>)
 8006f30:	f004 f804 	bl	800af3c <HAL_GPIO_Init>
}
 8006f34:	e024      	b.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM17)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <HAL_TIM_MspPostInit+0x200>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d11f      	bne.n	8006f80 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f46:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006f48:	f043 0302 	orr.w	r3, r3, #2
 8006f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_TIM_MspPostInit+0x1e4>)
 8006f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f64:	2302      	movs	r3, #2
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8006f70:	2301      	movs	r3, #1
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <HAL_TIM_MspPostInit+0x1e8>)
 8006f7c:	f003 ffde 	bl	800af3c <HAL_GPIO_Init>
}
 8006f80:	bf00      	nop
 8006f82:	3738      	adds	r7, #56	; 0x38
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40001800 	.word	0x40001800
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	58020400 	.word	0x58020400
 8006f94:	40001c00 	.word	0x40001c00
 8006f98:	58020000 	.word	0x58020000
 8006f9c:	40002000 	.word	0x40002000
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800

08006fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b0bc      	sub	sp, #240	; 0xf0
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fc8:	22b4      	movs	r2, #180	; 0xb4
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f009 ffb9 	bl	8010f44 <memset>
  if(huart->Instance==UART4)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4aa8      	ldr	r2, [pc, #672]	; (8007278 <HAL_UART_MspInit+0x2cc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d143      	bne.n	8007064 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fea:	4618      	mov	r0, r3
 8006fec:	f005 f920 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006ff6:	f7ff fbdb 	bl	80067b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006ffa:	4ba0      	ldr	r3, [pc, #640]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8006ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007000:	4a9e      	ldr	r2, [pc, #632]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800700a:	4b9c      	ldr	r3, [pc, #624]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800700c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007018:	4b98      	ldr	r3, [pc, #608]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800701a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800701e:	4a97      	ldr	r2, [pc, #604]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007028:	4b94      	ldr	r3, [pc, #592]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800702a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007036:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800703a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703e:	2302      	movs	r3, #2
 8007040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800704a:	2300      	movs	r3, #0
 800704c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8007050:	2306      	movs	r3, #6
 8007052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007056:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800705a:	4619      	mov	r1, r3
 800705c:	4888      	ldr	r0, [pc, #544]	; (8007280 <HAL_UART_MspInit+0x2d4>)
 800705e:	f003 ff6d 	bl	800af3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007062:	e105      	b.n	8007270 <HAL_UART_MspInit+0x2c4>
  else if(huart->Instance==UART5)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a86      	ldr	r2, [pc, #536]	; (8007284 <HAL_UART_MspInit+0x2d8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d143      	bne.n	80070f6 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800706e:	2302      	movs	r3, #2
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007072:	2300      	movs	r3, #0
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800707c:	4618      	mov	r0, r3
 800707e:	f005 f8d7 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8007088:	f7ff fb92 	bl	80067b0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800708c:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800708e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007092:	4a7a      	ldr	r2, [pc, #488]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007098:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800709c:	4b77      	ldr	r3, [pc, #476]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800709e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070aa:	4b74      	ldr	r3, [pc, #464]	; (800727c <HAL_UART_MspInit+0x2d0>)
 80070ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070b0:	4a72      	ldr	r2, [pc, #456]	; (800727c <HAL_UART_MspInit+0x2d0>)
 80070b2:	f043 0302 	orr.w	r3, r3, #2
 80070b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070ba:	4b70      	ldr	r3, [pc, #448]	; (800727c <HAL_UART_MspInit+0x2d0>)
 80070bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80070c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80070cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d0:	2302      	movs	r3, #2
 80070d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80070e2:	230e      	movs	r3, #14
 80070e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80070ec:	4619      	mov	r1, r3
 80070ee:	4866      	ldr	r0, [pc, #408]	; (8007288 <HAL_UART_MspInit+0x2dc>)
 80070f0:	f003 ff24 	bl	800af3c <HAL_GPIO_Init>
}
 80070f4:	e0bc      	b.n	8007270 <HAL_UART_MspInit+0x2c4>
  else if(huart->Instance==USART2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a64      	ldr	r2, [pc, #400]	; (800728c <HAL_UART_MspInit+0x2e0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d16f      	bne.n	80071e0 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007100:	2302      	movs	r3, #2
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800710a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800710e:	4618      	mov	r0, r3
 8007110:	f005 f88e 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800711a:	f7ff fb49 	bl	80067b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800711e:	4b57      	ldr	r3, [pc, #348]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007124:	4a55      	ldr	r2, [pc, #340]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800712a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800712e:	4b53      	ldr	r3, [pc, #332]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800713c:	4b4f      	ldr	r3, [pc, #316]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800713e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007142:	4a4e      	ldr	r2, [pc, #312]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007144:	f043 0308 	orr.w	r3, r3, #8
 8007148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800714c:	4b4b      	ldr	r3, [pc, #300]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800714e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800715a:	2360      	movs	r3, #96	; 0x60
 800715c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007160:	2302      	movs	r3, #2
 8007162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	2300      	movs	r3, #0
 8007168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716c:	2300      	movs	r3, #0
 800716e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007172:	2307      	movs	r3, #7
 8007174:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800717c:	4619      	mov	r1, r3
 800717e:	4844      	ldr	r0, [pc, #272]	; (8007290 <HAL_UART_MspInit+0x2e4>)
 8007180:	f003 fedc 	bl	800af3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8007184:	4b43      	ldr	r3, [pc, #268]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 8007186:	4a44      	ldr	r2, [pc, #272]	; (8007298 <HAL_UART_MspInit+0x2ec>)
 8007188:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800718a:	4b42      	ldr	r3, [pc, #264]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 800718c:	222b      	movs	r2, #43	; 0x2b
 800718e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007196:	4b3f      	ldr	r3, [pc, #252]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 8007198:	2200      	movs	r2, #0
 800719a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800719c:	4b3d      	ldr	r3, [pc, #244]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 800719e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071a4:	4b3b      	ldr	r3, [pc, #236]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071aa:	4b3a      	ldr	r3, [pc, #232]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80071b0:	4b38      	ldr	r3, [pc, #224]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071be:	2200      	movs	r2, #0
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80071c2:	4834      	ldr	r0, [pc, #208]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071c4:	f002 f9fa 	bl	80095bc <HAL_DMA_Init>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 80071ce:	f7ff faef 	bl	80067b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80071d8:	4a2e      	ldr	r2, [pc, #184]	; (8007294 <HAL_UART_MspInit+0x2e8>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80071de:	e047      	b.n	8007270 <HAL_UART_MspInit+0x2c4>
  else if(huart->Instance==USART3)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2d      	ldr	r2, [pc, #180]	; (800729c <HAL_UART_MspInit+0x2f0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d142      	bne.n	8007270 <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80071ea:	2302      	movs	r3, #2
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071f8:	4618      	mov	r0, r3
 80071fa:	f005 f819 	bl	800c230 <HAL_RCCEx_PeriphCLKConfig>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8007204:	f7ff fad4 	bl	80067b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800720a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800720e:	4a1b      	ldr	r2, [pc, #108]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007214:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007218:	4b18      	ldr	r3, [pc, #96]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800721a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800721e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007226:	4b15      	ldr	r3, [pc, #84]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_UART_MspInit+0x2d0>)
 800722e:	f043 0302 	orr.w	r3, r3, #2
 8007232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <HAL_UART_MspInit+0x2d0>)
 8007238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007244:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724c:	2302      	movs	r3, #2
 800724e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007258:	2300      	movs	r3, #0
 800725a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800725e:	2307      	movs	r3, #7
 8007260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007264:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007268:	4619      	mov	r1, r3
 800726a:	4807      	ldr	r0, [pc, #28]	; (8007288 <HAL_UART_MspInit+0x2dc>)
 800726c:	f003 fe66 	bl	800af3c <HAL_GPIO_Init>
}
 8007270:	bf00      	nop
 8007272:	37f0      	adds	r7, #240	; 0xf0
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40004c00 	.word	0x40004c00
 800727c:	58024400 	.word	0x58024400
 8007280:	58020000 	.word	0x58020000
 8007284:	40005000 	.word	0x40005000
 8007288:	58020400 	.word	0x58020400
 800728c:	40004400 	.word	0x40004400
 8007290:	58020c00 	.word	0x58020c00
 8007294:	24000258 	.word	0x24000258
 8007298:	40020010 	.word	0x40020010
 800729c:	40004800 	.word	0x40004800

080072a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80072a4:	f004 ffa8 	bl	800c1f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072a8:	e7fe      	b.n	80072a8 <NMI_Handler+0x8>

080072aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ae:	e7fe      	b.n	80072ae <HardFault_Handler+0x4>

080072b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072b4:	e7fe      	b.n	80072b4 <MemManage_Handler+0x4>

080072b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072b6:	b480      	push	{r7}
 80072b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072ba:	e7fe      	b.n	80072ba <BusFault_Handler+0x4>

080072bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072c0:	e7fe      	b.n	80072c0 <UsageFault_Handler+0x4>

080072c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072de:	b480      	push	{r7}
 80072e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072e2:	bf00      	nop
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072f0:	f000 f9fa 	bl	80076e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80072fc:	4802      	ldr	r0, [pc, #8]	; (8007308 <DMA1_Stream0_IRQHandler+0x10>)
 80072fe:	f002 fcb7 	bl	8009c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007302:	bf00      	nop
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	24000258 	.word	0x24000258

0800730c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8007310:	4802      	ldr	r0, [pc, #8]	; (800731c <ADC3_IRQHandler+0x10>)
 8007312:	f000 fe99 	bl	8008048 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	24000618 	.word	0x24000618

08007320 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8007324:	4802      	ldr	r0, [pc, #8]	; (8007330 <TIM24_IRQHandler+0x10>)
 8007326:	f007 fb11 	bl	800e94c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	2400020c 	.word	0x2400020c

08007334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
	return 1;
 8007338:	2301      	movs	r3, #1
}
 800733a:	4618      	mov	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <_kill>:

int _kill(int pid, int sig)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800734e:	f009 fdc1 	bl	8010ed4 <__errno>
 8007352:	4603      	mov	r3, r0
 8007354:	2216      	movs	r2, #22
 8007356:	601a      	str	r2, [r3, #0]
	return -1;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <_exit>:

void _exit (int status)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800736c:	f04f 31ff 	mov.w	r1, #4294967295
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ffe7 	bl	8007344 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007376:	e7fe      	b.n	8007376 <_exit+0x12>

08007378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e00a      	b.n	80073a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800738a:	f3af 8000 	nop.w
 800738e:	4601      	mov	r1, r0
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	60ba      	str	r2, [r7, #8]
 8007396:	b2ca      	uxtb	r2, r1
 8007398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	3301      	adds	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	dbf0      	blt.n	800738a <_read+0x12>
	}

return len;
 80073a8:	687b      	ldr	r3, [r7, #4]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b086      	sub	sp, #24
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	e009      	b.n	80073d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	60ba      	str	r2, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff f9dd 	bl	800678c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	dbf1      	blt.n	80073c4 <_write+0x12>
	}
	return len;
 80073e0:	687b      	ldr	r3, [r7, #4]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <_close>:

int _close(int file)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
	return -1;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007412:	605a      	str	r2, [r3, #4]
	return 0;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <_isatty>:

int _isatty(int file)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
	return 1;
 800742a:	2301      	movs	r3, #1
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
	return 0;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800745c:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <_sbrk+0x5c>)
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <_sbrk+0x60>)
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007468:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <_sbrk+0x64>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <_sbrk+0x64>)
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <_sbrk+0x68>)
 8007474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <_sbrk+0x64>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d207      	bcs.n	8007494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007484:	f009 fd26 	bl	8010ed4 <__errno>
 8007488:	4603      	mov	r3, r0
 800748a:	220c      	movs	r2, #12
 800748c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295
 8007492:	e009      	b.n	80074a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <_sbrk+0x64>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <_sbrk+0x64>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4413      	add	r3, r2
 80074a2:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <_sbrk+0x64>)
 80074a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	24050000 	.word	0x24050000
 80074b4:	00000400 	.word	0x00000400
 80074b8:	24000200 	.word	0x24000200
 80074bc:	24000a58 	.word	0x24000a58

080074c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80074c4:	4b32      	ldr	r3, [pc, #200]	; (8007590 <SystemInit+0xd0>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	4a31      	ldr	r2, [pc, #196]	; (8007590 <SystemInit+0xd0>)
 80074cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80074d4:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <SystemInit+0xd4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d807      	bhi.n	80074f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80074e0:	4b2c      	ldr	r3, [pc, #176]	; (8007594 <SystemInit+0xd4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f023 030f 	bic.w	r3, r3, #15
 80074e8:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <SystemInit+0xd4>)
 80074ea:	f043 0307 	orr.w	r3, r3, #7
 80074ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80074f0:	4b29      	ldr	r3, [pc, #164]	; (8007598 <SystemInit+0xd8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a28      	ldr	r2, [pc, #160]	; (8007598 <SystemInit+0xd8>)
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80074fc:	4b26      	ldr	r3, [pc, #152]	; (8007598 <SystemInit+0xd8>)
 80074fe:	2200      	movs	r2, #0
 8007500:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007502:	4b25      	ldr	r3, [pc, #148]	; (8007598 <SystemInit+0xd8>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4924      	ldr	r1, [pc, #144]	; (8007598 <SystemInit+0xd8>)
 8007508:	4b24      	ldr	r3, [pc, #144]	; (800759c <SystemInit+0xdc>)
 800750a:	4013      	ands	r3, r2
 800750c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800750e:	4b21      	ldr	r3, [pc, #132]	; (8007594 <SystemInit+0xd4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800751a:	4b1e      	ldr	r3, [pc, #120]	; (8007594 <SystemInit+0xd4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f023 030f 	bic.w	r3, r3, #15
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <SystemInit+0xd4>)
 8007524:	f043 0307 	orr.w	r3, r3, #7
 8007528:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800752a:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <SystemInit+0xd8>)
 800752c:	2200      	movs	r2, #0
 800752e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007530:	4b19      	ldr	r3, [pc, #100]	; (8007598 <SystemInit+0xd8>)
 8007532:	2200      	movs	r2, #0
 8007534:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <SystemInit+0xd8>)
 8007538:	2200      	movs	r2, #0
 800753a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800753c:	4b16      	ldr	r3, [pc, #88]	; (8007598 <SystemInit+0xd8>)
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <SystemInit+0xe0>)
 8007540:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007542:	4b15      	ldr	r3, [pc, #84]	; (8007598 <SystemInit+0xd8>)
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <SystemInit+0xe4>)
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007548:	4b13      	ldr	r3, [pc, #76]	; (8007598 <SystemInit+0xd8>)
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <SystemInit+0xe8>)
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800754e:	4b12      	ldr	r3, [pc, #72]	; (8007598 <SystemInit+0xd8>)
 8007550:	2200      	movs	r2, #0
 8007552:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007554:	4b10      	ldr	r3, [pc, #64]	; (8007598 <SystemInit+0xd8>)
 8007556:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <SystemInit+0xe8>)
 8007558:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800755a:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <SystemInit+0xd8>)
 800755c:	2200      	movs	r2, #0
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <SystemInit+0xd8>)
 8007562:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <SystemInit+0xe8>)
 8007564:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <SystemInit+0xd8>)
 8007568:	2200      	movs	r2, #0
 800756a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <SystemInit+0xd8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a09      	ldr	r2, [pc, #36]	; (8007598 <SystemInit+0xd8>)
 8007572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <SystemInit+0xd8>)
 800757a:	2200      	movs	r2, #0
 800757c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800757e:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <SystemInit+0xec>)
 8007580:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007584:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007586:	bf00      	nop
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	e000ed00 	.word	0xe000ed00
 8007594:	52002000 	.word	0x52002000
 8007598:	58024400 	.word	0x58024400
 800759c:	eaf6ed7f 	.word	0xeaf6ed7f
 80075a0:	02020200 	.word	0x02020200
 80075a4:	01ff0000 	.word	0x01ff0000
 80075a8:	01010280 	.word	0x01010280
 80075ac:	52004000 	.word	0x52004000

080075b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80075b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80075b4:	f7ff ff84 	bl	80074c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075b8:	480c      	ldr	r0, [pc, #48]	; (80075ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80075ba:	490d      	ldr	r1, [pc, #52]	; (80075f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80075bc:	4a0d      	ldr	r2, [pc, #52]	; (80075f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80075be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075c0:	e002      	b.n	80075c8 <LoopCopyDataInit>

080075c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075c6:	3304      	adds	r3, #4

080075c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075cc:	d3f9      	bcc.n	80075c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075ce:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80075d0:	4c0a      	ldr	r4, [pc, #40]	; (80075fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80075d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075d4:	e001      	b.n	80075da <LoopFillZerobss>

080075d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075d8:	3204      	adds	r2, #4

080075da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075dc:	d3fb      	bcc.n	80075d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075de:	f009 fc7f 	bl	8010ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075e2:	f7fd ff49 	bl	8005478 <main>
  bx  lr
 80075e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80075ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80075f0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80075f4:	08014a60 	.word	0x08014a60
  ldr r2, =_sbss
 80075f8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80075fc:	24000a58 	.word	0x24000a58

08007600 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007600:	e7fe      	b.n	8007600 <ADC_IRQHandler>
	...

08007604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800760a:	2003      	movs	r0, #3
 800760c:	f001 ff96 	bl	800953c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007610:	f004 fc1c 	bl	800be4c <HAL_RCC_GetSysClockFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <HAL_Init+0x68>)
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	4913      	ldr	r1, [pc, #76]	; (8007670 <HAL_Init+0x6c>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_Init+0x68>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	4a0e      	ldr	r2, [pc, #56]	; (8007670 <HAL_Init+0x6c>)
 8007638:	5cd3      	ldrb	r3, [r2, r3]
 800763a:	f003 031f 	and.w	r3, r3, #31
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	fa22 f303 	lsr.w	r3, r2, r3
 8007644:	4a0b      	ldr	r2, [pc, #44]	; (8007674 <HAL_Init+0x70>)
 8007646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007648:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <HAL_Init+0x74>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800764e:	2000      	movs	r0, #0
 8007650:	f000 f814 	bl	800767c <HAL_InitTick>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e002      	b.n	8007664 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800765e:	f7ff f8ad 	bl	80067bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	58024400 	.word	0x58024400
 8007670:	08014450 	.word	0x08014450
 8007674:	24000004 	.word	0x24000004
 8007678:	24000000 	.word	0x24000000

0800767c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <HAL_InitTick+0x60>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e021      	b.n	80076d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <HAL_InitTick+0x64>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	4b11      	ldr	r3, [pc, #68]	; (80076dc <HAL_InitTick+0x60>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800769e:	fbb3 f3f1 	udiv	r3, r3, r1
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 ff7b 	bl	80095a2 <HAL_SYSTICK_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e00e      	b.n	80076d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b0f      	cmp	r3, #15
 80076ba:	d80a      	bhi.n	80076d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076bc:	2200      	movs	r2, #0
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	f001 ff45 	bl	8009552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076c8:	4a06      	ldr	r2, [pc, #24]	; (80076e4 <HAL_InitTick+0x68>)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	2400000c 	.word	0x2400000c
 80076e0:	24000000 	.word	0x24000000
 80076e4:	24000008 	.word	0x24000008

080076e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_IncTick+0x20>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	4b06      	ldr	r3, [pc, #24]	; (800770c <HAL_IncTick+0x24>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4413      	add	r3, r2
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <HAL_IncTick+0x24>)
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	2400000c 	.word	0x2400000c
 800770c:	24000a44 	.word	0x24000a44

08007710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return uwTick;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <HAL_GetTick+0x14>)
 8007716:	681b      	ldr	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	24000a44 	.word	0x24000a44

08007728 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	609a      	str	r2, [r3, #8]
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	609a      	str	r2, [r3, #8]
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3360      	adds	r3, #96	; 0x60
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <LL_ADC_SetOffset+0x60>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10b      	bne.n	80077cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80077ca:	e00b      	b.n	80077e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	430b      	orrs	r3, r1
 80077de:	431a      	orrs	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	58026000 	.word	0x58026000

080077f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3360      	adds	r3, #96	; 0x60
 8007802:	461a      	mov	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	fa01 f303 	lsl.w	r3, r1, r3
 8007840:	431a      	orrs	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	611a      	str	r2, [r3, #16]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00e      	beq.n	8007886 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3360      	adds	r3, #96	; 0x60
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	431a      	orrs	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	601a      	str	r2, [r3, #0]
  }
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	58026000 	.word	0x58026000

08007898 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10e      	bne.n	80078ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3360      	adds	r3, #96	; 0x60
 80078b0:	461a      	mov	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	58026000 	.word	0x58026000

080078dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a0c      	ldr	r2, [pc, #48]	; (800791c <LL_ADC_SetOffsetSign+0x40>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10e      	bne.n	800790e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3360      	adds	r3, #96	; 0x60
 80078f4:	461a      	mov	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	431a      	orrs	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	58026000 	.word	0x58026000

08007920 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3360      	adds	r3, #96	; 0x60
 8007930:	461a      	mov	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <LL_ADC_SetOffsetState+0x50>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d108      	bne.n	8007954 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	431a      	orrs	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8007952:	e007      	b.n	8007964 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	431a      	orrs	r2, r3
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	601a      	str	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	58026000 	.word	0x58026000

08007974 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800799a:	b480      	push	{r7}
 800799c:	b087      	sub	sp, #28
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3330      	adds	r3, #48	; 0x30
 80079aa:	461a      	mov	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f003 030c 	and.w	r3, r3, #12
 80079b6:	4413      	add	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	211f      	movs	r1, #31
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	401a      	ands	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	0e9b      	lsrs	r3, r3, #26
 80079d2:	f003 011f 	and.w	r1, r3, #31
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	431a      	orrs	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3314      	adds	r3, #20
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	0e5b      	lsrs	r3, r3, #25
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	4413      	add	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	0d1b      	lsrs	r3, r3, #20
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	2107      	movs	r1, #7
 8007a46:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	0d1b      	lsrs	r3, r3, #20
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d115      	bne.n	8007ab0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0318 	and.w	r3, r3, #24
 8007a9a:	4914      	ldr	r1, [pc, #80]	; (8007aec <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007a9c:	40d9      	lsrs	r1, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	400b      	ands	r3, r1
 8007aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8007aae:	e014      	b.n	8007ada <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007abc:	43db      	mvns	r3, r3
 8007abe:	401a      	ands	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0318 	and.w	r3, r3, #24
 8007ac6:	4909      	ldr	r1, [pc, #36]	; (8007aec <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007ac8:	40d9      	lsrs	r1, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	400b      	ands	r3, r1
 8007ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	58026000 	.word	0x58026000
 8007aec:	000fffff 	.word	0x000fffff

08007af0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 031f 	and.w	r3, r3, #31
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6093      	str	r3, [r2, #8]
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	5fffffc0 	.word	0x5fffffc0

08007b4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b60:	d101      	bne.n	8007b66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <LL_ADC_EnableInternalRegulator+0x24>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	6fffffc0 	.word	0x6fffffc0

08007b9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb0:	d101      	bne.n	8007bb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <LL_ADC_IsEnabled+0x18>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <LL_ADC_IsEnabled+0x1a>
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d101      	bne.n	8007c02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d101      	bne.n	8007c28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b089      	sub	sp, #36	; 0x24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e1ee      	b.n	8008030 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7fe fdc5 	bl	80067f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff ff67 	bl	8007b4c <LL_ADC_IsDeepPowerDownEnabled>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff ff4d 	bl	8007b28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff ff82 	bl	8007b9c <LL_ADC_IsInternalRegulatorEnabled>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d114      	bne.n	8007cc8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ff66 	bl	8007b74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007ca8:	4b8e      	ldr	r3, [pc, #568]	; (8007ee4 <HAL_ADC_Init+0x2ac>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	099b      	lsrs	r3, r3, #6
 8007cae:	4a8e      	ldr	r2, [pc, #568]	; (8007ee8 <HAL_ADC_Init+0x2b0>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	099b      	lsrs	r3, r3, #6
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007cba:	e002      	b.n	8007cc2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f9      	bne.n	8007cbc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff ff65 	bl	8007b9c <LL_ADC_IsInternalRegulatorEnabled>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cdc:	f043 0210 	orr.w	r2, r3, #16
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce8:	f043 0201 	orr.w	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff ff76 	bl	8007bea <LL_ADC_REG_IsConversionOngoing>
 8007cfe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f040 8188 	bne.w	800801e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 8184 	bne.w	800801e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007d1e:	f043 0202 	orr.w	r2, r3, #2
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff4a 	bl	8007bc4 <LL_ADC_IsEnabled>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d136      	bne.n	8007da4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a6c      	ldr	r2, [pc, #432]	; (8007eec <HAL_ADC_Init+0x2b4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <HAL_ADC_Init+0x112>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6a      	ldr	r2, [pc, #424]	; (8007ef0 <HAL_ADC_Init+0x2b8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d10e      	bne.n	8007d68 <HAL_ADC_Init+0x130>
 8007d4a:	4868      	ldr	r0, [pc, #416]	; (8007eec <HAL_ADC_Init+0x2b4>)
 8007d4c:	f7ff ff3a 	bl	8007bc4 <LL_ADC_IsEnabled>
 8007d50:	4604      	mov	r4, r0
 8007d52:	4867      	ldr	r0, [pc, #412]	; (8007ef0 <HAL_ADC_Init+0x2b8>)
 8007d54:	f7ff ff36 	bl	8007bc4 <LL_ADC_IsEnabled>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4323      	orrs	r3, r4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	e008      	b.n	8007d7a <HAL_ADC_Init+0x142>
 8007d68:	4862      	ldr	r0, [pc, #392]	; (8007ef4 <HAL_ADC_Init+0x2bc>)
 8007d6a:	f7ff ff2b 	bl	8007bc4 <LL_ADC_IsEnabled>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d012      	beq.n	8007da4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a5a      	ldr	r2, [pc, #360]	; (8007eec <HAL_ADC_Init+0x2b4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d004      	beq.n	8007d92 <HAL_ADC_Init+0x15a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a58      	ldr	r2, [pc, #352]	; (8007ef0 <HAL_ADC_Init+0x2b8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d101      	bne.n	8007d96 <HAL_ADC_Init+0x15e>
 8007d92:	4a59      	ldr	r2, [pc, #356]	; (8007ef8 <HAL_ADC_Init+0x2c0>)
 8007d94:	e000      	b.n	8007d98 <HAL_ADC_Init+0x160>
 8007d96:	4a59      	ldr	r2, [pc, #356]	; (8007efc <HAL_ADC_Init+0x2c4>)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7ff fcc2 	bl	8007728 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a52      	ldr	r2, [pc, #328]	; (8007ef4 <HAL_ADC_Init+0x2bc>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d129      	bne.n	8007e02 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7e5b      	ldrb	r3, [r3, #25]
 8007db2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007db8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007dbe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d013      	beq.n	8007df0 <HAL_ADC_Init+0x1b8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	d00d      	beq.n	8007dec <HAL_ADC_Init+0x1b4>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b1c      	cmp	r3, #28
 8007dd6:	d007      	beq.n	8007de8 <HAL_ADC_Init+0x1b0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b18      	cmp	r3, #24
 8007dde:	d101      	bne.n	8007de4 <HAL_ADC_Init+0x1ac>
 8007de0:	2318      	movs	r3, #24
 8007de2:	e006      	b.n	8007df2 <HAL_ADC_Init+0x1ba>
 8007de4:	2300      	movs	r3, #0
 8007de6:	e004      	b.n	8007df2 <HAL_ADC_Init+0x1ba>
 8007de8:	2310      	movs	r3, #16
 8007dea:	e002      	b.n	8007df2 <HAL_ADC_Init+0x1ba>
 8007dec:	2308      	movs	r3, #8
 8007dee:	e000      	b.n	8007df2 <HAL_ADC_Init+0x1ba>
 8007df0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007df2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dfa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
 8007e00:	e00e      	b.n	8007e20 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7e5b      	ldrb	r3, [r3, #25]
 8007e06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007e0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007e12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d106      	bne.n	8007e38 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	045b      	lsls	r3, r3, #17
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <HAL_ADC_Init+0x2bc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d115      	bne.n	8007e8a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <HAL_ADC_Init+0x2c8>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	69b9      	ldr	r1, [r7, #24]
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	611a      	str	r2, [r3, #16]
 8007e88:	e009      	b.n	8007e9e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <HAL_ADC_Init+0x2cc>)
 8007e92:	4013      	ands	r3, r2
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fea1 	bl	8007bea <LL_ADC_REG_IsConversionOngoing>
 8007ea8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff feae 	bl	8007c10 <LL_ADC_INJ_IsConversionOngoing>
 8007eb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 808e 	bne.w	8007fda <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f040 808a 	bne.w	8007fda <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <HAL_ADC_Init+0x2bc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d11b      	bne.n	8007f08 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7e1b      	ldrb	r3, [r3, #24]
 8007ed4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007edc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	e018      	b.n	8007f16 <HAL_ADC_Init+0x2de>
 8007ee4:	24000000 	.word	0x24000000
 8007ee8:	053e2d63 	.word	0x053e2d63
 8007eec:	40022000 	.word	0x40022000
 8007ef0:	40022100 	.word	0x40022100
 8007ef4:	58026000 	.word	0x58026000
 8007ef8:	40022300 	.word	0x40022300
 8007efc:	58026300 	.word	0x58026300
 8007f00:	fff04007 	.word	0xfff04007
 8007f04:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7e1b      	ldrb	r3, [r3, #24]
 8007f0c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	4b46      	ldr	r3, [pc, #280]	; (8008038 <HAL_ADC_Init+0x400>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	430b      	orrs	r3, r1
 8007f28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d137      	bne.n	8007fa4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a3f      	ldr	r2, [pc, #252]	; (800803c <HAL_ADC_Init+0x404>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d116      	bne.n	8007f72 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <HAL_ADC_Init+0x408>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f56:	4311      	orrs	r1, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f5c:	4311      	orrs	r1, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f62:	430a      	orrs	r2, r1
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	611a      	str	r2, [r3, #16]
 8007f70:	e020      	b.n	8007fb4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	4b32      	ldr	r3, [pc, #200]	; (8008044 <HAL_ADC_Init+0x40c>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f80:	3a01      	subs	r2, #1
 8007f82:	0411      	lsls	r1, r2, #16
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f88:	4311      	orrs	r1, r2
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f8e:	4311      	orrs	r1, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f94:	430a      	orrs	r2, r1
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0201 	orr.w	r2, r2, #1
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	e007      	b.n	8007fb4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1b      	ldr	r2, [pc, #108]	; (800803c <HAL_ADC_Init+0x404>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d002      	beq.n	8007fda <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 ffbb 	bl	8008f50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d10c      	bne.n	8007ffc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	f023 010f 	bic.w	r1, r3, #15
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	1e5a      	subs	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8007ffa:	e007      	b.n	800800c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 020f 	bic.w	r2, r2, #15
 800800a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	f043 0201 	orr.w	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	661a      	str	r2, [r3, #96]	; 0x60
 800801c:	e007      	b.n	800802e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008022:	f043 0210 	orr.w	r2, r3, #16
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800802e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3724      	adds	r7, #36	; 0x24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd90      	pop	{r4, r7, pc}
 8008038:	ffffbffc 	.word	0xffffbffc
 800803c:	58026000 	.word	0x58026000
 8008040:	fc00f81f 	.word	0xfc00f81f
 8008044:	fc00f81e 	.word	0xfc00f81e

08008048 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08a      	sub	sp, #40	; 0x28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008050:	2300      	movs	r3, #0
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a87      	ldr	r2, [pc, #540]	; (8008288 <HAL_ADC_IRQHandler+0x240>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_ADC_IRQHandler+0x30>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a86      	ldr	r2, [pc, #536]	; (800828c <HAL_ADC_IRQHandler+0x244>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d101      	bne.n	800807c <HAL_ADC_IRQHandler+0x34>
 8008078:	4b85      	ldr	r3, [pc, #532]	; (8008290 <HAL_ADC_IRQHandler+0x248>)
 800807a:	e000      	b.n	800807e <HAL_ADC_IRQHandler+0x36>
 800807c:	4b85      	ldr	r3, [pc, #532]	; (8008294 <HAL_ADC_IRQHandler+0x24c>)
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fd36 	bl	8007af0 <LL_ADC_GetMultimode>
 8008084:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d017      	beq.n	80080c0 <HAL_ADC_IRQHandler+0x78>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d012      	beq.n	80080c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 f886 	bl	80091c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2202      	movs	r2, #2
 80080be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <HAL_ADC_IRQHandler+0x8c>
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8083 	beq.w	80081e6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d07d      	beq.n	80081e6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fc34 	bl	8007974 <LL_ADC_REG_IsTriggerSourceSWStart>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d062      	beq.n	80081d8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a5d      	ldr	r2, [pc, #372]	; (800828c <HAL_ADC_IRQHandler+0x244>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d002      	beq.n	8008122 <HAL_ADC_IRQHandler+0xda>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	e000      	b.n	8008124 <HAL_ADC_IRQHandler+0xdc>
 8008122:	4b59      	ldr	r3, [pc, #356]	; (8008288 <HAL_ADC_IRQHandler+0x240>)
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	4293      	cmp	r3, r2
 800812a:	d008      	beq.n	800813e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b05      	cmp	r3, #5
 8008136:	d002      	beq.n	800813e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b09      	cmp	r3, #9
 800813c:	d104      	bne.n	8008148 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	623b      	str	r3, [r7, #32]
 8008146:	e00c      	b.n	8008162 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a4f      	ldr	r2, [pc, #316]	; (800828c <HAL_ADC_IRQHandler+0x244>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d002      	beq.n	8008158 <HAL_ADC_IRQHandler+0x110>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	e000      	b.n	800815a <HAL_ADC_IRQHandler+0x112>
 8008158:	4b4b      	ldr	r3, [pc, #300]	; (8008288 <HAL_ADC_IRQHandler+0x240>)
 800815a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d135      	bne.n	80081d8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b08      	cmp	r3, #8
 8008178:	d12e      	bne.n	80081d8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fd33 	bl	8007bea <LL_ADC_REG_IsConversionOngoing>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d11a      	bne.n	80081c0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 020c 	bic.w	r2, r2, #12
 8008198:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d112      	bne.n	80081d8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b6:	f043 0201 	orr.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	661a      	str	r2, [r3, #96]	; 0x60
 80081be:	e00b      	b.n	80081d8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c4:	f043 0210 	orr.w	r2, r3, #16
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d0:	f043 0201 	orr.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f96f 	bl	80084bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	220c      	movs	r2, #12
 80081e4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d004      	beq.n	80081fa <HAL_ADC_IRQHandler+0x1b2>
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80a0 	beq.w	8008346 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 809a 	beq.w	8008346 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	f003 0310 	and.w	r3, r3, #16
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008222:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fbdf 	bl	80079f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008234:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fb9a 	bl	8007974 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008240:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a11      	ldr	r2, [pc, #68]	; (800828c <HAL_ADC_IRQHandler+0x244>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d002      	beq.n	8008252 <HAL_ADC_IRQHandler+0x20a>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	e000      	b.n	8008254 <HAL_ADC_IRQHandler+0x20c>
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <HAL_ADC_IRQHandler+0x240>)
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6812      	ldr	r2, [r2, #0]
 8008258:	4293      	cmp	r3, r2
 800825a:	d008      	beq.n	800826e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b06      	cmp	r3, #6
 8008266:	d002      	beq.n	800826e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b07      	cmp	r3, #7
 800826c:	d104      	bne.n	8008278 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	623b      	str	r3, [r7, #32]
 8008276:	e014      	b.n	80082a2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a03      	ldr	r2, [pc, #12]	; (800828c <HAL_ADC_IRQHandler+0x244>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00a      	beq.n	8008298 <HAL_ADC_IRQHandler+0x250>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	e008      	b.n	800829a <HAL_ADC_IRQHandler+0x252>
 8008288:	40022000 	.word	0x40022000
 800828c:	40022100 	.word	0x40022100
 8008290:	40022300 	.word	0x40022300
 8008294:	58026300 	.word	0x58026300
 8008298:	4b84      	ldr	r3, [pc, #528]	; (80084ac <HAL_ADC_IRQHandler+0x464>)
 800829a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d047      	beq.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <HAL_ADC_IRQHandler+0x27a>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03f      	beq.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d13a      	bne.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d133      	bne.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d12e      	bne.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fc96 	bl	8007c10 <LL_ADC_INJ_IsConversionOngoing>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d11a      	bne.n	8008320 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80082f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d112      	bne.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008316:	f043 0201 	orr.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	661a      	str	r2, [r3, #96]	; 0x60
 800831e:	e00b      	b.n	8008338 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008324:	f043 0210 	orr.w	r2, r3, #16
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	f043 0201 	orr.w	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 ff1b 	bl	8009174 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2260      	movs	r2, #96	; 0x60
 8008344:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d011      	beq.n	8008374 <HAL_ADC_IRQHandler+0x32c>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00c      	beq.n	8008374 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f8b2 	bl	80084d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <HAL_ADC_IRQHandler+0x35c>
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 ff01 	bl	800919c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d012      	beq.n	80083d4 <HAL_ADC_IRQHandler+0x38c>
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00d      	beq.n	80083d4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fef3 	bl	80091b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d043      	beq.n	8008466 <HAL_ADC_IRQHandler+0x41e>
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d03e      	beq.n	8008466 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80083f0:	2301      	movs	r3, #1
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
 80083f4:	e021      	b.n	800843a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d015      	beq.n	8008428 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <HAL_ADC_IRQHandler+0x464>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_ADC_IRQHandler+0x3c8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a29      	ldr	r2, [pc, #164]	; (80084b0 <HAL_ADC_IRQHandler+0x468>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d101      	bne.n	8008414 <HAL_ADC_IRQHandler+0x3cc>
 8008410:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <HAL_ADC_IRQHandler+0x46c>)
 8008412:	e000      	b.n	8008416 <HAL_ADC_IRQHandler+0x3ce>
 8008414:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <HAL_ADC_IRQHandler+0x470>)
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff fb78 	bl	8007b0c <LL_ADC_GetMultiDMATransfer>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8008422:	2301      	movs	r3, #1
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	e008      	b.n	800843a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8008436:	2301      	movs	r3, #1
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10e      	bne.n	800845e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008450:	f043 0202 	orr.w	r2, r3, #2
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f843 	bl	80084e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2210      	movs	r2, #16
 8008464:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846c:	2b00      	cmp	r3, #0
 800846e:	d018      	beq.n	80084a2 <HAL_ADC_IRQHandler+0x45a>
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008476:	2b00      	cmp	r3, #0
 8008478:	d013      	beq.n	80084a2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800847e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848a:	f043 0208 	orr.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800849a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fe73 	bl	8009188 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80084a2:	bf00      	nop
 80084a4:	3728      	adds	r7, #40	; 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40022000 	.word	0x40022000
 80084b0:	40022100 	.word	0x40022100
 80084b4:	40022300 	.word	0x40022300
 80084b8:	58026300 	.word	0x58026300

080084bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b0b9      	sub	sp, #228	; 0xe4
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008512:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	4ab3      	ldr	r2, [pc, #716]	; (80087e8 <HAL_ADC_ConfigChannel+0x2f0>)
 800851a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d102      	bne.n	800852c <HAL_ADC_ConfigChannel+0x34>
 8008526:	2302      	movs	r3, #2
 8008528:	f000 bcfa 	b.w	8008f20 <HAL_ADC_ConfigChannel+0xa28>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fb56 	bl	8007bea <LL_ADC_REG_IsConversionOngoing>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	f040 84de 	bne.w	8008f02 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4aa8      	ldr	r2, [pc, #672]	; (80087ec <HAL_ADC_ConfigChannel+0x2f4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d033      	beq.n	80085b8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008558:	2b00      	cmp	r3, #0
 800855a:	d108      	bne.n	800856e <HAL_ADC_ConfigChannel+0x76>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	0e9b      	lsrs	r3, r3, #26
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	2201      	movs	r2, #1
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	e01d      	b.n	80085aa <HAL_ADC_ConfigChannel+0xb2>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800857a:	fa93 f3a3 	rbit	r3, r3
 800857e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800858a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8008592:	2320      	movs	r3, #32
 8008594:	e004      	b.n	80085a0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8008596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800859a:	fab3 f383 	clz	r3, r3
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2201      	movs	r2, #1
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	69d1      	ldr	r1, [r2, #28]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	430b      	orrs	r3, r1
 80085b6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6859      	ldr	r1, [r3, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f7ff f9e8 	bl	800799a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fb0b 	bl	8007bea <LL_ADC_REG_IsConversionOngoing>
 80085d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fb17 	bl	8007c10 <LL_ADC_INJ_IsConversionOngoing>
 80085e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80085e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 8270 	bne.w	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80085f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 826b 	bne.w	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6819      	ldr	r1, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	461a      	mov	r2, r3
 8008608:	f7ff fa06 	bl	8007a18 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a76      	ldr	r2, [pc, #472]	; (80087ec <HAL_ADC_ConfigChannel+0x2f4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d10d      	bne.n	8008632 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008630:	e032      	b.n	8008698 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008632:	4b6f      	ldr	r3, [pc, #444]	; (80087f0 <HAL_ADC_ConfigChannel+0x2f8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800863a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800863e:	d10b      	bne.n	8008658 <HAL_ADC_ConfigChannel+0x160>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	e01d      	b.n	8008694 <HAL_ADC_ConfigChannel+0x19c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10b      	bne.n	800867e <HAL_ADC_ConfigChannel+0x186>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695a      	ldr	r2, [r3, #20]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	089b      	lsrs	r3, r3, #2
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	e00a      	b.n	8008694 <HAL_ADC_ConfigChannel+0x19c>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	089b      	lsrs	r3, r3, #2
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b04      	cmp	r3, #4
 800869e:	d048      	beq.n	8008732 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6919      	ldr	r1, [r3, #16]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086b0:	f7ff f86e 	bl	8007790 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a4c      	ldr	r2, [pc, #304]	; (80087ec <HAL_ADC_ConfigChannel+0x2f4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d119      	bne.n	80086f2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6919      	ldr	r1, [r3, #16]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7ff f906 	bl	80078dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	6919      	ldr	r1, [r3, #16]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <HAL_ADC_ConfigChannel+0x1f0>
 80086e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086e6:	e000      	b.n	80086ea <HAL_ADC_ConfigChannel+0x1f2>
 80086e8:	2300      	movs	r3, #0
 80086ea:	461a      	mov	r2, r3
 80086ec:	f7ff f8d4 	bl	8007898 <LL_ADC_SetOffsetSaturation>
 80086f0:	e1ee      	b.n	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6919      	ldr	r1, [r3, #16]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008700:	2b01      	cmp	r3, #1
 8008702:	d102      	bne.n	800870a <HAL_ADC_ConfigChannel+0x212>
 8008704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008708:	e000      	b.n	800870c <HAL_ADC_ConfigChannel+0x214>
 800870a:	2300      	movs	r3, #0
 800870c:	461a      	mov	r2, r3
 800870e:	f7ff f8a1 	bl	8007854 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6919      	ldr	r1, [r3, #16]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	7e1b      	ldrb	r3, [r3, #24]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d102      	bne.n	8008728 <HAL_ADC_ConfigChannel+0x230>
 8008722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008726:	e000      	b.n	800872a <HAL_ADC_ConfigChannel+0x232>
 8008728:	2300      	movs	r3, #0
 800872a:	461a      	mov	r2, r3
 800872c:	f7ff f878 	bl	8007820 <LL_ADC_SetDataRightShift>
 8008730:	e1ce      	b.n	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a2d      	ldr	r2, [pc, #180]	; (80087ec <HAL_ADC_ConfigChannel+0x2f4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	f040 8181 	bne.w	8008a40 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff f855 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 800874a:	4603      	mov	r3, r0
 800874c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <HAL_ADC_ConfigChannel+0x272>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2100      	movs	r1, #0
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff f84a 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 8008760:	4603      	mov	r3, r0
 8008762:	0e9b      	lsrs	r3, r3, #26
 8008764:	f003 021f 	and.w	r2, r3, #31
 8008768:	e01e      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x2b0>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f83f 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 8008776:	4603      	mov	r3, r0
 8008778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800877c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008780:	fa93 f3a3 	rbit	r3, r3
 8008784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8008788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800878c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8008790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8008798:	2320      	movs	r3, #32
 800879a:	e004      	b.n	80087a6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800879c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087a0:	fab3 f383 	clz	r3, r3
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	461a      	mov	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x2c8>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	0e9b      	lsrs	r3, r3, #26
 80087ba:	f003 031f 	and.w	r3, r3, #31
 80087be:	e01e      	b.n	80087fe <HAL_ADC_ConfigChannel+0x306>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087cc:	fa93 f3a3 	rbit	r3, r3
 80087d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80087d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80087dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80087e4:	2320      	movs	r3, #32
 80087e6:	e00a      	b.n	80087fe <HAL_ADC_ConfigChannel+0x306>
 80087e8:	47ff0000 	.word	0x47ff0000
 80087ec:	58026000 	.word	0x58026000
 80087f0:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80087f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087f8:	fab3 f383 	clz	r3, r3
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	429a      	cmp	r2, r3
 8008800:	d106      	bne.n	8008810 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff f888 	bl	8007920 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2101      	movs	r1, #1
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe ffec 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 800881c:	4603      	mov	r3, r0
 800881e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <HAL_ADC_ConfigChannel+0x344>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2101      	movs	r1, #1
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe ffe1 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 8008832:	4603      	mov	r3, r0
 8008834:	0e9b      	lsrs	r3, r3, #26
 8008836:	f003 021f 	and.w	r2, r3, #31
 800883a:	e01e      	b.n	800887a <HAL_ADC_ConfigChannel+0x382>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2101      	movs	r1, #1
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe ffd6 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 8008848:	4603      	mov	r3, r0
 800884a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008852:	fa93 f3a3 	rbit	r3, r3
 8008856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800885a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800885e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8008862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800886a:	2320      	movs	r3, #32
 800886c:	e004      	b.n	8008878 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800886e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008872:	fab3 f383 	clz	r3, r3
 8008876:	b2db      	uxtb	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <HAL_ADC_ConfigChannel+0x39a>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	0e9b      	lsrs	r3, r3, #26
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	e018      	b.n	80088c4 <HAL_ADC_ConfigChannel+0x3cc>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800889e:	fa93 f3a3 	rbit	r3, r3
 80088a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80088a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80088ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80088b6:	2320      	movs	r3, #32
 80088b8:	e004      	b.n	80088c4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80088ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088be:	fab3 f383 	clz	r3, r3
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d106      	bne.n	80088d6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2200      	movs	r2, #0
 80088ce:	2101      	movs	r1, #1
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff f825 	bl	8007920 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2102      	movs	r1, #2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe ff89 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <HAL_ADC_ConfigChannel+0x40a>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe ff7e 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 80088f8:	4603      	mov	r3, r0
 80088fa:	0e9b      	lsrs	r3, r3, #26
 80088fc:	f003 021f 	and.w	r2, r3, #31
 8008900:	e01e      	b.n	8008940 <HAL_ADC_ConfigChannel+0x448>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2102      	movs	r1, #2
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe ff73 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 800890e:	4603      	mov	r3, r0
 8008910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008918:	fa93 f3a3 	rbit	r3, r3
 800891c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8008930:	2320      	movs	r3, #32
 8008932:	e004      	b.n	800893e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008938:	fab3 f383 	clz	r3, r3
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x460>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	0e9b      	lsrs	r3, r3, #26
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	e014      	b.n	8008982 <HAL_ADC_ConfigChannel+0x48a>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008960:	fa93 f3a3 	rbit	r3, r3
 8008964:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800896c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8008974:	2320      	movs	r3, #32
 8008976:	e004      	b.n	8008982 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8008978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800897c:	fab3 f383 	clz	r3, r3
 8008980:	b2db      	uxtb	r3, r3
 8008982:	429a      	cmp	r2, r3
 8008984:	d106      	bne.n	8008994 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	2102      	movs	r1, #2
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe ffc6 	bl	8007920 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2103      	movs	r1, #3
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe ff2a 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <HAL_ADC_ConfigChannel+0x4c8>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2103      	movs	r1, #3
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe ff1f 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 80089b6:	4603      	mov	r3, r0
 80089b8:	0e9b      	lsrs	r3, r3, #26
 80089ba:	f003 021f 	and.w	r2, r3, #31
 80089be:	e017      	b.n	80089f0 <HAL_ADC_ConfigChannel+0x4f8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2103      	movs	r1, #3
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe ff14 	bl	80077f4 <LL_ADC_GetOffsetChannel>
 80089cc:	4603      	mov	r3, r0
 80089ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d2:	fa93 f3a3 	rbit	r3, r3
 80089d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80089d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80089dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80089e2:	2320      	movs	r3, #32
 80089e4:	e003      	b.n	80089ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80089e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089e8:	fab3 f383 	clz	r3, r3
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <HAL_ADC_ConfigChannel+0x510>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	0e9b      	lsrs	r3, r3, #26
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	e011      	b.n	8008a2c <HAL_ADC_ConfigChannel+0x534>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a10:	fa93 f3a3 	rbit	r3, r3
 8008a14:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8008a20:	2320      	movs	r3, #32
 8008a22:	e003      	b.n	8008a2c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a26:	fab3 f383 	clz	r3, r3
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d14f      	bne.n	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2103      	movs	r1, #3
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe ff71 	bl	8007920 <LL_ADC_SetOffsetState>
 8008a3e:	e047      	b.n	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	069b      	lsls	r3, r3, #26
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d107      	bne.n	8008a64 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008a62:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	069b      	lsls	r3, r3, #26
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d107      	bne.n	8008a88 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008a86:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	069b      	lsls	r3, r3, #26
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d107      	bne.n	8008aac <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008aaa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	069b      	lsls	r3, r3, #26
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d107      	bne.n	8008ad0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008ace:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff f875 	bl	8007bc4 <LL_ADC_IsEnabled>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 8219 	bne.w	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	6819      	ldr	r1, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f7fe ffbe 	bl	8007a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4aa1      	ldr	r2, [pc, #644]	; (8008d80 <HAL_ADC_ConfigChannel+0x888>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f040 812e 	bne.w	8008d5c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <HAL_ADC_ConfigChannel+0x630>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	0e9b      	lsrs	r3, r3, #26
 8008b16:	3301      	adds	r3, #1
 8008b18:	f003 031f 	and.w	r3, r3, #31
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	bf94      	ite	ls
 8008b20:	2301      	movls	r3, #1
 8008b22:	2300      	movhi	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e019      	b.n	8008b5c <HAL_ADC_ConfigChannel+0x664>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b30:	fa93 f3a3 	rbit	r3, r3
 8008b34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8008b40:	2320      	movs	r3, #32
 8008b42:	e003      	b.n	8008b4c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b46:	fab3 f383 	clz	r3, r3
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	bf94      	ite	ls
 8008b56:	2301      	movls	r3, #1
 8008b58:	2300      	movhi	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d079      	beq.n	8008c54 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d107      	bne.n	8008b7c <HAL_ADC_ConfigChannel+0x684>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	3301      	adds	r3, #1
 8008b74:	069b      	lsls	r3, r3, #26
 8008b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b7a:	e015      	b.n	8008ba8 <HAL_ADC_ConfigChannel+0x6b0>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	fa93 f3a3 	rbit	r3, r3
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008b94:	2320      	movs	r3, #32
 8008b96:	e003      	b.n	8008ba0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8008b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9a:	fab3 f383 	clz	r3, r3
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	069b      	lsls	r3, r3, #26
 8008ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d109      	bne.n	8008bc8 <HAL_ADC_ConfigChannel+0x6d0>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	0e9b      	lsrs	r3, r3, #26
 8008bba:	3301      	adds	r3, #1
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc6:	e017      	b.n	8008bf8 <HAL_ADC_ConfigChannel+0x700>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd0:	fa93 f3a3 	rbit	r3, r3
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8008be0:	2320      	movs	r3, #32
 8008be2:	e003      	b.n	8008bec <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	fab3 f383 	clz	r3, r3
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	3301      	adds	r3, #1
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf8:	ea42 0103 	orr.w	r1, r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <HAL_ADC_ConfigChannel+0x726>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	0e9b      	lsrs	r3, r3, #26
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f003 021f 	and.w	r2, r3, #31
 8008c14:	4613      	mov	r3, r2
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	4413      	add	r3, r2
 8008c1a:	051b      	lsls	r3, r3, #20
 8008c1c:	e018      	b.n	8008c50 <HAL_ADC_ConfigChannel+0x758>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	fa93 f3a3 	rbit	r3, r3
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8008c36:	2320      	movs	r3, #32
 8008c38:	e003      	b.n	8008c42 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	fab3 f383 	clz	r3, r3
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	3301      	adds	r3, #1
 8008c44:	f003 021f 	and.w	r2, r3, #31
 8008c48:	4613      	mov	r3, r2
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	4413      	add	r3, r2
 8008c4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c50:	430b      	orrs	r3, r1
 8008c52:	e07e      	b.n	8008d52 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d107      	bne.n	8008c70 <HAL_ADC_ConfigChannel+0x778>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0e9b      	lsrs	r3, r3, #26
 8008c66:	3301      	adds	r3, #1
 8008c68:	069b      	lsls	r3, r3, #26
 8008c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c6e:	e015      	b.n	8008c9c <HAL_ADC_ConfigChannel+0x7a4>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8008c88:	2320      	movs	r3, #32
 8008c8a:	e003      	b.n	8008c94 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	fab3 f383 	clz	r3, r3
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	3301      	adds	r3, #1
 8008c96:	069b      	lsls	r3, r3, #26
 8008c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d109      	bne.n	8008cbc <HAL_ADC_ConfigChannel+0x7c4>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	0e9b      	lsrs	r3, r3, #26
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cba:	e017      	b.n	8008cec <HAL_ADC_ConfigChannel+0x7f4>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	fa93 f3a3 	rbit	r3, r3
 8008cc8:	61bb      	str	r3, [r7, #24]
  return result;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	e003      	b.n	8008ce0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	fab3 f383 	clz	r3, r3
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f003 031f 	and.w	r3, r3, #31
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cec:	ea42 0103 	orr.w	r1, r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10d      	bne.n	8008d18 <HAL_ADC_ConfigChannel+0x820>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	0e9b      	lsrs	r3, r3, #26
 8008d02:	3301      	adds	r3, #1
 8008d04:	f003 021f 	and.w	r2, r3, #31
 8008d08:	4613      	mov	r3, r2
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	3b1e      	subs	r3, #30
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d16:	e01b      	b.n	8008d50 <HAL_ADC_ConfigChannel+0x858>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	fa93 f3a3 	rbit	r3, r3
 8008d24:	60fb      	str	r3, [r7, #12]
  return result;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8008d30:	2320      	movs	r3, #32
 8008d32:	e003      	b.n	8008d3c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f003 021f 	and.w	r2, r3, #31
 8008d42:	4613      	mov	r3, r2
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	4413      	add	r3, r2
 8008d48:	3b1e      	subs	r3, #30
 8008d4a:	051b      	lsls	r3, r3, #20
 8008d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d50:	430b      	orrs	r3, r1
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	4619      	mov	r1, r3
 8008d58:	f7fe fe5e 	bl	8007a18 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f280 80d7 	bge.w	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a06      	ldr	r2, [pc, #24]	; (8008d84 <HAL_ADC_ConfigChannel+0x88c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d004      	beq.n	8008d7a <HAL_ADC_ConfigChannel+0x882>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a04      	ldr	r2, [pc, #16]	; (8008d88 <HAL_ADC_ConfigChannel+0x890>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d10a      	bne.n	8008d90 <HAL_ADC_ConfigChannel+0x898>
 8008d7a:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <HAL_ADC_ConfigChannel+0x894>)
 8008d7c:	e009      	b.n	8008d92 <HAL_ADC_ConfigChannel+0x89a>
 8008d7e:	bf00      	nop
 8008d80:	47ff0000 	.word	0x47ff0000
 8008d84:	40022000 	.word	0x40022000
 8008d88:	40022100 	.word	0x40022100
 8008d8c:	40022300 	.word	0x40022300
 8008d90:	4b65      	ldr	r3, [pc, #404]	; (8008f28 <HAL_ADC_ConfigChannel+0xa30>)
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fcee 	bl	8007774 <LL_ADC_GetCommonPathInternalCh>
 8008d98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a62      	ldr	r2, [pc, #392]	; (8008f2c <HAL_ADC_ConfigChannel+0xa34>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_ADC_ConfigChannel+0x8b8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a61      	ldr	r2, [pc, #388]	; (8008f30 <HAL_ADC_ConfigChannel+0xa38>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d10e      	bne.n	8008dce <HAL_ADC_ConfigChannel+0x8d6>
 8008db0:	485e      	ldr	r0, [pc, #376]	; (8008f2c <HAL_ADC_ConfigChannel+0xa34>)
 8008db2:	f7fe ff07 	bl	8007bc4 <LL_ADC_IsEnabled>
 8008db6:	4604      	mov	r4, r0
 8008db8:	485d      	ldr	r0, [pc, #372]	; (8008f30 <HAL_ADC_ConfigChannel+0xa38>)
 8008dba:	f7fe ff03 	bl	8007bc4 <LL_ADC_IsEnabled>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4323      	orrs	r3, r4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e008      	b.n	8008de0 <HAL_ADC_ConfigChannel+0x8e8>
 8008dce:	4859      	ldr	r0, [pc, #356]	; (8008f34 <HAL_ADC_ConfigChannel+0xa3c>)
 8008dd0:	f7fe fef8 	bl	8007bc4 <LL_ADC_IsEnabled>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bf0c      	ite	eq
 8008dda:	2301      	moveq	r3, #1
 8008ddc:	2300      	movne	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 8084 	beq.w	8008eee <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a53      	ldr	r2, [pc, #332]	; (8008f38 <HAL_ADC_ConfigChannel+0xa40>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d132      	bne.n	8008e56 <HAL_ADC_ConfigChannel+0x95e>
 8008df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d12c      	bne.n	8008e56 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a4c      	ldr	r2, [pc, #304]	; (8008f34 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f040 8086 	bne.w	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a47      	ldr	r2, [pc, #284]	; (8008f2c <HAL_ADC_ConfigChannel+0xa34>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d004      	beq.n	8008e1c <HAL_ADC_ConfigChannel+0x924>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a46      	ldr	r2, [pc, #280]	; (8008f30 <HAL_ADC_ConfigChannel+0xa38>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d101      	bne.n	8008e20 <HAL_ADC_ConfigChannel+0x928>
 8008e1c:	4a47      	ldr	r2, [pc, #284]	; (8008f3c <HAL_ADC_ConfigChannel+0xa44>)
 8008e1e:	e000      	b.n	8008e22 <HAL_ADC_ConfigChannel+0x92a>
 8008e20:	4a41      	ldr	r2, [pc, #260]	; (8008f28 <HAL_ADC_ConfigChannel+0xa30>)
 8008e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	f7fe fc8e 	bl	800774e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e32:	4b43      	ldr	r3, [pc, #268]	; (8008f40 <HAL_ADC_ConfigChannel+0xa48>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	4a42      	ldr	r2, [pc, #264]	; (8008f44 <HAL_ADC_ConfigChannel+0xa4c>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	099b      	lsrs	r3, r3, #6
 8008e40:	3301      	adds	r3, #1
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008e46:	e002      	b.n	8008e4e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f9      	bne.n	8008e48 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e54:	e05e      	b.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3b      	ldr	r2, [pc, #236]	; (8008f48 <HAL_ADC_ConfigChannel+0xa50>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d120      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x9aa>
 8008e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d11a      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a30      	ldr	r2, [pc, #192]	; (8008f34 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d14e      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <HAL_ADC_ConfigChannel+0xa34>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_ADC_ConfigChannel+0x992>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <HAL_ADC_ConfigChannel+0xa38>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d101      	bne.n	8008e8e <HAL_ADC_ConfigChannel+0x996>
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	; (8008f3c <HAL_ADC_ConfigChannel+0xa44>)
 8008e8c:	e000      	b.n	8008e90 <HAL_ADC_ConfigChannel+0x998>
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <HAL_ADC_ConfigChannel+0xa30>)
 8008e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fe fc57 	bl	800774e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ea0:	e038      	b.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <HAL_ADC_ConfigChannel+0xa54>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d133      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
 8008eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d12d      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <HAL_ADC_ConfigChannel+0xa3c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d128      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <HAL_ADC_ConfigChannel+0xa34>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d004      	beq.n	8008ed6 <HAL_ADC_ConfigChannel+0x9de>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <HAL_ADC_ConfigChannel+0xa38>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d101      	bne.n	8008eda <HAL_ADC_ConfigChannel+0x9e2>
 8008ed6:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <HAL_ADC_ConfigChannel+0xa44>)
 8008ed8:	e000      	b.n	8008edc <HAL_ADC_ConfigChannel+0x9e4>
 8008eda:	4a13      	ldr	r2, [pc, #76]	; (8008f28 <HAL_ADC_ConfigChannel+0xa30>)
 8008edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	f7fe fc31 	bl	800774e <LL_ADC_SetCommonPathInternalCh>
 8008eec:	e012      	b.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef2:	f043 0220 	orr.w	r2, r3, #32
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8008f00:	e008      	b.n	8008f14 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f06:	f043 0220 	orr.w	r2, r3, #32
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008f1c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	37e4      	adds	r7, #228	; 0xe4
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd90      	pop	{r4, r7, pc}
 8008f28:	58026300 	.word	0x58026300
 8008f2c:	40022000 	.word	0x40022000
 8008f30:	40022100 	.word	0x40022100
 8008f34:	58026000 	.word	0x58026000
 8008f38:	c7520000 	.word	0xc7520000
 8008f3c:	40022300 	.word	0x40022300
 8008f40:	24000000 	.word	0x24000000
 8008f44:	053e2d63 	.word	0x053e2d63
 8008f48:	c3210000 	.word	0xc3210000
 8008f4c:	cb840000 	.word	0xcb840000

08008f50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a6b      	ldr	r2, [pc, #428]	; (800910c <ADC_ConfigureBoostMode+0x1bc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <ADC_ConfigureBoostMode+0x1c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a6a      	ldr	r2, [pc, #424]	; (8009110 <ADC_ConfigureBoostMode+0x1c0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d109      	bne.n	8008f80 <ADC_ConfigureBoostMode+0x30>
 8008f6c:	4b69      	ldr	r3, [pc, #420]	; (8009114 <ADC_ConfigureBoostMode+0x1c4>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	e008      	b.n	8008f92 <ADC_ConfigureBoostMode+0x42>
 8008f80:	4b65      	ldr	r3, [pc, #404]	; (8009118 <ADC_ConfigureBoostMode+0x1c8>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf14      	ite	ne
 8008f8c:	2301      	movne	r3, #1
 8008f8e:	2300      	moveq	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01c      	beq.n	8008fd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008f96:	f003 f8d3 	bl	800c140 <HAL_RCC_GetHCLKFreq>
 8008f9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fa4:	d010      	beq.n	8008fc8 <ADC_ConfigureBoostMode+0x78>
 8008fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008faa:	d871      	bhi.n	8009090 <ADC_ConfigureBoostMode+0x140>
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb0:	d002      	beq.n	8008fb8 <ADC_ConfigureBoostMode+0x68>
 8008fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb6:	d16b      	bne.n	8009090 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	0c1b      	lsrs	r3, r3, #16
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	60fb      	str	r3, [r7, #12]
        break;
 8008fc6:	e066      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	089b      	lsrs	r3, r3, #2
 8008fcc:	60fb      	str	r3, [r7, #12]
        break;
 8008fce:	e062      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008fd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008fd4:	f004 f826 	bl	800d024 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008fe2:	d051      	beq.n	8009088 <ADC_ConfigureBoostMode+0x138>
 8008fe4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008fe8:	d854      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 8008fea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008fee:	d047      	beq.n	8009080 <ADC_ConfigureBoostMode+0x130>
 8008ff0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008ff4:	d84e      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 8008ff6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008ffa:	d03d      	beq.n	8009078 <ADC_ConfigureBoostMode+0x128>
 8008ffc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009000:	d848      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 8009002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009006:	d033      	beq.n	8009070 <ADC_ConfigureBoostMode+0x120>
 8009008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800900c:	d842      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 800900e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009012:	d029      	beq.n	8009068 <ADC_ConfigureBoostMode+0x118>
 8009014:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009018:	d83c      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 800901a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800901e:	d01a      	beq.n	8009056 <ADC_ConfigureBoostMode+0x106>
 8009020:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009024:	d836      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 8009026:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800902a:	d014      	beq.n	8009056 <ADC_ConfigureBoostMode+0x106>
 800902c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009030:	d830      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 8009032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009036:	d00e      	beq.n	8009056 <ADC_ConfigureBoostMode+0x106>
 8009038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800903c:	d82a      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 800903e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009042:	d008      	beq.n	8009056 <ADC_ConfigureBoostMode+0x106>
 8009044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009048:	d824      	bhi.n	8009094 <ADC_ConfigureBoostMode+0x144>
 800904a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800904e:	d002      	beq.n	8009056 <ADC_ConfigureBoostMode+0x106>
 8009050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009054:	d11e      	bne.n	8009094 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	0c9b      	lsrs	r3, r3, #18
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	fbb2 f3f3 	udiv	r3, r2, r3
 8009064:	60fb      	str	r3, [r7, #12]
        break;
 8009066:	e016      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	091b      	lsrs	r3, r3, #4
 800906c:	60fb      	str	r3, [r7, #12]
        break;
 800906e:	e012      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	095b      	lsrs	r3, r3, #5
 8009074:	60fb      	str	r3, [r7, #12]
        break;
 8009076:	e00e      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	099b      	lsrs	r3, r3, #6
 800907c:	60fb      	str	r3, [r7, #12]
        break;
 800907e:	e00a      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	09db      	lsrs	r3, r3, #7
 8009084:	60fb      	str	r3, [r7, #12]
        break;
 8009086:	e006      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	0a1b      	lsrs	r3, r3, #8
 800908c:	60fb      	str	r3, [r7, #12]
        break;
 800908e:	e002      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
        break;
 8009090:	bf00      	nop
 8009092:	e000      	b.n	8009096 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8009094:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a1f      	ldr	r2, [pc, #124]	; (800911c <ADC_ConfigureBoostMode+0x1cc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d808      	bhi.n	80090b6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80090b4:	e025      	b.n	8009102 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4a19      	ldr	r2, [pc, #100]	; (8009120 <ADC_ConfigureBoostMode+0x1d0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d80a      	bhi.n	80090d4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d0:	609a      	str	r2, [r3, #8]
}
 80090d2:	e016      	b.n	8009102 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4a13      	ldr	r2, [pc, #76]	; (8009124 <ADC_ConfigureBoostMode+0x1d4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d80a      	bhi.n	80090f2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ee:	609a      	str	r2, [r3, #8]
}
 80090f0:	e007      	b.n	8009102 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009100:	609a      	str	r2, [r3, #8]
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40022000 	.word	0x40022000
 8009110:	40022100 	.word	0x40022100
 8009114:	40022300 	.word	0x40022300
 8009118:	58026300 	.word	0x58026300
 800911c:	005f5e10 	.word	0x005f5e10
 8009120:	00bebc20 	.word	0x00bebc20
 8009124:	017d7840 	.word	0x017d7840

08009128 <LL_ADC_IsEnabled>:
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <LL_ADC_IsEnabled+0x18>
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <LL_ADC_IsEnabled+0x1a>
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <LL_ADC_REG_IsConversionOngoing>:
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b04      	cmp	r3, #4
 8009160:	d101      	bne.n	8009166 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b0a3      	sub	sp, #140	; 0x8c
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e0c1      	b.n	800937a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80091fe:	2300      	movs	r3, #0
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009202:	2300      	movs	r3, #0
 8009204:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a5e      	ldr	r2, [pc, #376]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d102      	bne.n	8009216 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009210:	4b5d      	ldr	r3, [pc, #372]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e001      	b.n	800921a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10b      	bne.n	8009238 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009224:	f043 0220 	orr.w	r2, r3, #32
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e0a0      	b.n	800937a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff ff87 	bl	800914e <LL_ADC_REG_IsConversionOngoing>
 8009240:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff ff80 	bl	800914e <LL_ADC_REG_IsConversionOngoing>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f040 8081 	bne.w	8009358 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800925a:	2b00      	cmp	r3, #0
 800925c:	d17c      	bne.n	8009358 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a48      	ldr	r2, [pc, #288]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d004      	beq.n	8009272 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a46      	ldr	r2, [pc, #280]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d101      	bne.n	8009276 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009272:	4b46      	ldr	r3, [pc, #280]	; (800938c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009274:	e000      	b.n	8009278 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009276:	4b46      	ldr	r3, [pc, #280]	; (8009390 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009278:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d039      	beq.n	80092f6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	431a      	orrs	r2, r3
 8009290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009292:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a3a      	ldr	r2, [pc, #232]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d004      	beq.n	80092a8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a39      	ldr	r2, [pc, #228]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d10e      	bne.n	80092c6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80092a8:	4836      	ldr	r0, [pc, #216]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80092aa:	f7ff ff3d 	bl	8009128 <LL_ADC_IsEnabled>
 80092ae:	4604      	mov	r4, r0
 80092b0:	4835      	ldr	r0, [pc, #212]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80092b2:	f7ff ff39 	bl	8009128 <LL_ADC_IsEnabled>
 80092b6:	4603      	mov	r3, r0
 80092b8:	4323      	orrs	r3, r4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e008      	b.n	80092d8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80092c6:	4833      	ldr	r0, [pc, #204]	; (8009394 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80092c8:	f7ff ff2e 	bl	8009128 <LL_ADC_IsEnabled>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d047      	beq.n	800936c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80092dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80092e2:	4013      	ands	r3, r2
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	6811      	ldr	r1, [r2, #0]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	6892      	ldr	r2, [r2, #8]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	431a      	orrs	r2, r3
 80092f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80092f4:	e03a      	b.n	800936c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80092f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009300:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d004      	beq.n	8009316 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d10e      	bne.n	8009334 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8009316:	481b      	ldr	r0, [pc, #108]	; (8009384 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009318:	f7ff ff06 	bl	8009128 <LL_ADC_IsEnabled>
 800931c:	4604      	mov	r4, r0
 800931e:	481a      	ldr	r0, [pc, #104]	; (8009388 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009320:	f7ff ff02 	bl	8009128 <LL_ADC_IsEnabled>
 8009324:	4603      	mov	r3, r0
 8009326:	4323      	orrs	r3, r4
 8009328:	2b00      	cmp	r3, #0
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	e008      	b.n	8009346 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8009334:	4817      	ldr	r0, [pc, #92]	; (8009394 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009336:	f7ff fef7 	bl	8009128 <LL_ADC_IsEnabled>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf0c      	ite	eq
 8009340:	2301      	moveq	r3, #1
 8009342:	2300      	movne	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d010      	beq.n	800936c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800934a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009350:	4013      	ands	r3, r2
 8009352:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009354:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009356:	e009      	b.n	800936c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	f043 0220 	orr.w	r2, r3, #32
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800936a:	e000      	b.n	800936e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800936c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009376:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800937a:	4618      	mov	r0, r3
 800937c:	378c      	adds	r7, #140	; 0x8c
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}
 8009382:	bf00      	nop
 8009384:	40022000 	.word	0x40022000
 8009388:	40022100 	.word	0x40022100
 800938c:	40022300 	.word	0x40022300
 8009390:	58026300 	.word	0x58026300
 8009394:	58026000 	.word	0x58026000
 8009398:	fffff0e0 	.word	0xfffff0e0

0800939c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093ac:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <__NVIC_SetPriorityGrouping+0x40>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093b8:	4013      	ands	r3, r2
 80093ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <__NVIC_SetPriorityGrouping+0x44>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093ca:	4a04      	ldr	r2, [pc, #16]	; (80093dc <__NVIC_SetPriorityGrouping+0x40>)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	60d3      	str	r3, [r2, #12]
}
 80093d0:	bf00      	nop
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	e000ed00 	.word	0xe000ed00
 80093e0:	05fa0000 	.word	0x05fa0000

080093e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80093e8:	4b04      	ldr	r3, [pc, #16]	; (80093fc <__NVIC_GetPriorityGrouping+0x18>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	f003 0307 	and.w	r3, r3, #7
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	e000ed00 	.word	0xe000ed00

08009400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800940a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800940e:	2b00      	cmp	r3, #0
 8009410:	db0b      	blt.n	800942a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	f003 021f 	and.w	r2, r3, #31
 8009418:	4907      	ldr	r1, [pc, #28]	; (8009438 <__NVIC_EnableIRQ+0x38>)
 800941a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	2001      	movs	r0, #1
 8009422:	fa00 f202 	lsl.w	r2, r0, r2
 8009426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	e000e100 	.word	0xe000e100

0800943c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800944c:	2b00      	cmp	r3, #0
 800944e:	db0a      	blt.n	8009466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	490c      	ldr	r1, [pc, #48]	; (8009488 <__NVIC_SetPriority+0x4c>)
 8009456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800945a:	0112      	lsls	r2, r2, #4
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	440b      	add	r3, r1
 8009460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009464:	e00a      	b.n	800947c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <__NVIC_SetPriority+0x50>)
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	3b04      	subs	r3, #4
 8009474:	0112      	lsls	r2, r2, #4
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	440b      	add	r3, r1
 800947a:	761a      	strb	r2, [r3, #24]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	e000e100 	.word	0xe000e100
 800948c:	e000ed00 	.word	0xe000ed00

08009490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009490:	b480      	push	{r7}
 8009492:	b089      	sub	sp, #36	; 0x24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f1c3 0307 	rsb	r3, r3, #7
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	bf28      	it	cs
 80094ae:	2304      	movcs	r3, #4
 80094b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	3304      	adds	r3, #4
 80094b6:	2b06      	cmp	r3, #6
 80094b8:	d902      	bls.n	80094c0 <NVIC_EncodePriority+0x30>
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	3b03      	subs	r3, #3
 80094be:	e000      	b.n	80094c2 <NVIC_EncodePriority+0x32>
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	43da      	mvns	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	401a      	ands	r2, r3
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094d8:	f04f 31ff 	mov.w	r1, #4294967295
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	fa01 f303 	lsl.w	r3, r1, r3
 80094e2:	43d9      	mvns	r1, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094e8:	4313      	orrs	r3, r2
         );
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3724      	adds	r7, #36	; 0x24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3b01      	subs	r3, #1
 8009504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009508:	d301      	bcc.n	800950e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800950a:	2301      	movs	r3, #1
 800950c:	e00f      	b.n	800952e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800950e:	4a0a      	ldr	r2, [pc, #40]	; (8009538 <SysTick_Config+0x40>)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3b01      	subs	r3, #1
 8009514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009516:	210f      	movs	r1, #15
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	f7ff ff8e 	bl	800943c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <SysTick_Config+0x40>)
 8009522:	2200      	movs	r2, #0
 8009524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009526:	4b04      	ldr	r3, [pc, #16]	; (8009538 <SysTick_Config+0x40>)
 8009528:	2207      	movs	r2, #7
 800952a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	e000e010 	.word	0xe000e010

0800953c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ff29 	bl	800939c <__NVIC_SetPriorityGrouping>
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	4603      	mov	r3, r0
 800955a:	60b9      	str	r1, [r7, #8]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009560:	f7ff ff40 	bl	80093e4 <__NVIC_GetPriorityGrouping>
 8009564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	6978      	ldr	r0, [r7, #20]
 800956c:	f7ff ff90 	bl	8009490 <NVIC_EncodePriority>
 8009570:	4602      	mov	r2, r0
 8009572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7ff ff5f 	bl	800943c <__NVIC_SetPriority>
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	4603      	mov	r3, r0
 800958e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff ff33 	bl	8009400 <__NVIC_EnableIRQ>
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ffa4 	bl	80094f8 <SysTick_Config>
 80095b0:	4603      	mov	r3, r0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80095c4:	f7fe f8a4 	bl	8007710 <HAL_GetTick>
 80095c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e314      	b.n	8009bfe <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a66      	ldr	r2, [pc, #408]	; (8009774 <HAL_DMA_Init+0x1b8>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d04a      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a65      	ldr	r2, [pc, #404]	; (8009778 <HAL_DMA_Init+0x1bc>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d045      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a63      	ldr	r2, [pc, #396]	; (800977c <HAL_DMA_Init+0x1c0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d040      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a62      	ldr	r2, [pc, #392]	; (8009780 <HAL_DMA_Init+0x1c4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d03b      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a60      	ldr	r2, [pc, #384]	; (8009784 <HAL_DMA_Init+0x1c8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d036      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5f      	ldr	r2, [pc, #380]	; (8009788 <HAL_DMA_Init+0x1cc>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d031      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a5d      	ldr	r2, [pc, #372]	; (800978c <HAL_DMA_Init+0x1d0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d02c      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a5c      	ldr	r2, [pc, #368]	; (8009790 <HAL_DMA_Init+0x1d4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d027      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a5a      	ldr	r2, [pc, #360]	; (8009794 <HAL_DMA_Init+0x1d8>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d022      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a59      	ldr	r2, [pc, #356]	; (8009798 <HAL_DMA_Init+0x1dc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d01d      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a57      	ldr	r2, [pc, #348]	; (800979c <HAL_DMA_Init+0x1e0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d018      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a56      	ldr	r2, [pc, #344]	; (80097a0 <HAL_DMA_Init+0x1e4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a54      	ldr	r2, [pc, #336]	; (80097a4 <HAL_DMA_Init+0x1e8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00e      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a53      	ldr	r2, [pc, #332]	; (80097a8 <HAL_DMA_Init+0x1ec>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d009      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a51      	ldr	r2, [pc, #324]	; (80097ac <HAL_DMA_Init+0x1f0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d004      	beq.n	8009674 <HAL_DMA_Init+0xb8>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a50      	ldr	r2, [pc, #320]	; (80097b0 <HAL_DMA_Init+0x1f4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d101      	bne.n	8009678 <HAL_DMA_Init+0xbc>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <HAL_DMA_Init+0xbe>
 8009678:	2300      	movs	r3, #0
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 813c 	beq.w	80098f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a37      	ldr	r2, [pc, #220]	; (8009774 <HAL_DMA_Init+0x1b8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d04a      	beq.n	8009730 <HAL_DMA_Init+0x174>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a36      	ldr	r2, [pc, #216]	; (8009778 <HAL_DMA_Init+0x1bc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d045      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a34      	ldr	r2, [pc, #208]	; (800977c <HAL_DMA_Init+0x1c0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d040      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a33      	ldr	r2, [pc, #204]	; (8009780 <HAL_DMA_Init+0x1c4>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d03b      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a31      	ldr	r2, [pc, #196]	; (8009784 <HAL_DMA_Init+0x1c8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d036      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a30      	ldr	r2, [pc, #192]	; (8009788 <HAL_DMA_Init+0x1cc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d031      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2e      	ldr	r2, [pc, #184]	; (800978c <HAL_DMA_Init+0x1d0>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02c      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2d      	ldr	r2, [pc, #180]	; (8009790 <HAL_DMA_Init+0x1d4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d027      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2b      	ldr	r2, [pc, #172]	; (8009794 <HAL_DMA_Init+0x1d8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d022      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <HAL_DMA_Init+0x1dc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d01d      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a28      	ldr	r2, [pc, #160]	; (800979c <HAL_DMA_Init+0x1e0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d018      	beq.n	8009730 <HAL_DMA_Init+0x174>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a27      	ldr	r2, [pc, #156]	; (80097a0 <HAL_DMA_Init+0x1e4>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d013      	beq.n	8009730 <HAL_DMA_Init+0x174>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a25      	ldr	r2, [pc, #148]	; (80097a4 <HAL_DMA_Init+0x1e8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00e      	beq.n	8009730 <HAL_DMA_Init+0x174>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a24      	ldr	r2, [pc, #144]	; (80097a8 <HAL_DMA_Init+0x1ec>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d009      	beq.n	8009730 <HAL_DMA_Init+0x174>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a22      	ldr	r2, [pc, #136]	; (80097ac <HAL_DMA_Init+0x1f0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d004      	beq.n	8009730 <HAL_DMA_Init+0x174>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a21      	ldr	r2, [pc, #132]	; (80097b0 <HAL_DMA_Init+0x1f4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d108      	bne.n	8009742 <HAL_DMA_Init+0x186>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0201 	bic.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	e007      	b.n	8009752 <HAL_DMA_Init+0x196>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009752:	e02f      	b.n	80097b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009754:	f7fd ffdc 	bl	8007710 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b05      	cmp	r3, #5
 8009760:	d928      	bls.n	80097b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2203      	movs	r2, #3
 800976c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e244      	b.n	8009bfe <HAL_DMA_Init+0x642>
 8009774:	40020010 	.word	0x40020010
 8009778:	40020028 	.word	0x40020028
 800977c:	40020040 	.word	0x40020040
 8009780:	40020058 	.word	0x40020058
 8009784:	40020070 	.word	0x40020070
 8009788:	40020088 	.word	0x40020088
 800978c:	400200a0 	.word	0x400200a0
 8009790:	400200b8 	.word	0x400200b8
 8009794:	40020410 	.word	0x40020410
 8009798:	40020428 	.word	0x40020428
 800979c:	40020440 	.word	0x40020440
 80097a0:	40020458 	.word	0x40020458
 80097a4:	40020470 	.word	0x40020470
 80097a8:	40020488 	.word	0x40020488
 80097ac:	400204a0 	.word	0x400204a0
 80097b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1c8      	bne.n	8009754 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	4b84      	ldr	r3, [pc, #528]	; (80099e0 <HAL_DMA_Init+0x424>)
 80097ce:	4013      	ands	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80097da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b04      	cmp	r3, #4
 8009806:	d107      	bne.n	8009818 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009810:	4313      	orrs	r3, r2
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b28      	cmp	r3, #40	; 0x28
 800981e:	d903      	bls.n	8009828 <HAL_DMA_Init+0x26c>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b2e      	cmp	r3, #46	; 0x2e
 8009826:	d91f      	bls.n	8009868 <HAL_DMA_Init+0x2ac>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b3e      	cmp	r3, #62	; 0x3e
 800982e:	d903      	bls.n	8009838 <HAL_DMA_Init+0x27c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b42      	cmp	r3, #66	; 0x42
 8009836:	d917      	bls.n	8009868 <HAL_DMA_Init+0x2ac>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2b46      	cmp	r3, #70	; 0x46
 800983e:	d903      	bls.n	8009848 <HAL_DMA_Init+0x28c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	2b48      	cmp	r3, #72	; 0x48
 8009846:	d90f      	bls.n	8009868 <HAL_DMA_Init+0x2ac>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	2b4e      	cmp	r3, #78	; 0x4e
 800984e:	d903      	bls.n	8009858 <HAL_DMA_Init+0x29c>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b52      	cmp	r3, #82	; 0x52
 8009856:	d907      	bls.n	8009868 <HAL_DMA_Init+0x2ac>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	2b73      	cmp	r3, #115	; 0x73
 800985e:	d905      	bls.n	800986c <HAL_DMA_Init+0x2b0>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	2b77      	cmp	r3, #119	; 0x77
 8009866:	d801      	bhi.n	800986c <HAL_DMA_Init+0x2b0>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <HAL_DMA_Init+0x2b2>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009878:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d117      	bne.n	80098d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00e      	beq.n	80098d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 f9b6 	bl	800ac28 <DMA_CheckFifoParam>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d008      	beq.n	80098d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2240      	movs	r2, #64	; 0x40
 80098c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e194      	b.n	8009bfe <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f8f1 	bl	800aac4 <DMA_CalcBaseAndBitshift>
 80098e2:	4603      	mov	r3, r0
 80098e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ea:	f003 031f 	and.w	r3, r3, #31
 80098ee:	223f      	movs	r2, #63	; 0x3f
 80098f0:	409a      	lsls	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	609a      	str	r2, [r3, #8]
 80098f6:	e0ca      	b.n	8009a8e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a39      	ldr	r2, [pc, #228]	; (80099e4 <HAL_DMA_Init+0x428>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d022      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a38      	ldr	r2, [pc, #224]	; (80099e8 <HAL_DMA_Init+0x42c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d01d      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a36      	ldr	r2, [pc, #216]	; (80099ec <HAL_DMA_Init+0x430>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d018      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a35      	ldr	r2, [pc, #212]	; (80099f0 <HAL_DMA_Init+0x434>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d013      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a33      	ldr	r2, [pc, #204]	; (80099f4 <HAL_DMA_Init+0x438>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00e      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a32      	ldr	r2, [pc, #200]	; (80099f8 <HAL_DMA_Init+0x43c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d009      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a30      	ldr	r2, [pc, #192]	; (80099fc <HAL_DMA_Init+0x440>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d004      	beq.n	8009948 <HAL_DMA_Init+0x38c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a2f      	ldr	r2, [pc, #188]	; (8009a00 <HAL_DMA_Init+0x444>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d101      	bne.n	800994c <HAL_DMA_Init+0x390>
 8009948:	2301      	movs	r3, #1
 800994a:	e000      	b.n	800994e <HAL_DMA_Init+0x392>
 800994c:	2300      	movs	r3, #0
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8094 	beq.w	8009a7c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <HAL_DMA_Init+0x428>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d021      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a21      	ldr	r2, [pc, #132]	; (80099e8 <HAL_DMA_Init+0x42c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d01c      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <HAL_DMA_Init+0x430>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d017      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1e      	ldr	r2, [pc, #120]	; (80099f0 <HAL_DMA_Init+0x434>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d012      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a1c      	ldr	r2, [pc, #112]	; (80099f4 <HAL_DMA_Init+0x438>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00d      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a1b      	ldr	r2, [pc, #108]	; (80099f8 <HAL_DMA_Init+0x43c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d008      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_DMA_Init+0x440>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d003      	beq.n	80099a2 <HAL_DMA_Init+0x3e6>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a18      	ldr	r2, [pc, #96]	; (8009a00 <HAL_DMA_Init+0x444>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <HAL_DMA_Init+0x448>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d01d      	beq.n	8009a08 <HAL_DMA_Init+0x44c>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d102      	bne.n	80099da <HAL_DMA_Init+0x41e>
 80099d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099d8:	e017      	b.n	8009a0a <HAL_DMA_Init+0x44e>
 80099da:	2300      	movs	r3, #0
 80099dc:	e015      	b.n	8009a0a <HAL_DMA_Init+0x44e>
 80099de:	bf00      	nop
 80099e0:	fe10803f 	.word	0xfe10803f
 80099e4:	58025408 	.word	0x58025408
 80099e8:	5802541c 	.word	0x5802541c
 80099ec:	58025430 	.word	0x58025430
 80099f0:	58025444 	.word	0x58025444
 80099f4:	58025458 	.word	0x58025458
 80099f8:	5802546c 	.word	0x5802546c
 80099fc:	58025480 	.word	0x58025480
 8009a00:	58025494 	.word	0x58025494
 8009a04:	fffe000f 	.word	0xfffe000f
 8009a08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68d2      	ldr	r2, [r2, #12]
 8009a0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b6e      	ldr	r3, [pc, #440]	; (8009c08 <HAL_DMA_Init+0x64c>)
 8009a50:	4413      	add	r3, r2
 8009a52:	4a6e      	ldr	r2, [pc, #440]	; (8009c0c <HAL_DMA_Init+0x650>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	091b      	lsrs	r3, r3, #4
 8009a5a:	009a      	lsls	r2, r3, #2
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f82f 	bl	800aac4 <DMA_CalcBaseAndBitshift>
 8009a66:	4603      	mov	r3, r0
 8009a68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6e:	f003 031f 	and.w	r3, r3, #31
 8009a72:	2201      	movs	r2, #1
 8009a74:	409a      	lsls	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	605a      	str	r2, [r3, #4]
 8009a7a:	e008      	b.n	8009a8e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2240      	movs	r2, #64	; 0x40
 8009a80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2203      	movs	r2, #3
 8009a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e0b7      	b.n	8009bfe <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a5f      	ldr	r2, [pc, #380]	; (8009c10 <HAL_DMA_Init+0x654>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d072      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a5d      	ldr	r2, [pc, #372]	; (8009c14 <HAL_DMA_Init+0x658>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d06d      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a5c      	ldr	r2, [pc, #368]	; (8009c18 <HAL_DMA_Init+0x65c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d068      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a5a      	ldr	r2, [pc, #360]	; (8009c1c <HAL_DMA_Init+0x660>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d063      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a59      	ldr	r2, [pc, #356]	; (8009c20 <HAL_DMA_Init+0x664>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d05e      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a57      	ldr	r2, [pc, #348]	; (8009c24 <HAL_DMA_Init+0x668>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d059      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a56      	ldr	r2, [pc, #344]	; (8009c28 <HAL_DMA_Init+0x66c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d054      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a54      	ldr	r2, [pc, #336]	; (8009c2c <HAL_DMA_Init+0x670>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d04f      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a53      	ldr	r2, [pc, #332]	; (8009c30 <HAL_DMA_Init+0x674>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d04a      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a51      	ldr	r2, [pc, #324]	; (8009c34 <HAL_DMA_Init+0x678>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d045      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a50      	ldr	r2, [pc, #320]	; (8009c38 <HAL_DMA_Init+0x67c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d040      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a4e      	ldr	r2, [pc, #312]	; (8009c3c <HAL_DMA_Init+0x680>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d03b      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4d      	ldr	r2, [pc, #308]	; (8009c40 <HAL_DMA_Init+0x684>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d036      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a4b      	ldr	r2, [pc, #300]	; (8009c44 <HAL_DMA_Init+0x688>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d031      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a4a      	ldr	r2, [pc, #296]	; (8009c48 <HAL_DMA_Init+0x68c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d02c      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a48      	ldr	r2, [pc, #288]	; (8009c4c <HAL_DMA_Init+0x690>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d027      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a47      	ldr	r2, [pc, #284]	; (8009c50 <HAL_DMA_Init+0x694>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d022      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a45      	ldr	r2, [pc, #276]	; (8009c54 <HAL_DMA_Init+0x698>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d01d      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a44      	ldr	r2, [pc, #272]	; (8009c58 <HAL_DMA_Init+0x69c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d018      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a42      	ldr	r2, [pc, #264]	; (8009c5c <HAL_DMA_Init+0x6a0>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d013      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a41      	ldr	r2, [pc, #260]	; (8009c60 <HAL_DMA_Init+0x6a4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00e      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a3f      	ldr	r2, [pc, #252]	; (8009c64 <HAL_DMA_Init+0x6a8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d009      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a3e      	ldr	r2, [pc, #248]	; (8009c68 <HAL_DMA_Init+0x6ac>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d004      	beq.n	8009b7e <HAL_DMA_Init+0x5c2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a3c      	ldr	r2, [pc, #240]	; (8009c6c <HAL_DMA_Init+0x6b0>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d101      	bne.n	8009b82 <HAL_DMA_Init+0x5c6>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <HAL_DMA_Init+0x5c8>
 8009b82:	2300      	movs	r3, #0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d032      	beq.n	8009bee <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f8c9 	bl	800ad20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d102      	bne.n	8009b9c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009bb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d010      	beq.n	8009bdc <HAL_DMA_Init+0x620>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d80c      	bhi.n	8009bdc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 f946 	bl	800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	e008      	b.n	8009bee <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	a7fdabf8 	.word	0xa7fdabf8
 8009c0c:	cccccccd 	.word	0xcccccccd
 8009c10:	40020010 	.word	0x40020010
 8009c14:	40020028 	.word	0x40020028
 8009c18:	40020040 	.word	0x40020040
 8009c1c:	40020058 	.word	0x40020058
 8009c20:	40020070 	.word	0x40020070
 8009c24:	40020088 	.word	0x40020088
 8009c28:	400200a0 	.word	0x400200a0
 8009c2c:	400200b8 	.word	0x400200b8
 8009c30:	40020410 	.word	0x40020410
 8009c34:	40020428 	.word	0x40020428
 8009c38:	40020440 	.word	0x40020440
 8009c3c:	40020458 	.word	0x40020458
 8009c40:	40020470 	.word	0x40020470
 8009c44:	40020488 	.word	0x40020488
 8009c48:	400204a0 	.word	0x400204a0
 8009c4c:	400204b8 	.word	0x400204b8
 8009c50:	58025408 	.word	0x58025408
 8009c54:	5802541c 	.word	0x5802541c
 8009c58:	58025430 	.word	0x58025430
 8009c5c:	58025444 	.word	0x58025444
 8009c60:	58025458 	.word	0x58025458
 8009c64:	5802546c 	.word	0x5802546c
 8009c68:	58025480 	.word	0x58025480
 8009c6c:	58025494 	.word	0x58025494

08009c70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009c7c:	4b67      	ldr	r3, [pc, #412]	; (8009e1c <HAL_DMA_IRQHandler+0x1ac>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a67      	ldr	r2, [pc, #412]	; (8009e20 <HAL_DMA_IRQHandler+0x1b0>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	0a9b      	lsrs	r3, r3, #10
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a5f      	ldr	r2, [pc, #380]	; (8009e24 <HAL_DMA_IRQHandler+0x1b4>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d04a      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a5d      	ldr	r2, [pc, #372]	; (8009e28 <HAL_DMA_IRQHandler+0x1b8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d045      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a5c      	ldr	r2, [pc, #368]	; (8009e2c <HAL_DMA_IRQHandler+0x1bc>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d040      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5a      	ldr	r2, [pc, #360]	; (8009e30 <HAL_DMA_IRQHandler+0x1c0>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d03b      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a59      	ldr	r2, [pc, #356]	; (8009e34 <HAL_DMA_IRQHandler+0x1c4>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d036      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a57      	ldr	r2, [pc, #348]	; (8009e38 <HAL_DMA_IRQHandler+0x1c8>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d031      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a56      	ldr	r2, [pc, #344]	; (8009e3c <HAL_DMA_IRQHandler+0x1cc>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d02c      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a54      	ldr	r2, [pc, #336]	; (8009e40 <HAL_DMA_IRQHandler+0x1d0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d027      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a53      	ldr	r2, [pc, #332]	; (8009e44 <HAL_DMA_IRQHandler+0x1d4>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d022      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a51      	ldr	r2, [pc, #324]	; (8009e48 <HAL_DMA_IRQHandler+0x1d8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d01d      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a50      	ldr	r2, [pc, #320]	; (8009e4c <HAL_DMA_IRQHandler+0x1dc>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d018      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a4e      	ldr	r2, [pc, #312]	; (8009e50 <HAL_DMA_IRQHandler+0x1e0>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d013      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a4d      	ldr	r2, [pc, #308]	; (8009e54 <HAL_DMA_IRQHandler+0x1e4>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00e      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a4b      	ldr	r2, [pc, #300]	; (8009e58 <HAL_DMA_IRQHandler+0x1e8>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d009      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4a      	ldr	r2, [pc, #296]	; (8009e5c <HAL_DMA_IRQHandler+0x1ec>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d004      	beq.n	8009d42 <HAL_DMA_IRQHandler+0xd2>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a48      	ldr	r2, [pc, #288]	; (8009e60 <HAL_DMA_IRQHandler+0x1f0>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d101      	bne.n	8009d46 <HAL_DMA_IRQHandler+0xd6>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e000      	b.n	8009d48 <HAL_DMA_IRQHandler+0xd8>
 8009d46:	2300      	movs	r3, #0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 842b 	beq.w	800a5a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2208      	movs	r2, #8
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80a2 	beq.w	8009ea8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2e      	ldr	r2, [pc, #184]	; (8009e24 <HAL_DMA_IRQHandler+0x1b4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d04a      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a2d      	ldr	r2, [pc, #180]	; (8009e28 <HAL_DMA_IRQHandler+0x1b8>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d045      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a2b      	ldr	r2, [pc, #172]	; (8009e2c <HAL_DMA_IRQHandler+0x1bc>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d040      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a2a      	ldr	r2, [pc, #168]	; (8009e30 <HAL_DMA_IRQHandler+0x1c0>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d03b      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a28      	ldr	r2, [pc, #160]	; (8009e34 <HAL_DMA_IRQHandler+0x1c4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d036      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a27      	ldr	r2, [pc, #156]	; (8009e38 <HAL_DMA_IRQHandler+0x1c8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d031      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a25      	ldr	r2, [pc, #148]	; (8009e3c <HAL_DMA_IRQHandler+0x1cc>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d02c      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a24      	ldr	r2, [pc, #144]	; (8009e40 <HAL_DMA_IRQHandler+0x1d0>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d027      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a22      	ldr	r2, [pc, #136]	; (8009e44 <HAL_DMA_IRQHandler+0x1d4>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d022      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a21      	ldr	r2, [pc, #132]	; (8009e48 <HAL_DMA_IRQHandler+0x1d8>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d01d      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1f      	ldr	r2, [pc, #124]	; (8009e4c <HAL_DMA_IRQHandler+0x1dc>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d018      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1e      	ldr	r2, [pc, #120]	; (8009e50 <HAL_DMA_IRQHandler+0x1e0>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1c      	ldr	r2, [pc, #112]	; (8009e54 <HAL_DMA_IRQHandler+0x1e4>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00e      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1b      	ldr	r2, [pc, #108]	; (8009e58 <HAL_DMA_IRQHandler+0x1e8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d009      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_DMA_IRQHandler+0x1ec>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x194>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <HAL_DMA_IRQHandler+0x1f0>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d12f      	bne.n	8009e64 <HAL_DMA_IRQHandler+0x1f4>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bf14      	ite	ne
 8009e12:	2301      	movne	r3, #1
 8009e14:	2300      	moveq	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	e02e      	b.n	8009e78 <HAL_DMA_IRQHandler+0x208>
 8009e1a:	bf00      	nop
 8009e1c:	24000000 	.word	0x24000000
 8009e20:	1b4e81b5 	.word	0x1b4e81b5
 8009e24:	40020010 	.word	0x40020010
 8009e28:	40020028 	.word	0x40020028
 8009e2c:	40020040 	.word	0x40020040
 8009e30:	40020058 	.word	0x40020058
 8009e34:	40020070 	.word	0x40020070
 8009e38:	40020088 	.word	0x40020088
 8009e3c:	400200a0 	.word	0x400200a0
 8009e40:	400200b8 	.word	0x400200b8
 8009e44:	40020410 	.word	0x40020410
 8009e48:	40020428 	.word	0x40020428
 8009e4c:	40020440 	.word	0x40020440
 8009e50:	40020458 	.word	0x40020458
 8009e54:	40020470 	.word	0x40020470
 8009e58:	40020488 	.word	0x40020488
 8009e5c:	400204a0 	.word	0x400204a0
 8009e60:	400204b8 	.word	0x400204b8
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0308 	and.w	r3, r3, #8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bf14      	ite	ne
 8009e72:	2301      	movne	r3, #1
 8009e74:	2300      	moveq	r3, #0
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d015      	beq.n	8009ea8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0204 	bic.w	r2, r2, #4
 8009e8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e90:	f003 031f 	and.w	r3, r3, #31
 8009e94:	2208      	movs	r2, #8
 8009e96:	409a      	lsls	r2, r3
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea0:	f043 0201 	orr.w	r2, r3, #1
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eac:	f003 031f 	and.w	r3, r3, #31
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d06e      	beq.n	8009f9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a69      	ldr	r2, [pc, #420]	; (800a068 <HAL_DMA_IRQHandler+0x3f8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d04a      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a67      	ldr	r2, [pc, #412]	; (800a06c <HAL_DMA_IRQHandler+0x3fc>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d045      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a66      	ldr	r2, [pc, #408]	; (800a070 <HAL_DMA_IRQHandler+0x400>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d040      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a64      	ldr	r2, [pc, #400]	; (800a074 <HAL_DMA_IRQHandler+0x404>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d03b      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a63      	ldr	r2, [pc, #396]	; (800a078 <HAL_DMA_IRQHandler+0x408>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d036      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a61      	ldr	r2, [pc, #388]	; (800a07c <HAL_DMA_IRQHandler+0x40c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d031      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a60      	ldr	r2, [pc, #384]	; (800a080 <HAL_DMA_IRQHandler+0x410>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d02c      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a5e      	ldr	r2, [pc, #376]	; (800a084 <HAL_DMA_IRQHandler+0x414>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d027      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a5d      	ldr	r2, [pc, #372]	; (800a088 <HAL_DMA_IRQHandler+0x418>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d022      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a5b      	ldr	r2, [pc, #364]	; (800a08c <HAL_DMA_IRQHandler+0x41c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01d      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a5a      	ldr	r2, [pc, #360]	; (800a090 <HAL_DMA_IRQHandler+0x420>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d018      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a58      	ldr	r2, [pc, #352]	; (800a094 <HAL_DMA_IRQHandler+0x424>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a57      	ldr	r2, [pc, #348]	; (800a098 <HAL_DMA_IRQHandler+0x428>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00e      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a55      	ldr	r2, [pc, #340]	; (800a09c <HAL_DMA_IRQHandler+0x42c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a54      	ldr	r2, [pc, #336]	; (800a0a0 <HAL_DMA_IRQHandler+0x430>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x2ee>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a52      	ldr	r2, [pc, #328]	; (800a0a4 <HAL_DMA_IRQHandler+0x434>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d10a      	bne.n	8009f74 <HAL_DMA_IRQHandler+0x304>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bf14      	ite	ne
 8009f6c:	2301      	movne	r3, #1
 8009f6e:	2300      	moveq	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	e003      	b.n	8009f7c <HAL_DMA_IRQHandler+0x30c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00d      	beq.n	8009f9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f84:	f003 031f 	and.w	r3, r3, #31
 8009f88:	2201      	movs	r2, #1
 8009f8a:	409a      	lsls	r2, r3
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f94:	f043 0202 	orr.w	r2, r3, #2
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa0:	f003 031f 	and.w	r3, r3, #31
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	409a      	lsls	r2, r3
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 808f 	beq.w	800a0d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a2c      	ldr	r2, [pc, #176]	; (800a068 <HAL_DMA_IRQHandler+0x3f8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d04a      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <HAL_DMA_IRQHandler+0x3fc>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d045      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a29      	ldr	r2, [pc, #164]	; (800a070 <HAL_DMA_IRQHandler+0x400>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d040      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a27      	ldr	r2, [pc, #156]	; (800a074 <HAL_DMA_IRQHandler+0x404>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d03b      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a26      	ldr	r2, [pc, #152]	; (800a078 <HAL_DMA_IRQHandler+0x408>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d036      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a24      	ldr	r2, [pc, #144]	; (800a07c <HAL_DMA_IRQHandler+0x40c>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d031      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a23      	ldr	r2, [pc, #140]	; (800a080 <HAL_DMA_IRQHandler+0x410>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d02c      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a21      	ldr	r2, [pc, #132]	; (800a084 <HAL_DMA_IRQHandler+0x414>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d027      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a20      	ldr	r2, [pc, #128]	; (800a088 <HAL_DMA_IRQHandler+0x418>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d022      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <HAL_DMA_IRQHandler+0x41c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d01d      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <HAL_DMA_IRQHandler+0x420>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d018      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a1b      	ldr	r2, [pc, #108]	; (800a094 <HAL_DMA_IRQHandler+0x424>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d013      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1a      	ldr	r2, [pc, #104]	; (800a098 <HAL_DMA_IRQHandler+0x428>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00e      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a18      	ldr	r2, [pc, #96]	; (800a09c <HAL_DMA_IRQHandler+0x42c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d009      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a17      	ldr	r2, [pc, #92]	; (800a0a0 <HAL_DMA_IRQHandler+0x430>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d004      	beq.n	800a052 <HAL_DMA_IRQHandler+0x3e2>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <HAL_DMA_IRQHandler+0x434>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d12a      	bne.n	800a0a8 <HAL_DMA_IRQHandler+0x438>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf14      	ite	ne
 800a060:	2301      	movne	r3, #1
 800a062:	2300      	moveq	r3, #0
 800a064:	b2db      	uxtb	r3, r3
 800a066:	e023      	b.n	800a0b0 <HAL_DMA_IRQHandler+0x440>
 800a068:	40020010 	.word	0x40020010
 800a06c:	40020028 	.word	0x40020028
 800a070:	40020040 	.word	0x40020040
 800a074:	40020058 	.word	0x40020058
 800a078:	40020070 	.word	0x40020070
 800a07c:	40020088 	.word	0x40020088
 800a080:	400200a0 	.word	0x400200a0
 800a084:	400200b8 	.word	0x400200b8
 800a088:	40020410 	.word	0x40020410
 800a08c:	40020428 	.word	0x40020428
 800a090:	40020440 	.word	0x40020440
 800a094:	40020458 	.word	0x40020458
 800a098:	40020470 	.word	0x40020470
 800a09c:	40020488 	.word	0x40020488
 800a0a0:	400204a0 	.word	0x400204a0
 800a0a4:	400204b8 	.word	0x400204b8
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00d      	beq.n	800a0d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b8:	f003 031f 	and.w	r3, r3, #31
 800a0bc:	2204      	movs	r2, #4
 800a0be:	409a      	lsls	r2, r3
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c8:	f043 0204 	orr.w	r2, r3, #4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d4:	f003 031f 	and.w	r3, r3, #31
 800a0d8:	2210      	movs	r2, #16
 800a0da:	409a      	lsls	r2, r3
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80a6 	beq.w	800a232 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a85      	ldr	r2, [pc, #532]	; (800a300 <HAL_DMA_IRQHandler+0x690>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d04a      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a83      	ldr	r2, [pc, #524]	; (800a304 <HAL_DMA_IRQHandler+0x694>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d045      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a82      	ldr	r2, [pc, #520]	; (800a308 <HAL_DMA_IRQHandler+0x698>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d040      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a80      	ldr	r2, [pc, #512]	; (800a30c <HAL_DMA_IRQHandler+0x69c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d03b      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a7f      	ldr	r2, [pc, #508]	; (800a310 <HAL_DMA_IRQHandler+0x6a0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d036      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a7d      	ldr	r2, [pc, #500]	; (800a314 <HAL_DMA_IRQHandler+0x6a4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d031      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a7c      	ldr	r2, [pc, #496]	; (800a318 <HAL_DMA_IRQHandler+0x6a8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d02c      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a7a      	ldr	r2, [pc, #488]	; (800a31c <HAL_DMA_IRQHandler+0x6ac>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d027      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a79      	ldr	r2, [pc, #484]	; (800a320 <HAL_DMA_IRQHandler+0x6b0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d022      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a77      	ldr	r2, [pc, #476]	; (800a324 <HAL_DMA_IRQHandler+0x6b4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01d      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a76      	ldr	r2, [pc, #472]	; (800a328 <HAL_DMA_IRQHandler+0x6b8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d018      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a74      	ldr	r2, [pc, #464]	; (800a32c <HAL_DMA_IRQHandler+0x6bc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d013      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a73      	ldr	r2, [pc, #460]	; (800a330 <HAL_DMA_IRQHandler+0x6c0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00e      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a71      	ldr	r2, [pc, #452]	; (800a334 <HAL_DMA_IRQHandler+0x6c4>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d009      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a70      	ldr	r2, [pc, #448]	; (800a338 <HAL_DMA_IRQHandler+0x6c8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d004      	beq.n	800a186 <HAL_DMA_IRQHandler+0x516>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a6e      	ldr	r2, [pc, #440]	; (800a33c <HAL_DMA_IRQHandler+0x6cc>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d10a      	bne.n	800a19c <HAL_DMA_IRQHandler+0x52c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b00      	cmp	r3, #0
 800a192:	bf14      	ite	ne
 800a194:	2301      	movne	r3, #1
 800a196:	2300      	moveq	r3, #0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	e009      	b.n	800a1b0 <HAL_DMA_IRQHandler+0x540>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bf14      	ite	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	2300      	moveq	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d03e      	beq.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b8:	f003 031f 	and.w	r3, r3, #31
 800a1bc:	2210      	movs	r2, #16
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d018      	beq.n	800a204 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d108      	bne.n	800a1f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d024      	beq.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	4798      	blx	r3
 800a1f0:	e01f      	b.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01b      	beq.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
 800a202:	e016      	b.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d107      	bne.n	800a222 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f022 0208 	bic.w	r2, r2, #8
 800a220:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a236:	f003 031f 	and.w	r3, r3, #31
 800a23a:	2220      	movs	r2, #32
 800a23c:	409a      	lsls	r2, r3
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8110 	beq.w	800a468 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a2c      	ldr	r2, [pc, #176]	; (800a300 <HAL_DMA_IRQHandler+0x690>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d04a      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a2b      	ldr	r2, [pc, #172]	; (800a304 <HAL_DMA_IRQHandler+0x694>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d045      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a29      	ldr	r2, [pc, #164]	; (800a308 <HAL_DMA_IRQHandler+0x698>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d040      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a28      	ldr	r2, [pc, #160]	; (800a30c <HAL_DMA_IRQHandler+0x69c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d03b      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a26      	ldr	r2, [pc, #152]	; (800a310 <HAL_DMA_IRQHandler+0x6a0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d036      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a25      	ldr	r2, [pc, #148]	; (800a314 <HAL_DMA_IRQHandler+0x6a4>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d031      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a23      	ldr	r2, [pc, #140]	; (800a318 <HAL_DMA_IRQHandler+0x6a8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d02c      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a22      	ldr	r2, [pc, #136]	; (800a31c <HAL_DMA_IRQHandler+0x6ac>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d027      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <HAL_DMA_IRQHandler+0x6b0>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d022      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <HAL_DMA_IRQHandler+0x6b4>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d01d      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a1d      	ldr	r2, [pc, #116]	; (800a328 <HAL_DMA_IRQHandler+0x6b8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d018      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a1c      	ldr	r2, [pc, #112]	; (800a32c <HAL_DMA_IRQHandler+0x6bc>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a1a      	ldr	r2, [pc, #104]	; (800a330 <HAL_DMA_IRQHandler+0x6c0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00e      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a19      	ldr	r2, [pc, #100]	; (800a334 <HAL_DMA_IRQHandler+0x6c4>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d009      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a17      	ldr	r2, [pc, #92]	; (800a338 <HAL_DMA_IRQHandler+0x6c8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x678>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a16      	ldr	r2, [pc, #88]	; (800a33c <HAL_DMA_IRQHandler+0x6cc>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d12b      	bne.n	800a340 <HAL_DMA_IRQHandler+0x6d0>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bf14      	ite	ne
 800a2f6:	2301      	movne	r3, #1
 800a2f8:	2300      	moveq	r3, #0
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	e02a      	b.n	800a354 <HAL_DMA_IRQHandler+0x6e4>
 800a2fe:	bf00      	nop
 800a300:	40020010 	.word	0x40020010
 800a304:	40020028 	.word	0x40020028
 800a308:	40020040 	.word	0x40020040
 800a30c:	40020058 	.word	0x40020058
 800a310:	40020070 	.word	0x40020070
 800a314:	40020088 	.word	0x40020088
 800a318:	400200a0 	.word	0x400200a0
 800a31c:	400200b8 	.word	0x400200b8
 800a320:	40020410 	.word	0x40020410
 800a324:	40020428 	.word	0x40020428
 800a328:	40020440 	.word	0x40020440
 800a32c:	40020458 	.word	0x40020458
 800a330:	40020470 	.word	0x40020470
 800a334:	40020488 	.word	0x40020488
 800a338:	400204a0 	.word	0x400204a0
 800a33c:	400204b8 	.word	0x400204b8
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf14      	ite	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	2300      	moveq	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8087 	beq.w	800a468 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a35e:	f003 031f 	and.w	r3, r3, #31
 800a362:	2220      	movs	r2, #32
 800a364:	409a      	lsls	r2, r3
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b04      	cmp	r3, #4
 800a374:	d139      	bne.n	800a3ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0216 	bic.w	r2, r2, #22
 800a384:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695a      	ldr	r2, [r3, #20]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a394:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <HAL_DMA_IRQHandler+0x736>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0208 	bic.w	r2, r2, #8
 800a3b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ba:	f003 031f 	and.w	r3, r3, #31
 800a3be:	223f      	movs	r2, #63	; 0x3f
 800a3c0:	409a      	lsls	r2, r3
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 834a 	beq.w	800aa74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	4798      	blx	r3
          }
          return;
 800a3e8:	e344      	b.n	800aa74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d018      	beq.n	800a42a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d108      	bne.n	800a418 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d02c      	beq.n	800a468 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	4798      	blx	r3
 800a416:	e027      	b.n	800a468 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d023      	beq.n	800a468 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
 800a428:	e01e      	b.n	800a468 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10f      	bne.n	800a458 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0210 	bic.w	r2, r2, #16
 800a446:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8306 	beq.w	800aa7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 8088 	beq.w	800a590 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2204      	movs	r2, #4
 800a484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a7a      	ldr	r2, [pc, #488]	; (800a678 <HAL_DMA_IRQHandler+0xa08>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d04a      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a79      	ldr	r2, [pc, #484]	; (800a67c <HAL_DMA_IRQHandler+0xa0c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d045      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a77      	ldr	r2, [pc, #476]	; (800a680 <HAL_DMA_IRQHandler+0xa10>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d040      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a76      	ldr	r2, [pc, #472]	; (800a684 <HAL_DMA_IRQHandler+0xa14>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d03b      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a74      	ldr	r2, [pc, #464]	; (800a688 <HAL_DMA_IRQHandler+0xa18>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d036      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a73      	ldr	r2, [pc, #460]	; (800a68c <HAL_DMA_IRQHandler+0xa1c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d031      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a71      	ldr	r2, [pc, #452]	; (800a690 <HAL_DMA_IRQHandler+0xa20>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d02c      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a70      	ldr	r2, [pc, #448]	; (800a694 <HAL_DMA_IRQHandler+0xa24>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d027      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a6e      	ldr	r2, [pc, #440]	; (800a698 <HAL_DMA_IRQHandler+0xa28>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d022      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a6d      	ldr	r2, [pc, #436]	; (800a69c <HAL_DMA_IRQHandler+0xa2c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d01d      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a6b      	ldr	r2, [pc, #428]	; (800a6a0 <HAL_DMA_IRQHandler+0xa30>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d018      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a6a      	ldr	r2, [pc, #424]	; (800a6a4 <HAL_DMA_IRQHandler+0xa34>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d013      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a68      	ldr	r2, [pc, #416]	; (800a6a8 <HAL_DMA_IRQHandler+0xa38>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00e      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a67      	ldr	r2, [pc, #412]	; (800a6ac <HAL_DMA_IRQHandler+0xa3c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d009      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a65      	ldr	r2, [pc, #404]	; (800a6b0 <HAL_DMA_IRQHandler+0xa40>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <HAL_DMA_IRQHandler+0x8b8>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a64      	ldr	r2, [pc, #400]	; (800a6b4 <HAL_DMA_IRQHandler+0xa44>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d108      	bne.n	800a53a <HAL_DMA_IRQHandler+0x8ca>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	e007      	b.n	800a54a <HAL_DMA_IRQHandler+0x8da>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	429a      	cmp	r2, r3
 800a554:	d307      	bcc.n	800a566 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1f2      	bne.n	800a54a <HAL_DMA_IRQHandler+0x8da>
 800a564:	e000      	b.n	800a568 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a566:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2203      	movs	r2, #3
 800a57a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a57e:	e003      	b.n	800a588 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 8272 	beq.w	800aa7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
 800a5a2:	e26c      	b.n	800aa7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a43      	ldr	r2, [pc, #268]	; (800a6b8 <HAL_DMA_IRQHandler+0xa48>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d022      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a42      	ldr	r2, [pc, #264]	; (800a6bc <HAL_DMA_IRQHandler+0xa4c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d01d      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a40      	ldr	r2, [pc, #256]	; (800a6c0 <HAL_DMA_IRQHandler+0xa50>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d018      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a3f      	ldr	r2, [pc, #252]	; (800a6c4 <HAL_DMA_IRQHandler+0xa54>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d013      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a3d      	ldr	r2, [pc, #244]	; (800a6c8 <HAL_DMA_IRQHandler+0xa58>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d00e      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a3c      	ldr	r2, [pc, #240]	; (800a6cc <HAL_DMA_IRQHandler+0xa5c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d009      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a3a      	ldr	r2, [pc, #232]	; (800a6d0 <HAL_DMA_IRQHandler+0xa60>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d004      	beq.n	800a5f4 <HAL_DMA_IRQHandler+0x984>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a39      	ldr	r2, [pc, #228]	; (800a6d4 <HAL_DMA_IRQHandler+0xa64>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d101      	bne.n	800a5f8 <HAL_DMA_IRQHandler+0x988>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <HAL_DMA_IRQHandler+0x98a>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 823f 	beq.w	800aa7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	2204      	movs	r2, #4
 800a612:	409a      	lsls	r2, r3
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80cd 	beq.w	800a7b8 <HAL_DMA_IRQHandler+0xb48>
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80c7 	beq.w	800a7b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62e:	f003 031f 	and.w	r3, r3, #31
 800a632:	2204      	movs	r2, #4
 800a634:	409a      	lsls	r2, r3
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d049      	beq.n	800a6d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8210 	beq.w	800aa78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a660:	e20a      	b.n	800aa78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8206 	beq.w	800aa78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a674:	e200      	b.n	800aa78 <HAL_DMA_IRQHandler+0xe08>
 800a676:	bf00      	nop
 800a678:	40020010 	.word	0x40020010
 800a67c:	40020028 	.word	0x40020028
 800a680:	40020040 	.word	0x40020040
 800a684:	40020058 	.word	0x40020058
 800a688:	40020070 	.word	0x40020070
 800a68c:	40020088 	.word	0x40020088
 800a690:	400200a0 	.word	0x400200a0
 800a694:	400200b8 	.word	0x400200b8
 800a698:	40020410 	.word	0x40020410
 800a69c:	40020428 	.word	0x40020428
 800a6a0:	40020440 	.word	0x40020440
 800a6a4:	40020458 	.word	0x40020458
 800a6a8:	40020470 	.word	0x40020470
 800a6ac:	40020488 	.word	0x40020488
 800a6b0:	400204a0 	.word	0x400204a0
 800a6b4:	400204b8 	.word	0x400204b8
 800a6b8:	58025408 	.word	0x58025408
 800a6bc:	5802541c 	.word	0x5802541c
 800a6c0:	58025430 	.word	0x58025430
 800a6c4:	58025444 	.word	0x58025444
 800a6c8:	58025458 	.word	0x58025458
 800a6cc:	5802546c 	.word	0x5802546c
 800a6d0:	58025480 	.word	0x58025480
 800a6d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d160      	bne.n	800a7a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a8c      	ldr	r2, [pc, #560]	; (800a918 <HAL_DMA_IRQHandler+0xca8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d04a      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a8a      	ldr	r2, [pc, #552]	; (800a91c <HAL_DMA_IRQHandler+0xcac>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d045      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a89      	ldr	r2, [pc, #548]	; (800a920 <HAL_DMA_IRQHandler+0xcb0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d040      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a87      	ldr	r2, [pc, #540]	; (800a924 <HAL_DMA_IRQHandler+0xcb4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d03b      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a86      	ldr	r2, [pc, #536]	; (800a928 <HAL_DMA_IRQHandler+0xcb8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d036      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a84      	ldr	r2, [pc, #528]	; (800a92c <HAL_DMA_IRQHandler+0xcbc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d031      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a83      	ldr	r2, [pc, #524]	; (800a930 <HAL_DMA_IRQHandler+0xcc0>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d02c      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a81      	ldr	r2, [pc, #516]	; (800a934 <HAL_DMA_IRQHandler+0xcc4>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d027      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a80      	ldr	r2, [pc, #512]	; (800a938 <HAL_DMA_IRQHandler+0xcc8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d022      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a7e      	ldr	r2, [pc, #504]	; (800a93c <HAL_DMA_IRQHandler+0xccc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d01d      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a7d      	ldr	r2, [pc, #500]	; (800a940 <HAL_DMA_IRQHandler+0xcd0>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d018      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a7b      	ldr	r2, [pc, #492]	; (800a944 <HAL_DMA_IRQHandler+0xcd4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d013      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a7a      	ldr	r2, [pc, #488]	; (800a948 <HAL_DMA_IRQHandler+0xcd8>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d00e      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a78      	ldr	r2, [pc, #480]	; (800a94c <HAL_DMA_IRQHandler+0xcdc>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d009      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a77      	ldr	r2, [pc, #476]	; (800a950 <HAL_DMA_IRQHandler+0xce0>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d004      	beq.n	800a782 <HAL_DMA_IRQHandler+0xb12>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a75      	ldr	r2, [pc, #468]	; (800a954 <HAL_DMA_IRQHandler+0xce4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d108      	bne.n	800a794 <HAL_DMA_IRQHandler+0xb24>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0208 	bic.w	r2, r2, #8
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e007      	b.n	800a7a4 <HAL_DMA_IRQHandler+0xb34>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0204 	bic.w	r2, r2, #4
 800a7a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8165 	beq.w	800aa78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7b6:	e15f      	b.n	800aa78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7bc:	f003 031f 	and.w	r3, r3, #31
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80c5 	beq.w	800a958 <HAL_DMA_IRQHandler+0xce8>
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 80bf 	beq.w	800a958 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7de:	f003 031f 	and.w	r3, r3, #31
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	409a      	lsls	r2, r3
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d018      	beq.n	800a826 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 813a 	beq.w	800aa7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a810:	e134      	b.n	800aa7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8130 	beq.w	800aa7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a824:	e12a      	b.n	800aa7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d168      	bne.n	800a902 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a38      	ldr	r2, [pc, #224]	; (800a918 <HAL_DMA_IRQHandler+0xca8>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d04a      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a37      	ldr	r2, [pc, #220]	; (800a91c <HAL_DMA_IRQHandler+0xcac>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d045      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a35      	ldr	r2, [pc, #212]	; (800a920 <HAL_DMA_IRQHandler+0xcb0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d040      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a34      	ldr	r2, [pc, #208]	; (800a924 <HAL_DMA_IRQHandler+0xcb4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d03b      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a32      	ldr	r2, [pc, #200]	; (800a928 <HAL_DMA_IRQHandler+0xcb8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d036      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a31      	ldr	r2, [pc, #196]	; (800a92c <HAL_DMA_IRQHandler+0xcbc>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d031      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a2f      	ldr	r2, [pc, #188]	; (800a930 <HAL_DMA_IRQHandler+0xcc0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d02c      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a2e      	ldr	r2, [pc, #184]	; (800a934 <HAL_DMA_IRQHandler+0xcc4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d027      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a2c      	ldr	r2, [pc, #176]	; (800a938 <HAL_DMA_IRQHandler+0xcc8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d022      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a2b      	ldr	r2, [pc, #172]	; (800a93c <HAL_DMA_IRQHandler+0xccc>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d01d      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a29      	ldr	r2, [pc, #164]	; (800a940 <HAL_DMA_IRQHandler+0xcd0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d018      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a28      	ldr	r2, [pc, #160]	; (800a944 <HAL_DMA_IRQHandler+0xcd4>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d013      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a26      	ldr	r2, [pc, #152]	; (800a948 <HAL_DMA_IRQHandler+0xcd8>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d00e      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a25      	ldr	r2, [pc, #148]	; (800a94c <HAL_DMA_IRQHandler+0xcdc>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d009      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a23      	ldr	r2, [pc, #140]	; (800a950 <HAL_DMA_IRQHandler+0xce0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d004      	beq.n	800a8d0 <HAL_DMA_IRQHandler+0xc60>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a22      	ldr	r2, [pc, #136]	; (800a954 <HAL_DMA_IRQHandler+0xce4>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d108      	bne.n	800a8e2 <HAL_DMA_IRQHandler+0xc72>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0214 	bic.w	r2, r2, #20
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e007      	b.n	800a8f2 <HAL_DMA_IRQHandler+0xc82>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 020a 	bic.w	r2, r2, #10
 800a8f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80b8 	beq.w	800aa7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a914:	e0b2      	b.n	800aa7c <HAL_DMA_IRQHandler+0xe0c>
 800a916:	bf00      	nop
 800a918:	40020010 	.word	0x40020010
 800a91c:	40020028 	.word	0x40020028
 800a920:	40020040 	.word	0x40020040
 800a924:	40020058 	.word	0x40020058
 800a928:	40020070 	.word	0x40020070
 800a92c:	40020088 	.word	0x40020088
 800a930:	400200a0 	.word	0x400200a0
 800a934:	400200b8 	.word	0x400200b8
 800a938:	40020410 	.word	0x40020410
 800a93c:	40020428 	.word	0x40020428
 800a940:	40020440 	.word	0x40020440
 800a944:	40020458 	.word	0x40020458
 800a948:	40020470 	.word	0x40020470
 800a94c:	40020488 	.word	0x40020488
 800a950:	400204a0 	.word	0x400204a0
 800a954:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	2208      	movs	r2, #8
 800a962:	409a      	lsls	r2, r3
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	4013      	ands	r3, r2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 8088 	beq.w	800aa7e <HAL_DMA_IRQHandler+0xe0e>
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8082 	beq.w	800aa7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a41      	ldr	r2, [pc, #260]	; (800aa84 <HAL_DMA_IRQHandler+0xe14>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d04a      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a3f      	ldr	r2, [pc, #252]	; (800aa88 <HAL_DMA_IRQHandler+0xe18>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d045      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a3e      	ldr	r2, [pc, #248]	; (800aa8c <HAL_DMA_IRQHandler+0xe1c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d040      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a3c      	ldr	r2, [pc, #240]	; (800aa90 <HAL_DMA_IRQHandler+0xe20>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d03b      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a3b      	ldr	r2, [pc, #236]	; (800aa94 <HAL_DMA_IRQHandler+0xe24>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d036      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a39      	ldr	r2, [pc, #228]	; (800aa98 <HAL_DMA_IRQHandler+0xe28>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d031      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a38      	ldr	r2, [pc, #224]	; (800aa9c <HAL_DMA_IRQHandler+0xe2c>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d02c      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a36      	ldr	r2, [pc, #216]	; (800aaa0 <HAL_DMA_IRQHandler+0xe30>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d027      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a35      	ldr	r2, [pc, #212]	; (800aaa4 <HAL_DMA_IRQHandler+0xe34>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d022      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a33      	ldr	r2, [pc, #204]	; (800aaa8 <HAL_DMA_IRQHandler+0xe38>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d01d      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a32      	ldr	r2, [pc, #200]	; (800aaac <HAL_DMA_IRQHandler+0xe3c>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d018      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a30      	ldr	r2, [pc, #192]	; (800aab0 <HAL_DMA_IRQHandler+0xe40>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d013      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a2f      	ldr	r2, [pc, #188]	; (800aab4 <HAL_DMA_IRQHandler+0xe44>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00e      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a2d      	ldr	r2, [pc, #180]	; (800aab8 <HAL_DMA_IRQHandler+0xe48>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d009      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a2c      	ldr	r2, [pc, #176]	; (800aabc <HAL_DMA_IRQHandler+0xe4c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d004      	beq.n	800aa1a <HAL_DMA_IRQHandler+0xdaa>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a2a      	ldr	r2, [pc, #168]	; (800aac0 <HAL_DMA_IRQHandler+0xe50>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d108      	bne.n	800aa2c <HAL_DMA_IRQHandler+0xdbc>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 021c 	bic.w	r2, r2, #28
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	e007      	b.n	800aa3c <HAL_DMA_IRQHandler+0xdcc>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 020e 	bic.w	r2, r2, #14
 800aa3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa40:	f003 031f 	and.w	r3, r3, #31
 800aa44:	2201      	movs	r2, #1
 800aa46:	409a      	lsls	r2, r3
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	4798      	blx	r3
 800aa72:	e004      	b.n	800aa7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800aa74:	bf00      	nop
 800aa76:	e002      	b.n	800aa7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa78:	bf00      	nop
 800aa7a:	e000      	b.n	800aa7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800aa7e:	3728      	adds	r7, #40	; 0x28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40020010 	.word	0x40020010
 800aa88:	40020028 	.word	0x40020028
 800aa8c:	40020040 	.word	0x40020040
 800aa90:	40020058 	.word	0x40020058
 800aa94:	40020070 	.word	0x40020070
 800aa98:	40020088 	.word	0x40020088
 800aa9c:	400200a0 	.word	0x400200a0
 800aaa0:	400200b8 	.word	0x400200b8
 800aaa4:	40020410 	.word	0x40020410
 800aaa8:	40020428 	.word	0x40020428
 800aaac:	40020440 	.word	0x40020440
 800aab0:	40020458 	.word	0x40020458
 800aab4:	40020470 	.word	0x40020470
 800aab8:	40020488 	.word	0x40020488
 800aabc:	400204a0 	.word	0x400204a0
 800aac0:	400204b8 	.word	0x400204b8

0800aac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a42      	ldr	r2, [pc, #264]	; (800abdc <DMA_CalcBaseAndBitshift+0x118>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d04a      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a41      	ldr	r2, [pc, #260]	; (800abe0 <DMA_CalcBaseAndBitshift+0x11c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d045      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a3f      	ldr	r2, [pc, #252]	; (800abe4 <DMA_CalcBaseAndBitshift+0x120>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d040      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a3e      	ldr	r2, [pc, #248]	; (800abe8 <DMA_CalcBaseAndBitshift+0x124>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d03b      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a3c      	ldr	r2, [pc, #240]	; (800abec <DMA_CalcBaseAndBitshift+0x128>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d036      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a3b      	ldr	r2, [pc, #236]	; (800abf0 <DMA_CalcBaseAndBitshift+0x12c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d031      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a39      	ldr	r2, [pc, #228]	; (800abf4 <DMA_CalcBaseAndBitshift+0x130>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d02c      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a38      	ldr	r2, [pc, #224]	; (800abf8 <DMA_CalcBaseAndBitshift+0x134>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d027      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a36      	ldr	r2, [pc, #216]	; (800abfc <DMA_CalcBaseAndBitshift+0x138>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d022      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a35      	ldr	r2, [pc, #212]	; (800ac00 <DMA_CalcBaseAndBitshift+0x13c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d01d      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a33      	ldr	r2, [pc, #204]	; (800ac04 <DMA_CalcBaseAndBitshift+0x140>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d018      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a32      	ldr	r2, [pc, #200]	; (800ac08 <DMA_CalcBaseAndBitshift+0x144>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d013      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a30      	ldr	r2, [pc, #192]	; (800ac0c <DMA_CalcBaseAndBitshift+0x148>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00e      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a2f      	ldr	r2, [pc, #188]	; (800ac10 <DMA_CalcBaseAndBitshift+0x14c>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d009      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a2d      	ldr	r2, [pc, #180]	; (800ac14 <DMA_CalcBaseAndBitshift+0x150>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d004      	beq.n	800ab6c <DMA_CalcBaseAndBitshift+0xa8>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a2c      	ldr	r2, [pc, #176]	; (800ac18 <DMA_CalcBaseAndBitshift+0x154>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d101      	bne.n	800ab70 <DMA_CalcBaseAndBitshift+0xac>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <DMA_CalcBaseAndBitshift+0xae>
 800ab70:	2300      	movs	r3, #0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d024      	beq.n	800abc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	3b10      	subs	r3, #16
 800ab7e:	4a27      	ldr	r2, [pc, #156]	; (800ac1c <DMA_CalcBaseAndBitshift+0x158>)
 800ab80:	fba2 2303 	umull	r2, r3, r2, r3
 800ab84:	091b      	lsrs	r3, r3, #4
 800ab86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	4a24      	ldr	r2, [pc, #144]	; (800ac20 <DMA_CalcBaseAndBitshift+0x15c>)
 800ab90:	5cd3      	ldrb	r3, [r2, r3]
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d908      	bls.n	800abb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b1f      	ldr	r3, [pc, #124]	; (800ac24 <DMA_CalcBaseAndBitshift+0x160>)
 800aba6:	4013      	ands	r3, r2
 800aba8:	1d1a      	adds	r2, r3, #4
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	659a      	str	r2, [r3, #88]	; 0x58
 800abae:	e00d      	b.n	800abcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	4b1b      	ldr	r3, [pc, #108]	; (800ac24 <DMA_CalcBaseAndBitshift+0x160>)
 800abb8:	4013      	ands	r3, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6593      	str	r3, [r2, #88]	; 0x58
 800abbe:	e005      	b.n	800abcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	40020010 	.word	0x40020010
 800abe0:	40020028 	.word	0x40020028
 800abe4:	40020040 	.word	0x40020040
 800abe8:	40020058 	.word	0x40020058
 800abec:	40020070 	.word	0x40020070
 800abf0:	40020088 	.word	0x40020088
 800abf4:	400200a0 	.word	0x400200a0
 800abf8:	400200b8 	.word	0x400200b8
 800abfc:	40020410 	.word	0x40020410
 800ac00:	40020428 	.word	0x40020428
 800ac04:	40020440 	.word	0x40020440
 800ac08:	40020458 	.word	0x40020458
 800ac0c:	40020470 	.word	0x40020470
 800ac10:	40020488 	.word	0x40020488
 800ac14:	400204a0 	.word	0x400204a0
 800ac18:	400204b8 	.word	0x400204b8
 800ac1c:	aaaaaaab 	.word	0xaaaaaaab
 800ac20:	08014460 	.word	0x08014460
 800ac24:	fffffc00 	.word	0xfffffc00

0800ac28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d120      	bne.n	800ac7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d858      	bhi.n	800acf6 <DMA_CheckFifoParam+0xce>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <DMA_CheckFifoParam+0x24>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac6f 	.word	0x0800ac6f
 800ac54:	0800ac5d 	.word	0x0800ac5d
 800ac58:	0800acf7 	.word	0x0800acf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d048      	beq.n	800acfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac6c:	e045      	b.n	800acfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ac76:	d142      	bne.n	800acfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac7c:	e03f      	b.n	800acfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac86:	d123      	bne.n	800acd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d838      	bhi.n	800ad02 <DMA_CheckFifoParam+0xda>
 800ac90:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <DMA_CheckFifoParam+0x70>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800aca9 	.word	0x0800aca9
 800ac9c:	0800acaf 	.word	0x0800acaf
 800aca0:	0800aca9 	.word	0x0800aca9
 800aca4:	0800acc1 	.word	0x0800acc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	73fb      	strb	r3, [r7, #15]
        break;
 800acac:	e030      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d025      	beq.n	800ad06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800acbe:	e022      	b.n	800ad06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800acc8:	d11f      	bne.n	800ad0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800acce:	e01c      	b.n	800ad0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d902      	bls.n	800acde <DMA_CheckFifoParam+0xb6>
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d003      	beq.n	800ace4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800acdc:	e018      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	73fb      	strb	r3, [r7, #15]
        break;
 800ace2:	e015      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00e      	beq.n	800ad0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
    break;
 800acf4:	e00b      	b.n	800ad0e <DMA_CheckFifoParam+0xe6>
        break;
 800acf6:	bf00      	nop
 800acf8:	e00a      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        break;
 800acfa:	bf00      	nop
 800acfc:	e008      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        break;
 800acfe:	bf00      	nop
 800ad00:	e006      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        break;
 800ad02:	bf00      	nop
 800ad04:	e004      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        break;
 800ad06:	bf00      	nop
 800ad08:	e002      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
        break;
 800ad0a:	bf00      	nop
 800ad0c:	e000      	b.n	800ad10 <DMA_CheckFifoParam+0xe8>
    break;
 800ad0e:	bf00      	nop
    }
  }

  return status;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop

0800ad20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a38      	ldr	r2, [pc, #224]	; (800ae14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d022      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a36      	ldr	r2, [pc, #216]	; (800ae18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d01d      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a35      	ldr	r2, [pc, #212]	; (800ae1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d018      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a33      	ldr	r2, [pc, #204]	; (800ae20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a32      	ldr	r2, [pc, #200]	; (800ae24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00e      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a30      	ldr	r2, [pc, #192]	; (800ae28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d009      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a2f      	ldr	r2, [pc, #188]	; (800ae2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d004      	beq.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2d      	ldr	r2, [pc, #180]	; (800ae30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d101      	bne.n	800ad82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ad82:	2300      	movs	r3, #0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d01a      	beq.n	800adbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	3b08      	subs	r3, #8
 800ad90:	4a28      	ldr	r2, [pc, #160]	; (800ae34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ad92:	fba2 2303 	umull	r2, r3, r2, r3
 800ad96:	091b      	lsrs	r3, r3, #4
 800ad98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4b26      	ldr	r3, [pc, #152]	; (800ae38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ad9e:	4413      	add	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a24      	ldr	r2, [pc, #144]	; (800ae3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800adac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2201      	movs	r2, #1
 800adb6:	409a      	lsls	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800adbc:	e024      	b.n	800ae08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	3b10      	subs	r3, #16
 800adc6:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800adc8:	fba2 2303 	umull	r2, r3, r2, r3
 800adcc:	091b      	lsrs	r3, r3, #4
 800adce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	4a1c      	ldr	r2, [pc, #112]	; (800ae44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d806      	bhi.n	800ade6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d902      	bls.n	800ade6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3308      	adds	r3, #8
 800ade4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a16      	ldr	r2, [pc, #88]	; (800ae50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800adf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f003 031f 	and.w	r3, r3, #31
 800ae00:	2201      	movs	r2, #1
 800ae02:	409a      	lsls	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	58025408 	.word	0x58025408
 800ae18:	5802541c 	.word	0x5802541c
 800ae1c:	58025430 	.word	0x58025430
 800ae20:	58025444 	.word	0x58025444
 800ae24:	58025458 	.word	0x58025458
 800ae28:	5802546c 	.word	0x5802546c
 800ae2c:	58025480 	.word	0x58025480
 800ae30:	58025494 	.word	0x58025494
 800ae34:	cccccccd 	.word	0xcccccccd
 800ae38:	16009600 	.word	0x16009600
 800ae3c:	58025880 	.word	0x58025880
 800ae40:	aaaaaaab 	.word	0xaaaaaaab
 800ae44:	400204b8 	.word	0x400204b8
 800ae48:	4002040f 	.word	0x4002040f
 800ae4c:	10008200 	.word	0x10008200
 800ae50:	40020880 	.word	0x40020880

0800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d04a      	beq.n	800af00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d847      	bhi.n	800af00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a25      	ldr	r2, [pc, #148]	; (800af0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d022      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a24      	ldr	r2, [pc, #144]	; (800af10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d01d      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a22      	ldr	r2, [pc, #136]	; (800af14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d018      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a21      	ldr	r2, [pc, #132]	; (800af18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d013      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1f      	ldr	r2, [pc, #124]	; (800af1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00e      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a1e      	ldr	r2, [pc, #120]	; (800af20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d009      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a1c      	ldr	r2, [pc, #112]	; (800af24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a1b      	ldr	r2, [pc, #108]	; (800af28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d101      	bne.n	800aec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e000      	b.n	800aec6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800aec4:	2300      	movs	r3, #0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4b17      	ldr	r3, [pc, #92]	; (800af2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	461a      	mov	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800aedc:	671a      	str	r2, [r3, #112]	; 0x70
 800aede:	e009      	b.n	800aef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4b14      	ldr	r3, [pc, #80]	; (800af34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	461a      	mov	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a11      	ldr	r2, [pc, #68]	; (800af38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800aef2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	2201      	movs	r2, #1
 800aefa:	409a      	lsls	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800af00:	bf00      	nop
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	58025408 	.word	0x58025408
 800af10:	5802541c 	.word	0x5802541c
 800af14:	58025430 	.word	0x58025430
 800af18:	58025444 	.word	0x58025444
 800af1c:	58025458 	.word	0x58025458
 800af20:	5802546c 	.word	0x5802546c
 800af24:	58025480 	.word	0x58025480
 800af28:	58025494 	.word	0x58025494
 800af2c:	1600963f 	.word	0x1600963f
 800af30:	58025940 	.word	0x58025940
 800af34:	1000823f 	.word	0x1000823f
 800af38:	40020940 	.word	0x40020940

0800af3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b089      	sub	sp, #36	; 0x24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800af4a:	4b86      	ldr	r3, [pc, #536]	; (800b164 <HAL_GPIO_Init+0x228>)
 800af4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800af4e:	e18c      	b.n	800b26a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	2101      	movs	r1, #1
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	fa01 f303 	lsl.w	r3, r1, r3
 800af5c:	4013      	ands	r3, r2
 800af5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 817e 	beq.w	800b264 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	2b01      	cmp	r3, #1
 800af72:	d005      	beq.n	800af80 <HAL_GPIO_Init+0x44>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d130      	bne.n	800afe2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	2203      	movs	r2, #3
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	4013      	ands	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	fa02 f303 	lsl.w	r3, r2, r3
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800afb6:	2201      	movs	r2, #1
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	fa02 f303 	lsl.w	r3, r2, r3
 800afbe:	43db      	mvns	r3, r3
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	4013      	ands	r3, r2
 800afc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	091b      	lsrs	r3, r3, #4
 800afcc:	f003 0201 	and.w	r2, r3, #1
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	4313      	orrs	r3, r2
 800afda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b03      	cmp	r3, #3
 800afec:	d017      	beq.n	800b01e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	2203      	movs	r2, #3
 800affa:	fa02 f303 	lsl.w	r3, r2, r3
 800affe:	43db      	mvns	r3, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4013      	ands	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	fa02 f303 	lsl.w	r3, r2, r3
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	4313      	orrs	r3, r2
 800b016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f003 0303 	and.w	r3, r3, #3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d123      	bne.n	800b072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	08da      	lsrs	r2, r3, #3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3208      	adds	r2, #8
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	220f      	movs	r2, #15
 800b042:	fa02 f303 	lsl.w	r3, r2, r3
 800b046:	43db      	mvns	r3, r3
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	4013      	ands	r3, r2
 800b04c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	4313      	orrs	r3, r2
 800b062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	08da      	lsrs	r2, r3, #3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3208      	adds	r2, #8
 800b06c:	69b9      	ldr	r1, [r7, #24]
 800b06e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	2203      	movs	r2, #3
 800b07e:	fa02 f303 	lsl.w	r3, r2, r3
 800b082:	43db      	mvns	r3, r3
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	4013      	ands	r3, r2
 800b088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f003 0203 	and.w	r2, r3, #3
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	fa02 f303 	lsl.w	r3, r2, r3
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 80d8 	beq.w	800b264 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0b4:	4b2c      	ldr	r3, [pc, #176]	; (800b168 <HAL_GPIO_Init+0x22c>)
 800b0b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0ba:	4a2b      	ldr	r2, [pc, #172]	; (800b168 <HAL_GPIO_Init+0x22c>)
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b0c4:	4b28      	ldr	r3, [pc, #160]	; (800b168 <HAL_GPIO_Init+0x22c>)
 800b0c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0d2:	4a26      	ldr	r2, [pc, #152]	; (800b16c <HAL_GPIO_Init+0x230>)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	089b      	lsrs	r3, r3, #2
 800b0d8:	3302      	adds	r3, #2
 800b0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	220f      	movs	r2, #15
 800b0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a1d      	ldr	r2, [pc, #116]	; (800b170 <HAL_GPIO_Init+0x234>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d04a      	beq.n	800b194 <HAL_GPIO_Init+0x258>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a1c      	ldr	r2, [pc, #112]	; (800b174 <HAL_GPIO_Init+0x238>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d02b      	beq.n	800b15e <HAL_GPIO_Init+0x222>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a1b      	ldr	r2, [pc, #108]	; (800b178 <HAL_GPIO_Init+0x23c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d025      	beq.n	800b15a <HAL_GPIO_Init+0x21e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a1a      	ldr	r2, [pc, #104]	; (800b17c <HAL_GPIO_Init+0x240>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d01f      	beq.n	800b156 <HAL_GPIO_Init+0x21a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a19      	ldr	r2, [pc, #100]	; (800b180 <HAL_GPIO_Init+0x244>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d019      	beq.n	800b152 <HAL_GPIO_Init+0x216>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a18      	ldr	r2, [pc, #96]	; (800b184 <HAL_GPIO_Init+0x248>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d013      	beq.n	800b14e <HAL_GPIO_Init+0x212>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a17      	ldr	r2, [pc, #92]	; (800b188 <HAL_GPIO_Init+0x24c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d00d      	beq.n	800b14a <HAL_GPIO_Init+0x20e>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a16      	ldr	r2, [pc, #88]	; (800b18c <HAL_GPIO_Init+0x250>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d007      	beq.n	800b146 <HAL_GPIO_Init+0x20a>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a15      	ldr	r2, [pc, #84]	; (800b190 <HAL_GPIO_Init+0x254>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d101      	bne.n	800b142 <HAL_GPIO_Init+0x206>
 800b13e:	2309      	movs	r3, #9
 800b140:	e029      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b142:	230a      	movs	r3, #10
 800b144:	e027      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b146:	2307      	movs	r3, #7
 800b148:	e025      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b14a:	2306      	movs	r3, #6
 800b14c:	e023      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b14e:	2305      	movs	r3, #5
 800b150:	e021      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b152:	2304      	movs	r3, #4
 800b154:	e01f      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b156:	2303      	movs	r3, #3
 800b158:	e01d      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e01b      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b15e:	2301      	movs	r3, #1
 800b160:	e019      	b.n	800b196 <HAL_GPIO_Init+0x25a>
 800b162:	bf00      	nop
 800b164:	58000080 	.word	0x58000080
 800b168:	58024400 	.word	0x58024400
 800b16c:	58000400 	.word	0x58000400
 800b170:	58020000 	.word	0x58020000
 800b174:	58020400 	.word	0x58020400
 800b178:	58020800 	.word	0x58020800
 800b17c:	58020c00 	.word	0x58020c00
 800b180:	58021000 	.word	0x58021000
 800b184:	58021400 	.word	0x58021400
 800b188:	58021800 	.word	0x58021800
 800b18c:	58021c00 	.word	0x58021c00
 800b190:	58022400 	.word	0x58022400
 800b194:	2300      	movs	r3, #0
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	f002 0203 	and.w	r2, r2, #3
 800b19c:	0092      	lsls	r2, r2, #2
 800b19e:	4093      	lsls	r3, r2
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b1a6:	4938      	ldr	r1, [pc, #224]	; (800b288 <HAL_GPIO_Init+0x34c>)
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	089b      	lsrs	r3, r3, #2
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b1b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	43db      	mvns	r3, r3
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b1da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b1e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	4313      	orrs	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	43db      	mvns	r3, r3
 800b21a:	69ba      	ldr	r2, [r7, #24]
 800b21c:	4013      	ands	r3, r2
 800b21e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	4313      	orrs	r3, r2
 800b232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	43db      	mvns	r3, r3
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	4013      	ands	r3, r2
 800b248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	3301      	adds	r3, #1
 800b268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	fa22 f303 	lsr.w	r3, r2, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	f47f ae6b 	bne.w	800af50 <HAL_GPIO_Init+0x14>
  }
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	3724      	adds	r7, #36	; 0x24
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	58000400 	.word	0x58000400

0800b28c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	807b      	strh	r3, [r7, #2]
 800b298:	4613      	mov	r3, r2
 800b29a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b29c:	787b      	ldrb	r3, [r7, #1]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2a2:	887a      	ldrh	r2, [r7, #2]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b2a8:	e003      	b.n	800b2b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b2aa:	887b      	ldrh	r3, [r7, #2]
 800b2ac:	041a      	lsls	r2, r3, #16
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	619a      	str	r2, [r3, #24]
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b2d0:	887a      	ldrh	r2, [r7, #2]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	041a      	lsls	r2, r3, #16
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	43d9      	mvns	r1, r3
 800b2dc:	887b      	ldrh	r3, [r7, #2]
 800b2de:	400b      	ands	r3, r1
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	619a      	str	r2, [r3, #24]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <HAL_PWREx_ConfigSupply+0x70>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b04      	cmp	r3, #4
 800b306:	d00a      	beq.n	800b31e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b308:	4b16      	ldr	r3, [pc, #88]	; (800b364 <HAL_PWREx_ConfigSupply+0x70>)
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	429a      	cmp	r2, r3
 800b314:	d001      	beq.n	800b31a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e01f      	b.n	800b35a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	e01d      	b.n	800b35a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b31e:	4b11      	ldr	r3, [pc, #68]	; (800b364 <HAL_PWREx_ConfigSupply+0x70>)
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f023 0207 	bic.w	r2, r3, #7
 800b326:	490f      	ldr	r1, [pc, #60]	; (800b364 <HAL_PWREx_ConfigSupply+0x70>)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b32e:	f7fc f9ef 	bl	8007710 <HAL_GetTick>
 800b332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b334:	e009      	b.n	800b34a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b336:	f7fc f9eb 	bl	8007710 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b344:	d901      	bls.n	800b34a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e007      	b.n	800b35a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b34a:	4b06      	ldr	r3, [pc, #24]	; (800b364 <HAL_PWREx_ConfigSupply+0x70>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b356:	d1ee      	bne.n	800b336 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	58024800 	.word	0x58024800

0800b368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08c      	sub	sp, #48	; 0x30
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e397      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8087 	beq.w	800b496 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b388:	4b9e      	ldr	r3, [pc, #632]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b392:	4b9c      	ldr	r3, [pc, #624]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	2b10      	cmp	r3, #16
 800b39c:	d007      	beq.n	800b3ae <HAL_RCC_OscConfig+0x46>
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	2b18      	cmp	r3, #24
 800b3a2:	d110      	bne.n	800b3c6 <HAL_RCC_OscConfig+0x5e>
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d10b      	bne.n	800b3c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3ae:	4b95      	ldr	r3, [pc, #596]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d06c      	beq.n	800b494 <HAL_RCC_OscConfig+0x12c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d168      	bne.n	800b494 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e371      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ce:	d106      	bne.n	800b3de <HAL_RCC_OscConfig+0x76>
 800b3d0:	4b8c      	ldr	r3, [pc, #560]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a8b      	ldr	r2, [pc, #556]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	e02e      	b.n	800b43c <HAL_RCC_OscConfig+0xd4>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10c      	bne.n	800b400 <HAL_RCC_OscConfig+0x98>
 800b3e6:	4b87      	ldr	r3, [pc, #540]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a86      	ldr	r2, [pc, #536]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	4b84      	ldr	r3, [pc, #528]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a83      	ldr	r2, [pc, #524]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b3f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	e01d      	b.n	800b43c <HAL_RCC_OscConfig+0xd4>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b408:	d10c      	bne.n	800b424 <HAL_RCC_OscConfig+0xbc>
 800b40a:	4b7e      	ldr	r3, [pc, #504]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a7d      	ldr	r2, [pc, #500]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	4b7b      	ldr	r3, [pc, #492]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a7a      	ldr	r2, [pc, #488]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b41c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	e00b      	b.n	800b43c <HAL_RCC_OscConfig+0xd4>
 800b424:	4b77      	ldr	r3, [pc, #476]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a76      	ldr	r2, [pc, #472]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b42a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	4b74      	ldr	r3, [pc, #464]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a73      	ldr	r2, [pc, #460]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b43a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d013      	beq.n	800b46c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b444:	f7fc f964 	bl	8007710 <HAL_GetTick>
 800b448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b44a:	e008      	b.n	800b45e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b44c:	f7fc f960 	bl	8007710 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b64      	cmp	r3, #100	; 0x64
 800b458:	d901      	bls.n	800b45e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e325      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b45e:	4b69      	ldr	r3, [pc, #420]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0f0      	beq.n	800b44c <HAL_RCC_OscConfig+0xe4>
 800b46a:	e014      	b.n	800b496 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b46c:	f7fc f950 	bl	8007710 <HAL_GetTick>
 800b470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b472:	e008      	b.n	800b486 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b474:	f7fc f94c 	bl	8007710 <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b64      	cmp	r3, #100	; 0x64
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e311      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b486:	4b5f      	ldr	r3, [pc, #380]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f0      	bne.n	800b474 <HAL_RCC_OscConfig+0x10c>
 800b492:	e000      	b.n	800b496 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 808a 	beq.w	800b5b8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4a4:	4b57      	ldr	r3, [pc, #348]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4ae:	4b55      	ldr	r3, [pc, #340]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d007      	beq.n	800b4ca <HAL_RCC_OscConfig+0x162>
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	2b18      	cmp	r3, #24
 800b4be:	d137      	bne.n	800b530 <HAL_RCC_OscConfig+0x1c8>
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d132      	bne.n	800b530 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4ca:	4b4e      	ldr	r3, [pc, #312]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0304 	and.w	r3, r3, #4
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d005      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x17a>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e2e3      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4e2:	4b48      	ldr	r3, [pc, #288]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f023 0219 	bic.w	r2, r3, #25
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	4945      	ldr	r1, [pc, #276]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b4f4:	f7fc f90c 	bl	8007710 <HAL_GetTick>
 800b4f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4fa:	e008      	b.n	800b50e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4fc:	f7fc f908 	bl	8007710 <HAL_GetTick>
 800b500:	4602      	mov	r2, r0
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	2b02      	cmp	r3, #2
 800b508:	d901      	bls.n	800b50e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e2cd      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b50e:	4b3d      	ldr	r3, [pc, #244]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0304 	and.w	r3, r3, #4
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0f0      	beq.n	800b4fc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b51a:	4b3a      	ldr	r3, [pc, #232]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	061b      	lsls	r3, r3, #24
 800b528:	4936      	ldr	r1, [pc, #216]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b52e:	e043      	b.n	800b5b8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d026      	beq.n	800b586 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b538:	4b32      	ldr	r3, [pc, #200]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f023 0219 	bic.w	r2, r3, #25
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	492f      	ldr	r1, [pc, #188]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54a:	f7fc f8e1 	bl	8007710 <HAL_GetTick>
 800b54e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b550:	e008      	b.n	800b564 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b552:	f7fc f8dd 	bl	8007710 <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d901      	bls.n	800b564 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e2a2      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b564:	4b27      	ldr	r3, [pc, #156]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0f0      	beq.n	800b552 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b570:	4b24      	ldr	r3, [pc, #144]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	061b      	lsls	r3, r3, #24
 800b57e:	4921      	ldr	r1, [pc, #132]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b580:	4313      	orrs	r3, r2
 800b582:	604b      	str	r3, [r1, #4]
 800b584:	e018      	b.n	800b5b8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b586:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1e      	ldr	r2, [pc, #120]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b58c:	f023 0301 	bic.w	r3, r3, #1
 800b590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b592:	f7fc f8bd 	bl	8007710 <HAL_GetTick>
 800b596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b598:	e008      	b.n	800b5ac <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b59a:	f7fc f8b9 	bl	8007710 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d901      	bls.n	800b5ac <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e27e      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b5ac:	4b15      	ldr	r3, [pc, #84]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1f0      	bne.n	800b59a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d06d      	beq.n	800b6a0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	2b08      	cmp	r3, #8
 800b5d8:	d007      	beq.n	800b5ea <HAL_RCC_OscConfig+0x282>
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	2b18      	cmp	r3, #24
 800b5de:	d11e      	bne.n	800b61e <HAL_RCC_OscConfig+0x2b6>
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d119      	bne.n	800b61e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5ea:	4b06      	ldr	r3, [pc, #24]	; (800b604 <HAL_RCC_OscConfig+0x29c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <HAL_RCC_OscConfig+0x2a0>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	2b80      	cmp	r3, #128	; 0x80
 800b5fc:	d004      	beq.n	800b608 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e253      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b608:	4ba3      	ldr	r3, [pc, #652]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	061b      	lsls	r3, r3, #24
 800b616:	49a0      	ldr	r1, [pc, #640]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b618:	4313      	orrs	r3, r2
 800b61a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b61c:	e040      	b.n	800b6a0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d023      	beq.n	800b66e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b626:	4b9c      	ldr	r3, [pc, #624]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a9b      	ldr	r2, [pc, #620]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b632:	f7fc f86d 	bl	8007710 <HAL_GetTick>
 800b636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b638:	e008      	b.n	800b64c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b63a:	f7fc f869 	bl	8007710 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e22e      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b64c:	4b92      	ldr	r3, [pc, #584]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b658:	4b8f      	ldr	r3, [pc, #572]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	061b      	lsls	r3, r3, #24
 800b666:	498c      	ldr	r1, [pc, #560]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	60cb      	str	r3, [r1, #12]
 800b66c:	e018      	b.n	800b6a0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b66e:	4b8a      	ldr	r3, [pc, #552]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a89      	ldr	r2, [pc, #548]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67a:	f7fc f849 	bl	8007710 <HAL_GetTick>
 800b67e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b680:	e008      	b.n	800b694 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b682:	f7fc f845 	bl	8007710 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d901      	bls.n	800b694 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e20a      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b694:	4b80      	ldr	r3, [pc, #512]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f0      	bne.n	800b682 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0308 	and.w	r3, r3, #8
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d036      	beq.n	800b71a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d019      	beq.n	800b6e8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6b4:	4b78      	ldr	r3, [pc, #480]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b6b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b8:	4a77      	ldr	r2, [pc, #476]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b6ba:	f043 0301 	orr.w	r3, r3, #1
 800b6be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c0:	f7fc f826 	bl	8007710 <HAL_GetTick>
 800b6c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6c6:	e008      	b.n	800b6da <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6c8:	f7fc f822 	bl	8007710 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d901      	bls.n	800b6da <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e1e7      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6da:	4b6f      	ldr	r3, [pc, #444]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f0      	beq.n	800b6c8 <HAL_RCC_OscConfig+0x360>
 800b6e6:	e018      	b.n	800b71a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6e8:	4b6b      	ldr	r3, [pc, #428]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ec:	4a6a      	ldr	r2, [pc, #424]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b6ee:	f023 0301 	bic.w	r3, r3, #1
 800b6f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6f4:	f7fc f80c 	bl	8007710 <HAL_GetTick>
 800b6f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6fc:	f7fc f808 	bl	8007710 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e1cd      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b70e:	4b62      	ldr	r3, [pc, #392]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1f0      	bne.n	800b6fc <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0320 	and.w	r3, r3, #32
 800b722:	2b00      	cmp	r3, #0
 800b724:	d036      	beq.n	800b794 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d019      	beq.n	800b762 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b72e:	4b5a      	ldr	r3, [pc, #360]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a59      	ldr	r2, [pc, #356]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b738:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b73a:	f7fb ffe9 	bl	8007710 <HAL_GetTick>
 800b73e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b740:	e008      	b.n	800b754 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b742:	f7fb ffe5 	bl	8007710 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d901      	bls.n	800b754 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e1aa      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b754:	4b50      	ldr	r3, [pc, #320]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0f0      	beq.n	800b742 <HAL_RCC_OscConfig+0x3da>
 800b760:	e018      	b.n	800b794 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b762:	4b4d      	ldr	r3, [pc, #308]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a4c      	ldr	r2, [pc, #304]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b76c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b76e:	f7fb ffcf 	bl	8007710 <HAL_GetTick>
 800b772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b774:	e008      	b.n	800b788 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b776:	f7fb ffcb 	bl	8007710 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	2b02      	cmp	r3, #2
 800b782:	d901      	bls.n	800b788 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e190      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b788:	4b43      	ldr	r3, [pc, #268]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1f0      	bne.n	800b776 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8085 	beq.w	800b8ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b7a2:	4b3e      	ldr	r3, [pc, #248]	; (800b89c <HAL_RCC_OscConfig+0x534>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a3d      	ldr	r2, [pc, #244]	; (800b89c <HAL_RCC_OscConfig+0x534>)
 800b7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7ae:	f7fb ffaf 	bl	8007710 <HAL_GetTick>
 800b7b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7b6:	f7fb ffab 	bl	8007710 <HAL_GetTick>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b64      	cmp	r3, #100	; 0x64
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e170      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7c8:	4b34      	ldr	r3, [pc, #208]	; (800b89c <HAL_RCC_OscConfig+0x534>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0f0      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d106      	bne.n	800b7ea <HAL_RCC_OscConfig+0x482>
 800b7dc:	4b2e      	ldr	r3, [pc, #184]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e0:	4a2d      	ldr	r2, [pc, #180]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b7e8:	e02d      	b.n	800b846 <HAL_RCC_OscConfig+0x4de>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10c      	bne.n	800b80c <HAL_RCC_OscConfig+0x4a4>
 800b7f2:	4b29      	ldr	r3, [pc, #164]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f6:	4a28      	ldr	r2, [pc, #160]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b7f8:	f023 0301 	bic.w	r3, r3, #1
 800b7fc:	6713      	str	r3, [r2, #112]	; 0x70
 800b7fe:	4b26      	ldr	r3, [pc, #152]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b802:	4a25      	ldr	r2, [pc, #148]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b804:	f023 0304 	bic.w	r3, r3, #4
 800b808:	6713      	str	r3, [r2, #112]	; 0x70
 800b80a:	e01c      	b.n	800b846 <HAL_RCC_OscConfig+0x4de>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b05      	cmp	r3, #5
 800b812:	d10c      	bne.n	800b82e <HAL_RCC_OscConfig+0x4c6>
 800b814:	4b20      	ldr	r3, [pc, #128]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b818:	4a1f      	ldr	r2, [pc, #124]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b81a:	f043 0304 	orr.w	r3, r3, #4
 800b81e:	6713      	str	r3, [r2, #112]	; 0x70
 800b820:	4b1d      	ldr	r3, [pc, #116]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b824:	4a1c      	ldr	r2, [pc, #112]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	6713      	str	r3, [r2, #112]	; 0x70
 800b82c:	e00b      	b.n	800b846 <HAL_RCC_OscConfig+0x4de>
 800b82e:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	4a19      	ldr	r2, [pc, #100]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b834:	f023 0301 	bic.w	r3, r3, #1
 800b838:	6713      	str	r3, [r2, #112]	; 0x70
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83e:	4a16      	ldr	r2, [pc, #88]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b840:	f023 0304 	bic.w	r3, r3, #4
 800b844:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d015      	beq.n	800b87a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b84e:	f7fb ff5f 	bl	8007710 <HAL_GetTick>
 800b852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b854:	e00a      	b.n	800b86c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b856:	f7fb ff5b 	bl	8007710 <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	f241 3288 	movw	r2, #5000	; 0x1388
 800b864:	4293      	cmp	r3, r2
 800b866:	d901      	bls.n	800b86c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e11e      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b86c:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <HAL_RCC_OscConfig+0x530>)
 800b86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0ee      	beq.n	800b856 <HAL_RCC_OscConfig+0x4ee>
 800b878:	e018      	b.n	800b8ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87a:	f7fb ff49 	bl	8007710 <HAL_GetTick>
 800b87e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b880:	e00e      	b.n	800b8a0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b882:	f7fb ff45 	bl	8007710 <HAL_GetTick>
 800b886:	4602      	mov	r2, r0
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b890:	4293      	cmp	r3, r2
 800b892:	d905      	bls.n	800b8a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e108      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
 800b898:	58024400 	.word	0x58024400
 800b89c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8a0:	4b84      	ldr	r3, [pc, #528]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a4:	f003 0302 	and.w	r3, r3, #2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1ea      	bne.n	800b882 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80f9 	beq.w	800baa8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b8b6:	4b7f      	ldr	r3, [pc, #508]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8be:	2b18      	cmp	r3, #24
 800b8c0:	f000 80b4 	beq.w	800ba2c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	f040 8095 	bne.w	800b9f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8ce:	4b79      	ldr	r3, [pc, #484]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a78      	ldr	r2, [pc, #480]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b8d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8da:	f7fb ff19 	bl	8007710 <HAL_GetTick>
 800b8de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8e0:	e008      	b.n	800b8f4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8e2:	f7fb ff15 	bl	8007710 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d901      	bls.n	800b8f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e0da      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8f4:	4b6f      	ldr	r3, [pc, #444]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f0      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b900:	4b6c      	ldr	r3, [pc, #432]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b904:	4b6c      	ldr	r3, [pc, #432]	; (800bab8 <HAL_RCC_OscConfig+0x750>)
 800b906:	4013      	ands	r3, r2
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b910:	0112      	lsls	r2, r2, #4
 800b912:	430a      	orrs	r2, r1
 800b914:	4967      	ldr	r1, [pc, #412]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b916:	4313      	orrs	r3, r2
 800b918:	628b      	str	r3, [r1, #40]	; 0x28
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91e:	3b01      	subs	r3, #1
 800b920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b928:	3b01      	subs	r3, #1
 800b92a:	025b      	lsls	r3, r3, #9
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	431a      	orrs	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b934:	3b01      	subs	r3, #1
 800b936:	041b      	lsls	r3, r3, #16
 800b938:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b93c:	431a      	orrs	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b942:	3b01      	subs	r3, #1
 800b944:	061b      	lsls	r3, r3, #24
 800b946:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b94a:	495a      	ldr	r1, [pc, #360]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b950:	4b58      	ldr	r3, [pc, #352]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	4a57      	ldr	r2, [pc, #348]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b956:	f023 0301 	bic.w	r3, r3, #1
 800b95a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b95c:	4b55      	ldr	r3, [pc, #340]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b95e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b960:	4b56      	ldr	r3, [pc, #344]	; (800babc <HAL_RCC_OscConfig+0x754>)
 800b962:	4013      	ands	r3, r2
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b968:	00d2      	lsls	r2, r2, #3
 800b96a:	4952      	ldr	r1, [pc, #328]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b970:	4b50      	ldr	r3, [pc, #320]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b974:	f023 020c 	bic.w	r2, r3, #12
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	494d      	ldr	r1, [pc, #308]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b982:	4b4c      	ldr	r3, [pc, #304]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	f023 0202 	bic.w	r2, r3, #2
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98e:	4949      	ldr	r1, [pc, #292]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b990:	4313      	orrs	r3, r2
 800b992:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b994:	4b47      	ldr	r3, [pc, #284]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4a46      	ldr	r2, [pc, #280]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b99a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b99e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a0:	4b44      	ldr	r3, [pc, #272]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	4a43      	ldr	r2, [pc, #268]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9ac:	4b41      	ldr	r3, [pc, #260]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	4a40      	ldr	r2, [pc, #256]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b9b8:	4b3e      	ldr	r3, [pc, #248]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4a3d      	ldr	r2, [pc, #244]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9be:	f043 0301 	orr.w	r3, r3, #1
 800b9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9c4:	4b3b      	ldr	r3, [pc, #236]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a3a      	ldr	r2, [pc, #232]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d0:	f7fb fe9e 	bl	8007710 <HAL_GetTick>
 800b9d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9d6:	e008      	b.n	800b9ea <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9d8:	f7fb fe9a 	bl	8007710 <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d901      	bls.n	800b9ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e05f      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9ea:	4b32      	ldr	r3, [pc, #200]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0f0      	beq.n	800b9d8 <HAL_RCC_OscConfig+0x670>
 800b9f6:	e057      	b.n	800baa8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9f8:	4b2e      	ldr	r3, [pc, #184]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a2d      	ldr	r2, [pc, #180]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800b9fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba04:	f7fb fe84 	bl	8007710 <HAL_GetTick>
 800ba08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba0a:	e008      	b.n	800ba1e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba0c:	f7fb fe80 	bl	8007710 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e045      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba1e:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f0      	bne.n	800ba0c <HAL_RCC_OscConfig+0x6a4>
 800ba2a:	e03d      	b.n	800baa8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba2c:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba32:	4b20      	ldr	r3, [pc, #128]	; (800bab4 <HAL_RCC_OscConfig+0x74c>)
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d031      	beq.n	800baa4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f003 0203 	and.w	r2, r3, #3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d12a      	bne.n	800baa4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	091b      	lsrs	r3, r3, #4
 800ba52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d122      	bne.n	800baa4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d11a      	bne.n	800baa4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	0a5b      	lsrs	r3, r3, #9
 800ba72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d111      	bne.n	800baa4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0c1b      	lsrs	r3, r3, #16
 800ba84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d108      	bne.n	800baa4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	0e1b      	lsrs	r3, r3, #24
 800ba96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d001      	beq.n	800baa8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3730      	adds	r7, #48	; 0x30
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	58024400 	.word	0x58024400
 800bab8:	fffffc0c 	.word	0xfffffc0c
 800babc:	ffff0007 	.word	0xffff0007

0800bac0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e19c      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bad4:	4b8a      	ldr	r3, [pc, #552]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d910      	bls.n	800bb04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bae2:	4b87      	ldr	r3, [pc, #540]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f023 020f 	bic.w	r2, r3, #15
 800baea:	4985      	ldr	r1, [pc, #532]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	4313      	orrs	r3, r2
 800baf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800baf2:	4b83      	ldr	r3, [pc, #524]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 030f 	and.w	r3, r3, #15
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d001      	beq.n	800bb04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e184      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d010      	beq.n	800bb32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691a      	ldr	r2, [r3, #16]
 800bb14:	4b7b      	ldr	r3, [pc, #492]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d908      	bls.n	800bb32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb20:	4b78      	ldr	r3, [pc, #480]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	4975      	ldr	r1, [pc, #468]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0308 	and.w	r3, r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d010      	beq.n	800bb60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	695a      	ldr	r2, [r3, #20]
 800bb42:	4b70      	ldr	r3, [pc, #448]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d908      	bls.n	800bb60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb4e:	4b6d      	ldr	r3, [pc, #436]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	496a      	ldr	r1, [pc, #424]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d010      	beq.n	800bb8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	699a      	ldr	r2, [r3, #24]
 800bb70:	4b64      	ldr	r3, [pc, #400]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d908      	bls.n	800bb8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb7c:	4b61      	ldr	r3, [pc, #388]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	495e      	ldr	r1, [pc, #376]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 0320 	and.w	r3, r3, #32
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d010      	beq.n	800bbbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69da      	ldr	r2, [r3, #28]
 800bb9e:	4b59      	ldr	r3, [pc, #356]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d908      	bls.n	800bbbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bbaa:	4b56      	ldr	r3, [pc, #344]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	4953      	ldr	r1, [pc, #332]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0302 	and.w	r3, r3, #2
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d010      	beq.n	800bbea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	4b4d      	ldr	r3, [pc, #308]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d908      	bls.n	800bbea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbd8:	4b4a      	ldr	r3, [pc, #296]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	f023 020f 	bic.w	r2, r3, #15
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	4947      	ldr	r1, [pc, #284]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d055      	beq.n	800bca2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bbf6:	4b43      	ldr	r3, [pc, #268]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4940      	ldr	r1, [pc, #256]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d107      	bne.n	800bc20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc10:	4b3c      	ldr	r3, [pc, #240]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d121      	bne.n	800bc60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e0f6      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d107      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc28:	4b36      	ldr	r3, [pc, #216]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d115      	bne.n	800bc60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e0ea      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc40:	4b30      	ldr	r3, [pc, #192]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d109      	bne.n	800bc60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e0de      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc50:	4b2c      	ldr	r3, [pc, #176]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0d6      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc60:	4b28      	ldr	r3, [pc, #160]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f023 0207 	bic.w	r2, r3, #7
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	4925      	ldr	r1, [pc, #148]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc72:	f7fb fd4d 	bl	8007710 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc78:	e00a      	b.n	800bc90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc7a:	f7fb fd49 	bl	8007710 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d901      	bls.n	800bc90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e0be      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc90:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d1eb      	bne.n	800bc7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d010      	beq.n	800bcd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68da      	ldr	r2, [r3, #12]
 800bcb2:	4b14      	ldr	r3, [pc, #80]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	f003 030f 	and.w	r3, r3, #15
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d208      	bcs.n	800bcd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcbe:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	f023 020f 	bic.w	r2, r3, #15
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	490e      	ldr	r1, [pc, #56]	; (800bd04 <HAL_RCC_ClockConfig+0x244>)
 800bccc:	4313      	orrs	r3, r2
 800bcce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 030f 	and.w	r3, r3, #15
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d214      	bcs.n	800bd08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcde:	4b08      	ldr	r3, [pc, #32]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f023 020f 	bic.w	r2, r3, #15
 800bce6:	4906      	ldr	r1, [pc, #24]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <HAL_RCC_ClockConfig+0x240>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d005      	beq.n	800bd08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e086      	b.n	800be0e <HAL_RCC_ClockConfig+0x34e>
 800bd00:	52002000 	.word	0x52002000
 800bd04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d010      	beq.n	800bd36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691a      	ldr	r2, [r3, #16]
 800bd18:	4b3f      	ldr	r3, [pc, #252]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d208      	bcs.n	800bd36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd24:	4b3c      	ldr	r3, [pc, #240]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	4939      	ldr	r1, [pc, #228]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd32:	4313      	orrs	r3, r2
 800bd34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 0308 	and.w	r3, r3, #8
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d010      	beq.n	800bd64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	695a      	ldr	r2, [r3, #20]
 800bd46:	4b34      	ldr	r3, [pc, #208]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d208      	bcs.n	800bd64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd52:	4b31      	ldr	r3, [pc, #196]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	492e      	ldr	r1, [pc, #184]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d010      	beq.n	800bd92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699a      	ldr	r2, [r3, #24]
 800bd74:	4b28      	ldr	r3, [pc, #160]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d208      	bcs.n	800bd92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd80:	4b25      	ldr	r3, [pc, #148]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	4922      	ldr	r1, [pc, #136]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	69da      	ldr	r2, [r3, #28]
 800bda2:	4b1d      	ldr	r3, [pc, #116]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d208      	bcs.n	800bdc0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bdae:	4b1a      	ldr	r3, [pc, #104]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	4917      	ldr	r1, [pc, #92]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bdc0:	f000 f844 	bl	800be4c <HAL_RCC_GetSysClockFreq>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	4b14      	ldr	r3, [pc, #80]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	4912      	ldr	r1, [pc, #72]	; (800be1c <HAL_RCC_ClockConfig+0x35c>)
 800bdd2:	5ccb      	ldrb	r3, [r1, r3]
 800bdd4:	f003 031f 	and.w	r3, r3, #31
 800bdd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bddc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdde:	4b0e      	ldr	r3, [pc, #56]	; (800be18 <HAL_RCC_ClockConfig+0x358>)
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	f003 030f 	and.w	r3, r3, #15
 800bde6:	4a0d      	ldr	r2, [pc, #52]	; (800be1c <HAL_RCC_ClockConfig+0x35c>)
 800bde8:	5cd3      	ldrb	r3, [r2, r3]
 800bdea:	f003 031f 	and.w	r3, r3, #31
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf4:	4a0a      	ldr	r2, [pc, #40]	; (800be20 <HAL_RCC_ClockConfig+0x360>)
 800bdf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bdf8:	4a0a      	ldr	r2, [pc, #40]	; (800be24 <HAL_RCC_ClockConfig+0x364>)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <HAL_RCC_ClockConfig+0x368>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4618      	mov	r0, r3
 800be04:	f7fb fc3a 	bl	800767c <HAL_InitTick>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	58024400 	.word	0x58024400
 800be1c:	08014450 	.word	0x08014450
 800be20:	24000004 	.word	0x24000004
 800be24:	24000000 	.word	0x24000000
 800be28:	24000008 	.word	0x24000008

0800be2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800be2c:	b480      	push	{r7}
 800be2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <HAL_RCC_EnableCSS+0x1c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a04      	ldr	r2, [pc, #16]	; (800be48 <HAL_RCC_EnableCSS+0x1c>)
 800be36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be3a:	6013      	str	r3, [r2, #0]
}
 800be3c:	bf00      	nop
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	58024400 	.word	0x58024400

0800be4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b089      	sub	sp, #36	; 0x24
 800be50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be52:	4bb3      	ldr	r3, [pc, #716]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be5a:	2b18      	cmp	r3, #24
 800be5c:	f200 8155 	bhi.w	800c10a <HAL_RCC_GetSysClockFreq+0x2be>
 800be60:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be66:	bf00      	nop
 800be68:	0800becd 	.word	0x0800becd
 800be6c:	0800c10b 	.word	0x0800c10b
 800be70:	0800c10b 	.word	0x0800c10b
 800be74:	0800c10b 	.word	0x0800c10b
 800be78:	0800c10b 	.word	0x0800c10b
 800be7c:	0800c10b 	.word	0x0800c10b
 800be80:	0800c10b 	.word	0x0800c10b
 800be84:	0800c10b 	.word	0x0800c10b
 800be88:	0800bef3 	.word	0x0800bef3
 800be8c:	0800c10b 	.word	0x0800c10b
 800be90:	0800c10b 	.word	0x0800c10b
 800be94:	0800c10b 	.word	0x0800c10b
 800be98:	0800c10b 	.word	0x0800c10b
 800be9c:	0800c10b 	.word	0x0800c10b
 800bea0:	0800c10b 	.word	0x0800c10b
 800bea4:	0800c10b 	.word	0x0800c10b
 800bea8:	0800bef9 	.word	0x0800bef9
 800beac:	0800c10b 	.word	0x0800c10b
 800beb0:	0800c10b 	.word	0x0800c10b
 800beb4:	0800c10b 	.word	0x0800c10b
 800beb8:	0800c10b 	.word	0x0800c10b
 800bebc:	0800c10b 	.word	0x0800c10b
 800bec0:	0800c10b 	.word	0x0800c10b
 800bec4:	0800c10b 	.word	0x0800c10b
 800bec8:	0800beff 	.word	0x0800beff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800becc:	4b94      	ldr	r3, [pc, #592]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0320 	and.w	r3, r3, #32
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d009      	beq.n	800beec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bed8:	4b91      	ldr	r3, [pc, #580]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	08db      	lsrs	r3, r3, #3
 800bede:	f003 0303 	and.w	r3, r3, #3
 800bee2:	4a90      	ldr	r2, [pc, #576]	; (800c124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bee4:	fa22 f303 	lsr.w	r3, r2, r3
 800bee8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800beea:	e111      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800beec:	4b8d      	ldr	r3, [pc, #564]	; (800c124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800beee:	61bb      	str	r3, [r7, #24]
    break;
 800bef0:	e10e      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bef2:	4b8d      	ldr	r3, [pc, #564]	; (800c128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bef4:	61bb      	str	r3, [r7, #24]
    break;
 800bef6:	e10b      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bef8:	4b8c      	ldr	r3, [pc, #560]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800befa:	61bb      	str	r3, [r7, #24]
    break;
 800befc:	e108      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800befe:	4b88      	ldr	r3, [pc, #544]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bf08:	4b85      	ldr	r3, [pc, #532]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0c:	091b      	lsrs	r3, r3, #4
 800bf0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf14:	4b82      	ldr	r3, [pc, #520]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf1e:	4b80      	ldr	r3, [pc, #512]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf22:	08db      	lsrs	r3, r3, #3
 800bf24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	fb02 f303 	mul.w	r3, r2, r3
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 80e1 	beq.w	800c104 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	f000 8083 	beq.w	800c050 <HAL_RCC_GetSysClockFreq+0x204>
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	f200 80a1 	bhi.w	800c094 <HAL_RCC_GetSysClockFreq+0x248>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <HAL_RCC_GetSysClockFreq+0x114>
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d056      	beq.n	800c00c <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf5e:	e099      	b.n	800c094 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf60:	4b6f      	ldr	r3, [pc, #444]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0320 	and.w	r3, r3, #32
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d02d      	beq.n	800bfc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf6c:	4b6c      	ldr	r3, [pc, #432]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	08db      	lsrs	r3, r3, #3
 800bf72:	f003 0303 	and.w	r3, r3, #3
 800bf76:	4a6b      	ldr	r2, [pc, #428]	; (800c124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf78:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	ee07 3a90 	vmov	s15, r3
 800bf84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf96:	4b62      	ldr	r3, [pc, #392]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf9e:	ee07 3a90 	vmov	s15, r3
 800bfa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfaa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bfc6:	e087      	b.n	800c0d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c134 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bfd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfda:	4b51      	ldr	r3, [pc, #324]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe2:	ee07 3a90 	vmov	s15, r3
 800bfe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfea:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfee:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c00a:	e065      	b.n	800c0d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c016:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c01e:	4b40      	ldr	r3, [pc, #256]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c02e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c032:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c04a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c04e:	e043      	b.n	800c0d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c062:	4b2f      	ldr	r3, [pc, #188]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c072:	ed97 6a02 	vldr	s12, [r7, #8]
 800c076:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c08e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c092:	e021      	b.n	800c0d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0a6:	4b1e      	ldr	r3, [pc, #120]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c0d8:	4b11      	ldr	r3, [pc, #68]	; (800c120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0dc:	0a5b      	lsrs	r3, r3, #9
 800c0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0fc:	ee17 3a90 	vmov	r3, s15
 800c100:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c102:	e005      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	61bb      	str	r3, [r7, #24]
    break;
 800c108:	e002      	b.n	800c110 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c10c:	61bb      	str	r3, [r7, #24]
    break;
 800c10e:	bf00      	nop
  }

  return sysclockfreq;
 800c110:	69bb      	ldr	r3, [r7, #24]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3724      	adds	r7, #36	; 0x24
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	58024400 	.word	0x58024400
 800c124:	03d09000 	.word	0x03d09000
 800c128:	003d0900 	.word	0x003d0900
 800c12c:	017d7840 	.word	0x017d7840
 800c130:	46000000 	.word	0x46000000
 800c134:	4c742400 	.word	0x4c742400
 800c138:	4a742400 	.word	0x4a742400
 800c13c:	4bbebc20 	.word	0x4bbebc20

0800c140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c146:	f7ff fe81 	bl	800be4c <HAL_RCC_GetSysClockFreq>
 800c14a:	4602      	mov	r2, r0
 800c14c:	4b10      	ldr	r3, [pc, #64]	; (800c190 <HAL_RCC_GetHCLKFreq+0x50>)
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	0a1b      	lsrs	r3, r3, #8
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	490f      	ldr	r1, [pc, #60]	; (800c194 <HAL_RCC_GetHCLKFreq+0x54>)
 800c158:	5ccb      	ldrb	r3, [r1, r3]
 800c15a:	f003 031f 	and.w	r3, r3, #31
 800c15e:	fa22 f303 	lsr.w	r3, r2, r3
 800c162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c164:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <HAL_RCC_GetHCLKFreq+0x50>)
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	f003 030f 	and.w	r3, r3, #15
 800c16c:	4a09      	ldr	r2, [pc, #36]	; (800c194 <HAL_RCC_GetHCLKFreq+0x54>)
 800c16e:	5cd3      	ldrb	r3, [r2, r3]
 800c170:	f003 031f 	and.w	r3, r3, #31
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	fa22 f303 	lsr.w	r3, r2, r3
 800c17a:	4a07      	ldr	r2, [pc, #28]	; (800c198 <HAL_RCC_GetHCLKFreq+0x58>)
 800c17c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c17e:	4a07      	ldr	r2, [pc, #28]	; (800c19c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c184:	4b04      	ldr	r3, [pc, #16]	; (800c198 <HAL_RCC_GetHCLKFreq+0x58>)
 800c186:	681b      	ldr	r3, [r3, #0]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	58024400 	.word	0x58024400
 800c194:	08014450 	.word	0x08014450
 800c198:	24000004 	.word	0x24000004
 800c19c:	24000000 	.word	0x24000000

0800c1a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c1a4:	f7ff ffcc 	bl	800c140 <HAL_RCC_GetHCLKFreq>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	091b      	lsrs	r3, r3, #4
 800c1b0:	f003 0307 	and.w	r3, r3, #7
 800c1b4:	4904      	ldr	r1, [pc, #16]	; (800c1c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1b6:	5ccb      	ldrb	r3, [r1, r3]
 800c1b8:	f003 031f 	and.w	r3, r3, #31
 800c1bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	58024400 	.word	0x58024400
 800c1c8:	08014450 	.word	0x08014450

0800c1cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c1d0:	f7ff ffb6 	bl	800c140 <HAL_RCC_GetHCLKFreq>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	4b06      	ldr	r3, [pc, #24]	; (800c1f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1d8:	69db      	ldr	r3, [r3, #28]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	4904      	ldr	r1, [pc, #16]	; (800c1f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c1e2:	5ccb      	ldrb	r3, [r1, r3]
 800c1e4:	f003 031f 	and.w	r3, r3, #31
 800c1e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	58024400 	.word	0x58024400
 800c1f4:	08014450 	.word	0x08014450

0800c1f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <HAL_RCC_NMI_IRQHandler+0x24>)
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c208:	d105      	bne.n	800c216 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800c20a:	f000 f809 	bl	800c220 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c20e:	4b03      	ldr	r3, [pc, #12]	; (800c21c <HAL_RCC_NMI_IRQHandler+0x24>)
 800c210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c214:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800c216:	bf00      	nop
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	58024400 	.word	0x58024400

0800c220 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800c224:	bf00      	nop
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
	...

0800c230 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c238:	2300      	movs	r3, #0
 800c23a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c23c:	2300      	movs	r3, #0
 800c23e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d03f      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c254:	d02a      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c25a:	d824      	bhi.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c25c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c260:	d018      	beq.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c266:	d81e      	bhi.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c270:	d007      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c272:	e018      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c274:	4bab      	ldr	r3, [pc, #684]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	4aaa      	ldr	r2, [pc, #680]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c27e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c280:	e015      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3304      	adds	r3, #4
 800c286:	2102      	movs	r1, #2
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 feff 	bl	800e08c <RCCEx_PLL2_Config>
 800c28e:	4603      	mov	r3, r0
 800c290:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c292:	e00c      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3324      	adds	r3, #36	; 0x24
 800c298:	2102      	movs	r1, #2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 ffa8 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c2a4:	e003      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2aa:	e000      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c2ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d109      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c2b4:	4b9b      	ldr	r3, [pc, #620]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2c0:	4998      	ldr	r1, [pc, #608]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	650b      	str	r3, [r1, #80]	; 0x50
 800c2c6:	e001      	b.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d03d      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d826      	bhi.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c2e0:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e6:	bf00      	nop
 800c2e8:	0800c2fd 	.word	0x0800c2fd
 800c2ec:	0800c30b 	.word	0x0800c30b
 800c2f0:	0800c31d 	.word	0x0800c31d
 800c2f4:	0800c335 	.word	0x0800c335
 800c2f8:	0800c335 	.word	0x0800c335
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2fc:	4b89      	ldr	r3, [pc, #548]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	4a88      	ldr	r2, [pc, #544]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c308:	e015      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3304      	adds	r3, #4
 800c30e:	2100      	movs	r1, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f001 febb 	bl	800e08c <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c31a:	e00c      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	3324      	adds	r3, #36	; 0x24
 800c320:	2100      	movs	r1, #0
 800c322:	4618      	mov	r0, r3
 800c324:	f001 ff64 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c32c:	e003      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	75fb      	strb	r3, [r7, #23]
      break;
 800c332:	e000      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c334:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d109      	bne.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c33c:	4b79      	ldr	r3, [pc, #484]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c340:	f023 0207 	bic.w	r2, r3, #7
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c348:	4976      	ldr	r1, [pc, #472]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	650b      	str	r3, [r1, #80]	; 0x50
 800c34e:	e001      	b.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d051      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c366:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c36a:	d036      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c36c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c370:	d830      	bhi.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c376:	d032      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800c378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c37c:	d82a      	bhi.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c37e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c382:	d02e      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c388:	d824      	bhi.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c38a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c38e:	d018      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c394:	d81e      	bhi.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c39a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c39e:	d007      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c3a0:	e018      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a2:	4b60      	ldr	r3, [pc, #384]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	4a5f      	ldr	r2, [pc, #380]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3ae:	e019      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 fe68 	bl	800e08c <RCCEx_PLL2_Config>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c3c0:	e010      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3324      	adds	r3, #36	; 0x24
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f001 ff11 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3d2:	e007      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c3d8:	e004      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3da:	bf00      	nop
 800c3dc:	e002      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3de:	bf00      	nop
 800c3e0:	e000      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10a      	bne.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c3ea:	4b4e      	ldr	r3, [pc, #312]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3f8:	494a      	ldr	r1, [pc, #296]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	658b      	str	r3, [r1, #88]	; 0x58
 800c3fe:	e001      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d051      	beq.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c416:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c41a:	d036      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800c41c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c420:	d830      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c426:	d032      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800c428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c42c:	d82a      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c42e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c432:	d02e      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800c434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c438:	d824      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c43a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43e:	d018      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800c440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c444:	d81e      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800c44a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c44e:	d007      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c450:	e018      	b.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c452:	4b34      	ldr	r3, [pc, #208]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c456:	4a33      	ldr	r2, [pc, #204]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c45c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c45e:	e019      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	2100      	movs	r1, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f001 fe10 	bl	800e08c <RCCEx_PLL2_Config>
 800c46c:	4603      	mov	r3, r0
 800c46e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c470:	e010      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3324      	adds	r3, #36	; 0x24
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 feb9 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c47e:	4603      	mov	r3, r0
 800c480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c482:	e007      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	75fb      	strb	r3, [r7, #23]
      break;
 800c488:	e004      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c48a:	bf00      	nop
 800c48c:	e002      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c492:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c49a:	4b22      	ldr	r3, [pc, #136]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4a8:	491e      	ldr	r1, [pc, #120]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	658b      	str	r3, [r1, #88]	; 0x58
 800c4ae:	e001      	b.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d035      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c4:	2b30      	cmp	r3, #48	; 0x30
 800c4c6:	d01c      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4c8:	2b30      	cmp	r3, #48	; 0x30
 800c4ca:	d817      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d00c      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	d813      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d016      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800c4d8:	2b10      	cmp	r3, #16
 800c4da:	d10f      	bne.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4dc:	4b11      	ldr	r3, [pc, #68]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	4a10      	ldr	r2, [pc, #64]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c4e8:	e00e      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	2102      	movs	r1, #2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f001 fdcb 	bl	800e08c <RCCEx_PLL2_Config>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c4fa:	e005      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c500:	e002      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c506:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10c      	bne.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c51a:	4902      	ldr	r1, [pc, #8]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c51c:	4313      	orrs	r3, r2
 800c51e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c520:	e004      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c522:	bf00      	nop
 800c524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c534:	2b00      	cmp	r3, #0
 800c536:	d047      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c540:	d030      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800c542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c546:	d82a      	bhi.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c54c:	d02c      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800c54e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c552:	d824      	bhi.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c558:	d018      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c55e:	d81e      	bhi.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c568:	d007      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c56a:	e018      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c56c:	4bac      	ldr	r3, [pc, #688]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	4aab      	ldr	r2, [pc, #684]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c578:	e017      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3304      	adds	r3, #4
 800c57e:	2100      	movs	r1, #0
 800c580:	4618      	mov	r0, r3
 800c582:	f001 fd83 	bl	800e08c <RCCEx_PLL2_Config>
 800c586:	4603      	mov	r3, r0
 800c588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c58a:	e00e      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3324      	adds	r3, #36	; 0x24
 800c590:	2100      	movs	r1, #0
 800c592:	4618      	mov	r0, r3
 800c594:	f001 fe2c 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c59c:	e005      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c5a2:	e002      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c5a4:	bf00      	nop
 800c5a6:	e000      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c5a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5b0:	4b9b      	ldr	r3, [pc, #620]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5bc:	4998      	ldr	r1, [pc, #608]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	650b      	str	r3, [r1, #80]	; 0x50
 800c5c2:	e001      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d049      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5dc:	d02e      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800c5de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5e2:	d828      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c5e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5e8:	d02a      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c5ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5ee:	d822      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c5f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5f4:	d026      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c5f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5fa:	d81c      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c600:	d010      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c606:	d816      	bhi.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01d      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c610:	d111      	bne.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3304      	adds	r3, #4
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 fd37 	bl	800e08c <RCCEx_PLL2_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c622:	e012      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3324      	adds	r3, #36	; 0x24
 800c628:	2101      	movs	r1, #1
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 fde0 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c630:	4603      	mov	r3, r0
 800c632:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c634:	e009      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	75fb      	strb	r3, [r7, #23]
      break;
 800c63a:	e006      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c63c:	bf00      	nop
 800c63e:	e004      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c640:	bf00      	nop
 800c642:	e002      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c644:	bf00      	nop
 800c646:	e000      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d109      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c650:	4b73      	ldr	r3, [pc, #460]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c654:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c65c:	4970      	ldr	r1, [pc, #448]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	650b      	str	r3, [r1, #80]	; 0x50
 800c662:	e001      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d04b      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c67e:	d02e      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c684:	d828      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68a:	d02a      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c690:	d822      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c696:	d026      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800c698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c69c:	d81c      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c69e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a2:	d010      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a8:	d816      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d01d      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800c6ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6b2:	d111      	bne.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 fce6 	bl	800e08c <RCCEx_PLL2_Config>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6c4:	e012      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3324      	adds	r3, #36	; 0x24
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f001 fd8f 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6d6:	e009      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	75fb      	strb	r3, [r7, #23]
      break;
 800c6dc:	e006      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6de:	bf00      	nop
 800c6e0:	e004      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6e2:	bf00      	nop
 800c6e4:	e002      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6e6:	bf00      	nop
 800c6e8:	e000      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6f2:	4b4b      	ldr	r3, [pc, #300]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c700:	4947      	ldr	r1, [pc, #284]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c702:	4313      	orrs	r3, r2
 800c704:	658b      	str	r3, [r1, #88]	; 0x58
 800c706:	e001      	b.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d02f      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c720:	d00e      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800c722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c726:	d814      	bhi.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d015      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c72c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c730:	d10f      	bne.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c732:	4b3b      	ldr	r3, [pc, #236]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c736:	4a3a      	ldr	r2, [pc, #232]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c73c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c73e:	e00c      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3304      	adds	r3, #4
 800c744:	2101      	movs	r1, #1
 800c746:	4618      	mov	r0, r3
 800c748:	f001 fca0 	bl	800e08c <RCCEx_PLL2_Config>
 800c74c:	4603      	mov	r3, r0
 800c74e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c750:	e003      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	75fb      	strb	r3, [r7, #23]
      break;
 800c756:	e000      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800c758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d109      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c760:	4b2f      	ldr	r3, [pc, #188]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c764:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c76c:	492c      	ldr	r1, [pc, #176]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	650b      	str	r3, [r1, #80]	; 0x50
 800c772:	e001      	b.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d032      	beq.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d81b      	bhi.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c78c:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800c78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c792:	bf00      	nop
 800c794:	0800c7cb 	.word	0x0800c7cb
 800c798:	0800c7a5 	.word	0x0800c7a5
 800c79c:	0800c7b3 	.word	0x0800c7b3
 800c7a0:	0800c7cb 	.word	0x0800c7cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7a4:	4b1e      	ldr	r3, [pc, #120]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	4a1d      	ldr	r2, [pc, #116]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7b0:	e00c      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	2102      	movs	r1, #2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 fc67 	bl	800e08c <RCCEx_PLL2_Config>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7c2:	e003      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7c8:	e000      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c7ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7cc:	7dfb      	ldrb	r3, [r7, #23]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c7d2:	4b13      	ldr	r3, [pc, #76]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d6:	f023 0203 	bic.w	r2, r3, #3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7de:	4910      	ldr	r1, [pc, #64]	; (800c820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c7e4:	e001      	b.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 808a 	beq.w	800c90c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7f8:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a09      	ldr	r2, [pc, #36]	; (800c824 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c7fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c804:	f7fa ff84 	bl	8007710 <HAL_GetTick>
 800c808:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c80a:	e00d      	b.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c80c:	f7fa ff80 	bl	8007710 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b64      	cmp	r3, #100	; 0x64
 800c818:	d906      	bls.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	75fb      	strb	r3, [r7, #23]
        break;
 800c81e:	e009      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c820:	58024400 	.word	0x58024400
 800c824:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c828:	4bb9      	ldr	r3, [pc, #740]	; (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c830:	2b00      	cmp	r3, #0
 800c832:	d0eb      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d166      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c83a:	4bb6      	ldr	r3, [pc, #728]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c83c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c844:	4053      	eors	r3, r2
 800c846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d013      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c84e:	4bb1      	ldr	r3, [pc, #708]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c856:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c858:	4bae      	ldr	r3, [pc, #696]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85c:	4aad      	ldr	r2, [pc, #692]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c85e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c862:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c864:	4bab      	ldr	r3, [pc, #684]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c868:	4aaa      	ldr	r2, [pc, #680]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c86a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c86e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c870:	4aa8      	ldr	r2, [pc, #672]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c880:	d115      	bne.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c882:	f7fa ff45 	bl	8007710 <HAL_GetTick>
 800c886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c888:	e00b      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c88a:	f7fa ff41 	bl	8007710 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f241 3288 	movw	r2, #5000	; 0x1388
 800c898:	4293      	cmp	r3, r2
 800c89a:	d902      	bls.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	75fb      	strb	r3, [r7, #23]
            break;
 800c8a0:	e005      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8a2:	4b9c      	ldr	r3, [pc, #624]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a6:	f003 0302 	and.w	r3, r3, #2
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0ed      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d126      	bne.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8c2:	d10d      	bne.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800c8c4:	4b93      	ldr	r3, [pc, #588]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8d2:	0919      	lsrs	r1, r3, #4
 800c8d4:	4b90      	ldr	r3, [pc, #576]	; (800cb18 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800c8d6:	400b      	ands	r3, r1
 800c8d8:	498e      	ldr	r1, [pc, #568]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	610b      	str	r3, [r1, #16]
 800c8de:	e005      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800c8e0:	4b8c      	ldr	r3, [pc, #560]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	4a8b      	ldr	r2, [pc, #556]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8ea:	6113      	str	r3, [r2, #16]
 800c8ec:	4b89      	ldr	r3, [pc, #548]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8fa:	4986      	ldr	r1, [pc, #536]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	670b      	str	r3, [r1, #112]	; 0x70
 800c900:	e004      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	75bb      	strb	r3, [r7, #22]
 800c906:	e001      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d07e      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c91c:	2b28      	cmp	r3, #40	; 0x28
 800c91e:	d867      	bhi.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800c920:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c9f7 	.word	0x0800c9f7
 800c92c:	0800c9f1 	.word	0x0800c9f1
 800c930:	0800c9f1 	.word	0x0800c9f1
 800c934:	0800c9f1 	.word	0x0800c9f1
 800c938:	0800c9f1 	.word	0x0800c9f1
 800c93c:	0800c9f1 	.word	0x0800c9f1
 800c940:	0800c9f1 	.word	0x0800c9f1
 800c944:	0800c9f1 	.word	0x0800c9f1
 800c948:	0800c9cd 	.word	0x0800c9cd
 800c94c:	0800c9f1 	.word	0x0800c9f1
 800c950:	0800c9f1 	.word	0x0800c9f1
 800c954:	0800c9f1 	.word	0x0800c9f1
 800c958:	0800c9f1 	.word	0x0800c9f1
 800c95c:	0800c9f1 	.word	0x0800c9f1
 800c960:	0800c9f1 	.word	0x0800c9f1
 800c964:	0800c9f1 	.word	0x0800c9f1
 800c968:	0800c9df 	.word	0x0800c9df
 800c96c:	0800c9f1 	.word	0x0800c9f1
 800c970:	0800c9f1 	.word	0x0800c9f1
 800c974:	0800c9f1 	.word	0x0800c9f1
 800c978:	0800c9f1 	.word	0x0800c9f1
 800c97c:	0800c9f1 	.word	0x0800c9f1
 800c980:	0800c9f1 	.word	0x0800c9f1
 800c984:	0800c9f1 	.word	0x0800c9f1
 800c988:	0800c9f7 	.word	0x0800c9f7
 800c98c:	0800c9f1 	.word	0x0800c9f1
 800c990:	0800c9f1 	.word	0x0800c9f1
 800c994:	0800c9f1 	.word	0x0800c9f1
 800c998:	0800c9f1 	.word	0x0800c9f1
 800c99c:	0800c9f1 	.word	0x0800c9f1
 800c9a0:	0800c9f1 	.word	0x0800c9f1
 800c9a4:	0800c9f1 	.word	0x0800c9f1
 800c9a8:	0800c9f7 	.word	0x0800c9f7
 800c9ac:	0800c9f1 	.word	0x0800c9f1
 800c9b0:	0800c9f1 	.word	0x0800c9f1
 800c9b4:	0800c9f1 	.word	0x0800c9f1
 800c9b8:	0800c9f1 	.word	0x0800c9f1
 800c9bc:	0800c9f1 	.word	0x0800c9f1
 800c9c0:	0800c9f1 	.word	0x0800c9f1
 800c9c4:	0800c9f1 	.word	0x0800c9f1
 800c9c8:	0800c9f7 	.word	0x0800c9f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f001 fb5a 	bl	800e08c <RCCEx_PLL2_Config>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9dc:	e00c      	b.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3324      	adds	r3, #36	; 0x24
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f001 fc03 	bl	800e1f0 <RCCEx_PLL3_Config>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9ee:	e003      	b.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9f4:	e000      	b.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800c9f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d109      	bne.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c9fe:	4b45      	ldr	r3, [pc, #276]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca0a:	4942      	ldr	r1, [pc, #264]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	654b      	str	r3, [r1, #84]	; 0x54
 800ca10:	e001      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d037      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	d820      	bhi.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800ca2a:	a201      	add	r2, pc, #4	; (adr r2, 800ca30 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800ca2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca30:	0800ca73 	.word	0x0800ca73
 800ca34:	0800ca49 	.word	0x0800ca49
 800ca38:	0800ca5b 	.word	0x0800ca5b
 800ca3c:	0800ca73 	.word	0x0800ca73
 800ca40:	0800ca73 	.word	0x0800ca73
 800ca44:	0800ca73 	.word	0x0800ca73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f001 fb1c 	bl	800e08c <RCCEx_PLL2_Config>
 800ca54:	4603      	mov	r3, r0
 800ca56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca58:	e00c      	b.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3324      	adds	r3, #36	; 0x24
 800ca5e:	2101      	movs	r1, #1
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 fbc5 	bl	800e1f0 <RCCEx_PLL3_Config>
 800ca66:	4603      	mov	r3, r0
 800ca68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca6a:	e003      	b.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca70:	e000      	b.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800ca72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d109      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7e:	f023 0207 	bic.w	r2, r3, #7
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca86:	4923      	ldr	r1, [pc, #140]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	654b      	str	r3, [r1, #84]	; 0x54
 800ca8c:	e001      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d040      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caa4:	2b05      	cmp	r3, #5
 800caa6:	d821      	bhi.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800caa8:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800caaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caae:	bf00      	nop
 800cab0:	0800caf3 	.word	0x0800caf3
 800cab4:	0800cac9 	.word	0x0800cac9
 800cab8:	0800cadb 	.word	0x0800cadb
 800cabc:	0800caf3 	.word	0x0800caf3
 800cac0:	0800caf3 	.word	0x0800caf3
 800cac4:	0800caf3 	.word	0x0800caf3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3304      	adds	r3, #4
 800cacc:	2101      	movs	r1, #1
 800cace:	4618      	mov	r0, r3
 800cad0:	f001 fadc 	bl	800e08c <RCCEx_PLL2_Config>
 800cad4:	4603      	mov	r3, r0
 800cad6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cad8:	e00c      	b.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3324      	adds	r3, #36	; 0x24
 800cade:	2101      	movs	r1, #1
 800cae0:	4618      	mov	r0, r3
 800cae2:	f001 fb85 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cae6:	4603      	mov	r3, r0
 800cae8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800caea:	e003      	b.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	75fb      	strb	r3, [r7, #23]
      break;
 800caf0:	e000      	b.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800caf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d110      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cafa:	4b06      	ldr	r3, [pc, #24]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cafe:	f023 0207 	bic.w	r2, r3, #7
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb08:	4902      	ldr	r1, [pc, #8]	; (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	658b      	str	r3, [r1, #88]	; 0x58
 800cb0e:	e007      	b.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800cb10:	58024800 	.word	0x58024800
 800cb14:	58024400 	.word	0x58024400
 800cb18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
 800cb1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0320 	and.w	r3, r3, #32
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d04b      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb36:	d02e      	beq.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800cb38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb3c:	d828      	bhi.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb42:	d02a      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800cb44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb48:	d822      	bhi.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb4e:	d026      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800cb50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb54:	d81c      	bhi.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb5a:	d010      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800cb5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb60:	d816      	bhi.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01d      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800cb66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb6a:	d111      	bne.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fa8a 	bl	800e08c <RCCEx_PLL2_Config>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb7c:	e012      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3324      	adds	r3, #36	; 0x24
 800cb82:	2102      	movs	r1, #2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f001 fb33 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb8e:	e009      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	75fb      	strb	r3, [r7, #23]
      break;
 800cb94:	e006      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cb96:	bf00      	nop
 800cb98:	e004      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cb9a:	bf00      	nop
 800cb9c:	e002      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbaa:	4bb2      	ldr	r3, [pc, #712]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbb8:	49ae      	ldr	r1, [pc, #696]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	654b      	str	r3, [r1, #84]	; 0x54
 800cbbe:	e001      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
 800cbc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d04b      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbda:	d02e      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800cbdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbe0:	d828      	bhi.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbe6:	d02a      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800cbe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbec:	d822      	bhi.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cbee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbf2:	d026      	beq.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800cbf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbf8:	d81c      	bhi.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cbfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbfe:	d010      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800cc00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc04:	d816      	bhi.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d01d      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800cc0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc0e:	d111      	bne.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3304      	adds	r3, #4
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 fa38 	bl	800e08c <RCCEx_PLL2_Config>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc20:	e012      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3324      	adds	r3, #36	; 0x24
 800cc26:	2102      	movs	r1, #2
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f001 fae1 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc32:	e009      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	75fb      	strb	r3, [r7, #23]
      break;
 800cc38:	e006      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc3a:	bf00      	nop
 800cc3c:	e004      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc3e:	bf00      	nop
 800cc40:	e002      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc42:	bf00      	nop
 800cc44:	e000      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10a      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc4e:	4b89      	ldr	r3, [pc, #548]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc5c:	4985      	ldr	r1, [pc, #532]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	658b      	str	r3, [r1, #88]	; 0x58
 800cc62:	e001      	b.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d04b      	beq.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc7e:	d02e      	beq.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800cc80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc84:	d828      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc8a:	d02a      	beq.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800cc8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc90:	d822      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cc92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc96:	d026      	beq.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800cc98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc9c:	d81c      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cc9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cca2:	d010      	beq.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800cca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cca8:	d816      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d01d      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800ccae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccb2:	d111      	bne.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 f9e6 	bl	800e08c <RCCEx_PLL2_Config>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccc4:	e012      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3324      	adds	r3, #36	; 0x24
 800ccca:	2102      	movs	r1, #2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f001 fa8f 	bl	800e1f0 <RCCEx_PLL3_Config>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccd6:	e009      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	75fb      	strb	r3, [r7, #23]
      break;
 800ccdc:	e006      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccde:	bf00      	nop
 800cce0:	e004      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cce2:	bf00      	nop
 800cce4:	e002      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cce6:	bf00      	nop
 800cce8:	e000      	b.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ccf2:	4b60      	ldr	r3, [pc, #384]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ccf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd00:	495c      	ldr	r1, [pc, #368]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd02:	4313      	orrs	r3, r2
 800cd04:	658b      	str	r3, [r1, #88]	; 0x58
 800cd06:	e001      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 0308 	and.w	r3, r3, #8
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d018      	beq.n	800cd4a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd20:	d10a      	bne.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	3324      	adds	r3, #36	; 0x24
 800cd26:	2102      	movs	r1, #2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f001 fa61 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cd38:	4b4e      	ldr	r3, [pc, #312]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd44:	494b      	ldr	r1, [pc, #300]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd46:	4313      	orrs	r3, r2
 800cd48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0310 	and.w	r3, r3, #16
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d01a      	beq.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd60:	d10a      	bne.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	3324      	adds	r3, #36	; 0x24
 800cd66:	2102      	movs	r1, #2
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 fa41 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd78:	4b3e      	ldr	r3, [pc, #248]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd86:	493b      	ldr	r1, [pc, #236]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d034      	beq.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cda2:	d01d      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800cda4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cda8:	d817      	bhi.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800cdae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdb2:	d009      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cdb4:	e011      	b.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3304      	adds	r3, #4
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f001 f965 	bl	800e08c <RCCEx_PLL2_Config>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdc6:	e00c      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	2102      	movs	r1, #2
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f001 fa0e 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdd8:	e003      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	75fb      	strb	r3, [r7, #23]
      break;
 800cdde:	e000      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800cde0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10a      	bne.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cde8:	4b22      	ldr	r3, [pc, #136]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cdf6:	491f      	ldr	r1, [pc, #124]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	658b      	str	r3, [r1, #88]	; 0x58
 800cdfc:	e001      	b.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d036      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce18:	d01c      	beq.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ce1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce1e:	d816      	bhi.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ce20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce24:	d003      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ce26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce2a:	d007      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ce2c:	e00f      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce2e:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce3a:	e00c      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3324      	adds	r3, #36	; 0x24
 800ce40:	2101      	movs	r1, #1
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 f9d4 	bl	800e1f0 <RCCEx_PLL3_Config>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce4c:	e003      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	75fb      	strb	r3, [r7, #23]
      break;
 800ce52:	e000      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ce54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10d      	bne.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce6a:	4902      	ldr	r1, [pc, #8]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	654b      	str	r3, [r1, #84]	; 0x54
 800ce70:	e004      	b.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800ce72:	bf00      	nop
 800ce74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d029      	beq.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d003      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ce90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce94:	d007      	beq.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ce96:	e00f      	b.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce98:	4b61      	ldr	r3, [pc, #388]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	4a60      	ldr	r2, [pc, #384]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ce9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cea4:	e00b      	b.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	2102      	movs	r1, #2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f001 f8ed 	bl	800e08c <RCCEx_PLL2_Config>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ceb6:	e002      	b.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]
      break;
 800cebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d109      	bne.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cec4:	4b56      	ldr	r3, [pc, #344]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced0:	4953      	ldr	r1, [pc, #332]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ced6:	e001      	b.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3324      	adds	r3, #36	; 0x24
 800ceec:	2102      	movs	r1, #2
 800ceee:	4618      	mov	r0, r3
 800cef0:	f001 f97e 	bl	800e1f0 <RCCEx_PLL3_Config>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d030      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf12:	d017      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800cf14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf18:	d811      	bhi.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf1e:	d013      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800cf20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf24:	d80b      	bhi.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d010      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800cf2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf2e:	d106      	bne.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf30:	4b3b      	ldr	r3, [pc, #236]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	4a3a      	ldr	r2, [pc, #232]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cf3c:	e007      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	75fb      	strb	r3, [r7, #23]
      break;
 800cf42:	e004      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf44:	bf00      	nop
 800cf46:	e002      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf48:	bf00      	nop
 800cf4a:	e000      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf54:	4b32      	ldr	r3, [pc, #200]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf60:	492f      	ldr	r1, [pc, #188]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	654b      	str	r3, [r1, #84]	; 0x54
 800cf66:	e001      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d008      	beq.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cf78:	4b29      	ldr	r3, [pc, #164]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf84:	4926      	ldr	r1, [pc, #152]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf86:	4313      	orrs	r3, r2
 800cf88:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cf96:	4b22      	ldr	r3, [pc, #136]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfa2:	491f      	ldr	r1, [pc, #124]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00d      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfb4:	4b1a      	ldr	r3, [pc, #104]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	4a19      	ldr	r2, [pc, #100]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfbe:	6113      	str	r3, [r2, #16]
 800cfc0:	4b17      	ldr	r3, [pc, #92]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfc2:	691a      	ldr	r2, [r3, #16]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfca:	4915      	ldr	r1, [pc, #84]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	da08      	bge.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cfd8:	4b11      	ldr	r3, [pc, #68]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe4:	490e      	ldr	r1, [pc, #56]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d009      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cff6:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d004:	4906      	ldr	r1, [pc, #24]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d006:	4313      	orrs	r3, r2
 800d008:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d00a:	7dbb      	ldrb	r3, [r7, #22]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	e000      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800d014:	2301      	movs	r3, #1
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	58024400 	.word	0x58024400

0800d024 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b090      	sub	sp, #64	; 0x40
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d032:	f040 8089 	bne.w	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d036:	4b95      	ldr	r3, [pc, #596]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	633b      	str	r3, [r7, #48]	; 0x30
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	2b04      	cmp	r3, #4
 800d044:	d87d      	bhi.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800d046:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800d048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04c:	0800d061 	.word	0x0800d061
 800d050:	0800d085 	.word	0x0800d085
 800d054:	0800d0a9 	.word	0x0800d0a9
 800d058:	0800d13d 	.word	0x0800d13d
 800d05c:	0800d0cd 	.word	0x0800d0cd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d060:	4b8a      	ldr	r3, [pc, #552]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d06c:	d107      	bne.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d072:	4618      	mov	r0, r3
 800d074:	f000 feb8 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d07c:	e3ed      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d082:	e3ea      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d084:	4b81      	ldr	r3, [pc, #516]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d090:	d107      	bne.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d092:	f107 0318 	add.w	r3, r7, #24
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fbfe 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0a0:	e3db      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0a6:	e3d8      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0a8:	4b78      	ldr	r3, [pc, #480]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0b4:	d107      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0b6:	f107 030c 	add.w	r3, r7, #12
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f000 fd40 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0c4:	e3c9      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0ca:	e3c6      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d0cc:	4b6f      	ldr	r3, [pc, #444]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0d6:	4b6d      	ldr	r3, [pc, #436]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	2b04      	cmp	r3, #4
 800d0e0:	d10c      	bne.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800d0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d109      	bne.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d0e8:	4b68      	ldr	r3, [pc, #416]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	08db      	lsrs	r3, r3, #3
 800d0ee:	f003 0303 	and.w	r3, r3, #3
 800d0f2:	4a67      	ldr	r2, [pc, #412]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0fa:	e01e      	b.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0fc:	4b63      	ldr	r3, [pc, #396]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d108:	d106      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d110:	d102      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d112:	4b60      	ldr	r3, [pc, #384]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d116:	e010      	b.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d118:	4b5c      	ldr	r3, [pc, #368]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d124:	d106      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d12c:	d102      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d12e:	4b5a      	ldr	r3, [pc, #360]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d130:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d132:	e002      	b.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d138:	e38f      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d13a:	e38e      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d13c:	4b57      	ldr	r3, [pc, #348]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d140:	e38b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d146:	e388      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d14e:	f040 80a7 	bne.w	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d152:	4b4e      	ldr	r3, [pc, #312]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d156:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d15a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d162:	d054      	beq.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d16a:	f200 808b 	bhi.w	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d174:	f000 8083 	beq.w	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d17e:	f200 8081 	bhi.w	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d188:	d02f      	beq.n	800d1ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d190:	d878      	bhi.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d19e:	d012      	beq.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800d1a0:	e070      	b.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1a2:	4b3a      	ldr	r3, [pc, #232]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1ae:	d107      	bne.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 fe17 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d1be:	e34c      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1c4:	e349      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1c6:	4b31      	ldr	r3, [pc, #196]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1d2:	d107      	bne.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1d4:	f107 0318 	add.w	r3, r7, #24
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 fb5d 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d1e2:	e33a      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1e8:	e337      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1ea:	4b28      	ldr	r3, [pc, #160]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1f6:	d107      	bne.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f8:	f107 030c 	add.w	r3, r7, #12
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 fc9f 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d206:	e328      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d20c:	e325      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d20e:	4b1f      	ldr	r3, [pc, #124]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d216:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d218:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0304 	and.w	r3, r3, #4
 800d220:	2b04      	cmp	r3, #4
 800d222:	d10c      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800d224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d226:	2b00      	cmp	r3, #0
 800d228:	d109      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d22a:	4b18      	ldr	r3, [pc, #96]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	08db      	lsrs	r3, r3, #3
 800d230:	f003 0303 	and.w	r3, r3, #3
 800d234:	4a16      	ldr	r2, [pc, #88]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d236:	fa22 f303 	lsr.w	r3, r2, r3
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d23c:	e01e      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d23e:	4b13      	ldr	r3, [pc, #76]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d24a:	d106      	bne.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d252:	d102      	bne.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d254:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d258:	e010      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d25a:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d266:	d106      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d26e:	d102      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d270:	4b09      	ldr	r3, [pc, #36]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d274:	e002      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d27a:	e2ee      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d27c:	e2ed      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d27e:	4b07      	ldr	r3, [pc, #28]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d282:	e2ea      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d288:	e2e7      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d28a:	bf00      	nop
 800d28c:	58024400 	.word	0x58024400
 800d290:	03d09000 	.word	0x03d09000
 800d294:	003d0900 	.word	0x003d0900
 800d298:	017d7840 	.word	0x017d7840
 800d29c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2a6:	f040 809c 	bne.w	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d2aa:	4b9e      	ldr	r3, [pc, #632]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d2b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2ba:	d054      	beq.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2c2:	f200 808b 	bhi.w	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2cc:	f000 8083 	beq.w	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2d6:	f200 8081 	bhi.w	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2e0:	d02f      	beq.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2e8:	d878      	bhi.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d004      	beq.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2f6:	d012      	beq.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d2f8:	e070      	b.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2fa:	4b8a      	ldr	r3, [pc, #552]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d306:	d107      	bne.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fd6b 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d316:	e2a0      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d31c:	e29d      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d31e:	4b81      	ldr	r3, [pc, #516]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d32a:	d107      	bne.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d32c:	f107 0318 	add.w	r3, r7, #24
 800d330:	4618      	mov	r0, r3
 800d332:	f000 fab1 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d33a:	e28e      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d340:	e28b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d342:	4b78      	ldr	r3, [pc, #480]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d34e:	d107      	bne.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4618      	mov	r0, r3
 800d356:	f000 fbf3 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d35e:	e27c      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d364:	e279      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d366:	4b6f      	ldr	r3, [pc, #444]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d36a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d36e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d370:	4b6c      	ldr	r3, [pc, #432]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0304 	and.w	r3, r3, #4
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d10c      	bne.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d109      	bne.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d382:	4b68      	ldr	r3, [pc, #416]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	08db      	lsrs	r3, r3, #3
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	4a66      	ldr	r2, [pc, #408]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d38e:	fa22 f303 	lsr.w	r3, r2, r3
 800d392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d394:	e01e      	b.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d396:	4b63      	ldr	r3, [pc, #396]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a2:	d106      	bne.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3aa:	d102      	bne.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d3ac:	4b5f      	ldr	r3, [pc, #380]	; (800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3b0:	e010      	b.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d3b2:	4b5c      	ldr	r3, [pc, #368]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3be:	d106      	bne.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c6:	d102      	bne.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d3c8:	4b59      	ldr	r3, [pc, #356]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3cc:	e002      	b.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d3d2:	e242      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d3d4:	e241      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d3d6:	4b57      	ldr	r3, [pc, #348]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3da:	e23e      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3e0:	e23b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e8:	f040 80a6 	bne.w	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d3ec:	4b4d      	ldr	r3, [pc, #308]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d3f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3fc:	d054      	beq.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d404:	f200 808b 	bhi.w	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d40e:	f000 8083 	beq.w	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d414:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d418:	f200 8081 	bhi.w	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d422:	d02f      	beq.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d42a:	d878      	bhi.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d438:	d012      	beq.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800d43a:	e070      	b.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d43c:	4b39      	ldr	r3, [pc, #228]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d448:	d107      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d44a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fcca 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d458:	e1ff      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d45a:	2300      	movs	r3, #0
 800d45c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d45e:	e1fc      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d460:	4b30      	ldr	r3, [pc, #192]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d46c:	d107      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d46e:	f107 0318 	add.w	r3, r7, #24
 800d472:	4618      	mov	r0, r3
 800d474:	f000 fa10 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d47c:	e1ed      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d482:	e1ea      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d484:	4b27      	ldr	r3, [pc, #156]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d48c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d490:	d107      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d492:	f107 030c 	add.w	r3, r7, #12
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fb52 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d4a0:	e1db      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4a6:	e1d8      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d4a8:	4b1e      	ldr	r3, [pc, #120]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d4b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d4b2:	4b1c      	ldr	r3, [pc, #112]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 0304 	and.w	r3, r3, #4
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d10c      	bne.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800d4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d109      	bne.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d4c4:	4b17      	ldr	r3, [pc, #92]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	08db      	lsrs	r3, r3, #3
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	4a16      	ldr	r2, [pc, #88]	; (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4d6:	e01e      	b.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d4d8:	4b12      	ldr	r3, [pc, #72]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4e4:	d106      	bne.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4ec:	d102      	bne.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4f2:	e010      	b.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d500:	d106      	bne.n	800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800d502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d508:	d102      	bne.n	800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d50a:	4b09      	ldr	r3, [pc, #36]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d50c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d50e:	e002      	b.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d514:	e1a1      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d516:	e1a0      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d518:	4b06      	ldr	r3, [pc, #24]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d51a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d51c:	e19d      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d522:	e19a      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d524:	58024400 	.word	0x58024400
 800d528:	03d09000 	.word	0x03d09000
 800d52c:	003d0900 	.word	0x003d0900
 800d530:	017d7840 	.word	0x017d7840
 800d534:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d53e:	d173      	bne.n	800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d540:	4b9a      	ldr	r3, [pc, #616]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d548:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d550:	d02f      	beq.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d558:	d863      	bhi.n	800d622 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d566:	d012      	beq.n	800d58e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800d568:	e05b      	b.n	800d622 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d56a:	4b90      	ldr	r3, [pc, #576]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d576:	d107      	bne.n	800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d578:	f107 0318 	add.w	r3, r7, #24
 800d57c:	4618      	mov	r0, r3
 800d57e:	f000 f98b 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d586:	e168      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d58c:	e165      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d58e:	4b87      	ldr	r3, [pc, #540]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d59a:	d107      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d59c:	f107 030c 	add.w	r3, r7, #12
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 facd 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d5aa:	e156      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5b0:	e153      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d5b2:	4b7e      	ldr	r3, [pc, #504]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d5ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d5bc:	4b7b      	ldr	r3, [pc, #492]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 0304 	and.w	r3, r3, #4
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d10c      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d109      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5ce:	4b77      	ldr	r3, [pc, #476]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	08db      	lsrs	r3, r3, #3
 800d5d4:	f003 0303 	and.w	r3, r3, #3
 800d5d8:	4a75      	ldr	r2, [pc, #468]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d5da:	fa22 f303 	lsr.w	r3, r2, r3
 800d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5e0:	e01e      	b.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5e2:	4b72      	ldr	r3, [pc, #456]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5ee:	d106      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800d5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5f6:	d102      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d5f8:	4b6e      	ldr	r3, [pc, #440]	; (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5fc:	e010      	b.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5fe:	4b6b      	ldr	r3, [pc, #428]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d60a:	d106      	bne.n	800d61a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d612:	d102      	bne.n	800d61a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d614:	4b68      	ldr	r3, [pc, #416]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d618:	e002      	b.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d61e:	e11c      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d620:	e11b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d626:	e118      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d62e:	d133      	bne.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d630:	4b5e      	ldr	r3, [pc, #376]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d638:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d004      	beq.n	800d64a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d646:	d012      	beq.n	800d66e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800d648:	e023      	b.n	800d692 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d64a:	4b58      	ldr	r3, [pc, #352]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d656:	d107      	bne.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 fbc3 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d666:	e0f8      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d66c:	e0f5      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d66e:	4b4f      	ldr	r3, [pc, #316]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d67a:	d107      	bne.n	800d68c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d67c:	f107 0318 	add.w	r3, r7, #24
 800d680:	4618      	mov	r0, r3
 800d682:	f000 f909 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d68a:	e0e6      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d690:	e0e3      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d696:	e0e0      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d69e:	f040 808d 	bne.w	800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d6a2:	4b42      	ldr	r3, [pc, #264]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d6aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6b2:	d06b      	beq.n	800d78c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6ba:	d874      	bhi.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6c2:	d056      	beq.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ca:	d86c      	bhi.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6d2:	d03b      	beq.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6da:	d864      	bhi.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6e2:	d021      	beq.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6ea:	d85c      	bhi.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6f8:	d004      	beq.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800d6fa:	e054      	b.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d6fc:	f000 f8b6 	bl	800d86c <HAL_RCCEx_GetD3PCLK1Freq>
 800d700:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d702:	e0aa      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d704:	4b29      	ldr	r3, [pc, #164]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d710:	d107      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d712:	f107 0318 	add.w	r3, r7, #24
 800d716:	4618      	mov	r0, r3
 800d718:	f000 f8be 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d720:	e09b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d726:	e098      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d728:	4b20      	ldr	r3, [pc, #128]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d734:	d107      	bne.n	800d746 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d736:	f107 030c 	add.w	r3, r7, #12
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 fa00 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d744:	e089      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d74a:	e086      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d74c:	4b17      	ldr	r3, [pc, #92]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b04      	cmp	r3, #4
 800d756:	d109      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d758:	4b14      	ldr	r3, [pc, #80]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	08db      	lsrs	r3, r3, #3
 800d75e:	f003 0303 	and.w	r3, r3, #3
 800d762:	4a13      	ldr	r2, [pc, #76]	; (800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d764:	fa22 f303 	lsr.w	r3, r2, r3
 800d768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d76a:	e076      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d770:	e073      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d772:	4b0e      	ldr	r3, [pc, #56]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d77a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d77e:	d102      	bne.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800d780:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d782:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d784:	e069      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d78a:	e066      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d78c:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d798:	d102      	bne.n	800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800d79a:	4b07      	ldr	r3, [pc, #28]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d79c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d79e:	e05c      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7a4:	e059      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7aa:	e056      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d7ac:	58024400 	.word	0x58024400
 800d7b0:	03d09000 	.word	0x03d09000
 800d7b4:	003d0900 	.word	0x003d0900
 800d7b8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7c2:	d148      	bne.n	800d856 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d7c4:	4b27      	ldr	r3, [pc, #156]	; (800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d7cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7d4:	d02a      	beq.n	800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7dc:	d838      	bhi.n	800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7ea:	d00d      	beq.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800d7ec:	e030      	b.n	800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d7ee:	4b1d      	ldr	r3, [pc, #116]	; (800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7fa:	d102      	bne.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800d7fc:	4b1a      	ldr	r3, [pc, #104]	; (800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d800:	e02b      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d806:	e028      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d808:	4b16      	ldr	r3, [pc, #88]	; (800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d814:	d107      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fae4 	bl	800dde8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d824:	e019      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d82a:	e016      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d838:	d107      	bne.n	800d84a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d83a:	f107 0318 	add.w	r3, r7, #24
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 f82a 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d848:	e007      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d84e:	e004      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d850:	2300      	movs	r3, #0
 800d852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d854:	e001      	b.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3740      	adds	r7, #64	; 0x40
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	58024400 	.word	0x58024400
 800d868:	017d7840 	.word	0x017d7840

0800d86c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d870:	f7fe fc66 	bl	800c140 <HAL_RCC_GetHCLKFreq>
 800d874:	4602      	mov	r2, r0
 800d876:	4b06      	ldr	r3, [pc, #24]	; (800d890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	091b      	lsrs	r3, r3, #4
 800d87c:	f003 0307 	and.w	r3, r3, #7
 800d880:	4904      	ldr	r1, [pc, #16]	; (800d894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d882:	5ccb      	ldrb	r3, [r1, r3]
 800d884:	f003 031f 	and.w	r3, r3, #31
 800d888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	58024400 	.word	0x58024400
 800d894:	08014450 	.word	0x08014450

0800d898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d898:	b480      	push	{r7}
 800d89a:	b089      	sub	sp, #36	; 0x24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8a0:	4ba1      	ldr	r3, [pc, #644]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a4:	f003 0303 	and.w	r3, r3, #3
 800d8a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d8aa:	4b9f      	ldr	r3, [pc, #636]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	0b1b      	lsrs	r3, r3, #12
 800d8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d8b6:	4b9c      	ldr	r3, [pc, #624]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ba:	091b      	lsrs	r3, r3, #4
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d8c2:	4b99      	ldr	r3, [pc, #612]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c6:	08db      	lsrs	r3, r3, #3
 800d8c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	fb02 f303 	mul.w	r3, r2, r3
 800d8d2:	ee07 3a90 	vmov	s15, r3
 800d8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 8111 	beq.w	800db08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	f000 8083 	beq.w	800d9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	f200 80a1 	bhi.w	800da38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d056      	beq.n	800d9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d902:	e099      	b.n	800da38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d904:	4b88      	ldr	r3, [pc, #544]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 0320 	and.w	r3, r3, #32
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d02d      	beq.n	800d96c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d910:	4b85      	ldr	r3, [pc, #532]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	08db      	lsrs	r3, r3, #3
 800d916:	f003 0303 	and.w	r3, r3, #3
 800d91a:	4a84      	ldr	r2, [pc, #528]	; (800db2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
 800d920:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	ee07 3a90 	vmov	s15, r3
 800d928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	ee07 3a90 	vmov	s15, r3
 800d932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93a:	4b7b      	ldr	r3, [pc, #492]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d942:	ee07 3a90 	vmov	s15, r3
 800d946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d94e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d96a:	e087      	b.n	800da7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d97e:	4b6a      	ldr	r3, [pc, #424]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d992:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9ae:	e065      	b.n	800da7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	ee07 3a90 	vmov	s15, r3
 800d9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c2:	4b59      	ldr	r3, [pc, #356]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ca:	ee07 3a90 	vmov	s15, r3
 800d9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9f2:	e043      	b.n	800da7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	ee07 3a90 	vmov	s15, r3
 800d9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da06:	4b48      	ldr	r3, [pc, #288]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da0e:	ee07 3a90 	vmov	s15, r3
 800da12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da16:	ed97 6a03 	vldr	s12, [r7, #12]
 800da1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da36:	e021      	b.n	800da7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	ee07 3a90 	vmov	s15, r3
 800da3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da4a:	4b37      	ldr	r3, [pc, #220]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da52:	ee07 3a90 	vmov	s15, r3
 800da56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800da7c:	4b2a      	ldr	r3, [pc, #168]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da80:	0a5b      	lsrs	r3, r3, #9
 800da82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da86:	ee07 3a90 	vmov	s15, r3
 800da8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da96:	edd7 6a07 	vldr	s13, [r7, #28]
 800da9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa2:	ee17 2a90 	vmov	r2, s15
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800daaa:	4b1f      	ldr	r3, [pc, #124]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daae:	0c1b      	lsrs	r3, r3, #16
 800dab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab4:	ee07 3a90 	vmov	s15, r3
 800dab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dabc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad0:	ee17 2a90 	vmov	r2, s15
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800dad8:	4b13      	ldr	r3, [pc, #76]	; (800db28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dadc:	0e1b      	lsrs	r3, r3, #24
 800dade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae2:	ee07 3a90 	vmov	s15, r3
 800dae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800daee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800daf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafe:	ee17 2a90 	vmov	r2, s15
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db06:	e008      	b.n	800db1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	609a      	str	r2, [r3, #8]
}
 800db1a:	bf00      	nop
 800db1c:	3724      	adds	r7, #36	; 0x24
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	58024400 	.word	0x58024400
 800db2c:	03d09000 	.word	0x03d09000
 800db30:	46000000 	.word	0x46000000
 800db34:	4c742400 	.word	0x4c742400
 800db38:	4a742400 	.word	0x4a742400
 800db3c:	4bbebc20 	.word	0x4bbebc20

0800db40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800db40:	b480      	push	{r7}
 800db42:	b089      	sub	sp, #36	; 0x24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db48:	4ba1      	ldr	r3, [pc, #644]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4c:	f003 0303 	and.w	r3, r3, #3
 800db50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800db52:	4b9f      	ldr	r3, [pc, #636]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db56:	0d1b      	lsrs	r3, r3, #20
 800db58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800db5e:	4b9c      	ldr	r3, [pc, #624]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db62:	0a1b      	lsrs	r3, r3, #8
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800db6a:	4b99      	ldr	r3, [pc, #612]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db6e:	08db      	lsrs	r3, r3, #3
 800db70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	fb02 f303 	mul.w	r3, r2, r3
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 8111 	beq.w	800ddb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b02      	cmp	r3, #2
 800db92:	f000 8083 	beq.w	800dc9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	f200 80a1 	bhi.w	800dce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d056      	beq.n	800dc58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dbaa:	e099      	b.n	800dce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbac:	4b88      	ldr	r3, [pc, #544]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 0320 	and.w	r3, r3, #32
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d02d      	beq.n	800dc14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dbb8:	4b85      	ldr	r3, [pc, #532]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	08db      	lsrs	r3, r3, #3
 800dbbe:	f003 0303 	and.w	r3, r3, #3
 800dbc2:	4a84      	ldr	r2, [pc, #528]	; (800ddd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dbc4:	fa22 f303 	lsr.w	r3, r2, r3
 800dbc8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	ee07 3a90 	vmov	s15, r3
 800dbd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	ee07 3a90 	vmov	s15, r3
 800dbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe2:	4b7b      	ldr	r3, [pc, #492]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbea:	ee07 3a90 	vmov	s15, r3
 800dbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ddd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dc12:	e087      	b.n	800dd24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	ee07 3a90 	vmov	s15, r3
 800dc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc26:	4b6a      	ldr	r3, [pc, #424]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc2e:	ee07 3a90 	vmov	s15, r3
 800dc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ddd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dc56:	e065      	b.n	800dd24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	ee07 3a90 	vmov	s15, r3
 800dc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc6a:	4b59      	ldr	r3, [pc, #356]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc72:	ee07 3a90 	vmov	s15, r3
 800dc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ddd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dc9a:	e043      	b.n	800dd24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	ee07 3a90 	vmov	s15, r3
 800dca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcae:	4b48      	ldr	r3, [pc, #288]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb6:	ee07 3a90 	vmov	s15, r3
 800dcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ddd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcde:	e021      	b.n	800dd24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	ee07 3a90 	vmov	s15, r3
 800dce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcf2:	4b37      	ldr	r3, [pc, #220]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcfa:	ee07 3a90 	vmov	s15, r3
 800dcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd02:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ddd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dd24:	4b2a      	ldr	r3, [pc, #168]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd28:	0a5b      	lsrs	r3, r3, #9
 800dd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2e:	ee07 3a90 	vmov	s15, r3
 800dd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd4a:	ee17 2a90 	vmov	r2, s15
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800dd52:	4b1f      	ldr	r3, [pc, #124]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	0c1b      	lsrs	r3, r3, #16
 800dd58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd5c:	ee07 3a90 	vmov	s15, r3
 800dd60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd78:	ee17 2a90 	vmov	r2, s15
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd84:	0e1b      	lsrs	r3, r3, #24
 800dd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd8a:	ee07 3a90 	vmov	s15, r3
 800dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dda2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dda6:	ee17 2a90 	vmov	r2, s15
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ddae:	e008      	b.n	800ddc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	609a      	str	r2, [r3, #8]
}
 800ddc2:	bf00      	nop
 800ddc4:	3724      	adds	r7, #36	; 0x24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	58024400 	.word	0x58024400
 800ddd4:	03d09000 	.word	0x03d09000
 800ddd8:	46000000 	.word	0x46000000
 800dddc:	4c742400 	.word	0x4c742400
 800dde0:	4a742400 	.word	0x4a742400
 800dde4:	4bbebc20 	.word	0x4bbebc20

0800dde8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b089      	sub	sp, #36	; 0x24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddf0:	4ba0      	ldr	r3, [pc, #640]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ddfa:	4b9e      	ldr	r3, [pc, #632]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfe:	091b      	lsrs	r3, r3, #4
 800de00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800de06:	4b9b      	ldr	r3, [pc, #620]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800de10:	4b98      	ldr	r3, [pc, #608]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de14:	08db      	lsrs	r3, r3, #3
 800de16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	fb02 f303 	mul.w	r3, r2, r3
 800de20:	ee07 3a90 	vmov	s15, r3
 800de24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 8111 	beq.w	800e056 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	2b02      	cmp	r3, #2
 800de38:	f000 8083 	beq.w	800df42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	f200 80a1 	bhi.w	800df86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d003      	beq.n	800de52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d056      	beq.n	800defe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800de50:	e099      	b.n	800df86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de52:	4b88      	ldr	r3, [pc, #544]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 0320 	and.w	r3, r3, #32
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d02d      	beq.n	800deba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800de5e:	4b85      	ldr	r3, [pc, #532]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	08db      	lsrs	r3, r3, #3
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	4a83      	ldr	r2, [pc, #524]	; (800e078 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800de6a:	fa22 f303 	lsr.w	r3, r2, r3
 800de6e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	ee07 3a90 	vmov	s15, r3
 800de76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	ee07 3a90 	vmov	s15, r3
 800de80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de88:	4b7a      	ldr	r3, [pc, #488]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de90:	ee07 3a90 	vmov	s15, r3
 800de94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de98:	ed97 6a03 	vldr	s12, [r7, #12]
 800de9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800deb8:	e087      	b.n	800dfca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	ee07 3a90 	vmov	s15, r3
 800dec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800decc:	4b69      	ldr	r3, [pc, #420]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded4:	ee07 3a90 	vmov	s15, r3
 800ded8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dedc:	ed97 6a03 	vldr	s12, [r7, #12]
 800dee0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800def0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800def4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800def8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800defc:	e065      	b.n	800dfca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	ee07 3a90 	vmov	s15, r3
 800df04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e084 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800df0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df10:	4b58      	ldr	r3, [pc, #352]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df18:	ee07 3a90 	vmov	s15, r3
 800df1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df20:	ed97 6a03 	vldr	s12, [r7, #12]
 800df24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df40:	e043      	b.n	800dfca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	ee07 3a90 	vmov	s15, r3
 800df48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800df50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df54:	4b47      	ldr	r3, [pc, #284]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df5c:	ee07 3a90 	vmov	s15, r3
 800df60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df64:	ed97 6a03 	vldr	s12, [r7, #12]
 800df68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df84:	e021      	b.n	800dfca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	ee07 3a90 	vmov	s15, r3
 800df8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df98:	4b36      	ldr	r3, [pc, #216]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfa0:	ee07 3a90 	vmov	s15, r3
 800dfa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800dfca:	4b2a      	ldr	r3, [pc, #168]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfce:	0a5b      	lsrs	r3, r3, #9
 800dfd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd4:	ee07 3a90 	vmov	s15, r3
 800dfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dff0:	ee17 2a90 	vmov	r2, s15
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800dff8:	4b1e      	ldr	r3, [pc, #120]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffc:	0c1b      	lsrs	r3, r3, #16
 800dffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e002:	ee07 3a90 	vmov	s15, r3
 800e006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e012:	edd7 6a07 	vldr	s13, [r7, #28]
 800e016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e01e:	ee17 2a90 	vmov	r2, s15
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e026:	4b13      	ldr	r3, [pc, #76]	; (800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e02a:	0e1b      	lsrs	r3, r3, #24
 800e02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e030:	ee07 3a90 	vmov	s15, r3
 800e034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e03c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e040:	edd7 6a07 	vldr	s13, [r7, #28]
 800e044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e04c:	ee17 2a90 	vmov	r2, s15
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e054:	e008      	b.n	800e068 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	609a      	str	r2, [r3, #8]
}
 800e068:	bf00      	nop
 800e06a:	3724      	adds	r7, #36	; 0x24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	58024400 	.word	0x58024400
 800e078:	03d09000 	.word	0x03d09000
 800e07c:	46000000 	.word	0x46000000
 800e080:	4c742400 	.word	0x4c742400
 800e084:	4a742400 	.word	0x4a742400
 800e088:	4bbebc20 	.word	0x4bbebc20

0800e08c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e096:	2300      	movs	r3, #0
 800e098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e09a:	4b53      	ldr	r3, [pc, #332]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09e:	f003 0303 	and.w	r3, r3, #3
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d101      	bne.n	800e0aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e099      	b.n	800e1de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e0aa:	4b4f      	ldr	r3, [pc, #316]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a4e      	ldr	r2, [pc, #312]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e0b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0b6:	f7f9 fb2b 	bl	8007710 <HAL_GetTick>
 800e0ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e0bc:	e008      	b.n	800e0d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e0be:	f7f9 fb27 	bl	8007710 <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d901      	bls.n	800e0d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e086      	b.n	800e1de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e0d0:	4b45      	ldr	r3, [pc, #276]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1f0      	bne.n	800e0be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e0dc:	4b42      	ldr	r3, [pc, #264]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	031b      	lsls	r3, r3, #12
 800e0ea:	493f      	ldr	r1, [pc, #252]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	628b      	str	r3, [r1, #40]	; 0x28
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	025b      	lsls	r3, r3, #9
 800e102:	b29b      	uxth	r3, r3
 800e104:	431a      	orrs	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	041b      	lsls	r3, r3, #16
 800e10e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e112:	431a      	orrs	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	3b01      	subs	r3, #1
 800e11a:	061b      	lsls	r3, r3, #24
 800e11c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e120:	4931      	ldr	r1, [pc, #196]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e122:	4313      	orrs	r3, r2
 800e124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e126:	4b30      	ldr	r3, [pc, #192]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	695b      	ldr	r3, [r3, #20]
 800e132:	492d      	ldr	r1, [pc, #180]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e134:	4313      	orrs	r3, r2
 800e136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e138:	4b2b      	ldr	r3, [pc, #172]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13c:	f023 0220 	bic.w	r2, r3, #32
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	4928      	ldr	r1, [pc, #160]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e146:	4313      	orrs	r3, r2
 800e148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e14a:	4b27      	ldr	r3, [pc, #156]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14e:	4a26      	ldr	r2, [pc, #152]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e150:	f023 0310 	bic.w	r3, r3, #16
 800e154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e156:	4b24      	ldr	r3, [pc, #144]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e15a:	4b24      	ldr	r3, [pc, #144]	; (800e1ec <RCCEx_PLL2_Config+0x160>)
 800e15c:	4013      	ands	r3, r2
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	69d2      	ldr	r2, [r2, #28]
 800e162:	00d2      	lsls	r2, r2, #3
 800e164:	4920      	ldr	r1, [pc, #128]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e166:	4313      	orrs	r3, r2
 800e168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e16a:	4b1f      	ldr	r3, [pc, #124]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	4a1e      	ldr	r2, [pc, #120]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e170:	f043 0310 	orr.w	r3, r3, #16
 800e174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e17c:	4b1a      	ldr	r3, [pc, #104]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	4a19      	ldr	r2, [pc, #100]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e186:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e188:	e00f      	b.n	800e1aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d106      	bne.n	800e19e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e190:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	4a14      	ldr	r2, [pc, #80]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e19a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e19c:	e005      	b.n	800e1aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e19e:	4b12      	ldr	r3, [pc, #72]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a2:	4a11      	ldr	r2, [pc, #68]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e1a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e1aa:	4b0f      	ldr	r3, [pc, #60]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a0e      	ldr	r2, [pc, #56]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e1b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1b6:	f7f9 faab 	bl	8007710 <HAL_GetTick>
 800e1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e1bc:	e008      	b.n	800e1d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e1be:	f7f9 faa7 	bl	8007710 <HAL_GetTick>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d901      	bls.n	800e1d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e006      	b.n	800e1de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e1d0:	4b05      	ldr	r3, [pc, #20]	; (800e1e8 <RCCEx_PLL2_Config+0x15c>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0f0      	beq.n	800e1be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	58024400 	.word	0x58024400
 800e1ec:	ffff0007 	.word	0xffff0007

0800e1f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e1fe:	4b53      	ldr	r3, [pc, #332]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e202:	f003 0303 	and.w	r3, r3, #3
 800e206:	2b03      	cmp	r3, #3
 800e208:	d101      	bne.n	800e20e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	e099      	b.n	800e342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e20e:	4b4f      	ldr	r3, [pc, #316]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a4e      	ldr	r2, [pc, #312]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e21a:	f7f9 fa79 	bl	8007710 <HAL_GetTick>
 800e21e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e220:	e008      	b.n	800e234 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e222:	f7f9 fa75 	bl	8007710 <HAL_GetTick>
 800e226:	4602      	mov	r2, r0
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d901      	bls.n	800e234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e230:	2303      	movs	r3, #3
 800e232:	e086      	b.n	800e342 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e234:	4b45      	ldr	r3, [pc, #276]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1f0      	bne.n	800e222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e240:	4b42      	ldr	r3, [pc, #264]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	051b      	lsls	r3, r3, #20
 800e24e:	493f      	ldr	r1, [pc, #252]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e250:	4313      	orrs	r3, r2
 800e252:	628b      	str	r3, [r1, #40]	; 0x28
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	3b01      	subs	r3, #1
 800e25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	3b01      	subs	r3, #1
 800e264:	025b      	lsls	r3, r3, #9
 800e266:	b29b      	uxth	r3, r3
 800e268:	431a      	orrs	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	3b01      	subs	r3, #1
 800e270:	041b      	lsls	r3, r3, #16
 800e272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e276:	431a      	orrs	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	061b      	lsls	r3, r3, #24
 800e280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e284:	4931      	ldr	r1, [pc, #196]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e286:	4313      	orrs	r3, r2
 800e288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e28a:	4b30      	ldr	r3, [pc, #192]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	492d      	ldr	r1, [pc, #180]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e298:	4313      	orrs	r3, r2
 800e29a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e29c:	4b2b      	ldr	r3, [pc, #172]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	4928      	ldr	r1, [pc, #160]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e2ae:	4b27      	ldr	r3, [pc, #156]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b2:	4a26      	ldr	r2, [pc, #152]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e2ba:	4b24      	ldr	r3, [pc, #144]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2be:	4b24      	ldr	r3, [pc, #144]	; (800e350 <RCCEx_PLL3_Config+0x160>)
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	69d2      	ldr	r2, [r2, #28]
 800e2c6:	00d2      	lsls	r2, r2, #3
 800e2c8:	4920      	ldr	r1, [pc, #128]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e2ce:	4b1f      	ldr	r3, [pc, #124]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d2:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d106      	bne.n	800e2ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e2e0:	4b1a      	ldr	r3, [pc, #104]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	4a19      	ldr	r2, [pc, #100]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e2ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e2ec:	e00f      	b.n	800e30e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d106      	bne.n	800e302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e2f4:	4b15      	ldr	r3, [pc, #84]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	4a14      	ldr	r2, [pc, #80]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e2fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e2fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e300:	e005      	b.n	800e30e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e302:	4b12      	ldr	r3, [pc, #72]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e306:	4a11      	ldr	r2, [pc, #68]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e30c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e30e:	4b0f      	ldr	r3, [pc, #60]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a0e      	ldr	r2, [pc, #56]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e31a:	f7f9 f9f9 	bl	8007710 <HAL_GetTick>
 800e31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e320:	e008      	b.n	800e334 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e322:	f7f9 f9f5 	bl	8007710 <HAL_GetTick>
 800e326:	4602      	mov	r2, r0
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d901      	bls.n	800e334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e330:	2303      	movs	r3, #3
 800e332:	e006      	b.n	800e342 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e334:	4b05      	ldr	r3, [pc, #20]	; (800e34c <RCCEx_PLL3_Config+0x15c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d0f0      	beq.n	800e322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e340:	7bfb      	ldrb	r3, [r7, #15]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	58024400 	.word	0x58024400
 800e350:	ffff0007 	.word	0xffff0007

0800e354 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d101      	bne.n	800e366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	e0f1      	b.n	800e54a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a78      	ldr	r2, [pc, #480]	; (800e554 <HAL_SPI_Init+0x200>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d00f      	beq.n	800e396 <HAL_SPI_Init+0x42>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a77      	ldr	r2, [pc, #476]	; (800e558 <HAL_SPI_Init+0x204>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d00a      	beq.n	800e396 <HAL_SPI_Init+0x42>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a75      	ldr	r2, [pc, #468]	; (800e55c <HAL_SPI_Init+0x208>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d005      	beq.n	800e396 <HAL_SPI_Init+0x42>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	2b0f      	cmp	r3, #15
 800e390:	d901      	bls.n	800e396 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e0d9      	b.n	800e54a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f8e2 	bl	800e560 <SPI_GetPacketSize>
 800e39c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a6c      	ldr	r2, [pc, #432]	; (800e554 <HAL_SPI_Init+0x200>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d00c      	beq.n	800e3c2 <HAL_SPI_Init+0x6e>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a6a      	ldr	r2, [pc, #424]	; (800e558 <HAL_SPI_Init+0x204>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d007      	beq.n	800e3c2 <HAL_SPI_Init+0x6e>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a69      	ldr	r2, [pc, #420]	; (800e55c <HAL_SPI_Init+0x208>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d002      	beq.n	800e3c2 <HAL_SPI_Init+0x6e>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b08      	cmp	r3, #8
 800e3c0:	d811      	bhi.n	800e3e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3c6:	4a63      	ldr	r2, [pc, #396]	; (800e554 <HAL_SPI_Init+0x200>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d009      	beq.n	800e3e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a61      	ldr	r2, [pc, #388]	; (800e558 <HAL_SPI_Init+0x204>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d004      	beq.n	800e3e0 <HAL_SPI_Init+0x8c>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a60      	ldr	r2, [pc, #384]	; (800e55c <HAL_SPI_Init+0x208>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d104      	bne.n	800e3ea <HAL_SPI_Init+0x96>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b10      	cmp	r3, #16
 800e3e4:	d901      	bls.n	800e3ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e0af      	b.n	800e54a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d106      	bne.n	800e404 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7f8 fa5a 	bl	80068b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2202      	movs	r2, #2
 800e408:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f022 0201 	bic.w	r2, r2, #1
 800e41a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	699b      	ldr	r3, [r3, #24]
 800e42c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e430:	d119      	bne.n	800e466 <HAL_SPI_Init+0x112>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e43a:	d103      	bne.n	800e444 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e440:	2b00      	cmp	r3, #0
 800e442:	d008      	beq.n	800e456 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10c      	bne.n	800e466 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e454:	d107      	bne.n	800e466 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	69da      	ldr	r2, [r3, #28]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46e:	431a      	orrs	r2, r3
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	431a      	orrs	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e478:	ea42 0103 	orr.w	r1, r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	430a      	orrs	r2, r1
 800e486:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	431a      	orrs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e496:	431a      	orrs	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	431a      	orrs	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	431a      	orrs	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4c6:	ea42 0103 	orr.w	r1, r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	430a      	orrs	r2, r1
 800e4d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d113      	bne.n	800e506 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e504:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f022 0201 	bic.w	r2, r2, #1
 800e514:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00a      	beq.n	800e538 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	40013000 	.word	0x40013000
 800e558:	40003800 	.word	0x40003800
 800e55c:	40003c00 	.word	0x40003c00

0800e560 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e56c:	095b      	lsrs	r3, r3, #5
 800e56e:	3301      	adds	r3, #1
 800e570:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	3307      	adds	r3, #7
 800e57e:	08db      	lsrs	r3, r3, #3
 800e580:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	fb02 f303 	mul.w	r3, r2, r3
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d101      	bne.n	800e5a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e049      	b.n	800e63c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d106      	bne.n	800e5c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f8 fb1f 	bl	8006c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2202      	movs	r2, #2
 800e5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f000 fd0d 	bl	800eff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2201      	movs	r2, #1
 800e62e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b01      	cmp	r3, #1
 800e656:	d001      	beq.n	800e65c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	e05e      	b.n	800e71a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2202      	movs	r2, #2
 800e660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68da      	ldr	r2, [r3, #12]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a2b      	ldr	r2, [pc, #172]	; (800e728 <HAL_TIM_Base_Start_IT+0xe4>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d02c      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e686:	d027      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a27      	ldr	r2, [pc, #156]	; (800e72c <HAL_TIM_Base_Start_IT+0xe8>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d022      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a26      	ldr	r2, [pc, #152]	; (800e730 <HAL_TIM_Base_Start_IT+0xec>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d01d      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a24      	ldr	r2, [pc, #144]	; (800e734 <HAL_TIM_Base_Start_IT+0xf0>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d018      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a23      	ldr	r2, [pc, #140]	; (800e738 <HAL_TIM_Base_Start_IT+0xf4>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d013      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a21      	ldr	r2, [pc, #132]	; (800e73c <HAL_TIM_Base_Start_IT+0xf8>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d00e      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a20      	ldr	r2, [pc, #128]	; (800e740 <HAL_TIM_Base_Start_IT+0xfc>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d009      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a1e      	ldr	r2, [pc, #120]	; (800e744 <HAL_TIM_Base_Start_IT+0x100>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d004      	beq.n	800e6d8 <HAL_TIM_Base_Start_IT+0x94>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a1d      	ldr	r2, [pc, #116]	; (800e748 <HAL_TIM_Base_Start_IT+0x104>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d115      	bne.n	800e704 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	689a      	ldr	r2, [r3, #8]
 800e6de:	4b1b      	ldr	r3, [pc, #108]	; (800e74c <HAL_TIM_Base_Start_IT+0x108>)
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b06      	cmp	r3, #6
 800e6e8:	d015      	beq.n	800e716 <HAL_TIM_Base_Start_IT+0xd2>
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6f0:	d011      	beq.n	800e716 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f042 0201 	orr.w	r2, r2, #1
 800e700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e702:	e008      	b.n	800e716 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f042 0201 	orr.w	r2, r2, #1
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	e000      	b.n	800e718 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	40010000 	.word	0x40010000
 800e72c:	40000400 	.word	0x40000400
 800e730:	40000800 	.word	0x40000800
 800e734:	40000c00 	.word	0x40000c00
 800e738:	40010400 	.word	0x40010400
 800e73c:	40001800 	.word	0x40001800
 800e740:	40014000 	.word	0x40014000
 800e744:	4000e000 	.word	0x4000e000
 800e748:	4000e400 	.word	0x4000e400
 800e74c:	00010007 	.word	0x00010007

0800e750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	e049      	b.n	800e7f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7f8 faf4 	bl	8006d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2202      	movs	r2, #2
 800e780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3304      	adds	r3, #4
 800e78c:	4619      	mov	r1, r3
 800e78e:	4610      	mov	r0, r2
 800e790:	f000 fc30 	bl	800eff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	e08f      	b.n	800e934 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d106      	bne.n	800e82e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7f8 f8f7 	bl	8006a1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2202      	movs	r2, #2
 800e832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6899      	ldr	r1, [r3, #8]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	4b3e      	ldr	r3, [pc, #248]	; (800e93c <HAL_TIM_Encoder_Init+0x13c>)
 800e842:	400b      	ands	r3, r1
 800e844:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3304      	adds	r3, #4
 800e84e:	4619      	mov	r1, r3
 800e850:	4610      	mov	r0, r2
 800e852:	f000 fbcf 	bl	800eff4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	6a1b      	ldr	r3, [r3, #32]
 800e86c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	4313      	orrs	r3, r2
 800e876:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4b31      	ldr	r3, [pc, #196]	; (800e940 <HAL_TIM_Encoder_Init+0x140>)
 800e87c:	4013      	ands	r3, r2
 800e87e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	4313      	orrs	r3, r2
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4313      	orrs	r3, r2
 800e890:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	4b2b      	ldr	r3, [pc, #172]	; (800e944 <HAL_TIM_Encoder_Init+0x144>)
 800e896:	4013      	ands	r3, r2
 800e898:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e89a:	693a      	ldr	r2, [r7, #16]
 800e89c:	4b2a      	ldr	r3, [pc, #168]	; (800e948 <HAL_TIM_Encoder_Init+0x148>)
 800e89e:	4013      	ands	r3, r2
 800e8a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	68da      	ldr	r2, [r3, #12]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	69db      	ldr	r3, [r3, #28]
 800e8aa:	021b      	lsls	r3, r3, #8
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	011a      	lsls	r2, r3, #4
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	031b      	lsls	r3, r3, #12
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	693a      	ldr	r2, [r7, #16]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e8ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e8d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	011b      	lsls	r3, r3, #4
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	697a      	ldr	r2, [r7, #20]
 800e8f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	693a      	ldr	r2, [r7, #16]
 800e8f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3718      	adds	r7, #24
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	fffebff8 	.word	0xfffebff8
 800e940:	fffffcfc 	.word	0xfffffcfc
 800e944:	fffff3f3 	.word	0xfffff3f3
 800e948:	ffff0f0f 	.word	0xffff0f0f

0800e94c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	f003 0302 	and.w	r3, r3, #2
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d122      	bne.n	800e9a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	f003 0302 	and.w	r3, r3, #2
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d11b      	bne.n	800e9a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f06f 0202 	mvn.w	r2, #2
 800e978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2201      	movs	r2, #1
 800e97e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fb12 	bl	800efb8 <HAL_TIM_IC_CaptureCallback>
 800e994:	e005      	b.n	800e9a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fb04 	bl	800efa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fb15 	bl	800efcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	f003 0304 	and.w	r3, r3, #4
 800e9b2:	2b04      	cmp	r3, #4
 800e9b4:	d122      	bne.n	800e9fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d11b      	bne.n	800e9fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f06f 0204 	mvn.w	r2, #4
 800e9cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2202      	movs	r2, #2
 800e9d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 fae8 	bl	800efb8 <HAL_TIM_IC_CaptureCallback>
 800e9e8:	e005      	b.n	800e9f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fada 	bl	800efa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 faeb 	bl	800efcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	f003 0308 	and.w	r3, r3, #8
 800ea06:	2b08      	cmp	r3, #8
 800ea08:	d122      	bne.n	800ea50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	f003 0308 	and.w	r3, r3, #8
 800ea14:	2b08      	cmp	r3, #8
 800ea16:	d11b      	bne.n	800ea50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f06f 0208 	mvn.w	r2, #8
 800ea20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2204      	movs	r2, #4
 800ea26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	f003 0303 	and.w	r3, r3, #3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d003      	beq.n	800ea3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 fabe 	bl	800efb8 <HAL_TIM_IC_CaptureCallback>
 800ea3c:	e005      	b.n	800ea4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fab0 	bl	800efa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fac1 	bl	800efcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	f003 0310 	and.w	r3, r3, #16
 800ea5a:	2b10      	cmp	r3, #16
 800ea5c:	d122      	bne.n	800eaa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	f003 0310 	and.w	r3, r3, #16
 800ea68:	2b10      	cmp	r3, #16
 800ea6a:	d11b      	bne.n	800eaa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f06f 0210 	mvn.w	r2, #16
 800ea74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2208      	movs	r2, #8
 800ea7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	69db      	ldr	r3, [r3, #28]
 800ea82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 fa94 	bl	800efb8 <HAL_TIM_IC_CaptureCallback>
 800ea90:	e005      	b.n	800ea9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fa86 	bl	800efa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fa97 	bl	800efcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d10e      	bne.n	800ead0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	f003 0301 	and.w	r3, r3, #1
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d107      	bne.n	800ead0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f06f 0201 	mvn.w	r2, #1
 800eac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f7 fe48 	bl	8006760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eada:	2b80      	cmp	r3, #128	; 0x80
 800eadc:	d10e      	bne.n	800eafc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae8:	2b80      	cmp	r3, #128	; 0x80
 800eaea:	d107      	bne.n	800eafc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eaf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 ffdc 	bl	800fab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb0a:	d10e      	bne.n	800eb2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb16:	2b80      	cmp	r3, #128	; 0x80
 800eb18:	d107      	bne.n	800eb2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eb22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 ffcf 	bl	800fac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb34:	2b40      	cmp	r3, #64	; 0x40
 800eb36:	d10e      	bne.n	800eb56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb42:	2b40      	cmp	r3, #64	; 0x40
 800eb44:	d107      	bne.n	800eb56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fa45 	bl	800efe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	f003 0320 	and.w	r3, r3, #32
 800eb60:	2b20      	cmp	r3, #32
 800eb62:	d10e      	bne.n	800eb82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f003 0320 	and.w	r3, r3, #32
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	d107      	bne.n	800eb82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f06f 0220 	mvn.w	r2, #32
 800eb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 ff8f 	bl	800faa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
	...

0800eb8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d101      	bne.n	800ebaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eba6:	2302      	movs	r3, #2
 800eba8:	e0ff      	b.n	800edaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b14      	cmp	r3, #20
 800ebb6:	f200 80f0 	bhi.w	800ed9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ebba:	a201      	add	r2, pc, #4	; (adr r2, 800ebc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ebbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc0:	0800ec15 	.word	0x0800ec15
 800ebc4:	0800ed9b 	.word	0x0800ed9b
 800ebc8:	0800ed9b 	.word	0x0800ed9b
 800ebcc:	0800ed9b 	.word	0x0800ed9b
 800ebd0:	0800ec55 	.word	0x0800ec55
 800ebd4:	0800ed9b 	.word	0x0800ed9b
 800ebd8:	0800ed9b 	.word	0x0800ed9b
 800ebdc:	0800ed9b 	.word	0x0800ed9b
 800ebe0:	0800ec97 	.word	0x0800ec97
 800ebe4:	0800ed9b 	.word	0x0800ed9b
 800ebe8:	0800ed9b 	.word	0x0800ed9b
 800ebec:	0800ed9b 	.word	0x0800ed9b
 800ebf0:	0800ecd7 	.word	0x0800ecd7
 800ebf4:	0800ed9b 	.word	0x0800ed9b
 800ebf8:	0800ed9b 	.word	0x0800ed9b
 800ebfc:	0800ed9b 	.word	0x0800ed9b
 800ec00:	0800ed19 	.word	0x0800ed19
 800ec04:	0800ed9b 	.word	0x0800ed9b
 800ec08:	0800ed9b 	.word	0x0800ed9b
 800ec0c:	0800ed9b 	.word	0x0800ed9b
 800ec10:	0800ed59 	.word	0x0800ed59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	68b9      	ldr	r1, [r7, #8]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 fa90 	bl	800f140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	699a      	ldr	r2, [r3, #24]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f042 0208 	orr.w	r2, r2, #8
 800ec2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	699a      	ldr	r2, [r3, #24]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f022 0204 	bic.w	r2, r2, #4
 800ec3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6999      	ldr	r1, [r3, #24]
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	691a      	ldr	r2, [r3, #16]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	430a      	orrs	r2, r1
 800ec50:	619a      	str	r2, [r3, #24]
      break;
 800ec52:	e0a5      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f000 fb00 	bl	800f260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	699a      	ldr	r2, [r3, #24]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	699a      	ldr	r2, [r3, #24]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6999      	ldr	r1, [r3, #24]
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	021a      	lsls	r2, r3, #8
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	430a      	orrs	r2, r1
 800ec92:	619a      	str	r2, [r3, #24]
      break;
 800ec94:	e084      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68b9      	ldr	r1, [r7, #8]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 fb69 	bl	800f374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69da      	ldr	r2, [r3, #28]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f042 0208 	orr.w	r2, r2, #8
 800ecb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69da      	ldr	r2, [r3, #28]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f022 0204 	bic.w	r2, r2, #4
 800ecc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	69d9      	ldr	r1, [r3, #28]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	691a      	ldr	r2, [r3, #16]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	61da      	str	r2, [r3, #28]
      break;
 800ecd4:	e064      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68b9      	ldr	r1, [r7, #8]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f000 fbd1 	bl	800f484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	69da      	ldr	r2, [r3, #28]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	69da      	ldr	r2, [r3, #28]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	69d9      	ldr	r1, [r3, #28]
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	691b      	ldr	r3, [r3, #16]
 800ed0c:	021a      	lsls	r2, r3, #8
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	61da      	str	r2, [r3, #28]
      break;
 800ed16:	e043      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68b9      	ldr	r1, [r7, #8]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 fc1a 	bl	800f558 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f042 0208 	orr.w	r2, r2, #8
 800ed32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f022 0204 	bic.w	r2, r2, #4
 800ed42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	691a      	ldr	r2, [r3, #16]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	430a      	orrs	r2, r1
 800ed54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed56:	e023      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 fc5e 	bl	800f620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	691b      	ldr	r3, [r3, #16]
 800ed8e:	021a      	lsls	r2, r3, #8
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	430a      	orrs	r2, r1
 800ed96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed98:	e002      	b.n	800eda0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ed9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop

0800edb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d101      	bne.n	800edd0 <HAL_TIM_ConfigClockSource+0x1c>
 800edcc:	2302      	movs	r3, #2
 800edce:	e0dc      	b.n	800ef8a <HAL_TIM_ConfigClockSource+0x1d6>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2202      	movs	r2, #2
 800eddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ede8:	68ba      	ldr	r2, [r7, #8]
 800edea:	4b6a      	ldr	r3, [pc, #424]	; (800ef94 <HAL_TIM_ConfigClockSource+0x1e0>)
 800edec:	4013      	ands	r3, r2
 800edee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a64      	ldr	r2, [pc, #400]	; (800ef98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	f000 80a9 	beq.w	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee0c:	4a62      	ldr	r2, [pc, #392]	; (800ef98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	f200 80ae 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee14:	4a61      	ldr	r2, [pc, #388]	; (800ef9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	f000 80a1 	beq.w	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee1c:	4a5f      	ldr	r2, [pc, #380]	; (800ef9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	f200 80a6 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee24:	4a5e      	ldr	r2, [pc, #376]	; (800efa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	f000 8099 	beq.w	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee2c:	4a5c      	ldr	r2, [pc, #368]	; (800efa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	f200 809e 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee38:	f000 8091 	beq.w	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee40:	f200 8096 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee48:	f000 8089 	beq.w	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee50:	f200 808e 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee58:	d03e      	beq.n	800eed8 <HAL_TIM_ConfigClockSource+0x124>
 800ee5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee5e:	f200 8087 	bhi.w	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee66:	f000 8086 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1c2>
 800ee6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee6e:	d87f      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee70:	2b70      	cmp	r3, #112	; 0x70
 800ee72:	d01a      	beq.n	800eeaa <HAL_TIM_ConfigClockSource+0xf6>
 800ee74:	2b70      	cmp	r3, #112	; 0x70
 800ee76:	d87b      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee78:	2b60      	cmp	r3, #96	; 0x60
 800ee7a:	d050      	beq.n	800ef1e <HAL_TIM_ConfigClockSource+0x16a>
 800ee7c:	2b60      	cmp	r3, #96	; 0x60
 800ee7e:	d877      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee80:	2b50      	cmp	r3, #80	; 0x50
 800ee82:	d03c      	beq.n	800eefe <HAL_TIM_ConfigClockSource+0x14a>
 800ee84:	2b50      	cmp	r3, #80	; 0x50
 800ee86:	d873      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee88:	2b40      	cmp	r3, #64	; 0x40
 800ee8a:	d058      	beq.n	800ef3e <HAL_TIM_ConfigClockSource+0x18a>
 800ee8c:	2b40      	cmp	r3, #64	; 0x40
 800ee8e:	d86f      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee90:	2b30      	cmp	r3, #48	; 0x30
 800ee92:	d064      	beq.n	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee94:	2b30      	cmp	r3, #48	; 0x30
 800ee96:	d86b      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee98:	2b20      	cmp	r3, #32
 800ee9a:	d060      	beq.n	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ee9c:	2b20      	cmp	r3, #32
 800ee9e:	d867      	bhi.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d05c      	beq.n	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800eea4:	2b10      	cmp	r3, #16
 800eea6:	d05a      	beq.n	800ef5e <HAL_TIM_ConfigClockSource+0x1aa>
 800eea8:	e062      	b.n	800ef70 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6818      	ldr	r0, [r3, #0]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	6899      	ldr	r1, [r3, #8]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	685a      	ldr	r2, [r3, #4]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	f000 fc95 	bl	800f7e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	609a      	str	r2, [r3, #8]
      break;
 800eed6:	e04f      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	6899      	ldr	r1, [r3, #8]
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	685a      	ldr	r2, [r3, #4]
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	f000 fc7e 	bl	800f7e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689a      	ldr	r2, [r3, #8]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eefa:	609a      	str	r2, [r3, #8]
      break;
 800eefc:	e03c      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6818      	ldr	r0, [r3, #0]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	6859      	ldr	r1, [r3, #4]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f000 fbee 	bl	800f6ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2150      	movs	r1, #80	; 0x50
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fc48 	bl	800f7ac <TIM_ITRx_SetConfig>
      break;
 800ef1c:	e02c      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	6859      	ldr	r1, [r3, #4]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f000 fc0d 	bl	800f74a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2160      	movs	r1, #96	; 0x60
 800ef36:	4618      	mov	r0, r3
 800ef38:	f000 fc38 	bl	800f7ac <TIM_ITRx_SetConfig>
      break;
 800ef3c:	e01c      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	6859      	ldr	r1, [r3, #4]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	f000 fbce 	bl	800f6ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2140      	movs	r1, #64	; 0x40
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 fc28 	bl	800f7ac <TIM_ITRx_SetConfig>
      break;
 800ef5c:	e00c      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4619      	mov	r1, r3
 800ef68:	4610      	mov	r0, r2
 800ef6a:	f000 fc1f 	bl	800f7ac <TIM_ITRx_SetConfig>
      break;
 800ef6e:	e003      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	73fb      	strb	r3, [r7, #15]
      break;
 800ef74:	e000      	b.n	800ef78 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	ffceff88 	.word	0xffceff88
 800ef98:	00100040 	.word	0x00100040
 800ef9c:	00100030 	.word	0x00100030
 800efa0:	00100020 	.word	0x00100020

0800efa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800efac:	bf00      	nop
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efc0:	bf00      	nop
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efd4:	bf00      	nop
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a44      	ldr	r2, [pc, #272]	; (800f118 <TIM_Base_SetConfig+0x124>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d013      	beq.n	800f034 <TIM_Base_SetConfig+0x40>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f012:	d00f      	beq.n	800f034 <TIM_Base_SetConfig+0x40>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a41      	ldr	r2, [pc, #260]	; (800f11c <TIM_Base_SetConfig+0x128>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d00b      	beq.n	800f034 <TIM_Base_SetConfig+0x40>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a40      	ldr	r2, [pc, #256]	; (800f120 <TIM_Base_SetConfig+0x12c>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d007      	beq.n	800f034 <TIM_Base_SetConfig+0x40>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a3f      	ldr	r2, [pc, #252]	; (800f124 <TIM_Base_SetConfig+0x130>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d003      	beq.n	800f034 <TIM_Base_SetConfig+0x40>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a3e      	ldr	r2, [pc, #248]	; (800f128 <TIM_Base_SetConfig+0x134>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d108      	bne.n	800f046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f03a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	4313      	orrs	r3, r2
 800f044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a33      	ldr	r2, [pc, #204]	; (800f118 <TIM_Base_SetConfig+0x124>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d027      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f054:	d023      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a30      	ldr	r2, [pc, #192]	; (800f11c <TIM_Base_SetConfig+0x128>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d01f      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4a2f      	ldr	r2, [pc, #188]	; (800f120 <TIM_Base_SetConfig+0x12c>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d01b      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a2e      	ldr	r2, [pc, #184]	; (800f124 <TIM_Base_SetConfig+0x130>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d017      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4a2d      	ldr	r2, [pc, #180]	; (800f128 <TIM_Base_SetConfig+0x134>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d013      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a2c      	ldr	r2, [pc, #176]	; (800f12c <TIM_Base_SetConfig+0x138>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d00f      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a2b      	ldr	r2, [pc, #172]	; (800f130 <TIM_Base_SetConfig+0x13c>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d00b      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a2a      	ldr	r2, [pc, #168]	; (800f134 <TIM_Base_SetConfig+0x140>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d007      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a29      	ldr	r2, [pc, #164]	; (800f138 <TIM_Base_SetConfig+0x144>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_Base_SetConfig+0xaa>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a28      	ldr	r2, [pc, #160]	; (800f13c <TIM_Base_SetConfig+0x148>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d108      	bne.n	800f0b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	695b      	ldr	r3, [r3, #20]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	689a      	ldr	r2, [r3, #8]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a10      	ldr	r2, [pc, #64]	; (800f118 <TIM_Base_SetConfig+0x124>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d00f      	beq.n	800f0fc <TIM_Base_SetConfig+0x108>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a12      	ldr	r2, [pc, #72]	; (800f128 <TIM_Base_SetConfig+0x134>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d00b      	beq.n	800f0fc <TIM_Base_SetConfig+0x108>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a11      	ldr	r2, [pc, #68]	; (800f12c <TIM_Base_SetConfig+0x138>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d007      	beq.n	800f0fc <TIM_Base_SetConfig+0x108>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a10      	ldr	r2, [pc, #64]	; (800f130 <TIM_Base_SetConfig+0x13c>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d003      	beq.n	800f0fc <TIM_Base_SetConfig+0x108>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a0f      	ldr	r2, [pc, #60]	; (800f134 <TIM_Base_SetConfig+0x140>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d103      	bne.n	800f104 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	691a      	ldr	r2, [r3, #16]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	615a      	str	r2, [r3, #20]
}
 800f10a:	bf00      	nop
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	40010000 	.word	0x40010000
 800f11c:	40000400 	.word	0x40000400
 800f120:	40000800 	.word	0x40000800
 800f124:	40000c00 	.word	0x40000c00
 800f128:	40010400 	.word	0x40010400
 800f12c:	40014000 	.word	0x40014000
 800f130:	40014400 	.word	0x40014400
 800f134:	40014800 	.word	0x40014800
 800f138:	4000e000 	.word	0x4000e000
 800f13c:	4000e400 	.word	0x4000e400

0800f140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	f023 0201 	bic.w	r2, r3, #1
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a1b      	ldr	r3, [r3, #32]
 800f15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	699b      	ldr	r3, [r3, #24]
 800f166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	4b37      	ldr	r3, [pc, #220]	; (800f248 <TIM_OC1_SetConfig+0x108>)
 800f16c:	4013      	ands	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f023 0303 	bic.w	r3, r3, #3
 800f176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	4313      	orrs	r3, r2
 800f180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f023 0302 	bic.w	r3, r3, #2
 800f188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	4313      	orrs	r3, r2
 800f192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a2d      	ldr	r2, [pc, #180]	; (800f24c <TIM_OC1_SetConfig+0x10c>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00f      	beq.n	800f1bc <TIM_OC1_SetConfig+0x7c>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a2c      	ldr	r2, [pc, #176]	; (800f250 <TIM_OC1_SetConfig+0x110>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d00b      	beq.n	800f1bc <TIM_OC1_SetConfig+0x7c>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a2b      	ldr	r2, [pc, #172]	; (800f254 <TIM_OC1_SetConfig+0x114>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d007      	beq.n	800f1bc <TIM_OC1_SetConfig+0x7c>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a2a      	ldr	r2, [pc, #168]	; (800f258 <TIM_OC1_SetConfig+0x118>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d003      	beq.n	800f1bc <TIM_OC1_SetConfig+0x7c>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a29      	ldr	r2, [pc, #164]	; (800f25c <TIM_OC1_SetConfig+0x11c>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d10c      	bne.n	800f1d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f023 0308 	bic.w	r3, r3, #8
 800f1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	697a      	ldr	r2, [r7, #20]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f023 0304 	bic.w	r3, r3, #4
 800f1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a1c      	ldr	r2, [pc, #112]	; (800f24c <TIM_OC1_SetConfig+0x10c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d00f      	beq.n	800f1fe <TIM_OC1_SetConfig+0xbe>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a1b      	ldr	r2, [pc, #108]	; (800f250 <TIM_OC1_SetConfig+0x110>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d00b      	beq.n	800f1fe <TIM_OC1_SetConfig+0xbe>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a1a      	ldr	r2, [pc, #104]	; (800f254 <TIM_OC1_SetConfig+0x114>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d007      	beq.n	800f1fe <TIM_OC1_SetConfig+0xbe>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a19      	ldr	r2, [pc, #100]	; (800f258 <TIM_OC1_SetConfig+0x118>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d003      	beq.n	800f1fe <TIM_OC1_SetConfig+0xbe>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a18      	ldr	r2, [pc, #96]	; (800f25c <TIM_OC1_SetConfig+0x11c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d111      	bne.n	800f222 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f20c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	4313      	orrs	r3, r2
 800f216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	4313      	orrs	r3, r2
 800f220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	621a      	str	r2, [r3, #32]
}
 800f23c:	bf00      	nop
 800f23e:	371c      	adds	r7, #28
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	fffeff8f 	.word	0xfffeff8f
 800f24c:	40010000 	.word	0x40010000
 800f250:	40010400 	.word	0x40010400
 800f254:	40014000 	.word	0x40014000
 800f258:	40014400 	.word	0x40014400
 800f25c:	40014800 	.word	0x40014800

0800f260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f260:	b480      	push	{r7}
 800f262:	b087      	sub	sp, #28
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	f023 0210 	bic.w	r2, r3, #16
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	699b      	ldr	r3, [r3, #24]
 800f286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	4b34      	ldr	r3, [pc, #208]	; (800f35c <TIM_OC2_SetConfig+0xfc>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	021b      	lsls	r3, r3, #8
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	f023 0320 	bic.w	r3, r3, #32
 800f2aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	689b      	ldr	r3, [r3, #8]
 800f2b0:	011b      	lsls	r3, r3, #4
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a29      	ldr	r2, [pc, #164]	; (800f360 <TIM_OC2_SetConfig+0x100>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d003      	beq.n	800f2c8 <TIM_OC2_SetConfig+0x68>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a28      	ldr	r2, [pc, #160]	; (800f364 <TIM_OC2_SetConfig+0x104>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d10d      	bne.n	800f2e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	011b      	lsls	r3, r3, #4
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a1e      	ldr	r2, [pc, #120]	; (800f360 <TIM_OC2_SetConfig+0x100>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d00f      	beq.n	800f30c <TIM_OC2_SetConfig+0xac>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4a1d      	ldr	r2, [pc, #116]	; (800f364 <TIM_OC2_SetConfig+0x104>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d00b      	beq.n	800f30c <TIM_OC2_SetConfig+0xac>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a1c      	ldr	r2, [pc, #112]	; (800f368 <TIM_OC2_SetConfig+0x108>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d007      	beq.n	800f30c <TIM_OC2_SetConfig+0xac>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a1b      	ldr	r2, [pc, #108]	; (800f36c <TIM_OC2_SetConfig+0x10c>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d003      	beq.n	800f30c <TIM_OC2_SetConfig+0xac>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a1a      	ldr	r2, [pc, #104]	; (800f370 <TIM_OC2_SetConfig+0x110>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d113      	bne.n	800f334 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f31a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	693a      	ldr	r2, [r7, #16]
 800f324:	4313      	orrs	r3, r2
 800f326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	693a      	ldr	r2, [r7, #16]
 800f330:	4313      	orrs	r3, r2
 800f332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	68fa      	ldr	r2, [r7, #12]
 800f33e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	685a      	ldr	r2, [r3, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	621a      	str	r2, [r3, #32]
}
 800f34e:	bf00      	nop
 800f350:	371c      	adds	r7, #28
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	feff8fff 	.word	0xfeff8fff
 800f360:	40010000 	.word	0x40010000
 800f364:	40010400 	.word	0x40010400
 800f368:	40014000 	.word	0x40014000
 800f36c:	40014400 	.word	0x40014400
 800f370:	40014800 	.word	0x40014800

0800f374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f374:	b480      	push	{r7}
 800f376:	b087      	sub	sp, #28
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a1b      	ldr	r3, [r3, #32]
 800f382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a1b      	ldr	r3, [r3, #32]
 800f38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4b33      	ldr	r3, [pc, #204]	; (800f46c <TIM_OC3_SetConfig+0xf8>)
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f023 0303 	bic.w	r3, r3, #3
 800f3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	021b      	lsls	r3, r3, #8
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a28      	ldr	r2, [pc, #160]	; (800f470 <TIM_OC3_SetConfig+0xfc>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d003      	beq.n	800f3da <TIM_OC3_SetConfig+0x66>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a27      	ldr	r2, [pc, #156]	; (800f474 <TIM_OC3_SetConfig+0x100>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d10d      	bne.n	800f3f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	021b      	lsls	r3, r3, #8
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4a1d      	ldr	r2, [pc, #116]	; (800f470 <TIM_OC3_SetConfig+0xfc>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d00f      	beq.n	800f41e <TIM_OC3_SetConfig+0xaa>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4a1c      	ldr	r2, [pc, #112]	; (800f474 <TIM_OC3_SetConfig+0x100>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d00b      	beq.n	800f41e <TIM_OC3_SetConfig+0xaa>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4a1b      	ldr	r2, [pc, #108]	; (800f478 <TIM_OC3_SetConfig+0x104>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d007      	beq.n	800f41e <TIM_OC3_SetConfig+0xaa>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4a1a      	ldr	r2, [pc, #104]	; (800f47c <TIM_OC3_SetConfig+0x108>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d003      	beq.n	800f41e <TIM_OC3_SetConfig+0xaa>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4a19      	ldr	r2, [pc, #100]	; (800f480 <TIM_OC3_SetConfig+0x10c>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d113      	bne.n	800f446 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f42c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	011b      	lsls	r3, r3, #4
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	4313      	orrs	r3, r2
 800f438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	699b      	ldr	r3, [r3, #24]
 800f43e:	011b      	lsls	r3, r3, #4
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	4313      	orrs	r3, r2
 800f444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	685a      	ldr	r2, [r3, #4]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	697a      	ldr	r2, [r7, #20]
 800f45e:	621a      	str	r2, [r3, #32]
}
 800f460:	bf00      	nop
 800f462:	371c      	adds	r7, #28
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	fffeff8f 	.word	0xfffeff8f
 800f470:	40010000 	.word	0x40010000
 800f474:	40010400 	.word	0x40010400
 800f478:	40014000 	.word	0x40014000
 800f47c:	40014400 	.word	0x40014400
 800f480:	40014800 	.word	0x40014800

0800f484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	69db      	ldr	r3, [r3, #28]
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <TIM_OC4_SetConfig+0xbc>)
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	021b      	lsls	r3, r3, #8
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	031b      	lsls	r3, r3, #12
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a19      	ldr	r2, [pc, #100]	; (800f544 <TIM_OC4_SetConfig+0xc0>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d00f      	beq.n	800f504 <TIM_OC4_SetConfig+0x80>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a18      	ldr	r2, [pc, #96]	; (800f548 <TIM_OC4_SetConfig+0xc4>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00b      	beq.n	800f504 <TIM_OC4_SetConfig+0x80>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a17      	ldr	r2, [pc, #92]	; (800f54c <TIM_OC4_SetConfig+0xc8>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d007      	beq.n	800f504 <TIM_OC4_SetConfig+0x80>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a16      	ldr	r2, [pc, #88]	; (800f550 <TIM_OC4_SetConfig+0xcc>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d003      	beq.n	800f504 <TIM_OC4_SetConfig+0x80>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a15      	ldr	r2, [pc, #84]	; (800f554 <TIM_OC4_SetConfig+0xd0>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d109      	bne.n	800f518 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f50a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	019b      	lsls	r3, r3, #6
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	4313      	orrs	r3, r2
 800f516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	697a      	ldr	r2, [r7, #20]
 800f51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	621a      	str	r2, [r3, #32]
}
 800f532:	bf00      	nop
 800f534:	371c      	adds	r7, #28
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	feff8fff 	.word	0xfeff8fff
 800f544:	40010000 	.word	0x40010000
 800f548:	40010400 	.word	0x40010400
 800f54c:	40014000 	.word	0x40014000
 800f550:	40014400 	.word	0x40014400
 800f554:	40014800 	.word	0x40014800

0800f558 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f558:	b480      	push	{r7}
 800f55a:	b087      	sub	sp, #28
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a1b      	ldr	r3, [r3, #32]
 800f566:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	4b21      	ldr	r3, [pc, #132]	; (800f608 <TIM_OC5_SetConfig+0xb0>)
 800f584:	4013      	ands	r3, r2
 800f586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	4313      	orrs	r3, r2
 800f590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f598:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	041b      	lsls	r3, r3, #16
 800f5a0:	693a      	ldr	r2, [r7, #16]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a18      	ldr	r2, [pc, #96]	; (800f60c <TIM_OC5_SetConfig+0xb4>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d00f      	beq.n	800f5ce <TIM_OC5_SetConfig+0x76>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a17      	ldr	r2, [pc, #92]	; (800f610 <TIM_OC5_SetConfig+0xb8>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d00b      	beq.n	800f5ce <TIM_OC5_SetConfig+0x76>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a16      	ldr	r2, [pc, #88]	; (800f614 <TIM_OC5_SetConfig+0xbc>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d007      	beq.n	800f5ce <TIM_OC5_SetConfig+0x76>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a15      	ldr	r2, [pc, #84]	; (800f618 <TIM_OC5_SetConfig+0xc0>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d003      	beq.n	800f5ce <TIM_OC5_SetConfig+0x76>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a14      	ldr	r2, [pc, #80]	; (800f61c <TIM_OC5_SetConfig+0xc4>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d109      	bne.n	800f5e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	021b      	lsls	r3, r3, #8
 800f5dc:	697a      	ldr	r2, [r7, #20]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	621a      	str	r2, [r3, #32]
}
 800f5fc:	bf00      	nop
 800f5fe:	371c      	adds	r7, #28
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	fffeff8f 	.word	0xfffeff8f
 800f60c:	40010000 	.word	0x40010000
 800f610:	40010400 	.word	0x40010400
 800f614:	40014000 	.word	0x40014000
 800f618:	40014400 	.word	0x40014400
 800f61c:	40014800 	.word	0x40014800

0800f620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a1b      	ldr	r3, [r3, #32]
 800f62e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	4b22      	ldr	r3, [pc, #136]	; (800f6d4 <TIM_OC6_SetConfig+0xb4>)
 800f64c:	4013      	ands	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	021b      	lsls	r3, r3, #8
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	4313      	orrs	r3, r2
 800f65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	689b      	ldr	r3, [r3, #8]
 800f668:	051b      	lsls	r3, r3, #20
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	4313      	orrs	r3, r2
 800f66e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a19      	ldr	r2, [pc, #100]	; (800f6d8 <TIM_OC6_SetConfig+0xb8>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d00f      	beq.n	800f698 <TIM_OC6_SetConfig+0x78>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a18      	ldr	r2, [pc, #96]	; (800f6dc <TIM_OC6_SetConfig+0xbc>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d00b      	beq.n	800f698 <TIM_OC6_SetConfig+0x78>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a17      	ldr	r2, [pc, #92]	; (800f6e0 <TIM_OC6_SetConfig+0xc0>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d007      	beq.n	800f698 <TIM_OC6_SetConfig+0x78>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a16      	ldr	r2, [pc, #88]	; (800f6e4 <TIM_OC6_SetConfig+0xc4>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d003      	beq.n	800f698 <TIM_OC6_SetConfig+0x78>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a15      	ldr	r2, [pc, #84]	; (800f6e8 <TIM_OC6_SetConfig+0xc8>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d109      	bne.n	800f6ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f69e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	029b      	lsls	r3, r3, #10
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	621a      	str	r2, [r3, #32]
}
 800f6c6:	bf00      	nop
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	feff8fff 	.word	0xfeff8fff
 800f6d8:	40010000 	.word	0x40010000
 800f6dc:	40010400 	.word	0x40010400
 800f6e0:	40014000 	.word	0x40014000
 800f6e4:	40014400 	.word	0x40014400
 800f6e8:	40014800 	.word	0x40014800

0800f6ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b087      	sub	sp, #28
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6a1b      	ldr	r3, [r3, #32]
 800f6fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	f023 0201 	bic.w	r2, r3, #1
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	4313      	orrs	r3, r2
 800f720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f023 030a 	bic.w	r3, r3, #10
 800f728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	621a      	str	r2, [r3, #32]
}
 800f73e:	bf00      	nop
 800f740:	371c      	adds	r7, #28
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b087      	sub	sp, #28
 800f74e:	af00      	add	r7, sp, #0
 800f750:	60f8      	str	r0, [r7, #12]
 800f752:	60b9      	str	r1, [r7, #8]
 800f754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	f023 0210 	bic.w	r2, r3, #16
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6a1b      	ldr	r3, [r3, #32]
 800f76c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	031b      	lsls	r3, r3, #12
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	011b      	lsls	r3, r3, #4
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	4313      	orrs	r3, r2
 800f790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	697a      	ldr	r2, [r7, #20]
 800f796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	621a      	str	r2, [r3, #32]
}
 800f79e:	bf00      	nop
 800f7a0:	371c      	adds	r7, #28
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
	...

0800f7ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	4b09      	ldr	r3, [pc, #36]	; (800f7e4 <TIM_ITRx_SetConfig+0x38>)
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	f043 0307 	orr.w	r3, r3, #7
 800f7ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	609a      	str	r2, [r3, #8]
}
 800f7d6:	bf00      	nop
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	ffcfff8f 	.word	0xffcfff8f

0800f7e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	021a      	lsls	r2, r3, #8
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	431a      	orrs	r2, r3
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	4313      	orrs	r3, r2
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	4313      	orrs	r3, r2
 800f814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	609a      	str	r2, [r3, #8]
}
 800f81c:	bf00      	nop
 800f81e:	371c      	adds	r7, #28
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d101      	bne.n	800f840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f83c:	2302      	movs	r3, #2
 800f83e:	e077      	b.n	800f930 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2202      	movs	r2, #2
 800f84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a35      	ldr	r2, [pc, #212]	; (800f93c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d004      	beq.n	800f874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a34      	ldr	r2, [pc, #208]	; (800f940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d108      	bne.n	800f886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f87a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	4313      	orrs	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f88c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	4313      	orrs	r3, r2
 800f896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a25      	ldr	r2, [pc, #148]	; (800f93c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d02c      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8b2:	d027      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a22      	ldr	r2, [pc, #136]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d022      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a21      	ldr	r2, [pc, #132]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d01d      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a1f      	ldr	r2, [pc, #124]	; (800f94c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d018      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a1a      	ldr	r2, [pc, #104]	; (800f940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d013      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a1b      	ldr	r2, [pc, #108]	; (800f950 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d00e      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a1a      	ldr	r2, [pc, #104]	; (800f954 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d009      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a18      	ldr	r2, [pc, #96]	; (800f958 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d004      	beq.n	800f904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a17      	ldr	r2, [pc, #92]	; (800f95c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d10c      	bne.n	800f91e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f90a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	4313      	orrs	r3, r2
 800f914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	40010000 	.word	0x40010000
 800f940:	40010400 	.word	0x40010400
 800f944:	40000400 	.word	0x40000400
 800f948:	40000800 	.word	0x40000800
 800f94c:	40000c00 	.word	0x40000c00
 800f950:	40001800 	.word	0x40001800
 800f954:	40014000 	.word	0x40014000
 800f958:	4000e000 	.word	0x4000e000
 800f95c:	4000e400 	.word	0x4000e400

0800f960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f96a:	2300      	movs	r3, #0
 800f96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f974:	2b01      	cmp	r3, #1
 800f976:	d101      	bne.n	800f97c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f978:	2302      	movs	r3, #2
 800f97a:	e087      	b.n	800fa8c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	4313      	orrs	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	699b      	ldr	r3, [r3, #24]
 800f9f0:	041b      	lsls	r3, r3, #16
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a27      	ldr	r2, [pc, #156]	; (800fa98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d004      	beq.n	800fa0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a25      	ldr	r2, [pc, #148]	; (800fa9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d106      	bne.n	800fa18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	69db      	ldr	r3, [r3, #28]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a1e      	ldr	r2, [pc, #120]	; (800fa98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d004      	beq.n	800fa2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a1d      	ldr	r2, [pc, #116]	; (800fa9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d126      	bne.n	800fa7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa36:	051b      	lsls	r3, r3, #20
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	6a1b      	ldr	r3, [r3, #32]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	4313      	orrs	r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a0e      	ldr	r2, [pc, #56]	; (800fa98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d004      	beq.n	800fa6c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a0d      	ldr	r2, [pc, #52]	; (800fa9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d106      	bne.n	800fa7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa76:	4313      	orrs	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3714      	adds	r7, #20
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	40010000 	.word	0x40010000
 800fa9c:	40010400 	.word	0x40010400

0800faa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fabc:	bf00      	nop
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fad0:	bf00      	nop
 800fad2:	370c      	adds	r7, #12
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	e042      	b.n	800fb74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7f7 fa53 	bl	8006fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2224      	movs	r2, #36	; 0x24
 800fb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f022 0201 	bic.w	r2, r2, #1
 800fb1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f8c2 	bl	800fca8 <UART_SetConfig>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d101      	bne.n	800fb2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e022      	b.n	800fb74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 ff14 	bl	8010964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	685a      	ldr	r2, [r3, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	689a      	ldr	r2, [r3, #8]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f042 0201 	orr.w	r2, r2, #1
 800fb6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 ff9b 	bl	8010aa8 <UART_CheckIdleState>
 800fb72:	4603      	mov	r3, r0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b08a      	sub	sp, #40	; 0x28
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	603b      	str	r3, [r7, #0]
 800fb88:	4613      	mov	r3, r2
 800fb8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb92:	2b20      	cmp	r3, #32
 800fb94:	f040 8083 	bne.w	800fc9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <HAL_UART_Transmit+0x28>
 800fb9e:	88fb      	ldrh	r3, [r7, #6]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fba4:	2301      	movs	r3, #1
 800fba6:	e07b      	b.n	800fca0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d101      	bne.n	800fbb6 <HAL_UART_Transmit+0x3a>
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	e074      	b.n	800fca0 <HAL_UART_Transmit+0x124>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2221      	movs	r2, #33	; 0x21
 800fbca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fbce:	f7f7 fd9f 	bl	8007710 <HAL_GetTick>
 800fbd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	88fa      	ldrh	r2, [r7, #6]
 800fbd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	88fa      	ldrh	r2, [r7, #6]
 800fbe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbec:	d108      	bne.n	800fc00 <HAL_UART_Transmit+0x84>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d104      	bne.n	800fc00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	61bb      	str	r3, [r7, #24]
 800fbfe:	e003      	b.n	800fc08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800fc10:	e02c      	b.n	800fc6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	2180      	movs	r1, #128	; 0x80
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f000 ff8e 	bl	8010b3e <UART_WaitOnFlagUntilTimeout>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d001      	beq.n	800fc2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc28:	2303      	movs	r3, #3
 800fc2a:	e039      	b.n	800fca0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10b      	bne.n	800fc4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	461a      	mov	r2, r3
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	3302      	adds	r3, #2
 800fc46:	61bb      	str	r3, [r7, #24]
 800fc48:	e007      	b.n	800fc5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	781a      	ldrb	r2, [r3, #0]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	3301      	adds	r3, #1
 800fc58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	3b01      	subs	r3, #1
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1cc      	bne.n	800fc12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	2140      	movs	r1, #64	; 0x40
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	f000 ff5b 	bl	8010b3e <UART_WaitOnFlagUntilTimeout>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d001      	beq.n	800fc92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc8e:	2303      	movs	r3, #3
 800fc90:	e006      	b.n	800fca0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2220      	movs	r2, #32
 800fc96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e000      	b.n	800fca0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fc9e:	2302      	movs	r3, #2
  }
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3720      	adds	r7, #32
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fca8:	b5b0      	push	{r4, r5, r7, lr}
 800fcaa:	b08e      	sub	sp, #56	; 0x38
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	689a      	ldr	r2, [r3, #8]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	431a      	orrs	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	431a      	orrs	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	4313      	orrs	r3, r2
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	4bbf      	ldr	r3, [pc, #764]	; (800ffd4 <UART_SetConfig+0x32c>)
 800fcd6:	4013      	ands	r3, r2
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcde:	430b      	orrs	r3, r1
 800fce0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	68da      	ldr	r2, [r3, #12]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	430a      	orrs	r2, r1
 800fcf6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	699b      	ldr	r3, [r3, #24]
 800fcfc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4ab5      	ldr	r2, [pc, #724]	; (800ffd8 <UART_SetConfig+0x330>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d004      	beq.n	800fd12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689a      	ldr	r2, [r3, #8]
 800fd18:	4bb0      	ldr	r3, [pc, #704]	; (800ffdc <UART_SetConfig+0x334>)
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	6812      	ldr	r2, [r2, #0]
 800fd20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd22:	430b      	orrs	r3, r1
 800fd24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2c:	f023 010f 	bic.w	r1, r3, #15
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	430a      	orrs	r2, r1
 800fd3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4aa7      	ldr	r2, [pc, #668]	; (800ffe0 <UART_SetConfig+0x338>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d176      	bne.n	800fe34 <UART_SetConfig+0x18c>
 800fd46:	4ba7      	ldr	r3, [pc, #668]	; (800ffe4 <UART_SetConfig+0x33c>)
 800fd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd4e:	2b28      	cmp	r3, #40	; 0x28
 800fd50:	d86c      	bhi.n	800fe2c <UART_SetConfig+0x184>
 800fd52:	a201      	add	r2, pc, #4	; (adr r2, 800fd58 <UART_SetConfig+0xb0>)
 800fd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd58:	0800fdfd 	.word	0x0800fdfd
 800fd5c:	0800fe2d 	.word	0x0800fe2d
 800fd60:	0800fe2d 	.word	0x0800fe2d
 800fd64:	0800fe2d 	.word	0x0800fe2d
 800fd68:	0800fe2d 	.word	0x0800fe2d
 800fd6c:	0800fe2d 	.word	0x0800fe2d
 800fd70:	0800fe2d 	.word	0x0800fe2d
 800fd74:	0800fe2d 	.word	0x0800fe2d
 800fd78:	0800fe05 	.word	0x0800fe05
 800fd7c:	0800fe2d 	.word	0x0800fe2d
 800fd80:	0800fe2d 	.word	0x0800fe2d
 800fd84:	0800fe2d 	.word	0x0800fe2d
 800fd88:	0800fe2d 	.word	0x0800fe2d
 800fd8c:	0800fe2d 	.word	0x0800fe2d
 800fd90:	0800fe2d 	.word	0x0800fe2d
 800fd94:	0800fe2d 	.word	0x0800fe2d
 800fd98:	0800fe0d 	.word	0x0800fe0d
 800fd9c:	0800fe2d 	.word	0x0800fe2d
 800fda0:	0800fe2d 	.word	0x0800fe2d
 800fda4:	0800fe2d 	.word	0x0800fe2d
 800fda8:	0800fe2d 	.word	0x0800fe2d
 800fdac:	0800fe2d 	.word	0x0800fe2d
 800fdb0:	0800fe2d 	.word	0x0800fe2d
 800fdb4:	0800fe2d 	.word	0x0800fe2d
 800fdb8:	0800fe15 	.word	0x0800fe15
 800fdbc:	0800fe2d 	.word	0x0800fe2d
 800fdc0:	0800fe2d 	.word	0x0800fe2d
 800fdc4:	0800fe2d 	.word	0x0800fe2d
 800fdc8:	0800fe2d 	.word	0x0800fe2d
 800fdcc:	0800fe2d 	.word	0x0800fe2d
 800fdd0:	0800fe2d 	.word	0x0800fe2d
 800fdd4:	0800fe2d 	.word	0x0800fe2d
 800fdd8:	0800fe1d 	.word	0x0800fe1d
 800fddc:	0800fe2d 	.word	0x0800fe2d
 800fde0:	0800fe2d 	.word	0x0800fe2d
 800fde4:	0800fe2d 	.word	0x0800fe2d
 800fde8:	0800fe2d 	.word	0x0800fe2d
 800fdec:	0800fe2d 	.word	0x0800fe2d
 800fdf0:	0800fe2d 	.word	0x0800fe2d
 800fdf4:	0800fe2d 	.word	0x0800fe2d
 800fdf8:	0800fe25 	.word	0x0800fe25
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe02:	e326      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe04:	2304      	movs	r3, #4
 800fe06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe0a:	e322      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe0c:	2308      	movs	r3, #8
 800fe0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe12:	e31e      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe14:	2310      	movs	r3, #16
 800fe16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe1a:	e31a      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe1c:	2320      	movs	r3, #32
 800fe1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe22:	e316      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe24:	2340      	movs	r3, #64	; 0x40
 800fe26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe2a:	e312      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe2c:	2380      	movs	r3, #128	; 0x80
 800fe2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe32:	e30e      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a6b      	ldr	r2, [pc, #428]	; (800ffe8 <UART_SetConfig+0x340>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d130      	bne.n	800fea0 <UART_SetConfig+0x1f8>
 800fe3e:	4b69      	ldr	r3, [pc, #420]	; (800ffe4 <UART_SetConfig+0x33c>)
 800fe40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe42:	f003 0307 	and.w	r3, r3, #7
 800fe46:	2b05      	cmp	r3, #5
 800fe48:	d826      	bhi.n	800fe98 <UART_SetConfig+0x1f0>
 800fe4a:	a201      	add	r2, pc, #4	; (adr r2, 800fe50 <UART_SetConfig+0x1a8>)
 800fe4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe50:	0800fe69 	.word	0x0800fe69
 800fe54:	0800fe71 	.word	0x0800fe71
 800fe58:	0800fe79 	.word	0x0800fe79
 800fe5c:	0800fe81 	.word	0x0800fe81
 800fe60:	0800fe89 	.word	0x0800fe89
 800fe64:	0800fe91 	.word	0x0800fe91
 800fe68:	2300      	movs	r3, #0
 800fe6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe6e:	e2f0      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe70:	2304      	movs	r3, #4
 800fe72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe76:	e2ec      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe78:	2308      	movs	r3, #8
 800fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe7e:	e2e8      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe80:	2310      	movs	r3, #16
 800fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe86:	e2e4      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe88:	2320      	movs	r3, #32
 800fe8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe8e:	e2e0      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe90:	2340      	movs	r3, #64	; 0x40
 800fe92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe96:	e2dc      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fe98:	2380      	movs	r3, #128	; 0x80
 800fe9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe9e:	e2d8      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a51      	ldr	r2, [pc, #324]	; (800ffec <UART_SetConfig+0x344>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d130      	bne.n	800ff0c <UART_SetConfig+0x264>
 800feaa:	4b4e      	ldr	r3, [pc, #312]	; (800ffe4 <UART_SetConfig+0x33c>)
 800feac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feae:	f003 0307 	and.w	r3, r3, #7
 800feb2:	2b05      	cmp	r3, #5
 800feb4:	d826      	bhi.n	800ff04 <UART_SetConfig+0x25c>
 800feb6:	a201      	add	r2, pc, #4	; (adr r2, 800febc <UART_SetConfig+0x214>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800fed5 	.word	0x0800fed5
 800fec0:	0800fedd 	.word	0x0800fedd
 800fec4:	0800fee5 	.word	0x0800fee5
 800fec8:	0800feed 	.word	0x0800feed
 800fecc:	0800fef5 	.word	0x0800fef5
 800fed0:	0800fefd 	.word	0x0800fefd
 800fed4:	2300      	movs	r3, #0
 800fed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feda:	e2ba      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fedc:	2304      	movs	r3, #4
 800fede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee2:	e2b6      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fee4:	2308      	movs	r3, #8
 800fee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feea:	e2b2      	b.n	8010452 <UART_SetConfig+0x7aa>
 800feec:	2310      	movs	r3, #16
 800feee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fef2:	e2ae      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fef4:	2320      	movs	r3, #32
 800fef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fefa:	e2aa      	b.n	8010452 <UART_SetConfig+0x7aa>
 800fefc:	2340      	movs	r3, #64	; 0x40
 800fefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff02:	e2a6      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff04:	2380      	movs	r3, #128	; 0x80
 800ff06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff0a:	e2a2      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4a37      	ldr	r2, [pc, #220]	; (800fff0 <UART_SetConfig+0x348>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d130      	bne.n	800ff78 <UART_SetConfig+0x2d0>
 800ff16:	4b33      	ldr	r3, [pc, #204]	; (800ffe4 <UART_SetConfig+0x33c>)
 800ff18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff1a:	f003 0307 	and.w	r3, r3, #7
 800ff1e:	2b05      	cmp	r3, #5
 800ff20:	d826      	bhi.n	800ff70 <UART_SetConfig+0x2c8>
 800ff22:	a201      	add	r2, pc, #4	; (adr r2, 800ff28 <UART_SetConfig+0x280>)
 800ff24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff28:	0800ff41 	.word	0x0800ff41
 800ff2c:	0800ff49 	.word	0x0800ff49
 800ff30:	0800ff51 	.word	0x0800ff51
 800ff34:	0800ff59 	.word	0x0800ff59
 800ff38:	0800ff61 	.word	0x0800ff61
 800ff3c:	0800ff69 	.word	0x0800ff69
 800ff40:	2300      	movs	r3, #0
 800ff42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff46:	e284      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff48:	2304      	movs	r3, #4
 800ff4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff4e:	e280      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff50:	2308      	movs	r3, #8
 800ff52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff56:	e27c      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff58:	2310      	movs	r3, #16
 800ff5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5e:	e278      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff60:	2320      	movs	r3, #32
 800ff62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff66:	e274      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff68:	2340      	movs	r3, #64	; 0x40
 800ff6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff6e:	e270      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff70:	2380      	movs	r3, #128	; 0x80
 800ff72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff76:	e26c      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a1d      	ldr	r2, [pc, #116]	; (800fff4 <UART_SetConfig+0x34c>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d142      	bne.n	8010008 <UART_SetConfig+0x360>
 800ff82:	4b18      	ldr	r3, [pc, #96]	; (800ffe4 <UART_SetConfig+0x33c>)
 800ff84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	2b05      	cmp	r3, #5
 800ff8c:	d838      	bhi.n	8010000 <UART_SetConfig+0x358>
 800ff8e:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <UART_SetConfig+0x2ec>)
 800ff90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff94:	0800ffad 	.word	0x0800ffad
 800ff98:	0800ffb5 	.word	0x0800ffb5
 800ff9c:	0800ffbd 	.word	0x0800ffbd
 800ffa0:	0800ffc5 	.word	0x0800ffc5
 800ffa4:	0800ffcd 	.word	0x0800ffcd
 800ffa8:	0800fff9 	.word	0x0800fff9
 800ffac:	2300      	movs	r3, #0
 800ffae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffb2:	e24e      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ffb4:	2304      	movs	r3, #4
 800ffb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffba:	e24a      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ffbc:	2308      	movs	r3, #8
 800ffbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc2:	e246      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ffc4:	2310      	movs	r3, #16
 800ffc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffca:	e242      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ffcc:	2320      	movs	r3, #32
 800ffce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffd2:	e23e      	b.n	8010452 <UART_SetConfig+0x7aa>
 800ffd4:	cfff69f3 	.word	0xcfff69f3
 800ffd8:	58000c00 	.word	0x58000c00
 800ffdc:	11fff4ff 	.word	0x11fff4ff
 800ffe0:	40011000 	.word	0x40011000
 800ffe4:	58024400 	.word	0x58024400
 800ffe8:	40004400 	.word	0x40004400
 800ffec:	40004800 	.word	0x40004800
 800fff0:	40004c00 	.word	0x40004c00
 800fff4:	40005000 	.word	0x40005000
 800fff8:	2340      	movs	r3, #64	; 0x40
 800fffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffe:	e228      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010000:	2380      	movs	r3, #128	; 0x80
 8010002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010006:	e224      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4ab1      	ldr	r2, [pc, #708]	; (80102d4 <UART_SetConfig+0x62c>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d176      	bne.n	8010100 <UART_SetConfig+0x458>
 8010012:	4bb1      	ldr	r3, [pc, #708]	; (80102d8 <UART_SetConfig+0x630>)
 8010014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801001a:	2b28      	cmp	r3, #40	; 0x28
 801001c:	d86c      	bhi.n	80100f8 <UART_SetConfig+0x450>
 801001e:	a201      	add	r2, pc, #4	; (adr r2, 8010024 <UART_SetConfig+0x37c>)
 8010020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010024:	080100c9 	.word	0x080100c9
 8010028:	080100f9 	.word	0x080100f9
 801002c:	080100f9 	.word	0x080100f9
 8010030:	080100f9 	.word	0x080100f9
 8010034:	080100f9 	.word	0x080100f9
 8010038:	080100f9 	.word	0x080100f9
 801003c:	080100f9 	.word	0x080100f9
 8010040:	080100f9 	.word	0x080100f9
 8010044:	080100d1 	.word	0x080100d1
 8010048:	080100f9 	.word	0x080100f9
 801004c:	080100f9 	.word	0x080100f9
 8010050:	080100f9 	.word	0x080100f9
 8010054:	080100f9 	.word	0x080100f9
 8010058:	080100f9 	.word	0x080100f9
 801005c:	080100f9 	.word	0x080100f9
 8010060:	080100f9 	.word	0x080100f9
 8010064:	080100d9 	.word	0x080100d9
 8010068:	080100f9 	.word	0x080100f9
 801006c:	080100f9 	.word	0x080100f9
 8010070:	080100f9 	.word	0x080100f9
 8010074:	080100f9 	.word	0x080100f9
 8010078:	080100f9 	.word	0x080100f9
 801007c:	080100f9 	.word	0x080100f9
 8010080:	080100f9 	.word	0x080100f9
 8010084:	080100e1 	.word	0x080100e1
 8010088:	080100f9 	.word	0x080100f9
 801008c:	080100f9 	.word	0x080100f9
 8010090:	080100f9 	.word	0x080100f9
 8010094:	080100f9 	.word	0x080100f9
 8010098:	080100f9 	.word	0x080100f9
 801009c:	080100f9 	.word	0x080100f9
 80100a0:	080100f9 	.word	0x080100f9
 80100a4:	080100e9 	.word	0x080100e9
 80100a8:	080100f9 	.word	0x080100f9
 80100ac:	080100f9 	.word	0x080100f9
 80100b0:	080100f9 	.word	0x080100f9
 80100b4:	080100f9 	.word	0x080100f9
 80100b8:	080100f9 	.word	0x080100f9
 80100bc:	080100f9 	.word	0x080100f9
 80100c0:	080100f9 	.word	0x080100f9
 80100c4:	080100f1 	.word	0x080100f1
 80100c8:	2301      	movs	r3, #1
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e1c0      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100d0:	2304      	movs	r3, #4
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e1bc      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100d8:	2308      	movs	r3, #8
 80100da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100de:	e1b8      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100e0:	2310      	movs	r3, #16
 80100e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e6:	e1b4      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100e8:	2320      	movs	r3, #32
 80100ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ee:	e1b0      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100f0:	2340      	movs	r3, #64	; 0x40
 80100f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f6:	e1ac      	b.n	8010452 <UART_SetConfig+0x7aa>
 80100f8:	2380      	movs	r3, #128	; 0x80
 80100fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100fe:	e1a8      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a75      	ldr	r2, [pc, #468]	; (80102dc <UART_SetConfig+0x634>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d130      	bne.n	801016c <UART_SetConfig+0x4c4>
 801010a:	4b73      	ldr	r3, [pc, #460]	; (80102d8 <UART_SetConfig+0x630>)
 801010c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801010e:	f003 0307 	and.w	r3, r3, #7
 8010112:	2b05      	cmp	r3, #5
 8010114:	d826      	bhi.n	8010164 <UART_SetConfig+0x4bc>
 8010116:	a201      	add	r2, pc, #4	; (adr r2, 801011c <UART_SetConfig+0x474>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	08010135 	.word	0x08010135
 8010120:	0801013d 	.word	0x0801013d
 8010124:	08010145 	.word	0x08010145
 8010128:	0801014d 	.word	0x0801014d
 801012c:	08010155 	.word	0x08010155
 8010130:	0801015d 	.word	0x0801015d
 8010134:	2300      	movs	r3, #0
 8010136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013a:	e18a      	b.n	8010452 <UART_SetConfig+0x7aa>
 801013c:	2304      	movs	r3, #4
 801013e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010142:	e186      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010144:	2308      	movs	r3, #8
 8010146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014a:	e182      	b.n	8010452 <UART_SetConfig+0x7aa>
 801014c:	2310      	movs	r3, #16
 801014e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010152:	e17e      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010154:	2320      	movs	r3, #32
 8010156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015a:	e17a      	b.n	8010452 <UART_SetConfig+0x7aa>
 801015c:	2340      	movs	r3, #64	; 0x40
 801015e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010162:	e176      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010164:	2380      	movs	r3, #128	; 0x80
 8010166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801016a:	e172      	b.n	8010452 <UART_SetConfig+0x7aa>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a5b      	ldr	r2, [pc, #364]	; (80102e0 <UART_SetConfig+0x638>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d130      	bne.n	80101d8 <UART_SetConfig+0x530>
 8010176:	4b58      	ldr	r3, [pc, #352]	; (80102d8 <UART_SetConfig+0x630>)
 8010178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801017a:	f003 0307 	and.w	r3, r3, #7
 801017e:	2b05      	cmp	r3, #5
 8010180:	d826      	bhi.n	80101d0 <UART_SetConfig+0x528>
 8010182:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <UART_SetConfig+0x4e0>)
 8010184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010188:	080101a1 	.word	0x080101a1
 801018c:	080101a9 	.word	0x080101a9
 8010190:	080101b1 	.word	0x080101b1
 8010194:	080101b9 	.word	0x080101b9
 8010198:	080101c1 	.word	0x080101c1
 801019c:	080101c9 	.word	0x080101c9
 80101a0:	2300      	movs	r3, #0
 80101a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a6:	e154      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101a8:	2304      	movs	r3, #4
 80101aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ae:	e150      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101b0:	2308      	movs	r3, #8
 80101b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b6:	e14c      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101b8:	2310      	movs	r3, #16
 80101ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101be:	e148      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101c0:	2320      	movs	r3, #32
 80101c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101c6:	e144      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101c8:	2340      	movs	r3, #64	; 0x40
 80101ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ce:	e140      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101d0:	2380      	movs	r3, #128	; 0x80
 80101d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101d6:	e13c      	b.n	8010452 <UART_SetConfig+0x7aa>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a41      	ldr	r2, [pc, #260]	; (80102e4 <UART_SetConfig+0x63c>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	f040 8082 	bne.w	80102e8 <UART_SetConfig+0x640>
 80101e4:	4b3c      	ldr	r3, [pc, #240]	; (80102d8 <UART_SetConfig+0x630>)
 80101e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80101ec:	2b28      	cmp	r3, #40	; 0x28
 80101ee:	d86d      	bhi.n	80102cc <UART_SetConfig+0x624>
 80101f0:	a201      	add	r2, pc, #4	; (adr r2, 80101f8 <UART_SetConfig+0x550>)
 80101f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f6:	bf00      	nop
 80101f8:	0801029d 	.word	0x0801029d
 80101fc:	080102cd 	.word	0x080102cd
 8010200:	080102cd 	.word	0x080102cd
 8010204:	080102cd 	.word	0x080102cd
 8010208:	080102cd 	.word	0x080102cd
 801020c:	080102cd 	.word	0x080102cd
 8010210:	080102cd 	.word	0x080102cd
 8010214:	080102cd 	.word	0x080102cd
 8010218:	080102a5 	.word	0x080102a5
 801021c:	080102cd 	.word	0x080102cd
 8010220:	080102cd 	.word	0x080102cd
 8010224:	080102cd 	.word	0x080102cd
 8010228:	080102cd 	.word	0x080102cd
 801022c:	080102cd 	.word	0x080102cd
 8010230:	080102cd 	.word	0x080102cd
 8010234:	080102cd 	.word	0x080102cd
 8010238:	080102ad 	.word	0x080102ad
 801023c:	080102cd 	.word	0x080102cd
 8010240:	080102cd 	.word	0x080102cd
 8010244:	080102cd 	.word	0x080102cd
 8010248:	080102cd 	.word	0x080102cd
 801024c:	080102cd 	.word	0x080102cd
 8010250:	080102cd 	.word	0x080102cd
 8010254:	080102cd 	.word	0x080102cd
 8010258:	080102b5 	.word	0x080102b5
 801025c:	080102cd 	.word	0x080102cd
 8010260:	080102cd 	.word	0x080102cd
 8010264:	080102cd 	.word	0x080102cd
 8010268:	080102cd 	.word	0x080102cd
 801026c:	080102cd 	.word	0x080102cd
 8010270:	080102cd 	.word	0x080102cd
 8010274:	080102cd 	.word	0x080102cd
 8010278:	080102bd 	.word	0x080102bd
 801027c:	080102cd 	.word	0x080102cd
 8010280:	080102cd 	.word	0x080102cd
 8010284:	080102cd 	.word	0x080102cd
 8010288:	080102cd 	.word	0x080102cd
 801028c:	080102cd 	.word	0x080102cd
 8010290:	080102cd 	.word	0x080102cd
 8010294:	080102cd 	.word	0x080102cd
 8010298:	080102c5 	.word	0x080102c5
 801029c:	2301      	movs	r3, #1
 801029e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102a2:	e0d6      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102a4:	2304      	movs	r3, #4
 80102a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102aa:	e0d2      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102ac:	2308      	movs	r3, #8
 80102ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102b2:	e0ce      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102b4:	2310      	movs	r3, #16
 80102b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ba:	e0ca      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102bc:	2320      	movs	r3, #32
 80102be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c2:	e0c6      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102c4:	2340      	movs	r3, #64	; 0x40
 80102c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ca:	e0c2      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102cc:	2380      	movs	r3, #128	; 0x80
 80102ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d2:	e0be      	b.n	8010452 <UART_SetConfig+0x7aa>
 80102d4:	40011400 	.word	0x40011400
 80102d8:	58024400 	.word	0x58024400
 80102dc:	40007800 	.word	0x40007800
 80102e0:	40007c00 	.word	0x40007c00
 80102e4:	40011800 	.word	0x40011800
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4aad      	ldr	r2, [pc, #692]	; (80105a4 <UART_SetConfig+0x8fc>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d176      	bne.n	80103e0 <UART_SetConfig+0x738>
 80102f2:	4bad      	ldr	r3, [pc, #692]	; (80105a8 <UART_SetConfig+0x900>)
 80102f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80102fa:	2b28      	cmp	r3, #40	; 0x28
 80102fc:	d86c      	bhi.n	80103d8 <UART_SetConfig+0x730>
 80102fe:	a201      	add	r2, pc, #4	; (adr r2, 8010304 <UART_SetConfig+0x65c>)
 8010300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010304:	080103a9 	.word	0x080103a9
 8010308:	080103d9 	.word	0x080103d9
 801030c:	080103d9 	.word	0x080103d9
 8010310:	080103d9 	.word	0x080103d9
 8010314:	080103d9 	.word	0x080103d9
 8010318:	080103d9 	.word	0x080103d9
 801031c:	080103d9 	.word	0x080103d9
 8010320:	080103d9 	.word	0x080103d9
 8010324:	080103b1 	.word	0x080103b1
 8010328:	080103d9 	.word	0x080103d9
 801032c:	080103d9 	.word	0x080103d9
 8010330:	080103d9 	.word	0x080103d9
 8010334:	080103d9 	.word	0x080103d9
 8010338:	080103d9 	.word	0x080103d9
 801033c:	080103d9 	.word	0x080103d9
 8010340:	080103d9 	.word	0x080103d9
 8010344:	080103b9 	.word	0x080103b9
 8010348:	080103d9 	.word	0x080103d9
 801034c:	080103d9 	.word	0x080103d9
 8010350:	080103d9 	.word	0x080103d9
 8010354:	080103d9 	.word	0x080103d9
 8010358:	080103d9 	.word	0x080103d9
 801035c:	080103d9 	.word	0x080103d9
 8010360:	080103d9 	.word	0x080103d9
 8010364:	080103c1 	.word	0x080103c1
 8010368:	080103d9 	.word	0x080103d9
 801036c:	080103d9 	.word	0x080103d9
 8010370:	080103d9 	.word	0x080103d9
 8010374:	080103d9 	.word	0x080103d9
 8010378:	080103d9 	.word	0x080103d9
 801037c:	080103d9 	.word	0x080103d9
 8010380:	080103d9 	.word	0x080103d9
 8010384:	080103c9 	.word	0x080103c9
 8010388:	080103d9 	.word	0x080103d9
 801038c:	080103d9 	.word	0x080103d9
 8010390:	080103d9 	.word	0x080103d9
 8010394:	080103d9 	.word	0x080103d9
 8010398:	080103d9 	.word	0x080103d9
 801039c:	080103d9 	.word	0x080103d9
 80103a0:	080103d9 	.word	0x080103d9
 80103a4:	080103d1 	.word	0x080103d1
 80103a8:	2301      	movs	r3, #1
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e050      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103b0:	2304      	movs	r3, #4
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e04c      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103b8:	2308      	movs	r3, #8
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e048      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103c0:	2310      	movs	r3, #16
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	e044      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103c8:	2320      	movs	r3, #32
 80103ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ce:	e040      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103d0:	2340      	movs	r3, #64	; 0x40
 80103d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103d6:	e03c      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103d8:	2380      	movs	r3, #128	; 0x80
 80103da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103de:	e038      	b.n	8010452 <UART_SetConfig+0x7aa>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a71      	ldr	r2, [pc, #452]	; (80105ac <UART_SetConfig+0x904>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d130      	bne.n	801044c <UART_SetConfig+0x7a4>
 80103ea:	4b6f      	ldr	r3, [pc, #444]	; (80105a8 <UART_SetConfig+0x900>)
 80103ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ee:	f003 0307 	and.w	r3, r3, #7
 80103f2:	2b05      	cmp	r3, #5
 80103f4:	d826      	bhi.n	8010444 <UART_SetConfig+0x79c>
 80103f6:	a201      	add	r2, pc, #4	; (adr r2, 80103fc <UART_SetConfig+0x754>)
 80103f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fc:	08010415 	.word	0x08010415
 8010400:	0801041d 	.word	0x0801041d
 8010404:	08010425 	.word	0x08010425
 8010408:	0801042d 	.word	0x0801042d
 801040c:	08010435 	.word	0x08010435
 8010410:	0801043d 	.word	0x0801043d
 8010414:	2302      	movs	r3, #2
 8010416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801041a:	e01a      	b.n	8010452 <UART_SetConfig+0x7aa>
 801041c:	2304      	movs	r3, #4
 801041e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010422:	e016      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010424:	2308      	movs	r3, #8
 8010426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801042a:	e012      	b.n	8010452 <UART_SetConfig+0x7aa>
 801042c:	2310      	movs	r3, #16
 801042e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010432:	e00e      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010434:	2320      	movs	r3, #32
 8010436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801043a:	e00a      	b.n	8010452 <UART_SetConfig+0x7aa>
 801043c:	2340      	movs	r3, #64	; 0x40
 801043e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010442:	e006      	b.n	8010452 <UART_SetConfig+0x7aa>
 8010444:	2380      	movs	r3, #128	; 0x80
 8010446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801044a:	e002      	b.n	8010452 <UART_SetConfig+0x7aa>
 801044c:	2380      	movs	r3, #128	; 0x80
 801044e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a55      	ldr	r2, [pc, #340]	; (80105ac <UART_SetConfig+0x904>)
 8010458:	4293      	cmp	r3, r2
 801045a:	f040 80f0 	bne.w	801063e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801045e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010462:	2b20      	cmp	r3, #32
 8010464:	dc46      	bgt.n	80104f4 <UART_SetConfig+0x84c>
 8010466:	2b02      	cmp	r3, #2
 8010468:	db75      	blt.n	8010556 <UART_SetConfig+0x8ae>
 801046a:	3b02      	subs	r3, #2
 801046c:	2b1e      	cmp	r3, #30
 801046e:	d872      	bhi.n	8010556 <UART_SetConfig+0x8ae>
 8010470:	a201      	add	r2, pc, #4	; (adr r2, 8010478 <UART_SetConfig+0x7d0>)
 8010472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010476:	bf00      	nop
 8010478:	080104fb 	.word	0x080104fb
 801047c:	08010557 	.word	0x08010557
 8010480:	08010503 	.word	0x08010503
 8010484:	08010557 	.word	0x08010557
 8010488:	08010557 	.word	0x08010557
 801048c:	08010557 	.word	0x08010557
 8010490:	08010513 	.word	0x08010513
 8010494:	08010557 	.word	0x08010557
 8010498:	08010557 	.word	0x08010557
 801049c:	08010557 	.word	0x08010557
 80104a0:	08010557 	.word	0x08010557
 80104a4:	08010557 	.word	0x08010557
 80104a8:	08010557 	.word	0x08010557
 80104ac:	08010557 	.word	0x08010557
 80104b0:	08010523 	.word	0x08010523
 80104b4:	08010557 	.word	0x08010557
 80104b8:	08010557 	.word	0x08010557
 80104bc:	08010557 	.word	0x08010557
 80104c0:	08010557 	.word	0x08010557
 80104c4:	08010557 	.word	0x08010557
 80104c8:	08010557 	.word	0x08010557
 80104cc:	08010557 	.word	0x08010557
 80104d0:	08010557 	.word	0x08010557
 80104d4:	08010557 	.word	0x08010557
 80104d8:	08010557 	.word	0x08010557
 80104dc:	08010557 	.word	0x08010557
 80104e0:	08010557 	.word	0x08010557
 80104e4:	08010557 	.word	0x08010557
 80104e8:	08010557 	.word	0x08010557
 80104ec:	08010557 	.word	0x08010557
 80104f0:	08010549 	.word	0x08010549
 80104f4:	2b40      	cmp	r3, #64	; 0x40
 80104f6:	d02a      	beq.n	801054e <UART_SetConfig+0x8a6>
 80104f8:	e02d      	b.n	8010556 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104fa:	f7fd f9b7 	bl	800d86c <HAL_RCCEx_GetD3PCLK1Freq>
 80104fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010500:	e02f      	b.n	8010562 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010502:	f107 0314 	add.w	r3, r7, #20
 8010506:	4618      	mov	r0, r3
 8010508:	f7fd f9c6 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010510:	e027      	b.n	8010562 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010512:	f107 0308 	add.w	r3, r7, #8
 8010516:	4618      	mov	r0, r3
 8010518:	f7fd fb12 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010520:	e01f      	b.n	8010562 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010522:	4b21      	ldr	r3, [pc, #132]	; (80105a8 <UART_SetConfig+0x900>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f003 0320 	and.w	r3, r3, #32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d009      	beq.n	8010542 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801052e:	4b1e      	ldr	r3, [pc, #120]	; (80105a8 <UART_SetConfig+0x900>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	08db      	lsrs	r3, r3, #3
 8010534:	f003 0303 	and.w	r3, r3, #3
 8010538:	4a1d      	ldr	r2, [pc, #116]	; (80105b0 <UART_SetConfig+0x908>)
 801053a:	fa22 f303 	lsr.w	r3, r2, r3
 801053e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010540:	e00f      	b.n	8010562 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8010542:	4b1b      	ldr	r3, [pc, #108]	; (80105b0 <UART_SetConfig+0x908>)
 8010544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010546:	e00c      	b.n	8010562 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010548:	4b1a      	ldr	r3, [pc, #104]	; (80105b4 <UART_SetConfig+0x90c>)
 801054a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801054c:	e009      	b.n	8010562 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801054e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010552:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010554:	e005      	b.n	8010562 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8010556:	2300      	movs	r3, #0
 8010558:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801055a:	2301      	movs	r3, #1
 801055c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	2b00      	cmp	r3, #0
 8010566:	f000 81e6 	beq.w	8010936 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056e:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <UART_SetConfig+0x910>)
 8010570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010574:	461a      	mov	r2, r3
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	fbb3 f3f2 	udiv	r3, r3, r2
 801057c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	685a      	ldr	r2, [r3, #4]
 8010582:	4613      	mov	r3, r2
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	4413      	add	r3, r2
 8010588:	6a3a      	ldr	r2, [r7, #32]
 801058a:	429a      	cmp	r2, r3
 801058c:	d305      	bcc.n	801059a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010594:	6a3a      	ldr	r2, [r7, #32]
 8010596:	429a      	cmp	r2, r3
 8010598:	d910      	bls.n	80105bc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 801059a:	2301      	movs	r3, #1
 801059c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80105a0:	e1c9      	b.n	8010936 <UART_SetConfig+0xc8e>
 80105a2:	bf00      	nop
 80105a4:	40011c00 	.word	0x40011c00
 80105a8:	58024400 	.word	0x58024400
 80105ac:	58000c00 	.word	0x58000c00
 80105b0:	03d09000 	.word	0x03d09000
 80105b4:	003d0900 	.word	0x003d0900
 80105b8:	08014468 	.word	0x08014468
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	4618      	mov	r0, r3
 80105c0:	f04f 0100 	mov.w	r1, #0
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c8:	4ac1      	ldr	r2, [pc, #772]	; (80108d0 <UART_SetConfig+0xc28>)
 80105ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	f7ef fef4 	bl	80003c0 <__aeabi_uldivmod>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	4610      	mov	r0, r2
 80105de:	4619      	mov	r1, r3
 80105e0:	f04f 0200 	mov.w	r2, #0
 80105e4:	f04f 0300 	mov.w	r3, #0
 80105e8:	020b      	lsls	r3, r1, #8
 80105ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105ee:	0202      	lsls	r2, r0, #8
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	6849      	ldr	r1, [r1, #4]
 80105f4:	0849      	lsrs	r1, r1, #1
 80105f6:	4608      	mov	r0, r1
 80105f8:	f04f 0100 	mov.w	r1, #0
 80105fc:	1814      	adds	r4, r2, r0
 80105fe:	eb43 0501 	adc.w	r5, r3, r1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	461a      	mov	r2, r3
 8010608:	f04f 0300 	mov.w	r3, #0
 801060c:	4620      	mov	r0, r4
 801060e:	4629      	mov	r1, r5
 8010610:	f7ef fed6 	bl	80003c0 <__aeabi_uldivmod>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4613      	mov	r3, r2
 801061a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010622:	d308      	bcc.n	8010636 <UART_SetConfig+0x98e>
 8010624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801062a:	d204      	bcs.n	8010636 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010632:	60da      	str	r2, [r3, #12]
 8010634:	e17f      	b.n	8010936 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801063c:	e17b      	b.n	8010936 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	69db      	ldr	r3, [r3, #28]
 8010642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010646:	f040 80bd 	bne.w	80107c4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 801064a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801064e:	2b20      	cmp	r3, #32
 8010650:	dc48      	bgt.n	80106e4 <UART_SetConfig+0xa3c>
 8010652:	2b00      	cmp	r3, #0
 8010654:	db7b      	blt.n	801074e <UART_SetConfig+0xaa6>
 8010656:	2b20      	cmp	r3, #32
 8010658:	d879      	bhi.n	801074e <UART_SetConfig+0xaa6>
 801065a:	a201      	add	r2, pc, #4	; (adr r2, 8010660 <UART_SetConfig+0x9b8>)
 801065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010660:	080106eb 	.word	0x080106eb
 8010664:	080106f3 	.word	0x080106f3
 8010668:	0801074f 	.word	0x0801074f
 801066c:	0801074f 	.word	0x0801074f
 8010670:	080106fb 	.word	0x080106fb
 8010674:	0801074f 	.word	0x0801074f
 8010678:	0801074f 	.word	0x0801074f
 801067c:	0801074f 	.word	0x0801074f
 8010680:	0801070b 	.word	0x0801070b
 8010684:	0801074f 	.word	0x0801074f
 8010688:	0801074f 	.word	0x0801074f
 801068c:	0801074f 	.word	0x0801074f
 8010690:	0801074f 	.word	0x0801074f
 8010694:	0801074f 	.word	0x0801074f
 8010698:	0801074f 	.word	0x0801074f
 801069c:	0801074f 	.word	0x0801074f
 80106a0:	0801071b 	.word	0x0801071b
 80106a4:	0801074f 	.word	0x0801074f
 80106a8:	0801074f 	.word	0x0801074f
 80106ac:	0801074f 	.word	0x0801074f
 80106b0:	0801074f 	.word	0x0801074f
 80106b4:	0801074f 	.word	0x0801074f
 80106b8:	0801074f 	.word	0x0801074f
 80106bc:	0801074f 	.word	0x0801074f
 80106c0:	0801074f 	.word	0x0801074f
 80106c4:	0801074f 	.word	0x0801074f
 80106c8:	0801074f 	.word	0x0801074f
 80106cc:	0801074f 	.word	0x0801074f
 80106d0:	0801074f 	.word	0x0801074f
 80106d4:	0801074f 	.word	0x0801074f
 80106d8:	0801074f 	.word	0x0801074f
 80106dc:	0801074f 	.word	0x0801074f
 80106e0:	08010741 	.word	0x08010741
 80106e4:	2b40      	cmp	r3, #64	; 0x40
 80106e6:	d02e      	beq.n	8010746 <UART_SetConfig+0xa9e>
 80106e8:	e031      	b.n	801074e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ea:	f7fb fd59 	bl	800c1a0 <HAL_RCC_GetPCLK1Freq>
 80106ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106f0:	e033      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106f2:	f7fb fd6b 	bl	800c1cc <HAL_RCC_GetPCLK2Freq>
 80106f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106f8:	e02f      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106fa:	f107 0314 	add.w	r3, r7, #20
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fd f8ca 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010708:	e027      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801070a:	f107 0308 	add.w	r3, r7, #8
 801070e:	4618      	mov	r0, r3
 8010710:	f7fd fa16 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010718:	e01f      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801071a:	4b6e      	ldr	r3, [pc, #440]	; (80108d4 <UART_SetConfig+0xc2c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 0320 	and.w	r3, r3, #32
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010726:	4b6b      	ldr	r3, [pc, #428]	; (80108d4 <UART_SetConfig+0xc2c>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	08db      	lsrs	r3, r3, #3
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	4a69      	ldr	r2, [pc, #420]	; (80108d8 <UART_SetConfig+0xc30>)
 8010732:	fa22 f303 	lsr.w	r3, r2, r3
 8010736:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010738:	e00f      	b.n	801075a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 801073a:	4b67      	ldr	r3, [pc, #412]	; (80108d8 <UART_SetConfig+0xc30>)
 801073c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801073e:	e00c      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010740:	4b66      	ldr	r3, [pc, #408]	; (80108dc <UART_SetConfig+0xc34>)
 8010742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010744:	e009      	b.n	801075a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801074c:	e005      	b.n	801075a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 801074e:	2300      	movs	r3, #0
 8010750:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80ea 	beq.w	8010936 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	4a5a      	ldr	r2, [pc, #360]	; (80108d0 <UART_SetConfig+0xc28>)
 8010768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801076c:	461a      	mov	r2, r3
 801076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010770:	fbb3 f3f2 	udiv	r3, r3, r2
 8010774:	005a      	lsls	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	085b      	lsrs	r3, r3, #1
 801077c:	441a      	add	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	fbb2 f3f3 	udiv	r3, r2, r3
 8010786:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078a:	2b0f      	cmp	r3, #15
 801078c:	d916      	bls.n	80107bc <UART_SetConfig+0xb14>
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010794:	d212      	bcs.n	80107bc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	b29b      	uxth	r3, r3
 801079a:	f023 030f 	bic.w	r3, r3, #15
 801079e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	085b      	lsrs	r3, r3, #1
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	f003 0307 	and.w	r3, r3, #7
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107ae:	4313      	orrs	r3, r2
 80107b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107b8:	60da      	str	r2, [r3, #12]
 80107ba:	e0bc      	b.n	8010936 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80107bc:	2301      	movs	r3, #1
 80107be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80107c2:	e0b8      	b.n	8010936 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107c8:	2b20      	cmp	r3, #32
 80107ca:	dc4b      	bgt.n	8010864 <UART_SetConfig+0xbbc>
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f2c0 8087 	blt.w	80108e0 <UART_SetConfig+0xc38>
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	f200 8084 	bhi.w	80108e0 <UART_SetConfig+0xc38>
 80107d8:	a201      	add	r2, pc, #4	; (adr r2, 80107e0 <UART_SetConfig+0xb38>)
 80107da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107de:	bf00      	nop
 80107e0:	0801086b 	.word	0x0801086b
 80107e4:	08010873 	.word	0x08010873
 80107e8:	080108e1 	.word	0x080108e1
 80107ec:	080108e1 	.word	0x080108e1
 80107f0:	0801087b 	.word	0x0801087b
 80107f4:	080108e1 	.word	0x080108e1
 80107f8:	080108e1 	.word	0x080108e1
 80107fc:	080108e1 	.word	0x080108e1
 8010800:	0801088b 	.word	0x0801088b
 8010804:	080108e1 	.word	0x080108e1
 8010808:	080108e1 	.word	0x080108e1
 801080c:	080108e1 	.word	0x080108e1
 8010810:	080108e1 	.word	0x080108e1
 8010814:	080108e1 	.word	0x080108e1
 8010818:	080108e1 	.word	0x080108e1
 801081c:	080108e1 	.word	0x080108e1
 8010820:	0801089b 	.word	0x0801089b
 8010824:	080108e1 	.word	0x080108e1
 8010828:	080108e1 	.word	0x080108e1
 801082c:	080108e1 	.word	0x080108e1
 8010830:	080108e1 	.word	0x080108e1
 8010834:	080108e1 	.word	0x080108e1
 8010838:	080108e1 	.word	0x080108e1
 801083c:	080108e1 	.word	0x080108e1
 8010840:	080108e1 	.word	0x080108e1
 8010844:	080108e1 	.word	0x080108e1
 8010848:	080108e1 	.word	0x080108e1
 801084c:	080108e1 	.word	0x080108e1
 8010850:	080108e1 	.word	0x080108e1
 8010854:	080108e1 	.word	0x080108e1
 8010858:	080108e1 	.word	0x080108e1
 801085c:	080108e1 	.word	0x080108e1
 8010860:	080108c1 	.word	0x080108c1
 8010864:	2b40      	cmp	r3, #64	; 0x40
 8010866:	d02e      	beq.n	80108c6 <UART_SetConfig+0xc1e>
 8010868:	e03a      	b.n	80108e0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801086a:	f7fb fc99 	bl	800c1a0 <HAL_RCC_GetPCLK1Freq>
 801086e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010870:	e03c      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010872:	f7fb fcab 	bl	800c1cc <HAL_RCC_GetPCLK2Freq>
 8010876:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010878:	e038      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801087a:	f107 0314 	add.w	r3, r7, #20
 801087e:	4618      	mov	r0, r3
 8010880:	f7fd f80a 	bl	800d898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010888:	e030      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801088a:	f107 0308 	add.w	r3, r7, #8
 801088e:	4618      	mov	r0, r3
 8010890:	f7fd f956 	bl	800db40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010898:	e028      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801089a:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <UART_SetConfig+0xc2c>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f003 0320 	and.w	r3, r3, #32
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d009      	beq.n	80108ba <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108a6:	4b0b      	ldr	r3, [pc, #44]	; (80108d4 <UART_SetConfig+0xc2c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	08db      	lsrs	r3, r3, #3
 80108ac:	f003 0303 	and.w	r3, r3, #3
 80108b0:	4a09      	ldr	r2, [pc, #36]	; (80108d8 <UART_SetConfig+0xc30>)
 80108b2:	fa22 f303 	lsr.w	r3, r2, r3
 80108b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108b8:	e018      	b.n	80108ec <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80108ba:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <UART_SetConfig+0xc30>)
 80108bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108be:	e015      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108c0:	4b06      	ldr	r3, [pc, #24]	; (80108dc <UART_SetConfig+0xc34>)
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108c4:	e012      	b.n	80108ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108cc:	e00e      	b.n	80108ec <UART_SetConfig+0xc44>
 80108ce:	bf00      	nop
 80108d0:	08014468 	.word	0x08014468
 80108d4:	58024400 	.word	0x58024400
 80108d8:	03d09000 	.word	0x03d09000
 80108dc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108ea:	bf00      	nop
    }

    if (pclk != 0U)
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d021      	beq.n	8010936 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f6:	4a1a      	ldr	r2, [pc, #104]	; (8010960 <UART_SetConfig+0xcb8>)
 80108f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108fc:	461a      	mov	r2, r3
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	fbb3 f2f2 	udiv	r2, r3, r2
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	085b      	lsrs	r3, r3, #1
 801090a:	441a      	add	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	fbb2 f3f3 	udiv	r3, r2, r3
 8010914:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010918:	2b0f      	cmp	r3, #15
 801091a:	d909      	bls.n	8010930 <UART_SetConfig+0xc88>
 801091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010922:	d205      	bcs.n	8010930 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	b29a      	uxth	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	60da      	str	r2, [r3, #12]
 801092e:	e002      	b.n	8010936 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010956:	4618      	mov	r0, r3
 8010958:	3738      	adds	r7, #56	; 0x38
 801095a:	46bd      	mov	sp, r7
 801095c:	bdb0      	pop	{r4, r5, r7, pc}
 801095e:	bf00      	nop
 8010960:	08014468 	.word	0x08014468

08010964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010970:	f003 0301 	and.w	r3, r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00a      	beq.n	801098e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010992:	f003 0302 	and.w	r3, r3, #2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00a      	beq.n	80109b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	430a      	orrs	r2, r1
 80109ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b4:	f003 0304 	and.w	r3, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00a      	beq.n	80109d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	430a      	orrs	r2, r1
 80109d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d6:	f003 0308 	and.w	r3, r3, #8
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00a      	beq.n	80109f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	430a      	orrs	r2, r1
 80109f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f8:	f003 0310 	and.w	r3, r3, #16
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00a      	beq.n	8010a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	430a      	orrs	r2, r1
 8010a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a1a:	f003 0320 	and.w	r3, r3, #32
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00a      	beq.n	8010a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	430a      	orrs	r2, r1
 8010a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d01a      	beq.n	8010a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	430a      	orrs	r2, r1
 8010a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a62:	d10a      	bne.n	8010a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d00a      	beq.n	8010a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	430a      	orrs	r2, r1
 8010a9a:	605a      	str	r2, [r3, #4]
  }
}
 8010a9c:	bf00      	nop
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af02      	add	r7, sp, #8
 8010aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ab8:	f7f6 fe2a 	bl	8007710 <HAL_GetTick>
 8010abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0308 	and.w	r3, r3, #8
 8010ac8:	2b08      	cmp	r3, #8
 8010aca:	d10e      	bne.n	8010aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f82f 	bl	8010b3e <UART_WaitOnFlagUntilTimeout>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d001      	beq.n	8010aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	e025      	b.n	8010b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f003 0304 	and.w	r3, r3, #4
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	d10e      	bne.n	8010b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f819 	bl	8010b3e <UART_WaitOnFlagUntilTimeout>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b12:	2303      	movs	r3, #3
 8010b14:	e00f      	b.n	8010b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2220      	movs	r2, #32
 8010b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2220      	movs	r2, #32
 8010b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b09c      	sub	sp, #112	; 0x70
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	60f8      	str	r0, [r7, #12]
 8010b46:	60b9      	str	r1, [r7, #8]
 8010b48:	603b      	str	r3, [r7, #0]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b4e:	e0a9      	b.n	8010ca4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b56:	f000 80a5 	beq.w	8010ca4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b5a:	f7f6 fdd9 	bl	8007710 <HAL_GetTick>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	1ad3      	subs	r3, r2, r3
 8010b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d302      	bcc.n	8010b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8010b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d140      	bne.n	8010bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b78:	e853 3f00 	ldrex	r3, [r3]
 8010b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010b84:	667b      	str	r3, [r7, #100]	; 0x64
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b96:	e841 2300 	strex	r3, r2, [r1]
 8010b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d1e6      	bne.n	8010b70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bac:	e853 3f00 	ldrex	r3, [r3]
 8010bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb4:	f023 0301 	bic.w	r3, r3, #1
 8010bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8010bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bca:	e841 2300 	strex	r3, r2, [r1]
 8010bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e5      	bne.n	8010ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2220      	movs	r2, #32
 8010bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2220      	movs	r2, #32
 8010be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010bee:	2303      	movs	r3, #3
 8010bf0:	e069      	b.n	8010cc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d051      	beq.n	8010ca4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	69db      	ldr	r3, [r3, #28]
 8010c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c0e:	d149      	bne.n	8010ca4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c22:	e853 3f00 	ldrex	r3, [r3]
 8010c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	461a      	mov	r2, r3
 8010c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c38:	637b      	str	r3, [r7, #52]	; 0x34
 8010c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c40:	e841 2300 	strex	r3, r2, [r1]
 8010c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d1e6      	bne.n	8010c1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	3308      	adds	r3, #8
 8010c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	e853 3f00 	ldrex	r3, [r3]
 8010c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	f023 0301 	bic.w	r3, r3, #1
 8010c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	3308      	adds	r3, #8
 8010c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010c6c:	623a      	str	r2, [r7, #32]
 8010c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c70:	69f9      	ldr	r1, [r7, #28]
 8010c72:	6a3a      	ldr	r2, [r7, #32]
 8010c74:	e841 2300 	strex	r3, r2, [r1]
 8010c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1e5      	bne.n	8010c4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2220      	movs	r2, #32
 8010c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2220      	movs	r2, #32
 8010c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2220      	movs	r2, #32
 8010c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	e010      	b.n	8010cc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	69da      	ldr	r2, [r3, #28]
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	4013      	ands	r3, r2
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	bf0c      	ite	eq
 8010cb4:	2301      	moveq	r3, #1
 8010cb6:	2300      	movne	r3, #0
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	461a      	mov	r2, r3
 8010cbc:	79fb      	ldrb	r3, [r7, #7]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	f43f af46 	beq.w	8010b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3770      	adds	r7, #112	; 0x70
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010cce:	b480      	push	{r7}
 8010cd0:	b085      	sub	sp, #20
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d101      	bne.n	8010ce4 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	e027      	b.n	8010d34 <HAL_UARTEx_DisableFifoMode+0x66>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2224      	movs	r2, #36	; 0x24
 8010cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f022 0201 	bic.w	r2, r2, #1
 8010d0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010d12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2200      	movs	r2, #0
 8010d18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2220      	movs	r2, #32
 8010d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3714      	adds	r7, #20
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d101      	bne.n	8010d58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d54:	2302      	movs	r3, #2
 8010d56:	e02d      	b.n	8010db4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2224      	movs	r2, #36	; 0x24
 8010d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f022 0201 	bic.w	r2, r2, #1
 8010d7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	683a      	ldr	r2, [r7, #0]
 8010d90:	430a      	orrs	r2, r1
 8010d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f84f 	bl	8010e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2220      	movs	r2, #32
 8010da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2200      	movs	r2, #0
 8010dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d101      	bne.n	8010dd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	e02d      	b.n	8010e30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2224      	movs	r2, #36	; 0x24
 8010de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f022 0201 	bic.w	r2, r2, #1
 8010dfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	683a      	ldr	r2, [r7, #0]
 8010e0c:	430a      	orrs	r2, r1
 8010e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f811 	bl	8010e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2220      	movs	r2, #32
 8010e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3710      	adds	r7, #16
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d108      	bne.n	8010e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010e58:	e031      	b.n	8010ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010e5a:	2310      	movs	r3, #16
 8010e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010e5e:	2310      	movs	r3, #16
 8010e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	0e5b      	lsrs	r3, r3, #25
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	f003 0307 	and.w	r3, r3, #7
 8010e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	689b      	ldr	r3, [r3, #8]
 8010e78:	0f5b      	lsrs	r3, r3, #29
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f003 0307 	and.w	r3, r3, #7
 8010e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e82:	7bbb      	ldrb	r3, [r7, #14]
 8010e84:	7b3a      	ldrb	r2, [r7, #12]
 8010e86:	4911      	ldr	r1, [pc, #68]	; (8010ecc <UARTEx_SetNbDataToProcess+0x94>)
 8010e88:	5c8a      	ldrb	r2, [r1, r2]
 8010e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010e8e:	7b3a      	ldrb	r2, [r7, #12]
 8010e90:	490f      	ldr	r1, [pc, #60]	; (8010ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8010e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ea0:	7bfb      	ldrb	r3, [r7, #15]
 8010ea2:	7b7a      	ldrb	r2, [r7, #13]
 8010ea4:	4909      	ldr	r1, [pc, #36]	; (8010ecc <UARTEx_SetNbDataToProcess+0x94>)
 8010ea6:	5c8a      	ldrb	r2, [r1, r2]
 8010ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010eac:	7b7a      	ldrb	r2, [r7, #13]
 8010eae:	4908      	ldr	r1, [pc, #32]	; (8010ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8010eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010ebe:	bf00      	nop
 8010ec0:	3714      	adds	r7, #20
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	08014480 	.word	0x08014480
 8010ed0:	08014488 	.word	0x08014488

08010ed4 <__errno>:
 8010ed4:	4b01      	ldr	r3, [pc, #4]	; (8010edc <__errno+0x8>)
 8010ed6:	6818      	ldr	r0, [r3, #0]
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	24000010 	.word	0x24000010

08010ee0 <__libc_init_array>:
 8010ee0:	b570      	push	{r4, r5, r6, lr}
 8010ee2:	4d0d      	ldr	r5, [pc, #52]	; (8010f18 <__libc_init_array+0x38>)
 8010ee4:	4c0d      	ldr	r4, [pc, #52]	; (8010f1c <__libc_init_array+0x3c>)
 8010ee6:	1b64      	subs	r4, r4, r5
 8010ee8:	10a4      	asrs	r4, r4, #2
 8010eea:	2600      	movs	r6, #0
 8010eec:	42a6      	cmp	r6, r4
 8010eee:	d109      	bne.n	8010f04 <__libc_init_array+0x24>
 8010ef0:	4d0b      	ldr	r5, [pc, #44]	; (8010f20 <__libc_init_array+0x40>)
 8010ef2:	4c0c      	ldr	r4, [pc, #48]	; (8010f24 <__libc_init_array+0x44>)
 8010ef4:	f003 fa8a 	bl	801440c <_init>
 8010ef8:	1b64      	subs	r4, r4, r5
 8010efa:	10a4      	asrs	r4, r4, #2
 8010efc:	2600      	movs	r6, #0
 8010efe:	42a6      	cmp	r6, r4
 8010f00:	d105      	bne.n	8010f0e <__libc_init_array+0x2e>
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f08:	4798      	blx	r3
 8010f0a:	3601      	adds	r6, #1
 8010f0c:	e7ee      	b.n	8010eec <__libc_init_array+0xc>
 8010f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f12:	4798      	blx	r3
 8010f14:	3601      	adds	r6, #1
 8010f16:	e7f2      	b.n	8010efe <__libc_init_array+0x1e>
 8010f18:	08014a58 	.word	0x08014a58
 8010f1c:	08014a58 	.word	0x08014a58
 8010f20:	08014a58 	.word	0x08014a58
 8010f24:	08014a5c 	.word	0x08014a5c

08010f28 <memcpy>:
 8010f28:	440a      	add	r2, r1
 8010f2a:	4291      	cmp	r1, r2
 8010f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f30:	d100      	bne.n	8010f34 <memcpy+0xc>
 8010f32:	4770      	bx	lr
 8010f34:	b510      	push	{r4, lr}
 8010f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f3e:	4291      	cmp	r1, r2
 8010f40:	d1f9      	bne.n	8010f36 <memcpy+0xe>
 8010f42:	bd10      	pop	{r4, pc}

08010f44 <memset>:
 8010f44:	4402      	add	r2, r0
 8010f46:	4603      	mov	r3, r0
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d100      	bne.n	8010f4e <memset+0xa>
 8010f4c:	4770      	bx	lr
 8010f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8010f52:	e7f9      	b.n	8010f48 <memset+0x4>

08010f54 <__cvt>:
 8010f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f56:	ed2d 8b02 	vpush	{d8}
 8010f5a:	eeb0 8b40 	vmov.f64	d8, d0
 8010f5e:	b085      	sub	sp, #20
 8010f60:	4617      	mov	r7, r2
 8010f62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010f64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010f66:	ee18 2a90 	vmov	r2, s17
 8010f6a:	f025 0520 	bic.w	r5, r5, #32
 8010f6e:	2a00      	cmp	r2, #0
 8010f70:	bfb6      	itet	lt
 8010f72:	222d      	movlt	r2, #45	; 0x2d
 8010f74:	2200      	movge	r2, #0
 8010f76:	eeb1 8b40 	vneglt.f64	d8, d0
 8010f7a:	2d46      	cmp	r5, #70	; 0x46
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	d004      	beq.n	8010f8c <__cvt+0x38>
 8010f82:	2d45      	cmp	r5, #69	; 0x45
 8010f84:	d100      	bne.n	8010f88 <__cvt+0x34>
 8010f86:	3401      	adds	r4, #1
 8010f88:	2102      	movs	r1, #2
 8010f8a:	e000      	b.n	8010f8e <__cvt+0x3a>
 8010f8c:	2103      	movs	r1, #3
 8010f8e:	ab03      	add	r3, sp, #12
 8010f90:	9301      	str	r3, [sp, #4]
 8010f92:	ab02      	add	r3, sp, #8
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	4622      	mov	r2, r4
 8010f98:	4633      	mov	r3, r6
 8010f9a:	eeb0 0b48 	vmov.f64	d0, d8
 8010f9e:	f000 fcab 	bl	80118f8 <_dtoa_r>
 8010fa2:	2d47      	cmp	r5, #71	; 0x47
 8010fa4:	d109      	bne.n	8010fba <__cvt+0x66>
 8010fa6:	07fb      	lsls	r3, r7, #31
 8010fa8:	d407      	bmi.n	8010fba <__cvt+0x66>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fae:	1a1b      	subs	r3, r3, r0
 8010fb0:	6013      	str	r3, [r2, #0]
 8010fb2:	b005      	add	sp, #20
 8010fb4:	ecbd 8b02 	vpop	{d8}
 8010fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fba:	2d46      	cmp	r5, #70	; 0x46
 8010fbc:	eb00 0204 	add.w	r2, r0, r4
 8010fc0:	d10c      	bne.n	8010fdc <__cvt+0x88>
 8010fc2:	7803      	ldrb	r3, [r0, #0]
 8010fc4:	2b30      	cmp	r3, #48	; 0x30
 8010fc6:	d107      	bne.n	8010fd8 <__cvt+0x84>
 8010fc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd0:	bf1c      	itt	ne
 8010fd2:	f1c4 0401 	rsbne	r4, r4, #1
 8010fd6:	6034      	strne	r4, [r6, #0]
 8010fd8:	6833      	ldr	r3, [r6, #0]
 8010fda:	441a      	add	r2, r3
 8010fdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	bf08      	it	eq
 8010fe6:	9203      	streq	r2, [sp, #12]
 8010fe8:	2130      	movs	r1, #48	; 0x30
 8010fea:	9b03      	ldr	r3, [sp, #12]
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d2dc      	bcs.n	8010faa <__cvt+0x56>
 8010ff0:	1c5c      	adds	r4, r3, #1
 8010ff2:	9403      	str	r4, [sp, #12]
 8010ff4:	7019      	strb	r1, [r3, #0]
 8010ff6:	e7f8      	b.n	8010fea <__cvt+0x96>

08010ff8 <__exponent>:
 8010ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2900      	cmp	r1, #0
 8010ffe:	bfb8      	it	lt
 8011000:	4249      	neglt	r1, r1
 8011002:	f803 2b02 	strb.w	r2, [r3], #2
 8011006:	bfb4      	ite	lt
 8011008:	222d      	movlt	r2, #45	; 0x2d
 801100a:	222b      	movge	r2, #43	; 0x2b
 801100c:	2909      	cmp	r1, #9
 801100e:	7042      	strb	r2, [r0, #1]
 8011010:	dd2a      	ble.n	8011068 <__exponent+0x70>
 8011012:	f10d 0407 	add.w	r4, sp, #7
 8011016:	46a4      	mov	ip, r4
 8011018:	270a      	movs	r7, #10
 801101a:	46a6      	mov	lr, r4
 801101c:	460a      	mov	r2, r1
 801101e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011022:	fb07 1516 	mls	r5, r7, r6, r1
 8011026:	3530      	adds	r5, #48	; 0x30
 8011028:	2a63      	cmp	r2, #99	; 0x63
 801102a:	f104 34ff 	add.w	r4, r4, #4294967295
 801102e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011032:	4631      	mov	r1, r6
 8011034:	dcf1      	bgt.n	801101a <__exponent+0x22>
 8011036:	3130      	adds	r1, #48	; 0x30
 8011038:	f1ae 0502 	sub.w	r5, lr, #2
 801103c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011040:	1c44      	adds	r4, r0, #1
 8011042:	4629      	mov	r1, r5
 8011044:	4561      	cmp	r1, ip
 8011046:	d30a      	bcc.n	801105e <__exponent+0x66>
 8011048:	f10d 0209 	add.w	r2, sp, #9
 801104c:	eba2 020e 	sub.w	r2, r2, lr
 8011050:	4565      	cmp	r5, ip
 8011052:	bf88      	it	hi
 8011054:	2200      	movhi	r2, #0
 8011056:	4413      	add	r3, r2
 8011058:	1a18      	subs	r0, r3, r0
 801105a:	b003      	add	sp, #12
 801105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801105e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011062:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011066:	e7ed      	b.n	8011044 <__exponent+0x4c>
 8011068:	2330      	movs	r3, #48	; 0x30
 801106a:	3130      	adds	r1, #48	; 0x30
 801106c:	7083      	strb	r3, [r0, #2]
 801106e:	70c1      	strb	r1, [r0, #3]
 8011070:	1d03      	adds	r3, r0, #4
 8011072:	e7f1      	b.n	8011058 <__exponent+0x60>
 8011074:	0000      	movs	r0, r0
	...

08011078 <_printf_float>:
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	b08b      	sub	sp, #44	; 0x2c
 801107e:	460c      	mov	r4, r1
 8011080:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011084:	4616      	mov	r6, r2
 8011086:	461f      	mov	r7, r3
 8011088:	4605      	mov	r5, r0
 801108a:	f001 f9b7 	bl	80123fc <_localeconv_r>
 801108e:	f8d0 b000 	ldr.w	fp, [r0]
 8011092:	4658      	mov	r0, fp
 8011094:	f7ef f93c 	bl	8000310 <strlen>
 8011098:	2300      	movs	r3, #0
 801109a:	9308      	str	r3, [sp, #32]
 801109c:	f8d8 3000 	ldr.w	r3, [r8]
 80110a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	3307      	adds	r3, #7
 80110a8:	f023 0307 	bic.w	r3, r3, #7
 80110ac:	f103 0108 	add.w	r1, r3, #8
 80110b0:	f8c8 1000 	str.w	r1, [r8]
 80110b4:	4682      	mov	sl, r0
 80110b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80110be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011320 <_printf_float+0x2a8>
 80110c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80110c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80110ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80110ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d2:	dd24      	ble.n	801111e <_printf_float+0xa6>
 80110d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	d502      	bpl.n	80110e4 <_printf_float+0x6c>
 80110de:	232d      	movs	r3, #45	; 0x2d
 80110e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110e4:	4b90      	ldr	r3, [pc, #576]	; (8011328 <_printf_float+0x2b0>)
 80110e6:	4891      	ldr	r0, [pc, #580]	; (801132c <_printf_float+0x2b4>)
 80110e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80110ec:	bf94      	ite	ls
 80110ee:	4698      	movls	r8, r3
 80110f0:	4680      	movhi	r8, r0
 80110f2:	2303      	movs	r3, #3
 80110f4:	6123      	str	r3, [r4, #16]
 80110f6:	f022 0204 	bic.w	r2, r2, #4
 80110fa:	2300      	movs	r3, #0
 80110fc:	6022      	str	r2, [r4, #0]
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	9700      	str	r7, [sp, #0]
 8011102:	4633      	mov	r3, r6
 8011104:	aa09      	add	r2, sp, #36	; 0x24
 8011106:	4621      	mov	r1, r4
 8011108:	4628      	mov	r0, r5
 801110a:	f000 f9d3 	bl	80114b4 <_printf_common>
 801110e:	3001      	adds	r0, #1
 8011110:	f040 808a 	bne.w	8011228 <_printf_float+0x1b0>
 8011114:	f04f 30ff 	mov.w	r0, #4294967295
 8011118:	b00b      	add	sp, #44	; 0x2c
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011126:	d709      	bvc.n	801113c <_printf_float+0xc4>
 8011128:	ee10 3a90 	vmov	r3, s1
 801112c:	2b00      	cmp	r3, #0
 801112e:	bfbc      	itt	lt
 8011130:	232d      	movlt	r3, #45	; 0x2d
 8011132:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011136:	487e      	ldr	r0, [pc, #504]	; (8011330 <_printf_float+0x2b8>)
 8011138:	4b7e      	ldr	r3, [pc, #504]	; (8011334 <_printf_float+0x2bc>)
 801113a:	e7d5      	b.n	80110e8 <_printf_float+0x70>
 801113c:	6863      	ldr	r3, [r4, #4]
 801113e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011142:	9104      	str	r1, [sp, #16]
 8011144:	1c59      	adds	r1, r3, #1
 8011146:	d13c      	bne.n	80111c2 <_printf_float+0x14a>
 8011148:	2306      	movs	r3, #6
 801114a:	6063      	str	r3, [r4, #4]
 801114c:	2300      	movs	r3, #0
 801114e:	9303      	str	r3, [sp, #12]
 8011150:	ab08      	add	r3, sp, #32
 8011152:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801115a:	ab07      	add	r3, sp, #28
 801115c:	6861      	ldr	r1, [r4, #4]
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	6022      	str	r2, [r4, #0]
 8011162:	f10d 031b 	add.w	r3, sp, #27
 8011166:	4628      	mov	r0, r5
 8011168:	f7ff fef4 	bl	8010f54 <__cvt>
 801116c:	9b04      	ldr	r3, [sp, #16]
 801116e:	9907      	ldr	r1, [sp, #28]
 8011170:	2b47      	cmp	r3, #71	; 0x47
 8011172:	4680      	mov	r8, r0
 8011174:	d108      	bne.n	8011188 <_printf_float+0x110>
 8011176:	1cc8      	adds	r0, r1, #3
 8011178:	db02      	blt.n	8011180 <_printf_float+0x108>
 801117a:	6863      	ldr	r3, [r4, #4]
 801117c:	4299      	cmp	r1, r3
 801117e:	dd41      	ble.n	8011204 <_printf_float+0x18c>
 8011180:	f1a9 0902 	sub.w	r9, r9, #2
 8011184:	fa5f f989 	uxtb.w	r9, r9
 8011188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801118c:	d820      	bhi.n	80111d0 <_printf_float+0x158>
 801118e:	3901      	subs	r1, #1
 8011190:	464a      	mov	r2, r9
 8011192:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011196:	9107      	str	r1, [sp, #28]
 8011198:	f7ff ff2e 	bl	8010ff8 <__exponent>
 801119c:	9a08      	ldr	r2, [sp, #32]
 801119e:	9004      	str	r0, [sp, #16]
 80111a0:	1813      	adds	r3, r2, r0
 80111a2:	2a01      	cmp	r2, #1
 80111a4:	6123      	str	r3, [r4, #16]
 80111a6:	dc02      	bgt.n	80111ae <_printf_float+0x136>
 80111a8:	6822      	ldr	r2, [r4, #0]
 80111aa:	07d2      	lsls	r2, r2, #31
 80111ac:	d501      	bpl.n	80111b2 <_printf_float+0x13a>
 80111ae:	3301      	adds	r3, #1
 80111b0:	6123      	str	r3, [r4, #16]
 80111b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0a2      	beq.n	8011100 <_printf_float+0x88>
 80111ba:	232d      	movs	r3, #45	; 0x2d
 80111bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111c0:	e79e      	b.n	8011100 <_printf_float+0x88>
 80111c2:	9904      	ldr	r1, [sp, #16]
 80111c4:	2947      	cmp	r1, #71	; 0x47
 80111c6:	d1c1      	bne.n	801114c <_printf_float+0xd4>
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1bf      	bne.n	801114c <_printf_float+0xd4>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e7bc      	b.n	801114a <_printf_float+0xd2>
 80111d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80111d4:	d118      	bne.n	8011208 <_printf_float+0x190>
 80111d6:	2900      	cmp	r1, #0
 80111d8:	6863      	ldr	r3, [r4, #4]
 80111da:	dd0b      	ble.n	80111f4 <_printf_float+0x17c>
 80111dc:	6121      	str	r1, [r4, #16]
 80111de:	b913      	cbnz	r3, 80111e6 <_printf_float+0x16e>
 80111e0:	6822      	ldr	r2, [r4, #0]
 80111e2:	07d0      	lsls	r0, r2, #31
 80111e4:	d502      	bpl.n	80111ec <_printf_float+0x174>
 80111e6:	3301      	adds	r3, #1
 80111e8:	440b      	add	r3, r1
 80111ea:	6123      	str	r3, [r4, #16]
 80111ec:	2300      	movs	r3, #0
 80111ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80111f0:	9304      	str	r3, [sp, #16]
 80111f2:	e7de      	b.n	80111b2 <_printf_float+0x13a>
 80111f4:	b913      	cbnz	r3, 80111fc <_printf_float+0x184>
 80111f6:	6822      	ldr	r2, [r4, #0]
 80111f8:	07d2      	lsls	r2, r2, #31
 80111fa:	d501      	bpl.n	8011200 <_printf_float+0x188>
 80111fc:	3302      	adds	r3, #2
 80111fe:	e7f4      	b.n	80111ea <_printf_float+0x172>
 8011200:	2301      	movs	r3, #1
 8011202:	e7f2      	b.n	80111ea <_printf_float+0x172>
 8011204:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011208:	9b08      	ldr	r3, [sp, #32]
 801120a:	4299      	cmp	r1, r3
 801120c:	db05      	blt.n	801121a <_printf_float+0x1a2>
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	6121      	str	r1, [r4, #16]
 8011212:	07d8      	lsls	r0, r3, #31
 8011214:	d5ea      	bpl.n	80111ec <_printf_float+0x174>
 8011216:	1c4b      	adds	r3, r1, #1
 8011218:	e7e7      	b.n	80111ea <_printf_float+0x172>
 801121a:	2900      	cmp	r1, #0
 801121c:	bfd4      	ite	le
 801121e:	f1c1 0202 	rsble	r2, r1, #2
 8011222:	2201      	movgt	r2, #1
 8011224:	4413      	add	r3, r2
 8011226:	e7e0      	b.n	80111ea <_printf_float+0x172>
 8011228:	6823      	ldr	r3, [r4, #0]
 801122a:	055a      	lsls	r2, r3, #21
 801122c:	d407      	bmi.n	801123e <_printf_float+0x1c6>
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	4642      	mov	r2, r8
 8011232:	4631      	mov	r1, r6
 8011234:	4628      	mov	r0, r5
 8011236:	47b8      	blx	r7
 8011238:	3001      	adds	r0, #1
 801123a:	d12a      	bne.n	8011292 <_printf_float+0x21a>
 801123c:	e76a      	b.n	8011114 <_printf_float+0x9c>
 801123e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011242:	f240 80e2 	bls.w	801140a <_printf_float+0x392>
 8011246:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801124a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011252:	d133      	bne.n	80112bc <_printf_float+0x244>
 8011254:	4a38      	ldr	r2, [pc, #224]	; (8011338 <_printf_float+0x2c0>)
 8011256:	2301      	movs	r3, #1
 8011258:	4631      	mov	r1, r6
 801125a:	4628      	mov	r0, r5
 801125c:	47b8      	blx	r7
 801125e:	3001      	adds	r0, #1
 8011260:	f43f af58 	beq.w	8011114 <_printf_float+0x9c>
 8011264:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011268:	429a      	cmp	r2, r3
 801126a:	db02      	blt.n	8011272 <_printf_float+0x1fa>
 801126c:	6823      	ldr	r3, [r4, #0]
 801126e:	07d8      	lsls	r0, r3, #31
 8011270:	d50f      	bpl.n	8011292 <_printf_float+0x21a>
 8011272:	4653      	mov	r3, sl
 8011274:	465a      	mov	r2, fp
 8011276:	4631      	mov	r1, r6
 8011278:	4628      	mov	r0, r5
 801127a:	47b8      	blx	r7
 801127c:	3001      	adds	r0, #1
 801127e:	f43f af49 	beq.w	8011114 <_printf_float+0x9c>
 8011282:	f04f 0800 	mov.w	r8, #0
 8011286:	f104 091a 	add.w	r9, r4, #26
 801128a:	9b08      	ldr	r3, [sp, #32]
 801128c:	3b01      	subs	r3, #1
 801128e:	4543      	cmp	r3, r8
 8011290:	dc09      	bgt.n	80112a6 <_printf_float+0x22e>
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	079b      	lsls	r3, r3, #30
 8011296:	f100 8108 	bmi.w	80114aa <_printf_float+0x432>
 801129a:	68e0      	ldr	r0, [r4, #12]
 801129c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801129e:	4298      	cmp	r0, r3
 80112a0:	bfb8      	it	lt
 80112a2:	4618      	movlt	r0, r3
 80112a4:	e738      	b.n	8011118 <_printf_float+0xa0>
 80112a6:	2301      	movs	r3, #1
 80112a8:	464a      	mov	r2, r9
 80112aa:	4631      	mov	r1, r6
 80112ac:	4628      	mov	r0, r5
 80112ae:	47b8      	blx	r7
 80112b0:	3001      	adds	r0, #1
 80112b2:	f43f af2f 	beq.w	8011114 <_printf_float+0x9c>
 80112b6:	f108 0801 	add.w	r8, r8, #1
 80112ba:	e7e6      	b.n	801128a <_printf_float+0x212>
 80112bc:	9b07      	ldr	r3, [sp, #28]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	dc3c      	bgt.n	801133c <_printf_float+0x2c4>
 80112c2:	4a1d      	ldr	r2, [pc, #116]	; (8011338 <_printf_float+0x2c0>)
 80112c4:	2301      	movs	r3, #1
 80112c6:	4631      	mov	r1, r6
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b8      	blx	r7
 80112cc:	3001      	adds	r0, #1
 80112ce:	f43f af21 	beq.w	8011114 <_printf_float+0x9c>
 80112d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	d102      	bne.n	80112e0 <_printf_float+0x268>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	07d9      	lsls	r1, r3, #31
 80112de:	d5d8      	bpl.n	8011292 <_printf_float+0x21a>
 80112e0:	4653      	mov	r3, sl
 80112e2:	465a      	mov	r2, fp
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f af12 	beq.w	8011114 <_printf_float+0x9c>
 80112f0:	f04f 0900 	mov.w	r9, #0
 80112f4:	f104 0a1a 	add.w	sl, r4, #26
 80112f8:	9b07      	ldr	r3, [sp, #28]
 80112fa:	425b      	negs	r3, r3
 80112fc:	454b      	cmp	r3, r9
 80112fe:	dc01      	bgt.n	8011304 <_printf_float+0x28c>
 8011300:	9b08      	ldr	r3, [sp, #32]
 8011302:	e795      	b.n	8011230 <_printf_float+0x1b8>
 8011304:	2301      	movs	r3, #1
 8011306:	4652      	mov	r2, sl
 8011308:	4631      	mov	r1, r6
 801130a:	4628      	mov	r0, r5
 801130c:	47b8      	blx	r7
 801130e:	3001      	adds	r0, #1
 8011310:	f43f af00 	beq.w	8011114 <_printf_float+0x9c>
 8011314:	f109 0901 	add.w	r9, r9, #1
 8011318:	e7ee      	b.n	80112f8 <_printf_float+0x280>
 801131a:	bf00      	nop
 801131c:	f3af 8000 	nop.w
 8011320:	ffffffff 	.word	0xffffffff
 8011324:	7fefffff 	.word	0x7fefffff
 8011328:	08014494 	.word	0x08014494
 801132c:	08014498 	.word	0x08014498
 8011330:	080144a0 	.word	0x080144a0
 8011334:	0801449c 	.word	0x0801449c
 8011338:	080144a4 	.word	0x080144a4
 801133c:	9a08      	ldr	r2, [sp, #32]
 801133e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011340:	429a      	cmp	r2, r3
 8011342:	bfa8      	it	ge
 8011344:	461a      	movge	r2, r3
 8011346:	2a00      	cmp	r2, #0
 8011348:	4691      	mov	r9, r2
 801134a:	dc38      	bgt.n	80113be <_printf_float+0x346>
 801134c:	2300      	movs	r3, #0
 801134e:	9305      	str	r3, [sp, #20]
 8011350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011354:	f104 021a 	add.w	r2, r4, #26
 8011358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801135a:	9905      	ldr	r1, [sp, #20]
 801135c:	9304      	str	r3, [sp, #16]
 801135e:	eba3 0309 	sub.w	r3, r3, r9
 8011362:	428b      	cmp	r3, r1
 8011364:	dc33      	bgt.n	80113ce <_printf_float+0x356>
 8011366:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801136a:	429a      	cmp	r2, r3
 801136c:	db3c      	blt.n	80113e8 <_printf_float+0x370>
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	07da      	lsls	r2, r3, #31
 8011372:	d439      	bmi.n	80113e8 <_printf_float+0x370>
 8011374:	9a08      	ldr	r2, [sp, #32]
 8011376:	9b04      	ldr	r3, [sp, #16]
 8011378:	9907      	ldr	r1, [sp, #28]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	eba2 0901 	sub.w	r9, r2, r1
 8011380:	4599      	cmp	r9, r3
 8011382:	bfa8      	it	ge
 8011384:	4699      	movge	r9, r3
 8011386:	f1b9 0f00 	cmp.w	r9, #0
 801138a:	dc35      	bgt.n	80113f8 <_printf_float+0x380>
 801138c:	f04f 0800 	mov.w	r8, #0
 8011390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011394:	f104 0a1a 	add.w	sl, r4, #26
 8011398:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801139c:	1a9b      	subs	r3, r3, r2
 801139e:	eba3 0309 	sub.w	r3, r3, r9
 80113a2:	4543      	cmp	r3, r8
 80113a4:	f77f af75 	ble.w	8011292 <_printf_float+0x21a>
 80113a8:	2301      	movs	r3, #1
 80113aa:	4652      	mov	r2, sl
 80113ac:	4631      	mov	r1, r6
 80113ae:	4628      	mov	r0, r5
 80113b0:	47b8      	blx	r7
 80113b2:	3001      	adds	r0, #1
 80113b4:	f43f aeae 	beq.w	8011114 <_printf_float+0x9c>
 80113b8:	f108 0801 	add.w	r8, r8, #1
 80113bc:	e7ec      	b.n	8011398 <_printf_float+0x320>
 80113be:	4613      	mov	r3, r2
 80113c0:	4631      	mov	r1, r6
 80113c2:	4642      	mov	r2, r8
 80113c4:	4628      	mov	r0, r5
 80113c6:	47b8      	blx	r7
 80113c8:	3001      	adds	r0, #1
 80113ca:	d1bf      	bne.n	801134c <_printf_float+0x2d4>
 80113cc:	e6a2      	b.n	8011114 <_printf_float+0x9c>
 80113ce:	2301      	movs	r3, #1
 80113d0:	4631      	mov	r1, r6
 80113d2:	4628      	mov	r0, r5
 80113d4:	9204      	str	r2, [sp, #16]
 80113d6:	47b8      	blx	r7
 80113d8:	3001      	adds	r0, #1
 80113da:	f43f ae9b 	beq.w	8011114 <_printf_float+0x9c>
 80113de:	9b05      	ldr	r3, [sp, #20]
 80113e0:	9a04      	ldr	r2, [sp, #16]
 80113e2:	3301      	adds	r3, #1
 80113e4:	9305      	str	r3, [sp, #20]
 80113e6:	e7b7      	b.n	8011358 <_printf_float+0x2e0>
 80113e8:	4653      	mov	r3, sl
 80113ea:	465a      	mov	r2, fp
 80113ec:	4631      	mov	r1, r6
 80113ee:	4628      	mov	r0, r5
 80113f0:	47b8      	blx	r7
 80113f2:	3001      	adds	r0, #1
 80113f4:	d1be      	bne.n	8011374 <_printf_float+0x2fc>
 80113f6:	e68d      	b.n	8011114 <_printf_float+0x9c>
 80113f8:	9a04      	ldr	r2, [sp, #16]
 80113fa:	464b      	mov	r3, r9
 80113fc:	4442      	add	r2, r8
 80113fe:	4631      	mov	r1, r6
 8011400:	4628      	mov	r0, r5
 8011402:	47b8      	blx	r7
 8011404:	3001      	adds	r0, #1
 8011406:	d1c1      	bne.n	801138c <_printf_float+0x314>
 8011408:	e684      	b.n	8011114 <_printf_float+0x9c>
 801140a:	9a08      	ldr	r2, [sp, #32]
 801140c:	2a01      	cmp	r2, #1
 801140e:	dc01      	bgt.n	8011414 <_printf_float+0x39c>
 8011410:	07db      	lsls	r3, r3, #31
 8011412:	d537      	bpl.n	8011484 <_printf_float+0x40c>
 8011414:	2301      	movs	r3, #1
 8011416:	4642      	mov	r2, r8
 8011418:	4631      	mov	r1, r6
 801141a:	4628      	mov	r0, r5
 801141c:	47b8      	blx	r7
 801141e:	3001      	adds	r0, #1
 8011420:	f43f ae78 	beq.w	8011114 <_printf_float+0x9c>
 8011424:	4653      	mov	r3, sl
 8011426:	465a      	mov	r2, fp
 8011428:	4631      	mov	r1, r6
 801142a:	4628      	mov	r0, r5
 801142c:	47b8      	blx	r7
 801142e:	3001      	adds	r0, #1
 8011430:	f43f ae70 	beq.w	8011114 <_printf_float+0x9c>
 8011434:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011438:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011440:	d01b      	beq.n	801147a <_printf_float+0x402>
 8011442:	9b08      	ldr	r3, [sp, #32]
 8011444:	f108 0201 	add.w	r2, r8, #1
 8011448:	3b01      	subs	r3, #1
 801144a:	4631      	mov	r1, r6
 801144c:	4628      	mov	r0, r5
 801144e:	47b8      	blx	r7
 8011450:	3001      	adds	r0, #1
 8011452:	d10e      	bne.n	8011472 <_printf_float+0x3fa>
 8011454:	e65e      	b.n	8011114 <_printf_float+0x9c>
 8011456:	2301      	movs	r3, #1
 8011458:	464a      	mov	r2, r9
 801145a:	4631      	mov	r1, r6
 801145c:	4628      	mov	r0, r5
 801145e:	47b8      	blx	r7
 8011460:	3001      	adds	r0, #1
 8011462:	f43f ae57 	beq.w	8011114 <_printf_float+0x9c>
 8011466:	f108 0801 	add.w	r8, r8, #1
 801146a:	9b08      	ldr	r3, [sp, #32]
 801146c:	3b01      	subs	r3, #1
 801146e:	4543      	cmp	r3, r8
 8011470:	dcf1      	bgt.n	8011456 <_printf_float+0x3de>
 8011472:	9b04      	ldr	r3, [sp, #16]
 8011474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011478:	e6db      	b.n	8011232 <_printf_float+0x1ba>
 801147a:	f04f 0800 	mov.w	r8, #0
 801147e:	f104 091a 	add.w	r9, r4, #26
 8011482:	e7f2      	b.n	801146a <_printf_float+0x3f2>
 8011484:	2301      	movs	r3, #1
 8011486:	4642      	mov	r2, r8
 8011488:	e7df      	b.n	801144a <_printf_float+0x3d2>
 801148a:	2301      	movs	r3, #1
 801148c:	464a      	mov	r2, r9
 801148e:	4631      	mov	r1, r6
 8011490:	4628      	mov	r0, r5
 8011492:	47b8      	blx	r7
 8011494:	3001      	adds	r0, #1
 8011496:	f43f ae3d 	beq.w	8011114 <_printf_float+0x9c>
 801149a:	f108 0801 	add.w	r8, r8, #1
 801149e:	68e3      	ldr	r3, [r4, #12]
 80114a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114a2:	1a5b      	subs	r3, r3, r1
 80114a4:	4543      	cmp	r3, r8
 80114a6:	dcf0      	bgt.n	801148a <_printf_float+0x412>
 80114a8:	e6f7      	b.n	801129a <_printf_float+0x222>
 80114aa:	f04f 0800 	mov.w	r8, #0
 80114ae:	f104 0919 	add.w	r9, r4, #25
 80114b2:	e7f4      	b.n	801149e <_printf_float+0x426>

080114b4 <_printf_common>:
 80114b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b8:	4616      	mov	r6, r2
 80114ba:	4699      	mov	r9, r3
 80114bc:	688a      	ldr	r2, [r1, #8]
 80114be:	690b      	ldr	r3, [r1, #16]
 80114c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114c4:	4293      	cmp	r3, r2
 80114c6:	bfb8      	it	lt
 80114c8:	4613      	movlt	r3, r2
 80114ca:	6033      	str	r3, [r6, #0]
 80114cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114d0:	4607      	mov	r7, r0
 80114d2:	460c      	mov	r4, r1
 80114d4:	b10a      	cbz	r2, 80114da <_printf_common+0x26>
 80114d6:	3301      	adds	r3, #1
 80114d8:	6033      	str	r3, [r6, #0]
 80114da:	6823      	ldr	r3, [r4, #0]
 80114dc:	0699      	lsls	r1, r3, #26
 80114de:	bf42      	ittt	mi
 80114e0:	6833      	ldrmi	r3, [r6, #0]
 80114e2:	3302      	addmi	r3, #2
 80114e4:	6033      	strmi	r3, [r6, #0]
 80114e6:	6825      	ldr	r5, [r4, #0]
 80114e8:	f015 0506 	ands.w	r5, r5, #6
 80114ec:	d106      	bne.n	80114fc <_printf_common+0x48>
 80114ee:	f104 0a19 	add.w	sl, r4, #25
 80114f2:	68e3      	ldr	r3, [r4, #12]
 80114f4:	6832      	ldr	r2, [r6, #0]
 80114f6:	1a9b      	subs	r3, r3, r2
 80114f8:	42ab      	cmp	r3, r5
 80114fa:	dc26      	bgt.n	801154a <_printf_common+0x96>
 80114fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011500:	1e13      	subs	r3, r2, #0
 8011502:	6822      	ldr	r2, [r4, #0]
 8011504:	bf18      	it	ne
 8011506:	2301      	movne	r3, #1
 8011508:	0692      	lsls	r2, r2, #26
 801150a:	d42b      	bmi.n	8011564 <_printf_common+0xb0>
 801150c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011510:	4649      	mov	r1, r9
 8011512:	4638      	mov	r0, r7
 8011514:	47c0      	blx	r8
 8011516:	3001      	adds	r0, #1
 8011518:	d01e      	beq.n	8011558 <_printf_common+0xa4>
 801151a:	6823      	ldr	r3, [r4, #0]
 801151c:	68e5      	ldr	r5, [r4, #12]
 801151e:	6832      	ldr	r2, [r6, #0]
 8011520:	f003 0306 	and.w	r3, r3, #6
 8011524:	2b04      	cmp	r3, #4
 8011526:	bf08      	it	eq
 8011528:	1aad      	subeq	r5, r5, r2
 801152a:	68a3      	ldr	r3, [r4, #8]
 801152c:	6922      	ldr	r2, [r4, #16]
 801152e:	bf0c      	ite	eq
 8011530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011534:	2500      	movne	r5, #0
 8011536:	4293      	cmp	r3, r2
 8011538:	bfc4      	itt	gt
 801153a:	1a9b      	subgt	r3, r3, r2
 801153c:	18ed      	addgt	r5, r5, r3
 801153e:	2600      	movs	r6, #0
 8011540:	341a      	adds	r4, #26
 8011542:	42b5      	cmp	r5, r6
 8011544:	d11a      	bne.n	801157c <_printf_common+0xc8>
 8011546:	2000      	movs	r0, #0
 8011548:	e008      	b.n	801155c <_printf_common+0xa8>
 801154a:	2301      	movs	r3, #1
 801154c:	4652      	mov	r2, sl
 801154e:	4649      	mov	r1, r9
 8011550:	4638      	mov	r0, r7
 8011552:	47c0      	blx	r8
 8011554:	3001      	adds	r0, #1
 8011556:	d103      	bne.n	8011560 <_printf_common+0xac>
 8011558:	f04f 30ff 	mov.w	r0, #4294967295
 801155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011560:	3501      	adds	r5, #1
 8011562:	e7c6      	b.n	80114f2 <_printf_common+0x3e>
 8011564:	18e1      	adds	r1, r4, r3
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	2030      	movs	r0, #48	; 0x30
 801156a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801156e:	4422      	add	r2, r4
 8011570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011578:	3302      	adds	r3, #2
 801157a:	e7c7      	b.n	801150c <_printf_common+0x58>
 801157c:	2301      	movs	r3, #1
 801157e:	4622      	mov	r2, r4
 8011580:	4649      	mov	r1, r9
 8011582:	4638      	mov	r0, r7
 8011584:	47c0      	blx	r8
 8011586:	3001      	adds	r0, #1
 8011588:	d0e6      	beq.n	8011558 <_printf_common+0xa4>
 801158a:	3601      	adds	r6, #1
 801158c:	e7d9      	b.n	8011542 <_printf_common+0x8e>
	...

08011590 <_printf_i>:
 8011590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011594:	460c      	mov	r4, r1
 8011596:	4691      	mov	r9, r2
 8011598:	7e27      	ldrb	r7, [r4, #24]
 801159a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801159c:	2f78      	cmp	r7, #120	; 0x78
 801159e:	4680      	mov	r8, r0
 80115a0:	469a      	mov	sl, r3
 80115a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115a6:	d807      	bhi.n	80115b8 <_printf_i+0x28>
 80115a8:	2f62      	cmp	r7, #98	; 0x62
 80115aa:	d80a      	bhi.n	80115c2 <_printf_i+0x32>
 80115ac:	2f00      	cmp	r7, #0
 80115ae:	f000 80d8 	beq.w	8011762 <_printf_i+0x1d2>
 80115b2:	2f58      	cmp	r7, #88	; 0x58
 80115b4:	f000 80a3 	beq.w	80116fe <_printf_i+0x16e>
 80115b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80115bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115c0:	e03a      	b.n	8011638 <_printf_i+0xa8>
 80115c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115c6:	2b15      	cmp	r3, #21
 80115c8:	d8f6      	bhi.n	80115b8 <_printf_i+0x28>
 80115ca:	a001      	add	r0, pc, #4	; (adr r0, 80115d0 <_printf_i+0x40>)
 80115cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80115d0:	08011629 	.word	0x08011629
 80115d4:	0801163d 	.word	0x0801163d
 80115d8:	080115b9 	.word	0x080115b9
 80115dc:	080115b9 	.word	0x080115b9
 80115e0:	080115b9 	.word	0x080115b9
 80115e4:	080115b9 	.word	0x080115b9
 80115e8:	0801163d 	.word	0x0801163d
 80115ec:	080115b9 	.word	0x080115b9
 80115f0:	080115b9 	.word	0x080115b9
 80115f4:	080115b9 	.word	0x080115b9
 80115f8:	080115b9 	.word	0x080115b9
 80115fc:	08011749 	.word	0x08011749
 8011600:	0801166d 	.word	0x0801166d
 8011604:	0801172b 	.word	0x0801172b
 8011608:	080115b9 	.word	0x080115b9
 801160c:	080115b9 	.word	0x080115b9
 8011610:	0801176b 	.word	0x0801176b
 8011614:	080115b9 	.word	0x080115b9
 8011618:	0801166d 	.word	0x0801166d
 801161c:	080115b9 	.word	0x080115b9
 8011620:	080115b9 	.word	0x080115b9
 8011624:	08011733 	.word	0x08011733
 8011628:	680b      	ldr	r3, [r1, #0]
 801162a:	1d1a      	adds	r2, r3, #4
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	600a      	str	r2, [r1, #0]
 8011630:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011638:	2301      	movs	r3, #1
 801163a:	e0a3      	b.n	8011784 <_printf_i+0x1f4>
 801163c:	6825      	ldr	r5, [r4, #0]
 801163e:	6808      	ldr	r0, [r1, #0]
 8011640:	062e      	lsls	r6, r5, #24
 8011642:	f100 0304 	add.w	r3, r0, #4
 8011646:	d50a      	bpl.n	801165e <_printf_i+0xce>
 8011648:	6805      	ldr	r5, [r0, #0]
 801164a:	600b      	str	r3, [r1, #0]
 801164c:	2d00      	cmp	r5, #0
 801164e:	da03      	bge.n	8011658 <_printf_i+0xc8>
 8011650:	232d      	movs	r3, #45	; 0x2d
 8011652:	426d      	negs	r5, r5
 8011654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011658:	485e      	ldr	r0, [pc, #376]	; (80117d4 <_printf_i+0x244>)
 801165a:	230a      	movs	r3, #10
 801165c:	e019      	b.n	8011692 <_printf_i+0x102>
 801165e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011662:	6805      	ldr	r5, [r0, #0]
 8011664:	600b      	str	r3, [r1, #0]
 8011666:	bf18      	it	ne
 8011668:	b22d      	sxthne	r5, r5
 801166a:	e7ef      	b.n	801164c <_printf_i+0xbc>
 801166c:	680b      	ldr	r3, [r1, #0]
 801166e:	6825      	ldr	r5, [r4, #0]
 8011670:	1d18      	adds	r0, r3, #4
 8011672:	6008      	str	r0, [r1, #0]
 8011674:	0628      	lsls	r0, r5, #24
 8011676:	d501      	bpl.n	801167c <_printf_i+0xec>
 8011678:	681d      	ldr	r5, [r3, #0]
 801167a:	e002      	b.n	8011682 <_printf_i+0xf2>
 801167c:	0669      	lsls	r1, r5, #25
 801167e:	d5fb      	bpl.n	8011678 <_printf_i+0xe8>
 8011680:	881d      	ldrh	r5, [r3, #0]
 8011682:	4854      	ldr	r0, [pc, #336]	; (80117d4 <_printf_i+0x244>)
 8011684:	2f6f      	cmp	r7, #111	; 0x6f
 8011686:	bf0c      	ite	eq
 8011688:	2308      	moveq	r3, #8
 801168a:	230a      	movne	r3, #10
 801168c:	2100      	movs	r1, #0
 801168e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011692:	6866      	ldr	r6, [r4, #4]
 8011694:	60a6      	str	r6, [r4, #8]
 8011696:	2e00      	cmp	r6, #0
 8011698:	bfa2      	ittt	ge
 801169a:	6821      	ldrge	r1, [r4, #0]
 801169c:	f021 0104 	bicge.w	r1, r1, #4
 80116a0:	6021      	strge	r1, [r4, #0]
 80116a2:	b90d      	cbnz	r5, 80116a8 <_printf_i+0x118>
 80116a4:	2e00      	cmp	r6, #0
 80116a6:	d04d      	beq.n	8011744 <_printf_i+0x1b4>
 80116a8:	4616      	mov	r6, r2
 80116aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80116ae:	fb03 5711 	mls	r7, r3, r1, r5
 80116b2:	5dc7      	ldrb	r7, [r0, r7]
 80116b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116b8:	462f      	mov	r7, r5
 80116ba:	42bb      	cmp	r3, r7
 80116bc:	460d      	mov	r5, r1
 80116be:	d9f4      	bls.n	80116aa <_printf_i+0x11a>
 80116c0:	2b08      	cmp	r3, #8
 80116c2:	d10b      	bne.n	80116dc <_printf_i+0x14c>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	07df      	lsls	r7, r3, #31
 80116c8:	d508      	bpl.n	80116dc <_printf_i+0x14c>
 80116ca:	6923      	ldr	r3, [r4, #16]
 80116cc:	6861      	ldr	r1, [r4, #4]
 80116ce:	4299      	cmp	r1, r3
 80116d0:	bfde      	ittt	le
 80116d2:	2330      	movle	r3, #48	; 0x30
 80116d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80116d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80116dc:	1b92      	subs	r2, r2, r6
 80116de:	6122      	str	r2, [r4, #16]
 80116e0:	f8cd a000 	str.w	sl, [sp]
 80116e4:	464b      	mov	r3, r9
 80116e6:	aa03      	add	r2, sp, #12
 80116e8:	4621      	mov	r1, r4
 80116ea:	4640      	mov	r0, r8
 80116ec:	f7ff fee2 	bl	80114b4 <_printf_common>
 80116f0:	3001      	adds	r0, #1
 80116f2:	d14c      	bne.n	801178e <_printf_i+0x1fe>
 80116f4:	f04f 30ff 	mov.w	r0, #4294967295
 80116f8:	b004      	add	sp, #16
 80116fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fe:	4835      	ldr	r0, [pc, #212]	; (80117d4 <_printf_i+0x244>)
 8011700:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011704:	6823      	ldr	r3, [r4, #0]
 8011706:	680e      	ldr	r6, [r1, #0]
 8011708:	061f      	lsls	r7, r3, #24
 801170a:	f856 5b04 	ldr.w	r5, [r6], #4
 801170e:	600e      	str	r6, [r1, #0]
 8011710:	d514      	bpl.n	801173c <_printf_i+0x1ac>
 8011712:	07d9      	lsls	r1, r3, #31
 8011714:	bf44      	itt	mi
 8011716:	f043 0320 	orrmi.w	r3, r3, #32
 801171a:	6023      	strmi	r3, [r4, #0]
 801171c:	b91d      	cbnz	r5, 8011726 <_printf_i+0x196>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	f023 0320 	bic.w	r3, r3, #32
 8011724:	6023      	str	r3, [r4, #0]
 8011726:	2310      	movs	r3, #16
 8011728:	e7b0      	b.n	801168c <_printf_i+0xfc>
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	f043 0320 	orr.w	r3, r3, #32
 8011730:	6023      	str	r3, [r4, #0]
 8011732:	2378      	movs	r3, #120	; 0x78
 8011734:	4828      	ldr	r0, [pc, #160]	; (80117d8 <_printf_i+0x248>)
 8011736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801173a:	e7e3      	b.n	8011704 <_printf_i+0x174>
 801173c:	065e      	lsls	r6, r3, #25
 801173e:	bf48      	it	mi
 8011740:	b2ad      	uxthmi	r5, r5
 8011742:	e7e6      	b.n	8011712 <_printf_i+0x182>
 8011744:	4616      	mov	r6, r2
 8011746:	e7bb      	b.n	80116c0 <_printf_i+0x130>
 8011748:	680b      	ldr	r3, [r1, #0]
 801174a:	6826      	ldr	r6, [r4, #0]
 801174c:	6960      	ldr	r0, [r4, #20]
 801174e:	1d1d      	adds	r5, r3, #4
 8011750:	600d      	str	r5, [r1, #0]
 8011752:	0635      	lsls	r5, r6, #24
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	d501      	bpl.n	801175c <_printf_i+0x1cc>
 8011758:	6018      	str	r0, [r3, #0]
 801175a:	e002      	b.n	8011762 <_printf_i+0x1d2>
 801175c:	0671      	lsls	r1, r6, #25
 801175e:	d5fb      	bpl.n	8011758 <_printf_i+0x1c8>
 8011760:	8018      	strh	r0, [r3, #0]
 8011762:	2300      	movs	r3, #0
 8011764:	6123      	str	r3, [r4, #16]
 8011766:	4616      	mov	r6, r2
 8011768:	e7ba      	b.n	80116e0 <_printf_i+0x150>
 801176a:	680b      	ldr	r3, [r1, #0]
 801176c:	1d1a      	adds	r2, r3, #4
 801176e:	600a      	str	r2, [r1, #0]
 8011770:	681e      	ldr	r6, [r3, #0]
 8011772:	6862      	ldr	r2, [r4, #4]
 8011774:	2100      	movs	r1, #0
 8011776:	4630      	mov	r0, r6
 8011778:	f7ee fdd2 	bl	8000320 <memchr>
 801177c:	b108      	cbz	r0, 8011782 <_printf_i+0x1f2>
 801177e:	1b80      	subs	r0, r0, r6
 8011780:	6060      	str	r0, [r4, #4]
 8011782:	6863      	ldr	r3, [r4, #4]
 8011784:	6123      	str	r3, [r4, #16]
 8011786:	2300      	movs	r3, #0
 8011788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801178c:	e7a8      	b.n	80116e0 <_printf_i+0x150>
 801178e:	6923      	ldr	r3, [r4, #16]
 8011790:	4632      	mov	r2, r6
 8011792:	4649      	mov	r1, r9
 8011794:	4640      	mov	r0, r8
 8011796:	47d0      	blx	sl
 8011798:	3001      	adds	r0, #1
 801179a:	d0ab      	beq.n	80116f4 <_printf_i+0x164>
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	079b      	lsls	r3, r3, #30
 80117a0:	d413      	bmi.n	80117ca <_printf_i+0x23a>
 80117a2:	68e0      	ldr	r0, [r4, #12]
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	4298      	cmp	r0, r3
 80117a8:	bfb8      	it	lt
 80117aa:	4618      	movlt	r0, r3
 80117ac:	e7a4      	b.n	80116f8 <_printf_i+0x168>
 80117ae:	2301      	movs	r3, #1
 80117b0:	4632      	mov	r2, r6
 80117b2:	4649      	mov	r1, r9
 80117b4:	4640      	mov	r0, r8
 80117b6:	47d0      	blx	sl
 80117b8:	3001      	adds	r0, #1
 80117ba:	d09b      	beq.n	80116f4 <_printf_i+0x164>
 80117bc:	3501      	adds	r5, #1
 80117be:	68e3      	ldr	r3, [r4, #12]
 80117c0:	9903      	ldr	r1, [sp, #12]
 80117c2:	1a5b      	subs	r3, r3, r1
 80117c4:	42ab      	cmp	r3, r5
 80117c6:	dcf2      	bgt.n	80117ae <_printf_i+0x21e>
 80117c8:	e7eb      	b.n	80117a2 <_printf_i+0x212>
 80117ca:	2500      	movs	r5, #0
 80117cc:	f104 0619 	add.w	r6, r4, #25
 80117d0:	e7f5      	b.n	80117be <_printf_i+0x22e>
 80117d2:	bf00      	nop
 80117d4:	080144a6 	.word	0x080144a6
 80117d8:	080144b7 	.word	0x080144b7

080117dc <quorem>:
 80117dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e0:	6903      	ldr	r3, [r0, #16]
 80117e2:	690c      	ldr	r4, [r1, #16]
 80117e4:	42a3      	cmp	r3, r4
 80117e6:	4607      	mov	r7, r0
 80117e8:	f2c0 8081 	blt.w	80118ee <quorem+0x112>
 80117ec:	3c01      	subs	r4, #1
 80117ee:	f101 0814 	add.w	r8, r1, #20
 80117f2:	f100 0514 	add.w	r5, r0, #20
 80117f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117fa:	9301      	str	r3, [sp, #4]
 80117fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011804:	3301      	adds	r3, #1
 8011806:	429a      	cmp	r2, r3
 8011808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801180c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011810:	fbb2 f6f3 	udiv	r6, r2, r3
 8011814:	d331      	bcc.n	801187a <quorem+0x9e>
 8011816:	f04f 0e00 	mov.w	lr, #0
 801181a:	4640      	mov	r0, r8
 801181c:	46ac      	mov	ip, r5
 801181e:	46f2      	mov	sl, lr
 8011820:	f850 2b04 	ldr.w	r2, [r0], #4
 8011824:	b293      	uxth	r3, r2
 8011826:	fb06 e303 	mla	r3, r6, r3, lr
 801182a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801182e:	b29b      	uxth	r3, r3
 8011830:	ebaa 0303 	sub.w	r3, sl, r3
 8011834:	0c12      	lsrs	r2, r2, #16
 8011836:	f8dc a000 	ldr.w	sl, [ip]
 801183a:	fb06 e202 	mla	r2, r6, r2, lr
 801183e:	fa13 f38a 	uxtah	r3, r3, sl
 8011842:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011846:	fa1f fa82 	uxth.w	sl, r2
 801184a:	f8dc 2000 	ldr.w	r2, [ip]
 801184e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011856:	b29b      	uxth	r3, r3
 8011858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801185c:	4581      	cmp	r9, r0
 801185e:	f84c 3b04 	str.w	r3, [ip], #4
 8011862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011866:	d2db      	bcs.n	8011820 <quorem+0x44>
 8011868:	f855 300b 	ldr.w	r3, [r5, fp]
 801186c:	b92b      	cbnz	r3, 801187a <quorem+0x9e>
 801186e:	9b01      	ldr	r3, [sp, #4]
 8011870:	3b04      	subs	r3, #4
 8011872:	429d      	cmp	r5, r3
 8011874:	461a      	mov	r2, r3
 8011876:	d32e      	bcc.n	80118d6 <quorem+0xfa>
 8011878:	613c      	str	r4, [r7, #16]
 801187a:	4638      	mov	r0, r7
 801187c:	f001 f848 	bl	8012910 <__mcmp>
 8011880:	2800      	cmp	r0, #0
 8011882:	db24      	blt.n	80118ce <quorem+0xf2>
 8011884:	3601      	adds	r6, #1
 8011886:	4628      	mov	r0, r5
 8011888:	f04f 0c00 	mov.w	ip, #0
 801188c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011890:	f8d0 e000 	ldr.w	lr, [r0]
 8011894:	b293      	uxth	r3, r2
 8011896:	ebac 0303 	sub.w	r3, ip, r3
 801189a:	0c12      	lsrs	r2, r2, #16
 801189c:	fa13 f38e 	uxtah	r3, r3, lr
 80118a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80118a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80118ae:	45c1      	cmp	r9, r8
 80118b0:	f840 3b04 	str.w	r3, [r0], #4
 80118b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80118b8:	d2e8      	bcs.n	801188c <quorem+0xb0>
 80118ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118c2:	b922      	cbnz	r2, 80118ce <quorem+0xf2>
 80118c4:	3b04      	subs	r3, #4
 80118c6:	429d      	cmp	r5, r3
 80118c8:	461a      	mov	r2, r3
 80118ca:	d30a      	bcc.n	80118e2 <quorem+0x106>
 80118cc:	613c      	str	r4, [r7, #16]
 80118ce:	4630      	mov	r0, r6
 80118d0:	b003      	add	sp, #12
 80118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d6:	6812      	ldr	r2, [r2, #0]
 80118d8:	3b04      	subs	r3, #4
 80118da:	2a00      	cmp	r2, #0
 80118dc:	d1cc      	bne.n	8011878 <quorem+0x9c>
 80118de:	3c01      	subs	r4, #1
 80118e0:	e7c7      	b.n	8011872 <quorem+0x96>
 80118e2:	6812      	ldr	r2, [r2, #0]
 80118e4:	3b04      	subs	r3, #4
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	d1f0      	bne.n	80118cc <quorem+0xf0>
 80118ea:	3c01      	subs	r4, #1
 80118ec:	e7eb      	b.n	80118c6 <quorem+0xea>
 80118ee:	2000      	movs	r0, #0
 80118f0:	e7ee      	b.n	80118d0 <quorem+0xf4>
 80118f2:	0000      	movs	r0, r0
 80118f4:	0000      	movs	r0, r0
	...

080118f8 <_dtoa_r>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	ec59 8b10 	vmov	r8, r9, d0
 8011900:	b095      	sub	sp, #84	; 0x54
 8011902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011904:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8011906:	9107      	str	r1, [sp, #28]
 8011908:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801190c:	4606      	mov	r6, r0
 801190e:	9209      	str	r2, [sp, #36]	; 0x24
 8011910:	9310      	str	r3, [sp, #64]	; 0x40
 8011912:	b975      	cbnz	r5, 8011932 <_dtoa_r+0x3a>
 8011914:	2010      	movs	r0, #16
 8011916:	f000 fd75 	bl	8012404 <malloc>
 801191a:	4602      	mov	r2, r0
 801191c:	6270      	str	r0, [r6, #36]	; 0x24
 801191e:	b920      	cbnz	r0, 801192a <_dtoa_r+0x32>
 8011920:	4bab      	ldr	r3, [pc, #684]	; (8011bd0 <_dtoa_r+0x2d8>)
 8011922:	21ea      	movs	r1, #234	; 0xea
 8011924:	48ab      	ldr	r0, [pc, #684]	; (8011bd4 <_dtoa_r+0x2dc>)
 8011926:	f001 f9bd 	bl	8012ca4 <__assert_func>
 801192a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801192e:	6005      	str	r5, [r0, #0]
 8011930:	60c5      	str	r5, [r0, #12]
 8011932:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011934:	6819      	ldr	r1, [r3, #0]
 8011936:	b151      	cbz	r1, 801194e <_dtoa_r+0x56>
 8011938:	685a      	ldr	r2, [r3, #4]
 801193a:	604a      	str	r2, [r1, #4]
 801193c:	2301      	movs	r3, #1
 801193e:	4093      	lsls	r3, r2
 8011940:	608b      	str	r3, [r1, #8]
 8011942:	4630      	mov	r0, r6
 8011944:	f000 fda6 	bl	8012494 <_Bfree>
 8011948:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801194a:	2200      	movs	r2, #0
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	f1b9 0300 	subs.w	r3, r9, #0
 8011952:	bfbb      	ittet	lt
 8011954:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011958:	9303      	strlt	r3, [sp, #12]
 801195a:	2300      	movge	r3, #0
 801195c:	2201      	movlt	r2, #1
 801195e:	bfac      	ite	ge
 8011960:	6023      	strge	r3, [r4, #0]
 8011962:	6022      	strlt	r2, [r4, #0]
 8011964:	4b9c      	ldr	r3, [pc, #624]	; (8011bd8 <_dtoa_r+0x2e0>)
 8011966:	9c03      	ldr	r4, [sp, #12]
 8011968:	43a3      	bics	r3, r4
 801196a:	d11a      	bne.n	80119a2 <_dtoa_r+0xaa>
 801196c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801196e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011972:	6013      	str	r3, [r2, #0]
 8011974:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011978:	ea53 0308 	orrs.w	r3, r3, r8
 801197c:	f000 8512 	beq.w	80123a4 <_dtoa_r+0xaac>
 8011980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011982:	b953      	cbnz	r3, 801199a <_dtoa_r+0xa2>
 8011984:	4b95      	ldr	r3, [pc, #596]	; (8011bdc <_dtoa_r+0x2e4>)
 8011986:	e01f      	b.n	80119c8 <_dtoa_r+0xd0>
 8011988:	4b95      	ldr	r3, [pc, #596]	; (8011be0 <_dtoa_r+0x2e8>)
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	3308      	adds	r3, #8
 801198e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011990:	6013      	str	r3, [r2, #0]
 8011992:	9800      	ldr	r0, [sp, #0]
 8011994:	b015      	add	sp, #84	; 0x54
 8011996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199a:	4b90      	ldr	r3, [pc, #576]	; (8011bdc <_dtoa_r+0x2e4>)
 801199c:	9300      	str	r3, [sp, #0]
 801199e:	3303      	adds	r3, #3
 80119a0:	e7f5      	b.n	801198e <_dtoa_r+0x96>
 80119a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80119a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80119b2:	d10b      	bne.n	80119cc <_dtoa_r+0xd4>
 80119b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119b6:	2301      	movs	r3, #1
 80119b8:	6013      	str	r3, [r2, #0]
 80119ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f000 84ee 	beq.w	801239e <_dtoa_r+0xaa6>
 80119c2:	4888      	ldr	r0, [pc, #544]	; (8011be4 <_dtoa_r+0x2ec>)
 80119c4:	6018      	str	r0, [r3, #0]
 80119c6:	1e43      	subs	r3, r0, #1
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	e7e2      	b.n	8011992 <_dtoa_r+0x9a>
 80119cc:	a913      	add	r1, sp, #76	; 0x4c
 80119ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80119d2:	aa12      	add	r2, sp, #72	; 0x48
 80119d4:	4630      	mov	r0, r6
 80119d6:	f001 f83f 	bl	8012a58 <__d2b>
 80119da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80119de:	4605      	mov	r5, r0
 80119e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80119e2:	2900      	cmp	r1, #0
 80119e4:	d047      	beq.n	8011a76 <_dtoa_r+0x17e>
 80119e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80119e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80119ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80119f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80119f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80119f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80119fc:	2400      	movs	r4, #0
 80119fe:	ec43 2b16 	vmov	d6, r2, r3
 8011a02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011a06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011bb8 <_dtoa_r+0x2c0>
 8011a0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011a0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011bc0 <_dtoa_r+0x2c8>
 8011a12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011a16:	eeb0 7b46 	vmov.f64	d7, d6
 8011a1a:	ee06 1a90 	vmov	s13, r1
 8011a1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011a22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011bc8 <_dtoa_r+0x2d0>
 8011a26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011a2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011a2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a36:	ee16 ba90 	vmov	fp, s13
 8011a3a:	9411      	str	r4, [sp, #68]	; 0x44
 8011a3c:	d508      	bpl.n	8011a50 <_dtoa_r+0x158>
 8011a3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8011a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4a:	bf18      	it	ne
 8011a4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011a50:	f1bb 0f16 	cmp.w	fp, #22
 8011a54:	d832      	bhi.n	8011abc <_dtoa_r+0x1c4>
 8011a56:	4b64      	ldr	r3, [pc, #400]	; (8011be8 <_dtoa_r+0x2f0>)
 8011a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011a5c:	ed93 7b00 	vldr	d7, [r3]
 8011a60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011a64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6c:	d501      	bpl.n	8011a72 <_dtoa_r+0x17a>
 8011a6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a72:	2300      	movs	r3, #0
 8011a74:	e023      	b.n	8011abe <_dtoa_r+0x1c6>
 8011a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011a78:	4401      	add	r1, r0
 8011a7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011a7e:	2b20      	cmp	r3, #32
 8011a80:	bfc3      	ittte	gt
 8011a82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011a86:	fa04 f303 	lslgt.w	r3, r4, r3
 8011a8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011a8e:	f1c3 0320 	rsble	r3, r3, #32
 8011a92:	bfc6      	itte	gt
 8011a94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011a98:	ea43 0308 	orrgt.w	r3, r3, r8
 8011a9c:	fa08 f303 	lslle.w	r3, r8, r3
 8011aa0:	ee07 3a90 	vmov	s15, r3
 8011aa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011aa8:	3901      	subs	r1, #1
 8011aaa:	ed8d 7b00 	vstr	d7, [sp]
 8011aae:	9c01      	ldr	r4, [sp, #4]
 8011ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ab4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011ab8:	2401      	movs	r4, #1
 8011aba:	e7a0      	b.n	80119fe <_dtoa_r+0x106>
 8011abc:	2301      	movs	r3, #1
 8011abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ac0:	1a43      	subs	r3, r0, r1
 8011ac2:	1e5a      	subs	r2, r3, #1
 8011ac4:	bf45      	ittet	mi
 8011ac6:	f1c3 0301 	rsbmi	r3, r3, #1
 8011aca:	9305      	strmi	r3, [sp, #20]
 8011acc:	2300      	movpl	r3, #0
 8011ace:	2300      	movmi	r3, #0
 8011ad0:	9206      	str	r2, [sp, #24]
 8011ad2:	bf54      	ite	pl
 8011ad4:	9305      	strpl	r3, [sp, #20]
 8011ad6:	9306      	strmi	r3, [sp, #24]
 8011ad8:	f1bb 0f00 	cmp.w	fp, #0
 8011adc:	db18      	blt.n	8011b10 <_dtoa_r+0x218>
 8011ade:	9b06      	ldr	r3, [sp, #24]
 8011ae0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011ae4:	445b      	add	r3, fp
 8011ae6:	9306      	str	r3, [sp, #24]
 8011ae8:	2300      	movs	r3, #0
 8011aea:	9a07      	ldr	r2, [sp, #28]
 8011aec:	2a09      	cmp	r2, #9
 8011aee:	d849      	bhi.n	8011b84 <_dtoa_r+0x28c>
 8011af0:	2a05      	cmp	r2, #5
 8011af2:	bfc4      	itt	gt
 8011af4:	3a04      	subgt	r2, #4
 8011af6:	9207      	strgt	r2, [sp, #28]
 8011af8:	9a07      	ldr	r2, [sp, #28]
 8011afa:	f1a2 0202 	sub.w	r2, r2, #2
 8011afe:	bfcc      	ite	gt
 8011b00:	2400      	movgt	r4, #0
 8011b02:	2401      	movle	r4, #1
 8011b04:	2a03      	cmp	r2, #3
 8011b06:	d848      	bhi.n	8011b9a <_dtoa_r+0x2a2>
 8011b08:	e8df f002 	tbb	[pc, r2]
 8011b0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011b10:	9b05      	ldr	r3, [sp, #20]
 8011b12:	2200      	movs	r2, #0
 8011b14:	eba3 030b 	sub.w	r3, r3, fp
 8011b18:	9305      	str	r3, [sp, #20]
 8011b1a:	920e      	str	r2, [sp, #56]	; 0x38
 8011b1c:	f1cb 0300 	rsb	r3, fp, #0
 8011b20:	e7e3      	b.n	8011aea <_dtoa_r+0x1f2>
 8011b22:	2200      	movs	r2, #0
 8011b24:	9208      	str	r2, [sp, #32]
 8011b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b28:	2a00      	cmp	r2, #0
 8011b2a:	dc39      	bgt.n	8011ba0 <_dtoa_r+0x2a8>
 8011b2c:	f04f 0a01 	mov.w	sl, #1
 8011b30:	46d1      	mov	r9, sl
 8011b32:	4652      	mov	r2, sl
 8011b34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011b38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011b3a:	2100      	movs	r1, #0
 8011b3c:	6079      	str	r1, [r7, #4]
 8011b3e:	2004      	movs	r0, #4
 8011b40:	f100 0c14 	add.w	ip, r0, #20
 8011b44:	4594      	cmp	ip, r2
 8011b46:	6879      	ldr	r1, [r7, #4]
 8011b48:	d92f      	bls.n	8011baa <_dtoa_r+0x2b2>
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8011b4e:	f000 fc61 	bl	8012414 <_Balloc>
 8011b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b54:	9000      	str	r0, [sp, #0]
 8011b56:	4602      	mov	r2, r0
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d149      	bne.n	8011bf0 <_dtoa_r+0x2f8>
 8011b5c:	4b23      	ldr	r3, [pc, #140]	; (8011bec <_dtoa_r+0x2f4>)
 8011b5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011b62:	e6df      	b.n	8011924 <_dtoa_r+0x2c>
 8011b64:	2201      	movs	r2, #1
 8011b66:	e7dd      	b.n	8011b24 <_dtoa_r+0x22c>
 8011b68:	2200      	movs	r2, #0
 8011b6a:	9208      	str	r2, [sp, #32]
 8011b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b6e:	eb0b 0a02 	add.w	sl, fp, r2
 8011b72:	f10a 0901 	add.w	r9, sl, #1
 8011b76:	464a      	mov	r2, r9
 8011b78:	2a01      	cmp	r2, #1
 8011b7a:	bfb8      	it	lt
 8011b7c:	2201      	movlt	r2, #1
 8011b7e:	e7db      	b.n	8011b38 <_dtoa_r+0x240>
 8011b80:	2201      	movs	r2, #1
 8011b82:	e7f2      	b.n	8011b6a <_dtoa_r+0x272>
 8011b84:	2401      	movs	r4, #1
 8011b86:	2200      	movs	r2, #0
 8011b88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8011b90:	2100      	movs	r1, #0
 8011b92:	46d1      	mov	r9, sl
 8011b94:	2212      	movs	r2, #18
 8011b96:	9109      	str	r1, [sp, #36]	; 0x24
 8011b98:	e7ce      	b.n	8011b38 <_dtoa_r+0x240>
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	9208      	str	r2, [sp, #32]
 8011b9e:	e7f5      	b.n	8011b8c <_dtoa_r+0x294>
 8011ba0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011ba4:	46d1      	mov	r9, sl
 8011ba6:	4652      	mov	r2, sl
 8011ba8:	e7c6      	b.n	8011b38 <_dtoa_r+0x240>
 8011baa:	3101      	adds	r1, #1
 8011bac:	6079      	str	r1, [r7, #4]
 8011bae:	0040      	lsls	r0, r0, #1
 8011bb0:	e7c6      	b.n	8011b40 <_dtoa_r+0x248>
 8011bb2:	bf00      	nop
 8011bb4:	f3af 8000 	nop.w
 8011bb8:	636f4361 	.word	0x636f4361
 8011bbc:	3fd287a7 	.word	0x3fd287a7
 8011bc0:	8b60c8b3 	.word	0x8b60c8b3
 8011bc4:	3fc68a28 	.word	0x3fc68a28
 8011bc8:	509f79fb 	.word	0x509f79fb
 8011bcc:	3fd34413 	.word	0x3fd34413
 8011bd0:	080144d5 	.word	0x080144d5
 8011bd4:	080144ec 	.word	0x080144ec
 8011bd8:	7ff00000 	.word	0x7ff00000
 8011bdc:	080144d1 	.word	0x080144d1
 8011be0:	080144c8 	.word	0x080144c8
 8011be4:	080144a5 	.word	0x080144a5
 8011be8:	080145e8 	.word	0x080145e8
 8011bec:	0801454b 	.word	0x0801454b
 8011bf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011bf2:	9900      	ldr	r1, [sp, #0]
 8011bf4:	6011      	str	r1, [r2, #0]
 8011bf6:	f1b9 0f0e 	cmp.w	r9, #14
 8011bfa:	d872      	bhi.n	8011ce2 <_dtoa_r+0x3ea>
 8011bfc:	2c00      	cmp	r4, #0
 8011bfe:	d070      	beq.n	8011ce2 <_dtoa_r+0x3ea>
 8011c00:	f1bb 0f00 	cmp.w	fp, #0
 8011c04:	f340 80a6 	ble.w	8011d54 <_dtoa_r+0x45c>
 8011c08:	49ca      	ldr	r1, [pc, #808]	; (8011f34 <_dtoa_r+0x63c>)
 8011c0a:	f00b 020f 	and.w	r2, fp, #15
 8011c0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011c12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011c16:	ed92 7b00 	vldr	d7, [r2]
 8011c1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011c1e:	f000 808d 	beq.w	8011d3c <_dtoa_r+0x444>
 8011c22:	4ac5      	ldr	r2, [pc, #788]	; (8011f38 <_dtoa_r+0x640>)
 8011c24:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011c28:	ed92 6b08 	vldr	d6, [r2, #32]
 8011c2c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011c34:	f001 010f 	and.w	r1, r1, #15
 8011c38:	2203      	movs	r2, #3
 8011c3a:	48bf      	ldr	r0, [pc, #764]	; (8011f38 <_dtoa_r+0x640>)
 8011c3c:	2900      	cmp	r1, #0
 8011c3e:	d17f      	bne.n	8011d40 <_dtoa_r+0x448>
 8011c40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011c44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c4e:	2900      	cmp	r1, #0
 8011c50:	f000 80b2 	beq.w	8011db8 <_dtoa_r+0x4c0>
 8011c54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	f140 80a8 	bpl.w	8011db8 <_dtoa_r+0x4c0>
 8011c68:	f1b9 0f00 	cmp.w	r9, #0
 8011c6c:	f000 80a4 	beq.w	8011db8 <_dtoa_r+0x4c0>
 8011c70:	f1ba 0f00 	cmp.w	sl, #0
 8011c74:	dd31      	ble.n	8011cda <_dtoa_r+0x3e2>
 8011c76:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011c86:	3201      	adds	r2, #1
 8011c88:	4650      	mov	r0, sl
 8011c8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011c8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011c92:	ee07 2a90 	vmov	s15, r2
 8011c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011c9e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011ca2:	9c03      	ldr	r4, [sp, #12]
 8011ca4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011ca8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011cac:	2800      	cmp	r0, #0
 8011cae:	f040 8086 	bne.w	8011dbe <_dtoa_r+0x4c6>
 8011cb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011cb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011cba:	ec42 1b17 	vmov	d7, r1, r2
 8011cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc6:	f300 8272 	bgt.w	80121ae <_dtoa_r+0x8b6>
 8011cca:	eeb1 7b47 	vneg.f64	d7, d7
 8011cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd6:	f100 8267 	bmi.w	80121a8 <_dtoa_r+0x8b0>
 8011cda:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011cde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011ce4:	2a00      	cmp	r2, #0
 8011ce6:	f2c0 8129 	blt.w	8011f3c <_dtoa_r+0x644>
 8011cea:	f1bb 0f0e 	cmp.w	fp, #14
 8011cee:	f300 8125 	bgt.w	8011f3c <_dtoa_r+0x644>
 8011cf2:	4b90      	ldr	r3, [pc, #576]	; (8011f34 <_dtoa_r+0x63c>)
 8011cf4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011cf8:	ed93 6b00 	vldr	d6, [r3]
 8011cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f280 80c3 	bge.w	8011e8a <_dtoa_r+0x592>
 8011d04:	f1b9 0f00 	cmp.w	r9, #0
 8011d08:	f300 80bf 	bgt.w	8011e8a <_dtoa_r+0x592>
 8011d0c:	f040 824c 	bne.w	80121a8 <_dtoa_r+0x8b0>
 8011d10:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d24:	464c      	mov	r4, r9
 8011d26:	464f      	mov	r7, r9
 8011d28:	f280 8222 	bge.w	8012170 <_dtoa_r+0x878>
 8011d2c:	f8dd 8000 	ldr.w	r8, [sp]
 8011d30:	2331      	movs	r3, #49	; 0x31
 8011d32:	f808 3b01 	strb.w	r3, [r8], #1
 8011d36:	f10b 0b01 	add.w	fp, fp, #1
 8011d3a:	e21e      	b.n	801217a <_dtoa_r+0x882>
 8011d3c:	2202      	movs	r2, #2
 8011d3e:	e77c      	b.n	8011c3a <_dtoa_r+0x342>
 8011d40:	07cc      	lsls	r4, r1, #31
 8011d42:	d504      	bpl.n	8011d4e <_dtoa_r+0x456>
 8011d44:	ed90 6b00 	vldr	d6, [r0]
 8011d48:	3201      	adds	r2, #1
 8011d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d4e:	1049      	asrs	r1, r1, #1
 8011d50:	3008      	adds	r0, #8
 8011d52:	e773      	b.n	8011c3c <_dtoa_r+0x344>
 8011d54:	d02e      	beq.n	8011db4 <_dtoa_r+0x4bc>
 8011d56:	f1cb 0100 	rsb	r1, fp, #0
 8011d5a:	4a76      	ldr	r2, [pc, #472]	; (8011f34 <_dtoa_r+0x63c>)
 8011d5c:	f001 000f 	and.w	r0, r1, #15
 8011d60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011d64:	ed92 7b00 	vldr	d7, [r2]
 8011d68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011d6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011d70:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011d74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011d78:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011d7c:	486e      	ldr	r0, [pc, #440]	; (8011f38 <_dtoa_r+0x640>)
 8011d7e:	1109      	asrs	r1, r1, #4
 8011d80:	2400      	movs	r4, #0
 8011d82:	2202      	movs	r2, #2
 8011d84:	b939      	cbnz	r1, 8011d96 <_dtoa_r+0x49e>
 8011d86:	2c00      	cmp	r4, #0
 8011d88:	f43f af60 	beq.w	8011c4c <_dtoa_r+0x354>
 8011d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d94:	e75a      	b.n	8011c4c <_dtoa_r+0x354>
 8011d96:	07cf      	lsls	r7, r1, #31
 8011d98:	d509      	bpl.n	8011dae <_dtoa_r+0x4b6>
 8011d9a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011d9e:	ed90 7b00 	vldr	d7, [r0]
 8011da2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011da6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011daa:	3201      	adds	r2, #1
 8011dac:	2401      	movs	r4, #1
 8011dae:	1049      	asrs	r1, r1, #1
 8011db0:	3008      	adds	r0, #8
 8011db2:	e7e7      	b.n	8011d84 <_dtoa_r+0x48c>
 8011db4:	2202      	movs	r2, #2
 8011db6:	e749      	b.n	8011c4c <_dtoa_r+0x354>
 8011db8:	465f      	mov	r7, fp
 8011dba:	4648      	mov	r0, r9
 8011dbc:	e765      	b.n	8011c8a <_dtoa_r+0x392>
 8011dbe:	ec42 1b17 	vmov	d7, r1, r2
 8011dc2:	4a5c      	ldr	r2, [pc, #368]	; (8011f34 <_dtoa_r+0x63c>)
 8011dc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011dc8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011dcc:	9a00      	ldr	r2, [sp, #0]
 8011dce:	1814      	adds	r4, r2, r0
 8011dd0:	9a08      	ldr	r2, [sp, #32]
 8011dd2:	b352      	cbz	r2, 8011e2a <_dtoa_r+0x532>
 8011dd4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011dd8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011ddc:	f8dd 8000 	ldr.w	r8, [sp]
 8011de0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011de4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011de8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011dec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011df0:	ee14 2a90 	vmov	r2, s9
 8011df4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011df8:	3230      	adds	r2, #48	; 0x30
 8011dfa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	f808 2b01 	strb.w	r2, [r8], #1
 8011e0a:	d439      	bmi.n	8011e80 <_dtoa_r+0x588>
 8011e0c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011e10:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e18:	d472      	bmi.n	8011f00 <_dtoa_r+0x608>
 8011e1a:	45a0      	cmp	r8, r4
 8011e1c:	f43f af5d 	beq.w	8011cda <_dtoa_r+0x3e2>
 8011e20:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011e24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011e28:	e7e0      	b.n	8011dec <_dtoa_r+0x4f4>
 8011e2a:	f8dd 8000 	ldr.w	r8, [sp]
 8011e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e32:	4621      	mov	r1, r4
 8011e34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011e38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011e3c:	ee14 2a90 	vmov	r2, s9
 8011e40:	3230      	adds	r2, #48	; 0x30
 8011e42:	f808 2b01 	strb.w	r2, [r8], #1
 8011e46:	45a0      	cmp	r8, r4
 8011e48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011e4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011e50:	d118      	bne.n	8011e84 <_dtoa_r+0x58c>
 8011e52:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011e56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011e5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e62:	dc4d      	bgt.n	8011f00 <_dtoa_r+0x608>
 8011e64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e70:	f57f af33 	bpl.w	8011cda <_dtoa_r+0x3e2>
 8011e74:	4688      	mov	r8, r1
 8011e76:	3901      	subs	r1, #1
 8011e78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011e7c:	2b30      	cmp	r3, #48	; 0x30
 8011e7e:	d0f9      	beq.n	8011e74 <_dtoa_r+0x57c>
 8011e80:	46bb      	mov	fp, r7
 8011e82:	e02a      	b.n	8011eda <_dtoa_r+0x5e2>
 8011e84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011e88:	e7d6      	b.n	8011e38 <_dtoa_r+0x540>
 8011e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011e92:	f8dd 8000 	ldr.w	r8, [sp]
 8011e96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011e9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011e9e:	ee15 3a10 	vmov	r3, s10
 8011ea2:	3330      	adds	r3, #48	; 0x30
 8011ea4:	f808 3b01 	strb.w	r3, [r8], #1
 8011ea8:	9b00      	ldr	r3, [sp, #0]
 8011eaa:	eba8 0303 	sub.w	r3, r8, r3
 8011eae:	4599      	cmp	r9, r3
 8011eb0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011eb4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011eb8:	d133      	bne.n	8011f22 <_dtoa_r+0x62a>
 8011eba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec6:	dc1a      	bgt.n	8011efe <_dtoa_r+0x606>
 8011ec8:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed0:	d103      	bne.n	8011eda <_dtoa_r+0x5e2>
 8011ed2:	ee15 3a10 	vmov	r3, s10
 8011ed6:	07d9      	lsls	r1, r3, #31
 8011ed8:	d411      	bmi.n	8011efe <_dtoa_r+0x606>
 8011eda:	4629      	mov	r1, r5
 8011edc:	4630      	mov	r0, r6
 8011ede:	f000 fad9 	bl	8012494 <_Bfree>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ee6:	f888 3000 	strb.w	r3, [r8]
 8011eea:	f10b 0301 	add.w	r3, fp, #1
 8011eee:	6013      	str	r3, [r2, #0]
 8011ef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	f43f ad4d 	beq.w	8011992 <_dtoa_r+0x9a>
 8011ef8:	f8c3 8000 	str.w	r8, [r3]
 8011efc:	e549      	b.n	8011992 <_dtoa_r+0x9a>
 8011efe:	465f      	mov	r7, fp
 8011f00:	4643      	mov	r3, r8
 8011f02:	4698      	mov	r8, r3
 8011f04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f08:	2a39      	cmp	r2, #57	; 0x39
 8011f0a:	d106      	bne.n	8011f1a <_dtoa_r+0x622>
 8011f0c:	9a00      	ldr	r2, [sp, #0]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d1f7      	bne.n	8011f02 <_dtoa_r+0x60a>
 8011f12:	9900      	ldr	r1, [sp, #0]
 8011f14:	2230      	movs	r2, #48	; 0x30
 8011f16:	3701      	adds	r7, #1
 8011f18:	700a      	strb	r2, [r1, #0]
 8011f1a:	781a      	ldrb	r2, [r3, #0]
 8011f1c:	3201      	adds	r2, #1
 8011f1e:	701a      	strb	r2, [r3, #0]
 8011f20:	e7ae      	b.n	8011e80 <_dtoa_r+0x588>
 8011f22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011f26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2e:	d1b2      	bne.n	8011e96 <_dtoa_r+0x59e>
 8011f30:	e7d3      	b.n	8011eda <_dtoa_r+0x5e2>
 8011f32:	bf00      	nop
 8011f34:	080145e8 	.word	0x080145e8
 8011f38:	080145c0 	.word	0x080145c0
 8011f3c:	9908      	ldr	r1, [sp, #32]
 8011f3e:	2900      	cmp	r1, #0
 8011f40:	f000 80d1 	beq.w	80120e6 <_dtoa_r+0x7ee>
 8011f44:	9907      	ldr	r1, [sp, #28]
 8011f46:	2901      	cmp	r1, #1
 8011f48:	f300 80b4 	bgt.w	80120b4 <_dtoa_r+0x7bc>
 8011f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f4e:	2900      	cmp	r1, #0
 8011f50:	f000 80ac 	beq.w	80120ac <_dtoa_r+0x7b4>
 8011f54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011f5c:	461c      	mov	r4, r3
 8011f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8011f60:	9b05      	ldr	r3, [sp, #20]
 8011f62:	4413      	add	r3, r2
 8011f64:	9305      	str	r3, [sp, #20]
 8011f66:	9b06      	ldr	r3, [sp, #24]
 8011f68:	2101      	movs	r1, #1
 8011f6a:	4413      	add	r3, r2
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	9306      	str	r3, [sp, #24]
 8011f70:	f000 fb4c 	bl	801260c <__i2b>
 8011f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f76:	4607      	mov	r7, r0
 8011f78:	f1b8 0f00 	cmp.w	r8, #0
 8011f7c:	dd0d      	ble.n	8011f9a <_dtoa_r+0x6a2>
 8011f7e:	9a06      	ldr	r2, [sp, #24]
 8011f80:	2a00      	cmp	r2, #0
 8011f82:	dd0a      	ble.n	8011f9a <_dtoa_r+0x6a2>
 8011f84:	4542      	cmp	r2, r8
 8011f86:	9905      	ldr	r1, [sp, #20]
 8011f88:	bfa8      	it	ge
 8011f8a:	4642      	movge	r2, r8
 8011f8c:	1a89      	subs	r1, r1, r2
 8011f8e:	9105      	str	r1, [sp, #20]
 8011f90:	9906      	ldr	r1, [sp, #24]
 8011f92:	eba8 0802 	sub.w	r8, r8, r2
 8011f96:	1a8a      	subs	r2, r1, r2
 8011f98:	9206      	str	r2, [sp, #24]
 8011f9a:	b303      	cbz	r3, 8011fde <_dtoa_r+0x6e6>
 8011f9c:	9a08      	ldr	r2, [sp, #32]
 8011f9e:	2a00      	cmp	r2, #0
 8011fa0:	f000 80a6 	beq.w	80120f0 <_dtoa_r+0x7f8>
 8011fa4:	2c00      	cmp	r4, #0
 8011fa6:	dd13      	ble.n	8011fd0 <_dtoa_r+0x6d8>
 8011fa8:	4639      	mov	r1, r7
 8011faa:	4622      	mov	r2, r4
 8011fac:	4630      	mov	r0, r6
 8011fae:	930c      	str	r3, [sp, #48]	; 0x30
 8011fb0:	f000 fbe8 	bl	8012784 <__pow5mult>
 8011fb4:	462a      	mov	r2, r5
 8011fb6:	4601      	mov	r1, r0
 8011fb8:	4607      	mov	r7, r0
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f000 fb3c 	bl	8012638 <__multiply>
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	900a      	str	r0, [sp, #40]	; 0x28
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	f000 fa65 	bl	8012494 <_Bfree>
 8011fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fce:	4615      	mov	r5, r2
 8011fd0:	1b1a      	subs	r2, r3, r4
 8011fd2:	d004      	beq.n	8011fde <_dtoa_r+0x6e6>
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	f000 fbd4 	bl	8012784 <__pow5mult>
 8011fdc:	4605      	mov	r5, r0
 8011fde:	2101      	movs	r1, #1
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f000 fb13 	bl	801260c <__i2b>
 8011fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	4604      	mov	r4, r0
 8011fec:	f340 8082 	ble.w	80120f4 <_dtoa_r+0x7fc>
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	4601      	mov	r1, r0
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f000 fbc5 	bl	8012784 <__pow5mult>
 8011ffa:	9b07      	ldr	r3, [sp, #28]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	4604      	mov	r4, r0
 8012000:	dd7b      	ble.n	80120fa <_dtoa_r+0x802>
 8012002:	2300      	movs	r3, #0
 8012004:	930a      	str	r3, [sp, #40]	; 0x28
 8012006:	6922      	ldr	r2, [r4, #16]
 8012008:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801200c:	6910      	ldr	r0, [r2, #16]
 801200e:	f000 faad 	bl	801256c <__hi0bits>
 8012012:	f1c0 0020 	rsb	r0, r0, #32
 8012016:	9b06      	ldr	r3, [sp, #24]
 8012018:	4418      	add	r0, r3
 801201a:	f010 001f 	ands.w	r0, r0, #31
 801201e:	f000 808d 	beq.w	801213c <_dtoa_r+0x844>
 8012022:	f1c0 0220 	rsb	r2, r0, #32
 8012026:	2a04      	cmp	r2, #4
 8012028:	f340 8086 	ble.w	8012138 <_dtoa_r+0x840>
 801202c:	f1c0 001c 	rsb	r0, r0, #28
 8012030:	9b05      	ldr	r3, [sp, #20]
 8012032:	4403      	add	r3, r0
 8012034:	9305      	str	r3, [sp, #20]
 8012036:	9b06      	ldr	r3, [sp, #24]
 8012038:	4403      	add	r3, r0
 801203a:	4480      	add	r8, r0
 801203c:	9306      	str	r3, [sp, #24]
 801203e:	9b05      	ldr	r3, [sp, #20]
 8012040:	2b00      	cmp	r3, #0
 8012042:	dd05      	ble.n	8012050 <_dtoa_r+0x758>
 8012044:	4629      	mov	r1, r5
 8012046:	461a      	mov	r2, r3
 8012048:	4630      	mov	r0, r6
 801204a:	f000 fbf5 	bl	8012838 <__lshift>
 801204e:	4605      	mov	r5, r0
 8012050:	9b06      	ldr	r3, [sp, #24]
 8012052:	2b00      	cmp	r3, #0
 8012054:	dd05      	ble.n	8012062 <_dtoa_r+0x76a>
 8012056:	4621      	mov	r1, r4
 8012058:	461a      	mov	r2, r3
 801205a:	4630      	mov	r0, r6
 801205c:	f000 fbec 	bl	8012838 <__lshift>
 8012060:	4604      	mov	r4, r0
 8012062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012064:	2b00      	cmp	r3, #0
 8012066:	d06b      	beq.n	8012140 <_dtoa_r+0x848>
 8012068:	4621      	mov	r1, r4
 801206a:	4628      	mov	r0, r5
 801206c:	f000 fc50 	bl	8012910 <__mcmp>
 8012070:	2800      	cmp	r0, #0
 8012072:	da65      	bge.n	8012140 <_dtoa_r+0x848>
 8012074:	2300      	movs	r3, #0
 8012076:	4629      	mov	r1, r5
 8012078:	220a      	movs	r2, #10
 801207a:	4630      	mov	r0, r6
 801207c:	f000 fa2c 	bl	80124d8 <__multadd>
 8012080:	9b08      	ldr	r3, [sp, #32]
 8012082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012086:	4605      	mov	r5, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 8192 	beq.w	80123b2 <_dtoa_r+0xaba>
 801208e:	4639      	mov	r1, r7
 8012090:	2300      	movs	r3, #0
 8012092:	220a      	movs	r2, #10
 8012094:	4630      	mov	r0, r6
 8012096:	f000 fa1f 	bl	80124d8 <__multadd>
 801209a:	f1ba 0f00 	cmp.w	sl, #0
 801209e:	4607      	mov	r7, r0
 80120a0:	f300 808e 	bgt.w	80121c0 <_dtoa_r+0x8c8>
 80120a4:	9b07      	ldr	r3, [sp, #28]
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	dc51      	bgt.n	801214e <_dtoa_r+0x856>
 80120aa:	e089      	b.n	80121c0 <_dtoa_r+0x8c8>
 80120ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80120b2:	e751      	b.n	8011f58 <_dtoa_r+0x660>
 80120b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80120b8:	42a3      	cmp	r3, r4
 80120ba:	bfbf      	itttt	lt
 80120bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80120be:	1ae3      	sublt	r3, r4, r3
 80120c0:	18d2      	addlt	r2, r2, r3
 80120c2:	4613      	movlt	r3, r2
 80120c4:	bfb7      	itett	lt
 80120c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80120c8:	1b1c      	subge	r4, r3, r4
 80120ca:	4623      	movlt	r3, r4
 80120cc:	2400      	movlt	r4, #0
 80120ce:	f1b9 0f00 	cmp.w	r9, #0
 80120d2:	bfb5      	itete	lt
 80120d4:	9a05      	ldrlt	r2, [sp, #20]
 80120d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80120da:	eba2 0809 	sublt.w	r8, r2, r9
 80120de:	464a      	movge	r2, r9
 80120e0:	bfb8      	it	lt
 80120e2:	2200      	movlt	r2, #0
 80120e4:	e73b      	b.n	8011f5e <_dtoa_r+0x666>
 80120e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80120ea:	9f08      	ldr	r7, [sp, #32]
 80120ec:	461c      	mov	r4, r3
 80120ee:	e743      	b.n	8011f78 <_dtoa_r+0x680>
 80120f0:	461a      	mov	r2, r3
 80120f2:	e76f      	b.n	8011fd4 <_dtoa_r+0x6dc>
 80120f4:	9b07      	ldr	r3, [sp, #28]
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	dc18      	bgt.n	801212c <_dtoa_r+0x834>
 80120fa:	9b02      	ldr	r3, [sp, #8]
 80120fc:	b9b3      	cbnz	r3, 801212c <_dtoa_r+0x834>
 80120fe:	9b03      	ldr	r3, [sp, #12]
 8012100:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012104:	b9a2      	cbnz	r2, 8012130 <_dtoa_r+0x838>
 8012106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801210a:	0d12      	lsrs	r2, r2, #20
 801210c:	0512      	lsls	r2, r2, #20
 801210e:	b18a      	cbz	r2, 8012134 <_dtoa_r+0x83c>
 8012110:	9b05      	ldr	r3, [sp, #20]
 8012112:	3301      	adds	r3, #1
 8012114:	9305      	str	r3, [sp, #20]
 8012116:	9b06      	ldr	r3, [sp, #24]
 8012118:	3301      	adds	r3, #1
 801211a:	9306      	str	r3, [sp, #24]
 801211c:	2301      	movs	r3, #1
 801211e:	930a      	str	r3, [sp, #40]	; 0x28
 8012120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012122:	2b00      	cmp	r3, #0
 8012124:	f47f af6f 	bne.w	8012006 <_dtoa_r+0x70e>
 8012128:	2001      	movs	r0, #1
 801212a:	e774      	b.n	8012016 <_dtoa_r+0x71e>
 801212c:	2300      	movs	r3, #0
 801212e:	e7f6      	b.n	801211e <_dtoa_r+0x826>
 8012130:	9b02      	ldr	r3, [sp, #8]
 8012132:	e7f4      	b.n	801211e <_dtoa_r+0x826>
 8012134:	920a      	str	r2, [sp, #40]	; 0x28
 8012136:	e7f3      	b.n	8012120 <_dtoa_r+0x828>
 8012138:	d081      	beq.n	801203e <_dtoa_r+0x746>
 801213a:	4610      	mov	r0, r2
 801213c:	301c      	adds	r0, #28
 801213e:	e777      	b.n	8012030 <_dtoa_r+0x738>
 8012140:	f1b9 0f00 	cmp.w	r9, #0
 8012144:	dc37      	bgt.n	80121b6 <_dtoa_r+0x8be>
 8012146:	9b07      	ldr	r3, [sp, #28]
 8012148:	2b02      	cmp	r3, #2
 801214a:	dd34      	ble.n	80121b6 <_dtoa_r+0x8be>
 801214c:	46ca      	mov	sl, r9
 801214e:	f1ba 0f00 	cmp.w	sl, #0
 8012152:	d10d      	bne.n	8012170 <_dtoa_r+0x878>
 8012154:	4621      	mov	r1, r4
 8012156:	4653      	mov	r3, sl
 8012158:	2205      	movs	r2, #5
 801215a:	4630      	mov	r0, r6
 801215c:	f000 f9bc 	bl	80124d8 <__multadd>
 8012160:	4601      	mov	r1, r0
 8012162:	4604      	mov	r4, r0
 8012164:	4628      	mov	r0, r5
 8012166:	f000 fbd3 	bl	8012910 <__mcmp>
 801216a:	2800      	cmp	r0, #0
 801216c:	f73f adde 	bgt.w	8011d2c <_dtoa_r+0x434>
 8012170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012172:	f8dd 8000 	ldr.w	r8, [sp]
 8012176:	ea6f 0b03 	mvn.w	fp, r3
 801217a:	f04f 0900 	mov.w	r9, #0
 801217e:	4621      	mov	r1, r4
 8012180:	4630      	mov	r0, r6
 8012182:	f000 f987 	bl	8012494 <_Bfree>
 8012186:	2f00      	cmp	r7, #0
 8012188:	f43f aea7 	beq.w	8011eda <_dtoa_r+0x5e2>
 801218c:	f1b9 0f00 	cmp.w	r9, #0
 8012190:	d005      	beq.n	801219e <_dtoa_r+0x8a6>
 8012192:	45b9      	cmp	r9, r7
 8012194:	d003      	beq.n	801219e <_dtoa_r+0x8a6>
 8012196:	4649      	mov	r1, r9
 8012198:	4630      	mov	r0, r6
 801219a:	f000 f97b 	bl	8012494 <_Bfree>
 801219e:	4639      	mov	r1, r7
 80121a0:	4630      	mov	r0, r6
 80121a2:	f000 f977 	bl	8012494 <_Bfree>
 80121a6:	e698      	b.n	8011eda <_dtoa_r+0x5e2>
 80121a8:	2400      	movs	r4, #0
 80121aa:	4627      	mov	r7, r4
 80121ac:	e7e0      	b.n	8012170 <_dtoa_r+0x878>
 80121ae:	46bb      	mov	fp, r7
 80121b0:	4604      	mov	r4, r0
 80121b2:	4607      	mov	r7, r0
 80121b4:	e5ba      	b.n	8011d2c <_dtoa_r+0x434>
 80121b6:	9b08      	ldr	r3, [sp, #32]
 80121b8:	46ca      	mov	sl, r9
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 8100 	beq.w	80123c0 <_dtoa_r+0xac8>
 80121c0:	f1b8 0f00 	cmp.w	r8, #0
 80121c4:	dd05      	ble.n	80121d2 <_dtoa_r+0x8da>
 80121c6:	4639      	mov	r1, r7
 80121c8:	4642      	mov	r2, r8
 80121ca:	4630      	mov	r0, r6
 80121cc:	f000 fb34 	bl	8012838 <__lshift>
 80121d0:	4607      	mov	r7, r0
 80121d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d05d      	beq.n	8012294 <_dtoa_r+0x99c>
 80121d8:	6879      	ldr	r1, [r7, #4]
 80121da:	4630      	mov	r0, r6
 80121dc:	f000 f91a 	bl	8012414 <_Balloc>
 80121e0:	4680      	mov	r8, r0
 80121e2:	b928      	cbnz	r0, 80121f0 <_dtoa_r+0x8f8>
 80121e4:	4b82      	ldr	r3, [pc, #520]	; (80123f0 <_dtoa_r+0xaf8>)
 80121e6:	4602      	mov	r2, r0
 80121e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80121ec:	f7ff bb9a 	b.w	8011924 <_dtoa_r+0x2c>
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	3202      	adds	r2, #2
 80121f4:	0092      	lsls	r2, r2, #2
 80121f6:	f107 010c 	add.w	r1, r7, #12
 80121fa:	300c      	adds	r0, #12
 80121fc:	f7fe fe94 	bl	8010f28 <memcpy>
 8012200:	2201      	movs	r2, #1
 8012202:	4641      	mov	r1, r8
 8012204:	4630      	mov	r0, r6
 8012206:	f000 fb17 	bl	8012838 <__lshift>
 801220a:	9b00      	ldr	r3, [sp, #0]
 801220c:	3301      	adds	r3, #1
 801220e:	9305      	str	r3, [sp, #20]
 8012210:	9b00      	ldr	r3, [sp, #0]
 8012212:	4453      	add	r3, sl
 8012214:	9309      	str	r3, [sp, #36]	; 0x24
 8012216:	9b02      	ldr	r3, [sp, #8]
 8012218:	f003 0301 	and.w	r3, r3, #1
 801221c:	46b9      	mov	r9, r7
 801221e:	9308      	str	r3, [sp, #32]
 8012220:	4607      	mov	r7, r0
 8012222:	9b05      	ldr	r3, [sp, #20]
 8012224:	4621      	mov	r1, r4
 8012226:	3b01      	subs	r3, #1
 8012228:	4628      	mov	r0, r5
 801222a:	9302      	str	r3, [sp, #8]
 801222c:	f7ff fad6 	bl	80117dc <quorem>
 8012230:	4603      	mov	r3, r0
 8012232:	3330      	adds	r3, #48	; 0x30
 8012234:	9006      	str	r0, [sp, #24]
 8012236:	4649      	mov	r1, r9
 8012238:	4628      	mov	r0, r5
 801223a:	930a      	str	r3, [sp, #40]	; 0x28
 801223c:	f000 fb68 	bl	8012910 <__mcmp>
 8012240:	463a      	mov	r2, r7
 8012242:	4682      	mov	sl, r0
 8012244:	4621      	mov	r1, r4
 8012246:	4630      	mov	r0, r6
 8012248:	f000 fb7e 	bl	8012948 <__mdiff>
 801224c:	68c2      	ldr	r2, [r0, #12]
 801224e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012250:	4680      	mov	r8, r0
 8012252:	bb0a      	cbnz	r2, 8012298 <_dtoa_r+0x9a0>
 8012254:	4601      	mov	r1, r0
 8012256:	4628      	mov	r0, r5
 8012258:	f000 fb5a 	bl	8012910 <__mcmp>
 801225c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801225e:	4602      	mov	r2, r0
 8012260:	4641      	mov	r1, r8
 8012262:	4630      	mov	r0, r6
 8012264:	920e      	str	r2, [sp, #56]	; 0x38
 8012266:	930a      	str	r3, [sp, #40]	; 0x28
 8012268:	f000 f914 	bl	8012494 <_Bfree>
 801226c:	9b07      	ldr	r3, [sp, #28]
 801226e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012270:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012274:	ea43 0102 	orr.w	r1, r3, r2
 8012278:	9b08      	ldr	r3, [sp, #32]
 801227a:	430b      	orrs	r3, r1
 801227c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801227e:	d10d      	bne.n	801229c <_dtoa_r+0x9a4>
 8012280:	2b39      	cmp	r3, #57	; 0x39
 8012282:	d029      	beq.n	80122d8 <_dtoa_r+0x9e0>
 8012284:	f1ba 0f00 	cmp.w	sl, #0
 8012288:	dd01      	ble.n	801228e <_dtoa_r+0x996>
 801228a:	9b06      	ldr	r3, [sp, #24]
 801228c:	3331      	adds	r3, #49	; 0x31
 801228e:	9a02      	ldr	r2, [sp, #8]
 8012290:	7013      	strb	r3, [r2, #0]
 8012292:	e774      	b.n	801217e <_dtoa_r+0x886>
 8012294:	4638      	mov	r0, r7
 8012296:	e7b8      	b.n	801220a <_dtoa_r+0x912>
 8012298:	2201      	movs	r2, #1
 801229a:	e7e1      	b.n	8012260 <_dtoa_r+0x968>
 801229c:	f1ba 0f00 	cmp.w	sl, #0
 80122a0:	db06      	blt.n	80122b0 <_dtoa_r+0x9b8>
 80122a2:	9907      	ldr	r1, [sp, #28]
 80122a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80122a8:	9908      	ldr	r1, [sp, #32]
 80122aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80122ae:	d120      	bne.n	80122f2 <_dtoa_r+0x9fa>
 80122b0:	2a00      	cmp	r2, #0
 80122b2:	ddec      	ble.n	801228e <_dtoa_r+0x996>
 80122b4:	4629      	mov	r1, r5
 80122b6:	2201      	movs	r2, #1
 80122b8:	4630      	mov	r0, r6
 80122ba:	9305      	str	r3, [sp, #20]
 80122bc:	f000 fabc 	bl	8012838 <__lshift>
 80122c0:	4621      	mov	r1, r4
 80122c2:	4605      	mov	r5, r0
 80122c4:	f000 fb24 	bl	8012910 <__mcmp>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	9b05      	ldr	r3, [sp, #20]
 80122cc:	dc02      	bgt.n	80122d4 <_dtoa_r+0x9dc>
 80122ce:	d1de      	bne.n	801228e <_dtoa_r+0x996>
 80122d0:	07da      	lsls	r2, r3, #31
 80122d2:	d5dc      	bpl.n	801228e <_dtoa_r+0x996>
 80122d4:	2b39      	cmp	r3, #57	; 0x39
 80122d6:	d1d8      	bne.n	801228a <_dtoa_r+0x992>
 80122d8:	9a02      	ldr	r2, [sp, #8]
 80122da:	2339      	movs	r3, #57	; 0x39
 80122dc:	7013      	strb	r3, [r2, #0]
 80122de:	4643      	mov	r3, r8
 80122e0:	4698      	mov	r8, r3
 80122e2:	3b01      	subs	r3, #1
 80122e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80122e8:	2a39      	cmp	r2, #57	; 0x39
 80122ea:	d051      	beq.n	8012390 <_dtoa_r+0xa98>
 80122ec:	3201      	adds	r2, #1
 80122ee:	701a      	strb	r2, [r3, #0]
 80122f0:	e745      	b.n	801217e <_dtoa_r+0x886>
 80122f2:	2a00      	cmp	r2, #0
 80122f4:	dd03      	ble.n	80122fe <_dtoa_r+0xa06>
 80122f6:	2b39      	cmp	r3, #57	; 0x39
 80122f8:	d0ee      	beq.n	80122d8 <_dtoa_r+0x9e0>
 80122fa:	3301      	adds	r3, #1
 80122fc:	e7c7      	b.n	801228e <_dtoa_r+0x996>
 80122fe:	9a05      	ldr	r2, [sp, #20]
 8012300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012302:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012306:	428a      	cmp	r2, r1
 8012308:	d02b      	beq.n	8012362 <_dtoa_r+0xa6a>
 801230a:	4629      	mov	r1, r5
 801230c:	2300      	movs	r3, #0
 801230e:	220a      	movs	r2, #10
 8012310:	4630      	mov	r0, r6
 8012312:	f000 f8e1 	bl	80124d8 <__multadd>
 8012316:	45b9      	cmp	r9, r7
 8012318:	4605      	mov	r5, r0
 801231a:	f04f 0300 	mov.w	r3, #0
 801231e:	f04f 020a 	mov.w	r2, #10
 8012322:	4649      	mov	r1, r9
 8012324:	4630      	mov	r0, r6
 8012326:	d107      	bne.n	8012338 <_dtoa_r+0xa40>
 8012328:	f000 f8d6 	bl	80124d8 <__multadd>
 801232c:	4681      	mov	r9, r0
 801232e:	4607      	mov	r7, r0
 8012330:	9b05      	ldr	r3, [sp, #20]
 8012332:	3301      	adds	r3, #1
 8012334:	9305      	str	r3, [sp, #20]
 8012336:	e774      	b.n	8012222 <_dtoa_r+0x92a>
 8012338:	f000 f8ce 	bl	80124d8 <__multadd>
 801233c:	4639      	mov	r1, r7
 801233e:	4681      	mov	r9, r0
 8012340:	2300      	movs	r3, #0
 8012342:	220a      	movs	r2, #10
 8012344:	4630      	mov	r0, r6
 8012346:	f000 f8c7 	bl	80124d8 <__multadd>
 801234a:	4607      	mov	r7, r0
 801234c:	e7f0      	b.n	8012330 <_dtoa_r+0xa38>
 801234e:	f1ba 0f00 	cmp.w	sl, #0
 8012352:	9a00      	ldr	r2, [sp, #0]
 8012354:	bfcc      	ite	gt
 8012356:	46d0      	movgt	r8, sl
 8012358:	f04f 0801 	movle.w	r8, #1
 801235c:	4490      	add	r8, r2
 801235e:	f04f 0900 	mov.w	r9, #0
 8012362:	4629      	mov	r1, r5
 8012364:	2201      	movs	r2, #1
 8012366:	4630      	mov	r0, r6
 8012368:	9302      	str	r3, [sp, #8]
 801236a:	f000 fa65 	bl	8012838 <__lshift>
 801236e:	4621      	mov	r1, r4
 8012370:	4605      	mov	r5, r0
 8012372:	f000 facd 	bl	8012910 <__mcmp>
 8012376:	2800      	cmp	r0, #0
 8012378:	dcb1      	bgt.n	80122de <_dtoa_r+0x9e6>
 801237a:	d102      	bne.n	8012382 <_dtoa_r+0xa8a>
 801237c:	9b02      	ldr	r3, [sp, #8]
 801237e:	07db      	lsls	r3, r3, #31
 8012380:	d4ad      	bmi.n	80122de <_dtoa_r+0x9e6>
 8012382:	4643      	mov	r3, r8
 8012384:	4698      	mov	r8, r3
 8012386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801238a:	2a30      	cmp	r2, #48	; 0x30
 801238c:	d0fa      	beq.n	8012384 <_dtoa_r+0xa8c>
 801238e:	e6f6      	b.n	801217e <_dtoa_r+0x886>
 8012390:	9a00      	ldr	r2, [sp, #0]
 8012392:	429a      	cmp	r2, r3
 8012394:	d1a4      	bne.n	80122e0 <_dtoa_r+0x9e8>
 8012396:	f10b 0b01 	add.w	fp, fp, #1
 801239a:	2331      	movs	r3, #49	; 0x31
 801239c:	e778      	b.n	8012290 <_dtoa_r+0x998>
 801239e:	4b15      	ldr	r3, [pc, #84]	; (80123f4 <_dtoa_r+0xafc>)
 80123a0:	f7ff bb12 	b.w	80119c8 <_dtoa_r+0xd0>
 80123a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f47f aaee 	bne.w	8011988 <_dtoa_r+0x90>
 80123ac:	4b12      	ldr	r3, [pc, #72]	; (80123f8 <_dtoa_r+0xb00>)
 80123ae:	f7ff bb0b 	b.w	80119c8 <_dtoa_r+0xd0>
 80123b2:	f1ba 0f00 	cmp.w	sl, #0
 80123b6:	dc03      	bgt.n	80123c0 <_dtoa_r+0xac8>
 80123b8:	9b07      	ldr	r3, [sp, #28]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	f73f aec7 	bgt.w	801214e <_dtoa_r+0x856>
 80123c0:	f8dd 8000 	ldr.w	r8, [sp]
 80123c4:	4621      	mov	r1, r4
 80123c6:	4628      	mov	r0, r5
 80123c8:	f7ff fa08 	bl	80117dc <quorem>
 80123cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80123d0:	f808 3b01 	strb.w	r3, [r8], #1
 80123d4:	9a00      	ldr	r2, [sp, #0]
 80123d6:	eba8 0202 	sub.w	r2, r8, r2
 80123da:	4592      	cmp	sl, r2
 80123dc:	ddb7      	ble.n	801234e <_dtoa_r+0xa56>
 80123de:	4629      	mov	r1, r5
 80123e0:	2300      	movs	r3, #0
 80123e2:	220a      	movs	r2, #10
 80123e4:	4630      	mov	r0, r6
 80123e6:	f000 f877 	bl	80124d8 <__multadd>
 80123ea:	4605      	mov	r5, r0
 80123ec:	e7ea      	b.n	80123c4 <_dtoa_r+0xacc>
 80123ee:	bf00      	nop
 80123f0:	0801454b 	.word	0x0801454b
 80123f4:	080144a4 	.word	0x080144a4
 80123f8:	080144c8 	.word	0x080144c8

080123fc <_localeconv_r>:
 80123fc:	4800      	ldr	r0, [pc, #0]	; (8012400 <_localeconv_r+0x4>)
 80123fe:	4770      	bx	lr
 8012400:	24000164 	.word	0x24000164

08012404 <malloc>:
 8012404:	4b02      	ldr	r3, [pc, #8]	; (8012410 <malloc+0xc>)
 8012406:	4601      	mov	r1, r0
 8012408:	6818      	ldr	r0, [r3, #0]
 801240a:	f000 bbe1 	b.w	8012bd0 <_malloc_r>
 801240e:	bf00      	nop
 8012410:	24000010 	.word	0x24000010

08012414 <_Balloc>:
 8012414:	b570      	push	{r4, r5, r6, lr}
 8012416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012418:	4604      	mov	r4, r0
 801241a:	460d      	mov	r5, r1
 801241c:	b976      	cbnz	r6, 801243c <_Balloc+0x28>
 801241e:	2010      	movs	r0, #16
 8012420:	f7ff fff0 	bl	8012404 <malloc>
 8012424:	4602      	mov	r2, r0
 8012426:	6260      	str	r0, [r4, #36]	; 0x24
 8012428:	b920      	cbnz	r0, 8012434 <_Balloc+0x20>
 801242a:	4b18      	ldr	r3, [pc, #96]	; (801248c <_Balloc+0x78>)
 801242c:	4818      	ldr	r0, [pc, #96]	; (8012490 <_Balloc+0x7c>)
 801242e:	2166      	movs	r1, #102	; 0x66
 8012430:	f000 fc38 	bl	8012ca4 <__assert_func>
 8012434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012438:	6006      	str	r6, [r0, #0]
 801243a:	60c6      	str	r6, [r0, #12]
 801243c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801243e:	68f3      	ldr	r3, [r6, #12]
 8012440:	b183      	cbz	r3, 8012464 <_Balloc+0x50>
 8012442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801244a:	b9b8      	cbnz	r0, 801247c <_Balloc+0x68>
 801244c:	2101      	movs	r1, #1
 801244e:	fa01 f605 	lsl.w	r6, r1, r5
 8012452:	1d72      	adds	r2, r6, #5
 8012454:	0092      	lsls	r2, r2, #2
 8012456:	4620      	mov	r0, r4
 8012458:	f000 fb5a 	bl	8012b10 <_calloc_r>
 801245c:	b160      	cbz	r0, 8012478 <_Balloc+0x64>
 801245e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012462:	e00e      	b.n	8012482 <_Balloc+0x6e>
 8012464:	2221      	movs	r2, #33	; 0x21
 8012466:	2104      	movs	r1, #4
 8012468:	4620      	mov	r0, r4
 801246a:	f000 fb51 	bl	8012b10 <_calloc_r>
 801246e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012470:	60f0      	str	r0, [r6, #12]
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1e4      	bne.n	8012442 <_Balloc+0x2e>
 8012478:	2000      	movs	r0, #0
 801247a:	bd70      	pop	{r4, r5, r6, pc}
 801247c:	6802      	ldr	r2, [r0, #0]
 801247e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012482:	2300      	movs	r3, #0
 8012484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012488:	e7f7      	b.n	801247a <_Balloc+0x66>
 801248a:	bf00      	nop
 801248c:	080144d5 	.word	0x080144d5
 8012490:	0801455c 	.word	0x0801455c

08012494 <_Bfree>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012498:	4605      	mov	r5, r0
 801249a:	460c      	mov	r4, r1
 801249c:	b976      	cbnz	r6, 80124bc <_Bfree+0x28>
 801249e:	2010      	movs	r0, #16
 80124a0:	f7ff ffb0 	bl	8012404 <malloc>
 80124a4:	4602      	mov	r2, r0
 80124a6:	6268      	str	r0, [r5, #36]	; 0x24
 80124a8:	b920      	cbnz	r0, 80124b4 <_Bfree+0x20>
 80124aa:	4b09      	ldr	r3, [pc, #36]	; (80124d0 <_Bfree+0x3c>)
 80124ac:	4809      	ldr	r0, [pc, #36]	; (80124d4 <_Bfree+0x40>)
 80124ae:	218a      	movs	r1, #138	; 0x8a
 80124b0:	f000 fbf8 	bl	8012ca4 <__assert_func>
 80124b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124b8:	6006      	str	r6, [r0, #0]
 80124ba:	60c6      	str	r6, [r0, #12]
 80124bc:	b13c      	cbz	r4, 80124ce <_Bfree+0x3a>
 80124be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80124c0:	6862      	ldr	r2, [r4, #4]
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124c8:	6021      	str	r1, [r4, #0]
 80124ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	080144d5 	.word	0x080144d5
 80124d4:	0801455c 	.word	0x0801455c

080124d8 <__multadd>:
 80124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	690e      	ldr	r6, [r1, #16]
 80124de:	4607      	mov	r7, r0
 80124e0:	4698      	mov	r8, r3
 80124e2:	460c      	mov	r4, r1
 80124e4:	f101 0014 	add.w	r0, r1, #20
 80124e8:	2300      	movs	r3, #0
 80124ea:	6805      	ldr	r5, [r0, #0]
 80124ec:	b2a9      	uxth	r1, r5
 80124ee:	fb02 8101 	mla	r1, r2, r1, r8
 80124f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80124f6:	0c2d      	lsrs	r5, r5, #16
 80124f8:	fb02 c505 	mla	r5, r2, r5, ip
 80124fc:	b289      	uxth	r1, r1
 80124fe:	3301      	adds	r3, #1
 8012500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012504:	429e      	cmp	r6, r3
 8012506:	f840 1b04 	str.w	r1, [r0], #4
 801250a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801250e:	dcec      	bgt.n	80124ea <__multadd+0x12>
 8012510:	f1b8 0f00 	cmp.w	r8, #0
 8012514:	d022      	beq.n	801255c <__multadd+0x84>
 8012516:	68a3      	ldr	r3, [r4, #8]
 8012518:	42b3      	cmp	r3, r6
 801251a:	dc19      	bgt.n	8012550 <__multadd+0x78>
 801251c:	6861      	ldr	r1, [r4, #4]
 801251e:	4638      	mov	r0, r7
 8012520:	3101      	adds	r1, #1
 8012522:	f7ff ff77 	bl	8012414 <_Balloc>
 8012526:	4605      	mov	r5, r0
 8012528:	b928      	cbnz	r0, 8012536 <__multadd+0x5e>
 801252a:	4602      	mov	r2, r0
 801252c:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <__multadd+0x8c>)
 801252e:	480e      	ldr	r0, [pc, #56]	; (8012568 <__multadd+0x90>)
 8012530:	21b5      	movs	r1, #181	; 0xb5
 8012532:	f000 fbb7 	bl	8012ca4 <__assert_func>
 8012536:	6922      	ldr	r2, [r4, #16]
 8012538:	3202      	adds	r2, #2
 801253a:	f104 010c 	add.w	r1, r4, #12
 801253e:	0092      	lsls	r2, r2, #2
 8012540:	300c      	adds	r0, #12
 8012542:	f7fe fcf1 	bl	8010f28 <memcpy>
 8012546:	4621      	mov	r1, r4
 8012548:	4638      	mov	r0, r7
 801254a:	f7ff ffa3 	bl	8012494 <_Bfree>
 801254e:	462c      	mov	r4, r5
 8012550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012554:	3601      	adds	r6, #1
 8012556:	f8c3 8014 	str.w	r8, [r3, #20]
 801255a:	6126      	str	r6, [r4, #16]
 801255c:	4620      	mov	r0, r4
 801255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012562:	bf00      	nop
 8012564:	0801454b 	.word	0x0801454b
 8012568:	0801455c 	.word	0x0801455c

0801256c <__hi0bits>:
 801256c:	0c03      	lsrs	r3, r0, #16
 801256e:	041b      	lsls	r3, r3, #16
 8012570:	b9d3      	cbnz	r3, 80125a8 <__hi0bits+0x3c>
 8012572:	0400      	lsls	r0, r0, #16
 8012574:	2310      	movs	r3, #16
 8012576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801257a:	bf04      	itt	eq
 801257c:	0200      	lsleq	r0, r0, #8
 801257e:	3308      	addeq	r3, #8
 8012580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012584:	bf04      	itt	eq
 8012586:	0100      	lsleq	r0, r0, #4
 8012588:	3304      	addeq	r3, #4
 801258a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801258e:	bf04      	itt	eq
 8012590:	0080      	lsleq	r0, r0, #2
 8012592:	3302      	addeq	r3, #2
 8012594:	2800      	cmp	r0, #0
 8012596:	db05      	blt.n	80125a4 <__hi0bits+0x38>
 8012598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801259c:	f103 0301 	add.w	r3, r3, #1
 80125a0:	bf08      	it	eq
 80125a2:	2320      	moveq	r3, #32
 80125a4:	4618      	mov	r0, r3
 80125a6:	4770      	bx	lr
 80125a8:	2300      	movs	r3, #0
 80125aa:	e7e4      	b.n	8012576 <__hi0bits+0xa>

080125ac <__lo0bits>:
 80125ac:	6803      	ldr	r3, [r0, #0]
 80125ae:	f013 0207 	ands.w	r2, r3, #7
 80125b2:	4601      	mov	r1, r0
 80125b4:	d00b      	beq.n	80125ce <__lo0bits+0x22>
 80125b6:	07da      	lsls	r2, r3, #31
 80125b8:	d424      	bmi.n	8012604 <__lo0bits+0x58>
 80125ba:	0798      	lsls	r0, r3, #30
 80125bc:	bf49      	itett	mi
 80125be:	085b      	lsrmi	r3, r3, #1
 80125c0:	089b      	lsrpl	r3, r3, #2
 80125c2:	2001      	movmi	r0, #1
 80125c4:	600b      	strmi	r3, [r1, #0]
 80125c6:	bf5c      	itt	pl
 80125c8:	600b      	strpl	r3, [r1, #0]
 80125ca:	2002      	movpl	r0, #2
 80125cc:	4770      	bx	lr
 80125ce:	b298      	uxth	r0, r3
 80125d0:	b9b0      	cbnz	r0, 8012600 <__lo0bits+0x54>
 80125d2:	0c1b      	lsrs	r3, r3, #16
 80125d4:	2010      	movs	r0, #16
 80125d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80125da:	bf04      	itt	eq
 80125dc:	0a1b      	lsreq	r3, r3, #8
 80125de:	3008      	addeq	r0, #8
 80125e0:	071a      	lsls	r2, r3, #28
 80125e2:	bf04      	itt	eq
 80125e4:	091b      	lsreq	r3, r3, #4
 80125e6:	3004      	addeq	r0, #4
 80125e8:	079a      	lsls	r2, r3, #30
 80125ea:	bf04      	itt	eq
 80125ec:	089b      	lsreq	r3, r3, #2
 80125ee:	3002      	addeq	r0, #2
 80125f0:	07da      	lsls	r2, r3, #31
 80125f2:	d403      	bmi.n	80125fc <__lo0bits+0x50>
 80125f4:	085b      	lsrs	r3, r3, #1
 80125f6:	f100 0001 	add.w	r0, r0, #1
 80125fa:	d005      	beq.n	8012608 <__lo0bits+0x5c>
 80125fc:	600b      	str	r3, [r1, #0]
 80125fe:	4770      	bx	lr
 8012600:	4610      	mov	r0, r2
 8012602:	e7e8      	b.n	80125d6 <__lo0bits+0x2a>
 8012604:	2000      	movs	r0, #0
 8012606:	4770      	bx	lr
 8012608:	2020      	movs	r0, #32
 801260a:	4770      	bx	lr

0801260c <__i2b>:
 801260c:	b510      	push	{r4, lr}
 801260e:	460c      	mov	r4, r1
 8012610:	2101      	movs	r1, #1
 8012612:	f7ff feff 	bl	8012414 <_Balloc>
 8012616:	4602      	mov	r2, r0
 8012618:	b928      	cbnz	r0, 8012626 <__i2b+0x1a>
 801261a:	4b05      	ldr	r3, [pc, #20]	; (8012630 <__i2b+0x24>)
 801261c:	4805      	ldr	r0, [pc, #20]	; (8012634 <__i2b+0x28>)
 801261e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012622:	f000 fb3f 	bl	8012ca4 <__assert_func>
 8012626:	2301      	movs	r3, #1
 8012628:	6144      	str	r4, [r0, #20]
 801262a:	6103      	str	r3, [r0, #16]
 801262c:	bd10      	pop	{r4, pc}
 801262e:	bf00      	nop
 8012630:	0801454b 	.word	0x0801454b
 8012634:	0801455c 	.word	0x0801455c

08012638 <__multiply>:
 8012638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263c:	4614      	mov	r4, r2
 801263e:	690a      	ldr	r2, [r1, #16]
 8012640:	6923      	ldr	r3, [r4, #16]
 8012642:	429a      	cmp	r2, r3
 8012644:	bfb8      	it	lt
 8012646:	460b      	movlt	r3, r1
 8012648:	460d      	mov	r5, r1
 801264a:	bfbc      	itt	lt
 801264c:	4625      	movlt	r5, r4
 801264e:	461c      	movlt	r4, r3
 8012650:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012654:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012658:	68ab      	ldr	r3, [r5, #8]
 801265a:	6869      	ldr	r1, [r5, #4]
 801265c:	eb0a 0709 	add.w	r7, sl, r9
 8012660:	42bb      	cmp	r3, r7
 8012662:	b085      	sub	sp, #20
 8012664:	bfb8      	it	lt
 8012666:	3101      	addlt	r1, #1
 8012668:	f7ff fed4 	bl	8012414 <_Balloc>
 801266c:	b930      	cbnz	r0, 801267c <__multiply+0x44>
 801266e:	4602      	mov	r2, r0
 8012670:	4b42      	ldr	r3, [pc, #264]	; (801277c <__multiply+0x144>)
 8012672:	4843      	ldr	r0, [pc, #268]	; (8012780 <__multiply+0x148>)
 8012674:	f240 115d 	movw	r1, #349	; 0x15d
 8012678:	f000 fb14 	bl	8012ca4 <__assert_func>
 801267c:	f100 0614 	add.w	r6, r0, #20
 8012680:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012684:	4633      	mov	r3, r6
 8012686:	2200      	movs	r2, #0
 8012688:	4543      	cmp	r3, r8
 801268a:	d31e      	bcc.n	80126ca <__multiply+0x92>
 801268c:	f105 0c14 	add.w	ip, r5, #20
 8012690:	f104 0314 	add.w	r3, r4, #20
 8012694:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012698:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801269c:	9202      	str	r2, [sp, #8]
 801269e:	ebac 0205 	sub.w	r2, ip, r5
 80126a2:	3a15      	subs	r2, #21
 80126a4:	f022 0203 	bic.w	r2, r2, #3
 80126a8:	3204      	adds	r2, #4
 80126aa:	f105 0115 	add.w	r1, r5, #21
 80126ae:	458c      	cmp	ip, r1
 80126b0:	bf38      	it	cc
 80126b2:	2204      	movcc	r2, #4
 80126b4:	9201      	str	r2, [sp, #4]
 80126b6:	9a02      	ldr	r2, [sp, #8]
 80126b8:	9303      	str	r3, [sp, #12]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d808      	bhi.n	80126d0 <__multiply+0x98>
 80126be:	2f00      	cmp	r7, #0
 80126c0:	dc55      	bgt.n	801276e <__multiply+0x136>
 80126c2:	6107      	str	r7, [r0, #16]
 80126c4:	b005      	add	sp, #20
 80126c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ca:	f843 2b04 	str.w	r2, [r3], #4
 80126ce:	e7db      	b.n	8012688 <__multiply+0x50>
 80126d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80126d4:	f1ba 0f00 	cmp.w	sl, #0
 80126d8:	d020      	beq.n	801271c <__multiply+0xe4>
 80126da:	f105 0e14 	add.w	lr, r5, #20
 80126de:	46b1      	mov	r9, r6
 80126e0:	2200      	movs	r2, #0
 80126e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80126e6:	f8d9 b000 	ldr.w	fp, [r9]
 80126ea:	b2a1      	uxth	r1, r4
 80126ec:	fa1f fb8b 	uxth.w	fp, fp
 80126f0:	fb0a b101 	mla	r1, sl, r1, fp
 80126f4:	4411      	add	r1, r2
 80126f6:	f8d9 2000 	ldr.w	r2, [r9]
 80126fa:	0c24      	lsrs	r4, r4, #16
 80126fc:	0c12      	lsrs	r2, r2, #16
 80126fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8012702:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012706:	b289      	uxth	r1, r1
 8012708:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801270c:	45f4      	cmp	ip, lr
 801270e:	f849 1b04 	str.w	r1, [r9], #4
 8012712:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012716:	d8e4      	bhi.n	80126e2 <__multiply+0xaa>
 8012718:	9901      	ldr	r1, [sp, #4]
 801271a:	5072      	str	r2, [r6, r1]
 801271c:	9a03      	ldr	r2, [sp, #12]
 801271e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012722:	3304      	adds	r3, #4
 8012724:	f1b9 0f00 	cmp.w	r9, #0
 8012728:	d01f      	beq.n	801276a <__multiply+0x132>
 801272a:	6834      	ldr	r4, [r6, #0]
 801272c:	f105 0114 	add.w	r1, r5, #20
 8012730:	46b6      	mov	lr, r6
 8012732:	f04f 0a00 	mov.w	sl, #0
 8012736:	880a      	ldrh	r2, [r1, #0]
 8012738:	f8be b002 	ldrh.w	fp, [lr, #2]
 801273c:	fb09 b202 	mla	r2, r9, r2, fp
 8012740:	4492      	add	sl, r2
 8012742:	b2a4      	uxth	r4, r4
 8012744:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012748:	f84e 4b04 	str.w	r4, [lr], #4
 801274c:	f851 4b04 	ldr.w	r4, [r1], #4
 8012750:	f8be 2000 	ldrh.w	r2, [lr]
 8012754:	0c24      	lsrs	r4, r4, #16
 8012756:	fb09 2404 	mla	r4, r9, r4, r2
 801275a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801275e:	458c      	cmp	ip, r1
 8012760:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012764:	d8e7      	bhi.n	8012736 <__multiply+0xfe>
 8012766:	9a01      	ldr	r2, [sp, #4]
 8012768:	50b4      	str	r4, [r6, r2]
 801276a:	3604      	adds	r6, #4
 801276c:	e7a3      	b.n	80126b6 <__multiply+0x7e>
 801276e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1a5      	bne.n	80126c2 <__multiply+0x8a>
 8012776:	3f01      	subs	r7, #1
 8012778:	e7a1      	b.n	80126be <__multiply+0x86>
 801277a:	bf00      	nop
 801277c:	0801454b 	.word	0x0801454b
 8012780:	0801455c 	.word	0x0801455c

08012784 <__pow5mult>:
 8012784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012788:	4615      	mov	r5, r2
 801278a:	f012 0203 	ands.w	r2, r2, #3
 801278e:	4606      	mov	r6, r0
 8012790:	460f      	mov	r7, r1
 8012792:	d007      	beq.n	80127a4 <__pow5mult+0x20>
 8012794:	4c25      	ldr	r4, [pc, #148]	; (801282c <__pow5mult+0xa8>)
 8012796:	3a01      	subs	r2, #1
 8012798:	2300      	movs	r3, #0
 801279a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801279e:	f7ff fe9b 	bl	80124d8 <__multadd>
 80127a2:	4607      	mov	r7, r0
 80127a4:	10ad      	asrs	r5, r5, #2
 80127a6:	d03d      	beq.n	8012824 <__pow5mult+0xa0>
 80127a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80127aa:	b97c      	cbnz	r4, 80127cc <__pow5mult+0x48>
 80127ac:	2010      	movs	r0, #16
 80127ae:	f7ff fe29 	bl	8012404 <malloc>
 80127b2:	4602      	mov	r2, r0
 80127b4:	6270      	str	r0, [r6, #36]	; 0x24
 80127b6:	b928      	cbnz	r0, 80127c4 <__pow5mult+0x40>
 80127b8:	4b1d      	ldr	r3, [pc, #116]	; (8012830 <__pow5mult+0xac>)
 80127ba:	481e      	ldr	r0, [pc, #120]	; (8012834 <__pow5mult+0xb0>)
 80127bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80127c0:	f000 fa70 	bl	8012ca4 <__assert_func>
 80127c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80127c8:	6004      	str	r4, [r0, #0]
 80127ca:	60c4      	str	r4, [r0, #12]
 80127cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80127d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80127d4:	b94c      	cbnz	r4, 80127ea <__pow5mult+0x66>
 80127d6:	f240 2171 	movw	r1, #625	; 0x271
 80127da:	4630      	mov	r0, r6
 80127dc:	f7ff ff16 	bl	801260c <__i2b>
 80127e0:	2300      	movs	r3, #0
 80127e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80127e6:	4604      	mov	r4, r0
 80127e8:	6003      	str	r3, [r0, #0]
 80127ea:	f04f 0900 	mov.w	r9, #0
 80127ee:	07eb      	lsls	r3, r5, #31
 80127f0:	d50a      	bpl.n	8012808 <__pow5mult+0x84>
 80127f2:	4639      	mov	r1, r7
 80127f4:	4622      	mov	r2, r4
 80127f6:	4630      	mov	r0, r6
 80127f8:	f7ff ff1e 	bl	8012638 <__multiply>
 80127fc:	4639      	mov	r1, r7
 80127fe:	4680      	mov	r8, r0
 8012800:	4630      	mov	r0, r6
 8012802:	f7ff fe47 	bl	8012494 <_Bfree>
 8012806:	4647      	mov	r7, r8
 8012808:	106d      	asrs	r5, r5, #1
 801280a:	d00b      	beq.n	8012824 <__pow5mult+0xa0>
 801280c:	6820      	ldr	r0, [r4, #0]
 801280e:	b938      	cbnz	r0, 8012820 <__pow5mult+0x9c>
 8012810:	4622      	mov	r2, r4
 8012812:	4621      	mov	r1, r4
 8012814:	4630      	mov	r0, r6
 8012816:	f7ff ff0f 	bl	8012638 <__multiply>
 801281a:	6020      	str	r0, [r4, #0]
 801281c:	f8c0 9000 	str.w	r9, [r0]
 8012820:	4604      	mov	r4, r0
 8012822:	e7e4      	b.n	80127ee <__pow5mult+0x6a>
 8012824:	4638      	mov	r0, r7
 8012826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801282a:	bf00      	nop
 801282c:	080146b0 	.word	0x080146b0
 8012830:	080144d5 	.word	0x080144d5
 8012834:	0801455c 	.word	0x0801455c

08012838 <__lshift>:
 8012838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801283c:	460c      	mov	r4, r1
 801283e:	6849      	ldr	r1, [r1, #4]
 8012840:	6923      	ldr	r3, [r4, #16]
 8012842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012846:	68a3      	ldr	r3, [r4, #8]
 8012848:	4607      	mov	r7, r0
 801284a:	4691      	mov	r9, r2
 801284c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012850:	f108 0601 	add.w	r6, r8, #1
 8012854:	42b3      	cmp	r3, r6
 8012856:	db0b      	blt.n	8012870 <__lshift+0x38>
 8012858:	4638      	mov	r0, r7
 801285a:	f7ff fddb 	bl	8012414 <_Balloc>
 801285e:	4605      	mov	r5, r0
 8012860:	b948      	cbnz	r0, 8012876 <__lshift+0x3e>
 8012862:	4602      	mov	r2, r0
 8012864:	4b28      	ldr	r3, [pc, #160]	; (8012908 <__lshift+0xd0>)
 8012866:	4829      	ldr	r0, [pc, #164]	; (801290c <__lshift+0xd4>)
 8012868:	f240 11d9 	movw	r1, #473	; 0x1d9
 801286c:	f000 fa1a 	bl	8012ca4 <__assert_func>
 8012870:	3101      	adds	r1, #1
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	e7ee      	b.n	8012854 <__lshift+0x1c>
 8012876:	2300      	movs	r3, #0
 8012878:	f100 0114 	add.w	r1, r0, #20
 801287c:	f100 0210 	add.w	r2, r0, #16
 8012880:	4618      	mov	r0, r3
 8012882:	4553      	cmp	r3, sl
 8012884:	db33      	blt.n	80128ee <__lshift+0xb6>
 8012886:	6920      	ldr	r0, [r4, #16]
 8012888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801288c:	f104 0314 	add.w	r3, r4, #20
 8012890:	f019 091f 	ands.w	r9, r9, #31
 8012894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801289c:	d02b      	beq.n	80128f6 <__lshift+0xbe>
 801289e:	f1c9 0e20 	rsb	lr, r9, #32
 80128a2:	468a      	mov	sl, r1
 80128a4:	2200      	movs	r2, #0
 80128a6:	6818      	ldr	r0, [r3, #0]
 80128a8:	fa00 f009 	lsl.w	r0, r0, r9
 80128ac:	4302      	orrs	r2, r0
 80128ae:	f84a 2b04 	str.w	r2, [sl], #4
 80128b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80128b6:	459c      	cmp	ip, r3
 80128b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80128bc:	d8f3      	bhi.n	80128a6 <__lshift+0x6e>
 80128be:	ebac 0304 	sub.w	r3, ip, r4
 80128c2:	3b15      	subs	r3, #21
 80128c4:	f023 0303 	bic.w	r3, r3, #3
 80128c8:	3304      	adds	r3, #4
 80128ca:	f104 0015 	add.w	r0, r4, #21
 80128ce:	4584      	cmp	ip, r0
 80128d0:	bf38      	it	cc
 80128d2:	2304      	movcc	r3, #4
 80128d4:	50ca      	str	r2, [r1, r3]
 80128d6:	b10a      	cbz	r2, 80128dc <__lshift+0xa4>
 80128d8:	f108 0602 	add.w	r6, r8, #2
 80128dc:	3e01      	subs	r6, #1
 80128de:	4638      	mov	r0, r7
 80128e0:	612e      	str	r6, [r5, #16]
 80128e2:	4621      	mov	r1, r4
 80128e4:	f7ff fdd6 	bl	8012494 <_Bfree>
 80128e8:	4628      	mov	r0, r5
 80128ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80128f2:	3301      	adds	r3, #1
 80128f4:	e7c5      	b.n	8012882 <__lshift+0x4a>
 80128f6:	3904      	subs	r1, #4
 80128f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80128fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012900:	459c      	cmp	ip, r3
 8012902:	d8f9      	bhi.n	80128f8 <__lshift+0xc0>
 8012904:	e7ea      	b.n	80128dc <__lshift+0xa4>
 8012906:	bf00      	nop
 8012908:	0801454b 	.word	0x0801454b
 801290c:	0801455c 	.word	0x0801455c

08012910 <__mcmp>:
 8012910:	b530      	push	{r4, r5, lr}
 8012912:	6902      	ldr	r2, [r0, #16]
 8012914:	690c      	ldr	r4, [r1, #16]
 8012916:	1b12      	subs	r2, r2, r4
 8012918:	d10e      	bne.n	8012938 <__mcmp+0x28>
 801291a:	f100 0314 	add.w	r3, r0, #20
 801291e:	3114      	adds	r1, #20
 8012920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801292c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012930:	42a5      	cmp	r5, r4
 8012932:	d003      	beq.n	801293c <__mcmp+0x2c>
 8012934:	d305      	bcc.n	8012942 <__mcmp+0x32>
 8012936:	2201      	movs	r2, #1
 8012938:	4610      	mov	r0, r2
 801293a:	bd30      	pop	{r4, r5, pc}
 801293c:	4283      	cmp	r3, r0
 801293e:	d3f3      	bcc.n	8012928 <__mcmp+0x18>
 8012940:	e7fa      	b.n	8012938 <__mcmp+0x28>
 8012942:	f04f 32ff 	mov.w	r2, #4294967295
 8012946:	e7f7      	b.n	8012938 <__mcmp+0x28>

08012948 <__mdiff>:
 8012948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	460c      	mov	r4, r1
 801294e:	4606      	mov	r6, r0
 8012950:	4611      	mov	r1, r2
 8012952:	4620      	mov	r0, r4
 8012954:	4617      	mov	r7, r2
 8012956:	f7ff ffdb 	bl	8012910 <__mcmp>
 801295a:	1e05      	subs	r5, r0, #0
 801295c:	d110      	bne.n	8012980 <__mdiff+0x38>
 801295e:	4629      	mov	r1, r5
 8012960:	4630      	mov	r0, r6
 8012962:	f7ff fd57 	bl	8012414 <_Balloc>
 8012966:	b930      	cbnz	r0, 8012976 <__mdiff+0x2e>
 8012968:	4b39      	ldr	r3, [pc, #228]	; (8012a50 <__mdiff+0x108>)
 801296a:	4602      	mov	r2, r0
 801296c:	f240 2132 	movw	r1, #562	; 0x232
 8012970:	4838      	ldr	r0, [pc, #224]	; (8012a54 <__mdiff+0x10c>)
 8012972:	f000 f997 	bl	8012ca4 <__assert_func>
 8012976:	2301      	movs	r3, #1
 8012978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801297c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012980:	bfa4      	itt	ge
 8012982:	463b      	movge	r3, r7
 8012984:	4627      	movge	r7, r4
 8012986:	4630      	mov	r0, r6
 8012988:	6879      	ldr	r1, [r7, #4]
 801298a:	bfa6      	itte	ge
 801298c:	461c      	movge	r4, r3
 801298e:	2500      	movge	r5, #0
 8012990:	2501      	movlt	r5, #1
 8012992:	f7ff fd3f 	bl	8012414 <_Balloc>
 8012996:	b920      	cbnz	r0, 80129a2 <__mdiff+0x5a>
 8012998:	4b2d      	ldr	r3, [pc, #180]	; (8012a50 <__mdiff+0x108>)
 801299a:	4602      	mov	r2, r0
 801299c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80129a0:	e7e6      	b.n	8012970 <__mdiff+0x28>
 80129a2:	693e      	ldr	r6, [r7, #16]
 80129a4:	60c5      	str	r5, [r0, #12]
 80129a6:	6925      	ldr	r5, [r4, #16]
 80129a8:	f107 0114 	add.w	r1, r7, #20
 80129ac:	f104 0914 	add.w	r9, r4, #20
 80129b0:	f100 0e14 	add.w	lr, r0, #20
 80129b4:	f107 0210 	add.w	r2, r7, #16
 80129b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80129bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80129c0:	46f2      	mov	sl, lr
 80129c2:	2700      	movs	r7, #0
 80129c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80129c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80129cc:	fa1f f883 	uxth.w	r8, r3
 80129d0:	fa17 f78b 	uxtah	r7, r7, fp
 80129d4:	0c1b      	lsrs	r3, r3, #16
 80129d6:	eba7 0808 	sub.w	r8, r7, r8
 80129da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80129de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80129e2:	fa1f f888 	uxth.w	r8, r8
 80129e6:	141f      	asrs	r7, r3, #16
 80129e8:	454d      	cmp	r5, r9
 80129ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80129ee:	f84a 3b04 	str.w	r3, [sl], #4
 80129f2:	d8e7      	bhi.n	80129c4 <__mdiff+0x7c>
 80129f4:	1b2b      	subs	r3, r5, r4
 80129f6:	3b15      	subs	r3, #21
 80129f8:	f023 0303 	bic.w	r3, r3, #3
 80129fc:	3304      	adds	r3, #4
 80129fe:	3415      	adds	r4, #21
 8012a00:	42a5      	cmp	r5, r4
 8012a02:	bf38      	it	cc
 8012a04:	2304      	movcc	r3, #4
 8012a06:	4419      	add	r1, r3
 8012a08:	4473      	add	r3, lr
 8012a0a:	469e      	mov	lr, r3
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	4565      	cmp	r5, ip
 8012a10:	d30e      	bcc.n	8012a30 <__mdiff+0xe8>
 8012a12:	f10c 0203 	add.w	r2, ip, #3
 8012a16:	1a52      	subs	r2, r2, r1
 8012a18:	f022 0203 	bic.w	r2, r2, #3
 8012a1c:	3903      	subs	r1, #3
 8012a1e:	458c      	cmp	ip, r1
 8012a20:	bf38      	it	cc
 8012a22:	2200      	movcc	r2, #0
 8012a24:	441a      	add	r2, r3
 8012a26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012a2a:	b17b      	cbz	r3, 8012a4c <__mdiff+0x104>
 8012a2c:	6106      	str	r6, [r0, #16]
 8012a2e:	e7a5      	b.n	801297c <__mdiff+0x34>
 8012a30:	f855 8b04 	ldr.w	r8, [r5], #4
 8012a34:	fa17 f488 	uxtah	r4, r7, r8
 8012a38:	1422      	asrs	r2, r4, #16
 8012a3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012a3e:	b2a4      	uxth	r4, r4
 8012a40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012a44:	f84e 4b04 	str.w	r4, [lr], #4
 8012a48:	1417      	asrs	r7, r2, #16
 8012a4a:	e7e0      	b.n	8012a0e <__mdiff+0xc6>
 8012a4c:	3e01      	subs	r6, #1
 8012a4e:	e7ea      	b.n	8012a26 <__mdiff+0xde>
 8012a50:	0801454b 	.word	0x0801454b
 8012a54:	0801455c 	.word	0x0801455c

08012a58 <__d2b>:
 8012a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a5c:	4689      	mov	r9, r1
 8012a5e:	2101      	movs	r1, #1
 8012a60:	ec57 6b10 	vmov	r6, r7, d0
 8012a64:	4690      	mov	r8, r2
 8012a66:	f7ff fcd5 	bl	8012414 <_Balloc>
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	b930      	cbnz	r0, 8012a7c <__d2b+0x24>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	4b25      	ldr	r3, [pc, #148]	; (8012b08 <__d2b+0xb0>)
 8012a72:	4826      	ldr	r0, [pc, #152]	; (8012b0c <__d2b+0xb4>)
 8012a74:	f240 310a 	movw	r1, #778	; 0x30a
 8012a78:	f000 f914 	bl	8012ca4 <__assert_func>
 8012a7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a84:	bb35      	cbnz	r5, 8012ad4 <__d2b+0x7c>
 8012a86:	2e00      	cmp	r6, #0
 8012a88:	9301      	str	r3, [sp, #4]
 8012a8a:	d028      	beq.n	8012ade <__d2b+0x86>
 8012a8c:	4668      	mov	r0, sp
 8012a8e:	9600      	str	r6, [sp, #0]
 8012a90:	f7ff fd8c 	bl	80125ac <__lo0bits>
 8012a94:	9900      	ldr	r1, [sp, #0]
 8012a96:	b300      	cbz	r0, 8012ada <__d2b+0x82>
 8012a98:	9a01      	ldr	r2, [sp, #4]
 8012a9a:	f1c0 0320 	rsb	r3, r0, #32
 8012a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8012aa2:	430b      	orrs	r3, r1
 8012aa4:	40c2      	lsrs	r2, r0
 8012aa6:	6163      	str	r3, [r4, #20]
 8012aa8:	9201      	str	r2, [sp, #4]
 8012aaa:	9b01      	ldr	r3, [sp, #4]
 8012aac:	61a3      	str	r3, [r4, #24]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	bf14      	ite	ne
 8012ab2:	2202      	movne	r2, #2
 8012ab4:	2201      	moveq	r2, #1
 8012ab6:	6122      	str	r2, [r4, #16]
 8012ab8:	b1d5      	cbz	r5, 8012af0 <__d2b+0x98>
 8012aba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012abe:	4405      	add	r5, r0
 8012ac0:	f8c9 5000 	str.w	r5, [r9]
 8012ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ac8:	f8c8 0000 	str.w	r0, [r8]
 8012acc:	4620      	mov	r0, r4
 8012ace:	b003      	add	sp, #12
 8012ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ad8:	e7d5      	b.n	8012a86 <__d2b+0x2e>
 8012ada:	6161      	str	r1, [r4, #20]
 8012adc:	e7e5      	b.n	8012aaa <__d2b+0x52>
 8012ade:	a801      	add	r0, sp, #4
 8012ae0:	f7ff fd64 	bl	80125ac <__lo0bits>
 8012ae4:	9b01      	ldr	r3, [sp, #4]
 8012ae6:	6163      	str	r3, [r4, #20]
 8012ae8:	2201      	movs	r2, #1
 8012aea:	6122      	str	r2, [r4, #16]
 8012aec:	3020      	adds	r0, #32
 8012aee:	e7e3      	b.n	8012ab8 <__d2b+0x60>
 8012af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012af8:	f8c9 0000 	str.w	r0, [r9]
 8012afc:	6918      	ldr	r0, [r3, #16]
 8012afe:	f7ff fd35 	bl	801256c <__hi0bits>
 8012b02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b06:	e7df      	b.n	8012ac8 <__d2b+0x70>
 8012b08:	0801454b 	.word	0x0801454b
 8012b0c:	0801455c 	.word	0x0801455c

08012b10 <_calloc_r>:
 8012b10:	b513      	push	{r0, r1, r4, lr}
 8012b12:	434a      	muls	r2, r1
 8012b14:	4611      	mov	r1, r2
 8012b16:	9201      	str	r2, [sp, #4]
 8012b18:	f000 f85a 	bl	8012bd0 <_malloc_r>
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	b118      	cbz	r0, 8012b28 <_calloc_r+0x18>
 8012b20:	9a01      	ldr	r2, [sp, #4]
 8012b22:	2100      	movs	r1, #0
 8012b24:	f7fe fa0e 	bl	8010f44 <memset>
 8012b28:	4620      	mov	r0, r4
 8012b2a:	b002      	add	sp, #8
 8012b2c:	bd10      	pop	{r4, pc}
	...

08012b30 <_free_r>:
 8012b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b32:	2900      	cmp	r1, #0
 8012b34:	d048      	beq.n	8012bc8 <_free_r+0x98>
 8012b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b3a:	9001      	str	r0, [sp, #4]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8012b42:	bfb8      	it	lt
 8012b44:	18e4      	addlt	r4, r4, r3
 8012b46:	f000 f8ef 	bl	8012d28 <__malloc_lock>
 8012b4a:	4a20      	ldr	r2, [pc, #128]	; (8012bcc <_free_r+0x9c>)
 8012b4c:	9801      	ldr	r0, [sp, #4]
 8012b4e:	6813      	ldr	r3, [r2, #0]
 8012b50:	4615      	mov	r5, r2
 8012b52:	b933      	cbnz	r3, 8012b62 <_free_r+0x32>
 8012b54:	6063      	str	r3, [r4, #4]
 8012b56:	6014      	str	r4, [r2, #0]
 8012b58:	b003      	add	sp, #12
 8012b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b5e:	f000 b8e9 	b.w	8012d34 <__malloc_unlock>
 8012b62:	42a3      	cmp	r3, r4
 8012b64:	d90b      	bls.n	8012b7e <_free_r+0x4e>
 8012b66:	6821      	ldr	r1, [r4, #0]
 8012b68:	1862      	adds	r2, r4, r1
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	bf04      	itt	eq
 8012b6e:	681a      	ldreq	r2, [r3, #0]
 8012b70:	685b      	ldreq	r3, [r3, #4]
 8012b72:	6063      	str	r3, [r4, #4]
 8012b74:	bf04      	itt	eq
 8012b76:	1852      	addeq	r2, r2, r1
 8012b78:	6022      	streq	r2, [r4, #0]
 8012b7a:	602c      	str	r4, [r5, #0]
 8012b7c:	e7ec      	b.n	8012b58 <_free_r+0x28>
 8012b7e:	461a      	mov	r2, r3
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	b10b      	cbz	r3, 8012b88 <_free_r+0x58>
 8012b84:	42a3      	cmp	r3, r4
 8012b86:	d9fa      	bls.n	8012b7e <_free_r+0x4e>
 8012b88:	6811      	ldr	r1, [r2, #0]
 8012b8a:	1855      	adds	r5, r2, r1
 8012b8c:	42a5      	cmp	r5, r4
 8012b8e:	d10b      	bne.n	8012ba8 <_free_r+0x78>
 8012b90:	6824      	ldr	r4, [r4, #0]
 8012b92:	4421      	add	r1, r4
 8012b94:	1854      	adds	r4, r2, r1
 8012b96:	42a3      	cmp	r3, r4
 8012b98:	6011      	str	r1, [r2, #0]
 8012b9a:	d1dd      	bne.n	8012b58 <_free_r+0x28>
 8012b9c:	681c      	ldr	r4, [r3, #0]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	6053      	str	r3, [r2, #4]
 8012ba2:	4421      	add	r1, r4
 8012ba4:	6011      	str	r1, [r2, #0]
 8012ba6:	e7d7      	b.n	8012b58 <_free_r+0x28>
 8012ba8:	d902      	bls.n	8012bb0 <_free_r+0x80>
 8012baa:	230c      	movs	r3, #12
 8012bac:	6003      	str	r3, [r0, #0]
 8012bae:	e7d3      	b.n	8012b58 <_free_r+0x28>
 8012bb0:	6825      	ldr	r5, [r4, #0]
 8012bb2:	1961      	adds	r1, r4, r5
 8012bb4:	428b      	cmp	r3, r1
 8012bb6:	bf04      	itt	eq
 8012bb8:	6819      	ldreq	r1, [r3, #0]
 8012bba:	685b      	ldreq	r3, [r3, #4]
 8012bbc:	6063      	str	r3, [r4, #4]
 8012bbe:	bf04      	itt	eq
 8012bc0:	1949      	addeq	r1, r1, r5
 8012bc2:	6021      	streq	r1, [r4, #0]
 8012bc4:	6054      	str	r4, [r2, #4]
 8012bc6:	e7c7      	b.n	8012b58 <_free_r+0x28>
 8012bc8:	b003      	add	sp, #12
 8012bca:	bd30      	pop	{r4, r5, pc}
 8012bcc:	24000204 	.word	0x24000204

08012bd0 <_malloc_r>:
 8012bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bd2:	1ccd      	adds	r5, r1, #3
 8012bd4:	f025 0503 	bic.w	r5, r5, #3
 8012bd8:	3508      	adds	r5, #8
 8012bda:	2d0c      	cmp	r5, #12
 8012bdc:	bf38      	it	cc
 8012bde:	250c      	movcc	r5, #12
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	4606      	mov	r6, r0
 8012be4:	db01      	blt.n	8012bea <_malloc_r+0x1a>
 8012be6:	42a9      	cmp	r1, r5
 8012be8:	d903      	bls.n	8012bf2 <_malloc_r+0x22>
 8012bea:	230c      	movs	r3, #12
 8012bec:	6033      	str	r3, [r6, #0]
 8012bee:	2000      	movs	r0, #0
 8012bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bf2:	f000 f899 	bl	8012d28 <__malloc_lock>
 8012bf6:	4921      	ldr	r1, [pc, #132]	; (8012c7c <_malloc_r+0xac>)
 8012bf8:	680a      	ldr	r2, [r1, #0]
 8012bfa:	4614      	mov	r4, r2
 8012bfc:	b99c      	cbnz	r4, 8012c26 <_malloc_r+0x56>
 8012bfe:	4f20      	ldr	r7, [pc, #128]	; (8012c80 <_malloc_r+0xb0>)
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	b923      	cbnz	r3, 8012c0e <_malloc_r+0x3e>
 8012c04:	4621      	mov	r1, r4
 8012c06:	4630      	mov	r0, r6
 8012c08:	f000 f83c 	bl	8012c84 <_sbrk_r>
 8012c0c:	6038      	str	r0, [r7, #0]
 8012c0e:	4629      	mov	r1, r5
 8012c10:	4630      	mov	r0, r6
 8012c12:	f000 f837 	bl	8012c84 <_sbrk_r>
 8012c16:	1c43      	adds	r3, r0, #1
 8012c18:	d123      	bne.n	8012c62 <_malloc_r+0x92>
 8012c1a:	230c      	movs	r3, #12
 8012c1c:	6033      	str	r3, [r6, #0]
 8012c1e:	4630      	mov	r0, r6
 8012c20:	f000 f888 	bl	8012d34 <__malloc_unlock>
 8012c24:	e7e3      	b.n	8012bee <_malloc_r+0x1e>
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	1b5b      	subs	r3, r3, r5
 8012c2a:	d417      	bmi.n	8012c5c <_malloc_r+0x8c>
 8012c2c:	2b0b      	cmp	r3, #11
 8012c2e:	d903      	bls.n	8012c38 <_malloc_r+0x68>
 8012c30:	6023      	str	r3, [r4, #0]
 8012c32:	441c      	add	r4, r3
 8012c34:	6025      	str	r5, [r4, #0]
 8012c36:	e004      	b.n	8012c42 <_malloc_r+0x72>
 8012c38:	6863      	ldr	r3, [r4, #4]
 8012c3a:	42a2      	cmp	r2, r4
 8012c3c:	bf0c      	ite	eq
 8012c3e:	600b      	streq	r3, [r1, #0]
 8012c40:	6053      	strne	r3, [r2, #4]
 8012c42:	4630      	mov	r0, r6
 8012c44:	f000 f876 	bl	8012d34 <__malloc_unlock>
 8012c48:	f104 000b 	add.w	r0, r4, #11
 8012c4c:	1d23      	adds	r3, r4, #4
 8012c4e:	f020 0007 	bic.w	r0, r0, #7
 8012c52:	1ac2      	subs	r2, r0, r3
 8012c54:	d0cc      	beq.n	8012bf0 <_malloc_r+0x20>
 8012c56:	1a1b      	subs	r3, r3, r0
 8012c58:	50a3      	str	r3, [r4, r2]
 8012c5a:	e7c9      	b.n	8012bf0 <_malloc_r+0x20>
 8012c5c:	4622      	mov	r2, r4
 8012c5e:	6864      	ldr	r4, [r4, #4]
 8012c60:	e7cc      	b.n	8012bfc <_malloc_r+0x2c>
 8012c62:	1cc4      	adds	r4, r0, #3
 8012c64:	f024 0403 	bic.w	r4, r4, #3
 8012c68:	42a0      	cmp	r0, r4
 8012c6a:	d0e3      	beq.n	8012c34 <_malloc_r+0x64>
 8012c6c:	1a21      	subs	r1, r4, r0
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f000 f808 	bl	8012c84 <_sbrk_r>
 8012c74:	3001      	adds	r0, #1
 8012c76:	d1dd      	bne.n	8012c34 <_malloc_r+0x64>
 8012c78:	e7cf      	b.n	8012c1a <_malloc_r+0x4a>
 8012c7a:	bf00      	nop
 8012c7c:	24000204 	.word	0x24000204
 8012c80:	24000208 	.word	0x24000208

08012c84 <_sbrk_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4d06      	ldr	r5, [pc, #24]	; (8012ca0 <_sbrk_r+0x1c>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	602b      	str	r3, [r5, #0]
 8012c90:	f7f4 fbe0 	bl	8007454 <_sbrk>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_sbrk_r+0x1a>
 8012c98:	682b      	ldr	r3, [r5, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_sbrk_r+0x1a>
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	24000a48 	.word	0x24000a48

08012ca4 <__assert_func>:
 8012ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ca6:	4614      	mov	r4, r2
 8012ca8:	461a      	mov	r2, r3
 8012caa:	4b09      	ldr	r3, [pc, #36]	; (8012cd0 <__assert_func+0x2c>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	4605      	mov	r5, r0
 8012cb0:	68d8      	ldr	r0, [r3, #12]
 8012cb2:	b14c      	cbz	r4, 8012cc8 <__assert_func+0x24>
 8012cb4:	4b07      	ldr	r3, [pc, #28]	; (8012cd4 <__assert_func+0x30>)
 8012cb6:	9100      	str	r1, [sp, #0]
 8012cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012cbc:	4906      	ldr	r1, [pc, #24]	; (8012cd8 <__assert_func+0x34>)
 8012cbe:	462b      	mov	r3, r5
 8012cc0:	f000 f80e 	bl	8012ce0 <fiprintf>
 8012cc4:	f000 fa64 	bl	8013190 <abort>
 8012cc8:	4b04      	ldr	r3, [pc, #16]	; (8012cdc <__assert_func+0x38>)
 8012cca:	461c      	mov	r4, r3
 8012ccc:	e7f3      	b.n	8012cb6 <__assert_func+0x12>
 8012cce:	bf00      	nop
 8012cd0:	24000010 	.word	0x24000010
 8012cd4:	080146bc 	.word	0x080146bc
 8012cd8:	080146c9 	.word	0x080146c9
 8012cdc:	080146f7 	.word	0x080146f7

08012ce0 <fiprintf>:
 8012ce0:	b40e      	push	{r1, r2, r3}
 8012ce2:	b503      	push	{r0, r1, lr}
 8012ce4:	4601      	mov	r1, r0
 8012ce6:	ab03      	add	r3, sp, #12
 8012ce8:	4805      	ldr	r0, [pc, #20]	; (8012d00 <fiprintf+0x20>)
 8012cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cee:	6800      	ldr	r0, [r0, #0]
 8012cf0:	9301      	str	r3, [sp, #4]
 8012cf2:	f000 f84f 	bl	8012d94 <_vfiprintf_r>
 8012cf6:	b002      	add	sp, #8
 8012cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cfc:	b003      	add	sp, #12
 8012cfe:	4770      	bx	lr
 8012d00:	24000010 	.word	0x24000010

08012d04 <__ascii_mbtowc>:
 8012d04:	b082      	sub	sp, #8
 8012d06:	b901      	cbnz	r1, 8012d0a <__ascii_mbtowc+0x6>
 8012d08:	a901      	add	r1, sp, #4
 8012d0a:	b142      	cbz	r2, 8012d1e <__ascii_mbtowc+0x1a>
 8012d0c:	b14b      	cbz	r3, 8012d22 <__ascii_mbtowc+0x1e>
 8012d0e:	7813      	ldrb	r3, [r2, #0]
 8012d10:	600b      	str	r3, [r1, #0]
 8012d12:	7812      	ldrb	r2, [r2, #0]
 8012d14:	1e10      	subs	r0, r2, #0
 8012d16:	bf18      	it	ne
 8012d18:	2001      	movne	r0, #1
 8012d1a:	b002      	add	sp, #8
 8012d1c:	4770      	bx	lr
 8012d1e:	4610      	mov	r0, r2
 8012d20:	e7fb      	b.n	8012d1a <__ascii_mbtowc+0x16>
 8012d22:	f06f 0001 	mvn.w	r0, #1
 8012d26:	e7f8      	b.n	8012d1a <__ascii_mbtowc+0x16>

08012d28 <__malloc_lock>:
 8012d28:	4801      	ldr	r0, [pc, #4]	; (8012d30 <__malloc_lock+0x8>)
 8012d2a:	f000 bbf1 	b.w	8013510 <__retarget_lock_acquire_recursive>
 8012d2e:	bf00      	nop
 8012d30:	24000a50 	.word	0x24000a50

08012d34 <__malloc_unlock>:
 8012d34:	4801      	ldr	r0, [pc, #4]	; (8012d3c <__malloc_unlock+0x8>)
 8012d36:	f000 bbec 	b.w	8013512 <__retarget_lock_release_recursive>
 8012d3a:	bf00      	nop
 8012d3c:	24000a50 	.word	0x24000a50

08012d40 <__sfputc_r>:
 8012d40:	6893      	ldr	r3, [r2, #8]
 8012d42:	3b01      	subs	r3, #1
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	b410      	push	{r4}
 8012d48:	6093      	str	r3, [r2, #8]
 8012d4a:	da08      	bge.n	8012d5e <__sfputc_r+0x1e>
 8012d4c:	6994      	ldr	r4, [r2, #24]
 8012d4e:	42a3      	cmp	r3, r4
 8012d50:	db01      	blt.n	8012d56 <__sfputc_r+0x16>
 8012d52:	290a      	cmp	r1, #10
 8012d54:	d103      	bne.n	8012d5e <__sfputc_r+0x1e>
 8012d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d5a:	f000 b94b 	b.w	8012ff4 <__swbuf_r>
 8012d5e:	6813      	ldr	r3, [r2, #0]
 8012d60:	1c58      	adds	r0, r3, #1
 8012d62:	6010      	str	r0, [r2, #0]
 8012d64:	7019      	strb	r1, [r3, #0]
 8012d66:	4608      	mov	r0, r1
 8012d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d6c:	4770      	bx	lr

08012d6e <__sfputs_r>:
 8012d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d70:	4606      	mov	r6, r0
 8012d72:	460f      	mov	r7, r1
 8012d74:	4614      	mov	r4, r2
 8012d76:	18d5      	adds	r5, r2, r3
 8012d78:	42ac      	cmp	r4, r5
 8012d7a:	d101      	bne.n	8012d80 <__sfputs_r+0x12>
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	e007      	b.n	8012d90 <__sfputs_r+0x22>
 8012d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d84:	463a      	mov	r2, r7
 8012d86:	4630      	mov	r0, r6
 8012d88:	f7ff ffda 	bl	8012d40 <__sfputc_r>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d1f3      	bne.n	8012d78 <__sfputs_r+0xa>
 8012d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d94 <_vfiprintf_r>:
 8012d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d98:	460d      	mov	r5, r1
 8012d9a:	b09d      	sub	sp, #116	; 0x74
 8012d9c:	4614      	mov	r4, r2
 8012d9e:	4698      	mov	r8, r3
 8012da0:	4606      	mov	r6, r0
 8012da2:	b118      	cbz	r0, 8012dac <_vfiprintf_r+0x18>
 8012da4:	6983      	ldr	r3, [r0, #24]
 8012da6:	b90b      	cbnz	r3, 8012dac <_vfiprintf_r+0x18>
 8012da8:	f000 fb14 	bl	80133d4 <__sinit>
 8012dac:	4b89      	ldr	r3, [pc, #548]	; (8012fd4 <_vfiprintf_r+0x240>)
 8012dae:	429d      	cmp	r5, r3
 8012db0:	d11b      	bne.n	8012dea <_vfiprintf_r+0x56>
 8012db2:	6875      	ldr	r5, [r6, #4]
 8012db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012db6:	07d9      	lsls	r1, r3, #31
 8012db8:	d405      	bmi.n	8012dc6 <_vfiprintf_r+0x32>
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	059a      	lsls	r2, r3, #22
 8012dbe:	d402      	bmi.n	8012dc6 <_vfiprintf_r+0x32>
 8012dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dc2:	f000 fba5 	bl	8013510 <__retarget_lock_acquire_recursive>
 8012dc6:	89ab      	ldrh	r3, [r5, #12]
 8012dc8:	071b      	lsls	r3, r3, #28
 8012dca:	d501      	bpl.n	8012dd0 <_vfiprintf_r+0x3c>
 8012dcc:	692b      	ldr	r3, [r5, #16]
 8012dce:	b9eb      	cbnz	r3, 8012e0c <_vfiprintf_r+0x78>
 8012dd0:	4629      	mov	r1, r5
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f000 f96e 	bl	80130b4 <__swsetup_r>
 8012dd8:	b1c0      	cbz	r0, 8012e0c <_vfiprintf_r+0x78>
 8012dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ddc:	07dc      	lsls	r4, r3, #31
 8012dde:	d50e      	bpl.n	8012dfe <_vfiprintf_r+0x6a>
 8012de0:	f04f 30ff 	mov.w	r0, #4294967295
 8012de4:	b01d      	add	sp, #116	; 0x74
 8012de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dea:	4b7b      	ldr	r3, [pc, #492]	; (8012fd8 <_vfiprintf_r+0x244>)
 8012dec:	429d      	cmp	r5, r3
 8012dee:	d101      	bne.n	8012df4 <_vfiprintf_r+0x60>
 8012df0:	68b5      	ldr	r5, [r6, #8]
 8012df2:	e7df      	b.n	8012db4 <_vfiprintf_r+0x20>
 8012df4:	4b79      	ldr	r3, [pc, #484]	; (8012fdc <_vfiprintf_r+0x248>)
 8012df6:	429d      	cmp	r5, r3
 8012df8:	bf08      	it	eq
 8012dfa:	68f5      	ldreq	r5, [r6, #12]
 8012dfc:	e7da      	b.n	8012db4 <_vfiprintf_r+0x20>
 8012dfe:	89ab      	ldrh	r3, [r5, #12]
 8012e00:	0598      	lsls	r0, r3, #22
 8012e02:	d4ed      	bmi.n	8012de0 <_vfiprintf_r+0x4c>
 8012e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e06:	f000 fb84 	bl	8013512 <__retarget_lock_release_recursive>
 8012e0a:	e7e9      	b.n	8012de0 <_vfiprintf_r+0x4c>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e10:	2320      	movs	r3, #32
 8012e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e1a:	2330      	movs	r3, #48	; 0x30
 8012e1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012fe0 <_vfiprintf_r+0x24c>
 8012e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e24:	f04f 0901 	mov.w	r9, #1
 8012e28:	4623      	mov	r3, r4
 8012e2a:	469a      	mov	sl, r3
 8012e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e30:	b10a      	cbz	r2, 8012e36 <_vfiprintf_r+0xa2>
 8012e32:	2a25      	cmp	r2, #37	; 0x25
 8012e34:	d1f9      	bne.n	8012e2a <_vfiprintf_r+0x96>
 8012e36:	ebba 0b04 	subs.w	fp, sl, r4
 8012e3a:	d00b      	beq.n	8012e54 <_vfiprintf_r+0xc0>
 8012e3c:	465b      	mov	r3, fp
 8012e3e:	4622      	mov	r2, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	4630      	mov	r0, r6
 8012e44:	f7ff ff93 	bl	8012d6e <__sfputs_r>
 8012e48:	3001      	adds	r0, #1
 8012e4a:	f000 80aa 	beq.w	8012fa2 <_vfiprintf_r+0x20e>
 8012e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e50:	445a      	add	r2, fp
 8012e52:	9209      	str	r2, [sp, #36]	; 0x24
 8012e54:	f89a 3000 	ldrb.w	r3, [sl]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	f000 80a2 	beq.w	8012fa2 <_vfiprintf_r+0x20e>
 8012e5e:	2300      	movs	r3, #0
 8012e60:	f04f 32ff 	mov.w	r2, #4294967295
 8012e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e68:	f10a 0a01 	add.w	sl, sl, #1
 8012e6c:	9304      	str	r3, [sp, #16]
 8012e6e:	9307      	str	r3, [sp, #28]
 8012e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e74:	931a      	str	r3, [sp, #104]	; 0x68
 8012e76:	4654      	mov	r4, sl
 8012e78:	2205      	movs	r2, #5
 8012e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e7e:	4858      	ldr	r0, [pc, #352]	; (8012fe0 <_vfiprintf_r+0x24c>)
 8012e80:	f7ed fa4e 	bl	8000320 <memchr>
 8012e84:	9a04      	ldr	r2, [sp, #16]
 8012e86:	b9d8      	cbnz	r0, 8012ec0 <_vfiprintf_r+0x12c>
 8012e88:	06d1      	lsls	r1, r2, #27
 8012e8a:	bf44      	itt	mi
 8012e8c:	2320      	movmi	r3, #32
 8012e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e92:	0713      	lsls	r3, r2, #28
 8012e94:	bf44      	itt	mi
 8012e96:	232b      	movmi	r3, #43	; 0x2b
 8012e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ea2:	d015      	beq.n	8012ed0 <_vfiprintf_r+0x13c>
 8012ea4:	9a07      	ldr	r2, [sp, #28]
 8012ea6:	4654      	mov	r4, sl
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	f04f 0c0a 	mov.w	ip, #10
 8012eae:	4621      	mov	r1, r4
 8012eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012eb4:	3b30      	subs	r3, #48	; 0x30
 8012eb6:	2b09      	cmp	r3, #9
 8012eb8:	d94e      	bls.n	8012f58 <_vfiprintf_r+0x1c4>
 8012eba:	b1b0      	cbz	r0, 8012eea <_vfiprintf_r+0x156>
 8012ebc:	9207      	str	r2, [sp, #28]
 8012ebe:	e014      	b.n	8012eea <_vfiprintf_r+0x156>
 8012ec0:	eba0 0308 	sub.w	r3, r0, r8
 8012ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ec8:	4313      	orrs	r3, r2
 8012eca:	9304      	str	r3, [sp, #16]
 8012ecc:	46a2      	mov	sl, r4
 8012ece:	e7d2      	b.n	8012e76 <_vfiprintf_r+0xe2>
 8012ed0:	9b03      	ldr	r3, [sp, #12]
 8012ed2:	1d19      	adds	r1, r3, #4
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	9103      	str	r1, [sp, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	bfbb      	ittet	lt
 8012edc:	425b      	neglt	r3, r3
 8012ede:	f042 0202 	orrlt.w	r2, r2, #2
 8012ee2:	9307      	strge	r3, [sp, #28]
 8012ee4:	9307      	strlt	r3, [sp, #28]
 8012ee6:	bfb8      	it	lt
 8012ee8:	9204      	strlt	r2, [sp, #16]
 8012eea:	7823      	ldrb	r3, [r4, #0]
 8012eec:	2b2e      	cmp	r3, #46	; 0x2e
 8012eee:	d10c      	bne.n	8012f0a <_vfiprintf_r+0x176>
 8012ef0:	7863      	ldrb	r3, [r4, #1]
 8012ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ef4:	d135      	bne.n	8012f62 <_vfiprintf_r+0x1ce>
 8012ef6:	9b03      	ldr	r3, [sp, #12]
 8012ef8:	1d1a      	adds	r2, r3, #4
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	9203      	str	r2, [sp, #12]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	bfb8      	it	lt
 8012f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f06:	3402      	adds	r4, #2
 8012f08:	9305      	str	r3, [sp, #20]
 8012f0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ff0 <_vfiprintf_r+0x25c>
 8012f0e:	7821      	ldrb	r1, [r4, #0]
 8012f10:	2203      	movs	r2, #3
 8012f12:	4650      	mov	r0, sl
 8012f14:	f7ed fa04 	bl	8000320 <memchr>
 8012f18:	b140      	cbz	r0, 8012f2c <_vfiprintf_r+0x198>
 8012f1a:	2340      	movs	r3, #64	; 0x40
 8012f1c:	eba0 000a 	sub.w	r0, r0, sl
 8012f20:	fa03 f000 	lsl.w	r0, r3, r0
 8012f24:	9b04      	ldr	r3, [sp, #16]
 8012f26:	4303      	orrs	r3, r0
 8012f28:	3401      	adds	r4, #1
 8012f2a:	9304      	str	r3, [sp, #16]
 8012f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f30:	482c      	ldr	r0, [pc, #176]	; (8012fe4 <_vfiprintf_r+0x250>)
 8012f32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f36:	2206      	movs	r2, #6
 8012f38:	f7ed f9f2 	bl	8000320 <memchr>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d03f      	beq.n	8012fc0 <_vfiprintf_r+0x22c>
 8012f40:	4b29      	ldr	r3, [pc, #164]	; (8012fe8 <_vfiprintf_r+0x254>)
 8012f42:	bb1b      	cbnz	r3, 8012f8c <_vfiprintf_r+0x1f8>
 8012f44:	9b03      	ldr	r3, [sp, #12]
 8012f46:	3307      	adds	r3, #7
 8012f48:	f023 0307 	bic.w	r3, r3, #7
 8012f4c:	3308      	adds	r3, #8
 8012f4e:	9303      	str	r3, [sp, #12]
 8012f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f52:	443b      	add	r3, r7
 8012f54:	9309      	str	r3, [sp, #36]	; 0x24
 8012f56:	e767      	b.n	8012e28 <_vfiprintf_r+0x94>
 8012f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f5c:	460c      	mov	r4, r1
 8012f5e:	2001      	movs	r0, #1
 8012f60:	e7a5      	b.n	8012eae <_vfiprintf_r+0x11a>
 8012f62:	2300      	movs	r3, #0
 8012f64:	3401      	adds	r4, #1
 8012f66:	9305      	str	r3, [sp, #20]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	f04f 0c0a 	mov.w	ip, #10
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f74:	3a30      	subs	r2, #48	; 0x30
 8012f76:	2a09      	cmp	r2, #9
 8012f78:	d903      	bls.n	8012f82 <_vfiprintf_r+0x1ee>
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d0c5      	beq.n	8012f0a <_vfiprintf_r+0x176>
 8012f7e:	9105      	str	r1, [sp, #20]
 8012f80:	e7c3      	b.n	8012f0a <_vfiprintf_r+0x176>
 8012f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f86:	4604      	mov	r4, r0
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e7f0      	b.n	8012f6e <_vfiprintf_r+0x1da>
 8012f8c:	ab03      	add	r3, sp, #12
 8012f8e:	9300      	str	r3, [sp, #0]
 8012f90:	462a      	mov	r2, r5
 8012f92:	4b16      	ldr	r3, [pc, #88]	; (8012fec <_vfiprintf_r+0x258>)
 8012f94:	a904      	add	r1, sp, #16
 8012f96:	4630      	mov	r0, r6
 8012f98:	f7fe f86e 	bl	8011078 <_printf_float>
 8012f9c:	4607      	mov	r7, r0
 8012f9e:	1c78      	adds	r0, r7, #1
 8012fa0:	d1d6      	bne.n	8012f50 <_vfiprintf_r+0x1bc>
 8012fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fa4:	07d9      	lsls	r1, r3, #31
 8012fa6:	d405      	bmi.n	8012fb4 <_vfiprintf_r+0x220>
 8012fa8:	89ab      	ldrh	r3, [r5, #12]
 8012faa:	059a      	lsls	r2, r3, #22
 8012fac:	d402      	bmi.n	8012fb4 <_vfiprintf_r+0x220>
 8012fae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fb0:	f000 faaf 	bl	8013512 <__retarget_lock_release_recursive>
 8012fb4:	89ab      	ldrh	r3, [r5, #12]
 8012fb6:	065b      	lsls	r3, r3, #25
 8012fb8:	f53f af12 	bmi.w	8012de0 <_vfiprintf_r+0x4c>
 8012fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fbe:	e711      	b.n	8012de4 <_vfiprintf_r+0x50>
 8012fc0:	ab03      	add	r3, sp, #12
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	462a      	mov	r2, r5
 8012fc6:	4b09      	ldr	r3, [pc, #36]	; (8012fec <_vfiprintf_r+0x258>)
 8012fc8:	a904      	add	r1, sp, #16
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f7fe fae0 	bl	8011590 <_printf_i>
 8012fd0:	e7e4      	b.n	8012f9c <_vfiprintf_r+0x208>
 8012fd2:	bf00      	nop
 8012fd4:	08014834 	.word	0x08014834
 8012fd8:	08014854 	.word	0x08014854
 8012fdc:	08014814 	.word	0x08014814
 8012fe0:	08014702 	.word	0x08014702
 8012fe4:	0801470c 	.word	0x0801470c
 8012fe8:	08011079 	.word	0x08011079
 8012fec:	08012d6f 	.word	0x08012d6f
 8012ff0:	08014708 	.word	0x08014708

08012ff4 <__swbuf_r>:
 8012ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff6:	460e      	mov	r6, r1
 8012ff8:	4614      	mov	r4, r2
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	b118      	cbz	r0, 8013006 <__swbuf_r+0x12>
 8012ffe:	6983      	ldr	r3, [r0, #24]
 8013000:	b90b      	cbnz	r3, 8013006 <__swbuf_r+0x12>
 8013002:	f000 f9e7 	bl	80133d4 <__sinit>
 8013006:	4b21      	ldr	r3, [pc, #132]	; (801308c <__swbuf_r+0x98>)
 8013008:	429c      	cmp	r4, r3
 801300a:	d12b      	bne.n	8013064 <__swbuf_r+0x70>
 801300c:	686c      	ldr	r4, [r5, #4]
 801300e:	69a3      	ldr	r3, [r4, #24]
 8013010:	60a3      	str	r3, [r4, #8]
 8013012:	89a3      	ldrh	r3, [r4, #12]
 8013014:	071a      	lsls	r2, r3, #28
 8013016:	d52f      	bpl.n	8013078 <__swbuf_r+0x84>
 8013018:	6923      	ldr	r3, [r4, #16]
 801301a:	b36b      	cbz	r3, 8013078 <__swbuf_r+0x84>
 801301c:	6923      	ldr	r3, [r4, #16]
 801301e:	6820      	ldr	r0, [r4, #0]
 8013020:	1ac0      	subs	r0, r0, r3
 8013022:	6963      	ldr	r3, [r4, #20]
 8013024:	b2f6      	uxtb	r6, r6
 8013026:	4283      	cmp	r3, r0
 8013028:	4637      	mov	r7, r6
 801302a:	dc04      	bgt.n	8013036 <__swbuf_r+0x42>
 801302c:	4621      	mov	r1, r4
 801302e:	4628      	mov	r0, r5
 8013030:	f000 f93c 	bl	80132ac <_fflush_r>
 8013034:	bb30      	cbnz	r0, 8013084 <__swbuf_r+0x90>
 8013036:	68a3      	ldr	r3, [r4, #8]
 8013038:	3b01      	subs	r3, #1
 801303a:	60a3      	str	r3, [r4, #8]
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	6022      	str	r2, [r4, #0]
 8013042:	701e      	strb	r6, [r3, #0]
 8013044:	6963      	ldr	r3, [r4, #20]
 8013046:	3001      	adds	r0, #1
 8013048:	4283      	cmp	r3, r0
 801304a:	d004      	beq.n	8013056 <__swbuf_r+0x62>
 801304c:	89a3      	ldrh	r3, [r4, #12]
 801304e:	07db      	lsls	r3, r3, #31
 8013050:	d506      	bpl.n	8013060 <__swbuf_r+0x6c>
 8013052:	2e0a      	cmp	r6, #10
 8013054:	d104      	bne.n	8013060 <__swbuf_r+0x6c>
 8013056:	4621      	mov	r1, r4
 8013058:	4628      	mov	r0, r5
 801305a:	f000 f927 	bl	80132ac <_fflush_r>
 801305e:	b988      	cbnz	r0, 8013084 <__swbuf_r+0x90>
 8013060:	4638      	mov	r0, r7
 8013062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013064:	4b0a      	ldr	r3, [pc, #40]	; (8013090 <__swbuf_r+0x9c>)
 8013066:	429c      	cmp	r4, r3
 8013068:	d101      	bne.n	801306e <__swbuf_r+0x7a>
 801306a:	68ac      	ldr	r4, [r5, #8]
 801306c:	e7cf      	b.n	801300e <__swbuf_r+0x1a>
 801306e:	4b09      	ldr	r3, [pc, #36]	; (8013094 <__swbuf_r+0xa0>)
 8013070:	429c      	cmp	r4, r3
 8013072:	bf08      	it	eq
 8013074:	68ec      	ldreq	r4, [r5, #12]
 8013076:	e7ca      	b.n	801300e <__swbuf_r+0x1a>
 8013078:	4621      	mov	r1, r4
 801307a:	4628      	mov	r0, r5
 801307c:	f000 f81a 	bl	80130b4 <__swsetup_r>
 8013080:	2800      	cmp	r0, #0
 8013082:	d0cb      	beq.n	801301c <__swbuf_r+0x28>
 8013084:	f04f 37ff 	mov.w	r7, #4294967295
 8013088:	e7ea      	b.n	8013060 <__swbuf_r+0x6c>
 801308a:	bf00      	nop
 801308c:	08014834 	.word	0x08014834
 8013090:	08014854 	.word	0x08014854
 8013094:	08014814 	.word	0x08014814

08013098 <__ascii_wctomb>:
 8013098:	b149      	cbz	r1, 80130ae <__ascii_wctomb+0x16>
 801309a:	2aff      	cmp	r2, #255	; 0xff
 801309c:	bf85      	ittet	hi
 801309e:	238a      	movhi	r3, #138	; 0x8a
 80130a0:	6003      	strhi	r3, [r0, #0]
 80130a2:	700a      	strbls	r2, [r1, #0]
 80130a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80130a8:	bf98      	it	ls
 80130aa:	2001      	movls	r0, #1
 80130ac:	4770      	bx	lr
 80130ae:	4608      	mov	r0, r1
 80130b0:	4770      	bx	lr
	...

080130b4 <__swsetup_r>:
 80130b4:	4b32      	ldr	r3, [pc, #200]	; (8013180 <__swsetup_r+0xcc>)
 80130b6:	b570      	push	{r4, r5, r6, lr}
 80130b8:	681d      	ldr	r5, [r3, #0]
 80130ba:	4606      	mov	r6, r0
 80130bc:	460c      	mov	r4, r1
 80130be:	b125      	cbz	r5, 80130ca <__swsetup_r+0x16>
 80130c0:	69ab      	ldr	r3, [r5, #24]
 80130c2:	b913      	cbnz	r3, 80130ca <__swsetup_r+0x16>
 80130c4:	4628      	mov	r0, r5
 80130c6:	f000 f985 	bl	80133d4 <__sinit>
 80130ca:	4b2e      	ldr	r3, [pc, #184]	; (8013184 <__swsetup_r+0xd0>)
 80130cc:	429c      	cmp	r4, r3
 80130ce:	d10f      	bne.n	80130f0 <__swsetup_r+0x3c>
 80130d0:	686c      	ldr	r4, [r5, #4]
 80130d2:	89a3      	ldrh	r3, [r4, #12]
 80130d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130d8:	0719      	lsls	r1, r3, #28
 80130da:	d42c      	bmi.n	8013136 <__swsetup_r+0x82>
 80130dc:	06dd      	lsls	r5, r3, #27
 80130de:	d411      	bmi.n	8013104 <__swsetup_r+0x50>
 80130e0:	2309      	movs	r3, #9
 80130e2:	6033      	str	r3, [r6, #0]
 80130e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80130e8:	81a3      	strh	r3, [r4, #12]
 80130ea:	f04f 30ff 	mov.w	r0, #4294967295
 80130ee:	e03e      	b.n	801316e <__swsetup_r+0xba>
 80130f0:	4b25      	ldr	r3, [pc, #148]	; (8013188 <__swsetup_r+0xd4>)
 80130f2:	429c      	cmp	r4, r3
 80130f4:	d101      	bne.n	80130fa <__swsetup_r+0x46>
 80130f6:	68ac      	ldr	r4, [r5, #8]
 80130f8:	e7eb      	b.n	80130d2 <__swsetup_r+0x1e>
 80130fa:	4b24      	ldr	r3, [pc, #144]	; (801318c <__swsetup_r+0xd8>)
 80130fc:	429c      	cmp	r4, r3
 80130fe:	bf08      	it	eq
 8013100:	68ec      	ldreq	r4, [r5, #12]
 8013102:	e7e6      	b.n	80130d2 <__swsetup_r+0x1e>
 8013104:	0758      	lsls	r0, r3, #29
 8013106:	d512      	bpl.n	801312e <__swsetup_r+0x7a>
 8013108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801310a:	b141      	cbz	r1, 801311e <__swsetup_r+0x6a>
 801310c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013110:	4299      	cmp	r1, r3
 8013112:	d002      	beq.n	801311a <__swsetup_r+0x66>
 8013114:	4630      	mov	r0, r6
 8013116:	f7ff fd0b 	bl	8012b30 <_free_r>
 801311a:	2300      	movs	r3, #0
 801311c:	6363      	str	r3, [r4, #52]	; 0x34
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013124:	81a3      	strh	r3, [r4, #12]
 8013126:	2300      	movs	r3, #0
 8013128:	6063      	str	r3, [r4, #4]
 801312a:	6923      	ldr	r3, [r4, #16]
 801312c:	6023      	str	r3, [r4, #0]
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	f043 0308 	orr.w	r3, r3, #8
 8013134:	81a3      	strh	r3, [r4, #12]
 8013136:	6923      	ldr	r3, [r4, #16]
 8013138:	b94b      	cbnz	r3, 801314e <__swsetup_r+0x9a>
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013144:	d003      	beq.n	801314e <__swsetup_r+0x9a>
 8013146:	4621      	mov	r1, r4
 8013148:	4630      	mov	r0, r6
 801314a:	f000 fa07 	bl	801355c <__smakebuf_r>
 801314e:	89a0      	ldrh	r0, [r4, #12]
 8013150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013154:	f010 0301 	ands.w	r3, r0, #1
 8013158:	d00a      	beq.n	8013170 <__swsetup_r+0xbc>
 801315a:	2300      	movs	r3, #0
 801315c:	60a3      	str	r3, [r4, #8]
 801315e:	6963      	ldr	r3, [r4, #20]
 8013160:	425b      	negs	r3, r3
 8013162:	61a3      	str	r3, [r4, #24]
 8013164:	6923      	ldr	r3, [r4, #16]
 8013166:	b943      	cbnz	r3, 801317a <__swsetup_r+0xc6>
 8013168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801316c:	d1ba      	bne.n	80130e4 <__swsetup_r+0x30>
 801316e:	bd70      	pop	{r4, r5, r6, pc}
 8013170:	0781      	lsls	r1, r0, #30
 8013172:	bf58      	it	pl
 8013174:	6963      	ldrpl	r3, [r4, #20]
 8013176:	60a3      	str	r3, [r4, #8]
 8013178:	e7f4      	b.n	8013164 <__swsetup_r+0xb0>
 801317a:	2000      	movs	r0, #0
 801317c:	e7f7      	b.n	801316e <__swsetup_r+0xba>
 801317e:	bf00      	nop
 8013180:	24000010 	.word	0x24000010
 8013184:	08014834 	.word	0x08014834
 8013188:	08014854 	.word	0x08014854
 801318c:	08014814 	.word	0x08014814

08013190 <abort>:
 8013190:	b508      	push	{r3, lr}
 8013192:	2006      	movs	r0, #6
 8013194:	f000 fa4a 	bl	801362c <raise>
 8013198:	2001      	movs	r0, #1
 801319a:	f7f4 f8e3 	bl	8007364 <_exit>
	...

080131a0 <__sflush_r>:
 80131a0:	898a      	ldrh	r2, [r1, #12]
 80131a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a6:	4605      	mov	r5, r0
 80131a8:	0710      	lsls	r0, r2, #28
 80131aa:	460c      	mov	r4, r1
 80131ac:	d458      	bmi.n	8013260 <__sflush_r+0xc0>
 80131ae:	684b      	ldr	r3, [r1, #4]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	dc05      	bgt.n	80131c0 <__sflush_r+0x20>
 80131b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	dc02      	bgt.n	80131c0 <__sflush_r+0x20>
 80131ba:	2000      	movs	r0, #0
 80131bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131c2:	2e00      	cmp	r6, #0
 80131c4:	d0f9      	beq.n	80131ba <__sflush_r+0x1a>
 80131c6:	2300      	movs	r3, #0
 80131c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80131cc:	682f      	ldr	r7, [r5, #0]
 80131ce:	602b      	str	r3, [r5, #0]
 80131d0:	d032      	beq.n	8013238 <__sflush_r+0x98>
 80131d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131d4:	89a3      	ldrh	r3, [r4, #12]
 80131d6:	075a      	lsls	r2, r3, #29
 80131d8:	d505      	bpl.n	80131e6 <__sflush_r+0x46>
 80131da:	6863      	ldr	r3, [r4, #4]
 80131dc:	1ac0      	subs	r0, r0, r3
 80131de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131e0:	b10b      	cbz	r3, 80131e6 <__sflush_r+0x46>
 80131e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131e4:	1ac0      	subs	r0, r0, r3
 80131e6:	2300      	movs	r3, #0
 80131e8:	4602      	mov	r2, r0
 80131ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131ec:	6a21      	ldr	r1, [r4, #32]
 80131ee:	4628      	mov	r0, r5
 80131f0:	47b0      	blx	r6
 80131f2:	1c43      	adds	r3, r0, #1
 80131f4:	89a3      	ldrh	r3, [r4, #12]
 80131f6:	d106      	bne.n	8013206 <__sflush_r+0x66>
 80131f8:	6829      	ldr	r1, [r5, #0]
 80131fa:	291d      	cmp	r1, #29
 80131fc:	d82c      	bhi.n	8013258 <__sflush_r+0xb8>
 80131fe:	4a2a      	ldr	r2, [pc, #168]	; (80132a8 <__sflush_r+0x108>)
 8013200:	40ca      	lsrs	r2, r1
 8013202:	07d6      	lsls	r6, r2, #31
 8013204:	d528      	bpl.n	8013258 <__sflush_r+0xb8>
 8013206:	2200      	movs	r2, #0
 8013208:	6062      	str	r2, [r4, #4]
 801320a:	04d9      	lsls	r1, r3, #19
 801320c:	6922      	ldr	r2, [r4, #16]
 801320e:	6022      	str	r2, [r4, #0]
 8013210:	d504      	bpl.n	801321c <__sflush_r+0x7c>
 8013212:	1c42      	adds	r2, r0, #1
 8013214:	d101      	bne.n	801321a <__sflush_r+0x7a>
 8013216:	682b      	ldr	r3, [r5, #0]
 8013218:	b903      	cbnz	r3, 801321c <__sflush_r+0x7c>
 801321a:	6560      	str	r0, [r4, #84]	; 0x54
 801321c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801321e:	602f      	str	r7, [r5, #0]
 8013220:	2900      	cmp	r1, #0
 8013222:	d0ca      	beq.n	80131ba <__sflush_r+0x1a>
 8013224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013228:	4299      	cmp	r1, r3
 801322a:	d002      	beq.n	8013232 <__sflush_r+0x92>
 801322c:	4628      	mov	r0, r5
 801322e:	f7ff fc7f 	bl	8012b30 <_free_r>
 8013232:	2000      	movs	r0, #0
 8013234:	6360      	str	r0, [r4, #52]	; 0x34
 8013236:	e7c1      	b.n	80131bc <__sflush_r+0x1c>
 8013238:	6a21      	ldr	r1, [r4, #32]
 801323a:	2301      	movs	r3, #1
 801323c:	4628      	mov	r0, r5
 801323e:	47b0      	blx	r6
 8013240:	1c41      	adds	r1, r0, #1
 8013242:	d1c7      	bne.n	80131d4 <__sflush_r+0x34>
 8013244:	682b      	ldr	r3, [r5, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0c4      	beq.n	80131d4 <__sflush_r+0x34>
 801324a:	2b1d      	cmp	r3, #29
 801324c:	d001      	beq.n	8013252 <__sflush_r+0xb2>
 801324e:	2b16      	cmp	r3, #22
 8013250:	d101      	bne.n	8013256 <__sflush_r+0xb6>
 8013252:	602f      	str	r7, [r5, #0]
 8013254:	e7b1      	b.n	80131ba <__sflush_r+0x1a>
 8013256:	89a3      	ldrh	r3, [r4, #12]
 8013258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801325c:	81a3      	strh	r3, [r4, #12]
 801325e:	e7ad      	b.n	80131bc <__sflush_r+0x1c>
 8013260:	690f      	ldr	r7, [r1, #16]
 8013262:	2f00      	cmp	r7, #0
 8013264:	d0a9      	beq.n	80131ba <__sflush_r+0x1a>
 8013266:	0793      	lsls	r3, r2, #30
 8013268:	680e      	ldr	r6, [r1, #0]
 801326a:	bf08      	it	eq
 801326c:	694b      	ldreq	r3, [r1, #20]
 801326e:	600f      	str	r7, [r1, #0]
 8013270:	bf18      	it	ne
 8013272:	2300      	movne	r3, #0
 8013274:	eba6 0807 	sub.w	r8, r6, r7
 8013278:	608b      	str	r3, [r1, #8]
 801327a:	f1b8 0f00 	cmp.w	r8, #0
 801327e:	dd9c      	ble.n	80131ba <__sflush_r+0x1a>
 8013280:	6a21      	ldr	r1, [r4, #32]
 8013282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013284:	4643      	mov	r3, r8
 8013286:	463a      	mov	r2, r7
 8013288:	4628      	mov	r0, r5
 801328a:	47b0      	blx	r6
 801328c:	2800      	cmp	r0, #0
 801328e:	dc06      	bgt.n	801329e <__sflush_r+0xfe>
 8013290:	89a3      	ldrh	r3, [r4, #12]
 8013292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013296:	81a3      	strh	r3, [r4, #12]
 8013298:	f04f 30ff 	mov.w	r0, #4294967295
 801329c:	e78e      	b.n	80131bc <__sflush_r+0x1c>
 801329e:	4407      	add	r7, r0
 80132a0:	eba8 0800 	sub.w	r8, r8, r0
 80132a4:	e7e9      	b.n	801327a <__sflush_r+0xda>
 80132a6:	bf00      	nop
 80132a8:	20400001 	.word	0x20400001

080132ac <_fflush_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	690b      	ldr	r3, [r1, #16]
 80132b0:	4605      	mov	r5, r0
 80132b2:	460c      	mov	r4, r1
 80132b4:	b913      	cbnz	r3, 80132bc <_fflush_r+0x10>
 80132b6:	2500      	movs	r5, #0
 80132b8:	4628      	mov	r0, r5
 80132ba:	bd38      	pop	{r3, r4, r5, pc}
 80132bc:	b118      	cbz	r0, 80132c6 <_fflush_r+0x1a>
 80132be:	6983      	ldr	r3, [r0, #24]
 80132c0:	b90b      	cbnz	r3, 80132c6 <_fflush_r+0x1a>
 80132c2:	f000 f887 	bl	80133d4 <__sinit>
 80132c6:	4b14      	ldr	r3, [pc, #80]	; (8013318 <_fflush_r+0x6c>)
 80132c8:	429c      	cmp	r4, r3
 80132ca:	d11b      	bne.n	8013304 <_fflush_r+0x58>
 80132cc:	686c      	ldr	r4, [r5, #4]
 80132ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d0ef      	beq.n	80132b6 <_fflush_r+0xa>
 80132d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80132d8:	07d0      	lsls	r0, r2, #31
 80132da:	d404      	bmi.n	80132e6 <_fflush_r+0x3a>
 80132dc:	0599      	lsls	r1, r3, #22
 80132de:	d402      	bmi.n	80132e6 <_fflush_r+0x3a>
 80132e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132e2:	f000 f915 	bl	8013510 <__retarget_lock_acquire_recursive>
 80132e6:	4628      	mov	r0, r5
 80132e8:	4621      	mov	r1, r4
 80132ea:	f7ff ff59 	bl	80131a0 <__sflush_r>
 80132ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132f0:	07da      	lsls	r2, r3, #31
 80132f2:	4605      	mov	r5, r0
 80132f4:	d4e0      	bmi.n	80132b8 <_fflush_r+0xc>
 80132f6:	89a3      	ldrh	r3, [r4, #12]
 80132f8:	059b      	lsls	r3, r3, #22
 80132fa:	d4dd      	bmi.n	80132b8 <_fflush_r+0xc>
 80132fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132fe:	f000 f908 	bl	8013512 <__retarget_lock_release_recursive>
 8013302:	e7d9      	b.n	80132b8 <_fflush_r+0xc>
 8013304:	4b05      	ldr	r3, [pc, #20]	; (801331c <_fflush_r+0x70>)
 8013306:	429c      	cmp	r4, r3
 8013308:	d101      	bne.n	801330e <_fflush_r+0x62>
 801330a:	68ac      	ldr	r4, [r5, #8]
 801330c:	e7df      	b.n	80132ce <_fflush_r+0x22>
 801330e:	4b04      	ldr	r3, [pc, #16]	; (8013320 <_fflush_r+0x74>)
 8013310:	429c      	cmp	r4, r3
 8013312:	bf08      	it	eq
 8013314:	68ec      	ldreq	r4, [r5, #12]
 8013316:	e7da      	b.n	80132ce <_fflush_r+0x22>
 8013318:	08014834 	.word	0x08014834
 801331c:	08014854 	.word	0x08014854
 8013320:	08014814 	.word	0x08014814

08013324 <std>:
 8013324:	2300      	movs	r3, #0
 8013326:	b510      	push	{r4, lr}
 8013328:	4604      	mov	r4, r0
 801332a:	e9c0 3300 	strd	r3, r3, [r0]
 801332e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013332:	6083      	str	r3, [r0, #8]
 8013334:	8181      	strh	r1, [r0, #12]
 8013336:	6643      	str	r3, [r0, #100]	; 0x64
 8013338:	81c2      	strh	r2, [r0, #14]
 801333a:	6183      	str	r3, [r0, #24]
 801333c:	4619      	mov	r1, r3
 801333e:	2208      	movs	r2, #8
 8013340:	305c      	adds	r0, #92	; 0x5c
 8013342:	f7fd fdff 	bl	8010f44 <memset>
 8013346:	4b05      	ldr	r3, [pc, #20]	; (801335c <std+0x38>)
 8013348:	6263      	str	r3, [r4, #36]	; 0x24
 801334a:	4b05      	ldr	r3, [pc, #20]	; (8013360 <std+0x3c>)
 801334c:	62a3      	str	r3, [r4, #40]	; 0x28
 801334e:	4b05      	ldr	r3, [pc, #20]	; (8013364 <std+0x40>)
 8013350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013352:	4b05      	ldr	r3, [pc, #20]	; (8013368 <std+0x44>)
 8013354:	6224      	str	r4, [r4, #32]
 8013356:	6323      	str	r3, [r4, #48]	; 0x30
 8013358:	bd10      	pop	{r4, pc}
 801335a:	bf00      	nop
 801335c:	08013665 	.word	0x08013665
 8013360:	08013687 	.word	0x08013687
 8013364:	080136bf 	.word	0x080136bf
 8013368:	080136e3 	.word	0x080136e3

0801336c <_cleanup_r>:
 801336c:	4901      	ldr	r1, [pc, #4]	; (8013374 <_cleanup_r+0x8>)
 801336e:	f000 b8af 	b.w	80134d0 <_fwalk_reent>
 8013372:	bf00      	nop
 8013374:	080132ad 	.word	0x080132ad

08013378 <__sfmoreglue>:
 8013378:	b570      	push	{r4, r5, r6, lr}
 801337a:	1e4a      	subs	r2, r1, #1
 801337c:	2568      	movs	r5, #104	; 0x68
 801337e:	4355      	muls	r5, r2
 8013380:	460e      	mov	r6, r1
 8013382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013386:	f7ff fc23 	bl	8012bd0 <_malloc_r>
 801338a:	4604      	mov	r4, r0
 801338c:	b140      	cbz	r0, 80133a0 <__sfmoreglue+0x28>
 801338e:	2100      	movs	r1, #0
 8013390:	e9c0 1600 	strd	r1, r6, [r0]
 8013394:	300c      	adds	r0, #12
 8013396:	60a0      	str	r0, [r4, #8]
 8013398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801339c:	f7fd fdd2 	bl	8010f44 <memset>
 80133a0:	4620      	mov	r0, r4
 80133a2:	bd70      	pop	{r4, r5, r6, pc}

080133a4 <__sfp_lock_acquire>:
 80133a4:	4801      	ldr	r0, [pc, #4]	; (80133ac <__sfp_lock_acquire+0x8>)
 80133a6:	f000 b8b3 	b.w	8013510 <__retarget_lock_acquire_recursive>
 80133aa:	bf00      	nop
 80133ac:	24000a54 	.word	0x24000a54

080133b0 <__sfp_lock_release>:
 80133b0:	4801      	ldr	r0, [pc, #4]	; (80133b8 <__sfp_lock_release+0x8>)
 80133b2:	f000 b8ae 	b.w	8013512 <__retarget_lock_release_recursive>
 80133b6:	bf00      	nop
 80133b8:	24000a54 	.word	0x24000a54

080133bc <__sinit_lock_acquire>:
 80133bc:	4801      	ldr	r0, [pc, #4]	; (80133c4 <__sinit_lock_acquire+0x8>)
 80133be:	f000 b8a7 	b.w	8013510 <__retarget_lock_acquire_recursive>
 80133c2:	bf00      	nop
 80133c4:	24000a4f 	.word	0x24000a4f

080133c8 <__sinit_lock_release>:
 80133c8:	4801      	ldr	r0, [pc, #4]	; (80133d0 <__sinit_lock_release+0x8>)
 80133ca:	f000 b8a2 	b.w	8013512 <__retarget_lock_release_recursive>
 80133ce:	bf00      	nop
 80133d0:	24000a4f 	.word	0x24000a4f

080133d4 <__sinit>:
 80133d4:	b510      	push	{r4, lr}
 80133d6:	4604      	mov	r4, r0
 80133d8:	f7ff fff0 	bl	80133bc <__sinit_lock_acquire>
 80133dc:	69a3      	ldr	r3, [r4, #24]
 80133de:	b11b      	cbz	r3, 80133e8 <__sinit+0x14>
 80133e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133e4:	f7ff bff0 	b.w	80133c8 <__sinit_lock_release>
 80133e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80133ec:	6523      	str	r3, [r4, #80]	; 0x50
 80133ee:	4b13      	ldr	r3, [pc, #76]	; (801343c <__sinit+0x68>)
 80133f0:	4a13      	ldr	r2, [pc, #76]	; (8013440 <__sinit+0x6c>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80133f6:	42a3      	cmp	r3, r4
 80133f8:	bf04      	itt	eq
 80133fa:	2301      	moveq	r3, #1
 80133fc:	61a3      	streq	r3, [r4, #24]
 80133fe:	4620      	mov	r0, r4
 8013400:	f000 f820 	bl	8013444 <__sfp>
 8013404:	6060      	str	r0, [r4, #4]
 8013406:	4620      	mov	r0, r4
 8013408:	f000 f81c 	bl	8013444 <__sfp>
 801340c:	60a0      	str	r0, [r4, #8]
 801340e:	4620      	mov	r0, r4
 8013410:	f000 f818 	bl	8013444 <__sfp>
 8013414:	2200      	movs	r2, #0
 8013416:	60e0      	str	r0, [r4, #12]
 8013418:	2104      	movs	r1, #4
 801341a:	6860      	ldr	r0, [r4, #4]
 801341c:	f7ff ff82 	bl	8013324 <std>
 8013420:	68a0      	ldr	r0, [r4, #8]
 8013422:	2201      	movs	r2, #1
 8013424:	2109      	movs	r1, #9
 8013426:	f7ff ff7d 	bl	8013324 <std>
 801342a:	68e0      	ldr	r0, [r4, #12]
 801342c:	2202      	movs	r2, #2
 801342e:	2112      	movs	r1, #18
 8013430:	f7ff ff78 	bl	8013324 <std>
 8013434:	2301      	movs	r3, #1
 8013436:	61a3      	str	r3, [r4, #24]
 8013438:	e7d2      	b.n	80133e0 <__sinit+0xc>
 801343a:	bf00      	nop
 801343c:	08014490 	.word	0x08014490
 8013440:	0801336d 	.word	0x0801336d

08013444 <__sfp>:
 8013444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013446:	4607      	mov	r7, r0
 8013448:	f7ff ffac 	bl	80133a4 <__sfp_lock_acquire>
 801344c:	4b1e      	ldr	r3, [pc, #120]	; (80134c8 <__sfp+0x84>)
 801344e:	681e      	ldr	r6, [r3, #0]
 8013450:	69b3      	ldr	r3, [r6, #24]
 8013452:	b913      	cbnz	r3, 801345a <__sfp+0x16>
 8013454:	4630      	mov	r0, r6
 8013456:	f7ff ffbd 	bl	80133d4 <__sinit>
 801345a:	3648      	adds	r6, #72	; 0x48
 801345c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013460:	3b01      	subs	r3, #1
 8013462:	d503      	bpl.n	801346c <__sfp+0x28>
 8013464:	6833      	ldr	r3, [r6, #0]
 8013466:	b30b      	cbz	r3, 80134ac <__sfp+0x68>
 8013468:	6836      	ldr	r6, [r6, #0]
 801346a:	e7f7      	b.n	801345c <__sfp+0x18>
 801346c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013470:	b9d5      	cbnz	r5, 80134a8 <__sfp+0x64>
 8013472:	4b16      	ldr	r3, [pc, #88]	; (80134cc <__sfp+0x88>)
 8013474:	60e3      	str	r3, [r4, #12]
 8013476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801347a:	6665      	str	r5, [r4, #100]	; 0x64
 801347c:	f000 f847 	bl	801350e <__retarget_lock_init_recursive>
 8013480:	f7ff ff96 	bl	80133b0 <__sfp_lock_release>
 8013484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801348c:	6025      	str	r5, [r4, #0]
 801348e:	61a5      	str	r5, [r4, #24]
 8013490:	2208      	movs	r2, #8
 8013492:	4629      	mov	r1, r5
 8013494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013498:	f7fd fd54 	bl	8010f44 <memset>
 801349c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80134a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80134a4:	4620      	mov	r0, r4
 80134a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134a8:	3468      	adds	r4, #104	; 0x68
 80134aa:	e7d9      	b.n	8013460 <__sfp+0x1c>
 80134ac:	2104      	movs	r1, #4
 80134ae:	4638      	mov	r0, r7
 80134b0:	f7ff ff62 	bl	8013378 <__sfmoreglue>
 80134b4:	4604      	mov	r4, r0
 80134b6:	6030      	str	r0, [r6, #0]
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d1d5      	bne.n	8013468 <__sfp+0x24>
 80134bc:	f7ff ff78 	bl	80133b0 <__sfp_lock_release>
 80134c0:	230c      	movs	r3, #12
 80134c2:	603b      	str	r3, [r7, #0]
 80134c4:	e7ee      	b.n	80134a4 <__sfp+0x60>
 80134c6:	bf00      	nop
 80134c8:	08014490 	.word	0x08014490
 80134cc:	ffff0001 	.word	0xffff0001

080134d0 <_fwalk_reent>:
 80134d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d4:	4606      	mov	r6, r0
 80134d6:	4688      	mov	r8, r1
 80134d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80134dc:	2700      	movs	r7, #0
 80134de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134e2:	f1b9 0901 	subs.w	r9, r9, #1
 80134e6:	d505      	bpl.n	80134f4 <_fwalk_reent+0x24>
 80134e8:	6824      	ldr	r4, [r4, #0]
 80134ea:	2c00      	cmp	r4, #0
 80134ec:	d1f7      	bne.n	80134de <_fwalk_reent+0xe>
 80134ee:	4638      	mov	r0, r7
 80134f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134f4:	89ab      	ldrh	r3, [r5, #12]
 80134f6:	2b01      	cmp	r3, #1
 80134f8:	d907      	bls.n	801350a <_fwalk_reent+0x3a>
 80134fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134fe:	3301      	adds	r3, #1
 8013500:	d003      	beq.n	801350a <_fwalk_reent+0x3a>
 8013502:	4629      	mov	r1, r5
 8013504:	4630      	mov	r0, r6
 8013506:	47c0      	blx	r8
 8013508:	4307      	orrs	r7, r0
 801350a:	3568      	adds	r5, #104	; 0x68
 801350c:	e7e9      	b.n	80134e2 <_fwalk_reent+0x12>

0801350e <__retarget_lock_init_recursive>:
 801350e:	4770      	bx	lr

08013510 <__retarget_lock_acquire_recursive>:
 8013510:	4770      	bx	lr

08013512 <__retarget_lock_release_recursive>:
 8013512:	4770      	bx	lr

08013514 <__swhatbuf_r>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	460e      	mov	r6, r1
 8013518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351c:	2900      	cmp	r1, #0
 801351e:	b096      	sub	sp, #88	; 0x58
 8013520:	4614      	mov	r4, r2
 8013522:	461d      	mov	r5, r3
 8013524:	da07      	bge.n	8013536 <__swhatbuf_r+0x22>
 8013526:	2300      	movs	r3, #0
 8013528:	602b      	str	r3, [r5, #0]
 801352a:	89b3      	ldrh	r3, [r6, #12]
 801352c:	061a      	lsls	r2, r3, #24
 801352e:	d410      	bmi.n	8013552 <__swhatbuf_r+0x3e>
 8013530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013534:	e00e      	b.n	8013554 <__swhatbuf_r+0x40>
 8013536:	466a      	mov	r2, sp
 8013538:	f000 f8fa 	bl	8013730 <_fstat_r>
 801353c:	2800      	cmp	r0, #0
 801353e:	dbf2      	blt.n	8013526 <__swhatbuf_r+0x12>
 8013540:	9a01      	ldr	r2, [sp, #4]
 8013542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801354a:	425a      	negs	r2, r3
 801354c:	415a      	adcs	r2, r3
 801354e:	602a      	str	r2, [r5, #0]
 8013550:	e7ee      	b.n	8013530 <__swhatbuf_r+0x1c>
 8013552:	2340      	movs	r3, #64	; 0x40
 8013554:	2000      	movs	r0, #0
 8013556:	6023      	str	r3, [r4, #0]
 8013558:	b016      	add	sp, #88	; 0x58
 801355a:	bd70      	pop	{r4, r5, r6, pc}

0801355c <__smakebuf_r>:
 801355c:	898b      	ldrh	r3, [r1, #12]
 801355e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013560:	079d      	lsls	r5, r3, #30
 8013562:	4606      	mov	r6, r0
 8013564:	460c      	mov	r4, r1
 8013566:	d507      	bpl.n	8013578 <__smakebuf_r+0x1c>
 8013568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801356c:	6023      	str	r3, [r4, #0]
 801356e:	6123      	str	r3, [r4, #16]
 8013570:	2301      	movs	r3, #1
 8013572:	6163      	str	r3, [r4, #20]
 8013574:	b002      	add	sp, #8
 8013576:	bd70      	pop	{r4, r5, r6, pc}
 8013578:	ab01      	add	r3, sp, #4
 801357a:	466a      	mov	r2, sp
 801357c:	f7ff ffca 	bl	8013514 <__swhatbuf_r>
 8013580:	9900      	ldr	r1, [sp, #0]
 8013582:	4605      	mov	r5, r0
 8013584:	4630      	mov	r0, r6
 8013586:	f7ff fb23 	bl	8012bd0 <_malloc_r>
 801358a:	b948      	cbnz	r0, 80135a0 <__smakebuf_r+0x44>
 801358c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013590:	059a      	lsls	r2, r3, #22
 8013592:	d4ef      	bmi.n	8013574 <__smakebuf_r+0x18>
 8013594:	f023 0303 	bic.w	r3, r3, #3
 8013598:	f043 0302 	orr.w	r3, r3, #2
 801359c:	81a3      	strh	r3, [r4, #12]
 801359e:	e7e3      	b.n	8013568 <__smakebuf_r+0xc>
 80135a0:	4b0d      	ldr	r3, [pc, #52]	; (80135d8 <__smakebuf_r+0x7c>)
 80135a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80135a4:	89a3      	ldrh	r3, [r4, #12]
 80135a6:	6020      	str	r0, [r4, #0]
 80135a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ac:	81a3      	strh	r3, [r4, #12]
 80135ae:	9b00      	ldr	r3, [sp, #0]
 80135b0:	6163      	str	r3, [r4, #20]
 80135b2:	9b01      	ldr	r3, [sp, #4]
 80135b4:	6120      	str	r0, [r4, #16]
 80135b6:	b15b      	cbz	r3, 80135d0 <__smakebuf_r+0x74>
 80135b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135bc:	4630      	mov	r0, r6
 80135be:	f000 f8c9 	bl	8013754 <_isatty_r>
 80135c2:	b128      	cbz	r0, 80135d0 <__smakebuf_r+0x74>
 80135c4:	89a3      	ldrh	r3, [r4, #12]
 80135c6:	f023 0303 	bic.w	r3, r3, #3
 80135ca:	f043 0301 	orr.w	r3, r3, #1
 80135ce:	81a3      	strh	r3, [r4, #12]
 80135d0:	89a0      	ldrh	r0, [r4, #12]
 80135d2:	4305      	orrs	r5, r0
 80135d4:	81a5      	strh	r5, [r4, #12]
 80135d6:	e7cd      	b.n	8013574 <__smakebuf_r+0x18>
 80135d8:	0801336d 	.word	0x0801336d

080135dc <_raise_r>:
 80135dc:	291f      	cmp	r1, #31
 80135de:	b538      	push	{r3, r4, r5, lr}
 80135e0:	4604      	mov	r4, r0
 80135e2:	460d      	mov	r5, r1
 80135e4:	d904      	bls.n	80135f0 <_raise_r+0x14>
 80135e6:	2316      	movs	r3, #22
 80135e8:	6003      	str	r3, [r0, #0]
 80135ea:	f04f 30ff 	mov.w	r0, #4294967295
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135f2:	b112      	cbz	r2, 80135fa <_raise_r+0x1e>
 80135f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135f8:	b94b      	cbnz	r3, 801360e <_raise_r+0x32>
 80135fa:	4620      	mov	r0, r4
 80135fc:	f000 f830 	bl	8013660 <_getpid_r>
 8013600:	462a      	mov	r2, r5
 8013602:	4601      	mov	r1, r0
 8013604:	4620      	mov	r0, r4
 8013606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801360a:	f000 b817 	b.w	801363c <_kill_r>
 801360e:	2b01      	cmp	r3, #1
 8013610:	d00a      	beq.n	8013628 <_raise_r+0x4c>
 8013612:	1c59      	adds	r1, r3, #1
 8013614:	d103      	bne.n	801361e <_raise_r+0x42>
 8013616:	2316      	movs	r3, #22
 8013618:	6003      	str	r3, [r0, #0]
 801361a:	2001      	movs	r0, #1
 801361c:	e7e7      	b.n	80135ee <_raise_r+0x12>
 801361e:	2400      	movs	r4, #0
 8013620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013624:	4628      	mov	r0, r5
 8013626:	4798      	blx	r3
 8013628:	2000      	movs	r0, #0
 801362a:	e7e0      	b.n	80135ee <_raise_r+0x12>

0801362c <raise>:
 801362c:	4b02      	ldr	r3, [pc, #8]	; (8013638 <raise+0xc>)
 801362e:	4601      	mov	r1, r0
 8013630:	6818      	ldr	r0, [r3, #0]
 8013632:	f7ff bfd3 	b.w	80135dc <_raise_r>
 8013636:	bf00      	nop
 8013638:	24000010 	.word	0x24000010

0801363c <_kill_r>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	4d07      	ldr	r5, [pc, #28]	; (801365c <_kill_r+0x20>)
 8013640:	2300      	movs	r3, #0
 8013642:	4604      	mov	r4, r0
 8013644:	4608      	mov	r0, r1
 8013646:	4611      	mov	r1, r2
 8013648:	602b      	str	r3, [r5, #0]
 801364a:	f7f3 fe7b 	bl	8007344 <_kill>
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	d102      	bne.n	8013658 <_kill_r+0x1c>
 8013652:	682b      	ldr	r3, [r5, #0]
 8013654:	b103      	cbz	r3, 8013658 <_kill_r+0x1c>
 8013656:	6023      	str	r3, [r4, #0]
 8013658:	bd38      	pop	{r3, r4, r5, pc}
 801365a:	bf00      	nop
 801365c:	24000a48 	.word	0x24000a48

08013660 <_getpid_r>:
 8013660:	f7f3 be68 	b.w	8007334 <_getpid>

08013664 <__sread>:
 8013664:	b510      	push	{r4, lr}
 8013666:	460c      	mov	r4, r1
 8013668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801366c:	f000 f894 	bl	8013798 <_read_r>
 8013670:	2800      	cmp	r0, #0
 8013672:	bfab      	itete	ge
 8013674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013676:	89a3      	ldrhlt	r3, [r4, #12]
 8013678:	181b      	addge	r3, r3, r0
 801367a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801367e:	bfac      	ite	ge
 8013680:	6563      	strge	r3, [r4, #84]	; 0x54
 8013682:	81a3      	strhlt	r3, [r4, #12]
 8013684:	bd10      	pop	{r4, pc}

08013686 <__swrite>:
 8013686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801368a:	461f      	mov	r7, r3
 801368c:	898b      	ldrh	r3, [r1, #12]
 801368e:	05db      	lsls	r3, r3, #23
 8013690:	4605      	mov	r5, r0
 8013692:	460c      	mov	r4, r1
 8013694:	4616      	mov	r6, r2
 8013696:	d505      	bpl.n	80136a4 <__swrite+0x1e>
 8013698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801369c:	2302      	movs	r3, #2
 801369e:	2200      	movs	r2, #0
 80136a0:	f000 f868 	bl	8013774 <_lseek_r>
 80136a4:	89a3      	ldrh	r3, [r4, #12]
 80136a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136ae:	81a3      	strh	r3, [r4, #12]
 80136b0:	4632      	mov	r2, r6
 80136b2:	463b      	mov	r3, r7
 80136b4:	4628      	mov	r0, r5
 80136b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136ba:	f000 b817 	b.w	80136ec <_write_r>

080136be <__sseek>:
 80136be:	b510      	push	{r4, lr}
 80136c0:	460c      	mov	r4, r1
 80136c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136c6:	f000 f855 	bl	8013774 <_lseek_r>
 80136ca:	1c43      	adds	r3, r0, #1
 80136cc:	89a3      	ldrh	r3, [r4, #12]
 80136ce:	bf15      	itete	ne
 80136d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80136d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80136d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80136da:	81a3      	strheq	r3, [r4, #12]
 80136dc:	bf18      	it	ne
 80136de:	81a3      	strhne	r3, [r4, #12]
 80136e0:	bd10      	pop	{r4, pc}

080136e2 <__sclose>:
 80136e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e6:	f000 b813 	b.w	8013710 <_close_r>
	...

080136ec <_write_r>:
 80136ec:	b538      	push	{r3, r4, r5, lr}
 80136ee:	4d07      	ldr	r5, [pc, #28]	; (801370c <_write_r+0x20>)
 80136f0:	4604      	mov	r4, r0
 80136f2:	4608      	mov	r0, r1
 80136f4:	4611      	mov	r1, r2
 80136f6:	2200      	movs	r2, #0
 80136f8:	602a      	str	r2, [r5, #0]
 80136fa:	461a      	mov	r2, r3
 80136fc:	f7f3 fe59 	bl	80073b2 <_write>
 8013700:	1c43      	adds	r3, r0, #1
 8013702:	d102      	bne.n	801370a <_write_r+0x1e>
 8013704:	682b      	ldr	r3, [r5, #0]
 8013706:	b103      	cbz	r3, 801370a <_write_r+0x1e>
 8013708:	6023      	str	r3, [r4, #0]
 801370a:	bd38      	pop	{r3, r4, r5, pc}
 801370c:	24000a48 	.word	0x24000a48

08013710 <_close_r>:
 8013710:	b538      	push	{r3, r4, r5, lr}
 8013712:	4d06      	ldr	r5, [pc, #24]	; (801372c <_close_r+0x1c>)
 8013714:	2300      	movs	r3, #0
 8013716:	4604      	mov	r4, r0
 8013718:	4608      	mov	r0, r1
 801371a:	602b      	str	r3, [r5, #0]
 801371c:	f7f3 fe65 	bl	80073ea <_close>
 8013720:	1c43      	adds	r3, r0, #1
 8013722:	d102      	bne.n	801372a <_close_r+0x1a>
 8013724:	682b      	ldr	r3, [r5, #0]
 8013726:	b103      	cbz	r3, 801372a <_close_r+0x1a>
 8013728:	6023      	str	r3, [r4, #0]
 801372a:	bd38      	pop	{r3, r4, r5, pc}
 801372c:	24000a48 	.word	0x24000a48

08013730 <_fstat_r>:
 8013730:	b538      	push	{r3, r4, r5, lr}
 8013732:	4d07      	ldr	r5, [pc, #28]	; (8013750 <_fstat_r+0x20>)
 8013734:	2300      	movs	r3, #0
 8013736:	4604      	mov	r4, r0
 8013738:	4608      	mov	r0, r1
 801373a:	4611      	mov	r1, r2
 801373c:	602b      	str	r3, [r5, #0]
 801373e:	f7f3 fe60 	bl	8007402 <_fstat>
 8013742:	1c43      	adds	r3, r0, #1
 8013744:	d102      	bne.n	801374c <_fstat_r+0x1c>
 8013746:	682b      	ldr	r3, [r5, #0]
 8013748:	b103      	cbz	r3, 801374c <_fstat_r+0x1c>
 801374a:	6023      	str	r3, [r4, #0]
 801374c:	bd38      	pop	{r3, r4, r5, pc}
 801374e:	bf00      	nop
 8013750:	24000a48 	.word	0x24000a48

08013754 <_isatty_r>:
 8013754:	b538      	push	{r3, r4, r5, lr}
 8013756:	4d06      	ldr	r5, [pc, #24]	; (8013770 <_isatty_r+0x1c>)
 8013758:	2300      	movs	r3, #0
 801375a:	4604      	mov	r4, r0
 801375c:	4608      	mov	r0, r1
 801375e:	602b      	str	r3, [r5, #0]
 8013760:	f7f3 fe5f 	bl	8007422 <_isatty>
 8013764:	1c43      	adds	r3, r0, #1
 8013766:	d102      	bne.n	801376e <_isatty_r+0x1a>
 8013768:	682b      	ldr	r3, [r5, #0]
 801376a:	b103      	cbz	r3, 801376e <_isatty_r+0x1a>
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	bd38      	pop	{r3, r4, r5, pc}
 8013770:	24000a48 	.word	0x24000a48

08013774 <_lseek_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d07      	ldr	r5, [pc, #28]	; (8013794 <_lseek_r+0x20>)
 8013778:	4604      	mov	r4, r0
 801377a:	4608      	mov	r0, r1
 801377c:	4611      	mov	r1, r2
 801377e:	2200      	movs	r2, #0
 8013780:	602a      	str	r2, [r5, #0]
 8013782:	461a      	mov	r2, r3
 8013784:	f7f3 fe58 	bl	8007438 <_lseek>
 8013788:	1c43      	adds	r3, r0, #1
 801378a:	d102      	bne.n	8013792 <_lseek_r+0x1e>
 801378c:	682b      	ldr	r3, [r5, #0]
 801378e:	b103      	cbz	r3, 8013792 <_lseek_r+0x1e>
 8013790:	6023      	str	r3, [r4, #0]
 8013792:	bd38      	pop	{r3, r4, r5, pc}
 8013794:	24000a48 	.word	0x24000a48

08013798 <_read_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4d07      	ldr	r5, [pc, #28]	; (80137b8 <_read_r+0x20>)
 801379c:	4604      	mov	r4, r0
 801379e:	4608      	mov	r0, r1
 80137a0:	4611      	mov	r1, r2
 80137a2:	2200      	movs	r2, #0
 80137a4:	602a      	str	r2, [r5, #0]
 80137a6:	461a      	mov	r2, r3
 80137a8:	f7f3 fde6 	bl	8007378 <_read>
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	d102      	bne.n	80137b6 <_read_r+0x1e>
 80137b0:	682b      	ldr	r3, [r5, #0]
 80137b2:	b103      	cbz	r3, 80137b6 <_read_r+0x1e>
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	24000a48 	.word	0x24000a48
 80137bc:	00000000 	.word	0x00000000

080137c0 <cos>:
 80137c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137c2:	eeb0 7b40 	vmov.f64	d7, d0
 80137c6:	ee17 3a90 	vmov	r3, s15
 80137ca:	4a1f      	ldr	r2, [pc, #124]	; (8013848 <cos+0x88>)
 80137cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137d0:	4293      	cmp	r3, r2
 80137d2:	dc04      	bgt.n	80137de <cos+0x1e>
 80137d4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8013840 <cos+0x80>
 80137d8:	f000 f9ce 	bl	8013b78 <__kernel_cos>
 80137dc:	e004      	b.n	80137e8 <cos+0x28>
 80137de:	4a1b      	ldr	r2, [pc, #108]	; (801384c <cos+0x8c>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	dd04      	ble.n	80137ee <cos+0x2e>
 80137e4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80137e8:	b005      	add	sp, #20
 80137ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80137ee:	4668      	mov	r0, sp
 80137f0:	f000 f882 	bl	80138f8 <__ieee754_rem_pio2>
 80137f4:	f000 0003 	and.w	r0, r0, #3
 80137f8:	2801      	cmp	r0, #1
 80137fa:	d007      	beq.n	801380c <cos+0x4c>
 80137fc:	2802      	cmp	r0, #2
 80137fe:	d00e      	beq.n	801381e <cos+0x5e>
 8013800:	b9a0      	cbnz	r0, 801382c <cos+0x6c>
 8013802:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013806:	ed9d 0b00 	vldr	d0, [sp]
 801380a:	e7e5      	b.n	80137d8 <cos+0x18>
 801380c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013810:	ed9d 0b00 	vldr	d0, [sp]
 8013814:	f000 fc9c 	bl	8014150 <__kernel_sin>
 8013818:	eeb1 0b40 	vneg.f64	d0, d0
 801381c:	e7e4      	b.n	80137e8 <cos+0x28>
 801381e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013822:	ed9d 0b00 	vldr	d0, [sp]
 8013826:	f000 f9a7 	bl	8013b78 <__kernel_cos>
 801382a:	e7f5      	b.n	8013818 <cos+0x58>
 801382c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013830:	ed9d 0b00 	vldr	d0, [sp]
 8013834:	2001      	movs	r0, #1
 8013836:	f000 fc8b 	bl	8014150 <__kernel_sin>
 801383a:	e7d5      	b.n	80137e8 <cos+0x28>
 801383c:	f3af 8000 	nop.w
	...
 8013848:	3fe921fb 	.word	0x3fe921fb
 801384c:	7fefffff 	.word	0x7fefffff

08013850 <fabs>:
 8013850:	ec51 0b10 	vmov	r0, r1, d0
 8013854:	ee10 2a10 	vmov	r2, s0
 8013858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801385c:	ec43 2b10 	vmov	d0, r2, r3
 8013860:	4770      	bx	lr
 8013862:	0000      	movs	r0, r0
 8013864:	0000      	movs	r0, r0
	...

08013868 <sin>:
 8013868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801386a:	eeb0 7b40 	vmov.f64	d7, d0
 801386e:	ee17 3a90 	vmov	r3, s15
 8013872:	4a1f      	ldr	r2, [pc, #124]	; (80138f0 <sin+0x88>)
 8013874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013878:	4293      	cmp	r3, r2
 801387a:	dc05      	bgt.n	8013888 <sin+0x20>
 801387c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80138e8 <sin+0x80>
 8013880:	2000      	movs	r0, #0
 8013882:	f000 fc65 	bl	8014150 <__kernel_sin>
 8013886:	e004      	b.n	8013892 <sin+0x2a>
 8013888:	4a1a      	ldr	r2, [pc, #104]	; (80138f4 <sin+0x8c>)
 801388a:	4293      	cmp	r3, r2
 801388c:	dd04      	ble.n	8013898 <sin+0x30>
 801388e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013892:	b005      	add	sp, #20
 8013894:	f85d fb04 	ldr.w	pc, [sp], #4
 8013898:	4668      	mov	r0, sp
 801389a:	f000 f82d 	bl	80138f8 <__ieee754_rem_pio2>
 801389e:	f000 0003 	and.w	r0, r0, #3
 80138a2:	2801      	cmp	r0, #1
 80138a4:	d008      	beq.n	80138b8 <sin+0x50>
 80138a6:	2802      	cmp	r0, #2
 80138a8:	d00d      	beq.n	80138c6 <sin+0x5e>
 80138aa:	b9b0      	cbnz	r0, 80138da <sin+0x72>
 80138ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80138b0:	ed9d 0b00 	vldr	d0, [sp]
 80138b4:	2001      	movs	r0, #1
 80138b6:	e7e4      	b.n	8013882 <sin+0x1a>
 80138b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80138bc:	ed9d 0b00 	vldr	d0, [sp]
 80138c0:	f000 f95a 	bl	8013b78 <__kernel_cos>
 80138c4:	e7e5      	b.n	8013892 <sin+0x2a>
 80138c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80138ca:	ed9d 0b00 	vldr	d0, [sp]
 80138ce:	2001      	movs	r0, #1
 80138d0:	f000 fc3e 	bl	8014150 <__kernel_sin>
 80138d4:	eeb1 0b40 	vneg.f64	d0, d0
 80138d8:	e7db      	b.n	8013892 <sin+0x2a>
 80138da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80138de:	ed9d 0b00 	vldr	d0, [sp]
 80138e2:	f000 f949 	bl	8013b78 <__kernel_cos>
 80138e6:	e7f5      	b.n	80138d4 <sin+0x6c>
	...
 80138f0:	3fe921fb 	.word	0x3fe921fb
 80138f4:	7fefffff 	.word	0x7fefffff

080138f8 <__ieee754_rem_pio2>:
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	eeb0 7b40 	vmov.f64	d7, d0
 80138fe:	ee17 5a90 	vmov	r5, s15
 8013902:	4b97      	ldr	r3, [pc, #604]	; (8013b60 <__ieee754_rem_pio2+0x268>)
 8013904:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013908:	429e      	cmp	r6, r3
 801390a:	b088      	sub	sp, #32
 801390c:	4604      	mov	r4, r0
 801390e:	dc07      	bgt.n	8013920 <__ieee754_rem_pio2+0x28>
 8013910:	2200      	movs	r2, #0
 8013912:	2300      	movs	r3, #0
 8013914:	ed84 0b00 	vstr	d0, [r4]
 8013918:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801391c:	2000      	movs	r0, #0
 801391e:	e01b      	b.n	8013958 <__ieee754_rem_pio2+0x60>
 8013920:	4b90      	ldr	r3, [pc, #576]	; (8013b64 <__ieee754_rem_pio2+0x26c>)
 8013922:	429e      	cmp	r6, r3
 8013924:	dc3b      	bgt.n	801399e <__ieee754_rem_pio2+0xa6>
 8013926:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801392a:	2d00      	cmp	r5, #0
 801392c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013b20 <__ieee754_rem_pio2+0x228>
 8013930:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013934:	dd19      	ble.n	801396a <__ieee754_rem_pio2+0x72>
 8013936:	ee30 7b46 	vsub.f64	d7, d0, d6
 801393a:	429e      	cmp	r6, r3
 801393c:	d00e      	beq.n	801395c <__ieee754_rem_pio2+0x64>
 801393e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8013b28 <__ieee754_rem_pio2+0x230>
 8013942:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013946:	ee37 7b45 	vsub.f64	d7, d7, d5
 801394a:	ed84 5b00 	vstr	d5, [r4]
 801394e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013952:	ed84 7b02 	vstr	d7, [r4, #8]
 8013956:	2001      	movs	r0, #1
 8013958:	b008      	add	sp, #32
 801395a:	bd70      	pop	{r4, r5, r6, pc}
 801395c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013b30 <__ieee754_rem_pio2+0x238>
 8013960:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013964:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013b38 <__ieee754_rem_pio2+0x240>
 8013968:	e7eb      	b.n	8013942 <__ieee754_rem_pio2+0x4a>
 801396a:	429e      	cmp	r6, r3
 801396c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013970:	d00e      	beq.n	8013990 <__ieee754_rem_pio2+0x98>
 8013972:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8013b28 <__ieee754_rem_pio2+0x230>
 8013976:	ee37 5b06 	vadd.f64	d5, d7, d6
 801397a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801397e:	ed84 5b00 	vstr	d5, [r4]
 8013982:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013986:	f04f 30ff 	mov.w	r0, #4294967295
 801398a:	ed84 7b02 	vstr	d7, [r4, #8]
 801398e:	e7e3      	b.n	8013958 <__ieee754_rem_pio2+0x60>
 8013990:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013b30 <__ieee754_rem_pio2+0x238>
 8013994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013998:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013b38 <__ieee754_rem_pio2+0x240>
 801399c:	e7eb      	b.n	8013976 <__ieee754_rem_pio2+0x7e>
 801399e:	4b72      	ldr	r3, [pc, #456]	; (8013b68 <__ieee754_rem_pio2+0x270>)
 80139a0:	429e      	cmp	r6, r3
 80139a2:	dc6e      	bgt.n	8013a82 <__ieee754_rem_pio2+0x18a>
 80139a4:	f7ff ff54 	bl	8013850 <fabs>
 80139a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80139ac:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8013b40 <__ieee754_rem_pio2+0x248>
 80139b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80139b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80139b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80139bc:	ee17 0a90 	vmov	r0, s15
 80139c0:	eeb1 4b45 	vneg.f64	d4, d5
 80139c4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013b20 <__ieee754_rem_pio2+0x228>
 80139c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80139cc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013b28 <__ieee754_rem_pio2+0x230>
 80139d0:	281f      	cmp	r0, #31
 80139d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80139d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80139da:	dc08      	bgt.n	80139ee <__ieee754_rem_pio2+0xf6>
 80139dc:	4b63      	ldr	r3, [pc, #396]	; (8013b6c <__ieee754_rem_pio2+0x274>)
 80139de:	1e42      	subs	r2, r0, #1
 80139e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e4:	42b3      	cmp	r3, r6
 80139e6:	d002      	beq.n	80139ee <__ieee754_rem_pio2+0xf6>
 80139e8:	ed84 6b00 	vstr	d6, [r4]
 80139ec:	e024      	b.n	8013a38 <__ieee754_rem_pio2+0x140>
 80139ee:	ee16 3a90 	vmov	r3, s13
 80139f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80139f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80139fa:	2b10      	cmp	r3, #16
 80139fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013a00:	ddf2      	ble.n	80139e8 <__ieee754_rem_pio2+0xf0>
 8013a02:	eeb0 6b40 	vmov.f64	d6, d0
 8013a06:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8013b30 <__ieee754_rem_pio2+0x238>
 8013a0a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013a0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013a12:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013a16:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8013b38 <__ieee754_rem_pio2+0x240>
 8013a1a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013a1e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013a22:	ee13 3a90 	vmov	r3, s7
 8013a26:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013a2a:	1ad3      	subs	r3, r2, r3
 8013a2c:	2b31      	cmp	r3, #49	; 0x31
 8013a2e:	dc17      	bgt.n	8013a60 <__ieee754_rem_pio2+0x168>
 8013a30:	eeb0 0b46 	vmov.f64	d0, d6
 8013a34:	ed84 3b00 	vstr	d3, [r4]
 8013a38:	ed94 6b00 	vldr	d6, [r4]
 8013a3c:	2d00      	cmp	r5, #0
 8013a3e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013a42:	ee30 7b47 	vsub.f64	d7, d0, d7
 8013a46:	ed84 7b02 	vstr	d7, [r4, #8]
 8013a4a:	da85      	bge.n	8013958 <__ieee754_rem_pio2+0x60>
 8013a4c:	eeb1 6b46 	vneg.f64	d6, d6
 8013a50:	ed84 6b00 	vstr	d6, [r4]
 8013a54:	eeb1 7b47 	vneg.f64	d7, d7
 8013a58:	4240      	negs	r0, r0
 8013a5a:	ed84 7b02 	vstr	d7, [r4, #8]
 8013a5e:	e77b      	b.n	8013958 <__ieee754_rem_pio2+0x60>
 8013a60:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8013b48 <__ieee754_rem_pio2+0x250>
 8013a64:	eeb0 0b46 	vmov.f64	d0, d6
 8013a68:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013a6c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013a70:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8013b50 <__ieee754_rem_pio2+0x258>
 8013a74:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013a78:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013a7c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013a80:	e7b2      	b.n	80139e8 <__ieee754_rem_pio2+0xf0>
 8013a82:	4b3b      	ldr	r3, [pc, #236]	; (8013b70 <__ieee754_rem_pio2+0x278>)
 8013a84:	429e      	cmp	r6, r3
 8013a86:	dd06      	ble.n	8013a96 <__ieee754_rem_pio2+0x19e>
 8013a88:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013a8c:	ed80 7b02 	vstr	d7, [r0, #8]
 8013a90:	ed80 7b00 	vstr	d7, [r0]
 8013a94:	e742      	b.n	801391c <__ieee754_rem_pio2+0x24>
 8013a96:	1532      	asrs	r2, r6, #20
 8013a98:	ee10 0a10 	vmov	r0, s0
 8013a9c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013aa0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013aa4:	ec41 0b17 	vmov	d7, r0, r1
 8013aa8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013aac:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8013b58 <__ieee754_rem_pio2+0x260>
 8013ab0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013ab8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013abc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013ac0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013ac4:	a902      	add	r1, sp, #8
 8013ac6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013aca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013ace:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013ad2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ada:	2603      	movs	r6, #3
 8013adc:	4608      	mov	r0, r1
 8013ade:	ed91 7b04 	vldr	d7, [r1, #16]
 8013ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aea:	4633      	mov	r3, r6
 8013aec:	f1a1 0108 	sub.w	r1, r1, #8
 8013af0:	f106 36ff 	add.w	r6, r6, #4294967295
 8013af4:	d0f3      	beq.n	8013ade <__ieee754_rem_pio2+0x1e6>
 8013af6:	491f      	ldr	r1, [pc, #124]	; (8013b74 <__ieee754_rem_pio2+0x27c>)
 8013af8:	9101      	str	r1, [sp, #4]
 8013afa:	2102      	movs	r1, #2
 8013afc:	9100      	str	r1, [sp, #0]
 8013afe:	4621      	mov	r1, r4
 8013b00:	f000 f8a6 	bl	8013c50 <__kernel_rem_pio2>
 8013b04:	2d00      	cmp	r5, #0
 8013b06:	f6bf af27 	bge.w	8013958 <__ieee754_rem_pio2+0x60>
 8013b0a:	ed94 7b00 	vldr	d7, [r4]
 8013b0e:	eeb1 7b47 	vneg.f64	d7, d7
 8013b12:	ed84 7b00 	vstr	d7, [r4]
 8013b16:	ed94 7b02 	vldr	d7, [r4, #8]
 8013b1a:	e79b      	b.n	8013a54 <__ieee754_rem_pio2+0x15c>
 8013b1c:	f3af 8000 	nop.w
 8013b20:	54400000 	.word	0x54400000
 8013b24:	3ff921fb 	.word	0x3ff921fb
 8013b28:	1a626331 	.word	0x1a626331
 8013b2c:	3dd0b461 	.word	0x3dd0b461
 8013b30:	1a600000 	.word	0x1a600000
 8013b34:	3dd0b461 	.word	0x3dd0b461
 8013b38:	2e037073 	.word	0x2e037073
 8013b3c:	3ba3198a 	.word	0x3ba3198a
 8013b40:	6dc9c883 	.word	0x6dc9c883
 8013b44:	3fe45f30 	.word	0x3fe45f30
 8013b48:	2e000000 	.word	0x2e000000
 8013b4c:	3ba3198a 	.word	0x3ba3198a
 8013b50:	252049c1 	.word	0x252049c1
 8013b54:	397b839a 	.word	0x397b839a
 8013b58:	00000000 	.word	0x00000000
 8013b5c:	41700000 	.word	0x41700000
 8013b60:	3fe921fb 	.word	0x3fe921fb
 8013b64:	4002d97b 	.word	0x4002d97b
 8013b68:	413921fb 	.word	0x413921fb
 8013b6c:	08014874 	.word	0x08014874
 8013b70:	7fefffff 	.word	0x7fefffff
 8013b74:	080148f4 	.word	0x080148f4

08013b78 <__kernel_cos>:
 8013b78:	ee10 1a90 	vmov	r1, s1
 8013b7c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013b84:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013b88:	da05      	bge.n	8013b96 <__kernel_cos+0x1e>
 8013b8a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013b8e:	ee17 3a90 	vmov	r3, s15
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d03d      	beq.n	8013c12 <__kernel_cos+0x9a>
 8013b96:	ee20 3b00 	vmul.f64	d3, d0, d0
 8013b9a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013c18 <__kernel_cos+0xa0>
 8013b9e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013c20 <__kernel_cos+0xa8>
 8013ba2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8013ba6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013c28 <__kernel_cos+0xb0>
 8013baa:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013bae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013c30 <__kernel_cos+0xb8>
 8013bb2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013bb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013c38 <__kernel_cos+0xc0>
 8013bba:	4b23      	ldr	r3, [pc, #140]	; (8013c48 <__kernel_cos+0xd0>)
 8013bbc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013bc0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8013c40 <__kernel_cos+0xc8>
 8013bc4:	4299      	cmp	r1, r3
 8013bc6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013bca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013bce:	ee26 5b03 	vmul.f64	d5, d6, d3
 8013bd2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8013bd6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8013bda:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013bde:	dc04      	bgt.n	8013bea <__kernel_cos+0x72>
 8013be0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8013be4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8013be8:	4770      	bx	lr
 8013bea:	4b18      	ldr	r3, [pc, #96]	; (8013c4c <__kernel_cos+0xd4>)
 8013bec:	4299      	cmp	r1, r3
 8013bee:	dc0d      	bgt.n	8013c0c <__kernel_cos+0x94>
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8013bf6:	ec43 2b15 	vmov	d5, r2, r3
 8013bfa:	ee34 0b45 	vsub.f64	d0, d4, d5
 8013bfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013c02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013c06:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013c0a:	4770      	bx	lr
 8013c0c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8013c10:	e7f3      	b.n	8013bfa <__kernel_cos+0x82>
 8013c12:	eeb0 0b44 	vmov.f64	d0, d4
 8013c16:	4770      	bx	lr
 8013c18:	be8838d4 	.word	0xbe8838d4
 8013c1c:	bda8fae9 	.word	0xbda8fae9
 8013c20:	bdb4b1c4 	.word	0xbdb4b1c4
 8013c24:	3e21ee9e 	.word	0x3e21ee9e
 8013c28:	809c52ad 	.word	0x809c52ad
 8013c2c:	be927e4f 	.word	0xbe927e4f
 8013c30:	19cb1590 	.word	0x19cb1590
 8013c34:	3efa01a0 	.word	0x3efa01a0
 8013c38:	16c15177 	.word	0x16c15177
 8013c3c:	bf56c16c 	.word	0xbf56c16c
 8013c40:	5555554c 	.word	0x5555554c
 8013c44:	3fa55555 	.word	0x3fa55555
 8013c48:	3fd33332 	.word	0x3fd33332
 8013c4c:	3fe90000 	.word	0x3fe90000

08013c50 <__kernel_rem_pio2>:
 8013c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c54:	ed2d 8b06 	vpush	{d8-d10}
 8013c58:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8013c5c:	469b      	mov	fp, r3
 8013c5e:	460f      	mov	r7, r1
 8013c60:	4bcf      	ldr	r3, [pc, #828]	; (8013fa0 <__kernel_rem_pio2+0x350>)
 8013c62:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8013c64:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8013c68:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8013c6c:	9000      	str	r0, [sp, #0]
 8013c6e:	f112 0f14 	cmn.w	r2, #20
 8013c72:	bfa8      	it	ge
 8013c74:	2318      	movge	r3, #24
 8013c76:	f10b 31ff 	add.w	r1, fp, #4294967295
 8013c7a:	bfb8      	it	lt
 8013c7c:	2300      	movlt	r3, #0
 8013c7e:	f06f 0417 	mvn.w	r4, #23
 8013c82:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8013f88 <__kernel_rem_pio2+0x338>
 8013c86:	bfa4      	itt	ge
 8013c88:	f1a2 0a03 	subge.w	sl, r2, #3
 8013c8c:	fb9a f3f3 	sdivge	r3, sl, r3
 8013c90:	fb03 4404 	mla	r4, r3, r4, r4
 8013c94:	1a5d      	subs	r5, r3, r1
 8013c96:	4414      	add	r4, r2
 8013c98:	eb09 0601 	add.w	r6, r9, r1
 8013c9c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8013ca0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	42b2      	cmp	r2, r6
 8013ca8:	dd12      	ble.n	8013cd0 <__kernel_rem_pio2+0x80>
 8013caa:	aa18      	add	r2, sp, #96	; 0x60
 8013cac:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8013cb0:	460e      	mov	r6, r1
 8013cb2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8013cb6:	f1cb 0a01 	rsb	sl, fp, #1
 8013cba:	eb0a 0006 	add.w	r0, sl, r6
 8013cbe:	4581      	cmp	r9, r0
 8013cc0:	db25      	blt.n	8013d0e <__kernel_rem_pio2+0xbe>
 8013cc2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8013f88 <__kernel_rem_pio2+0x338>
 8013cc6:	f8dd e000 	ldr.w	lr, [sp]
 8013cca:	4615      	mov	r5, r2
 8013ccc:	2000      	movs	r0, #0
 8013cce:	e015      	b.n	8013cfc <__kernel_rem_pio2+0xac>
 8013cd0:	42d5      	cmn	r5, r2
 8013cd2:	d409      	bmi.n	8013ce8 <__kernel_rem_pio2+0x98>
 8013cd4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8013cd8:	ee07 0a90 	vmov	s15, r0
 8013cdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013ce0:	eca8 7b02 	vstmia	r8!, {d7}
 8013ce4:	3201      	adds	r2, #1
 8013ce6:	e7de      	b.n	8013ca6 <__kernel_rem_pio2+0x56>
 8013ce8:	eeb0 7b46 	vmov.f64	d7, d6
 8013cec:	e7f8      	b.n	8013ce0 <__kernel_rem_pio2+0x90>
 8013cee:	ecbe 5b02 	vldmia	lr!, {d5}
 8013cf2:	ed95 6b00 	vldr	d6, [r5]
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013cfc:	4288      	cmp	r0, r1
 8013cfe:	f1a5 0508 	sub.w	r5, r5, #8
 8013d02:	ddf4      	ble.n	8013cee <__kernel_rem_pio2+0x9e>
 8013d04:	eca8 7b02 	vstmia	r8!, {d7}
 8013d08:	3208      	adds	r2, #8
 8013d0a:	3601      	adds	r6, #1
 8013d0c:	e7d5      	b.n	8013cba <__kernel_rem_pio2+0x6a>
 8013d0e:	aa04      	add	r2, sp, #16
 8013d10:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8013f90 <__kernel_rem_pio2+0x340>
 8013d14:	ed9f aba0 	vldr	d10, [pc, #640]	; 8013f98 <__kernel_rem_pio2+0x348>
 8013d18:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8013d1c:	9201      	str	r2, [sp, #4]
 8013d1e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8013d22:	464e      	mov	r6, r9
 8013d24:	ab90      	add	r3, sp, #576	; 0x240
 8013d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013d2a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8013d2e:	ab04      	add	r3, sp, #16
 8013d30:	4618      	mov	r0, r3
 8013d32:	4632      	mov	r2, r6
 8013d34:	2a00      	cmp	r2, #0
 8013d36:	dc4e      	bgt.n	8013dd6 <__kernel_rem_pio2+0x186>
 8013d38:	4620      	mov	r0, r4
 8013d3a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8013d3e:	f000 fad3 	bl	80142e8 <scalbn>
 8013d42:	eeb0 8b40 	vmov.f64	d8, d0
 8013d46:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8013d4a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013d4e:	f000 fa57 	bl	8014200 <floor>
 8013d52:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8013d56:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013d5a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013d5e:	2c00      	cmp	r4, #0
 8013d60:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8013d64:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8013d68:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013d6c:	ee17 8a90 	vmov	r8, s15
 8013d70:	dd46      	ble.n	8013e00 <__kernel_rem_pio2+0x1b0>
 8013d72:	1e70      	subs	r0, r6, #1
 8013d74:	aa04      	add	r2, sp, #16
 8013d76:	f1c4 0c18 	rsb	ip, r4, #24
 8013d7a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8013d7e:	fa45 f20c 	asr.w	r2, r5, ip
 8013d82:	4490      	add	r8, r2
 8013d84:	fa02 f20c 	lsl.w	r2, r2, ip
 8013d88:	1aad      	subs	r5, r5, r2
 8013d8a:	aa04      	add	r2, sp, #16
 8013d8c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8013d90:	f1c4 0217 	rsb	r2, r4, #23
 8013d94:	4115      	asrs	r5, r2
 8013d96:	2d00      	cmp	r5, #0
 8013d98:	dd41      	ble.n	8013e1e <__kernel_rem_pio2+0x1ce>
 8013d9a:	f04f 0c00 	mov.w	ip, #0
 8013d9e:	f108 0801 	add.w	r8, r8, #1
 8013da2:	4660      	mov	r0, ip
 8013da4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8013da8:	4566      	cmp	r6, ip
 8013daa:	dc69      	bgt.n	8013e80 <__kernel_rem_pio2+0x230>
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	dd03      	ble.n	8013db8 <__kernel_rem_pio2+0x168>
 8013db0:	2c01      	cmp	r4, #1
 8013db2:	d076      	beq.n	8013ea2 <__kernel_rem_pio2+0x252>
 8013db4:	2c02      	cmp	r4, #2
 8013db6:	d07f      	beq.n	8013eb8 <__kernel_rem_pio2+0x268>
 8013db8:	2d02      	cmp	r5, #2
 8013dba:	d130      	bne.n	8013e1e <__kernel_rem_pio2+0x1ce>
 8013dbc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013dc0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8013dc4:	b358      	cbz	r0, 8013e1e <__kernel_rem_pio2+0x1ce>
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	9102      	str	r1, [sp, #8]
 8013dca:	f000 fa8d 	bl	80142e8 <scalbn>
 8013dce:	9902      	ldr	r1, [sp, #8]
 8013dd0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013dd4:	e023      	b.n	8013e1e <__kernel_rem_pio2+0x1ce>
 8013dd6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8013dda:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013dde:	3a01      	subs	r2, #1
 8013de0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8013de4:	ad68      	add	r5, sp, #416	; 0x1a0
 8013de6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8013dea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013dee:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8013df2:	eca0 0a01 	vstmia	r0!, {s0}
 8013df6:	ed95 0b00 	vldr	d0, [r5]
 8013dfa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8013dfe:	e799      	b.n	8013d34 <__kernel_rem_pio2+0xe4>
 8013e00:	d105      	bne.n	8013e0e <__kernel_rem_pio2+0x1be>
 8013e02:	1e72      	subs	r2, r6, #1
 8013e04:	a804      	add	r0, sp, #16
 8013e06:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8013e0a:	15ed      	asrs	r5, r5, #23
 8013e0c:	e7c3      	b.n	8013d96 <__kernel_rem_pio2+0x146>
 8013e0e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013e12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1a:	da2f      	bge.n	8013e7c <__kernel_rem_pio2+0x22c>
 8013e1c:	2500      	movs	r5, #0
 8013e1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e26:	f040 8087 	bne.w	8013f38 <__kernel_rem_pio2+0x2e8>
 8013e2a:	1e73      	subs	r3, r6, #1
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f04f 0c00 	mov.w	ip, #0
 8013e32:	4548      	cmp	r0, r9
 8013e34:	da47      	bge.n	8013ec6 <__kernel_rem_pio2+0x276>
 8013e36:	f1bc 0f00 	cmp.w	ip, #0
 8013e3a:	d070      	beq.n	8013f1e <__kernel_rem_pio2+0x2ce>
 8013e3c:	aa04      	add	r2, sp, #16
 8013e3e:	3c18      	subs	r4, #24
 8013e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	d075      	beq.n	8013f34 <__kernel_rem_pio2+0x2e4>
 8013e48:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	f000 fa4a 	bl	80142e8 <scalbn>
 8013e54:	9b00      	ldr	r3, [sp, #0]
 8013e56:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013f90 <__kernel_rem_pio2+0x340>
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	2a00      	cmp	r2, #0
 8013e5e:	f280 80ac 	bge.w	8013fba <__kernel_rem_pio2+0x36a>
 8013e62:	4619      	mov	r1, r3
 8013e64:	2000      	movs	r0, #0
 8013e66:	2900      	cmp	r1, #0
 8013e68:	f2c0 80cd 	blt.w	8014006 <__kernel_rem_pio2+0x3b6>
 8013e6c:	aa68      	add	r2, sp, #416	; 0x1a0
 8013e6e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8013e72:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8013f88 <__kernel_rem_pio2+0x338>
 8013e76:	4e4b      	ldr	r6, [pc, #300]	; (8013fa4 <__kernel_rem_pio2+0x354>)
 8013e78:	2200      	movs	r2, #0
 8013e7a:	e0b8      	b.n	8013fee <__kernel_rem_pio2+0x39e>
 8013e7c:	2502      	movs	r5, #2
 8013e7e:	e78c      	b.n	8013d9a <__kernel_rem_pio2+0x14a>
 8013e80:	681a      	ldr	r2, [r3, #0]
 8013e82:	b948      	cbnz	r0, 8013e98 <__kernel_rem_pio2+0x248>
 8013e84:	b11a      	cbz	r2, 8013e8e <__kernel_rem_pio2+0x23e>
 8013e86:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8013e8a:	601a      	str	r2, [r3, #0]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	f10c 0c01 	add.w	ip, ip, #1
 8013e92:	3304      	adds	r3, #4
 8013e94:	4610      	mov	r0, r2
 8013e96:	e787      	b.n	8013da8 <__kernel_rem_pio2+0x158>
 8013e98:	ebae 0202 	sub.w	r2, lr, r2
 8013e9c:	601a      	str	r2, [r3, #0]
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	e7f5      	b.n	8013e8e <__kernel_rem_pio2+0x23e>
 8013ea2:	1e72      	subs	r2, r6, #1
 8013ea4:	ab04      	add	r3, sp, #16
 8013ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eaa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013eae:	f10d 0c10 	add.w	ip, sp, #16
 8013eb2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8013eb6:	e77f      	b.n	8013db8 <__kernel_rem_pio2+0x168>
 8013eb8:	1e72      	subs	r2, r6, #1
 8013eba:	ab04      	add	r3, sp, #16
 8013ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013ec4:	e7f3      	b.n	8013eae <__kernel_rem_pio2+0x25e>
 8013ec6:	aa04      	add	r2, sp, #16
 8013ec8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8013ecc:	3801      	subs	r0, #1
 8013ece:	ea4c 0c02 	orr.w	ip, ip, r2
 8013ed2:	e7ae      	b.n	8013e32 <__kernel_rem_pio2+0x1e2>
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013eda:	2a00      	cmp	r2, #0
 8013edc:	d0fa      	beq.n	8013ed4 <__kernel_rem_pio2+0x284>
 8013ede:	eb06 020b 	add.w	r2, r6, fp
 8013ee2:	ad18      	add	r5, sp, #96	; 0x60
 8013ee4:	1c73      	adds	r3, r6, #1
 8013ee6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8013eea:	4406      	add	r6, r0
 8013eec:	429e      	cmp	r6, r3
 8013eee:	f6ff af19 	blt.w	8013d24 <__kernel_rem_pio2+0xd4>
 8013ef2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8013ef6:	9d00      	ldr	r5, [sp, #0]
 8013ef8:	ee07 0a90 	vmov	s15, r0
 8013efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013f00:	2000      	movs	r0, #0
 8013f02:	eca2 7b02 	vstmia	r2!, {d7}
 8013f06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013f88 <__kernel_rem_pio2+0x338>
 8013f0a:	4694      	mov	ip, r2
 8013f0c:	4288      	cmp	r0, r1
 8013f0e:	dd09      	ble.n	8013f24 <__kernel_rem_pio2+0x2d4>
 8013f10:	a868      	add	r0, sp, #416	; 0x1a0
 8013f12:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8013f16:	ed80 7b00 	vstr	d7, [r0]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	e7e6      	b.n	8013eec <__kernel_rem_pio2+0x29c>
 8013f1e:	9b01      	ldr	r3, [sp, #4]
 8013f20:	2001      	movs	r0, #1
 8013f22:	e7d8      	b.n	8013ed6 <__kernel_rem_pio2+0x286>
 8013f24:	ecb5 5b02 	vldmia	r5!, {d5}
 8013f28:	ed3c 6b02 	vldmdb	ip!, {d6}
 8013f2c:	3001      	adds	r0, #1
 8013f2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013f32:	e7eb      	b.n	8013f0c <__kernel_rem_pio2+0x2bc>
 8013f34:	3b01      	subs	r3, #1
 8013f36:	e781      	b.n	8013e3c <__kernel_rem_pio2+0x1ec>
 8013f38:	4260      	negs	r0, r4
 8013f3a:	eeb0 0b48 	vmov.f64	d0, d8
 8013f3e:	f000 f9d3 	bl	80142e8 <scalbn>
 8013f42:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8013f98 <__kernel_rem_pio2+0x348>
 8013f46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	db2b      	blt.n	8013fa8 <__kernel_rem_pio2+0x358>
 8013f50:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013f90 <__kernel_rem_pio2+0x340>
 8013f54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013f58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013f5c:	aa04      	add	r2, sp, #16
 8013f5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013f62:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013f66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013f6a:	a904      	add	r1, sp, #16
 8013f6c:	ee10 3a10 	vmov	r3, s0
 8013f70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013f74:	ee17 2a10 	vmov	r2, s14
 8013f78:	1c73      	adds	r3, r6, #1
 8013f7a:	3418      	adds	r4, #24
 8013f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013f80:	e762      	b.n	8013e48 <__kernel_rem_pio2+0x1f8>
 8013f82:	bf00      	nop
 8013f84:	f3af 8000 	nop.w
	...
 8013f94:	3e700000 	.word	0x3e700000
 8013f98:	00000000 	.word	0x00000000
 8013f9c:	41700000 	.word	0x41700000
 8013fa0:	08014a40 	.word	0x08014a40
 8013fa4:	08014a00 	.word	0x08014a00
 8013fa8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013fac:	aa04      	add	r2, sp, #16
 8013fae:	ee10 3a10 	vmov	r3, s0
 8013fb2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013fb6:	4633      	mov	r3, r6
 8013fb8:	e746      	b.n	8013e48 <__kernel_rem_pio2+0x1f8>
 8013fba:	a804      	add	r0, sp, #16
 8013fbc:	a968      	add	r1, sp, #416	; 0x1a0
 8013fbe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013fc2:	9000      	str	r0, [sp, #0]
 8013fc4:	ee07 0a90 	vmov	s15, r0
 8013fc8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013fcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013fd0:	3a01      	subs	r2, #1
 8013fd2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013fd6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8013fda:	ed81 7b00 	vstr	d7, [r1]
 8013fde:	e73d      	b.n	8013e5c <__kernel_rem_pio2+0x20c>
 8013fe0:	ecb6 5b02 	vldmia	r6!, {d5}
 8013fe4:	ecb4 6b02 	vldmia	r4!, {d6}
 8013fe8:	3201      	adds	r2, #1
 8013fea:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013fee:	454a      	cmp	r2, r9
 8013ff0:	dc01      	bgt.n	8013ff6 <__kernel_rem_pio2+0x3a6>
 8013ff2:	4290      	cmp	r0, r2
 8013ff4:	daf4      	bge.n	8013fe0 <__kernel_rem_pio2+0x390>
 8013ff6:	aa40      	add	r2, sp, #256	; 0x100
 8013ff8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013ffc:	ed82 7b00 	vstr	d7, [r2]
 8014000:	3901      	subs	r1, #1
 8014002:	3001      	adds	r0, #1
 8014004:	e72f      	b.n	8013e66 <__kernel_rem_pio2+0x216>
 8014006:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014008:	2a02      	cmp	r2, #2
 801400a:	dc0a      	bgt.n	8014022 <__kernel_rem_pio2+0x3d2>
 801400c:	2a00      	cmp	r2, #0
 801400e:	dc5a      	bgt.n	80140c6 <__kernel_rem_pio2+0x476>
 8014010:	d039      	beq.n	8014086 <__kernel_rem_pio2+0x436>
 8014012:	f008 0007 	and.w	r0, r8, #7
 8014016:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 801401a:	ecbd 8b06 	vpop	{d8-d10}
 801401e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014022:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014024:	2a03      	cmp	r2, #3
 8014026:	d1f4      	bne.n	8014012 <__kernel_rem_pio2+0x3c2>
 8014028:	aa40      	add	r2, sp, #256	; 0x100
 801402a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801402e:	4611      	mov	r1, r2
 8014030:	4618      	mov	r0, r3
 8014032:	2800      	cmp	r0, #0
 8014034:	f1a1 0108 	sub.w	r1, r1, #8
 8014038:	dc52      	bgt.n	80140e0 <__kernel_rem_pio2+0x490>
 801403a:	4619      	mov	r1, r3
 801403c:	2901      	cmp	r1, #1
 801403e:	f1a2 0208 	sub.w	r2, r2, #8
 8014042:	dc5d      	bgt.n	8014100 <__kernel_rem_pio2+0x4b0>
 8014044:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8014148 <__kernel_rem_pio2+0x4f8>
 8014048:	2b01      	cmp	r3, #1
 801404a:	dc69      	bgt.n	8014120 <__kernel_rem_pio2+0x4d0>
 801404c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8014050:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8014054:	2d00      	cmp	r5, #0
 8014056:	d16c      	bne.n	8014132 <__kernel_rem_pio2+0x4e2>
 8014058:	ed87 5b00 	vstr	d5, [r7]
 801405c:	ed87 6b02 	vstr	d6, [r7, #8]
 8014060:	ed87 7b04 	vstr	d7, [r7, #16]
 8014064:	e7d5      	b.n	8014012 <__kernel_rem_pio2+0x3c2>
 8014066:	aa40      	add	r2, sp, #256	; 0x100
 8014068:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801406c:	ed92 6b00 	vldr	d6, [r2]
 8014070:	3b01      	subs	r3, #1
 8014072:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014076:	2b00      	cmp	r3, #0
 8014078:	daf5      	bge.n	8014066 <__kernel_rem_pio2+0x416>
 801407a:	b10d      	cbz	r5, 8014080 <__kernel_rem_pio2+0x430>
 801407c:	eeb1 7b47 	vneg.f64	d7, d7
 8014080:	ed87 7b00 	vstr	d7, [r7]
 8014084:	e7c5      	b.n	8014012 <__kernel_rem_pio2+0x3c2>
 8014086:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014148 <__kernel_rem_pio2+0x4f8>
 801408a:	e7f4      	b.n	8014076 <__kernel_rem_pio2+0x426>
 801408c:	a940      	add	r1, sp, #256	; 0x100
 801408e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014092:	ed91 7b00 	vldr	d7, [r1]
 8014096:	3a01      	subs	r2, #1
 8014098:	ee36 6b07 	vadd.f64	d6, d6, d7
 801409c:	2a00      	cmp	r2, #0
 801409e:	daf5      	bge.n	801408c <__kernel_rem_pio2+0x43c>
 80140a0:	b1ad      	cbz	r5, 80140ce <__kernel_rem_pio2+0x47e>
 80140a2:	eeb1 7b46 	vneg.f64	d7, d6
 80140a6:	ed87 7b00 	vstr	d7, [r7]
 80140aa:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80140ae:	a942      	add	r1, sp, #264	; 0x108
 80140b0:	2201      	movs	r2, #1
 80140b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80140b6:	4293      	cmp	r3, r2
 80140b8:	da0c      	bge.n	80140d4 <__kernel_rem_pio2+0x484>
 80140ba:	b10d      	cbz	r5, 80140c0 <__kernel_rem_pio2+0x470>
 80140bc:	eeb1 7b47 	vneg.f64	d7, d7
 80140c0:	ed87 7b02 	vstr	d7, [r7, #8]
 80140c4:	e7a5      	b.n	8014012 <__kernel_rem_pio2+0x3c2>
 80140c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014148 <__kernel_rem_pio2+0x4f8>
 80140ca:	461a      	mov	r2, r3
 80140cc:	e7e6      	b.n	801409c <__kernel_rem_pio2+0x44c>
 80140ce:	eeb0 7b46 	vmov.f64	d7, d6
 80140d2:	e7e8      	b.n	80140a6 <__kernel_rem_pio2+0x456>
 80140d4:	ecb1 6b02 	vldmia	r1!, {d6}
 80140d8:	3201      	adds	r2, #1
 80140da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80140de:	e7ea      	b.n	80140b6 <__kernel_rem_pio2+0x466>
 80140e0:	ed91 7b00 	vldr	d7, [r1]
 80140e4:	ed91 5b02 	vldr	d5, [r1, #8]
 80140e8:	3801      	subs	r0, #1
 80140ea:	ee37 6b05 	vadd.f64	d6, d7, d5
 80140ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80140f2:	ed81 6b00 	vstr	d6, [r1]
 80140f6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80140fa:	ed81 7b02 	vstr	d7, [r1, #8]
 80140fe:	e798      	b.n	8014032 <__kernel_rem_pio2+0x3e2>
 8014100:	ed92 7b00 	vldr	d7, [r2]
 8014104:	ed92 5b02 	vldr	d5, [r2, #8]
 8014108:	3901      	subs	r1, #1
 801410a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801410e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014112:	ed82 6b00 	vstr	d6, [r2]
 8014116:	ee37 7b05 	vadd.f64	d7, d7, d5
 801411a:	ed82 7b02 	vstr	d7, [r2, #8]
 801411e:	e78d      	b.n	801403c <__kernel_rem_pio2+0x3ec>
 8014120:	aa40      	add	r2, sp, #256	; 0x100
 8014122:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014126:	ed92 6b00 	vldr	d6, [r2]
 801412a:	3b01      	subs	r3, #1
 801412c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014130:	e78a      	b.n	8014048 <__kernel_rem_pio2+0x3f8>
 8014132:	eeb1 5b45 	vneg.f64	d5, d5
 8014136:	eeb1 6b46 	vneg.f64	d6, d6
 801413a:	ed87 5b00 	vstr	d5, [r7]
 801413e:	eeb1 7b47 	vneg.f64	d7, d7
 8014142:	ed87 6b02 	vstr	d6, [r7, #8]
 8014146:	e78b      	b.n	8014060 <__kernel_rem_pio2+0x410>
	...

08014150 <__kernel_sin>:
 8014150:	ee10 3a90 	vmov	r3, s1
 8014154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014158:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801415c:	da04      	bge.n	8014168 <__kernel_sin+0x18>
 801415e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014162:	ee17 3a90 	vmov	r3, s15
 8014166:	b35b      	cbz	r3, 80141c0 <__kernel_sin+0x70>
 8014168:	ee20 6b00 	vmul.f64	d6, d0, d0
 801416c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014170:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80141c8 <__kernel_sin+0x78>
 8014174:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80141d0 <__kernel_sin+0x80>
 8014178:	eea6 4b07 	vfma.f64	d4, d6, d7
 801417c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80141d8 <__kernel_sin+0x88>
 8014180:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014184:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80141e0 <__kernel_sin+0x90>
 8014188:	eea7 4b06 	vfma.f64	d4, d7, d6
 801418c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80141e8 <__kernel_sin+0x98>
 8014190:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014194:	b930      	cbnz	r0, 80141a4 <__kernel_sin+0x54>
 8014196:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80141f0 <__kernel_sin+0xa0>
 801419a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801419e:	eea4 0b05 	vfma.f64	d0, d4, d5
 80141a2:	4770      	bx	lr
 80141a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80141a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80141ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 80141b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80141b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80141f8 <__kernel_sin+0xa8>
 80141b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80141bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop
 80141c4:	f3af 8000 	nop.w
 80141c8:	5acfd57c 	.word	0x5acfd57c
 80141cc:	3de5d93a 	.word	0x3de5d93a
 80141d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80141d4:	be5ae5e6 	.word	0xbe5ae5e6
 80141d8:	57b1fe7d 	.word	0x57b1fe7d
 80141dc:	3ec71de3 	.word	0x3ec71de3
 80141e0:	19c161d5 	.word	0x19c161d5
 80141e4:	bf2a01a0 	.word	0xbf2a01a0
 80141e8:	1110f8a6 	.word	0x1110f8a6
 80141ec:	3f811111 	.word	0x3f811111
 80141f0:	55555549 	.word	0x55555549
 80141f4:	bfc55555 	.word	0xbfc55555
 80141f8:	55555549 	.word	0x55555549
 80141fc:	3fc55555 	.word	0x3fc55555

08014200 <floor>:
 8014200:	ee10 1a90 	vmov	r1, s1
 8014204:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014208:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801420c:	2b13      	cmp	r3, #19
 801420e:	b530      	push	{r4, r5, lr}
 8014210:	ee10 0a10 	vmov	r0, s0
 8014214:	ee10 5a10 	vmov	r5, s0
 8014218:	dc31      	bgt.n	801427e <floor+0x7e>
 801421a:	2b00      	cmp	r3, #0
 801421c:	da15      	bge.n	801424a <floor+0x4a>
 801421e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80142d8 <floor+0xd8>
 8014222:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014226:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422e:	dd07      	ble.n	8014240 <floor+0x40>
 8014230:	2900      	cmp	r1, #0
 8014232:	da4e      	bge.n	80142d2 <floor+0xd2>
 8014234:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014238:	4318      	orrs	r0, r3
 801423a:	d001      	beq.n	8014240 <floor+0x40>
 801423c:	4928      	ldr	r1, [pc, #160]	; (80142e0 <floor+0xe0>)
 801423e:	2000      	movs	r0, #0
 8014240:	460b      	mov	r3, r1
 8014242:	4602      	mov	r2, r0
 8014244:	ec43 2b10 	vmov	d0, r2, r3
 8014248:	e020      	b.n	801428c <floor+0x8c>
 801424a:	4a26      	ldr	r2, [pc, #152]	; (80142e4 <floor+0xe4>)
 801424c:	411a      	asrs	r2, r3
 801424e:	ea01 0402 	and.w	r4, r1, r2
 8014252:	4304      	orrs	r4, r0
 8014254:	d01a      	beq.n	801428c <floor+0x8c>
 8014256:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80142d8 <floor+0xd8>
 801425a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801425e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014266:	ddeb      	ble.n	8014240 <floor+0x40>
 8014268:	2900      	cmp	r1, #0
 801426a:	bfbe      	ittt	lt
 801426c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014270:	fa40 f303 	asrlt.w	r3, r0, r3
 8014274:	18c9      	addlt	r1, r1, r3
 8014276:	ea21 0102 	bic.w	r1, r1, r2
 801427a:	2000      	movs	r0, #0
 801427c:	e7e0      	b.n	8014240 <floor+0x40>
 801427e:	2b33      	cmp	r3, #51	; 0x33
 8014280:	dd05      	ble.n	801428e <floor+0x8e>
 8014282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014286:	d101      	bne.n	801428c <floor+0x8c>
 8014288:	ee30 0b00 	vadd.f64	d0, d0, d0
 801428c:	bd30      	pop	{r4, r5, pc}
 801428e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014292:	f04f 32ff 	mov.w	r2, #4294967295
 8014296:	40e2      	lsrs	r2, r4
 8014298:	4202      	tst	r2, r0
 801429a:	d0f7      	beq.n	801428c <floor+0x8c>
 801429c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80142d8 <floor+0xd8>
 80142a0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80142a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80142a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ac:	ddc8      	ble.n	8014240 <floor+0x40>
 80142ae:	2900      	cmp	r1, #0
 80142b0:	da02      	bge.n	80142b8 <floor+0xb8>
 80142b2:	2b14      	cmp	r3, #20
 80142b4:	d103      	bne.n	80142be <floor+0xbe>
 80142b6:	3101      	adds	r1, #1
 80142b8:	ea20 0002 	bic.w	r0, r0, r2
 80142bc:	e7c0      	b.n	8014240 <floor+0x40>
 80142be:	2401      	movs	r4, #1
 80142c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80142c4:	fa04 f303 	lsl.w	r3, r4, r3
 80142c8:	4418      	add	r0, r3
 80142ca:	42a8      	cmp	r0, r5
 80142cc:	bf38      	it	cc
 80142ce:	1909      	addcc	r1, r1, r4
 80142d0:	e7f2      	b.n	80142b8 <floor+0xb8>
 80142d2:	2000      	movs	r0, #0
 80142d4:	4601      	mov	r1, r0
 80142d6:	e7b3      	b.n	8014240 <floor+0x40>
 80142d8:	8800759c 	.word	0x8800759c
 80142dc:	7e37e43c 	.word	0x7e37e43c
 80142e0:	bff00000 	.word	0xbff00000
 80142e4:	000fffff 	.word	0x000fffff

080142e8 <scalbn>:
 80142e8:	b082      	sub	sp, #8
 80142ea:	ed8d 0b00 	vstr	d0, [sp]
 80142ee:	9b01      	ldr	r3, [sp, #4]
 80142f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80142f4:	b9a2      	cbnz	r2, 8014320 <scalbn+0x38>
 80142f6:	9a00      	ldr	r2, [sp, #0]
 80142f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142fc:	4313      	orrs	r3, r2
 80142fe:	d03a      	beq.n	8014376 <scalbn+0x8e>
 8014300:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80143d8 <scalbn+0xf0>
 8014304:	4b40      	ldr	r3, [pc, #256]	; (8014408 <scalbn+0x120>)
 8014306:	ee20 7b07 	vmul.f64	d7, d0, d7
 801430a:	4298      	cmp	r0, r3
 801430c:	ed8d 7b00 	vstr	d7, [sp]
 8014310:	da11      	bge.n	8014336 <scalbn+0x4e>
 8014312:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80143e0 <scalbn+0xf8>
 8014316:	ed9d 6b00 	vldr	d6, [sp]
 801431a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801431e:	e007      	b.n	8014330 <scalbn+0x48>
 8014320:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014324:	428a      	cmp	r2, r1
 8014326:	d10a      	bne.n	801433e <scalbn+0x56>
 8014328:	ed9d 7b00 	vldr	d7, [sp]
 801432c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014330:	ed8d 7b00 	vstr	d7, [sp]
 8014334:	e01f      	b.n	8014376 <scalbn+0x8e>
 8014336:	9b01      	ldr	r3, [sp, #4]
 8014338:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801433c:	3a36      	subs	r2, #54	; 0x36
 801433e:	4402      	add	r2, r0
 8014340:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014344:	428a      	cmp	r2, r1
 8014346:	dd0a      	ble.n	801435e <scalbn+0x76>
 8014348:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80143e8 <scalbn+0x100>
 801434c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80143f0 <scalbn+0x108>
 8014350:	eeb0 6b47 	vmov.f64	d6, d7
 8014354:	9b01      	ldr	r3, [sp, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	fe27 7b05 	vselge.f64	d7, d7, d5
 801435c:	e7dd      	b.n	801431a <scalbn+0x32>
 801435e:	2a00      	cmp	r2, #0
 8014360:	dd0d      	ble.n	801437e <scalbn+0x96>
 8014362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014366:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801436a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801436e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014372:	e9cd 0100 	strd	r0, r1, [sp]
 8014376:	ed9d 0b00 	vldr	d0, [sp]
 801437a:	b002      	add	sp, #8
 801437c:	4770      	bx	lr
 801437e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014382:	da18      	bge.n	80143b6 <scalbn+0xce>
 8014384:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014388:	4298      	cmp	r0, r3
 801438a:	9b01      	ldr	r3, [sp, #4]
 801438c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014390:	dd09      	ble.n	80143a6 <scalbn+0xbe>
 8014392:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80143e8 <scalbn+0x100>
 8014396:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80143f0 <scalbn+0x108>
 801439a:	eeb0 6b47 	vmov.f64	d6, d7
 801439e:	2b00      	cmp	r3, #0
 80143a0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80143a4:	e7b9      	b.n	801431a <scalbn+0x32>
 80143a6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80143e0 <scalbn+0xf8>
 80143aa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80143f8 <scalbn+0x110>
 80143ae:	eeb0 6b47 	vmov.f64	d6, d7
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	e7f4      	b.n	80143a0 <scalbn+0xb8>
 80143b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80143be:	3236      	adds	r2, #54	; 0x36
 80143c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80143c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80143c8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8014400 <scalbn+0x118>
 80143cc:	ec41 0b17 	vmov	d7, r0, r1
 80143d0:	e7a3      	b.n	801431a <scalbn+0x32>
 80143d2:	bf00      	nop
 80143d4:	f3af 8000 	nop.w
 80143d8:	00000000 	.word	0x00000000
 80143dc:	43500000 	.word	0x43500000
 80143e0:	c2f8f359 	.word	0xc2f8f359
 80143e4:	01a56e1f 	.word	0x01a56e1f
 80143e8:	8800759c 	.word	0x8800759c
 80143ec:	7e37e43c 	.word	0x7e37e43c
 80143f0:	8800759c 	.word	0x8800759c
 80143f4:	fe37e43c 	.word	0xfe37e43c
 80143f8:	c2f8f359 	.word	0xc2f8f359
 80143fc:	81a56e1f 	.word	0x81a56e1f
 8014400:	00000000 	.word	0x00000000
 8014404:	3c900000 	.word	0x3c900000
 8014408:	ffff3cb0 	.word	0xffff3cb0

0801440c <_init>:
 801440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801440e:	bf00      	nop
 8014410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014412:	bc08      	pop	{r3}
 8014414:	469e      	mov	lr, r3
 8014416:	4770      	bx	lr

08014418 <_fini>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	bf00      	nop
 801441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801441e:	bc08      	pop	{r3}
 8014420:	469e      	mov	lr, r3
 8014422:	4770      	bx	lr


BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f52c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800f800  0800f800  0001f800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc24  0800fc24  0001fc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc2c  0800fc2c  0001fc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc30  0800fc30  0001fc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800fc34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b94  240001e8  0800fe1c  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d7c  0800fe1c  00020d7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034a9e  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004faf  00000000  00000000  00054cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001948  00000000  00000000  00059c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001790  00000000  00000000  0005b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389cb  00000000  00000000  0005cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000239fb  00000000  00000000  0009570b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cd2a  00000000  00000000  000b9106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225e30  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078cc  00000000  00000000  00225e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f7e4 	.word	0x0800f7e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800f7e4 	.word	0x0800f7e4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f006 fcef 	bl	8007100 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00b f964 	bl	800b9fc <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f006 fcde 	bl	8007100 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00b f9e9 	bl	800bb28 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <KalmanFilter_Init>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_Init(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6278      	str	r0, [r7, #36]	; 0x24
 80008b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80008b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80008bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80008c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80008c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80008c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80008cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80008d0:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	61da      	str	r2, [r3, #28]
}
 8000904:	bf00      	nop
 8000906:	372c      	adds	r7, #44	; 0x2c
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,float theta_k) {
 8000910:	b480      	push	{r7}
 8000912:	b08f      	sub	sp, #60	; 0x3c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]
	float X1 = (dev->x1);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
	float X2 = (dev->x2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
	float P11 = (dev->p11);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float P12 = (dev->p12);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
	float P21 = (dev->p21);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
	float P22 = (dev->p22);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	623b      	str	r3, [r7, #32]
	float Q = (dev->Q);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	61fb      	str	r3, [r7, #28]
	float R = (dev->R);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	61bb      	str	r3, [r7, #24]
	float dt_pow2 = DT * DT;
 800094c:	4bf8      	ldr	r3, [pc, #992]	; (8000d30 <KalmanFilter_Update+0x420>)
 800094e:	617b      	str	r3, [r7, #20]
	float dt_pow3 = DT * DT * DT;
 8000950:	4bf8      	ldr	r3, [pc, #992]	; (8000d34 <KalmanFilter_Update+0x424>)
 8000952:	613b      	str	r3, [r7, #16]
	float dt_pow4 = DT * DT * DT * DT;
 8000954:	4bf8      	ldr	r3, [pc, #992]	; (8000d38 <KalmanFilter_Update+0x428>)
 8000956:	60fb      	str	r3, [r7, #12]
	dev->x1 = X1 + X2*DT - ((X1 - theta_k + X2*DT)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000958:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800095c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000960:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000968:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8000d28 <KalmanFilter_Update+0x418>
 800096c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000970:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000974:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000978:	edd7 7a00 	vldr	s15, [r7]
 800097c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000980:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000984:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800098c:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8000d28 <KalmanFilter_Update+0x418>
 8000990:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000994:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000998:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800099c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80009a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80009a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a8:	ed9f 3bdf 	vldr	d3, [pc, #892]	; 8000d28 <KalmanFilter_Update+0x418>
 80009ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009b0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80009b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80009bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c0:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 80009c4:	eec7 7a23 	vdiv.f32	s15, s14, s7
 80009c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009cc:	ee34 4b07 	vadd.f64	d4, d4, d7
 80009d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009d4:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80009d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80009dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e0:	ed9f 2bd1 	vldr	d2, [pc, #836]	; 8000d28 <KalmanFilter_Update+0x418>
 80009e4:	ee27 7b02 	vmul.f64	d7, d7, d2
 80009e8:	ee33 7b07 	vadd.f64	d7, d3, d7
 80009ec:	ed9f 3bce 	vldr	d3, [pc, #824]	; 8000d28 <KalmanFilter_Update+0x418>
 80009f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009f4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80009f8:	ee25 4b07 	vmul.f64	d4, d5, d7
 80009fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a08:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a14:	ed9f 3bc4 	vldr	d3, [pc, #784]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a1c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a2c:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000a30:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a38:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000a40:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4c:	ed9f 2bb6 	vldr	d2, [pc, #728]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a50:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000a54:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000a58:	ed9f 3bb3 	vldr	d3, [pc, #716]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a60:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a64:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->x2  = X2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(X1 - theta_k + X2*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000a76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a8a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000a8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000a92:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a96:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9e:	ed9f 4ba2 	vldr	d4, [pc, #648]	; 8000d28 <KalmanFilter_Update+0x418>
 8000aa2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000aa6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000aaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ab6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000aba:	edd7 7a00 	vldr	s15, [r7]
 8000abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ac6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ace:	ed9f 3b96 	vldr	d3, [pc, #600]	; 8000d28 <KalmanFilter_Update+0x418>
 8000ad2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ad6:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000ada:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000ade:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000aee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af6:	ed9f 3b8c 	vldr	d3, [pc, #560]	; 8000d28 <KalmanFilter_Update+0x418>
 8000afa:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000afe:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b02:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0e:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000b12:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b22:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000b26:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2e:	ed9f 2b7e 	vldr	d2, [pc, #504]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b32:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000b36:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000b3a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b3e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000b42:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b46:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->p11  = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000b58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b80:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000b84:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b94:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b98:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba0:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8000d28 <KalmanFilter_Update+0x418>
 8000ba4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000ba8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000bac:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8000d28 <KalmanFilter_Update+0x418>
 8000bb0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000bb4:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000bb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd0:	ed9f 4b55 	vldr	d4, [pc, #340]	; 8000d28 <KalmanFilter_Update+0x418>
 8000bd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be8:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000bec:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bfc:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c00:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c08:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c10:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c14:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c2c:	eeb1 6b47 	vneg.f64	d6, d7
 8000c30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c34:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 4b39 	vldr	d4, [pc, #228]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c44:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c48:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c58:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000c5c:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c64:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c6c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c78:	ed9f 3b2b 	vldr	d3, [pc, #172]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c80:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c84:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c8c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->p12 = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*((Q*dt_pow3)/2 + P22*DT + P12);
 8000c9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ca2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ca6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cba:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cc6:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000cca:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cda:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce6:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000cee:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000cf2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cf6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cfa:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000cfe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d16:	ed9f 4b04 	vldr	d4, [pc, #16]	; 8000d28 <KalmanFilter_Update+0x418>
 8000d1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d22:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d26:	e009      	b.n	8000d3c <KalmanFilter_Update+0x42c>
 8000d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d2c:	3f60624d 	.word	0x3f60624d
 8000d30:	368637bd 	.word	0x368637bd
 8000d34:	3209705f 	.word	0x3209705f
 8000d38:	2d8cbccc 	.word	0x2d8cbccc
 8000d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d44:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000d48:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d58:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	ed9f 3bb4 	vldr	d3, [pc, #720]	; 8001038 <KalmanFilter_Update+0x728>
 8000d68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000d6c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000d70:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8001038 <KalmanFilter_Update+0x728>
 8000d74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d88:	eeb1 6b47 	vneg.f64	d6, d7
 8000d8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d98:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000d9c:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000da0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000da4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dac:	ed9f 4ba2 	vldr	d4, [pc, #648]	; 8001038 <KalmanFilter_Update+0x728>
 8000db0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000db4:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000db8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000dc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->p21 = P21 + P22*DT + (Q*dt_pow3)/2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dd6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de2:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8001038 <KalmanFilter_Update+0x728>
 8000de6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dee:	ed97 7a07 	vldr	s14, [r7, #28]
 8000df2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000dfe:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000e1a:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e1e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e22:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8001038 <KalmanFilter_Update+0x728>
 8000e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000e32:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e46:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	ed9f 3b79 	vldr	d3, [pc, #484]	; 8001038 <KalmanFilter_Update+0x728>
 8000e56:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000e5a:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000e5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6a:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000e6e:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e76:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000e7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e7e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000e82:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e8a:	ed9f 2b6b 	vldr	d2, [pc, #428]	; 8001038 <KalmanFilter_Update+0x728>
 8000e8e:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000e92:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000e96:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001038 <KalmanFilter_Update+0x728>
 8000e9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000e9e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000ea2:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000ea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000eb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ebe:	ed9f 3b5e 	vldr	d3, [pc, #376]	; 8001038 <KalmanFilter_Update+0x728>
 8000ec2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ec6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000eca:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed6:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000eda:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000eea:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000eee:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef6:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8001038 <KalmanFilter_Update+0x728>
 8000efa:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000efe:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000f02:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8001038 <KalmanFilter_Update+0x728>
 8000f06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000f0a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->p22 = P22 + Q*dt_pow2 - (((Q*dt_pow3)/2 + P22*DT + P12)*((Q*dt_pow3)/2 + P22*DT + P21))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000f20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f38:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f44:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000f48:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000f4c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f58:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001038 <KalmanFilter_Update+0x728>
 8000f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000f60:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f6c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f70:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8000f80:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000f84:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f88:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f90:	ed9f 3b29 	vldr	d3, [pc, #164]	; 8001038 <KalmanFilter_Update+0x728>
 8000f94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000f98:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000f9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa4:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000fa8:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000fac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc4:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 8001038 <KalmanFilter_Update+0x728>
 8000fc8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000fcc:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fdc:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000fe0:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ff0:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000ff4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffc:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001038 <KalmanFilter_Update+0x728>
 8001000:	ee27 7b02 	vmul.f64	d7, d7, d2
 8001004:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001008:	ed9f 3b0b 	vldr	d3, [pc, #44]	; 8001038 <KalmanFilter_Update+0x728>
 800100c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001010:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001014:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001018:	ee36 7b47 	vsub.f64	d7, d6, d7
 800101c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001026:	bf00      	nop
 8001028:	373c      	adds	r7, #60	; 0x3c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	d2f1a9fc 	.word	0xd2f1a9fc
 800103c:	3f60624d 	.word	0x3f60624d

08001040 <PIDController_initialise>:
 *  Created on: Jan 21, 2022
 *      Author: fame
 */
#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd){
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	ed87 0a02 	vstr	s0, [r7, #8]
 800104c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001050:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	609a      	str	r2, [r3, #8]
	pid->out = 0;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	ed87 0a02 	vstr	s0, [r7, #8]
 8001086:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 800108a:	ed97 7a02 	vldr	s14, [r7, #8]
 800108e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ed93 7a02 	vldr	s14, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80010e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevError = error;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return pid->out;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	ee07 3a90 	vmov	s15, r3
}
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2224      	movs	r2, #36	; 0x24
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00b ff0d 	bl	800cf6c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <MX_ADC1_Init+0xe8>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <MX_ADC1_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_ADC1_Init+0xe4>)
 800116c:	2204      	movs	r2, #4
 800116e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <MX_ADC1_Init+0xe4>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_ADC1_Init+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_ADC1_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_ADC1_Init+0xe4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_ADC1_Init+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <MX_ADC1_Init+0xe4>)
 80011b2:	f002 ff05 	bl	8003fc0 <HAL_ADC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fd6c 	bl	8001c98 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_ADC1_Init+0xe4>)
 80011cc:	f003 ff3e 	bl	800504c <HAL_ADCEx_MultiModeConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011d6:	f000 fd5f 	bl	8001c98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_ADC1_Init+0xec>)
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011de:	2306      	movs	r3, #6
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ec:	2304      	movs	r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_ADC1_Init+0xe4>)
 8001200:	f003 f8e6 	bl	80043d0 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800120a:	f000 fd45 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400023c 	.word	0x2400023c
 800121c:	40022000 	.word	0x40022000
 8001220:	2a000400 	.word	0x2a000400

08001224 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2224      	movs	r2, #36	; 0x24
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00b fe9b 	bl	800cf6c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001238:	4a30      	ldr	r2, [pc, #192]	; (80012fc <MX_ADC3_Init+0xd8>)
 800123a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001250:	2204      	movs	r2, #4
 8001252:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800125c:	2201      	movs	r2, #1
 800125e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001262:	2201      	movs	r2, #1
 8001264:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_ADC3_Init+0xd4>)
 8001296:	2200      	movs	r2, #0
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_ADC3_Init+0xd4>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_ADC3_Init+0xd4>)
 80012a4:	f002 fe8c 	bl	8003fc0 <HAL_ADC_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80012ae:	f000 fcf3 	bl	8001c98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ADC3_Init+0xdc>)
 80012b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b6:	2306      	movs	r3, #6
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_ADC3_Init+0xd4>)
 80012e2:	f003 f875 	bl	80043d0 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80012ec:	f000 fcd4 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	240002ac 	.word	0x240002ac
 80012fc:	58026000 	.word	0x58026000
 8001300:	c7520000 	.word	0xc7520000

08001304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_ADC_MspInit+0xa8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12a      	bne.n	800137c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <HAL_ADC_MspInit+0xb0>)
 8001376:	f005 fd1b 	bl	8006db0 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800137a:	e013      	b.n	80013a4 <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_ADC_MspInit+0xb4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10e      	bne.n	80013a4 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_ADC_MspInit+0xac>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40022000 	.word	0x40022000
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58020800 	.word	0x58020800
 80013b8:	58026000 	.word	0x58026000

080013bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	200b      	movs	r0, #11
 80013e6:	f003 ffee 	bl	80053c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013ea:	200b      	movs	r0, #11
 80013ec:	f004 f805 	bl	80053fa <HAL_NVIC_EnableIRQ>

}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58024400 	.word	0x58024400

080013fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a60      	ldr	r2, [pc, #384]	; (800159c <MX_GPIO_Init+0x1a0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a59      	ldr	r2, [pc, #356]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b4f      	ldr	r3, [pc, #316]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <MX_GPIO_Init+0x1a0>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b47      	ldr	r3, [pc, #284]	; (800159c <MX_GPIO_Init+0x1a0>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b44      	ldr	r3, [pc, #272]	; (800159c <MX_GPIO_Init+0x1a0>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a42      	ldr	r2, [pc, #264]	; (800159c <MX_GPIO_Init+0x1a0>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <MX_GPIO_Init+0x1a0>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <MX_GPIO_Init+0x1a0>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <MX_GPIO_Init+0x1a0>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <MX_GPIO_Init+0x1a0>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80014cc:	4834      	ldr	r0, [pc, #208]	; (80015a0 <MX_GPIO_Init+0x1a4>)
 80014ce:	f005 fe17 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 80014d8:	4832      	ldr	r0, [pc, #200]	; (80015a4 <MX_GPIO_Init+0x1a8>)
 80014da:	f005 fe11 	bl	8007100 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014de:	2200      	movs	r2, #0
 80014e0:	f644 7111 	movw	r1, #20241	; 0x4f11
 80014e4:	4830      	ldr	r0, [pc, #192]	; (80015a8 <MX_GPIO_Init+0x1ac>)
 80014e6:	f005 fe0b 	bl	8007100 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80014f0:	482e      	ldr	r0, [pc, #184]	; (80015ac <MX_GPIO_Init+0x1b0>)
 80014f2:	f005 fe05 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	21f0      	movs	r1, #240	; 0xf0
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <MX_GPIO_Init+0x1b4>)
 80014fc:	f005 fe00 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8001500:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4821      	ldr	r0, [pc, #132]	; (80015a0 <MX_GPIO_Init+0x1a4>)
 800151a:	f005 fc49 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 800151e:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8001522:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	481b      	ldr	r0, [pc, #108]	; (80015a4 <MX_GPIO_Init+0x1a8>)
 8001538:	f005 fc3a 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800153c:	f644 7311 	movw	r3, #20241	; 0x4f11
 8001540:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_GPIO_Init+0x1ac>)
 8001556:	f005 fc2b 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 800155a:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_GPIO_Init+0x1b0>)
 8001574:	f005 fc1c 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8001578:	23f0      	movs	r3, #240	; 0xf0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <MX_GPIO_Init+0x1b4>)
 8001590:	f005 fc0e 	bl	8006db0 <HAL_GPIO_Init>

}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58024400 	.word	0x58024400
 80015a0:	58021000 	.word	0x58021000
 80015a4:	58020800 	.word	0x58020800
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	58020000 	.word	0x58020000
 80015b0:	58020400 	.word	0x58020400

080015b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015ba:	f002 fa29 	bl	8003a10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015be:	f000 faa7 	bl	8001b10 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80015c2:	f000 fb1f 	bl	8001c04 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015c6:	f7ff ff19 	bl	80013fc <MX_GPIO_Init>
	MX_DMA_Init();
 80015ca:	f7ff fef7 	bl	80013bc <MX_DMA_Init>
	MX_ADC1_Init();
 80015ce:	f7ff fdb1 	bl	8001134 <MX_ADC1_Init>
	MX_ADC3_Init();
 80015d2:	f7ff fe27 	bl	8001224 <MX_ADC3_Init>
	MX_SPI3_Init();
 80015d6:	f000 fcad 	bl	8001f34 <MX_SPI3_Init>
	MX_TIM1_Init();
 80015da:	f000 feff 	bl	80023dc <MX_TIM1_Init>
	MX_TIM2_Init();
 80015de:	f000 ffab 	bl	8002538 <MX_TIM2_Init>
	MX_TIM3_Init();
 80015e2:	f001 f821 	bl	8002628 <MX_TIM3_Init>
	MX_TIM4_Init();
 80015e6:	f001 f897 	bl	8002718 <MX_TIM4_Init>
	MX_TIM12_Init();
 80015ea:	f001 f90d 	bl	8002808 <MX_TIM12_Init>
	MX_TIM13_Init();
 80015ee:	f001 f96f 	bl	80028d0 <MX_TIM13_Init>
	MX_TIM14_Init();
 80015f2:	f001 f9bb 	bl	800296c <MX_TIM14_Init>
	MX_TIM15_Init();
 80015f6:	f001 fa07 	bl	8002a08 <MX_TIM15_Init>
	MX_TIM16_Init();
 80015fa:	f001 faa9 	bl	8002b50 <MX_TIM16_Init>
	MX_TIM17_Init();
 80015fe:	f001 fb21 	bl	8002c44 <MX_TIM17_Init>
	MX_UART4_Init();
 8001602:	f001 ff31 	bl	8003468 <MX_UART4_Init>
	MX_UART5_Init();
 8001606:	f001 ff7b 	bl	8003500 <MX_UART5_Init>
	MX_USART2_UART_Init();
 800160a:	f001 ffc5 	bl	8003598 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800160e:	f002 f80f 	bl	8003630 <MX_USART3_UART_Init>
	MX_TIM24_Init();
 8001612:	f001 fbe3 	bl	8002ddc <MX_TIM24_Init>
	MX_TIM23_Init();
 8001616:	f001 fb91 	bl	8002d3c <MX_TIM23_Init>
	/* USER CODE BEGIN 2 */
//	HAL_TIM_Base_Start_IT(&htim24);
	uint32_t timestamp = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
	int32_t encoder_unwrap_value[5] = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 800162c:	2310      	movs	r3, #16
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4bcc      	ldr	r3, [pc, #816]	; (8001964 <main+0x3b0>)
 8001632:	222c      	movs	r2, #44	; 0x2c
 8001634:	49cc      	ldr	r1, [pc, #816]	; (8001968 <main+0x3b4>)
 8001636:	48cd      	ldr	r0, [pc, #820]	; (800196c <main+0x3b8>)
 8001638:	f7ff f83e 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 800163c:	2310      	movs	r3, #16
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4bc8      	ldr	r3, [pc, #800]	; (8001964 <main+0x3b0>)
 8001642:	2270      	movs	r2, #112	; 0x70
 8001644:	49c8      	ldr	r1, [pc, #800]	; (8001968 <main+0x3b4>)
 8001646:	48ca      	ldr	r0, [pc, #808]	; (8001970 <main+0x3bc>)
 8001648:	f7ff f836 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 800164c:	2310      	movs	r3, #16
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4bc4      	ldr	r3, [pc, #784]	; (8001964 <main+0x3b0>)
 8001652:	2254      	movs	r2, #84	; 0x54
 8001654:	49c4      	ldr	r1, [pc, #784]	; (8001968 <main+0x3b4>)
 8001656:	48c7      	ldr	r0, [pc, #796]	; (8001974 <main+0x3c0>)
 8001658:	f7ff f82e 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xE8, USART2_DE_GPIO_Port,
 800165c:	2310      	movs	r3, #16
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4bc0      	ldr	r3, [pc, #768]	; (8001964 <main+0x3b0>)
 8001662:	22e8      	movs	r2, #232	; 0xe8
 8001664:	49c0      	ldr	r1, [pc, #768]	; (8001968 <main+0x3b4>)
 8001666:	48c4      	ldr	r0, [pc, #784]	; (8001978 <main+0x3c4>)
 8001668:	f7ff f826 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xB4, USART2_DE_GPIO_Port,
 800166c:	2310      	movs	r3, #16
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4bbc      	ldr	r3, [pc, #752]	; (8001964 <main+0x3b0>)
 8001672:	22b4      	movs	r2, #180	; 0xb4
 8001674:	49bc      	ldr	r1, [pc, #752]	; (8001968 <main+0x3b4>)
 8001676:	48c1      	ldr	r0, [pc, #772]	; (800197c <main+0x3c8>)
 8001678:	f7ff f81e 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 800167c:	2300      	movs	r3, #0
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2308      	movs	r3, #8
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4bbe      	ldr	r3, [pc, #760]	; (8001980 <main+0x3cc>)
 8001686:	2200      	movs	r2, #0
 8001688:	49be      	ldr	r1, [pc, #760]	; (8001984 <main+0x3d0>)
 800168a:	48bf      	ldr	r0, [pc, #764]	; (8001988 <main+0x3d4>)
 800168c:	f000 fb0a 	bl	8001ca4 <stepper_initialise>
	DIR1_Pin, 0);
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8001690:	2301      	movs	r3, #1
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2310      	movs	r3, #16
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4bb9      	ldr	r3, [pc, #740]	; (8001980 <main+0x3cc>)
 800169a:	2200      	movs	r2, #0
 800169c:	49bb      	ldr	r1, [pc, #748]	; (800198c <main+0x3d8>)
 800169e:	48bc      	ldr	r0, [pc, #752]	; (8001990 <main+0x3dc>)
 80016a0:	f000 fb00 	bl	8001ca4 <stepper_initialise>
	DIR2_Pin ,1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 80016a4:	2301      	movs	r3, #1
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4bb9      	ldr	r3, [pc, #740]	; (8001994 <main+0x3e0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	49b9      	ldr	r1, [pc, #740]	; (8001998 <main+0x3e4>)
 80016b4:	48b9      	ldr	r0, [pc, #740]	; (800199c <main+0x3e8>)
 80016b6:	f000 faf5 	bl	8001ca4 <stepper_initialise>
	DIR3_Pin ,1);
	stepper_initialise(&steppers[3], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 80016ba:	2300      	movs	r3, #0
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4bb3      	ldr	r3, [pc, #716]	; (8001994 <main+0x3e0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	49b5      	ldr	r1, [pc, #724]	; (80019a0 <main+0x3ec>)
 80016ca:	48b6      	ldr	r0, [pc, #728]	; (80019a4 <main+0x3f0>)
 80016cc:	f000 faea 	bl	8001ca4 <stepper_initialise>
	DIR4_Pin ,0);
	stepper_initialise(&steppers[4], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	4bae      	ldr	r3, [pc, #696]	; (8001994 <main+0x3e0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	49b2      	ldr	r1, [pc, #712]	; (80019a8 <main+0x3f4>)
 80016e0:	48b2      	ldr	r0, [pc, #712]	; (80019ac <main+0x3f8>)
 80016e2:	f000 fadf 	bl	8001ca4 <stepper_initialise>
	DIR5_Pin ,0);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_Init(&kalman_filter[0], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 80016e6:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <main+0x3fc>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	4bb1      	ldr	r3, [pc, #708]	; (80019b4 <main+0x400>)
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	eef0 3a47 	vmov.f32	s7, s14
 80016f6:	eeb0 3a67 	vmov.f32	s6, s15
 80016fa:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80016fe:	ed9f 2aae 	vldr	s4, [pc, #696]	; 80019b8 <main+0x404>
 8001702:	eddf 1aad 	vldr	s3, [pc, #692]	; 80019b8 <main+0x404>
 8001706:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800170a:	eddf 0aab 	vldr	s1, [pc, #684]	; 80019b8 <main+0x404>
 800170e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 80019b8 <main+0x404>
 8001712:	48aa      	ldr	r0, [pc, #680]	; (80019bc <main+0x408>)
 8001714:	f7ff f8ca 	bl	80008ac <KalmanFilter_Init>
	KalmanFilter_Init(&kalman_filter[1], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 8001718:	4ba5      	ldr	r3, [pc, #660]	; (80019b0 <main+0x3fc>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	4ba5      	ldr	r3, [pc, #660]	; (80019b4 <main+0x400>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	eef0 3a47 	vmov.f32	s7, s14
 8001728:	eeb0 3a67 	vmov.f32	s6, s15
 800172c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001730:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 80019b8 <main+0x404>
 8001734:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80019b8 <main+0x404>
 8001738:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800173c:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80019b8 <main+0x404>
 8001740:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80019b8 <main+0x404>
 8001744:	489e      	ldr	r0, [pc, #632]	; (80019c0 <main+0x40c>)
 8001746:	f7ff f8b1 	bl	80008ac <KalmanFilter_Init>
	KalmanFilter_Init(&kalman_filter[2], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 800174a:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <main+0x3fc>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	4b98      	ldr	r3, [pc, #608]	; (80019b4 <main+0x400>)
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	eef0 3a47 	vmov.f32	s7, s14
 800175a:	eeb0 3a67 	vmov.f32	s6, s15
 800175e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001762:	ed9f 2a95 	vldr	s4, [pc, #596]	; 80019b8 <main+0x404>
 8001766:	eddf 1a94 	vldr	s3, [pc, #592]	; 80019b8 <main+0x404>
 800176a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800176e:	eddf 0a92 	vldr	s1, [pc, #584]	; 80019b8 <main+0x404>
 8001772:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80019b8 <main+0x404>
 8001776:	4893      	ldr	r0, [pc, #588]	; (80019c4 <main+0x410>)
 8001778:	f7ff f898 	bl	80008ac <KalmanFilter_Init>
	KalmanFilter_Init(&kalman_filter[3], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <main+0x3fc>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <main+0x400>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	eef0 3a47 	vmov.f32	s7, s14
 800178c:	eeb0 3a67 	vmov.f32	s6, s15
 8001790:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001794:	ed9f 2a88 	vldr	s4, [pc, #544]	; 80019b8 <main+0x404>
 8001798:	eddf 1a87 	vldr	s3, [pc, #540]	; 80019b8 <main+0x404>
 800179c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017a0:	eddf 0a85 	vldr	s1, [pc, #532]	; 80019b8 <main+0x404>
 80017a4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80019b8 <main+0x404>
 80017a8:	4887      	ldr	r0, [pc, #540]	; (80019c8 <main+0x414>)
 80017aa:	f7ff f87f 	bl	80008ac <KalmanFilter_Init>
	KalmanFilter_Init(&kalman_filter[4], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <main+0x3fc>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <main+0x400>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	eef0 3a47 	vmov.f32	s7, s14
 80017be:	eeb0 3a67 	vmov.f32	s6, s15
 80017c2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80017c6:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 80019b8 <main+0x404>
 80017ca:	eddf 1a7b 	vldr	s3, [pc, #492]	; 80019b8 <main+0x404>
 80017ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017d2:	eddf 0a79 	vldr	s1, [pc, #484]	; 80019b8 <main+0x404>
 80017d6:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80019b8 <main+0x404>
 80017da:	487c      	ldr	r0, [pc, #496]	; (80019cc <main+0x418>)
 80017dc:	f7ff f866 	bl	80008ac <KalmanFilter_Init>
	/*
	 * Position Pid Initialise
	 */
	PIDController_initialise(&position_pid_controller[0], 1, 0, 0);
 80017e0:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80019b8 <main+0x404>
 80017e4:	eddf 0a74 	vldr	s1, [pc, #464]	; 80019b8 <main+0x404>
 80017e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80017ec:	4878      	ldr	r0, [pc, #480]	; (80019d0 <main+0x41c>)
 80017ee:	f7ff fc27 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 2, 0, 0);
 80017f2:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80019b8 <main+0x404>
 80017f6:	eddf 0a70 	vldr	s1, [pc, #448]	; 80019b8 <main+0x404>
 80017fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80017fe:	4875      	ldr	r0, [pc, #468]	; (80019d4 <main+0x420>)
 8001800:	f7ff fc1e 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 3, 0, 0);
 8001804:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 80019b8 <main+0x404>
 8001808:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80019b8 <main+0x404>
 800180c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001810:	4871      	ldr	r0, [pc, #452]	; (80019d8 <main+0x424>)
 8001812:	f7ff fc15 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 1, 0, 0);
 8001816:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80019b8 <main+0x404>
 800181a:	eddf 0a67 	vldr	s1, [pc, #412]	; 80019b8 <main+0x404>
 800181e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001822:	486e      	ldr	r0, [pc, #440]	; (80019dc <main+0x428>)
 8001824:	f7ff fc0c 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 2, 0, 0);
 8001828:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80019b8 <main+0x404>
 800182c:	eddf 0a62 	vldr	s1, [pc, #392]	; 80019b8 <main+0x404>
 8001830:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001834:	486a      	ldr	r0, [pc, #424]	; (80019e0 <main+0x42c>)
 8001836:	f7ff fc03 	bl	8001040 <PIDController_initialise>
	/*
	 * Velocity Pid Initialise
	 */
	PIDController_initialise(&velocity_pid_controller[0], 0, 0, 0);
 800183a:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80019b8 <main+0x404>
 800183e:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80019b8 <main+0x404>
 8001842:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80019b8 <main+0x404>
 8001846:	4867      	ldr	r0, [pc, #412]	; (80019e4 <main+0x430>)
 8001848:	f7ff fbfa 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 0, 0, 0);
 800184c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 80019b8 <main+0x404>
 8001850:	eddf 0a59 	vldr	s1, [pc, #356]	; 80019b8 <main+0x404>
 8001854:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80019b8 <main+0x404>
 8001858:	4863      	ldr	r0, [pc, #396]	; (80019e8 <main+0x434>)
 800185a:	f7ff fbf1 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 0, 0, 0);
 800185e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80019b8 <main+0x404>
 8001862:	eddf 0a55 	vldr	s1, [pc, #340]	; 80019b8 <main+0x404>
 8001866:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80019b8 <main+0x404>
 800186a:	4860      	ldr	r0, [pc, #384]	; (80019ec <main+0x438>)
 800186c:	f7ff fbe8 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 0, 0, 0);
 8001870:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80019b8 <main+0x404>
 8001874:	eddf 0a50 	vldr	s1, [pc, #320]	; 80019b8 <main+0x404>
 8001878:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80019b8 <main+0x404>
 800187c:	485c      	ldr	r0, [pc, #368]	; (80019f0 <main+0x43c>)
 800187e:	f7ff fbdf 	bl	8001040 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 0, 0, 0);
 8001882:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80019b8 <main+0x404>
 8001886:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80019b8 <main+0x404>
 800188a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80019b8 <main+0x404>
 800188e:	4859      	ldr	r0, [pc, #356]	; (80019f4 <main+0x440>)
 8001890:	f7ff fbd6 	bl	8001040 <PIDController_initialise>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - timestamp >= 1) {
 8001894:	f002 f942 	bl	8003b1c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4293      	cmp	r3, r2
 800189e:	d0f9      	beq.n	8001894 <main+0x2e0>
			timestamp = HAL_GetTick();
 80018a0:	f002 f93c 	bl	8003b1c <HAL_GetTick>
 80018a4:	61f8      	str	r0, [r7, #28]
//				} else if (AngleInput < 0) {
//					AngleInput += 2 * M_PI;
//				}
//				desired_position_cal = sin(AngleInput) * desired_amplitude;
//			}
			HAL_StatusTypeDef rep = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	76fb      	strb	r3, [r7, #27]
			encoder_unwrap_value[j_num] = 0;
 80018aa:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <main+0x444>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f107 0220 	add.w	r2, r7, #32
 80018b4:	4413      	add	r3, r2
 80018b6:	2200      	movs	r2, #0
 80018b8:	f843 2c1c 	str.w	r2, [r3, #-28]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <main+0x444>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4a28      	ldr	r2, [pc, #160]	; (800196c <main+0x3b8>)
 80018cc:	4413      	add	r3, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe ff1b 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <main+0x444>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <main+0x3b8>)
 80018e4:	4413      	add	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe ff4e 	bl	8000788 <AMT21_check_value>
 80018ec:	4603      	mov	r3, r0
 80018ee:	76fb      	strb	r3, [r7, #27]
				if (rep == HAL_OK) {
 80018f0:	7efb      	ldrb	r3, [r7, #27]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1e2      	bne.n	80018bc <main+0x308>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 80018f6:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <main+0x444>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <main+0x3b8>)
 80018fe:	460b      	mov	r3, r1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	330e      	adds	r3, #14
 800190a:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 800190c:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <main+0x444>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <main+0x3b8>)
 8001916:	460b      	mov	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3310      	adds	r3, #16
 8001922:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8001924:	461a      	mov	r2, r3
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <main+0x444>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461c      	mov	r4, r3
 800192c:	4611      	mov	r1, r2
 800192e:	f7fe ff8d 	bl	800084c <AMT21_unwrap>
 8001932:	4602      	mov	r2, r0
 8001934:	00a3      	lsls	r3, r4, #2
 8001936:	f107 0120 	add.w	r1, r7, #32
 800193a:	440b      	add	r3, r1
 800193c:	f843 2c1c 	str.w	r2, [r3, #-28]
					encoders[j_num].prev_position = encoders[j_num].position;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <main+0x444>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <main+0x444>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <main+0x3b8>)
 800194e:	4603      	mov	r3, r0
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4403      	add	r3, r0
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	330e      	adds	r3, #14
 800195a:	8818      	ldrh	r0, [r3, #0]
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <main+0x3b8>)
 800195e:	460b      	mov	r3, r1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	e04b      	b.n	80019fc <main+0x448>
 8001964:	58020c00 	.word	0x58020c00
 8001968:	24000cd8 	.word	0x24000cd8
 800196c:	2400038c 	.word	0x2400038c
 8001970:	240003a0 	.word	0x240003a0
 8001974:	240003b4 	.word	0x240003b4
 8001978:	240003c8 	.word	0x240003c8
 800197c:	240003dc 	.word	0x240003dc
 8001980:	58021000 	.word	0x58021000
 8001984:	240008e8 	.word	0x240008e8
 8001988:	2400031c 	.word	0x2400031c
 800198c:	24000934 	.word	0x24000934
 8001990:	24000330 	.word	0x24000330
 8001994:	58020800 	.word	0x58020800
 8001998:	24000850 	.word	0x24000850
 800199c:	24000344 	.word	0x24000344
 80019a0:	2400076c 	.word	0x2400076c
 80019a4:	24000358 	.word	0x24000358
 80019a8:	240007b8 	.word	0x240007b8
 80019ac:	2400036c 	.word	0x2400036c
 80019b0:	24000000 	.word	0x24000000
 80019b4:	24000004 	.word	0x24000004
 80019b8:	00000000 	.word	0x00000000
 80019bc:	240004f4 	.word	0x240004f4
 80019c0:	24000514 	.word	0x24000514
 80019c4:	24000534 	.word	0x24000534
 80019c8:	24000554 	.word	0x24000554
 80019cc:	24000574 	.word	0x24000574
 80019d0:	24000594 	.word	0x24000594
 80019d4:	240005c8 	.word	0x240005c8
 80019d8:	240005fc 	.word	0x240005fc
 80019dc:	24000630 	.word	0x24000630
 80019e0:	24000664 	.word	0x24000664
 80019e4:	240003f0 	.word	0x240003f0
 80019e8:	24000424 	.word	0x24000424
 80019ec:	24000458 	.word	0x24000458
 80019f0:	2400048c 	.word	0x2400048c
 80019f4:	240004c0 	.word	0x240004c0
 80019f8:	2400022c 	.word	0x2400022c
 80019fc:	440b      	add	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3310      	adds	r3, #16
 8001a04:	4602      	mov	r2, r0
 8001a06:	801a      	strh	r2, [r3, #0]
					break;
 8001a08:	bf00      	nop
				}
			}
			joint_state[j_num] = joint_state[j_num] + encoder_unwrap_value[j_num];
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <main+0x544>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <main+0x548>)
 8001a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <main+0x544>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	f107 0120 	add.w	r1, r7, #32
 8001a20:	440b      	add	r3, r1
 8001a22:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001a26:	4934      	ldr	r1, [pc, #208]	; (8001af8 <main+0x544>)
 8001a28:	7809      	ldrb	r1, [r1, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a33      	ldr	r2, [pc, #204]	; (8001afc <main+0x548>)
 8001a2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			KalmanFilter_Update(&kalman_filter[j_num], joint_state[j_num]);
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <main+0x544>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <main+0x54c>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a2e      	ldr	r2, [pc, #184]	; (8001af8 <main+0x544>)
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <main+0x548>)
 8001a44:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001a48:	ee07 2a90 	vmov	s15, r2
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe ff5b 	bl	8000910 <KalmanFilter_Update>
//					velocity_pid_controller[j_num].out);
			/*
			 * Position Controller
			 */
//			PIDController_update(&position_pid_controller[j_num], desired_position_cal, kalman_filter[j_num].x1);
			PIDController_update(&position_pid_controller[j_num], desired_position[j_num], joint_state[j_num]);
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <main+0x544>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2334      	movs	r3, #52	; 0x34
 8001a62:	fb03 f302 	mul.w	r3, r3, r2
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <main+0x550>)
 8001a68:	441a      	add	r2, r3
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <main+0x544>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4926      	ldr	r1, [pc, #152]	; (8001b08 <main+0x554>)
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <main+0x544>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <main+0x548>)
 8001a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a84:	ee07 3a10 	vmov	s14, r3
 8001a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a8c:	eef0 0a47 	vmov.f32	s1, s14
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7ff faf0 	bl	800107a <PIDController_update>
			stepper_set_speed(&steppers[j_num], position_pid_controller[j_num].out);
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <main+0x544>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <main+0x558>)
 8001aaa:	441a      	add	r2, r3
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <main+0x544>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <main+0x550>)
 8001ab4:	2334      	movs	r3, #52	; 0x34
 8001ab6:	fb03 f300 	mul.w	r3, r3, r0
 8001aba:	440b      	add	r3, r1
 8001abc:	3330      	adds	r3, #48	; 0x30
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f000 f9a2 	bl	8001e10 <stepper_set_speed>
			/*
			 * Cascade Control
			 */
//			cascade_out = Cascade_PIDController_update(&position_pid_controller[CURRENT_NUMBER], &velocity_pid_controller[CURRENT_NUMBER], &kalman_filter[CURRENT_NUMBER], desired_position, desired_velocity);
//			stepper_set_speed(&steppers[CURRENT_NUMBER], cascade_out);
			j_num++;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <main+0x544>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <main+0x544>)
 8001ad6:	701a      	strb	r2, [r3, #0]
//			if(j_num ==)
			if (j_num == 3){
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <main+0x544>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d102      	bne.n	8001ae6 <main+0x532>
				j_num = 4;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <main+0x544>)
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	701a      	strb	r2, [r3, #0]
			}
			if (j_num == 5){
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <main+0x544>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	f47f aed2 	bne.w	8001894 <main+0x2e0>
				j_num = 0;
 8001af0:	4b01      	ldr	r3, [pc, #4]	; (8001af8 <main+0x544>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - timestamp >= 1) {
 8001af6:	e6cd      	b.n	8001894 <main+0x2e0>
 8001af8:	2400022c 	.word	0x2400022c
 8001afc:	24000204 	.word	0x24000204
 8001b00:	240004f4 	.word	0x240004f4
 8001b04:	24000594 	.word	0x24000594
 8001b08:	24000218 	.word	0x24000218
 8001b0c:	2400031c 	.word	0x2400031c

08001b10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b09c      	sub	sp, #112	; 0x70
 8001b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	224c      	movs	r2, #76	; 0x4c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b fa24 	bl	800cf6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2220      	movs	r2, #32
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00b fa1e 	bl	800cf6c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f005 faff 	bl	8007134 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <SystemClock_Config+0xec>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	; (8001bfc <SystemClock_Config+0xec>)
 8001b40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <SystemClock_Config+0xec>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001b52:	bf00      	nop
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <SystemClock_Config+0xec>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b60:	d1f8      	bne.n	8001b54 <SystemClock_Config+0x44>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <SystemClock_Config+0xf0>)
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <SystemClock_Config+0xf0>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b80:	2302      	movs	r3, #2
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001b88:	232c      	movs	r3, #44	; 0x2c
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b90:	2303      	movs	r3, #3
 8001b92:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fafd 	bl	80071a8 <HAL_RCC_OscConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0xa8>
		Error_Handler();
 8001bb4:	f000 f870 	bl	8001c98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bb8:	233f      	movs	r3, #63	; 0x3f
 8001bba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bc8:	2340      	movs	r3, #64	; 0x40
 8001bca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2103      	movs	r1, #3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fe8e 	bl	8007900 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xde>
		Error_Handler();
 8001bea:	f000 f855 	bl	8001c98 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001bee:	f006 f83d 	bl	8007c6c <HAL_RCC_EnableCSS>
}
 8001bf2:	bf00      	nop
 8001bf4:	3770      	adds	r7, #112	; 0x70
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	58024800 	.word	0x58024800
 8001c00:	58024400 	.word	0x58024400

08001c04 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0ae      	sub	sp, #184	; 0xb8
 8001c08:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	22b4      	movs	r2, #180	; 0xb4
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00b f9ab 	bl	800cf6c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c1a:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001c20:	230f      	movs	r3, #15
 8001c22:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c30:	23c0      	movs	r3, #192	; 0xc0
 8001c32:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001c38:	f640 3386 	movw	r3, #2950	; 0xb86
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fa12 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <PeriphCommonClock_Config+0x52>
		Error_Handler();
 8001c52:	f000 f821 	bl	8001c98 <Error_Handler>
	}
}
 8001c56:	bf00      	nop
 8001c58:	37b8      	adds	r7, #184	; 0xb8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8001c68:	1d39      	adds	r1, r7, #4
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <__io_putchar+0x20>)
 8001c70:	f009 fec4 	bl	800b9fc <HAL_UART_Transmit>

	return ch;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24000b28 	.word	0x24000b28

08001c84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim24);
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ca0:	e7fe      	b.n	8001ca0 <Error_Handler+0x8>
	...

08001ca4 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8b3a      	ldrh	r2, [r7, #24]
 8001cc8:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	7f3a      	ldrb	r2, [r7, #28]
 8001cce:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6898      	ldr	r0, [r3, #8]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	899b      	ldrh	r3, [r3, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f005 fa10 	bl	8007100 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f008 fc2c 	bl	800a548 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	739a      	strb	r2, [r3, #14]
	stepper_set_speed(dev, 0);
 8001cf6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001d08 <stepper_initialise+0x64>
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f888 	bl	8001e10 <stepper_set_speed>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	00000000 	.word	0x00000000

08001d0c <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d1a:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq < MIN_FREQUENCY){
 8001d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d22:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d503      	bpl.n	8001d38 <set_pwm+0x2c>
		freq = MIN_FREQUENCY;
 8001d30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	e00a      	b.n	8001d4e <set_pwm+0x42>
	}
	else if (freq > MAX_FREQUENCY){
 8001d38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d3c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e08 <set_pwm+0xfc>
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd01      	ble.n	8001d4e <set_pwm+0x42>
		freq = MAX_FREQUENCY;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <set_pwm+0x100>)
 8001d4c:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 500000 / freq; //500000 come from 275MHz/550
 8001d4e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001e08 <set_pwm+0xfc>
 8001d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5e:	ee17 3a90 	vmov	r3, s15
 8001d62:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8001d64:	8abb      	ldrh	r3, [r7, #20]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6e:	edd7 7a00 	vldr	s15, [r7]
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7a:	ee17 3a90 	vmov	r3, s15
 8001d7e:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8001d80:	edd7 7a00 	vldr	s15, [r7]
 8001d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d88:	eef4 7a47 	vcmp.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	d101      	bne.n	8001d96 <set_pwm+0x8a>
		CCRx_value = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	8aba      	ldrh	r2, [r7, #20]
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d9e:	8aba      	ldrh	r2, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d104      	bne.n	8001db4 <set_pwm+0xa8>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	8afa      	ldrh	r2, [r7, #22]
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001db2:	e023      	b.n	8001dfc <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d104      	bne.n	8001dc4 <set_pwm+0xb8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	8afb      	ldrh	r3, [r7, #22]
 8001dc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dc2:	e01b      	b.n	8001dfc <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d104      	bne.n	8001dd4 <set_pwm+0xc8>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	8afb      	ldrh	r3, [r7, #22]
 8001dd0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001dd2:	e013      	b.n	8001dfc <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d104      	bne.n	8001de4 <set_pwm+0xd8>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	8afb      	ldrh	r3, [r7, #22]
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001de2:	e00b      	b.n	8001dfc <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d104      	bne.n	8001df4 <set_pwm+0xe8>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	8afb      	ldrh	r3, [r7, #22]
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001df2:	e003      	b.n	8001dfc <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	8afb      	ldrh	r3, [r7, #22]
 8001dfa:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	48f42400 	.word	0x48f42400
 8001e0c:	48f42400 	.word	0x48f42400

08001e10 <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	ed87 0a02 	vstr	s0, [r7, #8]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	7b9b      	ldrb	r3, [r3, #14]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d077      	beq.n	8001f26 <stepper_set_speed+0x116>
		if (freq > MIN_FREQUENCY) {
 8001e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	dd25      	ble.n	8001e94 <stepper_set_speed+0x84>
			if (dev->dir_mode == 0){
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	7c1b      	ldrb	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d108      	bne.n	8001e62 <stepper_set_speed+0x52>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6898      	ldr	r0, [r3, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	899b      	ldrh	r3, [r3, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f005 f950 	bl	8007100 <HAL_GPIO_WritePin>
 8001e60:	e00b      	b.n	8001e7a <stepper_set_speed+0x6a>
			}
			else if (dev->dir_mode == 1){
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	7c1b      	ldrb	r3, [r3, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <stepper_set_speed+0x6a>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6898      	ldr	r0, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	899b      	ldrh	r3, [r3, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	f005 f943 	bl	8007100 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001e86:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f7ff ff3d 	bl	8001d0c <set_pwm>
 8001e92:	e03e      	b.n	8001f12 <stepper_set_speed+0x102>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8001e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e98:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d529      	bpl.n	8001efa <stepper_set_speed+0xea>
			if (dev->dir_mode == 0){
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	7c1b      	ldrb	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <stepper_set_speed+0xb0>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6898      	ldr	r0, [r3, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	899b      	ldrh	r3, [r3, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f005 f921 	bl	8007100 <HAL_GPIO_WritePin>
 8001ebe:	e00b      	b.n	8001ed8 <stepper_set_speed+0xc8>
			}
			else if (dev->dir_mode == 1){
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7c1b      	ldrb	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <stepper_set_speed+0xc8>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	899b      	ldrh	r3, [r3, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f005 f914 	bl	8007100 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee4:	eef1 7a67 	vneg.f32	s15, s15
 8001ee8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f7ff ff0a 	bl	8001d0c <set_pwm>
 8001ef8:	e00b      	b.n	8001f12 <stepper_set_speed+0x102>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f06:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001f30 <stepper_set_speed+0x120>
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f7ff fefd 	bl	8001d0c <set_pwm>
		}
		dev->freq = freq;
 8001f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f1e:	793b      	ldrb	r3, [r7, #4]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	739a      	strb	r2, [r3, #14]
	}
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	42c80000 	.word	0x42c80000

08001f34 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <MX_SPI3_Init+0xa8>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f4e:	2203      	movs	r2, #3
 8001f50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_SPI3_Init+0xa4>)
 8001fc4:	f008 f8e6 	bl	800a194 <HAL_SPI_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001fce:	f7ff fe63 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000698 	.word	0x24000698
 8001fdc:	40003c00 	.word	0x40003c00

08001fe0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0b6      	sub	sp, #216	; 0xd8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	22b4      	movs	r2, #180	; 0xb4
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f00a ffb3 	bl	800cf6c <memset>
  if(spiHandle->Instance==SPI3)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <HAL_SPI_MspInit+0xc0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d142      	bne.n	8002096 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002016:	2300      	movs	r3, #0
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4618      	mov	r0, r3
 8002020:	f006 f826 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800202a:	f7ff fe35 	bl	8001c98 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 8002030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 8002040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_SPI_MspInit+0xc4>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800206a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800206e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002084:	2306      	movs	r3, #6
 8002086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_SPI_MspInit+0xc8>)
 8002092:	f004 fe8d 	bl	8006db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002096:	bf00      	nop
 8002098:	37d8      	adds	r7, #216	; 0xd8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40003c00 	.word	0x40003c00
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020800 	.word	0x58020800

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_MspInit+0x30>)
 80020b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_MspInit+0x30>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_MspInit+0x30>)
 80020c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	58024400 	.word	0x58024400

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80020e4:	f005 ffa8 	bl	8008038 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x8>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f001 fce0 	bl	8003af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA1_Stream0_IRQHandler+0x10>)
 800213e:	f003 fcd1 	bl	8005ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000ab0 	.word	0x24000ab0

0800214c <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM24_IRQHandler+0x10>)
 8002152:	f008 fb15 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000720 	.word	0x24000720

08002160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
	return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_kill>:

int _kill(int pid, int sig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800217a:	f00a febf 	bl	800cefc <__errno>
 800217e:	4603      	mov	r3, r0
 8002180:	2216      	movs	r2, #22
 8002182:	601a      	str	r2, [r3, #0]
	return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_exit>:

void _exit (int status)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe7 	bl	8002170 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021a2:	e7fe      	b.n	80021a2 <_exit+0x12>

080021a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e00a      	b.n	80021cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021b6:	f3af 8000 	nop.w
 80021ba:	4601      	mov	r1, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	60ba      	str	r2, [r7, #8]
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf0      	blt.n	80021b6 <_read+0x12>
	}

return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e009      	b.n	8002204 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fd31 	bl	8001c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf1      	blt.n	80021f0 <_write+0x12>
	}
	return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_close>:

int _close(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223e:	605a      	str	r2, [r3, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_isatty>:

int _isatty(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f00a fe24 	bl	800cefc <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	24050000 	.word	0x24050000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	24000230 	.word	0x24000230
 80022e8:	24000d80 	.word	0x24000d80

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <SystemInit+0xd0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a31      	ldr	r2, [pc, #196]	; (80023bc <SystemInit+0xd0>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <SystemInit+0xd4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	2b06      	cmp	r3, #6
 800230a:	d807      	bhi.n	800231c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <SystemInit+0xd4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 030f 	bic.w	r3, r3, #15
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <SystemInit+0xd4>)
 8002316:	f043 0307 	orr.w	r3, r3, #7
 800231a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <SystemInit+0xd8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <SystemInit+0xd8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <SystemInit+0xd8>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <SystemInit+0xd8>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4924      	ldr	r1, [pc, #144]	; (80023c4 <SystemInit+0xd8>)
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <SystemInit+0xdc>)
 8002336:	4013      	ands	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <SystemInit+0xd4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <SystemInit+0xd4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 030f 	bic.w	r3, r3, #15
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <SystemInit+0xd4>)
 8002350:	f043 0307 	orr.w	r3, r3, #7
 8002354:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <SystemInit+0xd8>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <SystemInit+0xd8>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <SystemInit+0xd8>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <SystemInit+0xd8>)
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <SystemInit+0xe0>)
 800236c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <SystemInit+0xd8>)
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <SystemInit+0xe4>)
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <SystemInit+0xd8>)
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <SystemInit+0xe8>)
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <SystemInit+0xd8>)
 800237c:	2200      	movs	r2, #0
 800237e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <SystemInit+0xd8>)
 8002382:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <SystemInit+0xe8>)
 8002384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0xd8>)
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <SystemInit+0xd8>)
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <SystemInit+0xe8>)
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <SystemInit+0xd8>)
 8002394:	2200      	movs	r2, #0
 8002396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <SystemInit+0xd8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <SystemInit+0xd8>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <SystemInit+0xd8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <SystemInit+0xec>)
 80023ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023b0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	52002000 	.word	0x52002000
 80023c4:	58024400 	.word	0x58024400
 80023c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80023cc:	02020200 	.word	0x02020200
 80023d0:	01ff0000 	.word	0x01ff0000
 80023d4:	01010280 	.word	0x01010280
 80023d8:	52004000 	.word	0x52004000

080023dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b09c      	sub	sp, #112	; 0x70
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	2234      	movs	r2, #52	; 0x34
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f00a fda8 	bl	800cf6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800241c:	4b44      	ldr	r3, [pc, #272]	; (8002530 <MX_TIM1_Init+0x154>)
 800241e:	4a45      	ldr	r2, [pc, #276]	; (8002534 <MX_TIM1_Init+0x158>)
 8002420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 550-1;
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <MX_TIM1_Init+0x154>)
 8002424:	f240 2225 	movw	r2, #549	; 0x225
 8002428:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <MX_TIM1_Init+0x154>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <MX_TIM1_Init+0x154>)
 8002432:	f242 7210 	movw	r2, #10000	; 0x2710
 8002436:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <MX_TIM1_Init+0x154>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <MX_TIM1_Init+0x154>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <MX_TIM1_Init+0x154>)
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800244a:	4839      	ldr	r0, [pc, #228]	; (8002530 <MX_TIM1_Init+0x154>)
 800244c:	f007 ffc3 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002456:	f7ff fc1f 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002464:	4619      	mov	r1, r3
 8002466:	4832      	ldr	r0, [pc, #200]	; (8002530 <MX_TIM1_Init+0x154>)
 8002468:	f008 fbbe 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002472:	f7ff fc11 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002476:	482e      	ldr	r0, [pc, #184]	; (8002530 <MX_TIM1_Init+0x154>)
 8002478:	f008 f804 	bl	800a484 <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002482:	f7ff fc09 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002496:	4619      	mov	r1, r3
 8002498:	4825      	ldr	r0, [pc, #148]	; (8002530 <MX_TIM1_Init+0x154>)
 800249a:	f009 f905 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80024a4:	f7ff fbf8 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a8:	2360      	movs	r3, #96	; 0x60
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024c8:	2200      	movs	r2, #0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4818      	ldr	r0, [pc, #96]	; (8002530 <MX_TIM1_Init+0x154>)
 80024ce:	f008 fa77 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80024d8:	f7ff fbde 	bl	8001c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4807      	ldr	r0, [pc, #28]	; (8002530 <MX_TIM1_Init+0x154>)
 8002512:	f009 f965 	bl	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800251c:	f7ff fbbc 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <MX_TIM1_Init+0x154>)
 8002522:	f000 fdf7 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002526:	bf00      	nop
 8002528:	3770      	adds	r7, #112	; 0x70
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	240008e8 	.word	0x240008e8
 8002534:	40010000 	.word	0x40010000

08002538 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <MX_TIM2_Init+0xec>)
 800256c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550 - 1;
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <MX_TIM2_Init+0xec>)
 8002574:	f240 2225 	movw	r2, #549	; 0x225
 8002578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <MX_TIM2_Init+0xec>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <MX_TIM2_Init+0xec>)
 8002582:	f242 7210 	movw	r2, #10000	; 0x2710
 8002586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <MX_TIM2_Init+0xec>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <MX_TIM2_Init+0xec>)
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002594:	4823      	ldr	r0, [pc, #140]	; (8002624 <MX_TIM2_Init+0xec>)
 8002596:	f007 ff1e 	bl	800a3d6 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80025a0:	f7ff fb7a 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ae:	4619      	mov	r1, r3
 80025b0:	481c      	ldr	r0, [pc, #112]	; (8002624 <MX_TIM2_Init+0xec>)
 80025b2:	f008 fb19 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80025bc:	f7ff fb6c 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025c0:	4818      	ldr	r0, [pc, #96]	; (8002624 <MX_TIM2_Init+0xec>)
 80025c2:	f007 ff5f 	bl	800a484 <HAL_TIM_PWM_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80025cc:	f7ff fb64 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4811      	ldr	r0, [pc, #68]	; (8002624 <MX_TIM2_Init+0xec>)
 80025e0:	f009 f862 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80025ea:	f7ff fb55 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ee:	2360      	movs	r3, #96	; 0x60
 80025f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <MX_TIM2_Init+0xec>)
 8002606:	f008 f9db 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002610:	f7ff fb42 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <MX_TIM2_Init+0xec>)
 8002616:	f000 fd7d 	bl	8003114 <HAL_TIM_MspPostInit>

}
 800261a:	bf00      	nop
 800261c:	3738      	adds	r7, #56	; 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	24000934 	.word	0x24000934

08002628 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <MX_TIM3_Init+0xe8>)
 800265c:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <MX_TIM3_Init+0xec>)
 800265e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550 - 1;
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <MX_TIM3_Init+0xe8>)
 8002662:	f240 2225 	movw	r2, #549	; 0x225
 8002666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <MX_TIM3_Init+0xe8>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <MX_TIM3_Init+0xe8>)
 8002670:	f242 7210 	movw	r2, #10000	; 0x2710
 8002674:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <MX_TIM3_Init+0xe8>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_TIM3_Init+0xe8>)
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002682:	4823      	ldr	r0, [pc, #140]	; (8002710 <MX_TIM3_Init+0xe8>)
 8002684:	f007 fea7 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800268e:	f7ff fb03 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269c:	4619      	mov	r1, r3
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <MX_TIM3_Init+0xe8>)
 80026a0:	f008 faa2 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80026aa:	f7ff faf5 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026ae:	4818      	ldr	r0, [pc, #96]	; (8002710 <MX_TIM3_Init+0xe8>)
 80026b0:	f007 fee8 	bl	800a484 <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80026ba:	f7ff faed 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <MX_TIM3_Init+0xe8>)
 80026ce:	f008 ffeb 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80026d8:	f7ff fade 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_TIM3_Init+0xe8>)
 80026f4:	f008 f964 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80026fe:	f7ff facb 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <MX_TIM3_Init+0xe8>)
 8002704:	f000 fd06 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002708:	bf00      	nop
 800270a:	3738      	adds	r7, #56	; 0x38
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	24000850 	.word	0x24000850
 8002714:	40000400 	.word	0x40000400

08002718 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08e      	sub	sp, #56	; 0x38
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002738:	463b      	mov	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <MX_TIM4_Init+0xe8>)
 800274c:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <MX_TIM4_Init+0xec>)
 800274e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 550-1;
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <MX_TIM4_Init+0xe8>)
 8002752:	f240 2225 	movw	r2, #549	; 0x225
 8002756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <MX_TIM4_Init+0xe8>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <MX_TIM4_Init+0xe8>)
 8002760:	f242 7210 	movw	r2, #10000	; 0x2710
 8002764:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <MX_TIM4_Init+0xe8>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <MX_TIM4_Init+0xe8>)
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002772:	4823      	ldr	r0, [pc, #140]	; (8002800 <MX_TIM4_Init+0xe8>)
 8002774:	f007 fe2f 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800277e:	f7ff fa8b 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278c:	4619      	mov	r1, r3
 800278e:	481c      	ldr	r0, [pc, #112]	; (8002800 <MX_TIM4_Init+0xe8>)
 8002790:	f008 fa2a 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800279a:	f7ff fa7d 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800279e:	4818      	ldr	r0, [pc, #96]	; (8002800 <MX_TIM4_Init+0xe8>)
 80027a0:	f007 fe70 	bl	800a484 <HAL_TIM_PWM_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80027aa:	f7ff fa75 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4810      	ldr	r0, [pc, #64]	; (8002800 <MX_TIM4_Init+0xe8>)
 80027be:	f008 ff73 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80027c8:	f7ff fa66 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027cc:	2360      	movs	r3, #96	; 0x60
 80027ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	4619      	mov	r1, r3
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <MX_TIM4_Init+0xe8>)
 80027e4:	f008 f8ec 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80027ee:	f7ff fa53 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <MX_TIM4_Init+0xe8>)
 80027f4:	f000 fc8e 	bl	8003114 <HAL_TIM_MspPostInit>

}
 80027f8:	bf00      	nop
 80027fa:	3738      	adds	r7, #56	; 0x38
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2400076c 	.word	0x2400076c
 8002804:	40000800 	.word	0x40000800

08002808 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <MX_TIM12_Init+0xc4>)
 8002832:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002836:	f240 2225 	movw	r2, #549	; 0x225
 800283a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <MX_TIM12_Init+0xc0>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <MX_TIM12_Init+0xc0>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002854:	481c      	ldr	r0, [pc, #112]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002856:	f007 fdbe 	bl	800a3d6 <HAL_TIM_Base_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002860:	f7ff fa1a 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	4619      	mov	r1, r3
 8002870:	4815      	ldr	r0, [pc, #84]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002872:	f008 f9b9 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800287c:	f7ff fa0c 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002882:	f007 fdff 	bl	800a484 <HAL_TIM_PWM_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800288c:	f7ff fa04 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002890:	2360      	movs	r3, #96	; 0x60
 8002892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8002894:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <MX_TIM12_Init+0xc0>)
 80028aa:	f008 f889 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80028b4:	f7ff f9f0 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <MX_TIM12_Init+0xc0>)
 80028ba:	f000 fc2b 	bl	8003114 <HAL_TIM_MspPostInit>

}
 80028be:	bf00      	nop
 80028c0:	3730      	adds	r7, #48	; 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	24000a18 	.word	0x24000a18
 80028cc:	40001800 	.word	0x40001800

080028d0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_TIM13_Init+0x94>)
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <MX_TIM13_Init+0x98>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f0:	f240 2225 	movw	r2, #549	; 0x225
 80028f4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <MX_TIM13_Init+0x94>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_TIM13_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_TIM13_Init+0x94>)
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800290e:	4815      	ldr	r0, [pc, #84]	; (8002964 <MX_TIM13_Init+0x94>)
 8002910:	f007 fd61 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800291a:	f7ff f9bd 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800291e:	4811      	ldr	r0, [pc, #68]	; (8002964 <MX_TIM13_Init+0x94>)
 8002920:	f007 fdb0 	bl	800a484 <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800292a:	f7ff f9b5 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292e:	2360      	movs	r3, #96	; 0x60
 8002930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002932:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	4619      	mov	r1, r3
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM13_Init+0x94>)
 8002948:	f008 f83a 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002952:	f7ff f9a1 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM13_Init+0x94>)
 8002958:	f000 fbdc 	bl	8003114 <HAL_TIM_MspPostInit>

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2400089c 	.word	0x2400089c
 8002968:	40001c00 	.word	0x40001c00

0800296c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <MX_TIM14_Init+0x94>)
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <MX_TIM14_Init+0x98>)
 8002988:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_TIM14_Init+0x94>)
 800298c:	f240 2225 	movw	r2, #549	; 0x225
 8002990:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_TIM14_Init+0x94>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <MX_TIM14_Init+0x94>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80029aa:	4815      	ldr	r0, [pc, #84]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029ac:	f007 fd13 	bl	800a3d6 <HAL_TIM_Base_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80029b6:	f7ff f96f 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80029ba:	4811      	ldr	r0, [pc, #68]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029bc:	f007 fd62 	bl	800a484 <HAL_TIM_PWM_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80029c6:	f7ff f967 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ca:	2360      	movs	r3, #96	; 0x60
 80029cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80029ce:	f240 13f3 	movw	r3, #499	; 0x1f3
 80029d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029e4:	f007 ffec 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80029ee:	f7ff f953 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80029f2:	4803      	ldr	r0, [pc, #12]	; (8002a00 <MX_TIM14_Init+0x94>)
 80029f4:	f000 fb8e 	bl	8003114 <HAL_TIM_MspPostInit>

}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	240009cc 	.word	0x240009cc
 8002a04:	40002000 	.word	0x40002000

08002a08 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b09c      	sub	sp, #112	; 0x70
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	615a      	str	r2, [r3, #20]
 8002a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2234      	movs	r2, #52	; 0x34
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00a fa92 	bl	800cf6c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <MX_TIM15_Init+0x144>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a50:	f240 2225 	movw	r2, #549	; 0x225
 8002a54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a70:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002a76:	4834      	ldr	r0, [pc, #208]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a78:	f007 fcad 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002a82:	f7ff f909 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002a8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a90:	4619      	mov	r1, r3
 8002a92:	482d      	ldr	r0, [pc, #180]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002a94:	f008 f8a8 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8002a9e:	f7ff f8fb 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002aa2:	4829      	ldr	r0, [pc, #164]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002aa4:	f007 fcee 	bl	800a484 <HAL_TIM_PWM_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8002aae:	f7ff f8f3 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002aba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4821      	ldr	r0, [pc, #132]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002ac2:	f008 fdf1 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8002acc:	f7ff f8e4 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad0:	2360      	movs	r3, #96	; 0x60
 8002ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4814      	ldr	r0, [pc, #80]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002af6:	f007 ff63 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002b00:	f7ff f8ca 	bl	8001c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4807      	ldr	r0, [pc, #28]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002b2c:	f008 fe58 	bl	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002b36:	f7ff f8af 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002b3a:	4803      	ldr	r0, [pc, #12]	; (8002b48 <MX_TIM15_Init+0x140>)
 8002b3c:	f000 faea 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002b40:	bf00      	nop
 8002b42:	3770      	adds	r7, #112	; 0x70
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	240007b8 	.word	0x240007b8
 8002b4c:	40014000 	.word	0x40014000

08002b50 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b094      	sub	sp, #80	; 0x50
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2234      	movs	r2, #52	; 0x34
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00a f9fb 	bl	800cf6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b76:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <MX_TIM16_Init+0xf0>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b7e:	f240 2225 	movw	r2, #549	; 0x225
 8002b82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b96:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ba2:	4826      	ldr	r0, [pc, #152]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002ba4:	f007 fc17 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002bae:	f7ff f873 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002bb2:	4822      	ldr	r0, [pc, #136]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002bb4:	f007 fc66 	bl	800a484 <HAL_TIM_PWM_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002bbe:	f7ff f86b 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc2:	2360      	movs	r3, #96	; 0x60
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002bc6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002be4:	2200      	movs	r2, #0
 8002be6:	4619      	mov	r1, r3
 8002be8:	4814      	ldr	r0, [pc, #80]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002bea:	f007 fee9 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002bf4:	f7ff f850 	bl	8001c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4807      	ldr	r0, [pc, #28]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002c20:	f008 fdde 	bl	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002c2a:	f7ff f835 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002c2e:	4803      	ldr	r0, [pc, #12]	; (8002c3c <MX_TIM16_Init+0xec>)
 8002c30:	f000 fa70 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002c34:	bf00      	nop
 8002c36:	3750      	adds	r7, #80	; 0x50
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	24000a64 	.word	0x24000a64
 8002c40:	40014400 	.word	0x40014400

08002c44 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	; 0x50
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c5e:	463b      	mov	r3, r7
 8002c60:	2234      	movs	r2, #52	; 0x34
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00a f981 	bl	800cf6c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <MX_TIM17_Init+0xf4>)
 8002c6e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c72:	f240 2225 	movw	r2, #549	; 0x225
 8002c76:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c84:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c98:	4826      	ldr	r0, [pc, #152]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002c9a:	f007 fb9c 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002ca4:	f7fe fff8 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002ca8:	4822      	ldr	r0, [pc, #136]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002caa:	f007 fbeb 	bl	800a484 <HAL_TIM_PWM_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002cb4:	f7fe fff0 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb8:	2360      	movs	r3, #96	; 0x60
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002cbc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4815      	ldr	r0, [pc, #84]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002ce0:	f007 fe6e 	bl	800a9c0 <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8002cea:	f7fe ffd5 	bl	8001c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002d10:	463b      	mov	r3, r7
 8002d12:	4619      	mov	r1, r3
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002d16:	f008 fd63 	bl	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002d20:	f7fe ffba 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <MX_TIM17_Init+0xf0>)
 8002d26:	f000 f9f5 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002d2a:	bf00      	nop
 8002d2c:	3750      	adds	r7, #80	; 0x50
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	24000804 	.word	0x24000804
 8002d38:	40014800 	.word	0x40014800

08002d3c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <MX_TIM23_Init+0x9c>)
 8002d5e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d62:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002d66:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002d82:	4814      	ldr	r0, [pc, #80]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002d84:	f007 fb27 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8002d8e:	f7fe ff83 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002da0:	f007 ff22 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8002daa:	f7fe ff75 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <MX_TIM23_Init+0x98>)
 8002dbc:	f008 fc74 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002dc6:	f7fe ff67 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	24000980 	.word	0x24000980
 8002dd8:	4000e000 	.word	0x4000e000

08002ddc <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <MX_TIM24_Init+0x9c>)
 8002dfe:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e02:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002e06:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e10:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e14:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002e22:	4814      	ldr	r0, [pc, #80]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e24:	f007 fad7 	bl	800a3d6 <HAL_TIM_Base_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002e2e:	f7fe ff33 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	480d      	ldr	r0, [pc, #52]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e40:	f007 fed2 	bl	800abe8 <HAL_TIM_ConfigClockSource>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002e4a:	f7fe ff25 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4806      	ldr	r0, [pc, #24]	; (8002e74 <MX_TIM24_Init+0x98>)
 8002e5c:	f008 fc24 	bl	800b6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002e66:	f7fe ff17 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	24000720 	.word	0x24000720
 8002e78:	4000e400 	.word	0x4000e400

08002e7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b094      	sub	sp, #80	; 0x50
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a91      	ldr	r2, [pc, #580]	; (80030e0 <HAL_TIM_Base_MspInit+0x264>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10f      	bne.n	8002ebe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e9e:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea4:	4a8f      	ldr	r2, [pc, #572]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002ebc:	e10c      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ec8:	4b86      	ldr	r3, [pc, #536]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ece:	4a85      	ldr	r2, [pc, #532]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ed8:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ee6:	e0f7      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_TIM_Base_MspInit+0x26c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10f      	bne.n	8002f12 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef8:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f02:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f10:	e0e2      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM4)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_TIM_Base_MspInit+0x270>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10f      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1c:	4b71      	ldr	r3, [pc, #452]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f22:	4a70      	ldr	r2, [pc, #448]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f2c:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f3a:	e0cd      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM12)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_TIM_Base_MspInit+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10f      	bne.n	8002f66 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4c:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f64:	e0b8      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM13)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a62      	ldr	r2, [pc, #392]	; (80030f4 <HAL_TIM_Base_MspInit+0x278>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10f      	bne.n	8002f90 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f70:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f76:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f8e:	e0a3      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM14)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_TIM_Base_MspInit+0x27c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10f      	bne.n	8002fba <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f9a:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa0:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002faa:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb8:	e08e      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM15)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4f      	ldr	r2, [pc, #316]	; (80030fc <HAL_TIM_Base_MspInit+0x280>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12e      	bne.n	8003022 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002fc4:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fca:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe8:	4a3e      	ldr	r2, [pc, #248]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003000:	2308      	movs	r3, #8
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003010:	2304      	movs	r3, #4
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003018:	4619      	mov	r1, r3
 800301a:	4839      	ldr	r0, [pc, #228]	; (8003100 <HAL_TIM_Base_MspInit+0x284>)
 800301c:	f003 fec8 	bl	8006db0 <HAL_GPIO_Init>
}
 8003020:	e05a      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM16)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_TIM_Base_MspInit+0x288>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10f      	bne.n	800304c <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 800303e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
}
 800304a:	e045      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM17)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2d      	ldr	r2, [pc, #180]	; (8003108 <HAL_TIM_Base_MspInit+0x28c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10f      	bne.n	8003076 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800305c:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 800305e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003062:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800306c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]
}
 8003074:	e030      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM23)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_TIM_Base_MspInit+0x290>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10f      	bne.n	80030a0 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003082:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 8003092:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	e01b      	b.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM24)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_TIM_Base_MspInit+0x294>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d116      	bne.n	80030d8 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 80030ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 80030b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_TIM_Base_MspInit+0x268>)
 80030bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	20a2      	movs	r0, #162	; 0xa2
 80030ce:	f002 f97a 	bl	80053c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80030d2:	20a2      	movs	r0, #162	; 0xa2
 80030d4:	f002 f991 	bl	80053fa <HAL_NVIC_EnableIRQ>
}
 80030d8:	bf00      	nop
 80030da:	3750      	adds	r7, #80	; 0x50
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010000 	.word	0x40010000
 80030e4:	58024400 	.word	0x58024400
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40001800 	.word	0x40001800
 80030f4:	40001c00 	.word	0x40001c00
 80030f8:	40002000 	.word	0x40002000
 80030fc:	40014000 	.word	0x40014000
 8003100:	58020000 	.word	0x58020000
 8003104:	40014400 	.word	0x40014400
 8003108:	40014800 	.word	0x40014800
 800310c:	4000e000 	.word	0x4000e000
 8003110:	4000e400 	.word	0x4000e400

08003114 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b092      	sub	sp, #72	; 0x48
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4aa7      	ldr	r2, [pc, #668]	; (80033d0 <HAL_TIM_MspPostInit+0x2bc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d120      	bne.n	8003178 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003136:	4ba7      	ldr	r3, [pc, #668]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313c:	4aa5      	ldr	r2, [pc, #660]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800313e:	f043 0310 	orr.w	r3, r3, #16
 8003142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003146:	4ba3      	ldr	r3, [pc, #652]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003166:	2301      	movs	r3, #1
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800316a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800316e:	4619      	mov	r1, r3
 8003170:	4899      	ldr	r0, [pc, #612]	; (80033d8 <HAL_TIM_MspPostInit+0x2c4>)
 8003172:	f003 fe1d 	bl	8006db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003176:	e16c      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d11f      	bne.n	80031c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003188:	4a92      	ldr	r2, [pc, #584]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003192:	4b90      	ldr	r3, [pc, #576]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031a0:	2301      	movs	r3, #1
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ac:	2300      	movs	r3, #0
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031b0:	2301      	movs	r3, #1
 80031b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b8:	4619      	mov	r1, r3
 80031ba:	4888      	ldr	r0, [pc, #544]	; (80033dc <HAL_TIM_MspPostInit+0x2c8>)
 80031bc:	f003 fdf8 	bl	8006db0 <HAL_GPIO_Init>
}
 80031c0:	e147      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a86      	ldr	r2, [pc, #536]	; (80033e0 <HAL_TIM_MspPostInit+0x2cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d11f      	bne.n	800320c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80031ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031dc:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031ea:	2340      	movs	r3, #64	; 0x40
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031fa:	2302      	movs	r3, #2
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003202:	4619      	mov	r1, r3
 8003204:	4877      	ldr	r0, [pc, #476]	; (80033e4 <HAL_TIM_MspPostInit+0x2d0>)
 8003206:	f003 fdd3 	bl	8006db0 <HAL_GPIO_Init>
}
 800320a:	e122      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM4)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_TIM_MspPostInit+0x2d4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d120      	bne.n	8003258 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003216:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321c:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003226:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003246:	2302      	movs	r3, #2
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800324a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800324e:	4619      	mov	r1, r3
 8003250:	4866      	ldr	r0, [pc, #408]	; (80033ec <HAL_TIM_MspPostInit+0x2d8>)
 8003252:	f003 fdad 	bl	8006db0 <HAL_GPIO_Init>
}
 8003256:	e0fc      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM12)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <HAL_TIM_MspPostInit+0x2dc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d120      	bne.n	80032a4 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003268:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003292:	2302      	movs	r3, #2
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800329a:	4619      	mov	r1, r3
 800329c:	4855      	ldr	r0, [pc, #340]	; (80033f4 <HAL_TIM_MspPostInit+0x2e0>)
 800329e:	f003 fd87 	bl	8006db0 <HAL_GPIO_Init>
}
 80032a2:	e0d6      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM13)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a53      	ldr	r2, [pc, #332]	; (80033f8 <HAL_TIM_MspPostInit+0x2e4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11f      	bne.n	80032ee <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b4:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032be:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032cc:	2340      	movs	r3, #64	; 0x40
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80032dc:	2309      	movs	r3, #9
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032e4:	4619      	mov	r1, r3
 80032e6:	483d      	ldr	r0, [pc, #244]	; (80033dc <HAL_TIM_MspPostInit+0x2c8>)
 80032e8:	f003 fd62 	bl	8006db0 <HAL_GPIO_Init>
}
 80032ec:	e0b1      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM14)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a42      	ldr	r2, [pc, #264]	; (80033fc <HAL_TIM_MspPostInit+0x2e8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d11f      	bne.n	8003338 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 80032fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	2300      	movs	r3, #0
 8003324:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003326:	2309      	movs	r3, #9
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800332e:	4619      	mov	r1, r3
 8003330:	482a      	ldr	r0, [pc, #168]	; (80033dc <HAL_TIM_MspPostInit+0x2c8>)
 8003332:	f003 fd3d 	bl	8006db0 <HAL_GPIO_Init>
}
 8003336:	e08c      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM15)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a30      	ldr	r2, [pc, #192]	; (8003400 <HAL_TIM_MspPostInit+0x2ec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d11f      	bne.n	8003382 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003348:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003360:	2320      	movs	r3, #32
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003370:	2304      	movs	r3, #4
 8003372:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003378:	4619      	mov	r1, r3
 800337a:	4817      	ldr	r0, [pc, #92]	; (80033d8 <HAL_TIM_MspPostInit+0x2c4>)
 800337c:	f003 fd18 	bl	8006db0 <HAL_GPIO_Init>
}
 8003380:	e067      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM16)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_TIM_MspPostInit+0x2f0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d13d      	bne.n	8003408 <HAL_TIM_MspPostInit+0x2f4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800338e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_MspPostInit+0x2c0>)
 800339e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80033bc:	2301      	movs	r3, #1
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033c4:	4619      	mov	r1, r3
 80033c6:	480b      	ldr	r0, [pc, #44]	; (80033f4 <HAL_TIM_MspPostInit+0x2e0>)
 80033c8:	f003 fcf2 	bl	8006db0 <HAL_GPIO_Init>
}
 80033cc:	e041      	b.n	8003452 <HAL_TIM_MspPostInit+0x33e>
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58021000 	.word	0x58021000
 80033dc:	58020000 	.word	0x58020000
 80033e0:	40000400 	.word	0x40000400
 80033e4:	58020800 	.word	0x58020800
 80033e8:	40000800 	.word	0x40000800
 80033ec:	58020c00 	.word	0x58020c00
 80033f0:	40001800 	.word	0x40001800
 80033f4:	58020400 	.word	0x58020400
 80033f8:	40001c00 	.word	0x40001c00
 80033fc:	40002000 	.word	0x40002000
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
  else if(timHandle->Instance==TIM17)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_TIM_MspPostInit+0x348>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d11f      	bne.n	8003452 <HAL_TIM_MspPostInit+0x33e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_TIM_MspPostInit+0x34c>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_TIM_MspPostInit+0x34c>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_TIM_MspPostInit+0x34c>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003442:	2301      	movs	r3, #1
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <HAL_TIM_MspPostInit+0x350>)
 800344e:	f003 fcaf 	bl	8006db0 <HAL_GPIO_Init>
}
 8003452:	bf00      	nop
 8003454:	3748      	adds	r7, #72	; 0x48
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40014800 	.word	0x40014800
 8003460:	58024400 	.word	0x58024400
 8003464:	58020400 	.word	0x58020400

08003468 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <MX_UART4_Init+0x90>)
 800346e:	4a23      	ldr	r2, [pc, #140]	; (80034fc <MX_UART4_Init+0x94>)
 8003470:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <MX_UART4_Init+0x90>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <MX_UART4_Init+0x90>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <MX_UART4_Init+0x90>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <MX_UART4_Init+0x90>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <MX_UART4_Init+0x90>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <MX_UART4_Init+0x90>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <MX_UART4_Init+0x90>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800349e:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <MX_UART4_Init+0x90>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <MX_UART4_Init+0x90>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <MX_UART4_Init+0x90>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80034b0:	4811      	ldr	r0, [pc, #68]	; (80034f8 <MX_UART4_Init+0x90>)
 80034b2:	f008 fa53 	bl	800b95c <HAL_UART_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80034bc:	f7fe fbec 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034c0:	2100      	movs	r1, #0
 80034c2:	480d      	ldr	r0, [pc, #52]	; (80034f8 <MX_UART4_Init+0x90>)
 80034c4:	f009 fc50 	bl	800cd68 <HAL_UARTEx_SetTxFifoThreshold>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80034ce:	f7fe fbe3 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034d2:	2100      	movs	r1, #0
 80034d4:	4808      	ldr	r0, [pc, #32]	; (80034f8 <MX_UART4_Init+0x90>)
 80034d6:	f009 fc85 	bl	800cde4 <HAL_UARTEx_SetRxFifoThreshold>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80034e0:	f7fe fbda 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <MX_UART4_Init+0x90>)
 80034e6:	f009 fc06 	bl	800ccf6 <HAL_UARTEx_DisableFifoMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80034f0:	f7fe fbd2 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	24000c48 	.word	0x24000c48
 80034fc:	40004c00 	.word	0x40004c00

08003500 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <MX_UART5_Init+0x90>)
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <MX_UART5_Init+0x94>)
 8003508:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800350a:	4b21      	ldr	r3, [pc, #132]	; (8003590 <MX_UART5_Init+0x90>)
 800350c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003510:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <MX_UART5_Init+0x90>)
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <MX_UART5_Init+0x90>)
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <MX_UART5_Init+0x90>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <MX_UART5_Init+0x90>)
 8003526:	220c      	movs	r2, #12
 8003528:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <MX_UART5_Init+0x90>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_UART5_Init+0x90>)
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <MX_UART5_Init+0x90>)
 8003538:	2200      	movs	r2, #0
 800353a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_UART5_Init+0x90>)
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <MX_UART5_Init+0x90>)
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003548:	4811      	ldr	r0, [pc, #68]	; (8003590 <MX_UART5_Init+0x90>)
 800354a:	f008 fa07 	bl	800b95c <HAL_UART_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003554:	f7fe fba0 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003558:	2100      	movs	r1, #0
 800355a:	480d      	ldr	r0, [pc, #52]	; (8003590 <MX_UART5_Init+0x90>)
 800355c:	f009 fc04 	bl	800cd68 <HAL_UARTEx_SetTxFifoThreshold>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003566:	f7fe fb97 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800356a:	2100      	movs	r1, #0
 800356c:	4808      	ldr	r0, [pc, #32]	; (8003590 <MX_UART5_Init+0x90>)
 800356e:	f009 fc39 	bl	800cde4 <HAL_UARTEx_SetRxFifoThreshold>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003578:	f7fe fb8e 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <MX_UART5_Init+0x90>)
 800357e:	f009 fbba 	bl	800ccf6 <HAL_UARTEx_DisableFifoMode>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003588:	f7fe fb86 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	24000bb8 	.word	0x24000bb8
 8003594:	40005000 	.word	0x40005000

08003598 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800359c:	4b22      	ldr	r3, [pc, #136]	; (8003628 <MX_USART2_UART_Init+0x90>)
 800359e:	4a23      	ldr	r2, [pc, #140]	; (800362c <MX_USART2_UART_Init+0x94>)
 80035a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035be:	220c      	movs	r2, #12
 80035c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035dc:	2200      	movs	r2, #0
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035e0:	4811      	ldr	r0, [pc, #68]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035e2:	f008 f9bb 	bl	800b95c <HAL_UART_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80035ec:	f7fe fb54 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035f0:	2100      	movs	r1, #0
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <MX_USART2_UART_Init+0x90>)
 80035f4:	f009 fbb8 	bl	800cd68 <HAL_UARTEx_SetTxFifoThreshold>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035fe:	f7fe fb4b 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003602:	2100      	movs	r1, #0
 8003604:	4808      	ldr	r0, [pc, #32]	; (8003628 <MX_USART2_UART_Init+0x90>)
 8003606:	f009 fbed 	bl	800cde4 <HAL_UARTEx_SetRxFifoThreshold>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003610:	f7fe fb42 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003614:	4804      	ldr	r0, [pc, #16]	; (8003628 <MX_USART2_UART_Init+0x90>)
 8003616:	f009 fb6e 	bl	800ccf6 <HAL_UARTEx_DisableFifoMode>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003620:	f7fe fb3a 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	24000cd8 	.word	0x24000cd8
 800362c:	40004400 	.word	0x40004400

08003630 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003636:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <MX_USART3_UART_Init+0x94>)
 8003638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800363c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003656:	220c      	movs	r2, #12
 8003658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 8003674:	2200      	movs	r2, #0
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003678:	4811      	ldr	r0, [pc, #68]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800367a:	f008 f96f 	bl	800b95c <HAL_UART_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003684:	f7fe fb08 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003688:	2100      	movs	r1, #0
 800368a:	480d      	ldr	r0, [pc, #52]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800368c:	f009 fb6c 	bl	800cd68 <HAL_UARTEx_SetTxFifoThreshold>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003696:	f7fe faff 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800369a:	2100      	movs	r1, #0
 800369c:	4808      	ldr	r0, [pc, #32]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 800369e:	f009 fba1 	bl	800cde4 <HAL_UARTEx_SetRxFifoThreshold>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80036a8:	f7fe faf6 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80036ac:	4804      	ldr	r0, [pc, #16]	; (80036c0 <MX_USART3_UART_Init+0x90>)
 80036ae:	f009 fb22 	bl	800ccf6 <HAL_UARTEx_DisableFifoMode>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80036b8:	f7fe faee 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	24000b28 	.word	0x24000b28
 80036c4:	40004800 	.word	0x40004800

080036c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b0bc      	sub	sp, #240	; 0xf0
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e4:	22b4      	movs	r2, #180	; 0xb4
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f009 fc3f 	bl	800cf6c <memset>
  if(uartHandle->Instance==UART4)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4aa8      	ldr	r2, [pc, #672]	; (8003994 <HAL_UART_MspInit+0x2cc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d143      	bne.n	8003780 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036f8:	2302      	movs	r3, #2
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fcb2 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003712:	f7fe fac1 	bl	8001c98 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003716:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371c:	4a9e      	ldr	r2, [pc, #632]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800371e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003722:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003726:	4b9c      	ldr	r3, [pc, #624]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800372c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003734:	4b98      	ldr	r3, [pc, #608]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373a:	4a97      	ldr	r2, [pc, #604]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003744:	4b94      	ldr	r3, [pc, #592]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003752:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800376c:	2306      	movs	r3, #6
 800376e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003772:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003776:	4619      	mov	r1, r3
 8003778:	4888      	ldr	r0, [pc, #544]	; (800399c <HAL_UART_MspInit+0x2d4>)
 800377a:	f003 fb19 	bl	8006db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800377e:	e105      	b.n	800398c <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==UART5)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a86      	ldr	r2, [pc, #536]	; (80039a0 <HAL_UART_MspInit+0x2d8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d143      	bne.n	8003812 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800378a:	2302      	movs	r3, #2
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fc69 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80037a4:	f7fe fa78 	bl	8001c98 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80037a8:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ae:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037b8:	4b77      	ldr	r3, [pc, #476]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b74      	ldr	r3, [pc, #464]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037cc:	4a72      	ldr	r2, [pc, #456]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 80037d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80037e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80037fe:	230e      	movs	r3, #14
 8003800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003808:	4619      	mov	r1, r3
 800380a:	4866      	ldr	r0, [pc, #408]	; (80039a4 <HAL_UART_MspInit+0x2dc>)
 800380c:	f003 fad0 	bl	8006db0 <HAL_GPIO_Init>
}
 8003810:	e0bc      	b.n	800398c <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <HAL_UART_MspInit+0x2e0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d16f      	bne.n	80038fc <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800381c:	2302      	movs	r3, #2
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fc20 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8003836:	f7fe fa2f 	bl	8001c98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800383a:	4b57      	ldr	r3, [pc, #348]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800383c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003840:	4a55      	ldr	r2, [pc, #340]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384a:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003858:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003876:	2360      	movs	r3, #96	; 0x60
 8003878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800388e:	2307      	movs	r3, #7
 8003890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003894:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003898:	4619      	mov	r1, r3
 800389a:	4844      	ldr	r0, [pc, #272]	; (80039ac <HAL_UART_MspInit+0x2e4>)
 800389c:	f003 fa88 	bl	8006db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038a2:	4a44      	ldr	r2, [pc, #272]	; (80039b4 <HAL_UART_MspInit+0x2ec>)
 80038a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80038a6:	4b42      	ldr	r3, [pc, #264]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038a8:	222b      	movs	r2, #43	; 0x2b
 80038aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038b8:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038be:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c6:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d8:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038de:	4834      	ldr	r0, [pc, #208]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038e0:	f001 fda6 	bl	8005430 <HAL_DMA_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_UART_MspInit+0x226>
      Error_Handler();
 80038ea:	f7fe f9d5 	bl	8001c98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80038f4:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <HAL_UART_MspInit+0x2e8>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80038fa:	e047      	b.n	800398c <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	; (80039b8 <HAL_UART_MspInit+0x2f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d142      	bne.n	800398c <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003906:	2302      	movs	r3, #2
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003914:	4618      	mov	r0, r3
 8003916:	f004 fbab 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003920:	f7fe f9ba 	bl	8001c98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_UART_MspInit+0x2d0>)
 8003954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800397a:	2307      	movs	r3, #7
 800397c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003984:	4619      	mov	r1, r3
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_UART_MspInit+0x2dc>)
 8003988:	f003 fa12 	bl	8006db0 <HAL_GPIO_Init>
}
 800398c:	bf00      	nop
 800398e:	37f0      	adds	r7, #240	; 0xf0
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40004c00 	.word	0x40004c00
 8003998:	58024400 	.word	0x58024400
 800399c:	58020000 	.word	0x58020000
 80039a0:	40005000 	.word	0x40005000
 80039a4:	58020400 	.word	0x58020400
 80039a8:	40004400 	.word	0x40004400
 80039ac:	58020c00 	.word	0x58020c00
 80039b0:	24000ab0 	.word	0x24000ab0
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40004800 	.word	0x40004800

080039bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039c0:	f7fe fc94 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039cc:	e002      	b.n	80039d4 <LoopCopyDataInit>

080039ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039d2:	3304      	adds	r3, #4

080039d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d8:	d3f9      	bcc.n	80039ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039dc:	4c0a      	ldr	r4, [pc, #40]	; (8003a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e0:	e001      	b.n	80039e6 <LoopFillZerobss>

080039e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e4:	3204      	adds	r2, #4

080039e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e8:	d3fb      	bcc.n	80039e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ea:	f009 fa8d 	bl	800cf08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ee:	f7fd fde1 	bl	80015b4 <main>
  bx  lr
 80039f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039fc:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003a00:	0800fc34 	.word	0x0800fc34
  ldr r2, =_sbss
 8003a04:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003a08:	24000d7c 	.word	0x24000d7c

08003a0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a0c:	e7fe      	b.n	8003a0c <ADC3_IRQHandler>
	...

08003a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a16:	2003      	movs	r0, #3
 8003a18:	f001 fcca 	bl	80053b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a1c:	f004 f936 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_Init+0x68>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	4913      	ldr	r1, [pc, #76]	; (8003a7c <HAL_Init+0x6c>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_Init+0x68>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_Init+0x6c>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <HAL_Init+0x70>)
 8003a52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_Init+0x74>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f000 f814 	bl	8003a88 <HAL_InitTick>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e002      	b.n	8003a70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a6a:	f7fe fb1f 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	0800f800 	.word	0x0800f800
 8003a80:	2400000c 	.word	0x2400000c
 8003a84:	24000008 	.word	0x24000008

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <HAL_InitTick+0x60>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e021      	b.n	8003ae0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_InitTick+0x64>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_InitTick+0x60>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fcaf 	bl	8005416 <HAL_SYSTICK_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00e      	b.n	8003ae0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d80a      	bhi.n	8003ade <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f001 fc79 	bl	80053c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <HAL_InitTick+0x68>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	24000014 	.word	0x24000014
 8003aec:	24000008 	.word	0x24000008
 8003af0:	24000010 	.word	0x24000010

08003af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x20>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_IncTick+0x24>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_IncTick+0x24>)
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	24000014 	.word	0x24000014
 8003b18:	24000d68 	.word	0x24000d68

08003b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_GetTick+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	24000d68 	.word	0x24000d68

08003b34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3360      	adds	r3, #96	; 0x60
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <LL_ADC_SetOffset+0x60>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10b      	bne.n	8003bd8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bd6:	e00b      	b.n	8003bf0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	58026000 	.word	0x58026000

08003c00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3360      	adds	r3, #96	; 0x60
 8003c0e:	461a      	mov	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	611a      	str	r2, [r3, #16]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3360      	adds	r3, #96	; 0x60
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	601a      	str	r2, [r3, #0]
  }
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	58026000 	.word	0x58026000

08003ca4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10e      	bne.n	8003cd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3360      	adds	r3, #96	; 0x60
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58026000 	.word	0x58026000

08003ce8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <LL_ADC_SetOffsetSign+0x40>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10e      	bne.n	8003d1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3360      	adds	r3, #96	; 0x60
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	58026000 	.word	0x58026000

08003d2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3360      	adds	r3, #96	; 0x60
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <LL_ADC_SetOffsetState+0x50>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d5e:	e007      	b.n	8003d70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	58026000 	.word	0x58026000

08003d80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3330      	adds	r3, #48	; 0x30
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	4413      	add	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	211f      	movs	r1, #31
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	f003 011f 	and.w	r1, r3, #31
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3314      	adds	r3, #20
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	0d1b      	lsrs	r3, r3, #20
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2107      	movs	r1, #7
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0d1b      	lsrs	r3, r3, #20
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d115      	bne.n	8003e70 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e50:	43db      	mvns	r3, r3
 8003e52:	401a      	ands	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0318 	and.w	r3, r3, #24
 8003e5a:	4914      	ldr	r1, [pc, #80]	; (8003eac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e5c:	40d9      	lsrs	r1, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	400b      	ands	r3, r1
 8003e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003e6e:	e014      	b.n	8003e9a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0318 	and.w	r3, r3, #24
 8003e86:	4909      	ldr	r1, [pc, #36]	; (8003eac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e88:	40d9      	lsrs	r1, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	58026000 	.word	0x58026000
 8003eac:	000fffff 	.word	0x000fffff

08003eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6093      	str	r3, [r2, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	5fffffc0 	.word	0x5fffffc0

08003ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	6fffffc0 	.word	0x6fffffc0

08003f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f38:	d101      	bne.n	8003f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <LL_ADC_IsEnabled+0x18>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <LL_ADC_IsEnabled+0x1a>
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d101      	bne.n	8003fb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1ee      	b.n	80043b8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fd f98b 	bl	8001304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff67 	bl	8003ed4 <LL_ADC_IsDeepPowerDownEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff4d 	bl	8003eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff82 	bl	8003f24 <LL_ADC_IsInternalRegulatorEnabled>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d114      	bne.n	8004050 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff66 	bl	8003efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004030:	4b8e      	ldr	r3, [pc, #568]	; (800426c <HAL_ADC_Init+0x2ac>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	4a8e      	ldr	r2, [pc, #568]	; (8004270 <HAL_ADC_Init+0x2b0>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	3301      	adds	r3, #1
 8004040:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004042:	e002      	b.n	800404a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3b01      	subs	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f9      	bne.n	8004044 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff65 	bl	8003f24 <LL_ADC_IsInternalRegulatorEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	f043 0210 	orr.w	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff76 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004086:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8188 	bne.w	80043a6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8184 	bne.w	80043a6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff4a 	bl	8003f4c <LL_ADC_IsEnabled>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d136      	bne.n	800412c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <HAL_ADC_Init+0x2b4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_ADC_Init+0x112>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6a      	ldr	r2, [pc, #424]	; (8004278 <HAL_ADC_Init+0x2b8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10e      	bne.n	80040f0 <HAL_ADC_Init+0x130>
 80040d2:	4868      	ldr	r0, [pc, #416]	; (8004274 <HAL_ADC_Init+0x2b4>)
 80040d4:	f7ff ff3a 	bl	8003f4c <LL_ADC_IsEnabled>
 80040d8:	4604      	mov	r4, r0
 80040da:	4867      	ldr	r0, [pc, #412]	; (8004278 <HAL_ADC_Init+0x2b8>)
 80040dc:	f7ff ff36 	bl	8003f4c <LL_ADC_IsEnabled>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4323      	orrs	r3, r4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e008      	b.n	8004102 <HAL_ADC_Init+0x142>
 80040f0:	4862      	ldr	r0, [pc, #392]	; (800427c <HAL_ADC_Init+0x2bc>)
 80040f2:	f7ff ff2b 	bl	8003f4c <LL_ADC_IsEnabled>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a5a      	ldr	r2, [pc, #360]	; (8004274 <HAL_ADC_Init+0x2b4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_ADC_Init+0x15a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a58      	ldr	r2, [pc, #352]	; (8004278 <HAL_ADC_Init+0x2b8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_ADC_Init+0x15e>
 800411a:	4a59      	ldr	r2, [pc, #356]	; (8004280 <HAL_ADC_Init+0x2c0>)
 800411c:	e000      	b.n	8004120 <HAL_ADC_Init+0x160>
 800411e:	4a59      	ldr	r2, [pc, #356]	; (8004284 <HAL_ADC_Init+0x2c4>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7ff fd04 	bl	8003b34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_ADC_Init+0x2bc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d129      	bne.n	800418a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7e5b      	ldrb	r3, [r3, #25]
 800413a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004140:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004146:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d013      	beq.n	8004178 <HAL_ADC_Init+0x1b8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d00d      	beq.n	8004174 <HAL_ADC_Init+0x1b4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b1c      	cmp	r3, #28
 800415e:	d007      	beq.n	8004170 <HAL_ADC_Init+0x1b0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b18      	cmp	r3, #24
 8004166:	d101      	bne.n	800416c <HAL_ADC_Init+0x1ac>
 8004168:	2318      	movs	r3, #24
 800416a:	e006      	b.n	800417a <HAL_ADC_Init+0x1ba>
 800416c:	2300      	movs	r3, #0
 800416e:	e004      	b.n	800417a <HAL_ADC_Init+0x1ba>
 8004170:	2310      	movs	r3, #16
 8004172:	e002      	b.n	800417a <HAL_ADC_Init+0x1ba>
 8004174:	2308      	movs	r3, #8
 8004176:	e000      	b.n	800417a <HAL_ADC_Init+0x1ba>
 8004178:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800417a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004182:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e00e      	b.n	80041a8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7e5b      	ldrb	r3, [r3, #25]
 800418e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004194:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800419a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d106      	bne.n	80041c0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	3b01      	subs	r3, #1
 80041b8:	045b      	lsls	r3, r3, #17
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_ADC_Init+0x2bc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d115      	bne.n	8004212 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b26      	ldr	r3, [pc, #152]	; (8004288 <HAL_ADC_Init+0x2c8>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	611a      	str	r2, [r3, #16]
 8004210:	e009      	b.n	8004226 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_ADC_Init+0x2cc>)
 800421a:	4013      	ands	r3, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fea1 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004230:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff feae 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 800423c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 808e 	bne.w	8004362 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 808a 	bne.w	8004362 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <HAL_ADC_Init+0x2bc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d11b      	bne.n	8004290 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7e1b      	ldrb	r3, [r3, #24]
 800425c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004264:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e018      	b.n	800429e <HAL_ADC_Init+0x2de>
 800426c:	24000008 	.word	0x24000008
 8004270:	053e2d63 	.word	0x053e2d63
 8004274:	40022000 	.word	0x40022000
 8004278:	40022100 	.word	0x40022100
 800427c:	58026000 	.word	0x58026000
 8004280:	40022300 	.word	0x40022300
 8004284:	58026300 	.word	0x58026300
 8004288:	fff04007 	.word	0xfff04007
 800428c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7e1b      	ldrb	r3, [r3, #24]
 8004294:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <HAL_ADC_Init+0x400>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d137      	bne.n	800432c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_ADC_Init+0x404>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d116      	bne.n	80042fa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <HAL_ADC_Init+0x408>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042e4:	4311      	orrs	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042ea:	430a      	orrs	r2, r1
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	611a      	str	r2, [r3, #16]
 80042f8:	e020      	b.n	800433c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_ADC_Init+0x40c>)
 8004302:	4013      	ands	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004308:	3a01      	subs	r2, #1
 800430a:	0411      	lsls	r1, r2, #16
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800431c:	430a      	orrs	r2, r1
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e007      	b.n	800433c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_ADC_Init+0x404>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d002      	beq.n	8004362 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fd63 	bl	8004e28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10c      	bne.n	8004384 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f023 010f 	bic.w	r1, r3, #15
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
 8004382:	e007      	b.n	8004394 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 020f 	bic.w	r2, r2, #15
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	661a      	str	r2, [r3, #96]	; 0x60
 80043a4:	e007      	b.n	80043b6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3724      	adds	r7, #36	; 0x24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd90      	pop	{r4, r7, pc}
 80043c0:	ffffbffc 	.word	0xffffbffc
 80043c4:	58026000 	.word	0x58026000
 80043c8:	fc00f81f 	.word	0xfc00f81f
 80043cc:	fc00f81e 	.word	0xfc00f81e

080043d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b0b9      	sub	sp, #228	; 0xe4
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ea:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4ab3      	ldr	r2, [pc, #716]	; (80046c0 <HAL_ADC_ConfigChannel+0x2f0>)
 80043f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x34>
 80043fe:	2302      	movs	r3, #2
 8004400:	f000 bcfa 	b.w	8004df8 <HAL_ADC_ConfigChannel+0xa28>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fdae 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 84de 	bne.w	8004dda <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4aa8      	ldr	r2, [pc, #672]	; (80046c4 <HAL_ADC_ConfigChannel+0x2f4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d033      	beq.n	8004490 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004430:	2b00      	cmp	r3, #0
 8004432:	d108      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x76>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2201      	movs	r2, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	e01d      	b.n	8004482 <HAL_ADC_ConfigChannel+0xb2>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800445a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800445e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e004      	b.n	8004478 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800446e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2201      	movs	r2, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	69d1      	ldr	r1, [r2, #28]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	f7ff fc6f 	bl	8003d80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd63 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 80044ac:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fd6f 	bl	8003f98 <LL_ADC_INJ_IsConversionOngoing>
 80044ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8270 	bne.w	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f040 826b 	bne.w	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7ff fc7a 	bl	8003dd8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a76      	ldr	r2, [pc, #472]	; (80046c4 <HAL_ADC_ConfigChannel+0x2f4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10d      	bne.n	800450a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004508:	e032      	b.n	8004570 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800450a:	4b6f      	ldr	r3, [pc, #444]	; (80046c8 <HAL_ADC_ConfigChannel+0x2f8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d10b      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x160>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	e01d      	b.n	800456c <HAL_ADC_ConfigChannel+0x19c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x186>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	e00a      	b.n	800456c <HAL_ADC_ConfigChannel+0x19c>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d048      	beq.n	800460a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6919      	ldr	r1, [r3, #16]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004588:	f7ff fb08 	bl	8003b9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4c      	ldr	r2, [pc, #304]	; (80046c4 <HAL_ADC_ConfigChannel+0x2f4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d119      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6919      	ldr	r1, [r3, #16]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f7ff fba0 	bl	8003ce8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	6919      	ldr	r1, [r3, #16]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x1f0>
 80045ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045be:	e000      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1f2>
 80045c0:	2300      	movs	r3, #0
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7ff fb6e 	bl	8003ca4 <LL_ADC_SetOffsetSaturation>
 80045c8:	e1ee      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x212>
 80045dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x214>
 80045e2:	2300      	movs	r3, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	f7ff fb3b 	bl	8003c60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	7e1b      	ldrb	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d102      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x230>
 80045fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045fe:	e000      	b.n	8004602 <HAL_ADC_ConfigChannel+0x232>
 8004600:	2300      	movs	r3, #0
 8004602:	461a      	mov	r2, r3
 8004604:	f7ff fb12 	bl	8003c2c <LL_ADC_SetDataRightShift>
 8004608:	e1ce      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <HAL_ADC_ConfigChannel+0x2f4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	f040 8181 	bne.w	8004918 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff faef 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x272>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fae4 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	e01e      	b.n	8004680 <HAL_ADC_ConfigChannel+0x2b0>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fad9 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e004      	b.n	800467e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x2c8>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	e01e      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x306>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80046ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80046b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e00a      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x306>
 80046c0:	47ff0000 	.word	0x47ff0000
 80046c4:	58026000 	.word	0x58026000
 80046c8:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80046cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d106      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fb22 	bl	8003d2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fa86 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x344>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fa7b 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	0e9b      	lsrs	r3, r3, #26
 800470e:	f003 021f 	and.w	r2, r3, #31
 8004712:	e01e      	b.n	8004752 <HAL_ADC_ConfigChannel+0x382>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fa70 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 8004720:	4603      	mov	r3, r0
 8004722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800473a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004742:	2320      	movs	r3, #32
 8004744:	e004      	b.n	8004750 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <HAL_ADC_ConfigChannel+0x39a>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	0e9b      	lsrs	r3, r3, #26
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	e018      	b.n	800479c <HAL_ADC_ConfigChannel+0x3cc>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800477e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004786:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800478e:	2320      	movs	r3, #32
 8004790:	e004      	b.n	800479c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	429a      	cmp	r2, r3
 800479e:	d106      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fabf 	bl	8003d2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2102      	movs	r1, #2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fa23 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_ADC_ConfigChannel+0x40a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2102      	movs	r1, #2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fa18 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 80047d0:	4603      	mov	r3, r0
 80047d2:	0e9b      	lsrs	r3, r3, #26
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	e01e      	b.n	8004818 <HAL_ADC_ConfigChannel+0x448>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2102      	movs	r1, #2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fa0d 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e004      	b.n	8004816 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800480c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x460>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0e9b      	lsrs	r3, r3, #26
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	e014      	b.n	800485a <HAL_ADC_ConfigChannel+0x48a>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800483e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e004      	b.n	800485a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	429a      	cmp	r2, r3
 800485c:	d106      	bne.n	800486c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fa60 	bl	8003d2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2103      	movs	r1, #3
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff f9c4 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 8004878:	4603      	mov	r3, r0
 800487a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x4c8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2103      	movs	r1, #3
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff f9b9 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	f003 021f 	and.w	r2, r3, #31
 8004896:	e017      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x4f8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2103      	movs	r1, #3
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff f9ae 	bl	8003c00 <LL_ADC_GetOffsetChannel>
 80048a4:	4603      	mov	r3, r0
 80048a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80048b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80048ba:	2320      	movs	r3, #32
 80048bc:	e003      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80048be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c0:	fab3 f383 	clz	r3, r3
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x510>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	e011      	b.n	8004904 <HAL_ADC_ConfigChannel+0x534>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e003      	b.n	8004904 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	429a      	cmp	r2, r3
 8004906:	d14f      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2200      	movs	r2, #0
 800490e:	2103      	movs	r1, #3
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fa0b 	bl	8003d2c <LL_ADC_SetOffsetState>
 8004916:	e047      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	069b      	lsls	r3, r3, #26
 8004928:	429a      	cmp	r2, r3
 800492a:	d107      	bne.n	800493c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800493a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	069b      	lsls	r3, r3, #26
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800495e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	069b      	lsls	r3, r3, #26
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004982:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	069b      	lsls	r3, r3, #26
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff facd 	bl	8003f4c <LL_ADC_IsEnabled>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 8219 	bne.w	8004dec <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7ff fa32 	bl	8003e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4aa1      	ldr	r2, [pc, #644]	; (8004c58 <HAL_ADC_ConfigChannel+0x888>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f040 812e 	bne.w	8004c34 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x630>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0e9b      	lsrs	r3, r3, #26
 80049ee:	3301      	adds	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	bf94      	ite	ls
 80049f8:	2301      	movls	r3, #1
 80049fa:	2300      	movhi	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e019      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x664>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e003      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	bf94      	ite	ls
 8004a2e:	2301      	movls	r3, #1
 8004a30:	2300      	movhi	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d079      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x684>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	0e9b      	lsrs	r3, r3, #26
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	069b      	lsls	r3, r3, #26
 8004a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a52:	e015      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x6b0>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	e003      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	069b      	lsls	r3, r3, #26
 8004a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x6d0>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	3301      	adds	r3, #1
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	e017      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x700>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ab8:	2320      	movs	r3, #32
 8004aba:	e003      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2101      	movs	r1, #1
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x726>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0e9b      	lsrs	r3, r3, #26
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	4613      	mov	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	4413      	add	r3, r2
 8004af2:	051b      	lsls	r3, r3, #20
 8004af4:	e018      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x758>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	e003      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	e07e      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x778>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	069b      	lsls	r3, r3, #26
 8004b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b46:	e015      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x7a4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b60:	2320      	movs	r3, #32
 8004b62:	e003      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	069b      	lsls	r3, r3, #26
 8004b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x7c4>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	3301      	adds	r3, #1
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	e017      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x7f4>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004bac:	2320      	movs	r3, #32
 8004bae:	e003      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x820>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	3b1e      	subs	r3, #30
 8004be8:	051b      	lsls	r3, r3, #20
 8004bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bee:	e01b      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x858>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
  return result;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004c08:	2320      	movs	r3, #32
 8004c0a:	e003      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	3301      	adds	r3, #1
 8004c16:	f003 021f 	and.w	r2, r3, #31
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	3b1e      	subs	r3, #30
 8004c22:	051b      	lsls	r3, r3, #20
 8004c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	6892      	ldr	r2, [r2, #8]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7ff f8d2 	bl	8003dd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f280 80d7 	bge.w	8004dec <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <HAL_ADC_ConfigChannel+0x88c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_ADC_ConfigChannel+0x882>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_ADC_ConfigChannel+0x890>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10a      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x898>
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <HAL_ADC_ConfigChannel+0x894>)
 8004c54:	e009      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x89a>
 8004c56:	bf00      	nop
 8004c58:	47ff0000 	.word	0x47ff0000
 8004c5c:	40022000 	.word	0x40022000
 8004c60:	40022100 	.word	0x40022100
 8004c64:	40022300 	.word	0x40022300
 8004c68:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_ADC_ConfigChannel+0xa30>)
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe ff88 	bl	8003b80 <LL_ADC_GetCommonPathInternalCh>
 8004c70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a62      	ldr	r2, [pc, #392]	; (8004e04 <HAL_ADC_ConfigChannel+0xa34>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_ADC_ConfigChannel+0x8b8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a61      	ldr	r2, [pc, #388]	; (8004e08 <HAL_ADC_ConfigChannel+0xa38>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10e      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x8d6>
 8004c88:	485e      	ldr	r0, [pc, #376]	; (8004e04 <HAL_ADC_ConfigChannel+0xa34>)
 8004c8a:	f7ff f95f 	bl	8003f4c <LL_ADC_IsEnabled>
 8004c8e:	4604      	mov	r4, r0
 8004c90:	485d      	ldr	r0, [pc, #372]	; (8004e08 <HAL_ADC_ConfigChannel+0xa38>)
 8004c92:	f7ff f95b 	bl	8003f4c <LL_ADC_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4323      	orrs	r3, r4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e008      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x8e8>
 8004ca6:	4859      	ldr	r0, [pc, #356]	; (8004e0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004ca8:	f7ff f950 	bl	8003f4c <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8084 	beq.w	8004dc6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a53      	ldr	r2, [pc, #332]	; (8004e10 <HAL_ADC_ConfigChannel+0xa40>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d132      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x95e>
 8004cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d12c      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a4c      	ldr	r2, [pc, #304]	; (8004e0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f040 8086 	bne.w	8004dec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a47      	ldr	r2, [pc, #284]	; (8004e04 <HAL_ADC_ConfigChannel+0xa34>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_ADC_ConfigChannel+0x924>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <HAL_ADC_ConfigChannel+0xa38>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x928>
 8004cf4:	4a47      	ldr	r2, [pc, #284]	; (8004e14 <HAL_ADC_ConfigChannel+0xa44>)
 8004cf6:	e000      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x92a>
 8004cf8:	4a41      	ldr	r2, [pc, #260]	; (8004e00 <HAL_ADC_ConfigChannel+0xa30>)
 8004cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f7fe ff28 	bl	8003b5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d0a:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <HAL_ADC_ConfigChannel+0xa48>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	4a42      	ldr	r2, [pc, #264]	; (8004e1c <HAL_ADC_ConfigChannel+0xa4c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	3301      	adds	r3, #1
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d1e:	e002      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d2c:	e05e      	b.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <HAL_ADC_ConfigChannel+0xa50>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d120      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x9aa>
 8004d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11a      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d14e      	bne.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <HAL_ADC_ConfigChannel+0xa34>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_ADC_ConfigChannel+0x992>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <HAL_ADC_ConfigChannel+0xa38>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x996>
 8004d62:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <HAL_ADC_ConfigChannel+0xa44>)
 8004d64:	e000      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x998>
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <HAL_ADC_ConfigChannel+0xa30>)
 8004d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fe fef1 	bl	8003b5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d78:	e038      	b.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a29      	ldr	r2, [pc, #164]	; (8004e24 <HAL_ADC_ConfigChannel+0xa54>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d133      	bne.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
 8004d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d12d      	bne.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_ADC_ConfigChannel+0xa3c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d128      	bne.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <HAL_ADC_ConfigChannel+0xa34>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_ConfigChannel+0x9de>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <HAL_ADC_ConfigChannel+0xa38>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x9e2>
 8004dae:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_ADC_ConfigChannel+0xa44>)
 8004db0:	e000      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x9e4>
 8004db2:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <HAL_ADC_ConfigChannel+0xa30>)
 8004db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe fecb 	bl	8003b5a <LL_ADC_SetCommonPathInternalCh>
 8004dc4:	e012      	b.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004dd8:	e008      	b.n	8004dec <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004df4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	37e4      	adds	r7, #228	; 0xe4
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	58026300 	.word	0x58026300
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40022100 	.word	0x40022100
 8004e0c:	58026000 	.word	0x58026000
 8004e10:	c7520000 	.word	0xc7520000
 8004e14:	40022300 	.word	0x40022300
 8004e18:	24000008 	.word	0x24000008
 8004e1c:	053e2d63 	.word	0x053e2d63
 8004e20:	c3210000 	.word	0xc3210000
 8004e24:	cb840000 	.word	0xcb840000

08004e28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a6b      	ldr	r2, [pc, #428]	; (8004fe4 <ADC_ConfigureBoostMode+0x1bc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <ADC_ConfigureBoostMode+0x1c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a6a      	ldr	r2, [pc, #424]	; (8004fe8 <ADC_ConfigureBoostMode+0x1c0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <ADC_ConfigureBoostMode+0x30>
 8004e44:	4b69      	ldr	r3, [pc, #420]	; (8004fec <ADC_ConfigureBoostMode+0x1c4>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e008      	b.n	8004e6a <ADC_ConfigureBoostMode+0x42>
 8004e58:	4b65      	ldr	r3, [pc, #404]	; (8004ff0 <ADC_ConfigureBoostMode+0x1c8>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e6e:	f003 f887 	bl	8007f80 <HAL_RCC_GetHCLKFreq>
 8004e72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e7c:	d010      	beq.n	8004ea0 <ADC_ConfigureBoostMode+0x78>
 8004e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e82:	d871      	bhi.n	8004f68 <ADC_ConfigureBoostMode+0x140>
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d002      	beq.n	8004e90 <ADC_ConfigureBoostMode+0x68>
 8004e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8e:	d16b      	bne.n	8004f68 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	60fb      	str	r3, [r7, #12]
        break;
 8004e9e:	e066      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	60fb      	str	r3, [r7, #12]
        break;
 8004ea6:	e062      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ea8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004eac:	f003 ffda 	bl	8008e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eb0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004eba:	d051      	beq.n	8004f60 <ADC_ConfigureBoostMode+0x138>
 8004ebc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ec0:	d854      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004ec2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ec6:	d047      	beq.n	8004f58 <ADC_ConfigureBoostMode+0x130>
 8004ec8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ecc:	d84e      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004ece:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ed2:	d03d      	beq.n	8004f50 <ADC_ConfigureBoostMode+0x128>
 8004ed4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ed8:	d848      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d033      	beq.n	8004f48 <ADC_ConfigureBoostMode+0x120>
 8004ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee4:	d842      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004ee6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eea:	d029      	beq.n	8004f40 <ADC_ConfigureBoostMode+0x118>
 8004eec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ef0:	d83c      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004ef2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ef6:	d01a      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x106>
 8004ef8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004efc:	d836      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004efe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f02:	d014      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x106>
 8004f04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f08:	d830      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d00e      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x106>
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	d82a      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004f16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f1a:	d008      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x106>
 8004f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f20:	d824      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f26:	d002      	beq.n	8004f2e <ADC_ConfigureBoostMode+0x106>
 8004f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2c:	d11e      	bne.n	8004f6c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0c9b      	lsrs	r3, r3, #18
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
        break;
 8004f3e:	e016      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
        break;
 8004f46:	e012      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	60fb      	str	r3, [r7, #12]
        break;
 8004f4e:	e00e      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	60fb      	str	r3, [r7, #12]
        break;
 8004f56:	e00a      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	09db      	lsrs	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
        break;
 8004f5e:	e006      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	60fb      	str	r3, [r7, #12]
        break;
 8004f66:	e002      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004f6c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <ADC_ConfigureBoostMode+0x1cc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d808      	bhi.n	8004f8e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f8a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f8c:	e025      	b.n	8004fda <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <ADC_ConfigureBoostMode+0x1d0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d80a      	bhi.n	8004fac <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	e016      	b.n	8004fda <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <ADC_ConfigureBoostMode+0x1d4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d80a      	bhi.n	8004fca <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	e007      	b.n	8004fda <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fd8:	609a      	str	r2, [r3, #8]
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	40022100 	.word	0x40022100
 8004fec:	40022300 	.word	0x40022300
 8004ff0:	58026300 	.word	0x58026300
 8004ff4:	005f5e10 	.word	0x005f5e10
 8004ff8:	00bebc20 	.word	0x00bebc20
 8004ffc:	017d7840 	.word	0x017d7840

08005000 <LL_ADC_IsEnabled>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <LL_ADC_IsEnabled+0x18>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <LL_ADC_IsEnabled+0x1a>
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_ADC_REG_IsConversionOngoing>:
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d101      	bne.n	800503e <LL_ADC_REG_IsConversionOngoing+0x18>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b0a3      	sub	sp, #140	; 0x8c
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005066:	2302      	movs	r3, #2
 8005068:	e0c1      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5e      	ldr	r2, [pc, #376]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005084:	4b5d      	ldr	r3, [pc, #372]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e001      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0a0      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffb9 	bl	8005026 <LL_ADC_REG_IsConversionOngoing>
 80050b4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ffb2 	bl	8005026 <LL_ADC_REG_IsConversionOngoing>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 8081 	bne.w	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d17c      	bne.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a48      	ldr	r2, [pc, #288]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a46      	ldr	r2, [pc, #280]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050e8:	e000      	b.n	80050ec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050ec:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d039      	beq.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005106:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a39      	ldr	r2, [pc, #228]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10e      	bne.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800511c:	4836      	ldr	r0, [pc, #216]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800511e:	f7ff ff6f 	bl	8005000 <LL_ADC_IsEnabled>
 8005122:	4604      	mov	r4, r0
 8005124:	4835      	ldr	r0, [pc, #212]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005126:	f7ff ff6b 	bl	8005000 <LL_ADC_IsEnabled>
 800512a:	4603      	mov	r3, r0
 800512c:	4323      	orrs	r3, r4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e008      	b.n	800514c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800513a:	4833      	ldr	r0, [pc, #204]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800513c:	f7ff ff60 	bl	8005000 <LL_ADC_IsEnabled>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d047      	beq.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b2d      	ldr	r3, [pc, #180]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005156:	4013      	ands	r3, r2
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	6811      	ldr	r1, [r2, #0]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	6892      	ldr	r2, [r2, #8]
 8005160:	430a      	orrs	r2, r1
 8005162:	431a      	orrs	r2, r3
 8005164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005166:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005168:	e03a      	b.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800516a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005174:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10e      	bne.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800518a:	481b      	ldr	r0, [pc, #108]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800518c:	f7ff ff38 	bl	8005000 <LL_ADC_IsEnabled>
 8005190:	4604      	mov	r4, r0
 8005192:	481a      	ldr	r0, [pc, #104]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005194:	f7ff ff34 	bl	8005000 <LL_ADC_IsEnabled>
 8005198:	4603      	mov	r3, r0
 800519a:	4323      	orrs	r3, r4
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e008      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80051a8:	4817      	ldr	r0, [pc, #92]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80051aa:	f7ff ff29 	bl	8005000 <LL_ADC_IsEnabled>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf0c      	ite	eq
 80051b4:	2301      	moveq	r3, #1
 80051b6:	2300      	movne	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ca:	e009      	b.n	80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051de:	e000      	b.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	378c      	adds	r7, #140	; 0x8c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000
 80051fc:	40022100 	.word	0x40022100
 8005200:	40022300 	.word	0x40022300
 8005204:	58026300 	.word	0x58026300
 8005208:	58026000 	.word	0x58026000
 800520c:	fffff0e0 	.word	0xfffff0e0

08005210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <__NVIC_SetPriorityGrouping+0x40>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 800523a:	4313      	orrs	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <__NVIC_SetPriorityGrouping+0x40>)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	60d3      	str	r3, [r2, #12]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000ed00 	.word	0xe000ed00
 8005254:	05fa0000 	.word	0x05fa0000

08005258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <__NVIC_GetPriorityGrouping+0x18>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0307 	and.w	r3, r3, #7
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800527e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db0b      	blt.n	800529e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	4907      	ldr	r1, [pc, #28]	; (80052ac <__NVIC_EnableIRQ+0x38>)
 800528e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2001      	movs	r0, #1
 8005296:	fa00 f202 	lsl.w	r2, r0, r2
 800529a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e100 	.word	0xe000e100

080052b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0a      	blt.n	80052da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	490c      	ldr	r1, [pc, #48]	; (80052fc <__NVIC_SetPriority+0x4c>)
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d8:	e00a      	b.n	80052f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <__NVIC_SetPriority+0x50>)
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	3b04      	subs	r3, #4
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	761a      	strb	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000e100 	.word	0xe000e100
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005304:	b480      	push	{r7}
 8005306:	b089      	sub	sp, #36	; 0x24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f1c3 0307 	rsb	r3, r3, #7
 800531e:	2b04      	cmp	r3, #4
 8005320:	bf28      	it	cs
 8005322:	2304      	movcs	r3, #4
 8005324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3304      	adds	r3, #4
 800532a:	2b06      	cmp	r3, #6
 800532c:	d902      	bls.n	8005334 <NVIC_EncodePriority+0x30>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3b03      	subs	r3, #3
 8005332:	e000      	b.n	8005336 <NVIC_EncodePriority+0x32>
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	401a      	ands	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800534c:	f04f 31ff 	mov.w	r1, #4294967295
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	43d9      	mvns	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	4313      	orrs	r3, r2
         );
}
 800535e:	4618      	mov	r0, r3
 8005360:	3724      	adds	r7, #36	; 0x24
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800537c:	d301      	bcc.n	8005382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <SysTick_Config+0x40>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3b01      	subs	r3, #1
 8005388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800538a:	210f      	movs	r1, #15
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	f7ff ff8e 	bl	80052b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <SysTick_Config+0x40>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <SysTick_Config+0x40>)
 800539c:	2207      	movs	r2, #7
 800539e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000e010 	.word	0xe000e010

080053b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff29 	bl	8005210 <__NVIC_SetPriorityGrouping>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d4:	f7ff ff40 	bl	8005258 <__NVIC_GetPriorityGrouping>
 80053d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7ff ff90 	bl	8005304 <NVIC_EncodePriority>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff5f 	bl	80052b0 <__NVIC_SetPriority>
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff33 	bl	8005274 <__NVIC_EnableIRQ>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ffa4 	bl	800536c <SysTick_Config>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005438:	f7fe fb70 	bl	8003b1c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e314      	b.n	8005a72 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a66      	ldr	r2, [pc, #408]	; (80055e8 <HAL_DMA_Init+0x1b8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d04a      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_DMA_Init+0x1bc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d045      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_DMA_Init+0x1c0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d040      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a62      	ldr	r2, [pc, #392]	; (80055f4 <HAL_DMA_Init+0x1c4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d03b      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a60      	ldr	r2, [pc, #384]	; (80055f8 <HAL_DMA_Init+0x1c8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d036      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_DMA_Init+0x1cc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d031      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5d      	ldr	r2, [pc, #372]	; (8005600 <HAL_DMA_Init+0x1d0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02c      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5c      	ldr	r2, [pc, #368]	; (8005604 <HAL_DMA_Init+0x1d4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d027      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5a      	ldr	r2, [pc, #360]	; (8005608 <HAL_DMA_Init+0x1d8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a59      	ldr	r2, [pc, #356]	; (800560c <HAL_DMA_Init+0x1dc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01d      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a57      	ldr	r2, [pc, #348]	; (8005610 <HAL_DMA_Init+0x1e0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a56      	ldr	r2, [pc, #344]	; (8005614 <HAL_DMA_Init+0x1e4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a54      	ldr	r2, [pc, #336]	; (8005618 <HAL_DMA_Init+0x1e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a53      	ldr	r2, [pc, #332]	; (800561c <HAL_DMA_Init+0x1ec>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a51      	ldr	r2, [pc, #324]	; (8005620 <HAL_DMA_Init+0x1f0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_DMA_Init+0xb8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a50      	ldr	r2, [pc, #320]	; (8005624 <HAL_DMA_Init+0x1f4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_DMA_Init+0xbc>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_DMA_Init+0xbe>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 813c 	beq.w	800576c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a37      	ldr	r2, [pc, #220]	; (80055e8 <HAL_DMA_Init+0x1b8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d04a      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a36      	ldr	r2, [pc, #216]	; (80055ec <HAL_DMA_Init+0x1bc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d045      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <HAL_DMA_Init+0x1c0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d040      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <HAL_DMA_Init+0x1c4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d03b      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a31      	ldr	r2, [pc, #196]	; (80055f8 <HAL_DMA_Init+0x1c8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d036      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a30      	ldr	r2, [pc, #192]	; (80055fc <HAL_DMA_Init+0x1cc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d031      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2e      	ldr	r2, [pc, #184]	; (8005600 <HAL_DMA_Init+0x1d0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d02c      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <HAL_DMA_Init+0x1d4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d027      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <HAL_DMA_Init+0x1d8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2a      	ldr	r2, [pc, #168]	; (800560c <HAL_DMA_Init+0x1dc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d01d      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <HAL_DMA_Init+0x1e0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a27      	ldr	r2, [pc, #156]	; (8005614 <HAL_DMA_Init+0x1e4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <HAL_DMA_Init+0x1e8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a24      	ldr	r2, [pc, #144]	; (800561c <HAL_DMA_Init+0x1ec>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <HAL_DMA_Init+0x1f0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_DMA_Init+0x174>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a21      	ldr	r2, [pc, #132]	; (8005624 <HAL_DMA_Init+0x1f4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d108      	bne.n	80055b6 <HAL_DMA_Init+0x186>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e007      	b.n	80055c6 <HAL_DMA_Init+0x196>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055c6:	e02f      	b.n	8005628 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c8:	f7fe faa8 	bl	8003b1c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d928      	bls.n	8005628 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2203      	movs	r2, #3
 80055e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e244      	b.n	8005a72 <HAL_DMA_Init+0x642>
 80055e8:	40020010 	.word	0x40020010
 80055ec:	40020028 	.word	0x40020028
 80055f0:	40020040 	.word	0x40020040
 80055f4:	40020058 	.word	0x40020058
 80055f8:	40020070 	.word	0x40020070
 80055fc:	40020088 	.word	0x40020088
 8005600:	400200a0 	.word	0x400200a0
 8005604:	400200b8 	.word	0x400200b8
 8005608:	40020410 	.word	0x40020410
 800560c:	40020428 	.word	0x40020428
 8005610:	40020440 	.word	0x40020440
 8005614:	40020458 	.word	0x40020458
 8005618:	40020470 	.word	0x40020470
 800561c:	40020488 	.word	0x40020488
 8005620:	400204a0 	.word	0x400204a0
 8005624:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1c8      	bne.n	80055c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4b84      	ldr	r3, [pc, #528]	; (8005854 <HAL_DMA_Init+0x424>)
 8005642:	4013      	ands	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800564e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005666:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b04      	cmp	r3, #4
 800567a:	d107      	bne.n	800568c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b28      	cmp	r3, #40	; 0x28
 8005692:	d903      	bls.n	800569c <HAL_DMA_Init+0x26c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b2e      	cmp	r3, #46	; 0x2e
 800569a:	d91f      	bls.n	80056dc <HAL_DMA_Init+0x2ac>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b3e      	cmp	r3, #62	; 0x3e
 80056a2:	d903      	bls.n	80056ac <HAL_DMA_Init+0x27c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b42      	cmp	r3, #66	; 0x42
 80056aa:	d917      	bls.n	80056dc <HAL_DMA_Init+0x2ac>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b46      	cmp	r3, #70	; 0x46
 80056b2:	d903      	bls.n	80056bc <HAL_DMA_Init+0x28c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b48      	cmp	r3, #72	; 0x48
 80056ba:	d90f      	bls.n	80056dc <HAL_DMA_Init+0x2ac>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b4e      	cmp	r3, #78	; 0x4e
 80056c2:	d903      	bls.n	80056cc <HAL_DMA_Init+0x29c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b52      	cmp	r3, #82	; 0x52
 80056ca:	d907      	bls.n	80056dc <HAL_DMA_Init+0x2ac>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b73      	cmp	r3, #115	; 0x73
 80056d2:	d905      	bls.n	80056e0 <HAL_DMA_Init+0x2b0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b77      	cmp	r3, #119	; 0x77
 80056da:	d801      	bhi.n	80056e0 <HAL_DMA_Init+0x2b0>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_DMA_Init+0x2b2>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b04      	cmp	r3, #4
 8005716:	d117      	bne.n	8005748 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00e      	beq.n	8005748 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f9b6 	bl	8006a9c <DMA_CheckFifoParam>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e194      	b.n	8005a72 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f8f1 	bl	8006938 <DMA_CalcBaseAndBitshift>
 8005756:	4603      	mov	r3, r0
 8005758:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	223f      	movs	r2, #63	; 0x3f
 8005764:	409a      	lsls	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]
 800576a:	e0ca      	b.n	8005902 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_DMA_Init+0x428>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d022      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a38      	ldr	r2, [pc, #224]	; (800585c <HAL_DMA_Init+0x42c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d01d      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_DMA_Init+0x430>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a35      	ldr	r2, [pc, #212]	; (8005864 <HAL_DMA_Init+0x434>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d013      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a33      	ldr	r2, [pc, #204]	; (8005868 <HAL_DMA_Init+0x438>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a32      	ldr	r2, [pc, #200]	; (800586c <HAL_DMA_Init+0x43c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <HAL_DMA_Init+0x440>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_DMA_Init+0x38c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <HAL_DMA_Init+0x444>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_DMA_Init+0x390>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <HAL_DMA_Init+0x392>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8094 	beq.w	80058f0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <HAL_DMA_Init+0x428>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d021      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <HAL_DMA_Init+0x42c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01c      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <HAL_DMA_Init+0x430>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d017      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_DMA_Init+0x434>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d012      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <HAL_DMA_Init+0x438>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00d      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_DMA_Init+0x43c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d008      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <HAL_DMA_Init+0x440>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <HAL_DMA_Init+0x3e6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_DMA_Init+0x444>)
 8005814:	4293      	cmp	r3, r2
 8005816:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_DMA_Init+0x448>)
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d01d      	beq.n	800587c <HAL_DMA_Init+0x44c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d102      	bne.n	800584e <HAL_DMA_Init+0x41e>
 8005848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800584c:	e017      	b.n	800587e <HAL_DMA_Init+0x44e>
 800584e:	2300      	movs	r3, #0
 8005850:	e015      	b.n	800587e <HAL_DMA_Init+0x44e>
 8005852:	bf00      	nop
 8005854:	fe10803f 	.word	0xfe10803f
 8005858:	58025408 	.word	0x58025408
 800585c:	5802541c 	.word	0x5802541c
 8005860:	58025430 	.word	0x58025430
 8005864:	58025444 	.word	0x58025444
 8005868:	58025458 	.word	0x58025458
 800586c:	5802546c 	.word	0x5802546c
 8005870:	58025480 	.word	0x58025480
 8005874:	58025494 	.word	0x58025494
 8005878:	fffe000f 	.word	0xfffe000f
 800587c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800588c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800589c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b6e      	ldr	r3, [pc, #440]	; (8005a7c <HAL_DMA_Init+0x64c>)
 80058c4:	4413      	add	r3, r2
 80058c6:	4a6e      	ldr	r2, [pc, #440]	; (8005a80 <HAL_DMA_Init+0x650>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	009a      	lsls	r2, r3, #2
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 f82f 	bl	8006938 <DMA_CalcBaseAndBitshift>
 80058da:	4603      	mov	r3, r0
 80058dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	e008      	b.n	8005902 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2203      	movs	r2, #3
 80058fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0b7      	b.n	8005a72 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a5f      	ldr	r2, [pc, #380]	; (8005a84 <HAL_DMA_Init+0x654>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d072      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a5d      	ldr	r2, [pc, #372]	; (8005a88 <HAL_DMA_Init+0x658>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d06d      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <HAL_DMA_Init+0x65c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d068      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5a      	ldr	r2, [pc, #360]	; (8005a90 <HAL_DMA_Init+0x660>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d063      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a59      	ldr	r2, [pc, #356]	; (8005a94 <HAL_DMA_Init+0x664>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d05e      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a57      	ldr	r2, [pc, #348]	; (8005a98 <HAL_DMA_Init+0x668>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d059      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a56      	ldr	r2, [pc, #344]	; (8005a9c <HAL_DMA_Init+0x66c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d054      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a54      	ldr	r2, [pc, #336]	; (8005aa0 <HAL_DMA_Init+0x670>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04f      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a53      	ldr	r2, [pc, #332]	; (8005aa4 <HAL_DMA_Init+0x674>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d04a      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a51      	ldr	r2, [pc, #324]	; (8005aa8 <HAL_DMA_Init+0x678>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d045      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a50      	ldr	r2, [pc, #320]	; (8005aac <HAL_DMA_Init+0x67c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a4e      	ldr	r2, [pc, #312]	; (8005ab0 <HAL_DMA_Init+0x680>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d03b      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4d      	ldr	r2, [pc, #308]	; (8005ab4 <HAL_DMA_Init+0x684>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d036      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4b      	ldr	r2, [pc, #300]	; (8005ab8 <HAL_DMA_Init+0x688>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d031      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <HAL_DMA_Init+0x68c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d02c      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a48      	ldr	r2, [pc, #288]	; (8005ac0 <HAL_DMA_Init+0x690>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a47      	ldr	r2, [pc, #284]	; (8005ac4 <HAL_DMA_Init+0x694>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a45      	ldr	r2, [pc, #276]	; (8005ac8 <HAL_DMA_Init+0x698>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a44      	ldr	r2, [pc, #272]	; (8005acc <HAL_DMA_Init+0x69c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a42      	ldr	r2, [pc, #264]	; (8005ad0 <HAL_DMA_Init+0x6a0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a41      	ldr	r2, [pc, #260]	; (8005ad4 <HAL_DMA_Init+0x6a4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <HAL_DMA_Init+0x6a8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3e      	ldr	r2, [pc, #248]	; (8005adc <HAL_DMA_Init+0x6ac>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_Init+0x5c2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <HAL_DMA_Init+0x6b0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA_Init+0x5c6>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_DMA_Init+0x5c8>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d032      	beq.n	8005a62 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f8c9 	bl	8006b94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d102      	bne.n	8005a10 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_DMA_Init+0x620>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d80c      	bhi.n	8005a50 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 f946 	bl	8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	e008      	b.n	8005a62 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	a7fdabf8 	.word	0xa7fdabf8
 8005a80:	cccccccd 	.word	0xcccccccd
 8005a84:	40020010 	.word	0x40020010
 8005a88:	40020028 	.word	0x40020028
 8005a8c:	40020040 	.word	0x40020040
 8005a90:	40020058 	.word	0x40020058
 8005a94:	40020070 	.word	0x40020070
 8005a98:	40020088 	.word	0x40020088
 8005a9c:	400200a0 	.word	0x400200a0
 8005aa0:	400200b8 	.word	0x400200b8
 8005aa4:	40020410 	.word	0x40020410
 8005aa8:	40020428 	.word	0x40020428
 8005aac:	40020440 	.word	0x40020440
 8005ab0:	40020458 	.word	0x40020458
 8005ab4:	40020470 	.word	0x40020470
 8005ab8:	40020488 	.word	0x40020488
 8005abc:	400204a0 	.word	0x400204a0
 8005ac0:	400204b8 	.word	0x400204b8
 8005ac4:	58025408 	.word	0x58025408
 8005ac8:	5802541c 	.word	0x5802541c
 8005acc:	58025430 	.word	0x58025430
 8005ad0:	58025444 	.word	0x58025444
 8005ad4:	58025458 	.word	0x58025458
 8005ad8:	5802546c 	.word	0x5802546c
 8005adc:	58025480 	.word	0x58025480
 8005ae0:	58025494 	.word	0x58025494

08005ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005af0:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_DMA_IRQHandler+0x1ac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a67      	ldr	r2, [pc, #412]	; (8005c94 <HAL_DMA_IRQHandler+0x1b0>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	0a9b      	lsrs	r3, r3, #10
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5f      	ldr	r2, [pc, #380]	; (8005c98 <HAL_DMA_IRQHandler+0x1b4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d04a      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5d      	ldr	r2, [pc, #372]	; (8005c9c <HAL_DMA_IRQHandler+0x1b8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d045      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5c      	ldr	r2, [pc, #368]	; (8005ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d040      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5a      	ldr	r2, [pc, #360]	; (8005ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d03b      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a59      	ldr	r2, [pc, #356]	; (8005ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d036      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a57      	ldr	r2, [pc, #348]	; (8005cac <HAL_DMA_IRQHandler+0x1c8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a54      	ldr	r2, [pc, #336]	; (8005cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d027      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a53      	ldr	r2, [pc, #332]	; (8005cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a51      	ldr	r2, [pc, #324]	; (8005cbc <HAL_DMA_IRQHandler+0x1d8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a50      	ldr	r2, [pc, #320]	; (8005cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4e      	ldr	r2, [pc, #312]	; (8005cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4d      	ldr	r2, [pc, #308]	; (8005cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ccc <HAL_DMA_IRQHandler+0x1e8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a4a      	ldr	r2, [pc, #296]	; (8005cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xd2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a48      	ldr	r2, [pc, #288]	; (8005cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d101      	bne.n	8005bba <HAL_DMA_IRQHandler+0xd6>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_DMA_IRQHandler+0xd8>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 842b 	beq.w	8006418 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2208      	movs	r2, #8
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80a2 	beq.w	8005d1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <HAL_DMA_IRQHandler+0x1b4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d04a      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_DMA_IRQHandler+0x1b8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d045      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d040      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d03b      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a28      	ldr	r2, [pc, #160]	; (8005ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d036      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a27      	ldr	r2, [pc, #156]	; (8005cac <HAL_DMA_IRQHandler+0x1c8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d031      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02c      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d027      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <HAL_DMA_IRQHandler+0x1d8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01d      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_DMA_IRQHandler+0x1e8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x194>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d12f      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x1f4>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bf14      	ite	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	2300      	moveq	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e02e      	b.n	8005cec <HAL_DMA_IRQHandler+0x208>
 8005c8e:	bf00      	nop
 8005c90:	24000008 	.word	0x24000008
 8005c94:	1b4e81b5 	.word	0x1b4e81b5
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf14      	ite	ne
 8005ce6:	2301      	movne	r3, #1
 8005ce8:	2300      	moveq	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0204 	bic.w	r2, r2, #4
 8005cfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	2208      	movs	r2, #8
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d06e      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a69      	ldr	r2, [pc, #420]	; (8005edc <HAL_DMA_IRQHandler+0x3f8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d04a      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a67      	ldr	r2, [pc, #412]	; (8005ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d045      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a66      	ldr	r2, [pc, #408]	; (8005ee4 <HAL_DMA_IRQHandler+0x400>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d040      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a64      	ldr	r2, [pc, #400]	; (8005ee8 <HAL_DMA_IRQHandler+0x404>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d03b      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a63      	ldr	r2, [pc, #396]	; (8005eec <HAL_DMA_IRQHandler+0x408>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d036      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a61      	ldr	r2, [pc, #388]	; (8005ef0 <HAL_DMA_IRQHandler+0x40c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d031      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a60      	ldr	r2, [pc, #384]	; (8005ef4 <HAL_DMA_IRQHandler+0x410>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d02c      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5e      	ldr	r2, [pc, #376]	; (8005ef8 <HAL_DMA_IRQHandler+0x414>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d027      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a5d      	ldr	r2, [pc, #372]	; (8005efc <HAL_DMA_IRQHandler+0x418>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a5b      	ldr	r2, [pc, #364]	; (8005f00 <HAL_DMA_IRQHandler+0x41c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01d      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a5a      	ldr	r2, [pc, #360]	; (8005f04 <HAL_DMA_IRQHandler+0x420>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d018      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a58      	ldr	r2, [pc, #352]	; (8005f08 <HAL_DMA_IRQHandler+0x424>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a57      	ldr	r2, [pc, #348]	; (8005f0c <HAL_DMA_IRQHandler+0x428>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a55      	ldr	r2, [pc, #340]	; (8005f10 <HAL_DMA_IRQHandler+0x42c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a54      	ldr	r2, [pc, #336]	; (8005f14 <HAL_DMA_IRQHandler+0x430>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ee>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	; (8005f18 <HAL_DMA_IRQHandler+0x434>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10a      	bne.n	8005de8 <HAL_DMA_IRQHandler+0x304>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e003      	b.n	8005df0 <HAL_DMA_IRQHandler+0x30c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	f043 0202 	orr.w	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2204      	movs	r2, #4
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 808f 	beq.w	8005f44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <HAL_DMA_IRQHandler+0x3f8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d04a      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d045      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <HAL_DMA_IRQHandler+0x400>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d040      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <HAL_DMA_IRQHandler+0x404>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d03b      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a26      	ldr	r2, [pc, #152]	; (8005eec <HAL_DMA_IRQHandler+0x408>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d036      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <HAL_DMA_IRQHandler+0x40c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d031      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <HAL_DMA_IRQHandler+0x410>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d02c      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <HAL_DMA_IRQHandler+0x414>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d027      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a20      	ldr	r2, [pc, #128]	; (8005efc <HAL_DMA_IRQHandler+0x418>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1e      	ldr	r2, [pc, #120]	; (8005f00 <HAL_DMA_IRQHandler+0x41c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01d      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_DMA_IRQHandler+0x420>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_DMA_IRQHandler+0x424>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <HAL_DMA_IRQHandler+0x428>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <HAL_DMA_IRQHandler+0x42c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_DMA_IRQHandler+0x430>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0x3e2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_DMA_IRQHandler+0x434>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d12a      	bne.n	8005f1c <HAL_DMA_IRQHandler+0x438>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e023      	b.n	8005f24 <HAL_DMA_IRQHandler+0x440>
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2204      	movs	r2, #4
 8005f32:	409a      	lsls	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0204 	orr.w	r2, r3, #4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80a6 	beq.w	80060a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a85      	ldr	r2, [pc, #532]	; (8006174 <HAL_DMA_IRQHandler+0x690>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a83      	ldr	r2, [pc, #524]	; (8006178 <HAL_DMA_IRQHandler+0x694>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a82      	ldr	r2, [pc, #520]	; (800617c <HAL_DMA_IRQHandler+0x698>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_DMA_IRQHandler+0x69c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a7f      	ldr	r2, [pc, #508]	; (8006184 <HAL_DMA_IRQHandler+0x6a0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a7d      	ldr	r2, [pc, #500]	; (8006188 <HAL_DMA_IRQHandler+0x6a4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a7c      	ldr	r2, [pc, #496]	; (800618c <HAL_DMA_IRQHandler+0x6a8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a7a      	ldr	r2, [pc, #488]	; (8006190 <HAL_DMA_IRQHandler+0x6ac>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a79      	ldr	r2, [pc, #484]	; (8006194 <HAL_DMA_IRQHandler+0x6b0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a77      	ldr	r2, [pc, #476]	; (8006198 <HAL_DMA_IRQHandler+0x6b4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a76      	ldr	r2, [pc, #472]	; (800619c <HAL_DMA_IRQHandler+0x6b8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a74      	ldr	r2, [pc, #464]	; (80061a0 <HAL_DMA_IRQHandler+0x6bc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a73      	ldr	r2, [pc, #460]	; (80061a4 <HAL_DMA_IRQHandler+0x6c0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a71      	ldr	r2, [pc, #452]	; (80061a8 <HAL_DMA_IRQHandler+0x6c4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a70      	ldr	r2, [pc, #448]	; (80061ac <HAL_DMA_IRQHandler+0x6c8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x516>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a6e      	ldr	r2, [pc, #440]	; (80061b0 <HAL_DMA_IRQHandler+0x6cc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10a      	bne.n	8006010 <HAL_DMA_IRQHandler+0x52c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e009      	b.n	8006024 <HAL_DMA_IRQHandler+0x540>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03e      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2210      	movs	r2, #16
 8006032:	409a      	lsls	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d108      	bne.n	8006066 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d024      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	e01f      	b.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	e016      	b.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0208 	bic.w	r2, r2, #8
 8006094:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2220      	movs	r2, #32
 80060b0:	409a      	lsls	r2, r3
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8110 	beq.w	80062dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a2c      	ldr	r2, [pc, #176]	; (8006174 <HAL_DMA_IRQHandler+0x690>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d04a      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2b      	ldr	r2, [pc, #172]	; (8006178 <HAL_DMA_IRQHandler+0x694>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d045      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a29      	ldr	r2, [pc, #164]	; (800617c <HAL_DMA_IRQHandler+0x698>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d040      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a28      	ldr	r2, [pc, #160]	; (8006180 <HAL_DMA_IRQHandler+0x69c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d03b      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a26      	ldr	r2, [pc, #152]	; (8006184 <HAL_DMA_IRQHandler+0x6a0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d036      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a25      	ldr	r2, [pc, #148]	; (8006188 <HAL_DMA_IRQHandler+0x6a4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d031      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a23      	ldr	r2, [pc, #140]	; (800618c <HAL_DMA_IRQHandler+0x6a8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d02c      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a22      	ldr	r2, [pc, #136]	; (8006190 <HAL_DMA_IRQHandler+0x6ac>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d027      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <HAL_DMA_IRQHandler+0x6b0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d022      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <HAL_DMA_IRQHandler+0x6b4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01d      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <HAL_DMA_IRQHandler+0x6b8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d018      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <HAL_DMA_IRQHandler+0x6bc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_DMA_IRQHandler+0x6c0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00e      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <HAL_DMA_IRQHandler+0x6c4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d009      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <HAL_DMA_IRQHandler+0x6c8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <HAL_DMA_IRQHandler+0x678>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <HAL_DMA_IRQHandler+0x6cc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d12b      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x6d0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e02a      	b.n	80061c8 <HAL_DMA_IRQHandler+0x6e4>
 8006172:	bf00      	nop
 8006174:	40020010 	.word	0x40020010
 8006178:	40020028 	.word	0x40020028
 800617c:	40020040 	.word	0x40020040
 8006180:	40020058 	.word	0x40020058
 8006184:	40020070 	.word	0x40020070
 8006188:	40020088 	.word	0x40020088
 800618c:	400200a0 	.word	0x400200a0
 8006190:	400200b8 	.word	0x400200b8
 8006194:	40020410 	.word	0x40020410
 8006198:	40020428 	.word	0x40020428
 800619c:	40020440 	.word	0x40020440
 80061a0:	40020458 	.word	0x40020458
 80061a4:	40020470 	.word	0x40020470
 80061a8:	40020488 	.word	0x40020488
 80061ac:	400204a0 	.word	0x400204a0
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8087 	beq.w	80062dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	2220      	movs	r2, #32
 80061d8:	409a      	lsls	r2, r3
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d139      	bne.n	800625e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0216 	bic.w	r2, r2, #22
 80061f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006208:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <HAL_DMA_IRQHandler+0x736>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0208 	bic.w	r2, r2, #8
 8006228:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	223f      	movs	r2, #63	; 0x3f
 8006234:	409a      	lsls	r2, r3
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 834a 	beq.w	80068e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
          }
          return;
 800625c:	e344      	b.n	80068e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	2b00      	cmp	r3, #0
 8006280:	d02c      	beq.n	80062dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	e027      	b.n	80062dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d023      	beq.n	80062dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	e01e      	b.n	80062dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10f      	bne.n	80062cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0210 	bic.w	r2, r2, #16
 80062ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8306 	beq.w	80068f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8088 	beq.w	8006404 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2204      	movs	r2, #4
 80062f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a7a      	ldr	r2, [pc, #488]	; (80064ec <HAL_DMA_IRQHandler+0xa08>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d04a      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a79      	ldr	r2, [pc, #484]	; (80064f0 <HAL_DMA_IRQHandler+0xa0c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d045      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a77      	ldr	r2, [pc, #476]	; (80064f4 <HAL_DMA_IRQHandler+0xa10>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d040      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a76      	ldr	r2, [pc, #472]	; (80064f8 <HAL_DMA_IRQHandler+0xa14>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d03b      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a74      	ldr	r2, [pc, #464]	; (80064fc <HAL_DMA_IRQHandler+0xa18>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d036      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a73      	ldr	r2, [pc, #460]	; (8006500 <HAL_DMA_IRQHandler+0xa1c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d031      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a71      	ldr	r2, [pc, #452]	; (8006504 <HAL_DMA_IRQHandler+0xa20>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d02c      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a70      	ldr	r2, [pc, #448]	; (8006508 <HAL_DMA_IRQHandler+0xa24>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d027      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a6e      	ldr	r2, [pc, #440]	; (800650c <HAL_DMA_IRQHandler+0xa28>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a6d      	ldr	r2, [pc, #436]	; (8006510 <HAL_DMA_IRQHandler+0xa2c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01d      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a6b      	ldr	r2, [pc, #428]	; (8006514 <HAL_DMA_IRQHandler+0xa30>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6a      	ldr	r2, [pc, #424]	; (8006518 <HAL_DMA_IRQHandler+0xa34>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a68      	ldr	r2, [pc, #416]	; (800651c <HAL_DMA_IRQHandler+0xa38>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a67      	ldr	r2, [pc, #412]	; (8006520 <HAL_DMA_IRQHandler+0xa3c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a65      	ldr	r2, [pc, #404]	; (8006524 <HAL_DMA_IRQHandler+0xa40>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_DMA_IRQHandler+0x8b8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a64      	ldr	r2, [pc, #400]	; (8006528 <HAL_DMA_IRQHandler+0xa44>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d108      	bne.n	80063ae <HAL_DMA_IRQHandler+0x8ca>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e007      	b.n	80063be <HAL_DMA_IRQHandler+0x8da>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d307      	bcc.n	80063da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f2      	bne.n	80063be <HAL_DMA_IRQHandler+0x8da>
 80063d8:	e000      	b.n	80063dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80063da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80063f2:	e003      	b.n	80063fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8272 	beq.w	80068f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	e26c      	b.n	80068f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a43      	ldr	r2, [pc, #268]	; (800652c <HAL_DMA_IRQHandler+0xa48>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d022      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_DMA_IRQHandler+0xa4c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d01d      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a40      	ldr	r2, [pc, #256]	; (8006534 <HAL_DMA_IRQHandler+0xa50>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <HAL_DMA_IRQHandler+0xa54>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a3d      	ldr	r2, [pc, #244]	; (800653c <HAL_DMA_IRQHandler+0xa58>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <HAL_DMA_IRQHandler+0xa5c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3a      	ldr	r2, [pc, #232]	; (8006544 <HAL_DMA_IRQHandler+0xa60>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_DMA_IRQHandler+0x984>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a39      	ldr	r2, [pc, #228]	; (8006548 <HAL_DMA_IRQHandler+0xa64>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d101      	bne.n	800646c <HAL_DMA_IRQHandler+0x988>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <HAL_DMA_IRQHandler+0x98a>
 800646c:	2300      	movs	r3, #0
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 823f 	beq.w	80068f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2204      	movs	r2, #4
 8006486:	409a      	lsls	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80cd 	beq.w	800662c <HAL_DMA_IRQHandler+0xb48>
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80c7 	beq.w	800662c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2204      	movs	r2, #4
 80064a8:	409a      	lsls	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d049      	beq.n	800654c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8210 	beq.w	80068ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064d4:	e20a      	b.n	80068ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8206 	beq.w	80068ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e8:	e200      	b.n	80068ec <HAL_DMA_IRQHandler+0xe08>
 80064ea:	bf00      	nop
 80064ec:	40020010 	.word	0x40020010
 80064f0:	40020028 	.word	0x40020028
 80064f4:	40020040 	.word	0x40020040
 80064f8:	40020058 	.word	0x40020058
 80064fc:	40020070 	.word	0x40020070
 8006500:	40020088 	.word	0x40020088
 8006504:	400200a0 	.word	0x400200a0
 8006508:	400200b8 	.word	0x400200b8
 800650c:	40020410 	.word	0x40020410
 8006510:	40020428 	.word	0x40020428
 8006514:	40020440 	.word	0x40020440
 8006518:	40020458 	.word	0x40020458
 800651c:	40020470 	.word	0x40020470
 8006520:	40020488 	.word	0x40020488
 8006524:	400204a0 	.word	0x400204a0
 8006528:	400204b8 	.word	0x400204b8
 800652c:	58025408 	.word	0x58025408
 8006530:	5802541c 	.word	0x5802541c
 8006534:	58025430 	.word	0x58025430
 8006538:	58025444 	.word	0x58025444
 800653c:	58025458 	.word	0x58025458
 8006540:	5802546c 	.word	0x5802546c
 8006544:	58025480 	.word	0x58025480
 8006548:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d160      	bne.n	8006618 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a8c      	ldr	r2, [pc, #560]	; (800678c <HAL_DMA_IRQHandler+0xca8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d04a      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a8a      	ldr	r2, [pc, #552]	; (8006790 <HAL_DMA_IRQHandler+0xcac>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d045      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a89      	ldr	r2, [pc, #548]	; (8006794 <HAL_DMA_IRQHandler+0xcb0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d040      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a87      	ldr	r2, [pc, #540]	; (8006798 <HAL_DMA_IRQHandler+0xcb4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d03b      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a86      	ldr	r2, [pc, #536]	; (800679c <HAL_DMA_IRQHandler+0xcb8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d036      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a84      	ldr	r2, [pc, #528]	; (80067a0 <HAL_DMA_IRQHandler+0xcbc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d031      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a83      	ldr	r2, [pc, #524]	; (80067a4 <HAL_DMA_IRQHandler+0xcc0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d02c      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a81      	ldr	r2, [pc, #516]	; (80067a8 <HAL_DMA_IRQHandler+0xcc4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d027      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a80      	ldr	r2, [pc, #512]	; (80067ac <HAL_DMA_IRQHandler+0xcc8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a7e      	ldr	r2, [pc, #504]	; (80067b0 <HAL_DMA_IRQHandler+0xccc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01d      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a7d      	ldr	r2, [pc, #500]	; (80067b4 <HAL_DMA_IRQHandler+0xcd0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7b      	ldr	r2, [pc, #492]	; (80067b8 <HAL_DMA_IRQHandler+0xcd4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a7a      	ldr	r2, [pc, #488]	; (80067bc <HAL_DMA_IRQHandler+0xcd8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a78      	ldr	r2, [pc, #480]	; (80067c0 <HAL_DMA_IRQHandler+0xcdc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a77      	ldr	r2, [pc, #476]	; (80067c4 <HAL_DMA_IRQHandler+0xce0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xb12>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a75      	ldr	r2, [pc, #468]	; (80067c8 <HAL_DMA_IRQHandler+0xce4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <HAL_DMA_IRQHandler+0xb24>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0208 	bic.w	r2, r2, #8
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e007      	b.n	8006618 <HAL_DMA_IRQHandler+0xb34>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0204 	bic.w	r2, r2, #4
 8006616:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8165 	beq.w	80068ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800662a:	e15f      	b.n	80068ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	2202      	movs	r2, #2
 8006636:	409a      	lsls	r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80c5 	beq.w	80067cc <HAL_DMA_IRQHandler+0xce8>
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80bf 	beq.w	80067cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2202      	movs	r2, #2
 8006658:	409a      	lsls	r2, r3
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d018      	beq.n	800669a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 813a 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006684:	e134      	b.n	80068f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8130 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006698:	e12a      	b.n	80068f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d168      	bne.n	8006776 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a38      	ldr	r2, [pc, #224]	; (800678c <HAL_DMA_IRQHandler+0xca8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d04a      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a37      	ldr	r2, [pc, #220]	; (8006790 <HAL_DMA_IRQHandler+0xcac>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d045      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a35      	ldr	r2, [pc, #212]	; (8006794 <HAL_DMA_IRQHandler+0xcb0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d040      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <HAL_DMA_IRQHandler+0xcb4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d03b      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a32      	ldr	r2, [pc, #200]	; (800679c <HAL_DMA_IRQHandler+0xcb8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d036      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a31      	ldr	r2, [pc, #196]	; (80067a0 <HAL_DMA_IRQHandler+0xcbc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d031      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2f      	ldr	r2, [pc, #188]	; (80067a4 <HAL_DMA_IRQHandler+0xcc0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02c      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a2e      	ldr	r2, [pc, #184]	; (80067a8 <HAL_DMA_IRQHandler+0xcc4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d027      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <HAL_DMA_IRQHandler+0xcc8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2b      	ldr	r2, [pc, #172]	; (80067b0 <HAL_DMA_IRQHandler+0xccc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d01d      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <HAL_DMA_IRQHandler+0xcd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a28      	ldr	r2, [pc, #160]	; (80067b8 <HAL_DMA_IRQHandler+0xcd4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <HAL_DMA_IRQHandler+0xcd8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <HAL_DMA_IRQHandler+0xcdc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a23      	ldr	r2, [pc, #140]	; (80067c4 <HAL_DMA_IRQHandler+0xce0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_DMA_IRQHandler+0xc60>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <HAL_DMA_IRQHandler+0xce4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d108      	bne.n	8006756 <HAL_DMA_IRQHandler+0xc72>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0214 	bic.w	r2, r2, #20
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e007      	b.n	8006766 <HAL_DMA_IRQHandler+0xc82>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 020a 	bic.w	r2, r2, #10
 8006764:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80b8 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006788:	e0b2      	b.n	80068f0 <HAL_DMA_IRQHandler+0xe0c>
 800678a:	bf00      	nop
 800678c:	40020010 	.word	0x40020010
 8006790:	40020028 	.word	0x40020028
 8006794:	40020040 	.word	0x40020040
 8006798:	40020058 	.word	0x40020058
 800679c:	40020070 	.word	0x40020070
 80067a0:	40020088 	.word	0x40020088
 80067a4:	400200a0 	.word	0x400200a0
 80067a8:	400200b8 	.word	0x400200b8
 80067ac:	40020410 	.word	0x40020410
 80067b0:	40020428 	.word	0x40020428
 80067b4:	40020440 	.word	0x40020440
 80067b8:	40020458 	.word	0x40020458
 80067bc:	40020470 	.word	0x40020470
 80067c0:	40020488 	.word	0x40020488
 80067c4:	400204a0 	.word	0x400204a0
 80067c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2208      	movs	r2, #8
 80067d6:	409a      	lsls	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8088 	beq.w	80068f2 <HAL_DMA_IRQHandler+0xe0e>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8082 	beq.w	80068f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a41      	ldr	r2, [pc, #260]	; (80068f8 <HAL_DMA_IRQHandler+0xe14>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d04a      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3f      	ldr	r2, [pc, #252]	; (80068fc <HAL_DMA_IRQHandler+0xe18>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d045      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a3e      	ldr	r2, [pc, #248]	; (8006900 <HAL_DMA_IRQHandler+0xe1c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d040      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a3c      	ldr	r2, [pc, #240]	; (8006904 <HAL_DMA_IRQHandler+0xe20>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d03b      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a3b      	ldr	r2, [pc, #236]	; (8006908 <HAL_DMA_IRQHandler+0xe24>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d036      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a39      	ldr	r2, [pc, #228]	; (800690c <HAL_DMA_IRQHandler+0xe28>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d031      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a38      	ldr	r2, [pc, #224]	; (8006910 <HAL_DMA_IRQHandler+0xe2c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d02c      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a36      	ldr	r2, [pc, #216]	; (8006914 <HAL_DMA_IRQHandler+0xe30>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d027      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a35      	ldr	r2, [pc, #212]	; (8006918 <HAL_DMA_IRQHandler+0xe34>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d022      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a33      	ldr	r2, [pc, #204]	; (800691c <HAL_DMA_IRQHandler+0xe38>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01d      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a32      	ldr	r2, [pc, #200]	; (8006920 <HAL_DMA_IRQHandler+0xe3c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d018      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a30      	ldr	r2, [pc, #192]	; (8006924 <HAL_DMA_IRQHandler+0xe40>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <HAL_DMA_IRQHandler+0xe44>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00e      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	; (800692c <HAL_DMA_IRQHandler+0xe48>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <HAL_DMA_IRQHandler+0xe4c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_DMA_IRQHandler+0xdaa>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <HAL_DMA_IRQHandler+0xe50>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <HAL_DMA_IRQHandler+0xdbc>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 021c 	bic.w	r2, r2, #28
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e007      	b.n	80068b0 <HAL_DMA_IRQHandler+0xdcc>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 020e 	bic.w	r2, r2, #14
 80068ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2201      	movs	r2, #1
 80068ba:	409a      	lsls	r2, r3
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	e004      	b.n	80068f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068f2:	3728      	adds	r7, #40	; 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40020010 	.word	0x40020010
 80068fc:	40020028 	.word	0x40020028
 8006900:	40020040 	.word	0x40020040
 8006904:	40020058 	.word	0x40020058
 8006908:	40020070 	.word	0x40020070
 800690c:	40020088 	.word	0x40020088
 8006910:	400200a0 	.word	0x400200a0
 8006914:	400200b8 	.word	0x400200b8
 8006918:	40020410 	.word	0x40020410
 800691c:	40020428 	.word	0x40020428
 8006920:	40020440 	.word	0x40020440
 8006924:	40020458 	.word	0x40020458
 8006928:	40020470 	.word	0x40020470
 800692c:	40020488 	.word	0x40020488
 8006930:	400204a0 	.word	0x400204a0
 8006934:	400204b8 	.word	0x400204b8

08006938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a42      	ldr	r2, [pc, #264]	; (8006a50 <DMA_CalcBaseAndBitshift+0x118>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d04a      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a41      	ldr	r2, [pc, #260]	; (8006a54 <DMA_CalcBaseAndBitshift+0x11c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d045      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a3f      	ldr	r2, [pc, #252]	; (8006a58 <DMA_CalcBaseAndBitshift+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d040      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a3e      	ldr	r2, [pc, #248]	; (8006a5c <DMA_CalcBaseAndBitshift+0x124>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d03b      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a3c      	ldr	r2, [pc, #240]	; (8006a60 <DMA_CalcBaseAndBitshift+0x128>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d036      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a3b      	ldr	r2, [pc, #236]	; (8006a64 <DMA_CalcBaseAndBitshift+0x12c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d031      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a39      	ldr	r2, [pc, #228]	; (8006a68 <DMA_CalcBaseAndBitshift+0x130>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d02c      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a38      	ldr	r2, [pc, #224]	; (8006a6c <DMA_CalcBaseAndBitshift+0x134>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d027      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a36      	ldr	r2, [pc, #216]	; (8006a70 <DMA_CalcBaseAndBitshift+0x138>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d022      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a35      	ldr	r2, [pc, #212]	; (8006a74 <DMA_CalcBaseAndBitshift+0x13c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d01d      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a33      	ldr	r2, [pc, #204]	; (8006a78 <DMA_CalcBaseAndBitshift+0x140>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d018      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <DMA_CalcBaseAndBitshift+0x144>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a30      	ldr	r2, [pc, #192]	; (8006a80 <DMA_CalcBaseAndBitshift+0x148>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2f      	ldr	r2, [pc, #188]	; (8006a84 <DMA_CalcBaseAndBitshift+0x14c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2d      	ldr	r2, [pc, #180]	; (8006a88 <DMA_CalcBaseAndBitshift+0x150>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <DMA_CalcBaseAndBitshift+0xa8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2c      	ldr	r2, [pc, #176]	; (8006a8c <DMA_CalcBaseAndBitshift+0x154>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d101      	bne.n	80069e4 <DMA_CalcBaseAndBitshift+0xac>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <DMA_CalcBaseAndBitshift+0xae>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d024      	beq.n	8006a34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	3b10      	subs	r3, #16
 80069f2:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <DMA_CalcBaseAndBitshift+0x158>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	4a24      	ldr	r2, [pc, #144]	; (8006a94 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a04:	5cd3      	ldrb	r3, [r2, r3]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d908      	bls.n	8006a24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <DMA_CalcBaseAndBitshift+0x160>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	659a      	str	r2, [r3, #88]	; 0x58
 8006a22:	e00d      	b.n	8006a40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <DMA_CalcBaseAndBitshift+0x160>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6593      	str	r3, [r2, #88]	; 0x58
 8006a32:	e005      	b.n	8006a40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
 8006a90:	aaaaaaab 	.word	0xaaaaaaab
 8006a94:	0800f810 	.word	0x0800f810
 8006a98:	fffffc00 	.word	0xfffffc00

08006a9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d120      	bne.n	8006af2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d858      	bhi.n	8006b6a <DMA_CheckFifoParam+0xce>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <DMA_CheckFifoParam+0x24>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ae3 	.word	0x08006ae3
 8006ac8:	08006ad1 	.word	0x08006ad1
 8006acc:	08006b6b 	.word	0x08006b6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d048      	beq.n	8006b6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ae0:	e045      	b.n	8006b6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006aea:	d142      	bne.n	8006b72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006af0:	e03f      	b.n	8006b72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afa:	d123      	bne.n	8006b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d838      	bhi.n	8006b76 <DMA_CheckFifoParam+0xda>
 8006b04:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <DMA_CheckFifoParam+0x70>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b23 	.word	0x08006b23
 8006b14:	08006b1d 	.word	0x08006b1d
 8006b18:	08006b35 	.word	0x08006b35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b20:	e030      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d025      	beq.n	8006b7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b32:	e022      	b.n	8006b7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b3c:	d11f      	bne.n	8006b7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b42:	e01c      	b.n	8006b7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d902      	bls.n	8006b52 <DMA_CheckFifoParam+0xb6>
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d003      	beq.n	8006b58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b50:	e018      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
        break;
 8006b56:	e015      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
    break;
 8006b68:	e00b      	b.n	8006b82 <DMA_CheckFifoParam+0xe6>
        break;
 8006b6a:	bf00      	nop
 8006b6c:	e00a      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        break;
 8006b6e:	bf00      	nop
 8006b70:	e008      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        break;
 8006b72:	bf00      	nop
 8006b74:	e006      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        break;
 8006b76:	bf00      	nop
 8006b78:	e004      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e002      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7e:	bf00      	nop
 8006b80:	e000      	b.n	8006b84 <DMA_CheckFifoParam+0xe8>
    break;
 8006b82:	bf00      	nop
    }
  }

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop

08006b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a38      	ldr	r2, [pc, #224]	; (8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a36      	ldr	r2, [pc, #216]	; (8006c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a35      	ldr	r2, [pc, #212]	; (8006c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a33      	ldr	r2, [pc, #204]	; (8006c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a32      	ldr	r2, [pc, #200]	; (8006c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a2f      	ldr	r2, [pc, #188]	; (8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01a      	beq.n	8006c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	3b08      	subs	r3, #8
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c06:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2201      	movs	r2, #1
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c30:	e024      	b.n	8006c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	3b10      	subs	r3, #16
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d806      	bhi.n	8006c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d902      	bls.n	8006c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3308      	adds	r3, #8
 8006c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	58025408 	.word	0x58025408
 8006c8c:	5802541c 	.word	0x5802541c
 8006c90:	58025430 	.word	0x58025430
 8006c94:	58025444 	.word	0x58025444
 8006c98:	58025458 	.word	0x58025458
 8006c9c:	5802546c 	.word	0x5802546c
 8006ca0:	58025480 	.word	0x58025480
 8006ca4:	58025494 	.word	0x58025494
 8006ca8:	cccccccd 	.word	0xcccccccd
 8006cac:	16009600 	.word	0x16009600
 8006cb0:	58025880 	.word	0x58025880
 8006cb4:	aaaaaaab 	.word	0xaaaaaaab
 8006cb8:	400204b8 	.word	0x400204b8
 8006cbc:	4002040f 	.word	0x4002040f
 8006cc0:	10008200 	.word	0x10008200
 8006cc4:	40020880 	.word	0x40020880

08006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d04a      	beq.n	8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d847      	bhi.n	8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a25      	ldr	r2, [pc, #148]	; (8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d01d      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d101      	bne.n	8006d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d50:	671a      	str	r2, [r3, #112]	; 0x70
 8006d52:	e009      	b.n	8006d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	58025408 	.word	0x58025408
 8006d84:	5802541c 	.word	0x5802541c
 8006d88:	58025430 	.word	0x58025430
 8006d8c:	58025444 	.word	0x58025444
 8006d90:	58025458 	.word	0x58025458
 8006d94:	5802546c 	.word	0x5802546c
 8006d98:	58025480 	.word	0x58025480
 8006d9c:	58025494 	.word	0x58025494
 8006da0:	1600963f 	.word	0x1600963f
 8006da4:	58025940 	.word	0x58025940
 8006da8:	1000823f 	.word	0x1000823f
 8006dac:	40020940 	.word	0x40020940

08006db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006dbe:	4b86      	ldr	r3, [pc, #536]	; (8006fd8 <HAL_GPIO_Init+0x228>)
 8006dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dc2:	e18c      	b.n	80070de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 817e 	beq.w	80070d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d005      	beq.n	8006df4 <HAL_GPIO_Init+0x44>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d130      	bne.n	8006e56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	2203      	movs	r2, #3
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	091b      	lsrs	r3, r3, #4
 8006e40:	f003 0201 	and.w	r2, r3, #1
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d017      	beq.n	8006e92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	43db      	mvns	r3, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4013      	ands	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d123      	bne.n	8006ee6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	08da      	lsrs	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3208      	adds	r2, #8
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	220f      	movs	r2, #15
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	08da      	lsrs	r2, r3, #3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3208      	adds	r2, #8
 8006ee0:	69b9      	ldr	r1, [r7, #24]
 8006ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 0203 	and.w	r2, r3, #3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80d8 	beq.w	80070d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f28:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <HAL_GPIO_Init+0x22c>)
 8006f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f2e:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <HAL_GPIO_Init+0x22c>)
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <HAL_GPIO_Init+0x22c>)
 8006f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f46:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <HAL_GPIO_Init+0x230>)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4013      	ands	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_GPIO_Init+0x234>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04a      	beq.n	8007008 <HAL_GPIO_Init+0x258>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <HAL_GPIO_Init+0x238>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d02b      	beq.n	8006fd2 <HAL_GPIO_Init+0x222>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <HAL_GPIO_Init+0x23c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d025      	beq.n	8006fce <HAL_GPIO_Init+0x21e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <HAL_GPIO_Init+0x240>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01f      	beq.n	8006fca <HAL_GPIO_Init+0x21a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <HAL_GPIO_Init+0x244>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d019      	beq.n	8006fc6 <HAL_GPIO_Init+0x216>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_GPIO_Init+0x248>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_GPIO_Init+0x212>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_GPIO_Init+0x24c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00d      	beq.n	8006fbe <HAL_GPIO_Init+0x20e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a16      	ldr	r2, [pc, #88]	; (8007000 <HAL_GPIO_Init+0x250>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d007      	beq.n	8006fba <HAL_GPIO_Init+0x20a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a15      	ldr	r2, [pc, #84]	; (8007004 <HAL_GPIO_Init+0x254>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d101      	bne.n	8006fb6 <HAL_GPIO_Init+0x206>
 8006fb2:	2309      	movs	r3, #9
 8006fb4:	e029      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e027      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fba:	2307      	movs	r3, #7
 8006fbc:	e025      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fbe:	2306      	movs	r3, #6
 8006fc0:	e023      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fc2:	2305      	movs	r3, #5
 8006fc4:	e021      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fc6:	2304      	movs	r3, #4
 8006fc8:	e01f      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e01d      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e01b      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e019      	b.n	800700a <HAL_GPIO_Init+0x25a>
 8006fd6:	bf00      	nop
 8006fd8:	58000080 	.word	0x58000080
 8006fdc:	58024400 	.word	0x58024400
 8006fe0:	58000400 	.word	0x58000400
 8006fe4:	58020000 	.word	0x58020000
 8006fe8:	58020400 	.word	0x58020400
 8006fec:	58020800 	.word	0x58020800
 8006ff0:	58020c00 	.word	0x58020c00
 8006ff4:	58021000 	.word	0x58021000
 8006ff8:	58021400 	.word	0x58021400
 8006ffc:	58021800 	.word	0x58021800
 8007000:	58021c00 	.word	0x58021c00
 8007004:	58022400 	.word	0x58022400
 8007008:	2300      	movs	r3, #0
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	f002 0203 	and.w	r2, r2, #3
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4093      	lsls	r3, r2
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	4313      	orrs	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800701a:	4938      	ldr	r1, [pc, #224]	; (80070fc <HAL_GPIO_Init+0x34c>)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	089b      	lsrs	r3, r3, #2
 8007020:	3302      	adds	r3, #2
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	43db      	mvns	r3, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4013      	ands	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800704e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	43db      	mvns	r3, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4013      	ands	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800707c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	43db      	mvns	r3, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	3301      	adds	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f47f ae6b 	bne.w	8006dc4 <HAL_GPIO_Init+0x14>
  }
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	58000400 	.word	0x58000400

08007100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
 800710c:	4613      	mov	r3, r2
 800710e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007110:	787b      	ldrb	r3, [r7, #1]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007116:	887a      	ldrh	r2, [r7, #2]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800711c:	e003      	b.n	8007126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800711e:	887b      	ldrh	r3, [r7, #2]
 8007120:	041a      	lsls	r2, r3, #16
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	619a      	str	r2, [r3, #24]
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800713c:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b04      	cmp	r3, #4
 8007146:	d00a      	beq.n	800715e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007148:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d001      	beq.n	800715a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e01f      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e01d      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800715e:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f023 0207 	bic.w	r2, r3, #7
 8007166:	490f      	ldr	r1, [pc, #60]	; (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4313      	orrs	r3, r2
 800716c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800716e:	f7fc fcd5 	bl	8003b1c <HAL_GetTick>
 8007172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007174:	e009      	b.n	800718a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007176:	f7fc fcd1 	bl	8003b1c <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007184:	d901      	bls.n	800718a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e007      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007196:	d1ee      	bne.n	8007176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	58024800 	.word	0x58024800

080071a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	; 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e397      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 8087 	beq.w	80072d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c8:	4b9e      	ldr	r3, [pc, #632]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071d2:	4b9c      	ldr	r3, [pc, #624]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d007      	beq.n	80071ee <HAL_RCC_OscConfig+0x46>
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	2b18      	cmp	r3, #24
 80071e2:	d110      	bne.n	8007206 <HAL_RCC_OscConfig+0x5e>
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d10b      	bne.n	8007206 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ee:	4b95      	ldr	r3, [pc, #596]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d06c      	beq.n	80072d4 <HAL_RCC_OscConfig+0x12c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d168      	bne.n	80072d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e371      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720e:	d106      	bne.n	800721e <HAL_RCC_OscConfig+0x76>
 8007210:	4b8c      	ldr	r3, [pc, #560]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a8b      	ldr	r2, [pc, #556]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e02e      	b.n	800727c <HAL_RCC_OscConfig+0xd4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10c      	bne.n	8007240 <HAL_RCC_OscConfig+0x98>
 8007226:	4b87      	ldr	r3, [pc, #540]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a86      	ldr	r2, [pc, #536]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800722c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	4b84      	ldr	r3, [pc, #528]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a83      	ldr	r2, [pc, #524]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e01d      	b.n	800727c <HAL_RCC_OscConfig+0xd4>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0xbc>
 800724a:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7d      	ldr	r2, [pc, #500]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a7a      	ldr	r2, [pc, #488]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800725c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0xd4>
 8007264:	4b77      	ldr	r3, [pc, #476]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a76      	ldr	r2, [pc, #472]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800726a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	4b74      	ldr	r3, [pc, #464]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a73      	ldr	r2, [pc, #460]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800727a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d013      	beq.n	80072ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fc fc4a 	bl	8003b1c <HAL_GetTick>
 8007288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800728c:	f7fc fc46 	bl	8003b1c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b64      	cmp	r3, #100	; 0x64
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e325      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800729e:	4b69      	ldr	r3, [pc, #420]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0xe4>
 80072aa:	e014      	b.n	80072d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fc fc36 	bl	8003b1c <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b4:	f7fc fc32 	bl	8003b1c <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e311      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072c6:	4b5f      	ldr	r3, [pc, #380]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x10c>
 80072d2:	e000      	b.n	80072d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 808a 	beq.w	80073f8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e4:	4b57      	ldr	r3, [pc, #348]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072ee:	4b55      	ldr	r3, [pc, #340]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <HAL_RCC_OscConfig+0x162>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2b18      	cmp	r3, #24
 80072fe:	d137      	bne.n	8007370 <HAL_RCC_OscConfig+0x1c8>
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d132      	bne.n	8007370 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800730a:	4b4e      	ldr	r3, [pc, #312]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RCC_OscConfig+0x17a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e2e3      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007322:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 0219 	bic.w	r2, r3, #25
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4945      	ldr	r1, [pc, #276]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007334:	f7fc fbf2 	bl	8003b1c <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800733c:	f7fc fbee 	bl	8003b1c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e2cd      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800734e:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b3a      	ldr	r3, [pc, #232]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	061b      	lsls	r3, r3, #24
 8007368:	4936      	ldr	r1, [pc, #216]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800736e:	e043      	b.n	80073f8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d026      	beq.n	80073c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007378:	4b32      	ldr	r3, [pc, #200]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f023 0219 	bic.w	r2, r3, #25
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	492f      	ldr	r1, [pc, #188]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738a:	f7fc fbc7 	bl	8003b1c <HAL_GetTick>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007392:	f7fc fbc3 	bl	8003b1c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e2a2      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b0:	4b24      	ldr	r3, [pc, #144]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	061b      	lsls	r3, r3, #24
 80073be:	4921      	ldr	r1, [pc, #132]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	e018      	b.n	80073f8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1e      	ldr	r2, [pc, #120]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d2:	f7fc fba3 	bl	8003b1c <HAL_GetTick>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073da:	f7fc fb9f 	bl	8003b1c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e27e      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073ec:	4b15      	ldr	r3, [pc, #84]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d06d      	beq.n	80074e0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800740c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b08      	cmp	r3, #8
 8007418:	d007      	beq.n	800742a <HAL_RCC_OscConfig+0x282>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b18      	cmp	r3, #24
 800741e:	d11e      	bne.n	800745e <HAL_RCC_OscConfig+0x2b6>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b01      	cmp	r3, #1
 8007428:	d119      	bne.n	800745e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_RCC_OscConfig+0x29c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_RCC_OscConfig+0x2a0>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	2b80      	cmp	r3, #128	; 0x80
 800743c:	d004      	beq.n	8007448 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e253      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007448:	4ba3      	ldr	r3, [pc, #652]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	061b      	lsls	r3, r3, #24
 8007456:	49a0      	ldr	r1, [pc, #640]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007458:	4313      	orrs	r3, r2
 800745a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800745c:	e040      	b.n	80074e0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d023      	beq.n	80074ae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007466:	4b9c      	ldr	r3, [pc, #624]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a9b      	ldr	r2, [pc, #620]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fc fb53 	bl	8003b1c <HAL_GetTick>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800747a:	f7fc fb4f 	bl	8003b1c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e22e      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800748c:	4b92      	ldr	r3, [pc, #584]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007498:	4b8f      	ldr	r3, [pc, #572]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	498c      	ldr	r1, [pc, #560]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60cb      	str	r3, [r1, #12]
 80074ac:	e018      	b.n	80074e0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80074ae:	4b8a      	ldr	r3, [pc, #552]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a89      	ldr	r2, [pc, #548]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fc fb2f 	bl	8003b1c <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80074c2:	f7fc fb2b 	bl	8003b1c <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e20a      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074d4:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f0      	bne.n	80074c2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d036      	beq.n	800755a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074f4:	4b78      	ldr	r3, [pc, #480]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f8:	4a77      	ldr	r2, [pc, #476]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fc fb0c 	bl	8003b1c <HAL_GetTick>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007508:	f7fc fb08 	bl	8003b1c <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e1e7      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800751a:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800751c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0x360>
 8007526:	e018      	b.n	800755a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007528:	4b6b      	ldr	r3, [pc, #428]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800752a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752c:	4a6a      	ldr	r2, [pc, #424]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007534:	f7fc faf2 	bl	8003b1c <HAL_GetTick>
 8007538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800753c:	f7fc faee 	bl	8003b1c <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e1cd      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800754e:	4b62      	ldr	r3, [pc, #392]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d036      	beq.n	80075d4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d019      	beq.n	80075a2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800756e:	4b5a      	ldr	r3, [pc, #360]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a59      	ldr	r2, [pc, #356]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007578:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800757a:	f7fc facf 	bl	8003b1c <HAL_GetTick>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007582:	f7fc facb 	bl	8003b1c <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e1aa      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007594:	4b50      	ldr	r3, [pc, #320]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <HAL_RCC_OscConfig+0x3da>
 80075a0:	e018      	b.n	80075d4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075a2:	4b4d      	ldr	r3, [pc, #308]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a4c      	ldr	r2, [pc, #304]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80075a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075ae:	f7fc fab5 	bl	8003b1c <HAL_GetTick>
 80075b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80075b6:	f7fc fab1 	bl	8003b1c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e190      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075c8:	4b43      	ldr	r3, [pc, #268]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f0      	bne.n	80075b6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8085 	beq.w	80076ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075e2:	4b3e      	ldr	r3, [pc, #248]	; (80076dc <HAL_RCC_OscConfig+0x534>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a3d      	ldr	r2, [pc, #244]	; (80076dc <HAL_RCC_OscConfig+0x534>)
 80075e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075ee:	f7fc fa95 	bl	8003b1c <HAL_GetTick>
 80075f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075f6:	f7fc fa91 	bl	8003b1c <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	; 0x64
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e170      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007608:	4b34      	ldr	r3, [pc, #208]	; (80076dc <HAL_RCC_OscConfig+0x534>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d106      	bne.n	800762a <HAL_RCC_OscConfig+0x482>
 800761c:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007620:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	6713      	str	r3, [r2, #112]	; 0x70
 8007628:	e02d      	b.n	8007686 <HAL_RCC_OscConfig+0x4de>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10c      	bne.n	800764c <HAL_RCC_OscConfig+0x4a4>
 8007632:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	4a28      	ldr	r2, [pc, #160]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	6713      	str	r3, [r2, #112]	; 0x70
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007644:	f023 0304 	bic.w	r3, r3, #4
 8007648:	6713      	str	r3, [r2, #112]	; 0x70
 800764a:	e01c      	b.n	8007686 <HAL_RCC_OscConfig+0x4de>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b05      	cmp	r3, #5
 8007652:	d10c      	bne.n	800766e <HAL_RCC_OscConfig+0x4c6>
 8007654:	4b20      	ldr	r3, [pc, #128]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007658:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800765a:	f043 0304 	orr.w	r3, r3, #4
 800765e:	6713      	str	r3, [r2, #112]	; 0x70
 8007660:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007664:	4a1c      	ldr	r2, [pc, #112]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	6713      	str	r3, [r2, #112]	; 0x70
 800766c:	e00b      	b.n	8007686 <HAL_RCC_OscConfig+0x4de>
 800766e:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	6713      	str	r3, [r2, #112]	; 0x70
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	4a16      	ldr	r2, [pc, #88]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 8007680:	f023 0304 	bic.w	r3, r3, #4
 8007684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768e:	f7fc fa45 	bl	8003b1c <HAL_GetTick>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fc fa41 	bl	8003b1c <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e11e      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <HAL_RCC_OscConfig+0x530>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0ee      	beq.n	8007696 <HAL_RCC_OscConfig+0x4ee>
 80076b8:	e018      	b.n	80076ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ba:	f7fc fa2f 	bl	8003b1c <HAL_GetTick>
 80076be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076c0:	e00e      	b.n	80076e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c2:	f7fc fa2b 	bl	8003b1c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d905      	bls.n	80076e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e108      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
 80076d8:	58024400 	.word	0x58024400
 80076dc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076e0:	4b84      	ldr	r3, [pc, #528]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80076e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ea      	bne.n	80076c2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80f9 	beq.w	80078e8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80076f6:	4b7f      	ldr	r3, [pc, #508]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fe:	2b18      	cmp	r3, #24
 8007700:	f000 80b4 	beq.w	800786c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b02      	cmp	r3, #2
 800770a:	f040 8095 	bne.w	8007838 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770e:	4b79      	ldr	r3, [pc, #484]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a78      	ldr	r2, [pc, #480]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fc f9ff 	bl	8003b1c <HAL_GetTick>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007722:	f7fc f9fb 	bl	8003b1c <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e0da      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007734:	4b6f      	ldr	r3, [pc, #444]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f0      	bne.n	8007722 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007740:	4b6c      	ldr	r3, [pc, #432]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007744:	4b6c      	ldr	r3, [pc, #432]	; (80078f8 <HAL_RCC_OscConfig+0x750>)
 8007746:	4013      	ands	r3, r2
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007750:	0112      	lsls	r2, r2, #4
 8007752:	430a      	orrs	r2, r1
 8007754:	4967      	ldr	r1, [pc, #412]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007756:	4313      	orrs	r3, r2
 8007758:	628b      	str	r3, [r1, #40]	; 0x28
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	3b01      	subs	r3, #1
 8007760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007768:	3b01      	subs	r3, #1
 800776a:	025b      	lsls	r3, r3, #9
 800776c:	b29b      	uxth	r3, r3
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	3b01      	subs	r3, #1
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	3b01      	subs	r3, #1
 8007784:	061b      	lsls	r3, r3, #24
 8007786:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800778a:	495a      	ldr	r1, [pc, #360]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800778c:	4313      	orrs	r3, r2
 800778e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007790:	4b58      	ldr	r3, [pc, #352]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a57      	ldr	r2, [pc, #348]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007796:	f023 0301 	bic.w	r3, r3, #1
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800779c:	4b55      	ldr	r3, [pc, #340]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800779e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a0:	4b56      	ldr	r3, [pc, #344]	; (80078fc <HAL_RCC_OscConfig+0x754>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80077a8:	00d2      	lsls	r2, r2, #3
 80077aa:	4952      	ldr	r1, [pc, #328]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077b0:	4b50      	ldr	r3, [pc, #320]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f023 020c 	bic.w	r2, r3, #12
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	494d      	ldr	r1, [pc, #308]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80077c2:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	f023 0202 	bic.w	r2, r3, #2
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ce:	4949      	ldr	r1, [pc, #292]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077d4:	4b47      	ldr	r3, [pc, #284]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4a46      	ldr	r2, [pc, #280]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e0:	4b44      	ldr	r3, [pc, #272]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	4a43      	ldr	r2, [pc, #268]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80077ec:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4a40      	ldr	r2, [pc, #256]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80077f8:	4b3e      	ldr	r3, [pc, #248]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4a3d      	ldr	r2, [pc, #244]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007804:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a3a      	ldr	r2, [pc, #232]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800780a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800780e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fc f984 	bl	8003b1c <HAL_GetTick>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007818:	f7fc f980 	bl	8003b1c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e05f      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800782a:	4b32      	ldr	r3, [pc, #200]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCC_OscConfig+0x670>
 8007836:	e057      	b.n	80078e8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007838:	4b2e      	ldr	r3, [pc, #184]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800783e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fc f96a 	bl	8003b1c <HAL_GetTick>
 8007848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800784c:	f7fc f966 	bl	8003b1c <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e045      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800785e:	4b25      	ldr	r3, [pc, #148]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0x6a4>
 800786a:	e03d      	b.n	80078e8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800786c:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007872:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <HAL_RCC_OscConfig+0x74c>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b01      	cmp	r3, #1
 800787e:	d031      	beq.n	80078e4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f003 0203 	and.w	r2, r3, #3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800788a:	429a      	cmp	r2, r3
 800788c:	d12a      	bne.n	80078e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800789a:	429a      	cmp	r2, r3
 800789c:	d122      	bne.n	80078e4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d11a      	bne.n	80078e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	0a5b      	lsrs	r3, r3, #9
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078bc:	429a      	cmp	r2, r3
 80078be:	d111      	bne.n	80078e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d108      	bne.n	80078e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	0e1b      	lsrs	r3, r3, #24
 80078d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d001      	beq.n	80078e8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3730      	adds	r7, #48	; 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
 80078f8:	fffffc0c 	.word	0xfffffc0c
 80078fc:	ffff0007 	.word	0xffff0007

08007900 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e19c      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007914:	4b8a      	ldr	r3, [pc, #552]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d910      	bls.n	8007944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007922:	4b87      	ldr	r3, [pc, #540]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f023 020f 	bic.w	r2, r3, #15
 800792a:	4985      	ldr	r1, [pc, #532]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	4313      	orrs	r3, r2
 8007930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007932:	4b83      	ldr	r3, [pc, #524]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d001      	beq.n	8007944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e184      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d010      	beq.n	8007972 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	4b7b      	ldr	r3, [pc, #492]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800795c:	429a      	cmp	r2, r3
 800795e:	d908      	bls.n	8007972 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007960:	4b78      	ldr	r3, [pc, #480]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	4975      	ldr	r1, [pc, #468]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 800796e:	4313      	orrs	r3, r2
 8007970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	4b70      	ldr	r3, [pc, #448]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800798a:	429a      	cmp	r2, r3
 800798c:	d908      	bls.n	80079a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800798e:	4b6d      	ldr	r3, [pc, #436]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	496a      	ldr	r1, [pc, #424]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 800799c:	4313      	orrs	r3, r2
 800799e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d010      	beq.n	80079ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	4b64      	ldr	r3, [pc, #400]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d908      	bls.n	80079ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079bc:	4b61      	ldr	r3, [pc, #388]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	495e      	ldr	r1, [pc, #376]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d010      	beq.n	80079fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	4b59      	ldr	r3, [pc, #356]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d908      	bls.n	80079fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079ea:	4b56      	ldr	r3, [pc, #344]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	4953      	ldr	r1, [pc, #332]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d010      	beq.n	8007a2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d908      	bls.n	8007a2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a18:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f023 020f 	bic.w	r2, r3, #15
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	4947      	ldr	r1, [pc, #284]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d055      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007a36:	4b43      	ldr	r3, [pc, #268]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	4940      	ldr	r1, [pc, #256]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a50:	4b3c      	ldr	r3, [pc, #240]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d121      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0f6      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d107      	bne.n	8007a78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a68:	4b36      	ldr	r3, [pc, #216]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d115      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e0ea      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d107      	bne.n	8007a90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a80:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0de      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a90:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0d6      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aa0:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f023 0207 	bic.w	r2, r3, #7
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4925      	ldr	r1, [pc, #148]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab2:	f7fc f833 	bl	8003b1c <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aba:	f7fc f82f 	bl	8003b1c <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e0be      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d1eb      	bne.n	8007aba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d010      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	4b14      	ldr	r3, [pc, #80]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d208      	bcs.n	8007b10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f023 020f 	bic.w	r2, r3, #15
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	490e      	ldr	r1, [pc, #56]	; (8007b44 <HAL_RCC_ClockConfig+0x244>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d214      	bcs.n	8007b48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f023 020f 	bic.w	r2, r3, #15
 8007b26:	4906      	ldr	r1, [pc, #24]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <HAL_RCC_ClockConfig+0x240>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d005      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e086      	b.n	8007c4e <HAL_RCC_ClockConfig+0x34e>
 8007b40:	52002000 	.word	0x52002000
 8007b44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d010      	beq.n	8007b76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	4b3f      	ldr	r3, [pc, #252]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d208      	bcs.n	8007b76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b64:	4b3c      	ldr	r3, [pc, #240]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	4939      	ldr	r1, [pc, #228]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	4b34      	ldr	r3, [pc, #208]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d208      	bcs.n	8007ba4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b92:	4b31      	ldr	r3, [pc, #196]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	492e      	ldr	r1, [pc, #184]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d208      	bcs.n	8007bd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007bc0:	4b25      	ldr	r3, [pc, #148]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	4922      	ldr	r1, [pc, #136]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d010      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d208      	bcs.n	8007c00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bee:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	4917      	ldr	r1, [pc, #92]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c00:	f000 f844 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8007c04:	4602      	mov	r2, r0
 8007c06:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	4912      	ldr	r1, [pc, #72]	; (8007c5c <HAL_RCC_ClockConfig+0x35c>)
 8007c12:	5ccb      	ldrb	r3, [r1, r3]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <HAL_RCC_ClockConfig+0x358>)
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <HAL_RCC_ClockConfig+0x35c>)
 8007c28:	5cd3      	ldrb	r3, [r2, r3]
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	fa22 f303 	lsr.w	r3, r2, r3
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <HAL_RCC_ClockConfig+0x360>)
 8007c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c38:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <HAL_RCC_ClockConfig+0x364>)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_RCC_ClockConfig+0x368>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fb ff20 	bl	8003a88 <HAL_InitTick>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	0800f800 	.word	0x0800f800
 8007c60:	2400000c 	.word	0x2400000c
 8007c64:	24000008 	.word	0x24000008
 8007c68:	24000010 	.word	0x24000010

08007c6c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCC_EnableCSS+0x1c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <HAL_RCC_EnableCSS+0x1c>)
 8007c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400

08007c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b089      	sub	sp, #36	; 0x24
 8007c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c92:	4bb3      	ldr	r3, [pc, #716]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c9a:	2b18      	cmp	r3, #24
 8007c9c:	f200 8155 	bhi.w	8007f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007f4b 	.word	0x08007f4b
 8007cb0:	08007f4b 	.word	0x08007f4b
 8007cb4:	08007f4b 	.word	0x08007f4b
 8007cb8:	08007f4b 	.word	0x08007f4b
 8007cbc:	08007f4b 	.word	0x08007f4b
 8007cc0:	08007f4b 	.word	0x08007f4b
 8007cc4:	08007f4b 	.word	0x08007f4b
 8007cc8:	08007d33 	.word	0x08007d33
 8007ccc:	08007f4b 	.word	0x08007f4b
 8007cd0:	08007f4b 	.word	0x08007f4b
 8007cd4:	08007f4b 	.word	0x08007f4b
 8007cd8:	08007f4b 	.word	0x08007f4b
 8007cdc:	08007f4b 	.word	0x08007f4b
 8007ce0:	08007f4b 	.word	0x08007f4b
 8007ce4:	08007f4b 	.word	0x08007f4b
 8007ce8:	08007d39 	.word	0x08007d39
 8007cec:	08007f4b 	.word	0x08007f4b
 8007cf0:	08007f4b 	.word	0x08007f4b
 8007cf4:	08007f4b 	.word	0x08007f4b
 8007cf8:	08007f4b 	.word	0x08007f4b
 8007cfc:	08007f4b 	.word	0x08007f4b
 8007d00:	08007f4b 	.word	0x08007f4b
 8007d04:	08007f4b 	.word	0x08007f4b
 8007d08:	08007d3f 	.word	0x08007d3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d0c:	4b94      	ldr	r3, [pc, #592]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d18:	4b91      	ldr	r3, [pc, #580]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	08db      	lsrs	r3, r3, #3
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	4a90      	ldr	r2, [pc, #576]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007d2a:	e111      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d2c:	4b8d      	ldr	r3, [pc, #564]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d2e:	61bb      	str	r3, [r7, #24]
    break;
 8007d30:	e10e      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007d32:	4b8d      	ldr	r3, [pc, #564]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d34:	61bb      	str	r3, [r7, #24]
    break;
 8007d36:	e10b      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007d38:	4b8c      	ldr	r3, [pc, #560]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007d3a:	61bb      	str	r3, [r7, #24]
    break;
 8007d3c:	e108      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d3e:	4b88      	ldr	r3, [pc, #544]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007d48:	4b85      	ldr	r3, [pc, #532]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4c:	091b      	lsrs	r3, r3, #4
 8007d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d54:	4b82      	ldr	r3, [pc, #520]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d5e:	4b80      	ldr	r3, [pc, #512]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80e1 	beq.w	8007f44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	f000 8083 	beq.w	8007e90 <HAL_RCC_GetSysClockFreq+0x204>
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	f200 80a1 	bhi.w	8007ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_RCC_GetSysClockFreq+0x114>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d056      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d9e:	e099      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007da0:	4b6f      	ldr	r3, [pc, #444]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d02d      	beq.n	8007e08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dac:	4b6c      	ldr	r3, [pc, #432]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	08db      	lsrs	r3, r3, #3
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	4a6b      	ldr	r2, [pc, #428]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd6:	4b62      	ldr	r3, [pc, #392]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007e06:	e087      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1a:	4b51      	ldr	r3, [pc, #324]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e4a:	e065      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e8e:	e043      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b2f      	ldr	r3, [pc, #188]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed2:	e021      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007efa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	0a5b      	lsrs	r3, r3, #9
 8007f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f22:	3301      	adds	r3, #1
 8007f24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3c:	ee17 3a90 	vmov	r3, s15
 8007f40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007f42:	e005      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61bb      	str	r3, [r7, #24]
    break;
 8007f48:	e002      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f4c:	61bb      	str	r3, [r7, #24]
    break;
 8007f4e:	bf00      	nop
  }

  return sysclockfreq;
 8007f50:	69bb      	ldr	r3, [r7, #24]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3724      	adds	r7, #36	; 0x24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
 8007f64:	03d09000 	.word	0x03d09000
 8007f68:	003d0900 	.word	0x003d0900
 8007f6c:	017d7840 	.word	0x017d7840
 8007f70:	46000000 	.word	0x46000000
 8007f74:	4c742400 	.word	0x4c742400
 8007f78:	4a742400 	.word	0x4a742400
 8007f7c:	4bbebc20 	.word	0x4bbebc20

08007f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f86:	f7ff fe81 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	0a1b      	lsrs	r3, r3, #8
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	490f      	ldr	r1, [pc, #60]	; (8007fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f98:	5ccb      	ldrb	r3, [r1, r3]
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007fae:	5cd3      	ldrb	r3, [r2, r3]
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007fbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fbe:	4a07      	ldr	r2, [pc, #28]	; (8007fdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	0800f800 	.word	0x0800f800
 8007fd8:	2400000c 	.word	0x2400000c
 8007fdc:	24000008 	.word	0x24000008

08007fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007fe4:	f7ff ffcc 	bl	8007f80 <HAL_RCC_GetHCLKFreq>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	091b      	lsrs	r3, r3, #4
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	4904      	ldr	r1, [pc, #16]	; (8008008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ff6:	5ccb      	ldrb	r3, [r1, r3]
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008000:	4618      	mov	r0, r3
 8008002:	bd80      	pop	{r7, pc}
 8008004:	58024400 	.word	0x58024400
 8008008:	0800f800 	.word	0x0800f800

0800800c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008010:	f7ff ffb6 	bl	8007f80 <HAL_RCC_GetHCLKFreq>
 8008014:	4602      	mov	r2, r0
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008022:	5ccb      	ldrb	r3, [r1, r3]
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800802c:	4618      	mov	r0, r3
 800802e:	bd80      	pop	{r7, pc}
 8008030:	58024400 	.word	0x58024400
 8008034:	0800f800 	.word	0x0800f800

08008038 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800803c:	4b07      	ldr	r3, [pc, #28]	; (800805c <HAL_RCC_NMI_IRQHandler+0x24>)
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d105      	bne.n	8008056 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800804a:	f000 f809 	bl	8008060 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800804e:	4b03      	ldr	r3, [pc, #12]	; (800805c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008054:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8008056:	bf00      	nop
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	58024400 	.word	0x58024400

08008060 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008078:	2300      	movs	r3, #0
 800807a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800807c:	2300      	movs	r3, #0
 800807e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d03f      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008094:	d02a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800809a:	d824      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800809c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a0:	d018      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a6:	d81e      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80080ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b0:	d007      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80080b2:	e018      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4bab      	ldr	r3, [pc, #684]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4aaa      	ldr	r2, [pc, #680]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80080c0:	e015      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	2102      	movs	r1, #2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f001 feff 	bl	8009ecc <RCCEx_PLL2_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80080d2:	e00c      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	2102      	movs	r1, #2
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 ffa8 	bl	800a030 <RCCEx_PLL3_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80080e4:	e003      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80080ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080f4:	4b9b      	ldr	r3, [pc, #620]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008100:	4998      	ldr	r1, [pc, #608]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008102:	4313      	orrs	r3, r2
 8008104:	650b      	str	r3, [r1, #80]	; 0x50
 8008106:	e001      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d03d      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	2b04      	cmp	r3, #4
 800811e:	d826      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008120:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	0800813d 	.word	0x0800813d
 800812c:	0800814b 	.word	0x0800814b
 8008130:	0800815d 	.word	0x0800815d
 8008134:	08008175 	.word	0x08008175
 8008138:	08008175 	.word	0x08008175
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813c:	4b89      	ldr	r3, [pc, #548]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4a88      	ldr	r2, [pc, #544]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008148:	e015      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f001 febb 	bl	8009ecc <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800815a:	e00c      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f001 ff64 	bl	800a030 <RCCEx_PLL3_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800816c:	e003      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	75fb      	strb	r3, [r7, #23]
      break;
 8008172:	e000      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800817c:	4b79      	ldr	r3, [pc, #484]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	f023 0207 	bic.w	r2, r3, #7
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008188:	4976      	ldr	r1, [pc, #472]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800818a:	4313      	orrs	r3, r2
 800818c:	650b      	str	r3, [r1, #80]	; 0x50
 800818e:	e001      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819c:	2b00      	cmp	r3, #0
 800819e:	d051      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80081aa:	d036      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80081ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80081b0:	d830      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80081b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081b6:	d032      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80081b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081bc:	d82a      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80081be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081c2:	d02e      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80081c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081c8:	d824      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80081ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ce:	d018      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80081d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081d4:	d81e      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80081da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081de:	d007      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80081e0:	e018      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e2:	4b60      	ldr	r3, [pc, #384]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a5f      	ldr	r2, [pc, #380]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081ee:	e019      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fe68 	bl	8009ecc <RCCEx_PLL2_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008200:	e010      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3324      	adds	r3, #36	; 0x24
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f001 ff11 	bl	800a030 <RCCEx_PLL3_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008212:	e007      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	e004      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800821a:	bf00      	nop
 800821c:	e002      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800821e:	bf00      	nop
 8008220:	e000      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800822a:	4b4e      	ldr	r3, [pc, #312]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008238:	494a      	ldr	r1, [pc, #296]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800823a:	4313      	orrs	r3, r2
 800823c:	658b      	str	r3, [r1, #88]	; 0x58
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800824c:	2b00      	cmp	r3, #0
 800824e:	d051      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008256:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800825a:	d036      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800825c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008260:	d830      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008266:	d032      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800826c:	d82a      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800826e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008272:	d02e      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008274:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008278:	d824      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800827e:	d018      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008284:	d81e      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800828a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800828e:	d007      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008290:	e018      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008292:	4b34      	ldr	r3, [pc, #208]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	4a33      	ldr	r2, [pc, #204]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800829e:	e019      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	2100      	movs	r1, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fe10 	bl	8009ecc <RCCEx_PLL2_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80082b0:	e010      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3324      	adds	r3, #36	; 0x24
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 feb9 	bl	800a030 <RCCEx_PLL3_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082c2:	e007      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
      break;
 80082c8:	e004      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80082d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80082da:	4b22      	ldr	r3, [pc, #136]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082e8:	491e      	ldr	r1, [pc, #120]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	658b      	str	r3, [r1, #88]	; 0x58
 80082ee:	e001      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d035      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008304:	2b30      	cmp	r3, #48	; 0x30
 8008306:	d01c      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	d817      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800830c:	2b20      	cmp	r3, #32
 800830e:	d00c      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008310:	2b20      	cmp	r3, #32
 8008312:	d813      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008318:	2b10      	cmp	r3, #16
 800831a:	d10f      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831c:	4b11      	ldr	r3, [pc, #68]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	4a10      	ldr	r2, [pc, #64]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008328:	e00e      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3304      	adds	r3, #4
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fdcb 	bl	8009ecc <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800833a:	e005      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
      break;
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835a:	4902      	ldr	r1, [pc, #8]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800835c:	4313      	orrs	r3, r2
 800835e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008360:	e004      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008362:	bf00      	nop
 8008364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d047      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008380:	d030      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008386:	d82a      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800838c:	d02c      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800838e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008392:	d824      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008398:	d018      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800839a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839e:	d81e      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80083a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a8:	d007      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80083aa:	e018      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ac:	4bac      	ldr	r3, [pc, #688]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4aab      	ldr	r2, [pc, #684]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083b8:	e017      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fd83 	bl	8009ecc <RCCEx_PLL2_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083ca:	e00e      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fe2c 	bl	800a030 <RCCEx_PLL3_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083dc:	e005      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      break;
 80083e2:	e002      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80083e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083f0:	4b9b      	ldr	r3, [pc, #620]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	4998      	ldr	r1, [pc, #608]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	650b      	str	r3, [r1, #80]	; 0x50
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d049      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800841c:	d02e      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800841e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008422:	d828      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008428:	d02a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800842a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800842e:	d822      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008434:	d026      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800843a:	d81c      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800843c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008440:	d010      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008446:	d816      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01d      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800844c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008450:	d111      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3304      	adds	r3, #4
 8008456:	2101      	movs	r1, #1
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fd37 	bl	8009ecc <RCCEx_PLL2_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008462:	e012      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3324      	adds	r3, #36	; 0x24
 8008468:	2101      	movs	r1, #1
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fde0 	bl	800a030 <RCCEx_PLL3_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008474:	e009      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]
      break;
 800847a:	e006      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800847c:	bf00      	nop
 800847e:	e004      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d109      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008490:	4b73      	ldr	r3, [pc, #460]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849c:	4970      	ldr	r1, [pc, #448]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	650b      	str	r3, [r1, #80]	; 0x50
 80084a2:	e001      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d04b      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084be:	d02e      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80084c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c4:	d828      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d02a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d822      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80084d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084d6:	d026      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80084d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084dc:	d81c      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80084de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e2:	d010      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80084e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e8:	d816      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01d      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80084ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f2:	d111      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3304      	adds	r3, #4
 80084f8:	2101      	movs	r1, #1
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fce6 	bl	8009ecc <RCCEx_PLL2_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008504:	e012      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fd8f 	bl	800a030 <RCCEx_PLL3_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008516:	e009      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
      break;
 800851c:	e006      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800851e:	bf00      	nop
 8008520:	e004      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008522:	bf00      	nop
 8008524:	e002      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008526:	bf00      	nop
 8008528:	e000      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800852a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008532:	4b4b      	ldr	r3, [pc, #300]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008540:	4947      	ldr	r1, [pc, #284]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	658b      	str	r3, [r1, #88]	; 0x58
 8008546:	e001      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d02f      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800855c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008560:	d00e      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008566:	d814      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800856c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008570:	d10f      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008572:	4b3b      	ldr	r3, [pc, #236]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4a3a      	ldr	r2, [pc, #232]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800857e:	e00c      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	2101      	movs	r1, #1
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fca0 	bl	8009ecc <RCCEx_PLL2_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008590:	e003      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
      break;
 8008596:	e000      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085a0:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ac:	492c      	ldr	r1, [pc, #176]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	650b      	str	r3, [r1, #80]	; 0x50
 80085b2:	e001      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d032      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d81b      	bhi.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	0800860b 	.word	0x0800860b
 80085d8:	080085e5 	.word	0x080085e5
 80085dc:	080085f3 	.word	0x080085f3
 80085e0:	0800860b 	.word	0x0800860b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e4:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80085f0:	e00c      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	2102      	movs	r1, #2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fc67 	bl	8009ecc <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008602:	e003      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
      break;
 8008608:	e000      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800860a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008616:	f023 0203 	bic.w	r2, r3, #3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	4910      	ldr	r1, [pc, #64]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008620:	4313      	orrs	r3, r2
 8008622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008624:	e001      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 808a 	beq.w	800874c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008638:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a09      	ldr	r2, [pc, #36]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800863e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008644:	f7fb fa6a 	bl	8003b1c <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800864a:	e00d      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800864c:	f7fb fa66 	bl	8003b1c <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	; 0x64
 8008658:	d906      	bls.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	75fb      	strb	r3, [r7, #23]
        break;
 800865e:	e009      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008660:	58024400 	.word	0x58024400
 8008664:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008668:	4bb9      	ldr	r3, [pc, #740]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0eb      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d166      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800867a:	4bb6      	ldr	r3, [pc, #728]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800867c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008684:	4053      	eors	r3, r2
 8008686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d013      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800868e:	4bb1      	ldr	r3, [pc, #708]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008696:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008698:	4bae      	ldr	r3, [pc, #696]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	4aad      	ldr	r2, [pc, #692]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800869e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086a4:	4bab      	ldr	r3, [pc, #684]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a8:	4aaa      	ldr	r2, [pc, #680]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086b0:	4aa8      	ldr	r2, [pc, #672]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c0:	d115      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c2:	f7fb fa2b 	bl	8003b1c <HAL_GetTick>
 80086c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086c8:	e00b      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ca:	f7fb fa27 	bl	8003b1c <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d8:	4293      	cmp	r3, r2
 80086da:	d902      	bls.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	75fb      	strb	r3, [r7, #23]
            break;
 80086e0:	e005      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086e2:	4b9c      	ldr	r3, [pc, #624]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0ed      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d126      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008702:	d10d      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8008704:	4b93      	ldr	r3, [pc, #588]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008712:	0919      	lsrs	r1, r3, #4
 8008714:	4b90      	ldr	r3, [pc, #576]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008716:	400b      	ands	r3, r1
 8008718:	498e      	ldr	r1, [pc, #568]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800871a:	4313      	orrs	r3, r2
 800871c:	610b      	str	r3, [r1, #16]
 800871e:	e005      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008720:	4b8c      	ldr	r3, [pc, #560]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4a8b      	ldr	r2, [pc, #556]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008726:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800872a:	6113      	str	r3, [r2, #16]
 800872c:	4b89      	ldr	r3, [pc, #548]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800872e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873a:	4986      	ldr	r1, [pc, #536]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800873c:	4313      	orrs	r3, r2
 800873e:	670b      	str	r3, [r1, #112]	; 0x70
 8008740:	e004      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	75bb      	strb	r3, [r7, #22]
 8008746:	e001      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d07e      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875c:	2b28      	cmp	r3, #40	; 0x28
 800875e:	d867      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008760:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	08008837 	.word	0x08008837
 800876c:	08008831 	.word	0x08008831
 8008770:	08008831 	.word	0x08008831
 8008774:	08008831 	.word	0x08008831
 8008778:	08008831 	.word	0x08008831
 800877c:	08008831 	.word	0x08008831
 8008780:	08008831 	.word	0x08008831
 8008784:	08008831 	.word	0x08008831
 8008788:	0800880d 	.word	0x0800880d
 800878c:	08008831 	.word	0x08008831
 8008790:	08008831 	.word	0x08008831
 8008794:	08008831 	.word	0x08008831
 8008798:	08008831 	.word	0x08008831
 800879c:	08008831 	.word	0x08008831
 80087a0:	08008831 	.word	0x08008831
 80087a4:	08008831 	.word	0x08008831
 80087a8:	0800881f 	.word	0x0800881f
 80087ac:	08008831 	.word	0x08008831
 80087b0:	08008831 	.word	0x08008831
 80087b4:	08008831 	.word	0x08008831
 80087b8:	08008831 	.word	0x08008831
 80087bc:	08008831 	.word	0x08008831
 80087c0:	08008831 	.word	0x08008831
 80087c4:	08008831 	.word	0x08008831
 80087c8:	08008837 	.word	0x08008837
 80087cc:	08008831 	.word	0x08008831
 80087d0:	08008831 	.word	0x08008831
 80087d4:	08008831 	.word	0x08008831
 80087d8:	08008831 	.word	0x08008831
 80087dc:	08008831 	.word	0x08008831
 80087e0:	08008831 	.word	0x08008831
 80087e4:	08008831 	.word	0x08008831
 80087e8:	08008837 	.word	0x08008837
 80087ec:	08008831 	.word	0x08008831
 80087f0:	08008831 	.word	0x08008831
 80087f4:	08008831 	.word	0x08008831
 80087f8:	08008831 	.word	0x08008831
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008831 	.word	0x08008831
 8008804:	08008831 	.word	0x08008831
 8008808:	08008837 	.word	0x08008837
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3304      	adds	r3, #4
 8008810:	2101      	movs	r1, #1
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fb5a 	bl	8009ecc <RCCEx_PLL2_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800881c:	e00c      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3324      	adds	r3, #36	; 0x24
 8008822:	2101      	movs	r1, #1
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fc03 	bl	800a030 <RCCEx_PLL3_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800882e:	e003      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
      break;
 8008834:	e000      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800883e:	4b45      	ldr	r3, [pc, #276]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008842:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884a:	4942      	ldr	r1, [pc, #264]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800884c:	4313      	orrs	r3, r2
 800884e:	654b      	str	r3, [r1, #84]	; 0x54
 8008850:	e001      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d037      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	2b05      	cmp	r3, #5
 8008868:	d820      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	080088b3 	.word	0x080088b3
 8008874:	08008889 	.word	0x08008889
 8008878:	0800889b 	.word	0x0800889b
 800887c:	080088b3 	.word	0x080088b3
 8008880:	080088b3 	.word	0x080088b3
 8008884:	080088b3 	.word	0x080088b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	2101      	movs	r1, #1
 800888e:	4618      	mov	r0, r3
 8008890:	f001 fb1c 	bl	8009ecc <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008898:	e00c      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3324      	adds	r3, #36	; 0x24
 800889e:	2101      	movs	r1, #1
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fbc5 	bl	800a030 <RCCEx_PLL3_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80088aa:	e003      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
      break;
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80088ba:	4b26      	ldr	r3, [pc, #152]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	f023 0207 	bic.w	r2, r3, #7
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	4923      	ldr	r1, [pc, #140]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	654b      	str	r3, [r1, #84]	; 0x54
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d040      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d821      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008933 	.word	0x08008933
 80088f4:	08008909 	.word	0x08008909
 80088f8:	0800891b 	.word	0x0800891b
 80088fc:	08008933 	.word	0x08008933
 8008900:	08008933 	.word	0x08008933
 8008904:	08008933 	.word	0x08008933
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fadc 	bl	8009ecc <RCCEx_PLL2_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008918:	e00c      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3324      	adds	r3, #36	; 0x24
 800891e:	2101      	movs	r1, #1
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fb85 	bl	800a030 <RCCEx_PLL3_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800892a:	e003      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
      break;
 8008930:	e000      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d110      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893e:	f023 0207 	bic.w	r2, r3, #7
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008948:	4902      	ldr	r1, [pc, #8]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800894a:	4313      	orrs	r3, r2
 800894c:	658b      	str	r3, [r1, #88]	; 0x58
 800894e:	e007      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008950:	58024800 	.word	0x58024800
 8008954:	58024400 	.word	0x58024400
 8008958:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d04b      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008976:	d02e      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800897c:	d828      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008982:	d02a      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008988:	d822      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800898a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800898e:	d026      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008994:	d81c      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899a:	d010      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800899c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a0:	d816      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01d      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80089a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089aa:	d111      	bne.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3304      	adds	r3, #4
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fa8a 	bl	8009ecc <RCCEx_PLL2_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80089bc:	e012      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3324      	adds	r3, #36	; 0x24
 80089c2:	2102      	movs	r1, #2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fb33 	bl	800a030 <RCCEx_PLL3_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80089ce:	e009      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
      break;
 80089d4:	e006      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80089d6:	bf00      	nop
 80089d8:	e004      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80089da:	bf00      	nop
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80089e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ea:	4bb2      	ldr	r3, [pc, #712]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f8:	49ae      	ldr	r1, [pc, #696]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	654b      	str	r3, [r1, #84]	; 0x54
 80089fe:	e001      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d04b      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a1a:	d02e      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008a1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a20:	d828      	bhi.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a26:	d02a      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a2c:	d822      	bhi.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a32:	d026      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a38:	d81c      	bhi.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a3e:	d010      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a44:	d816      	bhi.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01d      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a4e:	d111      	bne.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fa38 	bl	8009ecc <RCCEx_PLL2_Config>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a60:	e012      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3324      	adds	r3, #36	; 0x24
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 fae1 	bl	800a030 <RCCEx_PLL3_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a72:	e009      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
      break;
 8008a78:	e006      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008a7a:	bf00      	nop
 8008a7c:	e004      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008a7e:	bf00      	nop
 8008a80:	e002      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008a82:	bf00      	nop
 8008a84:	e000      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a8e:	4b89      	ldr	r3, [pc, #548]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a9c:	4985      	ldr	r1, [pc, #532]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8008aa2:	e001      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
 8008aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d04b      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008aba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008abe:	d02e      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008ac0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ac4:	d828      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aca:	d02a      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad0:	d822      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008ad2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ad6:	d026      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008ad8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008adc:	d81c      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae2:	d010      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae8:	d816      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01d      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af2:	d111      	bne.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3304      	adds	r3, #4
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f9e6 	bl	8009ecc <RCCEx_PLL2_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b04:	e012      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	2102      	movs	r1, #2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 fa8f 	bl	800a030 <RCCEx_PLL3_Config>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b16:	e009      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1c:	e006      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e004      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b32:	4b60      	ldr	r3, [pc, #384]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b40:	495c      	ldr	r1, [pc, #368]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	658b      	str	r3, [r1, #88]	; 0x58
 8008b46:	e001      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d018      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3324      	adds	r3, #36	; 0x24
 8008b66:	2102      	movs	r1, #2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fa61 	bl	800a030 <RCCEx_PLL3_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008b78:	4b4e      	ldr	r3, [pc, #312]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b84:	494b      	ldr	r1, [pc, #300]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01a      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba0:	d10a      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3324      	adds	r3, #36	; 0x24
 8008ba6:	2102      	movs	r1, #2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fa41 	bl	800a030 <RCCEx_PLL3_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bb8:	4b3e      	ldr	r3, [pc, #248]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc6:	493b      	ldr	r1, [pc, #236]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d034      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be2:	d01d      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be8:	d817      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf2:	d009      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008bf4:	e011      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 f965 	bl	8009ecc <RCCEx_PLL2_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c06:	e00c      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3324      	adds	r3, #36	; 0x24
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 fa0e 	bl	800a030 <RCCEx_PLL3_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c18:	e003      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c1e:	e000      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c28:	4b22      	ldr	r3, [pc, #136]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c36:	491f      	ldr	r1, [pc, #124]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	658b      	str	r3, [r1, #88]	; 0x58
 8008c3c:	e001      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d036      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c58:	d01c      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c5e:	d816      	bhi.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c64:	d003      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c6a:	d007      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008c6c:	e00f      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6e:	4b11      	ldr	r3, [pc, #68]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c7a:	e00c      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3324      	adds	r3, #36	; 0x24
 8008c80:	2101      	movs	r1, #1
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f9d4 	bl	800a030 <RCCEx_PLL3_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c8c:	e003      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
      break;
 8008c92:	e000      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008caa:	4902      	ldr	r1, [pc, #8]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	654b      	str	r3, [r1, #84]	; 0x54
 8008cb0:	e004      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d029      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd4:	d007      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008cd6:	e00f      	b.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd8:	4b61      	ldr	r3, [pc, #388]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	4a60      	ldr	r2, [pc, #384]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ce4:	e00b      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 f8ed 	bl	8009ecc <RCCEx_PLL2_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d04:	4b56      	ldr	r3, [pc, #344]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d10:	4953      	ldr	r1, [pc, #332]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d16:	e001      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 f97e 	bl	800a030 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d030      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d52:	d017      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d58:	d811      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5e:	d013      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d64:	d80b      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d010      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	d106      	bne.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d70:	4b3b      	ldr	r3, [pc, #236]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	4a3a      	ldr	r2, [pc, #232]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008d7c:	e007      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	75fb      	strb	r3, [r7, #23]
      break;
 8008d82:	e004      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d94:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008da0:	492f      	ldr	r1, [pc, #188]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	654b      	str	r3, [r1, #84]	; 0x54
 8008da6:	e001      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d008      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008db8:	4b29      	ldr	r3, [pc, #164]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc4:	4926      	ldr	r1, [pc, #152]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d008      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dd6:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de2:	491f      	ldr	r1, [pc, #124]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00d      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008df4:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	4a19      	ldr	r2, [pc, #100]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dfe:	6113      	str	r3, [r2, #16]
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e0a:	4915      	ldr	r1, [pc, #84]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	da08      	bge.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e18:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e24:	490e      	ldr	r1, [pc, #56]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e44:	4906      	ldr	r1, [pc, #24]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008e4a:	7dbb      	ldrb	r3, [r7, #22]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e000      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400

08008e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b090      	sub	sp, #64	; 0x40
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e72:	f040 8089 	bne.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008e76:	4b95      	ldr	r3, [pc, #596]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d87d      	bhi.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ea1 	.word	0x08008ea1
 8008e90:	08008ec5 	.word	0x08008ec5
 8008e94:	08008ee9 	.word	0x08008ee9
 8008e98:	08008f7d 	.word	0x08008f7d
 8008e9c:	08008f0d 	.word	0x08008f0d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ea0:	4b8a      	ldr	r3, [pc, #552]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eac:	d107      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 feb8 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ebc:	e3ed      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec2:	e3ea      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ec4:	4b81      	ldr	r3, [pc, #516]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ed0:	d107      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed2:	f107 0318 	add.w	r3, r7, #24
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fbfe 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ee0:	e3db      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee6:	e3d8      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ee8:	4b78      	ldr	r3, [pc, #480]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef4:	d107      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ef6:	f107 030c 	add.w	r3, r7, #12
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fd40 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f04:	e3c9      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0a:	e3c6      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f0c:	4b6f      	ldr	r3, [pc, #444]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f14:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f16:	4b6d      	ldr	r3, [pc, #436]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d10c      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f28:	4b68      	ldr	r3, [pc, #416]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	08db      	lsrs	r3, r3, #3
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	4a67      	ldr	r2, [pc, #412]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3a:	e01e      	b.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f3c:	4b63      	ldr	r3, [pc, #396]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f48:	d106      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f50:	d102      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f52:	4b60      	ldr	r3, [pc, #384]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f56:	e010      	b.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f58:	4b5c      	ldr	r3, [pc, #368]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f64:	d106      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f6c:	d102      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f6e:	4b5a      	ldr	r3, [pc, #360]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f72:	e002      	b.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f78:	e38f      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f7a:	e38e      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f7c:	4b57      	ldr	r3, [pc, #348]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f80:	e38b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f86:	e388      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8e:	f040 80a7 	bne.w	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008f92:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008f9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fa2:	d054      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008faa:	f200 808b 	bhi.w	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008fb4:	f000 8083 	beq.w	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008fbe:	f200 8081 	bhi.w	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fc8:	d02f      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fd0:	d878      	bhi.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fde:	d012      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008fe0:	e070      	b.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fe2:	4b3a      	ldr	r3, [pc, #232]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fee:	d107      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fe17 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ffe:	e34c      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009004:	e349      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009006:	4b31      	ldr	r3, [pc, #196]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800900e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009012:	d107      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009014:	f107 0318 	add.w	r3, r7, #24
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fb5d 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009022:	e33a      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009028:	e337      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800902a:	4b28      	ldr	r3, [pc, #160]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009036:	d107      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fc9f 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009046:	e328      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904c:	e325      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800904e:	4b1f      	ldr	r3, [pc, #124]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009056:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009058:	4b1c      	ldr	r3, [pc, #112]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b04      	cmp	r3, #4
 8009062:	d10c      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800906a:	4b18      	ldr	r3, [pc, #96]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	08db      	lsrs	r3, r3, #3
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	4a16      	ldr	r2, [pc, #88]	; (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907c:	e01e      	b.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908a:	d106      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800908c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009098:	e010      	b.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800909a:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a6:	d106      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ae:	d102      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090b0:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b4:	e002      	b.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80090ba:	e2ee      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80090bc:	e2ed      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090be:	4b07      	ldr	r3, [pc, #28]	; (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c2:	e2ea      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c8:	e2e7      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80090ca:	bf00      	nop
 80090cc:	58024400 	.word	0x58024400
 80090d0:	03d09000 	.word	0x03d09000
 80090d4:	003d0900 	.word	0x003d0900
 80090d8:	017d7840 	.word	0x017d7840
 80090dc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e6:	f040 809c 	bne.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80090ea:	4b9e      	ldr	r3, [pc, #632]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80090f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090fa:	d054      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009102:	f200 808b 	bhi.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800910c:	f000 8083 	beq.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009116:	f200 8081 	bhi.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009120:	d02f      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009128:	d878      	bhi.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009136:	d012      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009138:	e070      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800913a:	4b8a      	ldr	r3, [pc, #552]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009146:	d107      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fd6b 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009156:	e2a0      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915c:	e29d      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800915e:	4b81      	ldr	r3, [pc, #516]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916c:	f107 0318 	add.w	r3, r7, #24
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fab1 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800917a:	e28e      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009180:	e28b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009182:	4b78      	ldr	r3, [pc, #480]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800918a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800918e:	d107      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009190:	f107 030c 	add.w	r3, r7, #12
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fbf3 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800919e:	e27c      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a4:	e279      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091a6:	4b6f      	ldr	r3, [pc, #444]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091b0:	4b6c      	ldr	r3, [pc, #432]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d10c      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091c2:	4b68      	ldr	r3, [pc, #416]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a66      	ldr	r2, [pc, #408]	; (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d4:	e01e      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091d6:	4b63      	ldr	r3, [pc, #396]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e2:	d106      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80091ec:	4b5f      	ldr	r3, [pc, #380]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f0:	e010      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091f2:	4b5c      	ldr	r3, [pc, #368]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091fe:	d106      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009206:	d102      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009208:	4b59      	ldr	r3, [pc, #356]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	e002      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009212:	e242      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009214:	e241      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009216:	4b57      	ldr	r3, [pc, #348]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800921a:	e23e      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009220:	e23b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009228:	f040 80a6 	bne.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800922c:	4b4d      	ldr	r3, [pc, #308]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800922e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009230:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009234:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800923c:	d054      	beq.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009244:	f200 808b 	bhi.w	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800924e:	f000 8083 	beq.w	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009258:	f200 8081 	bhi.w	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009262:	d02f      	beq.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800926a:	d878      	bhi.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009278:	d012      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800927a:	e070      	b.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800927c:	4b39      	ldr	r3, [pc, #228]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009288:	d107      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800928a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fcca 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009298:	e1ff      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929e:	e1fc      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a0:	4b30      	ldr	r3, [pc, #192]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ac:	d107      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ae:	f107 0318 	add.w	r3, r7, #24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fa10 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092bc:	e1ed      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c2:	e1ea      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092c4:	4b27      	ldr	r3, [pc, #156]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092d0:	d107      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fb52 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092e0:	e1db      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e6:	e1d8      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092e8:	4b1e      	ldr	r3, [pc, #120]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80092ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092f2:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d10c      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	2b00      	cmp	r3, #0
 8009302:	d109      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009304:	4b17      	ldr	r3, [pc, #92]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	08db      	lsrs	r3, r3, #3
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	4a16      	ldr	r2, [pc, #88]	; (8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009310:	fa22 f303 	lsr.w	r3, r2, r3
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009316:	e01e      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009318:	4b12      	ldr	r3, [pc, #72]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009324:	d106      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800932c:	d102      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009332:	e010      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009340:	d106      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009348:	d102      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800934e:	e002      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009354:	e1a1      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009356:	e1a0      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935c:	e19d      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009362:	e19a      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009364:	58024400 	.word	0x58024400
 8009368:	03d09000 	.word	0x03d09000
 800936c:	003d0900 	.word	0x003d0900
 8009370:	017d7840 	.word	0x017d7840
 8009374:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800937e:	d173      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009380:	4b9a      	ldr	r3, [pc, #616]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009390:	d02f      	beq.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009398:	d863      	bhi.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a6:	d012      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80093a8:	e05b      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093aa:	4b90      	ldr	r3, [pc, #576]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093b6:	d107      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b8:	f107 0318 	add.w	r3, r7, #24
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 f98b 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c6:	e168      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093cc:	e165      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ce:	4b87      	ldr	r3, [pc, #540]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093da:	d107      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093dc:	f107 030c 	add.w	r3, r7, #12
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 facd 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093ea:	e156      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093f0:	e153      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093f2:	4b7e      	ldr	r3, [pc, #504]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093fc:	4b7b      	ldr	r3, [pc, #492]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b04      	cmp	r3, #4
 8009406:	d10c      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800940e:	4b77      	ldr	r3, [pc, #476]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	08db      	lsrs	r3, r3, #3
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	4a75      	ldr	r2, [pc, #468]	; (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800941a:	fa22 f303 	lsr.w	r3, r2, r3
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009420:	e01e      	b.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009422:	4b72      	ldr	r3, [pc, #456]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942e:	d106      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009436:	d102      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009438:	4b6e      	ldr	r3, [pc, #440]	; (80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800943c:	e010      	b.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800943e:	4b6b      	ldr	r3, [pc, #428]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800944a:	d106      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009452:	d102      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009454:	4b68      	ldr	r3, [pc, #416]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009458:	e002      	b.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800945e:	e11c      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009460:	e11b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009466:	e118      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800946e:	d133      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009470:	4b5e      	ldr	r3, [pc, #376]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009486:	d012      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009488:	e023      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800948a:	4b58      	ldr	r3, [pc, #352]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009496:	d107      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fbc3 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094a6:	e0f8      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ac:	e0f5      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ae:	4b4f      	ldr	r3, [pc, #316]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ba:	d107      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094bc:	f107 0318 	add.w	r3, r7, #24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 f909 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094ca:	e0e6      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d0:	e0e3      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e0e0      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094de:	f040 808d 	bne.w	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80094e2:	4b42      	ldr	r3, [pc, #264]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80094e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094f2:	d06b      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094fa:	d874      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009502:	d056      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950a:	d86c      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009512:	d03b      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800951a:	d864      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009522:	d021      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952a:	d85c      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009538:	d004      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800953a:	e054      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800953c:	f000 f8b6 	bl	80096ac <HAL_RCCEx_GetD3PCLK1Freq>
 8009540:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009542:	e0aa      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009544:	4b29      	ldr	r3, [pc, #164]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f8be 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009560:	e09b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009566:	e098      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009568:	4b20      	ldr	r3, [pc, #128]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009576:	f107 030c 	add.w	r3, r7, #12
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fa00 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009584:	e089      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958a:	e086      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800958c:	4b17      	ldr	r3, [pc, #92]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b04      	cmp	r3, #4
 8009596:	d109      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009598:	4b14      	ldr	r3, [pc, #80]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	08db      	lsrs	r3, r3, #3
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095aa:	e076      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b0:	e073      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095b2:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095be:	d102      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095c4:	e069      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ca:	e066      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095cc:	4b07      	ldr	r3, [pc, #28]	; (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095d8:	d102      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80095da:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095de:	e05c      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e4:	e059      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ea:	e056      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80095ec:	58024400 	.word	0x58024400
 80095f0:	03d09000 	.word	0x03d09000
 80095f4:	003d0900 	.word	0x003d0900
 80095f8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009602:	d148      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009604:	4b27      	ldr	r3, [pc, #156]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800960c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009614:	d02a      	beq.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961c:	d838      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800962a:	d00d      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800962c:	e030      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800962e:	4b1d      	ldr	r3, [pc, #116]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800963a:	d102      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800963c:	4b1a      	ldr	r3, [pc, #104]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009640:	e02b      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009646:	e028      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009654:	d107      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fae4 	bl	8009c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009664:	e019      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800966a:	e016      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009678:	d107      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800967a:	f107 0318 	add.w	r3, r7, #24
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f82a 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009688:	e007      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800968e:	e004      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e001      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800969c:	4618      	mov	r0, r3
 800969e:	3740      	adds	r7, #64	; 0x40
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	58024400 	.word	0x58024400
 80096a8:	017d7840 	.word	0x017d7840

080096ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80096b0:	f7fe fc66 	bl	8007f80 <HAL_RCC_GetHCLKFreq>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	091b      	lsrs	r3, r3, #4
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80096c2:	5ccb      	ldrb	r3, [r1, r3]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	58024400 	.word	0x58024400
 80096d4:	0800f800 	.word	0x0800f800

080096d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80096d8:	b480      	push	{r7}
 80096da:	b089      	sub	sp, #36	; 0x24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096e0:	4ba1      	ldr	r3, [pc, #644]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80096ea:	4b9f      	ldr	r3, [pc, #636]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ee:	0b1b      	lsrs	r3, r3, #12
 80096f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80096f6:	4b9c      	ldr	r3, [pc, #624]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fa:	091b      	lsrs	r3, r3, #4
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009702:	4b99      	ldr	r3, [pc, #612]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	08db      	lsrs	r3, r3, #3
 8009708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	fb02 f303 	mul.w	r3, r2, r3
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8111 	beq.w	8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b02      	cmp	r3, #2
 800972a:	f000 8083 	beq.w	8009834 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b02      	cmp	r3, #2
 8009732:	f200 80a1 	bhi.w	8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d056      	beq.n	80097f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009742:	e099      	b.n	8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009744:	4b88      	ldr	r3, [pc, #544]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d02d      	beq.n	80097ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009750:	4b85      	ldr	r3, [pc, #532]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	08db      	lsrs	r3, r3, #3
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	4a84      	ldr	r2, [pc, #528]	; (800996c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800975c:	fa22 f303 	lsr.w	r3, r2, r3
 8009760:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	ee07 3a90 	vmov	s15, r3
 8009768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977a:	4b7b      	ldr	r3, [pc, #492]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978a:	ed97 6a03 	vldr	s12, [r7, #12]
 800978e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800979e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097aa:	e087      	b.n	80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80097ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097be:	4b6a      	ldr	r3, [pc, #424]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c6:	ee07 3a90 	vmov	s15, r3
 80097ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ee:	e065      	b.n	80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009802:	4b59      	ldr	r3, [pc, #356]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009812:	ed97 6a03 	vldr	s12, [r7, #12]
 8009816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800981a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800982a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009832:	e043      	b.n	80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009846:	4b48      	ldr	r3, [pc, #288]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009856:	ed97 6a03 	vldr	s12, [r7, #12]
 800985a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800985e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800986a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009876:	e021      	b.n	80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988a:	4b37      	ldr	r3, [pc, #220]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989a:	ed97 6a03 	vldr	s12, [r7, #12]
 800989e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80098bc:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	0a5b      	lsrs	r3, r3, #9
 80098c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e2:	ee17 2a90 	vmov	r2, s15
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80098ea:	4b1f      	ldr	r3, [pc, #124]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	0c1b      	lsrs	r3, r3, #16
 80098f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009904:	edd7 6a07 	vldr	s13, [r7, #28]
 8009908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800990c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009910:	ee17 2a90 	vmov	r2, s15
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	0e1b      	lsrs	r3, r3, #24
 800991e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800992e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009932:	edd7 6a07 	vldr	s13, [r7, #28]
 8009936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800993a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993e:	ee17 2a90 	vmov	r2, s15
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009946:	e008      	b.n	800995a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	609a      	str	r2, [r3, #8]
}
 800995a:	bf00      	nop
 800995c:	3724      	adds	r7, #36	; 0x24
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	58024400 	.word	0x58024400
 800996c:	03d09000 	.word	0x03d09000
 8009970:	46000000 	.word	0x46000000
 8009974:	4c742400 	.word	0x4c742400
 8009978:	4a742400 	.word	0x4a742400
 800997c:	4bbebc20 	.word	0x4bbebc20

08009980 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	; 0x24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009988:	4ba1      	ldr	r3, [pc, #644]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009992:	4b9f      	ldr	r3, [pc, #636]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	0d1b      	lsrs	r3, r3, #20
 8009998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800999e:	4b9c      	ldr	r3, [pc, #624]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80099aa:	4b99      	ldr	r3, [pc, #612]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	08db      	lsrs	r3, r3, #3
 80099b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8111 	beq.w	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	f000 8083 	beq.w	8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f200 80a1 	bhi.w	8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d056      	beq.n	8009a98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80099ea:	e099      	b.n	8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ec:	4b88      	ldr	r3, [pc, #544]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d02d      	beq.n	8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f8:	4b85      	ldr	r3, [pc, #532]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	4a84      	ldr	r2, [pc, #528]	; (8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a22:	4b7b      	ldr	r3, [pc, #492]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a52:	e087      	b.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a66:	4b6a      	ldr	r3, [pc, #424]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a96:	e065      	b.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b59      	ldr	r3, [pc, #356]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009abe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ada:	e043      	b.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b48      	ldr	r3, [pc, #288]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b1e:	e021      	b.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b37      	ldr	r3, [pc, #220]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b64:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b68:	0a5b      	lsrs	r3, r3, #9
 8009b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8a:	ee17 2a90 	vmov	r2, s15
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009b92:	4b1f      	ldr	r3, [pc, #124]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb8:	ee17 2a90 	vmov	r2, s15
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009bc0:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc4:	0e1b      	lsrs	r3, r3, #24
 8009bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be6:	ee17 2a90 	vmov	r2, s15
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009bee:	e008      	b.n	8009c02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	609a      	str	r2, [r3, #8]
}
 8009c02:	bf00      	nop
 8009c04:	3724      	adds	r7, #36	; 0x24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	58024400 	.word	0x58024400
 8009c14:	03d09000 	.word	0x03d09000
 8009c18:	46000000 	.word	0x46000000
 8009c1c:	4c742400 	.word	0x4c742400
 8009c20:	4a742400 	.word	0x4a742400
 8009c24:	4bbebc20 	.word	0x4bbebc20

08009c28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b089      	sub	sp, #36	; 0x24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c30:	4ba0      	ldr	r3, [pc, #640]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c3a:	4b9e      	ldr	r3, [pc, #632]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	091b      	lsrs	r3, r3, #4
 8009c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c46:	4b9b      	ldr	r3, [pc, #620]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c50:	4b98      	ldr	r3, [pc, #608]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c54:	08db      	lsrs	r3, r3, #3
 8009c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	fb02 f303 	mul.w	r3, r2, r3
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8111 	beq.w	8009e96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	f000 8083 	beq.w	8009d82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	f200 80a1 	bhi.w	8009dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d056      	beq.n	8009d3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c90:	e099      	b.n	8009dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c92:	4b88      	ldr	r3, [pc, #544]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d02d      	beq.n	8009cfa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c9e:	4b85      	ldr	r3, [pc, #532]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	4a83      	ldr	r2, [pc, #524]	; (8009eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc8:	4b7a      	ldr	r3, [pc, #488]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd0:	ee07 3a90 	vmov	s15, r3
 8009cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cdc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cf8:	e087      	b.n	8009e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	ee07 3a90 	vmov	s15, r3
 8009d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0c:	4b69      	ldr	r3, [pc, #420]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d14:	ee07 3a90 	vmov	s15, r3
 8009d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d20:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d3c:	e065      	b.n	8009e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	ee07 3a90 	vmov	s15, r3
 8009d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d50:	4b58      	ldr	r3, [pc, #352]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d64:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d80:	e043      	b.n	8009e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d94:	4b47      	ldr	r3, [pc, #284]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc4:	e021      	b.n	8009e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd8:	4b36      	ldr	r3, [pc, #216]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de0:	ee07 3a90 	vmov	s15, r3
 8009de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009e0a:	4b2a      	ldr	r3, [pc, #168]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	0a5b      	lsrs	r3, r3, #9
 8009e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e30:	ee17 2a90 	vmov	r2, s15
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5e:	ee17 2a90 	vmov	r2, s15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009e66:	4b13      	ldr	r3, [pc, #76]	; (8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e94:	e008      	b.n	8009ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	609a      	str	r2, [r3, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	3724      	adds	r7, #36	; 0x24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	58024400 	.word	0x58024400
 8009eb8:	03d09000 	.word	0x03d09000
 8009ebc:	46000000 	.word	0x46000000
 8009ec0:	4c742400 	.word	0x4c742400
 8009ec4:	4a742400 	.word	0x4a742400
 8009ec8:	4bbebc20 	.word	0x4bbebc20

08009ecc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eda:	4b53      	ldr	r3, [pc, #332]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d101      	bne.n	8009eea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e099      	b.n	800a01e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eea:	4b4f      	ldr	r3, [pc, #316]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a4e      	ldr	r2, [pc, #312]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009ef0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef6:	f7f9 fe11 	bl	8003b1c <HAL_GetTick>
 8009efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009efc:	e008      	b.n	8009f10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009efe:	f7f9 fe0d 	bl	8003b1c <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d901      	bls.n	8009f10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e086      	b.n	800a01e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f10:	4b45      	ldr	r3, [pc, #276]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1f0      	bne.n	8009efe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f1c:	4b42      	ldr	r3, [pc, #264]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	031b      	lsls	r3, r3, #12
 8009f2a:	493f      	ldr	r1, [pc, #252]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	025b      	lsls	r3, r3, #9
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	061b      	lsls	r3, r3, #24
 8009f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f60:	4931      	ldr	r1, [pc, #196]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f66:	4b30      	ldr	r3, [pc, #192]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	492d      	ldr	r1, [pc, #180]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f78:	4b2b      	ldr	r3, [pc, #172]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	f023 0220 	bic.w	r2, r3, #32
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	4928      	ldr	r1, [pc, #160]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f8a:	4b27      	ldr	r3, [pc, #156]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	4a26      	ldr	r2, [pc, #152]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f90:	f023 0310 	bic.w	r3, r3, #16
 8009f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f96:	4b24      	ldr	r3, [pc, #144]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <RCCEx_PLL2_Config+0x160>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	69d2      	ldr	r2, [r2, #28]
 8009fa2:	00d2      	lsls	r2, r2, #3
 8009fa4:	4920      	ldr	r1, [pc, #128]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009faa:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fb0:	f043 0310 	orr.w	r3, r3, #16
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009fbc:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	4a19      	ldr	r2, [pc, #100]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fc8:	e00f      	b.n	8009fea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d106      	bne.n	8009fde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009fd0:	4b15      	ldr	r3, [pc, #84]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a14      	ldr	r2, [pc, #80]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fdc:	e005      	b.n	8009fea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	4a11      	ldr	r2, [pc, #68]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a0e      	ldr	r2, [pc, #56]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff6:	f7f9 fd91 	bl	8003b1c <HAL_GetTick>
 8009ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ffc:	e008      	b.n	800a010 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ffe:	f7f9 fd8d 	bl	8003b1c <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e006      	b.n	800a01e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <RCCEx_PLL2_Config+0x15c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	58024400 	.word	0x58024400
 800a02c:	ffff0007 	.word	0xffff0007

0800a030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a03e:	4b53      	ldr	r3, [pc, #332]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b03      	cmp	r3, #3
 800a048:	d101      	bne.n	800a04e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e099      	b.n	800a182 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a04e:	4b4f      	ldr	r3, [pc, #316]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a4e      	ldr	r2, [pc, #312]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a05a:	f7f9 fd5f 	bl	8003b1c <HAL_GetTick>
 800a05e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a060:	e008      	b.n	800a074 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a062:	f7f9 fd5b 	bl	8003b1c <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d901      	bls.n	800a074 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e086      	b.n	800a182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a074:	4b45      	ldr	r3, [pc, #276]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1f0      	bne.n	800a062 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a080:	4b42      	ldr	r3, [pc, #264]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	493f      	ldr	r1, [pc, #252]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a090:	4313      	orrs	r3, r2
 800a092:	628b      	str	r3, [r1, #40]	; 0x28
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	3b01      	subs	r3, #1
 800a09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	025b      	lsls	r3, r3, #9
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	061b      	lsls	r3, r3, #24
 800a0c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0c4:	4931      	ldr	r1, [pc, #196]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0ca:	4b30      	ldr	r3, [pc, #192]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	492d      	ldr	r1, [pc, #180]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0dc:	4b2b      	ldr	r3, [pc, #172]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	4928      	ldr	r1, [pc, #160]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0ee:	4b27      	ldr	r3, [pc, #156]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	4a26      	ldr	r2, [pc, #152]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0fa:	4b24      	ldr	r3, [pc, #144]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0fe:	4b24      	ldr	r3, [pc, #144]	; (800a190 <RCCEx_PLL3_Config+0x160>)
 800a100:	4013      	ands	r3, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	69d2      	ldr	r2, [r2, #28]
 800a106:	00d2      	lsls	r2, r2, #3
 800a108:	4920      	ldr	r1, [pc, #128]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	4a1e      	ldr	r2, [pc, #120]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a120:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	4a19      	ldr	r2, [pc, #100]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a12a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a12c:	e00f      	b.n	800a14e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d106      	bne.n	800a142 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a134:	4b15      	ldr	r3, [pc, #84]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	4a14      	ldr	r2, [pc, #80]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a13a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a13e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a140:	e005      	b.n	800a14e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a11      	ldr	r2, [pc, #68]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15a:	f7f9 fcdf 	bl	8003b1c <HAL_GetTick>
 800a15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a160:	e008      	b.n	800a174 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a162:	f7f9 fcdb 	bl	8003b1c <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e006      	b.n	800a182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <RCCEx_PLL3_Config+0x15c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0f0      	beq.n	800a162 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	ffff0007 	.word	0xffff0007

0800a194 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e0f1      	b.n	800a38a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a78      	ldr	r2, [pc, #480]	; (800a394 <HAL_SPI_Init+0x200>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00f      	beq.n	800a1d6 <HAL_SPI_Init+0x42>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a77      	ldr	r2, [pc, #476]	; (800a398 <HAL_SPI_Init+0x204>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00a      	beq.n	800a1d6 <HAL_SPI_Init+0x42>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a75      	ldr	r2, [pc, #468]	; (800a39c <HAL_SPI_Init+0x208>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d005      	beq.n	800a1d6 <HAL_SPI_Init+0x42>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d901      	bls.n	800a1d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e0d9      	b.n	800a38a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f8e2 	bl	800a3a0 <SPI_GetPacketSize>
 800a1dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a6c      	ldr	r2, [pc, #432]	; (800a394 <HAL_SPI_Init+0x200>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00c      	beq.n	800a202 <HAL_SPI_Init+0x6e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a6a      	ldr	r2, [pc, #424]	; (800a398 <HAL_SPI_Init+0x204>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d007      	beq.n	800a202 <HAL_SPI_Init+0x6e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a69      	ldr	r2, [pc, #420]	; (800a39c <HAL_SPI_Init+0x208>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d002      	beq.n	800a202 <HAL_SPI_Init+0x6e>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d811      	bhi.n	800a226 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a206:	4a63      	ldr	r2, [pc, #396]	; (800a394 <HAL_SPI_Init+0x200>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d009      	beq.n	800a220 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a61      	ldr	r2, [pc, #388]	; (800a398 <HAL_SPI_Init+0x204>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d004      	beq.n	800a220 <HAL_SPI_Init+0x8c>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a60      	ldr	r2, [pc, #384]	; (800a39c <HAL_SPI_Init+0x208>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d104      	bne.n	800a22a <HAL_SPI_Init+0x96>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b10      	cmp	r3, #16
 800a224:	d901      	bls.n	800a22a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e0af      	b.n	800a38a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7f7 fece 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0201 	bic.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a266:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a270:	d119      	bne.n	800a2a6 <HAL_SPI_Init+0x112>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a27a:	d103      	bne.n	800a284 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a280:	2b00      	cmp	r3, #0
 800a282:	d008      	beq.n	800a296 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10c      	bne.n	800a2a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a294:	d107      	bne.n	800a2a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	69da      	ldr	r2, [r3, #28]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b8:	ea42 0103 	orr.w	r1, r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68da      	ldr	r2, [r3, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a306:	ea42 0103 	orr.w	r1, r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d113      	bne.n	800a346 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a330:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a344:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0201 	bic.w	r2, r2, #1
 800a354:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	40013000 	.word	0x40013000
 800a398:	40003800 	.word	0x40003800
 800a39c:	40003c00 	.word	0x40003c00

0800a3a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3307      	adds	r3, #7
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e049      	b.n	800a47c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d106      	bne.n	800a402 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7f8 fd3d 	bl	8002e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2202      	movs	r2, #2
 800a406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3304      	adds	r3, #4
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f000 fd07 	bl	800ae28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e049      	b.n	800a52a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f841 	bl	800a532 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f000 fcb0 	bl	800ae28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a532:	b480      	push	{r7}
 800a534:	b083      	sub	sp, #12
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d109      	bne.n	800a56c <HAL_TIM_PWM_Start+0x24>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	bf14      	ite	ne
 800a564:	2301      	movne	r3, #1
 800a566:	2300      	moveq	r3, #0
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	e03c      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x9e>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b04      	cmp	r3, #4
 800a570:	d109      	bne.n	800a586 <HAL_TIM_PWM_Start+0x3e>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	bf14      	ite	ne
 800a57e:	2301      	movne	r3, #1
 800a580:	2300      	moveq	r3, #0
 800a582:	b2db      	uxtb	r3, r3
 800a584:	e02f      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x9e>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d109      	bne.n	800a5a0 <HAL_TIM_PWM_Start+0x58>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b01      	cmp	r3, #1
 800a596:	bf14      	ite	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	2300      	moveq	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	e022      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x9e>
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b0c      	cmp	r3, #12
 800a5a4:	d109      	bne.n	800a5ba <HAL_TIM_PWM_Start+0x72>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	bf14      	ite	ne
 800a5b2:	2301      	movne	r3, #1
 800a5b4:	2300      	moveq	r3, #0
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	e015      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x9e>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b10      	cmp	r3, #16
 800a5be:	d109      	bne.n	800a5d4 <HAL_TIM_PWM_Start+0x8c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e008      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x9e>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	bf14      	ite	ne
 800a5e0:	2301      	movne	r3, #1
 800a5e2:	2300      	moveq	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e0ab      	b.n	800a746 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d104      	bne.n	800a5fe <HAL_TIM_PWM_Start+0xb6>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5fc:	e023      	b.n	800a646 <HAL_TIM_PWM_Start+0xfe>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b04      	cmp	r3, #4
 800a602:	d104      	bne.n	800a60e <HAL_TIM_PWM_Start+0xc6>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a60c:	e01b      	b.n	800a646 <HAL_TIM_PWM_Start+0xfe>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b08      	cmp	r3, #8
 800a612:	d104      	bne.n	800a61e <HAL_TIM_PWM_Start+0xd6>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2202      	movs	r2, #2
 800a618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a61c:	e013      	b.n	800a646 <HAL_TIM_PWM_Start+0xfe>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b0c      	cmp	r3, #12
 800a622:	d104      	bne.n	800a62e <HAL_TIM_PWM_Start+0xe6>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a62c:	e00b      	b.n	800a646 <HAL_TIM_PWM_Start+0xfe>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b10      	cmp	r3, #16
 800a632:	d104      	bne.n	800a63e <HAL_TIM_PWM_Start+0xf6>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a63c:	e003      	b.n	800a646 <HAL_TIM_PWM_Start+0xfe>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2202      	movs	r2, #2
 800a642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2201      	movs	r2, #1
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 f804 	bl	800b65c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a3d      	ldr	r2, [pc, #244]	; (800a750 <HAL_TIM_PWM_Start+0x208>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d013      	beq.n	800a686 <HAL_TIM_PWM_Start+0x13e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a3c      	ldr	r2, [pc, #240]	; (800a754 <HAL_TIM_PWM_Start+0x20c>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d00e      	beq.n	800a686 <HAL_TIM_PWM_Start+0x13e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a3a      	ldr	r2, [pc, #232]	; (800a758 <HAL_TIM_PWM_Start+0x210>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d009      	beq.n	800a686 <HAL_TIM_PWM_Start+0x13e>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a39      	ldr	r2, [pc, #228]	; (800a75c <HAL_TIM_PWM_Start+0x214>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d004      	beq.n	800a686 <HAL_TIM_PWM_Start+0x13e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a37      	ldr	r2, [pc, #220]	; (800a760 <HAL_TIM_PWM_Start+0x218>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d101      	bne.n	800a68a <HAL_TIM_PWM_Start+0x142>
 800a686:	2301      	movs	r3, #1
 800a688:	e000      	b.n	800a68c <HAL_TIM_PWM_Start+0x144>
 800a68a:	2300      	movs	r3, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a69e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a2a      	ldr	r2, [pc, #168]	; (800a750 <HAL_TIM_PWM_Start+0x208>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d02c      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b2:	d027      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a2a      	ldr	r2, [pc, #168]	; (800a764 <HAL_TIM_PWM_Start+0x21c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d022      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a29      	ldr	r2, [pc, #164]	; (800a768 <HAL_TIM_PWM_Start+0x220>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d01d      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a27      	ldr	r2, [pc, #156]	; (800a76c <HAL_TIM_PWM_Start+0x224>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d018      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <HAL_TIM_PWM_Start+0x20c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a23      	ldr	r2, [pc, #140]	; (800a770 <HAL_TIM_PWM_Start+0x228>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00e      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a1b      	ldr	r2, [pc, #108]	; (800a758 <HAL_TIM_PWM_Start+0x210>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d009      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a1f      	ldr	r2, [pc, #124]	; (800a774 <HAL_TIM_PWM_Start+0x22c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <HAL_TIM_PWM_Start+0x1bc>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <HAL_TIM_PWM_Start+0x230>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d115      	bne.n	800a730 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	4b1c      	ldr	r3, [pc, #112]	; (800a77c <HAL_TIM_PWM_Start+0x234>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b06      	cmp	r3, #6
 800a714:	d015      	beq.n	800a742 <HAL_TIM_PWM_Start+0x1fa>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71c:	d011      	beq.n	800a742 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f042 0201 	orr.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72e:	e008      	b.n	800a742 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	e000      	b.n	800a744 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	40010000 	.word	0x40010000
 800a754:	40010400 	.word	0x40010400
 800a758:	40014000 	.word	0x40014000
 800a75c:	40014400 	.word	0x40014400
 800a760:	40014800 	.word	0x40014800
 800a764:	40000400 	.word	0x40000400
 800a768:	40000800 	.word	0x40000800
 800a76c:	40000c00 	.word	0x40000c00
 800a770:	40001800 	.word	0x40001800
 800a774:	4000e000 	.word	0x4000e000
 800a778:	4000e400 	.word	0x4000e400
 800a77c:	00010007 	.word	0x00010007

0800a780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b02      	cmp	r3, #2
 800a794:	d122      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d11b      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0202 	mvn.w	r2, #2
 800a7ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fb12 	bl	800adec <HAL_TIM_IC_CaptureCallback>
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fb04 	bl	800add8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fb15 	bl	800ae00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d122      	bne.n	800a830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d11b      	bne.n	800a830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0204 	mvn.w	r2, #4
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fae8 	bl	800adec <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fada 	bl	800add8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 faeb 	bl	800ae00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0308 	and.w	r3, r3, #8
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d122      	bne.n	800a884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d11b      	bne.n	800a884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0208 	mvn.w	r2, #8
 800a854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2204      	movs	r2, #4
 800a85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fabe 	bl	800adec <HAL_TIM_IC_CaptureCallback>
 800a870:	e005      	b.n	800a87e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fab0 	bl	800add8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fac1 	bl	800ae00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0310 	and.w	r3, r3, #16
 800a88e:	2b10      	cmp	r3, #16
 800a890:	d122      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	2b10      	cmp	r3, #16
 800a89e:	d11b      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0210 	mvn.w	r2, #16
 800a8a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fa94 	bl	800adec <HAL_TIM_IC_CaptureCallback>
 800a8c4:	e005      	b.n	800a8d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa86 	bl	800add8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fa97 	bl	800ae00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d10e      	bne.n	800a904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d107      	bne.n	800a904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f06f 0201 	mvn.w	r2, #1
 800a8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7f7 f9c0 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90e:	2b80      	cmp	r3, #128	; 0x80
 800a910:	d10e      	bne.n	800a930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91c:	2b80      	cmp	r3, #128	; 0x80
 800a91e:	d107      	bne.n	800a930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 f802 	bl	800b934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d10e      	bne.n	800a95e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94a:	2b80      	cmp	r3, #128	; 0x80
 800a94c:	d107      	bne.n	800a95e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fff5 	bl	800b948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d10e      	bne.n	800a98a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d107      	bne.n	800a98a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fa45 	bl	800ae14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	2b20      	cmp	r3, #32
 800a996:	d10e      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f003 0320 	and.w	r3, r3, #32
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d107      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0220 	mvn.w	r2, #32
 800a9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 ffb5 	bl	800b920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d101      	bne.n	800a9de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9da:	2302      	movs	r3, #2
 800a9dc:	e0ff      	b.n	800abde <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b14      	cmp	r3, #20
 800a9ea:	f200 80f0 	bhi.w	800abce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa49 	.word	0x0800aa49
 800a9f8:	0800abcf 	.word	0x0800abcf
 800a9fc:	0800abcf 	.word	0x0800abcf
 800aa00:	0800abcf 	.word	0x0800abcf
 800aa04:	0800aa89 	.word	0x0800aa89
 800aa08:	0800abcf 	.word	0x0800abcf
 800aa0c:	0800abcf 	.word	0x0800abcf
 800aa10:	0800abcf 	.word	0x0800abcf
 800aa14:	0800aacb 	.word	0x0800aacb
 800aa18:	0800abcf 	.word	0x0800abcf
 800aa1c:	0800abcf 	.word	0x0800abcf
 800aa20:	0800abcf 	.word	0x0800abcf
 800aa24:	0800ab0b 	.word	0x0800ab0b
 800aa28:	0800abcf 	.word	0x0800abcf
 800aa2c:	0800abcf 	.word	0x0800abcf
 800aa30:	0800abcf 	.word	0x0800abcf
 800aa34:	0800ab4d 	.word	0x0800ab4d
 800aa38:	0800abcf 	.word	0x0800abcf
 800aa3c:	0800abcf 	.word	0x0800abcf
 800aa40:	0800abcf 	.word	0x0800abcf
 800aa44:	0800ab8d 	.word	0x0800ab8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fa90 	bl	800af74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699a      	ldr	r2, [r3, #24]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0204 	bic.w	r2, r2, #4
 800aa72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6999      	ldr	r1, [r3, #24]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	619a      	str	r2, [r3, #24]
      break;
 800aa86:	e0a5      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fb00 	bl	800b094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	699a      	ldr	r2, [r3, #24]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6999      	ldr	r1, [r3, #24]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	021a      	lsls	r2, r3, #8
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	619a      	str	r2, [r3, #24]
      break;
 800aac8:	e084      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fb69 	bl	800b1a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69da      	ldr	r2, [r3, #28]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f042 0208 	orr.w	r2, r2, #8
 800aae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 0204 	bic.w	r2, r2, #4
 800aaf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69d9      	ldr	r1, [r3, #28]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	61da      	str	r2, [r3, #28]
      break;
 800ab08:	e064      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fbd1 	bl	800b2b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69da      	ldr	r2, [r3, #28]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69d9      	ldr	r1, [r3, #28]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	021a      	lsls	r2, r3, #8
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	61da      	str	r2, [r3, #28]
      break;
 800ab4a:	e043      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fc1a 	bl	800b38c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0208 	orr.w	r2, r2, #8
 800ab66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0204 	bic.w	r2, r2, #4
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab8a:	e023      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fc5e 	bl	800b454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	021a      	lsls	r2, r3, #8
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800abcc:	e002      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	75fb      	strb	r3, [r7, #23]
      break;
 800abd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop

0800abe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <HAL_TIM_ConfigClockSource+0x1c>
 800ac00:	2302      	movs	r3, #2
 800ac02:	e0dc      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x1d6>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	4b6a      	ldr	r3, [pc, #424]	; (800adc8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a64      	ldr	r2, [pc, #400]	; (800adcc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	f000 80a9 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac40:	4a62      	ldr	r2, [pc, #392]	; (800adcc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	f200 80ae 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac48:	4a61      	ldr	r2, [pc, #388]	; (800add0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	f000 80a1 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac50:	4a5f      	ldr	r2, [pc, #380]	; (800add0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	f200 80a6 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	4a5e      	ldr	r2, [pc, #376]	; (800add4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	f000 8099 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac60:	4a5c      	ldr	r2, [pc, #368]	; (800add4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	f200 809e 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac6c:	f000 8091 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac74:	f200 8096 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac7c:	f000 8089 	beq.w	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac84:	f200 808e 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8c:	d03e      	beq.n	800ad0c <HAL_TIM_ConfigClockSource+0x124>
 800ac8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac92:	f200 8087 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9a:	f000 8086 	beq.w	800adaa <HAL_TIM_ConfigClockSource+0x1c2>
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d87f      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800aca4:	2b70      	cmp	r3, #112	; 0x70
 800aca6:	d01a      	beq.n	800acde <HAL_TIM_ConfigClockSource+0xf6>
 800aca8:	2b70      	cmp	r3, #112	; 0x70
 800acaa:	d87b      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800acac:	2b60      	cmp	r3, #96	; 0x60
 800acae:	d050      	beq.n	800ad52 <HAL_TIM_ConfigClockSource+0x16a>
 800acb0:	2b60      	cmp	r3, #96	; 0x60
 800acb2:	d877      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800acb4:	2b50      	cmp	r3, #80	; 0x50
 800acb6:	d03c      	beq.n	800ad32 <HAL_TIM_ConfigClockSource+0x14a>
 800acb8:	2b50      	cmp	r3, #80	; 0x50
 800acba:	d873      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800acbc:	2b40      	cmp	r3, #64	; 0x40
 800acbe:	d058      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x18a>
 800acc0:	2b40      	cmp	r3, #64	; 0x40
 800acc2:	d86f      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800acc4:	2b30      	cmp	r3, #48	; 0x30
 800acc6:	d064      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800acc8:	2b30      	cmp	r3, #48	; 0x30
 800acca:	d86b      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800accc:	2b20      	cmp	r3, #32
 800acce:	d060      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	d867      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d05c      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800acd8:	2b10      	cmp	r3, #16
 800acda:	d05a      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x1aa>
 800acdc:	e062      	b.n	800ada4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6899      	ldr	r1, [r3, #8]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f000 fc95 	bl	800b61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	609a      	str	r2, [r3, #8]
      break;
 800ad0a:	e04f      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	6899      	ldr	r1, [r3, #8]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f000 fc7e 	bl	800b61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad2e:	609a      	str	r2, [r3, #8]
      break;
 800ad30:	e03c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6859      	ldr	r1, [r3, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f000 fbee 	bl	800b520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2150      	movs	r1, #80	; 0x50
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fc48 	bl	800b5e0 <TIM_ITRx_SetConfig>
      break;
 800ad50:	e02c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f000 fc0d 	bl	800b57e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2160      	movs	r1, #96	; 0x60
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fc38 	bl	800b5e0 <TIM_ITRx_SetConfig>
      break;
 800ad70:	e01c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6859      	ldr	r1, [r3, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f000 fbce 	bl	800b520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fc28 	bl	800b5e0 <TIM_ITRx_SetConfig>
      break;
 800ad90:	e00c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	f000 fc1f 	bl	800b5e0 <TIM_ITRx_SetConfig>
      break;
 800ada2:	e003      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
      break;
 800ada8:	e000      	b.n	800adac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800adaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	ffceff88 	.word	0xffceff88
 800adcc:	00100040 	.word	0x00100040
 800add0:	00100030 	.word	0x00100030
 800add4:	00100020 	.word	0x00100020

0800add8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a44      	ldr	r2, [pc, #272]	; (800af4c <TIM_Base_SetConfig+0x124>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d013      	beq.n	800ae68 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae46:	d00f      	beq.n	800ae68 <TIM_Base_SetConfig+0x40>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a41      	ldr	r2, [pc, #260]	; (800af50 <TIM_Base_SetConfig+0x128>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d00b      	beq.n	800ae68 <TIM_Base_SetConfig+0x40>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a40      	ldr	r2, [pc, #256]	; (800af54 <TIM_Base_SetConfig+0x12c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d007      	beq.n	800ae68 <TIM_Base_SetConfig+0x40>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a3f      	ldr	r2, [pc, #252]	; (800af58 <TIM_Base_SetConfig+0x130>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d003      	beq.n	800ae68 <TIM_Base_SetConfig+0x40>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a3e      	ldr	r2, [pc, #248]	; (800af5c <TIM_Base_SetConfig+0x134>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d108      	bne.n	800ae7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a33      	ldr	r2, [pc, #204]	; (800af4c <TIM_Base_SetConfig+0x124>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d027      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae88:	d023      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a30      	ldr	r2, [pc, #192]	; (800af50 <TIM_Base_SetConfig+0x128>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d01f      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a2f      	ldr	r2, [pc, #188]	; (800af54 <TIM_Base_SetConfig+0x12c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d01b      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a2e      	ldr	r2, [pc, #184]	; (800af58 <TIM_Base_SetConfig+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d017      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a2d      	ldr	r2, [pc, #180]	; (800af5c <TIM_Base_SetConfig+0x134>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d013      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a2c      	ldr	r2, [pc, #176]	; (800af60 <TIM_Base_SetConfig+0x138>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d00f      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a2b      	ldr	r2, [pc, #172]	; (800af64 <TIM_Base_SetConfig+0x13c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00b      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2a      	ldr	r2, [pc, #168]	; (800af68 <TIM_Base_SetConfig+0x140>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d007      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a29      	ldr	r2, [pc, #164]	; (800af6c <TIM_Base_SetConfig+0x144>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d003      	beq.n	800aed2 <TIM_Base_SetConfig+0xaa>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a28      	ldr	r2, [pc, #160]	; (800af70 <TIM_Base_SetConfig+0x148>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d108      	bne.n	800aee4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689a      	ldr	r2, [r3, #8]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a10      	ldr	r2, [pc, #64]	; (800af4c <TIM_Base_SetConfig+0x124>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00f      	beq.n	800af30 <TIM_Base_SetConfig+0x108>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a12      	ldr	r2, [pc, #72]	; (800af5c <TIM_Base_SetConfig+0x134>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d00b      	beq.n	800af30 <TIM_Base_SetConfig+0x108>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a11      	ldr	r2, [pc, #68]	; (800af60 <TIM_Base_SetConfig+0x138>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d007      	beq.n	800af30 <TIM_Base_SetConfig+0x108>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <TIM_Base_SetConfig+0x13c>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d003      	beq.n	800af30 <TIM_Base_SetConfig+0x108>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a0f      	ldr	r2, [pc, #60]	; (800af68 <TIM_Base_SetConfig+0x140>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d103      	bne.n	800af38 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	615a      	str	r2, [r3, #20]
}
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	40010000 	.word	0x40010000
 800af50:	40000400 	.word	0x40000400
 800af54:	40000800 	.word	0x40000800
 800af58:	40000c00 	.word	0x40000c00
 800af5c:	40010400 	.word	0x40010400
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800
 800af6c:	4000e000 	.word	0x4000e000
 800af70:	4000e400 	.word	0x4000e400

0800af74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	f023 0201 	bic.w	r2, r3, #1
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4b37      	ldr	r3, [pc, #220]	; (800b07c <TIM_OC1_SetConfig+0x108>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f023 0302 	bic.w	r3, r3, #2
 800afbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a2d      	ldr	r2, [pc, #180]	; (800b080 <TIM_OC1_SetConfig+0x10c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00f      	beq.n	800aff0 <TIM_OC1_SetConfig+0x7c>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a2c      	ldr	r2, [pc, #176]	; (800b084 <TIM_OC1_SetConfig+0x110>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d00b      	beq.n	800aff0 <TIM_OC1_SetConfig+0x7c>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a2b      	ldr	r2, [pc, #172]	; (800b088 <TIM_OC1_SetConfig+0x114>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d007      	beq.n	800aff0 <TIM_OC1_SetConfig+0x7c>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a2a      	ldr	r2, [pc, #168]	; (800b08c <TIM_OC1_SetConfig+0x118>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d003      	beq.n	800aff0 <TIM_OC1_SetConfig+0x7c>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a29      	ldr	r2, [pc, #164]	; (800b090 <TIM_OC1_SetConfig+0x11c>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10c      	bne.n	800b00a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f023 0308 	bic.w	r3, r3, #8
 800aff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	4313      	orrs	r3, r2
 800b000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f023 0304 	bic.w	r3, r3, #4
 800b008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a1c      	ldr	r2, [pc, #112]	; (800b080 <TIM_OC1_SetConfig+0x10c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00f      	beq.n	800b032 <TIM_OC1_SetConfig+0xbe>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a1b      	ldr	r2, [pc, #108]	; (800b084 <TIM_OC1_SetConfig+0x110>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d00b      	beq.n	800b032 <TIM_OC1_SetConfig+0xbe>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a1a      	ldr	r2, [pc, #104]	; (800b088 <TIM_OC1_SetConfig+0x114>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d007      	beq.n	800b032 <TIM_OC1_SetConfig+0xbe>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a19      	ldr	r2, [pc, #100]	; (800b08c <TIM_OC1_SetConfig+0x118>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d003      	beq.n	800b032 <TIM_OC1_SetConfig+0xbe>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a18      	ldr	r2, [pc, #96]	; (800b090 <TIM_OC1_SetConfig+0x11c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d111      	bne.n	800b056 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	4313      	orrs	r3, r2
 800b04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	4313      	orrs	r3, r2
 800b054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	621a      	str	r2, [r3, #32]
}
 800b070:	bf00      	nop
 800b072:	371c      	adds	r7, #28
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	fffeff8f 	.word	0xfffeff8f
 800b080:	40010000 	.word	0x40010000
 800b084:	40010400 	.word	0x40010400
 800b088:	40014000 	.word	0x40014000
 800b08c:	40014400 	.word	0x40014400
 800b090:	40014800 	.word	0x40014800

0800b094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f023 0210 	bic.w	r2, r3, #16
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4b34      	ldr	r3, [pc, #208]	; (800b190 <TIM_OC2_SetConfig+0xfc>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	021b      	lsls	r3, r3, #8
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f023 0320 	bic.w	r3, r3, #32
 800b0de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	011b      	lsls	r3, r3, #4
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a29      	ldr	r2, [pc, #164]	; (800b194 <TIM_OC2_SetConfig+0x100>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d003      	beq.n	800b0fc <TIM_OC2_SetConfig+0x68>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a28      	ldr	r2, [pc, #160]	; (800b198 <TIM_OC2_SetConfig+0x104>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d10d      	bne.n	800b118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a1e      	ldr	r2, [pc, #120]	; (800b194 <TIM_OC2_SetConfig+0x100>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00f      	beq.n	800b140 <TIM_OC2_SetConfig+0xac>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <TIM_OC2_SetConfig+0x104>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00b      	beq.n	800b140 <TIM_OC2_SetConfig+0xac>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a1c      	ldr	r2, [pc, #112]	; (800b19c <TIM_OC2_SetConfig+0x108>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d007      	beq.n	800b140 <TIM_OC2_SetConfig+0xac>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a1b      	ldr	r2, [pc, #108]	; (800b1a0 <TIM_OC2_SetConfig+0x10c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d003      	beq.n	800b140 <TIM_OC2_SetConfig+0xac>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a1a      	ldr	r2, [pc, #104]	; (800b1a4 <TIM_OC2_SetConfig+0x110>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d113      	bne.n	800b168 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b14e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	4313      	orrs	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4313      	orrs	r3, r2
 800b166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	621a      	str	r2, [r3, #32]
}
 800b182:	bf00      	nop
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	feff8fff 	.word	0xfeff8fff
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800

0800b1a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4b33      	ldr	r3, [pc, #204]	; (800b2a0 <TIM_OC3_SetConfig+0xf8>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a28      	ldr	r2, [pc, #160]	; (800b2a4 <TIM_OC3_SetConfig+0xfc>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <TIM_OC3_SetConfig+0x66>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a27      	ldr	r2, [pc, #156]	; (800b2a8 <TIM_OC3_SetConfig+0x100>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d10d      	bne.n	800b22a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a1d      	ldr	r2, [pc, #116]	; (800b2a4 <TIM_OC3_SetConfig+0xfc>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d00f      	beq.n	800b252 <TIM_OC3_SetConfig+0xaa>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a1c      	ldr	r2, [pc, #112]	; (800b2a8 <TIM_OC3_SetConfig+0x100>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d00b      	beq.n	800b252 <TIM_OC3_SetConfig+0xaa>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a1b      	ldr	r2, [pc, #108]	; (800b2ac <TIM_OC3_SetConfig+0x104>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d007      	beq.n	800b252 <TIM_OC3_SetConfig+0xaa>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a1a      	ldr	r2, [pc, #104]	; (800b2b0 <TIM_OC3_SetConfig+0x108>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d003      	beq.n	800b252 <TIM_OC3_SetConfig+0xaa>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a19      	ldr	r2, [pc, #100]	; (800b2b4 <TIM_OC3_SetConfig+0x10c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d113      	bne.n	800b27a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	011b      	lsls	r3, r3, #4
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4313      	orrs	r3, r2
 800b278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	621a      	str	r2, [r3, #32]
}
 800b294:	bf00      	nop
 800b296:	371c      	adds	r7, #28
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	fffeff8f 	.word	0xfffeff8f
 800b2a4:	40010000 	.word	0x40010000
 800b2a8:	40010400 	.word	0x40010400
 800b2ac:	40014000 	.word	0x40014000
 800b2b0:	40014400 	.word	0x40014400
 800b2b4:	40014800 	.word	0x40014800

0800b2b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4b24      	ldr	r3, [pc, #144]	; (800b374 <TIM_OC4_SetConfig+0xbc>)
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	031b      	lsls	r3, r3, #12
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a19      	ldr	r2, [pc, #100]	; (800b378 <TIM_OC4_SetConfig+0xc0>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00f      	beq.n	800b338 <TIM_OC4_SetConfig+0x80>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a18      	ldr	r2, [pc, #96]	; (800b37c <TIM_OC4_SetConfig+0xc4>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d00b      	beq.n	800b338 <TIM_OC4_SetConfig+0x80>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a17      	ldr	r2, [pc, #92]	; (800b380 <TIM_OC4_SetConfig+0xc8>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d007      	beq.n	800b338 <TIM_OC4_SetConfig+0x80>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a16      	ldr	r2, [pc, #88]	; (800b384 <TIM_OC4_SetConfig+0xcc>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d003      	beq.n	800b338 <TIM_OC4_SetConfig+0x80>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a15      	ldr	r2, [pc, #84]	; (800b388 <TIM_OC4_SetConfig+0xd0>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d109      	bne.n	800b34c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b33e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	019b      	lsls	r3, r3, #6
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	feff8fff 	.word	0xfeff8fff
 800b378:	40010000 	.word	0x40010000
 800b37c:	40010400 	.word	0x40010400
 800b380:	40014000 	.word	0x40014000
 800b384:	40014400 	.word	0x40014400
 800b388:	40014800 	.word	0x40014800

0800b38c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4b21      	ldr	r3, [pc, #132]	; (800b43c <TIM_OC5_SetConfig+0xb0>)
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	041b      	lsls	r3, r3, #16
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a18      	ldr	r2, [pc, #96]	; (800b440 <TIM_OC5_SetConfig+0xb4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00f      	beq.n	800b402 <TIM_OC5_SetConfig+0x76>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a17      	ldr	r2, [pc, #92]	; (800b444 <TIM_OC5_SetConfig+0xb8>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00b      	beq.n	800b402 <TIM_OC5_SetConfig+0x76>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a16      	ldr	r2, [pc, #88]	; (800b448 <TIM_OC5_SetConfig+0xbc>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d007      	beq.n	800b402 <TIM_OC5_SetConfig+0x76>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a15      	ldr	r2, [pc, #84]	; (800b44c <TIM_OC5_SetConfig+0xc0>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d003      	beq.n	800b402 <TIM_OC5_SetConfig+0x76>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a14      	ldr	r2, [pc, #80]	; (800b450 <TIM_OC5_SetConfig+0xc4>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d109      	bne.n	800b416 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	4313      	orrs	r3, r2
 800b414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	621a      	str	r2, [r3, #32]
}
 800b430:	bf00      	nop
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	fffeff8f 	.word	0xfffeff8f
 800b440:	40010000 	.word	0x40010000
 800b444:	40010400 	.word	0x40010400
 800b448:	40014000 	.word	0x40014000
 800b44c:	40014400 	.word	0x40014400
 800b450:	40014800 	.word	0x40014800

0800b454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4b22      	ldr	r3, [pc, #136]	; (800b508 <TIM_OC6_SetConfig+0xb4>)
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	021b      	lsls	r3, r3, #8
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	051b      	lsls	r3, r3, #20
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a19      	ldr	r2, [pc, #100]	; (800b50c <TIM_OC6_SetConfig+0xb8>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00f      	beq.n	800b4cc <TIM_OC6_SetConfig+0x78>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <TIM_OC6_SetConfig+0xbc>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d00b      	beq.n	800b4cc <TIM_OC6_SetConfig+0x78>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a17      	ldr	r2, [pc, #92]	; (800b514 <TIM_OC6_SetConfig+0xc0>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d007      	beq.n	800b4cc <TIM_OC6_SetConfig+0x78>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a16      	ldr	r2, [pc, #88]	; (800b518 <TIM_OC6_SetConfig+0xc4>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d003      	beq.n	800b4cc <TIM_OC6_SetConfig+0x78>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a15      	ldr	r2, [pc, #84]	; (800b51c <TIM_OC6_SetConfig+0xc8>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d109      	bne.n	800b4e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	029b      	lsls	r3, r3, #10
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	feff8fff 	.word	0xfeff8fff
 800b50c:	40010000 	.word	0x40010000
 800b510:	40010400 	.word	0x40010400
 800b514:	40014000 	.word	0x40014000
 800b518:	40014400 	.word	0x40014400
 800b51c:	40014800 	.word	0x40014800

0800b520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	f023 0201 	bic.w	r2, r3, #1
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b54a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f023 030a 	bic.w	r3, r3, #10
 800b55c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	4313      	orrs	r3, r2
 800b564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	621a      	str	r2, [r3, #32]
}
 800b572:	bf00      	nop
 800b574:	371c      	adds	r7, #28
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b57e:	b480      	push	{r7}
 800b580:	b087      	sub	sp, #28
 800b582:	af00      	add	r7, sp, #0
 800b584:	60f8      	str	r0, [r7, #12]
 800b586:	60b9      	str	r1, [r7, #8]
 800b588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	f023 0210 	bic.w	r2, r3, #16
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	031b      	lsls	r3, r3, #12
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	011b      	lsls	r3, r3, #4
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <TIM_ITRx_SetConfig+0x38>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f043 0307 	orr.w	r3, r3, #7
 800b602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	609a      	str	r2, [r3, #8]
}
 800b60a:	bf00      	nop
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	ffcfff8f 	.word	0xffcfff8f

0800b61c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	021a      	lsls	r2, r3, #8
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	431a      	orrs	r2, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4313      	orrs	r3, r2
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	4313      	orrs	r3, r2
 800b648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	609a      	str	r2, [r3, #8]
}
 800b650:	bf00      	nop
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 031f 	and.w	r3, r3, #31
 800b66e:	2201      	movs	r2, #1
 800b670:	fa02 f303 	lsl.w	r3, r2, r3
 800b674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a1a      	ldr	r2, [r3, #32]
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	43db      	mvns	r3, r3
 800b67e:	401a      	ands	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a1a      	ldr	r2, [r3, #32]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f003 031f 	and.w	r3, r3, #31
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	fa01 f303 	lsl.w	r3, r1, r3
 800b694:	431a      	orrs	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	621a      	str	r2, [r3, #32]
}
 800b69a:	bf00      	nop
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d101      	bne.n	800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e077      	b.n	800b7b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2202      	movs	r2, #2
 800b6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a35      	ldr	r2, [pc, #212]	; (800b7bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d004      	beq.n	800b6f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a34      	ldr	r2, [pc, #208]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d108      	bne.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b70c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	4313      	orrs	r3, r2
 800b716:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a25      	ldr	r2, [pc, #148]	; (800b7bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d02c      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b732:	d027      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a22      	ldr	r2, [pc, #136]	; (800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d022      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a21      	ldr	r2, [pc, #132]	; (800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d01d      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a1f      	ldr	r2, [pc, #124]	; (800b7cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d018      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a1a      	ldr	r2, [pc, #104]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d013      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a1b      	ldr	r2, [pc, #108]	; (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00e      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a1a      	ldr	r2, [pc, #104]	; (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d009      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a18      	ldr	r2, [pc, #96]	; (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d004      	beq.n	800b784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a17      	ldr	r2, [pc, #92]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d10c      	bne.n	800b79e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b78a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	4313      	orrs	r3, r2
 800b794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40010400 	.word	0x40010400
 800b7c4:	40000400 	.word	0x40000400
 800b7c8:	40000800 	.word	0x40000800
 800b7cc:	40000c00 	.word	0x40000c00
 800b7d0:	40001800 	.word	0x40001800
 800b7d4:	40014000 	.word	0x40014000
 800b7d8:	4000e000 	.word	0x4000e000
 800b7dc:	4000e400 	.word	0x4000e400

0800b7e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d101      	bne.n	800b7fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	e087      	b.n	800b90c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	4313      	orrs	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b862:	4313      	orrs	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	041b      	lsls	r3, r3, #16
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a27      	ldr	r2, [pc, #156]	; (800b918 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d004      	beq.n	800b88a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a25      	ldr	r2, [pc, #148]	; (800b91c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d106      	bne.n	800b898 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a1e      	ldr	r2, [pc, #120]	; (800b918 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d004      	beq.n	800b8ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a1d      	ldr	r2, [pc, #116]	; (800b91c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d126      	bne.n	800b8fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b6:	051b      	lsls	r3, r3, #20
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a0e      	ldr	r2, [pc, #56]	; (800b918 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a0d      	ldr	r2, [pc, #52]	; (800b91c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d106      	bne.n	800b8fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	40010000 	.word	0x40010000
 800b91c:	40010400 	.word	0x40010400

0800b920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e042      	b.n	800b9f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b974:	2b00      	cmp	r3, #0
 800b976:	d106      	bne.n	800b986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7f7 fea1 	bl	80036c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2224      	movs	r2, #36	; 0x24
 800b98a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 0201 	bic.w	r2, r2, #1
 800b99c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f996 	bl	800bcd0 <UART_SetConfig>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d101      	bne.n	800b9ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e022      	b.n	800b9f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 ffe8 	bl	800c98c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689a      	ldr	r2, [r3, #8]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f042 0201 	orr.w	r2, r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 f86f 	bl	800cad0 <UART_CheckIdleState>
 800b9f2:	4603      	mov	r3, r0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08a      	sub	sp, #40	; 0x28
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba12:	2b20      	cmp	r3, #32
 800ba14:	f040 8083 	bne.w	800bb1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <HAL_UART_Transmit+0x28>
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e07b      	b.n	800bb20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_UART_Transmit+0x3a>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e074      	b.n	800bb20 <HAL_UART_Transmit+0x124>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2221      	movs	r2, #33	; 0x21
 800ba4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba4e:	f7f8 f865 	bl	8003b1c <HAL_GetTick>
 800ba52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	88fa      	ldrh	r2, [r7, #6]
 800ba58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6c:	d108      	bne.n	800ba80 <HAL_UART_Transmit+0x84>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	61bb      	str	r3, [r7, #24]
 800ba7e:	e003      	b.n	800ba88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ba90:	e02c      	b.n	800baec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2180      	movs	r1, #128	; 0x80
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f001 f862 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e039      	b.n	800bb20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10b      	bne.n	800baca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	3302      	adds	r3, #2
 800bac6:	61bb      	str	r3, [r7, #24]
 800bac8:	e007      	b.n	800bada <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	781a      	ldrb	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	3301      	adds	r3, #1
 800bad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1cc      	bne.n	800ba92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2200      	movs	r2, #0
 800bb00:	2140      	movs	r1, #64	; 0x40
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f001 f82f 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e006      	b.n	800bb20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e000      	b.n	800bb20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bb1e:	2302      	movs	r3, #2
  }
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3720      	adds	r7, #32
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08a      	sub	sp, #40	; 0x28
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	603b      	str	r3, [r7, #0]
 800bb34:	4613      	mov	r3, r2
 800bb36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	f040 80c0 	bne.w	800bcc4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <HAL_UART_Receive+0x28>
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e0b8      	b.n	800bcc6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d101      	bne.n	800bb62 <HAL_UART_Receive+0x3a>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e0b1      	b.n	800bcc6 <HAL_UART_Receive+0x19e>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2222      	movs	r2, #34	; 0x22
 800bb76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb80:	f7f7 ffcc 	bl	8003b1c <HAL_GetTick>
 800bb84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	88fa      	ldrh	r2, [r7, #6]
 800bb8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	88fa      	ldrh	r2, [r7, #6]
 800bb92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb9e:	d10e      	bne.n	800bbbe <HAL_UART_Receive+0x96>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d105      	bne.n	800bbb4 <HAL_UART_Receive+0x8c>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bbae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbb2:	e02d      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	22ff      	movs	r2, #255	; 0xff
 800bbb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbbc:	e028      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10d      	bne.n	800bbe2 <HAL_UART_Receive+0xba>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <HAL_UART_Receive+0xb0>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	22ff      	movs	r2, #255	; 0xff
 800bbd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbd6:	e01b      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	227f      	movs	r2, #127	; 0x7f
 800bbdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbe0:	e016      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbea:	d10d      	bne.n	800bc08 <HAL_UART_Receive+0xe0>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d104      	bne.n	800bbfe <HAL_UART_Receive+0xd6>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	227f      	movs	r2, #127	; 0x7f
 800bbf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbfc:	e008      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	223f      	movs	r2, #63	; 0x3f
 800bc02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc06:	e003      	b.n	800bc10 <HAL_UART_Receive+0xe8>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc20:	d108      	bne.n	800bc34 <HAL_UART_Receive+0x10c>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	e003      	b.n	800bc3c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bc44:	e032      	b.n	800bcac <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2120      	movs	r1, #32
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 ff88 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e032      	b.n	800bcc6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10c      	bne.n	800bc80 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	8a7b      	ldrh	r3, [r7, #18]
 800bc70:	4013      	ands	r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	3302      	adds	r3, #2
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	e00c      	b.n	800bc9a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	8a7b      	ldrh	r3, [r7, #18]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	3301      	adds	r3, #1
 800bc98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1c6      	bne.n	800bc46 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e000      	b.n	800bcc6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800bcc4:	2302      	movs	r3, #2
  }
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3720      	adds	r7, #32
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcd0:	b5b0      	push	{r4, r5, r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	4bbf      	ldr	r3, [pc, #764]	; (800bffc <UART_SetConfig+0x32c>)
 800bcfe:	4013      	ands	r3, r2
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd06:	430b      	orrs	r3, r1
 800bd08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4ab5      	ldr	r2, [pc, #724]	; (800c000 <UART_SetConfig+0x330>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d004      	beq.n	800bd3a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd36:	4313      	orrs	r3, r2
 800bd38:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	4bb0      	ldr	r3, [pc, #704]	; (800c004 <UART_SetConfig+0x334>)
 800bd42:	4013      	ands	r3, r2
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	6812      	ldr	r2, [r2, #0]
 800bd48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd4a:	430b      	orrs	r3, r1
 800bd4c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	f023 010f 	bic.w	r1, r3, #15
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	430a      	orrs	r2, r1
 800bd62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4aa7      	ldr	r2, [pc, #668]	; (800c008 <UART_SetConfig+0x338>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d176      	bne.n	800be5c <UART_SetConfig+0x18c>
 800bd6e:	4ba7      	ldr	r3, [pc, #668]	; (800c00c <UART_SetConfig+0x33c>)
 800bd70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd76:	2b28      	cmp	r3, #40	; 0x28
 800bd78:	d86c      	bhi.n	800be54 <UART_SetConfig+0x184>
 800bd7a:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <UART_SetConfig+0xb0>)
 800bd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd80:	0800be25 	.word	0x0800be25
 800bd84:	0800be55 	.word	0x0800be55
 800bd88:	0800be55 	.word	0x0800be55
 800bd8c:	0800be55 	.word	0x0800be55
 800bd90:	0800be55 	.word	0x0800be55
 800bd94:	0800be55 	.word	0x0800be55
 800bd98:	0800be55 	.word	0x0800be55
 800bd9c:	0800be55 	.word	0x0800be55
 800bda0:	0800be2d 	.word	0x0800be2d
 800bda4:	0800be55 	.word	0x0800be55
 800bda8:	0800be55 	.word	0x0800be55
 800bdac:	0800be55 	.word	0x0800be55
 800bdb0:	0800be55 	.word	0x0800be55
 800bdb4:	0800be55 	.word	0x0800be55
 800bdb8:	0800be55 	.word	0x0800be55
 800bdbc:	0800be55 	.word	0x0800be55
 800bdc0:	0800be35 	.word	0x0800be35
 800bdc4:	0800be55 	.word	0x0800be55
 800bdc8:	0800be55 	.word	0x0800be55
 800bdcc:	0800be55 	.word	0x0800be55
 800bdd0:	0800be55 	.word	0x0800be55
 800bdd4:	0800be55 	.word	0x0800be55
 800bdd8:	0800be55 	.word	0x0800be55
 800bddc:	0800be55 	.word	0x0800be55
 800bde0:	0800be3d 	.word	0x0800be3d
 800bde4:	0800be55 	.word	0x0800be55
 800bde8:	0800be55 	.word	0x0800be55
 800bdec:	0800be55 	.word	0x0800be55
 800bdf0:	0800be55 	.word	0x0800be55
 800bdf4:	0800be55 	.word	0x0800be55
 800bdf8:	0800be55 	.word	0x0800be55
 800bdfc:	0800be55 	.word	0x0800be55
 800be00:	0800be45 	.word	0x0800be45
 800be04:	0800be55 	.word	0x0800be55
 800be08:	0800be55 	.word	0x0800be55
 800be0c:	0800be55 	.word	0x0800be55
 800be10:	0800be55 	.word	0x0800be55
 800be14:	0800be55 	.word	0x0800be55
 800be18:	0800be55 	.word	0x0800be55
 800be1c:	0800be55 	.word	0x0800be55
 800be20:	0800be4d 	.word	0x0800be4d
 800be24:	2301      	movs	r3, #1
 800be26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2a:	e326      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be2c:	2304      	movs	r3, #4
 800be2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be32:	e322      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be34:	2308      	movs	r3, #8
 800be36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3a:	e31e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be3c:	2310      	movs	r3, #16
 800be3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be42:	e31a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be44:	2320      	movs	r3, #32
 800be46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4a:	e316      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be4c:	2340      	movs	r3, #64	; 0x40
 800be4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be52:	e312      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be54:	2380      	movs	r3, #128	; 0x80
 800be56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be5a:	e30e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a6b      	ldr	r2, [pc, #428]	; (800c010 <UART_SetConfig+0x340>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d130      	bne.n	800bec8 <UART_SetConfig+0x1f8>
 800be66:	4b69      	ldr	r3, [pc, #420]	; (800c00c <UART_SetConfig+0x33c>)
 800be68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6a:	f003 0307 	and.w	r3, r3, #7
 800be6e:	2b05      	cmp	r3, #5
 800be70:	d826      	bhi.n	800bec0 <UART_SetConfig+0x1f0>
 800be72:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <UART_SetConfig+0x1a8>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800be91 	.word	0x0800be91
 800be7c:	0800be99 	.word	0x0800be99
 800be80:	0800bea1 	.word	0x0800bea1
 800be84:	0800bea9 	.word	0x0800bea9
 800be88:	0800beb1 	.word	0x0800beb1
 800be8c:	0800beb9 	.word	0x0800beb9
 800be90:	2300      	movs	r3, #0
 800be92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be96:	e2f0      	b.n	800c47a <UART_SetConfig+0x7aa>
 800be98:	2304      	movs	r3, #4
 800be9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9e:	e2ec      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bea0:	2308      	movs	r3, #8
 800bea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea6:	e2e8      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bea8:	2310      	movs	r3, #16
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e2e4      	b.n	800c47a <UART_SetConfig+0x7aa>
 800beb0:	2320      	movs	r3, #32
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e2e0      	b.n	800c47a <UART_SetConfig+0x7aa>
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e2dc      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bec0:	2380      	movs	r3, #128	; 0x80
 800bec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec6:	e2d8      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a51      	ldr	r2, [pc, #324]	; (800c014 <UART_SetConfig+0x344>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d130      	bne.n	800bf34 <UART_SetConfig+0x264>
 800bed2:	4b4e      	ldr	r3, [pc, #312]	; (800c00c <UART_SetConfig+0x33c>)
 800bed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed6:	f003 0307 	and.w	r3, r3, #7
 800beda:	2b05      	cmp	r3, #5
 800bedc:	d826      	bhi.n	800bf2c <UART_SetConfig+0x25c>
 800bede:	a201      	add	r2, pc, #4	; (adr r2, 800bee4 <UART_SetConfig+0x214>)
 800bee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee4:	0800befd 	.word	0x0800befd
 800bee8:	0800bf05 	.word	0x0800bf05
 800beec:	0800bf0d 	.word	0x0800bf0d
 800bef0:	0800bf15 	.word	0x0800bf15
 800bef4:	0800bf1d 	.word	0x0800bf1d
 800bef8:	0800bf25 	.word	0x0800bf25
 800befc:	2300      	movs	r3, #0
 800befe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf02:	e2ba      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf04:	2304      	movs	r3, #4
 800bf06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf0a:	e2b6      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf0c:	2308      	movs	r3, #8
 800bf0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf12:	e2b2      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf14:	2310      	movs	r3, #16
 800bf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1a:	e2ae      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf22:	e2aa      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf2a:	e2a6      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf2c:	2380      	movs	r3, #128	; 0x80
 800bf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf32:	e2a2      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a37      	ldr	r2, [pc, #220]	; (800c018 <UART_SetConfig+0x348>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d130      	bne.n	800bfa0 <UART_SetConfig+0x2d0>
 800bf3e:	4b33      	ldr	r3, [pc, #204]	; (800c00c <UART_SetConfig+0x33c>)
 800bf40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d826      	bhi.n	800bf98 <UART_SetConfig+0x2c8>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <UART_SetConfig+0x280>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bf69 	.word	0x0800bf69
 800bf54:	0800bf71 	.word	0x0800bf71
 800bf58:	0800bf79 	.word	0x0800bf79
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf89 	.word	0x0800bf89
 800bf64:	0800bf91 	.word	0x0800bf91
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf6e:	e284      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf70:	2304      	movs	r3, #4
 800bf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf76:	e280      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf7e:	e27c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf80:	2310      	movs	r3, #16
 800bf82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf86:	e278      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf88:	2320      	movs	r3, #32
 800bf8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf8e:	e274      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf90:	2340      	movs	r3, #64	; 0x40
 800bf92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf96:	e270      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf9e:	e26c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a1d      	ldr	r2, [pc, #116]	; (800c01c <UART_SetConfig+0x34c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d142      	bne.n	800c030 <UART_SetConfig+0x360>
 800bfaa:	4b18      	ldr	r3, [pc, #96]	; (800c00c <UART_SetConfig+0x33c>)
 800bfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfae:	f003 0307 	and.w	r3, r3, #7
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d838      	bhi.n	800c028 <UART_SetConfig+0x358>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <UART_SetConfig+0x2ec>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800bfd5 	.word	0x0800bfd5
 800bfc0:	0800bfdd 	.word	0x0800bfdd
 800bfc4:	0800bfe5 	.word	0x0800bfe5
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bff5 	.word	0x0800bff5
 800bfd0:	0800c021 	.word	0x0800c021
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfda:	e24e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bfdc:	2304      	movs	r3, #4
 800bfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe2:	e24a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfea:	e246      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bfec:	2310      	movs	r3, #16
 800bfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bff2:	e242      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bff4:	2320      	movs	r3, #32
 800bff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bffa:	e23e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800bffc:	cfff69f3 	.word	0xcfff69f3
 800c000:	58000c00 	.word	0x58000c00
 800c004:	11fff4ff 	.word	0x11fff4ff
 800c008:	40011000 	.word	0x40011000
 800c00c:	58024400 	.word	0x58024400
 800c010:	40004400 	.word	0x40004400
 800c014:	40004800 	.word	0x40004800
 800c018:	40004c00 	.word	0x40004c00
 800c01c:	40005000 	.word	0x40005000
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c026:	e228      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c028:	2380      	movs	r3, #128	; 0x80
 800c02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02e:	e224      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4ab1      	ldr	r2, [pc, #708]	; (800c2fc <UART_SetConfig+0x62c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d176      	bne.n	800c128 <UART_SetConfig+0x458>
 800c03a:	4bb1      	ldr	r3, [pc, #708]	; (800c300 <UART_SetConfig+0x630>)
 800c03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c042:	2b28      	cmp	r3, #40	; 0x28
 800c044:	d86c      	bhi.n	800c120 <UART_SetConfig+0x450>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <UART_SetConfig+0x37c>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c0f1 	.word	0x0800c0f1
 800c050:	0800c121 	.word	0x0800c121
 800c054:	0800c121 	.word	0x0800c121
 800c058:	0800c121 	.word	0x0800c121
 800c05c:	0800c121 	.word	0x0800c121
 800c060:	0800c121 	.word	0x0800c121
 800c064:	0800c121 	.word	0x0800c121
 800c068:	0800c121 	.word	0x0800c121
 800c06c:	0800c0f9 	.word	0x0800c0f9
 800c070:	0800c121 	.word	0x0800c121
 800c074:	0800c121 	.word	0x0800c121
 800c078:	0800c121 	.word	0x0800c121
 800c07c:	0800c121 	.word	0x0800c121
 800c080:	0800c121 	.word	0x0800c121
 800c084:	0800c121 	.word	0x0800c121
 800c088:	0800c121 	.word	0x0800c121
 800c08c:	0800c101 	.word	0x0800c101
 800c090:	0800c121 	.word	0x0800c121
 800c094:	0800c121 	.word	0x0800c121
 800c098:	0800c121 	.word	0x0800c121
 800c09c:	0800c121 	.word	0x0800c121
 800c0a0:	0800c121 	.word	0x0800c121
 800c0a4:	0800c121 	.word	0x0800c121
 800c0a8:	0800c121 	.word	0x0800c121
 800c0ac:	0800c109 	.word	0x0800c109
 800c0b0:	0800c121 	.word	0x0800c121
 800c0b4:	0800c121 	.word	0x0800c121
 800c0b8:	0800c121 	.word	0x0800c121
 800c0bc:	0800c121 	.word	0x0800c121
 800c0c0:	0800c121 	.word	0x0800c121
 800c0c4:	0800c121 	.word	0x0800c121
 800c0c8:	0800c121 	.word	0x0800c121
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c121 	.word	0x0800c121
 800c0d4:	0800c121 	.word	0x0800c121
 800c0d8:	0800c121 	.word	0x0800c121
 800c0dc:	0800c121 	.word	0x0800c121
 800c0e0:	0800c121 	.word	0x0800c121
 800c0e4:	0800c121 	.word	0x0800c121
 800c0e8:	0800c121 	.word	0x0800c121
 800c0ec:	0800c119 	.word	0x0800c119
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0f6:	e1c0      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0fe:	e1bc      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c100:	2308      	movs	r3, #8
 800c102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c106:	e1b8      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c108:	2310      	movs	r3, #16
 800c10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c10e:	e1b4      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c110:	2320      	movs	r3, #32
 800c112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c116:	e1b0      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c118:	2340      	movs	r3, #64	; 0x40
 800c11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c11e:	e1ac      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c120:	2380      	movs	r3, #128	; 0x80
 800c122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c126:	e1a8      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a75      	ldr	r2, [pc, #468]	; (800c304 <UART_SetConfig+0x634>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d130      	bne.n	800c194 <UART_SetConfig+0x4c4>
 800c132:	4b73      	ldr	r3, [pc, #460]	; (800c300 <UART_SetConfig+0x630>)
 800c134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c136:	f003 0307 	and.w	r3, r3, #7
 800c13a:	2b05      	cmp	r3, #5
 800c13c:	d826      	bhi.n	800c18c <UART_SetConfig+0x4bc>
 800c13e:	a201      	add	r2, pc, #4	; (adr r2, 800c144 <UART_SetConfig+0x474>)
 800c140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c144:	0800c15d 	.word	0x0800c15d
 800c148:	0800c165 	.word	0x0800c165
 800c14c:	0800c16d 	.word	0x0800c16d
 800c150:	0800c175 	.word	0x0800c175
 800c154:	0800c17d 	.word	0x0800c17d
 800c158:	0800c185 	.word	0x0800c185
 800c15c:	2300      	movs	r3, #0
 800c15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c162:	e18a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c164:	2304      	movs	r3, #4
 800c166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16a:	e186      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c16c:	2308      	movs	r3, #8
 800c16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c172:	e182      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c174:	2310      	movs	r3, #16
 800c176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17a:	e17e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c17c:	2320      	movs	r3, #32
 800c17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c182:	e17a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c184:	2340      	movs	r3, #64	; 0x40
 800c186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18a:	e176      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c18c:	2380      	movs	r3, #128	; 0x80
 800c18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c192:	e172      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a5b      	ldr	r2, [pc, #364]	; (800c308 <UART_SetConfig+0x638>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d130      	bne.n	800c200 <UART_SetConfig+0x530>
 800c19e:	4b58      	ldr	r3, [pc, #352]	; (800c300 <UART_SetConfig+0x630>)
 800c1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	d826      	bhi.n	800c1f8 <UART_SetConfig+0x528>
 800c1aa:	a201      	add	r2, pc, #4	; (adr r2, 800c1b0 <UART_SetConfig+0x4e0>)
 800c1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b0:	0800c1c9 	.word	0x0800c1c9
 800c1b4:	0800c1d1 	.word	0x0800c1d1
 800c1b8:	0800c1d9 	.word	0x0800c1d9
 800c1bc:	0800c1e1 	.word	0x0800c1e1
 800c1c0:	0800c1e9 	.word	0x0800c1e9
 800c1c4:	0800c1f1 	.word	0x0800c1f1
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ce:	e154      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1d0:	2304      	movs	r3, #4
 800c1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1d6:	e150      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1d8:	2308      	movs	r3, #8
 800c1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1de:	e14c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e6:	e148      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1e8:	2320      	movs	r3, #32
 800c1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ee:	e144      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1f0:	2340      	movs	r3, #64	; 0x40
 800c1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f6:	e140      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c1f8:	2380      	movs	r3, #128	; 0x80
 800c1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fe:	e13c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a41      	ldr	r2, [pc, #260]	; (800c30c <UART_SetConfig+0x63c>)
 800c206:	4293      	cmp	r3, r2
 800c208:	f040 8082 	bne.w	800c310 <UART_SetConfig+0x640>
 800c20c:	4b3c      	ldr	r3, [pc, #240]	; (800c300 <UART_SetConfig+0x630>)
 800c20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c214:	2b28      	cmp	r3, #40	; 0x28
 800c216:	d86d      	bhi.n	800c2f4 <UART_SetConfig+0x624>
 800c218:	a201      	add	r2, pc, #4	; (adr r2, 800c220 <UART_SetConfig+0x550>)
 800c21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21e:	bf00      	nop
 800c220:	0800c2c5 	.word	0x0800c2c5
 800c224:	0800c2f5 	.word	0x0800c2f5
 800c228:	0800c2f5 	.word	0x0800c2f5
 800c22c:	0800c2f5 	.word	0x0800c2f5
 800c230:	0800c2f5 	.word	0x0800c2f5
 800c234:	0800c2f5 	.word	0x0800c2f5
 800c238:	0800c2f5 	.word	0x0800c2f5
 800c23c:	0800c2f5 	.word	0x0800c2f5
 800c240:	0800c2cd 	.word	0x0800c2cd
 800c244:	0800c2f5 	.word	0x0800c2f5
 800c248:	0800c2f5 	.word	0x0800c2f5
 800c24c:	0800c2f5 	.word	0x0800c2f5
 800c250:	0800c2f5 	.word	0x0800c2f5
 800c254:	0800c2f5 	.word	0x0800c2f5
 800c258:	0800c2f5 	.word	0x0800c2f5
 800c25c:	0800c2f5 	.word	0x0800c2f5
 800c260:	0800c2d5 	.word	0x0800c2d5
 800c264:	0800c2f5 	.word	0x0800c2f5
 800c268:	0800c2f5 	.word	0x0800c2f5
 800c26c:	0800c2f5 	.word	0x0800c2f5
 800c270:	0800c2f5 	.word	0x0800c2f5
 800c274:	0800c2f5 	.word	0x0800c2f5
 800c278:	0800c2f5 	.word	0x0800c2f5
 800c27c:	0800c2f5 	.word	0x0800c2f5
 800c280:	0800c2dd 	.word	0x0800c2dd
 800c284:	0800c2f5 	.word	0x0800c2f5
 800c288:	0800c2f5 	.word	0x0800c2f5
 800c28c:	0800c2f5 	.word	0x0800c2f5
 800c290:	0800c2f5 	.word	0x0800c2f5
 800c294:	0800c2f5 	.word	0x0800c2f5
 800c298:	0800c2f5 	.word	0x0800c2f5
 800c29c:	0800c2f5 	.word	0x0800c2f5
 800c2a0:	0800c2e5 	.word	0x0800c2e5
 800c2a4:	0800c2f5 	.word	0x0800c2f5
 800c2a8:	0800c2f5 	.word	0x0800c2f5
 800c2ac:	0800c2f5 	.word	0x0800c2f5
 800c2b0:	0800c2f5 	.word	0x0800c2f5
 800c2b4:	0800c2f5 	.word	0x0800c2f5
 800c2b8:	0800c2f5 	.word	0x0800c2f5
 800c2bc:	0800c2f5 	.word	0x0800c2f5
 800c2c0:	0800c2ed 	.word	0x0800c2ed
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e0d6      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e0d2      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e0ce      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	e0ca      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ea:	e0c6      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2ec:	2340      	movs	r3, #64	; 0x40
 800c2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2f2:	e0c2      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2fa:	e0be      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c2fc:	40011400 	.word	0x40011400
 800c300:	58024400 	.word	0x58024400
 800c304:	40007800 	.word	0x40007800
 800c308:	40007c00 	.word	0x40007c00
 800c30c:	40011800 	.word	0x40011800
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4aad      	ldr	r2, [pc, #692]	; (800c5cc <UART_SetConfig+0x8fc>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d176      	bne.n	800c408 <UART_SetConfig+0x738>
 800c31a:	4bad      	ldr	r3, [pc, #692]	; (800c5d0 <UART_SetConfig+0x900>)
 800c31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c322:	2b28      	cmp	r3, #40	; 0x28
 800c324:	d86c      	bhi.n	800c400 <UART_SetConfig+0x730>
 800c326:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <UART_SetConfig+0x65c>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c3d1 	.word	0x0800c3d1
 800c330:	0800c401 	.word	0x0800c401
 800c334:	0800c401 	.word	0x0800c401
 800c338:	0800c401 	.word	0x0800c401
 800c33c:	0800c401 	.word	0x0800c401
 800c340:	0800c401 	.word	0x0800c401
 800c344:	0800c401 	.word	0x0800c401
 800c348:	0800c401 	.word	0x0800c401
 800c34c:	0800c3d9 	.word	0x0800c3d9
 800c350:	0800c401 	.word	0x0800c401
 800c354:	0800c401 	.word	0x0800c401
 800c358:	0800c401 	.word	0x0800c401
 800c35c:	0800c401 	.word	0x0800c401
 800c360:	0800c401 	.word	0x0800c401
 800c364:	0800c401 	.word	0x0800c401
 800c368:	0800c401 	.word	0x0800c401
 800c36c:	0800c3e1 	.word	0x0800c3e1
 800c370:	0800c401 	.word	0x0800c401
 800c374:	0800c401 	.word	0x0800c401
 800c378:	0800c401 	.word	0x0800c401
 800c37c:	0800c401 	.word	0x0800c401
 800c380:	0800c401 	.word	0x0800c401
 800c384:	0800c401 	.word	0x0800c401
 800c388:	0800c401 	.word	0x0800c401
 800c38c:	0800c3e9 	.word	0x0800c3e9
 800c390:	0800c401 	.word	0x0800c401
 800c394:	0800c401 	.word	0x0800c401
 800c398:	0800c401 	.word	0x0800c401
 800c39c:	0800c401 	.word	0x0800c401
 800c3a0:	0800c401 	.word	0x0800c401
 800c3a4:	0800c401 	.word	0x0800c401
 800c3a8:	0800c401 	.word	0x0800c401
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c401 	.word	0x0800c401
 800c3b4:	0800c401 	.word	0x0800c401
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c401 	.word	0x0800c401
 800c3c0:	0800c401 	.word	0x0800c401
 800c3c4:	0800c401 	.word	0x0800c401
 800c3c8:	0800c401 	.word	0x0800c401
 800c3cc:	0800c3f9 	.word	0x0800c3f9
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3d6:	e050      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c3d8:	2304      	movs	r3, #4
 800c3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3de:	e04c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3e6:	e048      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e044      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e040      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c3f8:	2340      	movs	r3, #64	; 0x40
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e03c      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c400:	2380      	movs	r3, #128	; 0x80
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e038      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a71      	ldr	r2, [pc, #452]	; (800c5d4 <UART_SetConfig+0x904>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d130      	bne.n	800c474 <UART_SetConfig+0x7a4>
 800c412:	4b6f      	ldr	r3, [pc, #444]	; (800c5d0 <UART_SetConfig+0x900>)
 800c414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d826      	bhi.n	800c46c <UART_SetConfig+0x79c>
 800c41e:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <UART_SetConfig+0x754>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c43d 	.word	0x0800c43d
 800c428:	0800c445 	.word	0x0800c445
 800c42c:	0800c44d 	.word	0x0800c44d
 800c430:	0800c455 	.word	0x0800c455
 800c434:	0800c45d 	.word	0x0800c45d
 800c438:	0800c465 	.word	0x0800c465
 800c43c:	2302      	movs	r3, #2
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e01a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e016      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e012      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e00e      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e00a      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e006      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e002      	b.n	800c47a <UART_SetConfig+0x7aa>
 800c474:	2380      	movs	r3, #128	; 0x80
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a55      	ldr	r2, [pc, #340]	; (800c5d4 <UART_SetConfig+0x904>)
 800c480:	4293      	cmp	r3, r2
 800c482:	f040 80f0 	bne.w	800c666 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c48a:	2b20      	cmp	r3, #32
 800c48c:	dc46      	bgt.n	800c51c <UART_SetConfig+0x84c>
 800c48e:	2b02      	cmp	r3, #2
 800c490:	db75      	blt.n	800c57e <UART_SetConfig+0x8ae>
 800c492:	3b02      	subs	r3, #2
 800c494:	2b1e      	cmp	r3, #30
 800c496:	d872      	bhi.n	800c57e <UART_SetConfig+0x8ae>
 800c498:	a201      	add	r2, pc, #4	; (adr r2, 800c4a0 <UART_SetConfig+0x7d0>)
 800c49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49e:	bf00      	nop
 800c4a0:	0800c523 	.word	0x0800c523
 800c4a4:	0800c57f 	.word	0x0800c57f
 800c4a8:	0800c52b 	.word	0x0800c52b
 800c4ac:	0800c57f 	.word	0x0800c57f
 800c4b0:	0800c57f 	.word	0x0800c57f
 800c4b4:	0800c57f 	.word	0x0800c57f
 800c4b8:	0800c53b 	.word	0x0800c53b
 800c4bc:	0800c57f 	.word	0x0800c57f
 800c4c0:	0800c57f 	.word	0x0800c57f
 800c4c4:	0800c57f 	.word	0x0800c57f
 800c4c8:	0800c57f 	.word	0x0800c57f
 800c4cc:	0800c57f 	.word	0x0800c57f
 800c4d0:	0800c57f 	.word	0x0800c57f
 800c4d4:	0800c57f 	.word	0x0800c57f
 800c4d8:	0800c54b 	.word	0x0800c54b
 800c4dc:	0800c57f 	.word	0x0800c57f
 800c4e0:	0800c57f 	.word	0x0800c57f
 800c4e4:	0800c57f 	.word	0x0800c57f
 800c4e8:	0800c57f 	.word	0x0800c57f
 800c4ec:	0800c57f 	.word	0x0800c57f
 800c4f0:	0800c57f 	.word	0x0800c57f
 800c4f4:	0800c57f 	.word	0x0800c57f
 800c4f8:	0800c57f 	.word	0x0800c57f
 800c4fc:	0800c57f 	.word	0x0800c57f
 800c500:	0800c57f 	.word	0x0800c57f
 800c504:	0800c57f 	.word	0x0800c57f
 800c508:	0800c57f 	.word	0x0800c57f
 800c50c:	0800c57f 	.word	0x0800c57f
 800c510:	0800c57f 	.word	0x0800c57f
 800c514:	0800c57f 	.word	0x0800c57f
 800c518:	0800c571 	.word	0x0800c571
 800c51c:	2b40      	cmp	r3, #64	; 0x40
 800c51e:	d02a      	beq.n	800c576 <UART_SetConfig+0x8a6>
 800c520:	e02d      	b.n	800c57e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c522:	f7fd f8c3 	bl	80096ac <HAL_RCCEx_GetD3PCLK1Freq>
 800c526:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c528:	e02f      	b.n	800c58a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c52a:	f107 0314 	add.w	r3, r7, #20
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fd f8d2 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c538:	e027      	b.n	800c58a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c53a:	f107 0308 	add.w	r3, r7, #8
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fd fa1e 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c548:	e01f      	b.n	800c58a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c54a:	4b21      	ldr	r3, [pc, #132]	; (800c5d0 <UART_SetConfig+0x900>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b00      	cmp	r3, #0
 800c554:	d009      	beq.n	800c56a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c556:	4b1e      	ldr	r3, [pc, #120]	; (800c5d0 <UART_SetConfig+0x900>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	08db      	lsrs	r3, r3, #3
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	4a1d      	ldr	r2, [pc, #116]	; (800c5d8 <UART_SetConfig+0x908>)
 800c562:	fa22 f303 	lsr.w	r3, r2, r3
 800c566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c568:	e00f      	b.n	800c58a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c56a:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <UART_SetConfig+0x908>)
 800c56c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c56e:	e00c      	b.n	800c58a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c570:	4b1a      	ldr	r3, [pc, #104]	; (800c5dc <UART_SetConfig+0x90c>)
 800c572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c574:	e009      	b.n	800c58a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c57a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c57c:	e005      	b.n	800c58a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 81e6 	beq.w	800c95e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	4a12      	ldr	r2, [pc, #72]	; (800c5e0 <UART_SetConfig+0x910>)
 800c598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c59c:	461a      	mov	r2, r3
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	4413      	add	r3, r2
 800c5b0:	6a3a      	ldr	r2, [r7, #32]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d305      	bcc.n	800c5c2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5bc:	6a3a      	ldr	r2, [r7, #32]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d910      	bls.n	800c5e4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c5c8:	e1c9      	b.n	800c95e <UART_SetConfig+0xc8e>
 800c5ca:	bf00      	nop
 800c5cc:	40011c00 	.word	0x40011c00
 800c5d0:	58024400 	.word	0x58024400
 800c5d4:	58000c00 	.word	0x58000c00
 800c5d8:	03d09000 	.word	0x03d09000
 800c5dc:	003d0900 	.word	0x003d0900
 800c5e0:	0800f818 	.word	0x0800f818
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f04f 0100 	mov.w	r1, #0
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	4ac1      	ldr	r2, [pc, #772]	; (800c8f8 <UART_SetConfig+0xc28>)
 800c5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	f7f3 fee0 	bl	80003c0 <__aeabi_uldivmod>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4610      	mov	r0, r2
 800c606:	4619      	mov	r1, r3
 800c608:	f04f 0200 	mov.w	r2, #0
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	020b      	lsls	r3, r1, #8
 800c612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c616:	0202      	lsls	r2, r0, #8
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	6849      	ldr	r1, [r1, #4]
 800c61c:	0849      	lsrs	r1, r1, #1
 800c61e:	4608      	mov	r0, r1
 800c620:	f04f 0100 	mov.w	r1, #0
 800c624:	1814      	adds	r4, r2, r0
 800c626:	eb43 0501 	adc.w	r5, r3, r1
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	461a      	mov	r2, r3
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 fec2 	bl	80003c0 <__aeabi_uldivmod>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4613      	mov	r3, r2
 800c642:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c64a:	d308      	bcc.n	800c65e <UART_SetConfig+0x98e>
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c652:	d204      	bcs.n	800c65e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c65a:	60da      	str	r2, [r3, #12]
 800c65c:	e17f      	b.n	800c95e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c664:	e17b      	b.n	800c95e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c66e:	f040 80bd 	bne.w	800c7ec <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c676:	2b20      	cmp	r3, #32
 800c678:	dc48      	bgt.n	800c70c <UART_SetConfig+0xa3c>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	db7b      	blt.n	800c776 <UART_SetConfig+0xaa6>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	d879      	bhi.n	800c776 <UART_SetConfig+0xaa6>
 800c682:	a201      	add	r2, pc, #4	; (adr r2, 800c688 <UART_SetConfig+0x9b8>)
 800c684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c688:	0800c713 	.word	0x0800c713
 800c68c:	0800c71b 	.word	0x0800c71b
 800c690:	0800c777 	.word	0x0800c777
 800c694:	0800c777 	.word	0x0800c777
 800c698:	0800c723 	.word	0x0800c723
 800c69c:	0800c777 	.word	0x0800c777
 800c6a0:	0800c777 	.word	0x0800c777
 800c6a4:	0800c777 	.word	0x0800c777
 800c6a8:	0800c733 	.word	0x0800c733
 800c6ac:	0800c777 	.word	0x0800c777
 800c6b0:	0800c777 	.word	0x0800c777
 800c6b4:	0800c777 	.word	0x0800c777
 800c6b8:	0800c777 	.word	0x0800c777
 800c6bc:	0800c777 	.word	0x0800c777
 800c6c0:	0800c777 	.word	0x0800c777
 800c6c4:	0800c777 	.word	0x0800c777
 800c6c8:	0800c743 	.word	0x0800c743
 800c6cc:	0800c777 	.word	0x0800c777
 800c6d0:	0800c777 	.word	0x0800c777
 800c6d4:	0800c777 	.word	0x0800c777
 800c6d8:	0800c777 	.word	0x0800c777
 800c6dc:	0800c777 	.word	0x0800c777
 800c6e0:	0800c777 	.word	0x0800c777
 800c6e4:	0800c777 	.word	0x0800c777
 800c6e8:	0800c777 	.word	0x0800c777
 800c6ec:	0800c777 	.word	0x0800c777
 800c6f0:	0800c777 	.word	0x0800c777
 800c6f4:	0800c777 	.word	0x0800c777
 800c6f8:	0800c777 	.word	0x0800c777
 800c6fc:	0800c777 	.word	0x0800c777
 800c700:	0800c777 	.word	0x0800c777
 800c704:	0800c777 	.word	0x0800c777
 800c708:	0800c769 	.word	0x0800c769
 800c70c:	2b40      	cmp	r3, #64	; 0x40
 800c70e:	d02e      	beq.n	800c76e <UART_SetConfig+0xa9e>
 800c710:	e031      	b.n	800c776 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c712:	f7fb fc65 	bl	8007fe0 <HAL_RCC_GetPCLK1Freq>
 800c716:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c718:	e033      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c71a:	f7fb fc77 	bl	800800c <HAL_RCC_GetPCLK2Freq>
 800c71e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c720:	e02f      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c722:	f107 0314 	add.w	r3, r7, #20
 800c726:	4618      	mov	r0, r3
 800c728:	f7fc ffd6 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c730:	e027      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c732:	f107 0308 	add.w	r3, r7, #8
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd f922 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c740:	e01f      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c742:	4b6e      	ldr	r3, [pc, #440]	; (800c8fc <UART_SetConfig+0xc2c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d009      	beq.n	800c762 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c74e:	4b6b      	ldr	r3, [pc, #428]	; (800c8fc <UART_SetConfig+0xc2c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	08db      	lsrs	r3, r3, #3
 800c754:	f003 0303 	and.w	r3, r3, #3
 800c758:	4a69      	ldr	r2, [pc, #420]	; (800c900 <UART_SetConfig+0xc30>)
 800c75a:	fa22 f303 	lsr.w	r3, r2, r3
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c760:	e00f      	b.n	800c782 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c762:	4b67      	ldr	r3, [pc, #412]	; (800c900 <UART_SetConfig+0xc30>)
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c766:	e00c      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c768:	4b66      	ldr	r3, [pc, #408]	; (800c904 <UART_SetConfig+0xc34>)
 800c76a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c76c:	e009      	b.n	800c782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c774:	e005      	b.n	800c782 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c776:	2300      	movs	r3, #0
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 80ea 	beq.w	800c95e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78e:	4a5a      	ldr	r2, [pc, #360]	; (800c8f8 <UART_SetConfig+0xc28>)
 800c790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c794:	461a      	mov	r2, r3
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	fbb3 f3f2 	udiv	r3, r3, r2
 800c79c:	005a      	lsls	r2, r3, #1
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	085b      	lsrs	r3, r3, #1
 800c7a4:	441a      	add	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	2b0f      	cmp	r3, #15
 800c7b4:	d916      	bls.n	800c7e4 <UART_SetConfig+0xb14>
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7bc:	d212      	bcs.n	800c7e4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	f023 030f 	bic.w	r3, r3, #15
 800c7c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	085b      	lsrs	r3, r3, #1
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	f003 0307 	and.w	r3, r3, #7
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	e0bc      	b.n	800c95e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c7ea:	e0b8      	b.n	800c95e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7f0:	2b20      	cmp	r3, #32
 800c7f2:	dc4b      	bgt.n	800c88c <UART_SetConfig+0xbbc>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f2c0 8087 	blt.w	800c908 <UART_SetConfig+0xc38>
 800c7fa:	2b20      	cmp	r3, #32
 800c7fc:	f200 8084 	bhi.w	800c908 <UART_SetConfig+0xc38>
 800c800:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <UART_SetConfig+0xb38>)
 800c802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c806:	bf00      	nop
 800c808:	0800c893 	.word	0x0800c893
 800c80c:	0800c89b 	.word	0x0800c89b
 800c810:	0800c909 	.word	0x0800c909
 800c814:	0800c909 	.word	0x0800c909
 800c818:	0800c8a3 	.word	0x0800c8a3
 800c81c:	0800c909 	.word	0x0800c909
 800c820:	0800c909 	.word	0x0800c909
 800c824:	0800c909 	.word	0x0800c909
 800c828:	0800c8b3 	.word	0x0800c8b3
 800c82c:	0800c909 	.word	0x0800c909
 800c830:	0800c909 	.word	0x0800c909
 800c834:	0800c909 	.word	0x0800c909
 800c838:	0800c909 	.word	0x0800c909
 800c83c:	0800c909 	.word	0x0800c909
 800c840:	0800c909 	.word	0x0800c909
 800c844:	0800c909 	.word	0x0800c909
 800c848:	0800c8c3 	.word	0x0800c8c3
 800c84c:	0800c909 	.word	0x0800c909
 800c850:	0800c909 	.word	0x0800c909
 800c854:	0800c909 	.word	0x0800c909
 800c858:	0800c909 	.word	0x0800c909
 800c85c:	0800c909 	.word	0x0800c909
 800c860:	0800c909 	.word	0x0800c909
 800c864:	0800c909 	.word	0x0800c909
 800c868:	0800c909 	.word	0x0800c909
 800c86c:	0800c909 	.word	0x0800c909
 800c870:	0800c909 	.word	0x0800c909
 800c874:	0800c909 	.word	0x0800c909
 800c878:	0800c909 	.word	0x0800c909
 800c87c:	0800c909 	.word	0x0800c909
 800c880:	0800c909 	.word	0x0800c909
 800c884:	0800c909 	.word	0x0800c909
 800c888:	0800c8e9 	.word	0x0800c8e9
 800c88c:	2b40      	cmp	r3, #64	; 0x40
 800c88e:	d02e      	beq.n	800c8ee <UART_SetConfig+0xc1e>
 800c890:	e03a      	b.n	800c908 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c892:	f7fb fba5 	bl	8007fe0 <HAL_RCC_GetPCLK1Freq>
 800c896:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c898:	e03c      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c89a:	f7fb fbb7 	bl	800800c <HAL_RCC_GetPCLK2Freq>
 800c89e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8a0:	e038      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a2:	f107 0314 	add.w	r3, r7, #20
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fc ff16 	bl	80096d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8b0:	e030      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fd f862 	bl	8009980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8c0:	e028      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8c2:	4b0e      	ldr	r3, [pc, #56]	; (800c8fc <UART_SetConfig+0xc2c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d009      	beq.n	800c8e2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8ce:	4b0b      	ldr	r3, [pc, #44]	; (800c8fc <UART_SetConfig+0xc2c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	08db      	lsrs	r3, r3, #3
 800c8d4:	f003 0303 	and.w	r3, r3, #3
 800c8d8:	4a09      	ldr	r2, [pc, #36]	; (800c900 <UART_SetConfig+0xc30>)
 800c8da:	fa22 f303 	lsr.w	r3, r2, r3
 800c8de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8e0:	e018      	b.n	800c914 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c8e2:	4b07      	ldr	r3, [pc, #28]	; (800c900 <UART_SetConfig+0xc30>)
 800c8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8e6:	e015      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8e8:	4b06      	ldr	r3, [pc, #24]	; (800c904 <UART_SetConfig+0xc34>)
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8ec:	e012      	b.n	800c914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8f4:	e00e      	b.n	800c914 <UART_SetConfig+0xc44>
 800c8f6:	bf00      	nop
 800c8f8:	0800f818 	.word	0x0800f818
 800c8fc:	58024400 	.word	0x58024400
 800c900:	03d09000 	.word	0x03d09000
 800c904:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c912:	bf00      	nop
    }

    if (pclk != 0U)
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	2b00      	cmp	r3, #0
 800c918:	d021      	beq.n	800c95e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	4a1a      	ldr	r2, [pc, #104]	; (800c988 <UART_SetConfig+0xcb8>)
 800c920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c924:	461a      	mov	r2, r3
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	fbb3 f2f2 	udiv	r2, r3, r2
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	085b      	lsrs	r3, r3, #1
 800c932:	441a      	add	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	2b0f      	cmp	r3, #15
 800c942:	d909      	bls.n	800c958 <UART_SetConfig+0xc88>
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c94a:	d205      	bcs.n	800c958 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	60da      	str	r2, [r3, #12]
 800c956:	e002      	b.n	800c95e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c97a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3738      	adds	r7, #56	; 0x38
 800c982:	46bd      	mov	sp, r7
 800c984:	bdb0      	pop	{r4, r5, r7, pc}
 800c986:	bf00      	nop
 800c988:	0800f818 	.word	0x0800f818

0800c98c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00a      	beq.n	800c9b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00a      	beq.n	800c9fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	430a      	orrs	r2, r1
 800c9f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fe:	f003 0308 	and.w	r3, r3, #8
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00a      	beq.n	800ca1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	f003 0310 	and.w	r3, r3, #16
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	430a      	orrs	r2, r1
 800ca3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca42:	f003 0320 	and.w	r3, r3, #32
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00a      	beq.n	800ca60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01a      	beq.n	800caa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca8a:	d10a      	bne.n	800caa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	605a      	str	r2, [r3, #4]
  }
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cae0:	f7f7 f81c 	bl	8003b1c <HAL_GetTick>
 800cae4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 0308 	and.w	r3, r3, #8
 800caf0:	2b08      	cmp	r3, #8
 800caf2:	d10e      	bne.n	800cb12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800caf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f82f 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e025      	b.n	800cb5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 0304 	and.w	r3, r3, #4
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d10e      	bne.n	800cb3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f819 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e00f      	b.n	800cb5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2220      	movs	r2, #32
 800cb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b09c      	sub	sp, #112	; 0x70
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	60b9      	str	r1, [r7, #8]
 800cb70:	603b      	str	r3, [r7, #0]
 800cb72:	4613      	mov	r3, r2
 800cb74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb76:	e0a9      	b.n	800cccc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7e:	f000 80a5 	beq.w	800cccc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb82:	f7f6 ffcb 	bl	8003b1c <HAL_GetTick>
 800cb86:	4602      	mov	r2, r0
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d302      	bcc.n	800cb98 <UART_WaitOnFlagUntilTimeout+0x32>
 800cb92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d140      	bne.n	800cc1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbac:	667b      	str	r3, [r7, #100]	; 0x64
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbbe:	e841 2300 	strex	r3, r2, [r1]
 800cbc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1e6      	bne.n	800cb98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3308      	adds	r3, #8
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	f023 0301 	bic.w	r3, r3, #1
 800cbe0:	663b      	str	r3, [r7, #96]	; 0x60
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3308      	adds	r3, #8
 800cbe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbea:	64ba      	str	r2, [r7, #72]	; 0x48
 800cbec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e5      	bne.n	800cbca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2220      	movs	r2, #32
 800cc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cc16:	2303      	movs	r3, #3
 800cc18:	e069      	b.n	800ccee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d051      	beq.n	800cccc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc36:	d149      	bne.n	800cccc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	e853 3f00 	ldrex	r3, [r3]
 800cc4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc60:	637b      	str	r3, [r7, #52]	; 0x34
 800cc62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc68:	e841 2300 	strex	r3, r2, [r1]
 800cc6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e6      	bne.n	800cc42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	e853 3f00 	ldrex	r3, [r3]
 800cc82:	613b      	str	r3, [r7, #16]
   return(result);
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	f023 0301 	bic.w	r3, r3, #1
 800cc8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc94:	623a      	str	r2, [r7, #32]
 800cc96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc98:	69f9      	ldr	r1, [r7, #28]
 800cc9a:	6a3a      	ldr	r2, [r7, #32]
 800cc9c:	e841 2300 	strex	r3, r2, [r1]
 800cca0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1e5      	bne.n	800cc74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e010      	b.n	800ccee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	69da      	ldr	r2, [r3, #28]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	bf0c      	ite	eq
 800ccdc:	2301      	moveq	r3, #1
 800ccde:	2300      	movne	r3, #0
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	461a      	mov	r2, r3
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	f43f af46 	beq.w	800cb78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3770      	adds	r7, #112	; 0x70
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b085      	sub	sp, #20
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_UARTEx_DisableFifoMode+0x16>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e027      	b.n	800cd5c <HAL_UARTEx_DisableFifoMode+0x66>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2224      	movs	r2, #36	; 0x24
 800cd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 0201 	bic.w	r2, r2, #1
 800cd32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d101      	bne.n	800cd80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	e02d      	b.n	800cddc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2224      	movs	r2, #36	; 0x24
 800cd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 0201 	bic.w	r2, r2, #1
 800cda6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 f84f 	bl	800ce60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d101      	bne.n	800cdfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	e02d      	b.n	800ce58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2224      	movs	r2, #36	; 0x24
 800ce08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0201 	bic.w	r2, r2, #1
 800ce22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f811 	bl	800ce60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d108      	bne.n	800ce82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce80:	e031      	b.n	800cee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce82:	2310      	movs	r3, #16
 800ce84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce86:	2310      	movs	r3, #16
 800ce88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	0e5b      	lsrs	r3, r3, #25
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	0f5b      	lsrs	r3, r3, #29
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	f003 0307 	and.w	r3, r3, #7
 800cea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceaa:	7bbb      	ldrb	r3, [r7, #14]
 800ceac:	7b3a      	ldrb	r2, [r7, #12]
 800ceae:	4911      	ldr	r1, [pc, #68]	; (800cef4 <UARTEx_SetNbDataToProcess+0x94>)
 800ceb0:	5c8a      	ldrb	r2, [r1, r2]
 800ceb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ceb6:	7b3a      	ldrb	r2, [r7, #12]
 800ceb8:	490f      	ldr	r1, [pc, #60]	; (800cef8 <UARTEx_SetNbDataToProcess+0x98>)
 800ceba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cebc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cec0:	b29a      	uxth	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	7b7a      	ldrb	r2, [r7, #13]
 800cecc:	4909      	ldr	r1, [pc, #36]	; (800cef4 <UARTEx_SetNbDataToProcess+0x94>)
 800cece:	5c8a      	ldrb	r2, [r1, r2]
 800ced0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ced4:	7b7a      	ldrb	r2, [r7, #13]
 800ced6:	4908      	ldr	r1, [pc, #32]	; (800cef8 <UARTEx_SetNbDataToProcess+0x98>)
 800ced8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceda:	fb93 f3f2 	sdiv	r3, r3, r2
 800cede:	b29a      	uxth	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cee6:	bf00      	nop
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	0800f830 	.word	0x0800f830
 800cef8:	0800f838 	.word	0x0800f838

0800cefc <__errno>:
 800cefc:	4b01      	ldr	r3, [pc, #4]	; (800cf04 <__errno+0x8>)
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	24000018 	.word	0x24000018

0800cf08 <__libc_init_array>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	4d0d      	ldr	r5, [pc, #52]	; (800cf40 <__libc_init_array+0x38>)
 800cf0c:	4c0d      	ldr	r4, [pc, #52]	; (800cf44 <__libc_init_array+0x3c>)
 800cf0e:	1b64      	subs	r4, r4, r5
 800cf10:	10a4      	asrs	r4, r4, #2
 800cf12:	2600      	movs	r6, #0
 800cf14:	42a6      	cmp	r6, r4
 800cf16:	d109      	bne.n	800cf2c <__libc_init_array+0x24>
 800cf18:	4d0b      	ldr	r5, [pc, #44]	; (800cf48 <__libc_init_array+0x40>)
 800cf1a:	4c0c      	ldr	r4, [pc, #48]	; (800cf4c <__libc_init_array+0x44>)
 800cf1c:	f002 fc62 	bl	800f7e4 <_init>
 800cf20:	1b64      	subs	r4, r4, r5
 800cf22:	10a4      	asrs	r4, r4, #2
 800cf24:	2600      	movs	r6, #0
 800cf26:	42a6      	cmp	r6, r4
 800cf28:	d105      	bne.n	800cf36 <__libc_init_array+0x2e>
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf30:	4798      	blx	r3
 800cf32:	3601      	adds	r6, #1
 800cf34:	e7ee      	b.n	800cf14 <__libc_init_array+0xc>
 800cf36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf3a:	4798      	blx	r3
 800cf3c:	3601      	adds	r6, #1
 800cf3e:	e7f2      	b.n	800cf26 <__libc_init_array+0x1e>
 800cf40:	0800fc2c 	.word	0x0800fc2c
 800cf44:	0800fc2c 	.word	0x0800fc2c
 800cf48:	0800fc2c 	.word	0x0800fc2c
 800cf4c:	0800fc30 	.word	0x0800fc30

0800cf50 <memcpy>:
 800cf50:	440a      	add	r2, r1
 800cf52:	4291      	cmp	r1, r2
 800cf54:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf58:	d100      	bne.n	800cf5c <memcpy+0xc>
 800cf5a:	4770      	bx	lr
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf66:	4291      	cmp	r1, r2
 800cf68:	d1f9      	bne.n	800cf5e <memcpy+0xe>
 800cf6a:	bd10      	pop	{r4, pc}

0800cf6c <memset>:
 800cf6c:	4402      	add	r2, r0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d100      	bne.n	800cf76 <memset+0xa>
 800cf74:	4770      	bx	lr
 800cf76:	f803 1b01 	strb.w	r1, [r3], #1
 800cf7a:	e7f9      	b.n	800cf70 <memset+0x4>

0800cf7c <__cvt>:
 800cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7e:	ed2d 8b02 	vpush	{d8}
 800cf82:	eeb0 8b40 	vmov.f64	d8, d0
 800cf86:	b085      	sub	sp, #20
 800cf88:	4617      	mov	r7, r2
 800cf8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cf8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cf8e:	ee18 2a90 	vmov	r2, s17
 800cf92:	f025 0520 	bic.w	r5, r5, #32
 800cf96:	2a00      	cmp	r2, #0
 800cf98:	bfb6      	itet	lt
 800cf9a:	222d      	movlt	r2, #45	; 0x2d
 800cf9c:	2200      	movge	r2, #0
 800cf9e:	eeb1 8b40 	vneglt.f64	d8, d0
 800cfa2:	2d46      	cmp	r5, #70	; 0x46
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	d004      	beq.n	800cfb4 <__cvt+0x38>
 800cfaa:	2d45      	cmp	r5, #69	; 0x45
 800cfac:	d100      	bne.n	800cfb0 <__cvt+0x34>
 800cfae:	3401      	adds	r4, #1
 800cfb0:	2102      	movs	r1, #2
 800cfb2:	e000      	b.n	800cfb6 <__cvt+0x3a>
 800cfb4:	2103      	movs	r1, #3
 800cfb6:	ab03      	add	r3, sp, #12
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	ab02      	add	r3, sp, #8
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4633      	mov	r3, r6
 800cfc2:	eeb0 0b48 	vmov.f64	d0, d8
 800cfc6:	f000 fcab 	bl	800d920 <_dtoa_r>
 800cfca:	2d47      	cmp	r5, #71	; 0x47
 800cfcc:	d109      	bne.n	800cfe2 <__cvt+0x66>
 800cfce:	07fb      	lsls	r3, r7, #31
 800cfd0:	d407      	bmi.n	800cfe2 <__cvt+0x66>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfd6:	1a1b      	subs	r3, r3, r0
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	b005      	add	sp, #20
 800cfdc:	ecbd 8b02 	vpop	{d8}
 800cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe2:	2d46      	cmp	r5, #70	; 0x46
 800cfe4:	eb00 0204 	add.w	r2, r0, r4
 800cfe8:	d10c      	bne.n	800d004 <__cvt+0x88>
 800cfea:	7803      	ldrb	r3, [r0, #0]
 800cfec:	2b30      	cmp	r3, #48	; 0x30
 800cfee:	d107      	bne.n	800d000 <__cvt+0x84>
 800cff0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff8:	bf1c      	itt	ne
 800cffa:	f1c4 0401 	rsbne	r4, r4, #1
 800cffe:	6034      	strne	r4, [r6, #0]
 800d000:	6833      	ldr	r3, [r6, #0]
 800d002:	441a      	add	r2, r3
 800d004:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	bf08      	it	eq
 800d00e:	9203      	streq	r2, [sp, #12]
 800d010:	2130      	movs	r1, #48	; 0x30
 800d012:	9b03      	ldr	r3, [sp, #12]
 800d014:	4293      	cmp	r3, r2
 800d016:	d2dc      	bcs.n	800cfd2 <__cvt+0x56>
 800d018:	1c5c      	adds	r4, r3, #1
 800d01a:	9403      	str	r4, [sp, #12]
 800d01c:	7019      	strb	r1, [r3, #0]
 800d01e:	e7f8      	b.n	800d012 <__cvt+0x96>

0800d020 <__exponent>:
 800d020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d022:	4603      	mov	r3, r0
 800d024:	2900      	cmp	r1, #0
 800d026:	bfb8      	it	lt
 800d028:	4249      	neglt	r1, r1
 800d02a:	f803 2b02 	strb.w	r2, [r3], #2
 800d02e:	bfb4      	ite	lt
 800d030:	222d      	movlt	r2, #45	; 0x2d
 800d032:	222b      	movge	r2, #43	; 0x2b
 800d034:	2909      	cmp	r1, #9
 800d036:	7042      	strb	r2, [r0, #1]
 800d038:	dd2a      	ble.n	800d090 <__exponent+0x70>
 800d03a:	f10d 0407 	add.w	r4, sp, #7
 800d03e:	46a4      	mov	ip, r4
 800d040:	270a      	movs	r7, #10
 800d042:	46a6      	mov	lr, r4
 800d044:	460a      	mov	r2, r1
 800d046:	fb91 f6f7 	sdiv	r6, r1, r7
 800d04a:	fb07 1516 	mls	r5, r7, r6, r1
 800d04e:	3530      	adds	r5, #48	; 0x30
 800d050:	2a63      	cmp	r2, #99	; 0x63
 800d052:	f104 34ff 	add.w	r4, r4, #4294967295
 800d056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d05a:	4631      	mov	r1, r6
 800d05c:	dcf1      	bgt.n	800d042 <__exponent+0x22>
 800d05e:	3130      	adds	r1, #48	; 0x30
 800d060:	f1ae 0502 	sub.w	r5, lr, #2
 800d064:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d068:	1c44      	adds	r4, r0, #1
 800d06a:	4629      	mov	r1, r5
 800d06c:	4561      	cmp	r1, ip
 800d06e:	d30a      	bcc.n	800d086 <__exponent+0x66>
 800d070:	f10d 0209 	add.w	r2, sp, #9
 800d074:	eba2 020e 	sub.w	r2, r2, lr
 800d078:	4565      	cmp	r5, ip
 800d07a:	bf88      	it	hi
 800d07c:	2200      	movhi	r2, #0
 800d07e:	4413      	add	r3, r2
 800d080:	1a18      	subs	r0, r3, r0
 800d082:	b003      	add	sp, #12
 800d084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d08e:	e7ed      	b.n	800d06c <__exponent+0x4c>
 800d090:	2330      	movs	r3, #48	; 0x30
 800d092:	3130      	adds	r1, #48	; 0x30
 800d094:	7083      	strb	r3, [r0, #2]
 800d096:	70c1      	strb	r1, [r0, #3]
 800d098:	1d03      	adds	r3, r0, #4
 800d09a:	e7f1      	b.n	800d080 <__exponent+0x60>
 800d09c:	0000      	movs	r0, r0
	...

0800d0a0 <_printf_float>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	b08b      	sub	sp, #44	; 0x2c
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d0ac:	4616      	mov	r6, r2
 800d0ae:	461f      	mov	r7, r3
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	f001 f9b7 	bl	800e424 <_localeconv_r>
 800d0b6:	f8d0 b000 	ldr.w	fp, [r0]
 800d0ba:	4658      	mov	r0, fp
 800d0bc:	f7f3 f928 	bl	8000310 <strlen>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	9308      	str	r3, [sp, #32]
 800d0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d0cc:	6822      	ldr	r2, [r4, #0]
 800d0ce:	3307      	adds	r3, #7
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	f103 0108 	add.w	r1, r3, #8
 800d0d8:	f8c8 1000 	str.w	r1, [r8]
 800d0dc:	4682      	mov	sl, r0
 800d0de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d0e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d348 <_printf_float+0x2a8>
 800d0ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d0ee:	eeb0 6bc0 	vabs.f64	d6, d0
 800d0f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fa:	dd24      	ble.n	800d146 <_printf_float+0xa6>
 800d0fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d104:	d502      	bpl.n	800d10c <_printf_float+0x6c>
 800d106:	232d      	movs	r3, #45	; 0x2d
 800d108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d10c:	4b90      	ldr	r3, [pc, #576]	; (800d350 <_printf_float+0x2b0>)
 800d10e:	4891      	ldr	r0, [pc, #580]	; (800d354 <_printf_float+0x2b4>)
 800d110:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d114:	bf94      	ite	ls
 800d116:	4698      	movls	r8, r3
 800d118:	4680      	movhi	r8, r0
 800d11a:	2303      	movs	r3, #3
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	f022 0204 	bic.w	r2, r2, #4
 800d122:	2300      	movs	r3, #0
 800d124:	6022      	str	r2, [r4, #0]
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	9700      	str	r7, [sp, #0]
 800d12a:	4633      	mov	r3, r6
 800d12c:	aa09      	add	r2, sp, #36	; 0x24
 800d12e:	4621      	mov	r1, r4
 800d130:	4628      	mov	r0, r5
 800d132:	f000 f9d3 	bl	800d4dc <_printf_common>
 800d136:	3001      	adds	r0, #1
 800d138:	f040 808a 	bne.w	800d250 <_printf_float+0x1b0>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	b00b      	add	sp, #44	; 0x2c
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	eeb4 0b40 	vcmp.f64	d0, d0
 800d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d14e:	d709      	bvc.n	800d164 <_printf_float+0xc4>
 800d150:	ee10 3a90 	vmov	r3, s1
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfbc      	itt	lt
 800d158:	232d      	movlt	r3, #45	; 0x2d
 800d15a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d15e:	487e      	ldr	r0, [pc, #504]	; (800d358 <_printf_float+0x2b8>)
 800d160:	4b7e      	ldr	r3, [pc, #504]	; (800d35c <_printf_float+0x2bc>)
 800d162:	e7d5      	b.n	800d110 <_printf_float+0x70>
 800d164:	6863      	ldr	r3, [r4, #4]
 800d166:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d16a:	9104      	str	r1, [sp, #16]
 800d16c:	1c59      	adds	r1, r3, #1
 800d16e:	d13c      	bne.n	800d1ea <_printf_float+0x14a>
 800d170:	2306      	movs	r3, #6
 800d172:	6063      	str	r3, [r4, #4]
 800d174:	2300      	movs	r3, #0
 800d176:	9303      	str	r3, [sp, #12]
 800d178:	ab08      	add	r3, sp, #32
 800d17a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d17e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d182:	ab07      	add	r3, sp, #28
 800d184:	6861      	ldr	r1, [r4, #4]
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	6022      	str	r2, [r4, #0]
 800d18a:	f10d 031b 	add.w	r3, sp, #27
 800d18e:	4628      	mov	r0, r5
 800d190:	f7ff fef4 	bl	800cf7c <__cvt>
 800d194:	9b04      	ldr	r3, [sp, #16]
 800d196:	9907      	ldr	r1, [sp, #28]
 800d198:	2b47      	cmp	r3, #71	; 0x47
 800d19a:	4680      	mov	r8, r0
 800d19c:	d108      	bne.n	800d1b0 <_printf_float+0x110>
 800d19e:	1cc8      	adds	r0, r1, #3
 800d1a0:	db02      	blt.n	800d1a8 <_printf_float+0x108>
 800d1a2:	6863      	ldr	r3, [r4, #4]
 800d1a4:	4299      	cmp	r1, r3
 800d1a6:	dd41      	ble.n	800d22c <_printf_float+0x18c>
 800d1a8:	f1a9 0902 	sub.w	r9, r9, #2
 800d1ac:	fa5f f989 	uxtb.w	r9, r9
 800d1b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d1b4:	d820      	bhi.n	800d1f8 <_printf_float+0x158>
 800d1b6:	3901      	subs	r1, #1
 800d1b8:	464a      	mov	r2, r9
 800d1ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d1be:	9107      	str	r1, [sp, #28]
 800d1c0:	f7ff ff2e 	bl	800d020 <__exponent>
 800d1c4:	9a08      	ldr	r2, [sp, #32]
 800d1c6:	9004      	str	r0, [sp, #16]
 800d1c8:	1813      	adds	r3, r2, r0
 800d1ca:	2a01      	cmp	r2, #1
 800d1cc:	6123      	str	r3, [r4, #16]
 800d1ce:	dc02      	bgt.n	800d1d6 <_printf_float+0x136>
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	07d2      	lsls	r2, r2, #31
 800d1d4:	d501      	bpl.n	800d1da <_printf_float+0x13a>
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	6123      	str	r3, [r4, #16]
 800d1da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0a2      	beq.n	800d128 <_printf_float+0x88>
 800d1e2:	232d      	movs	r3, #45	; 0x2d
 800d1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e8:	e79e      	b.n	800d128 <_printf_float+0x88>
 800d1ea:	9904      	ldr	r1, [sp, #16]
 800d1ec:	2947      	cmp	r1, #71	; 0x47
 800d1ee:	d1c1      	bne.n	800d174 <_printf_float+0xd4>
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1bf      	bne.n	800d174 <_printf_float+0xd4>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e7bc      	b.n	800d172 <_printf_float+0xd2>
 800d1f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d1fc:	d118      	bne.n	800d230 <_printf_float+0x190>
 800d1fe:	2900      	cmp	r1, #0
 800d200:	6863      	ldr	r3, [r4, #4]
 800d202:	dd0b      	ble.n	800d21c <_printf_float+0x17c>
 800d204:	6121      	str	r1, [r4, #16]
 800d206:	b913      	cbnz	r3, 800d20e <_printf_float+0x16e>
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	07d0      	lsls	r0, r2, #31
 800d20c:	d502      	bpl.n	800d214 <_printf_float+0x174>
 800d20e:	3301      	adds	r3, #1
 800d210:	440b      	add	r3, r1
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	2300      	movs	r3, #0
 800d216:	65a1      	str	r1, [r4, #88]	; 0x58
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	e7de      	b.n	800d1da <_printf_float+0x13a>
 800d21c:	b913      	cbnz	r3, 800d224 <_printf_float+0x184>
 800d21e:	6822      	ldr	r2, [r4, #0]
 800d220:	07d2      	lsls	r2, r2, #31
 800d222:	d501      	bpl.n	800d228 <_printf_float+0x188>
 800d224:	3302      	adds	r3, #2
 800d226:	e7f4      	b.n	800d212 <_printf_float+0x172>
 800d228:	2301      	movs	r3, #1
 800d22a:	e7f2      	b.n	800d212 <_printf_float+0x172>
 800d22c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d230:	9b08      	ldr	r3, [sp, #32]
 800d232:	4299      	cmp	r1, r3
 800d234:	db05      	blt.n	800d242 <_printf_float+0x1a2>
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	6121      	str	r1, [r4, #16]
 800d23a:	07d8      	lsls	r0, r3, #31
 800d23c:	d5ea      	bpl.n	800d214 <_printf_float+0x174>
 800d23e:	1c4b      	adds	r3, r1, #1
 800d240:	e7e7      	b.n	800d212 <_printf_float+0x172>
 800d242:	2900      	cmp	r1, #0
 800d244:	bfd4      	ite	le
 800d246:	f1c1 0202 	rsble	r2, r1, #2
 800d24a:	2201      	movgt	r2, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	e7e0      	b.n	800d212 <_printf_float+0x172>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	055a      	lsls	r2, r3, #21
 800d254:	d407      	bmi.n	800d266 <_printf_float+0x1c6>
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	4642      	mov	r2, r8
 800d25a:	4631      	mov	r1, r6
 800d25c:	4628      	mov	r0, r5
 800d25e:	47b8      	blx	r7
 800d260:	3001      	adds	r0, #1
 800d262:	d12a      	bne.n	800d2ba <_printf_float+0x21a>
 800d264:	e76a      	b.n	800d13c <_printf_float+0x9c>
 800d266:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d26a:	f240 80e2 	bls.w	800d432 <_printf_float+0x392>
 800d26e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27a:	d133      	bne.n	800d2e4 <_printf_float+0x244>
 800d27c:	4a38      	ldr	r2, [pc, #224]	; (800d360 <_printf_float+0x2c0>)
 800d27e:	2301      	movs	r3, #1
 800d280:	4631      	mov	r1, r6
 800d282:	4628      	mov	r0, r5
 800d284:	47b8      	blx	r7
 800d286:	3001      	adds	r0, #1
 800d288:	f43f af58 	beq.w	800d13c <_printf_float+0x9c>
 800d28c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d290:	429a      	cmp	r2, r3
 800d292:	db02      	blt.n	800d29a <_printf_float+0x1fa>
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	07d8      	lsls	r0, r3, #31
 800d298:	d50f      	bpl.n	800d2ba <_printf_float+0x21a>
 800d29a:	4653      	mov	r3, sl
 800d29c:	465a      	mov	r2, fp
 800d29e:	4631      	mov	r1, r6
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	47b8      	blx	r7
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	f43f af49 	beq.w	800d13c <_printf_float+0x9c>
 800d2aa:	f04f 0800 	mov.w	r8, #0
 800d2ae:	f104 091a 	add.w	r9, r4, #26
 800d2b2:	9b08      	ldr	r3, [sp, #32]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	4543      	cmp	r3, r8
 800d2b8:	dc09      	bgt.n	800d2ce <_printf_float+0x22e>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	079b      	lsls	r3, r3, #30
 800d2be:	f100 8108 	bmi.w	800d4d2 <_printf_float+0x432>
 800d2c2:	68e0      	ldr	r0, [r4, #12]
 800d2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c6:	4298      	cmp	r0, r3
 800d2c8:	bfb8      	it	lt
 800d2ca:	4618      	movlt	r0, r3
 800d2cc:	e738      	b.n	800d140 <_printf_float+0xa0>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	464a      	mov	r2, r9
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	47b8      	blx	r7
 800d2d8:	3001      	adds	r0, #1
 800d2da:	f43f af2f 	beq.w	800d13c <_printf_float+0x9c>
 800d2de:	f108 0801 	add.w	r8, r8, #1
 800d2e2:	e7e6      	b.n	800d2b2 <_printf_float+0x212>
 800d2e4:	9b07      	ldr	r3, [sp, #28]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dc3c      	bgt.n	800d364 <_printf_float+0x2c4>
 800d2ea:	4a1d      	ldr	r2, [pc, #116]	; (800d360 <_printf_float+0x2c0>)
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	47b8      	blx	r7
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	f43f af21 	beq.w	800d13c <_printf_float+0x9c>
 800d2fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	d102      	bne.n	800d308 <_printf_float+0x268>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	07d9      	lsls	r1, r3, #31
 800d306:	d5d8      	bpl.n	800d2ba <_printf_float+0x21a>
 800d308:	4653      	mov	r3, sl
 800d30a:	465a      	mov	r2, fp
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	f43f af12 	beq.w	800d13c <_printf_float+0x9c>
 800d318:	f04f 0900 	mov.w	r9, #0
 800d31c:	f104 0a1a 	add.w	sl, r4, #26
 800d320:	9b07      	ldr	r3, [sp, #28]
 800d322:	425b      	negs	r3, r3
 800d324:	454b      	cmp	r3, r9
 800d326:	dc01      	bgt.n	800d32c <_printf_float+0x28c>
 800d328:	9b08      	ldr	r3, [sp, #32]
 800d32a:	e795      	b.n	800d258 <_printf_float+0x1b8>
 800d32c:	2301      	movs	r3, #1
 800d32e:	4652      	mov	r2, sl
 800d330:	4631      	mov	r1, r6
 800d332:	4628      	mov	r0, r5
 800d334:	47b8      	blx	r7
 800d336:	3001      	adds	r0, #1
 800d338:	f43f af00 	beq.w	800d13c <_printf_float+0x9c>
 800d33c:	f109 0901 	add.w	r9, r9, #1
 800d340:	e7ee      	b.n	800d320 <_printf_float+0x280>
 800d342:	bf00      	nop
 800d344:	f3af 8000 	nop.w
 800d348:	ffffffff 	.word	0xffffffff
 800d34c:	7fefffff 	.word	0x7fefffff
 800d350:	0800f844 	.word	0x0800f844
 800d354:	0800f848 	.word	0x0800f848
 800d358:	0800f850 	.word	0x0800f850
 800d35c:	0800f84c 	.word	0x0800f84c
 800d360:	0800f854 	.word	0x0800f854
 800d364:	9a08      	ldr	r2, [sp, #32]
 800d366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d368:	429a      	cmp	r2, r3
 800d36a:	bfa8      	it	ge
 800d36c:	461a      	movge	r2, r3
 800d36e:	2a00      	cmp	r2, #0
 800d370:	4691      	mov	r9, r2
 800d372:	dc38      	bgt.n	800d3e6 <_printf_float+0x346>
 800d374:	2300      	movs	r3, #0
 800d376:	9305      	str	r3, [sp, #20]
 800d378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d37c:	f104 021a 	add.w	r2, r4, #26
 800d380:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d382:	9905      	ldr	r1, [sp, #20]
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	eba3 0309 	sub.w	r3, r3, r9
 800d38a:	428b      	cmp	r3, r1
 800d38c:	dc33      	bgt.n	800d3f6 <_printf_float+0x356>
 800d38e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d392:	429a      	cmp	r2, r3
 800d394:	db3c      	blt.n	800d410 <_printf_float+0x370>
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	07da      	lsls	r2, r3, #31
 800d39a:	d439      	bmi.n	800d410 <_printf_float+0x370>
 800d39c:	9a08      	ldr	r2, [sp, #32]
 800d39e:	9b04      	ldr	r3, [sp, #16]
 800d3a0:	9907      	ldr	r1, [sp, #28]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	eba2 0901 	sub.w	r9, r2, r1
 800d3a8:	4599      	cmp	r9, r3
 800d3aa:	bfa8      	it	ge
 800d3ac:	4699      	movge	r9, r3
 800d3ae:	f1b9 0f00 	cmp.w	r9, #0
 800d3b2:	dc35      	bgt.n	800d420 <_printf_float+0x380>
 800d3b4:	f04f 0800 	mov.w	r8, #0
 800d3b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3bc:	f104 0a1a 	add.w	sl, r4, #26
 800d3c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d3c4:	1a9b      	subs	r3, r3, r2
 800d3c6:	eba3 0309 	sub.w	r3, r3, r9
 800d3ca:	4543      	cmp	r3, r8
 800d3cc:	f77f af75 	ble.w	800d2ba <_printf_float+0x21a>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	4652      	mov	r2, sl
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b8      	blx	r7
 800d3da:	3001      	adds	r0, #1
 800d3dc:	f43f aeae 	beq.w	800d13c <_printf_float+0x9c>
 800d3e0:	f108 0801 	add.w	r8, r8, #1
 800d3e4:	e7ec      	b.n	800d3c0 <_printf_float+0x320>
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4642      	mov	r2, r8
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d1bf      	bne.n	800d374 <_printf_float+0x2d4>
 800d3f4:	e6a2      	b.n	800d13c <_printf_float+0x9c>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	9204      	str	r2, [sp, #16]
 800d3fe:	47b8      	blx	r7
 800d400:	3001      	adds	r0, #1
 800d402:	f43f ae9b 	beq.w	800d13c <_printf_float+0x9c>
 800d406:	9b05      	ldr	r3, [sp, #20]
 800d408:	9a04      	ldr	r2, [sp, #16]
 800d40a:	3301      	adds	r3, #1
 800d40c:	9305      	str	r3, [sp, #20]
 800d40e:	e7b7      	b.n	800d380 <_printf_float+0x2e0>
 800d410:	4653      	mov	r3, sl
 800d412:	465a      	mov	r2, fp
 800d414:	4631      	mov	r1, r6
 800d416:	4628      	mov	r0, r5
 800d418:	47b8      	blx	r7
 800d41a:	3001      	adds	r0, #1
 800d41c:	d1be      	bne.n	800d39c <_printf_float+0x2fc>
 800d41e:	e68d      	b.n	800d13c <_printf_float+0x9c>
 800d420:	9a04      	ldr	r2, [sp, #16]
 800d422:	464b      	mov	r3, r9
 800d424:	4442      	add	r2, r8
 800d426:	4631      	mov	r1, r6
 800d428:	4628      	mov	r0, r5
 800d42a:	47b8      	blx	r7
 800d42c:	3001      	adds	r0, #1
 800d42e:	d1c1      	bne.n	800d3b4 <_printf_float+0x314>
 800d430:	e684      	b.n	800d13c <_printf_float+0x9c>
 800d432:	9a08      	ldr	r2, [sp, #32]
 800d434:	2a01      	cmp	r2, #1
 800d436:	dc01      	bgt.n	800d43c <_printf_float+0x39c>
 800d438:	07db      	lsls	r3, r3, #31
 800d43a:	d537      	bpl.n	800d4ac <_printf_float+0x40c>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4642      	mov	r2, r8
 800d440:	4631      	mov	r1, r6
 800d442:	4628      	mov	r0, r5
 800d444:	47b8      	blx	r7
 800d446:	3001      	adds	r0, #1
 800d448:	f43f ae78 	beq.w	800d13c <_printf_float+0x9c>
 800d44c:	4653      	mov	r3, sl
 800d44e:	465a      	mov	r2, fp
 800d450:	4631      	mov	r1, r6
 800d452:	4628      	mov	r0, r5
 800d454:	47b8      	blx	r7
 800d456:	3001      	adds	r0, #1
 800d458:	f43f ae70 	beq.w	800d13c <_printf_float+0x9c>
 800d45c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d460:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d468:	d01b      	beq.n	800d4a2 <_printf_float+0x402>
 800d46a:	9b08      	ldr	r3, [sp, #32]
 800d46c:	f108 0201 	add.w	r2, r8, #1
 800d470:	3b01      	subs	r3, #1
 800d472:	4631      	mov	r1, r6
 800d474:	4628      	mov	r0, r5
 800d476:	47b8      	blx	r7
 800d478:	3001      	adds	r0, #1
 800d47a:	d10e      	bne.n	800d49a <_printf_float+0x3fa>
 800d47c:	e65e      	b.n	800d13c <_printf_float+0x9c>
 800d47e:	2301      	movs	r3, #1
 800d480:	464a      	mov	r2, r9
 800d482:	4631      	mov	r1, r6
 800d484:	4628      	mov	r0, r5
 800d486:	47b8      	blx	r7
 800d488:	3001      	adds	r0, #1
 800d48a:	f43f ae57 	beq.w	800d13c <_printf_float+0x9c>
 800d48e:	f108 0801 	add.w	r8, r8, #1
 800d492:	9b08      	ldr	r3, [sp, #32]
 800d494:	3b01      	subs	r3, #1
 800d496:	4543      	cmp	r3, r8
 800d498:	dcf1      	bgt.n	800d47e <_printf_float+0x3de>
 800d49a:	9b04      	ldr	r3, [sp, #16]
 800d49c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d4a0:	e6db      	b.n	800d25a <_printf_float+0x1ba>
 800d4a2:	f04f 0800 	mov.w	r8, #0
 800d4a6:	f104 091a 	add.w	r9, r4, #26
 800d4aa:	e7f2      	b.n	800d492 <_printf_float+0x3f2>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	4642      	mov	r2, r8
 800d4b0:	e7df      	b.n	800d472 <_printf_float+0x3d2>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	464a      	mov	r2, r9
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b8      	blx	r7
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f43f ae3d 	beq.w	800d13c <_printf_float+0x9c>
 800d4c2:	f108 0801 	add.w	r8, r8, #1
 800d4c6:	68e3      	ldr	r3, [r4, #12]
 800d4c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ca:	1a5b      	subs	r3, r3, r1
 800d4cc:	4543      	cmp	r3, r8
 800d4ce:	dcf0      	bgt.n	800d4b2 <_printf_float+0x412>
 800d4d0:	e6f7      	b.n	800d2c2 <_printf_float+0x222>
 800d4d2:	f04f 0800 	mov.w	r8, #0
 800d4d6:	f104 0919 	add.w	r9, r4, #25
 800d4da:	e7f4      	b.n	800d4c6 <_printf_float+0x426>

0800d4dc <_printf_common>:
 800d4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e0:	4616      	mov	r6, r2
 800d4e2:	4699      	mov	r9, r3
 800d4e4:	688a      	ldr	r2, [r1, #8]
 800d4e6:	690b      	ldr	r3, [r1, #16]
 800d4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	bfb8      	it	lt
 800d4f0:	4613      	movlt	r3, r2
 800d4f2:	6033      	str	r3, [r6, #0]
 800d4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	b10a      	cbz	r2, 800d502 <_printf_common+0x26>
 800d4fe:	3301      	adds	r3, #1
 800d500:	6033      	str	r3, [r6, #0]
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	0699      	lsls	r1, r3, #26
 800d506:	bf42      	ittt	mi
 800d508:	6833      	ldrmi	r3, [r6, #0]
 800d50a:	3302      	addmi	r3, #2
 800d50c:	6033      	strmi	r3, [r6, #0]
 800d50e:	6825      	ldr	r5, [r4, #0]
 800d510:	f015 0506 	ands.w	r5, r5, #6
 800d514:	d106      	bne.n	800d524 <_printf_common+0x48>
 800d516:	f104 0a19 	add.w	sl, r4, #25
 800d51a:	68e3      	ldr	r3, [r4, #12]
 800d51c:	6832      	ldr	r2, [r6, #0]
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	42ab      	cmp	r3, r5
 800d522:	dc26      	bgt.n	800d572 <_printf_common+0x96>
 800d524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d528:	1e13      	subs	r3, r2, #0
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	bf18      	it	ne
 800d52e:	2301      	movne	r3, #1
 800d530:	0692      	lsls	r2, r2, #26
 800d532:	d42b      	bmi.n	800d58c <_printf_common+0xb0>
 800d534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d538:	4649      	mov	r1, r9
 800d53a:	4638      	mov	r0, r7
 800d53c:	47c0      	blx	r8
 800d53e:	3001      	adds	r0, #1
 800d540:	d01e      	beq.n	800d580 <_printf_common+0xa4>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	68e5      	ldr	r5, [r4, #12]
 800d546:	6832      	ldr	r2, [r6, #0]
 800d548:	f003 0306 	and.w	r3, r3, #6
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	bf08      	it	eq
 800d550:	1aad      	subeq	r5, r5, r2
 800d552:	68a3      	ldr	r3, [r4, #8]
 800d554:	6922      	ldr	r2, [r4, #16]
 800d556:	bf0c      	ite	eq
 800d558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d55c:	2500      	movne	r5, #0
 800d55e:	4293      	cmp	r3, r2
 800d560:	bfc4      	itt	gt
 800d562:	1a9b      	subgt	r3, r3, r2
 800d564:	18ed      	addgt	r5, r5, r3
 800d566:	2600      	movs	r6, #0
 800d568:	341a      	adds	r4, #26
 800d56a:	42b5      	cmp	r5, r6
 800d56c:	d11a      	bne.n	800d5a4 <_printf_common+0xc8>
 800d56e:	2000      	movs	r0, #0
 800d570:	e008      	b.n	800d584 <_printf_common+0xa8>
 800d572:	2301      	movs	r3, #1
 800d574:	4652      	mov	r2, sl
 800d576:	4649      	mov	r1, r9
 800d578:	4638      	mov	r0, r7
 800d57a:	47c0      	blx	r8
 800d57c:	3001      	adds	r0, #1
 800d57e:	d103      	bne.n	800d588 <_printf_common+0xac>
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d588:	3501      	adds	r5, #1
 800d58a:	e7c6      	b.n	800d51a <_printf_common+0x3e>
 800d58c:	18e1      	adds	r1, r4, r3
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	2030      	movs	r0, #48	; 0x30
 800d592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d596:	4422      	add	r2, r4
 800d598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	e7c7      	b.n	800d534 <_printf_common+0x58>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	4638      	mov	r0, r7
 800d5ac:	47c0      	blx	r8
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	d0e6      	beq.n	800d580 <_printf_common+0xa4>
 800d5b2:	3601      	adds	r6, #1
 800d5b4:	e7d9      	b.n	800d56a <_printf_common+0x8e>
	...

0800d5b8 <_printf_i>:
 800d5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5bc:	460c      	mov	r4, r1
 800d5be:	4691      	mov	r9, r2
 800d5c0:	7e27      	ldrb	r7, [r4, #24]
 800d5c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d5c4:	2f78      	cmp	r7, #120	; 0x78
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	469a      	mov	sl, r3
 800d5ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5ce:	d807      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5d0:	2f62      	cmp	r7, #98	; 0x62
 800d5d2:	d80a      	bhi.n	800d5ea <_printf_i+0x32>
 800d5d4:	2f00      	cmp	r7, #0
 800d5d6:	f000 80d8 	beq.w	800d78a <_printf_i+0x1d2>
 800d5da:	2f58      	cmp	r7, #88	; 0x58
 800d5dc:	f000 80a3 	beq.w	800d726 <_printf_i+0x16e>
 800d5e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5e8:	e03a      	b.n	800d660 <_printf_i+0xa8>
 800d5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5ee:	2b15      	cmp	r3, #21
 800d5f0:	d8f6      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5f2:	a001      	add	r0, pc, #4	; (adr r0, 800d5f8 <_printf_i+0x40>)
 800d5f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d5f8:	0800d651 	.word	0x0800d651
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d5e1 	.word	0x0800d5e1
 800d604:	0800d5e1 	.word	0x0800d5e1
 800d608:	0800d5e1 	.word	0x0800d5e1
 800d60c:	0800d5e1 	.word	0x0800d5e1
 800d610:	0800d665 	.word	0x0800d665
 800d614:	0800d5e1 	.word	0x0800d5e1
 800d618:	0800d5e1 	.word	0x0800d5e1
 800d61c:	0800d5e1 	.word	0x0800d5e1
 800d620:	0800d5e1 	.word	0x0800d5e1
 800d624:	0800d771 	.word	0x0800d771
 800d628:	0800d695 	.word	0x0800d695
 800d62c:	0800d753 	.word	0x0800d753
 800d630:	0800d5e1 	.word	0x0800d5e1
 800d634:	0800d5e1 	.word	0x0800d5e1
 800d638:	0800d793 	.word	0x0800d793
 800d63c:	0800d5e1 	.word	0x0800d5e1
 800d640:	0800d695 	.word	0x0800d695
 800d644:	0800d5e1 	.word	0x0800d5e1
 800d648:	0800d5e1 	.word	0x0800d5e1
 800d64c:	0800d75b 	.word	0x0800d75b
 800d650:	680b      	ldr	r3, [r1, #0]
 800d652:	1d1a      	adds	r2, r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	600a      	str	r2, [r1, #0]
 800d658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d660:	2301      	movs	r3, #1
 800d662:	e0a3      	b.n	800d7ac <_printf_i+0x1f4>
 800d664:	6825      	ldr	r5, [r4, #0]
 800d666:	6808      	ldr	r0, [r1, #0]
 800d668:	062e      	lsls	r6, r5, #24
 800d66a:	f100 0304 	add.w	r3, r0, #4
 800d66e:	d50a      	bpl.n	800d686 <_printf_i+0xce>
 800d670:	6805      	ldr	r5, [r0, #0]
 800d672:	600b      	str	r3, [r1, #0]
 800d674:	2d00      	cmp	r5, #0
 800d676:	da03      	bge.n	800d680 <_printf_i+0xc8>
 800d678:	232d      	movs	r3, #45	; 0x2d
 800d67a:	426d      	negs	r5, r5
 800d67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d680:	485e      	ldr	r0, [pc, #376]	; (800d7fc <_printf_i+0x244>)
 800d682:	230a      	movs	r3, #10
 800d684:	e019      	b.n	800d6ba <_printf_i+0x102>
 800d686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d68a:	6805      	ldr	r5, [r0, #0]
 800d68c:	600b      	str	r3, [r1, #0]
 800d68e:	bf18      	it	ne
 800d690:	b22d      	sxthne	r5, r5
 800d692:	e7ef      	b.n	800d674 <_printf_i+0xbc>
 800d694:	680b      	ldr	r3, [r1, #0]
 800d696:	6825      	ldr	r5, [r4, #0]
 800d698:	1d18      	adds	r0, r3, #4
 800d69a:	6008      	str	r0, [r1, #0]
 800d69c:	0628      	lsls	r0, r5, #24
 800d69e:	d501      	bpl.n	800d6a4 <_printf_i+0xec>
 800d6a0:	681d      	ldr	r5, [r3, #0]
 800d6a2:	e002      	b.n	800d6aa <_printf_i+0xf2>
 800d6a4:	0669      	lsls	r1, r5, #25
 800d6a6:	d5fb      	bpl.n	800d6a0 <_printf_i+0xe8>
 800d6a8:	881d      	ldrh	r5, [r3, #0]
 800d6aa:	4854      	ldr	r0, [pc, #336]	; (800d7fc <_printf_i+0x244>)
 800d6ac:	2f6f      	cmp	r7, #111	; 0x6f
 800d6ae:	bf0c      	ite	eq
 800d6b0:	2308      	moveq	r3, #8
 800d6b2:	230a      	movne	r3, #10
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ba:	6866      	ldr	r6, [r4, #4]
 800d6bc:	60a6      	str	r6, [r4, #8]
 800d6be:	2e00      	cmp	r6, #0
 800d6c0:	bfa2      	ittt	ge
 800d6c2:	6821      	ldrge	r1, [r4, #0]
 800d6c4:	f021 0104 	bicge.w	r1, r1, #4
 800d6c8:	6021      	strge	r1, [r4, #0]
 800d6ca:	b90d      	cbnz	r5, 800d6d0 <_printf_i+0x118>
 800d6cc:	2e00      	cmp	r6, #0
 800d6ce:	d04d      	beq.n	800d76c <_printf_i+0x1b4>
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6d6:	fb03 5711 	mls	r7, r3, r1, r5
 800d6da:	5dc7      	ldrb	r7, [r0, r7]
 800d6dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6e0:	462f      	mov	r7, r5
 800d6e2:	42bb      	cmp	r3, r7
 800d6e4:	460d      	mov	r5, r1
 800d6e6:	d9f4      	bls.n	800d6d2 <_printf_i+0x11a>
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d10b      	bne.n	800d704 <_printf_i+0x14c>
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	07df      	lsls	r7, r3, #31
 800d6f0:	d508      	bpl.n	800d704 <_printf_i+0x14c>
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	bfde      	ittt	le
 800d6fa:	2330      	movle	r3, #48	; 0x30
 800d6fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d700:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d704:	1b92      	subs	r2, r2, r6
 800d706:	6122      	str	r2, [r4, #16]
 800d708:	f8cd a000 	str.w	sl, [sp]
 800d70c:	464b      	mov	r3, r9
 800d70e:	aa03      	add	r2, sp, #12
 800d710:	4621      	mov	r1, r4
 800d712:	4640      	mov	r0, r8
 800d714:	f7ff fee2 	bl	800d4dc <_printf_common>
 800d718:	3001      	adds	r0, #1
 800d71a:	d14c      	bne.n	800d7b6 <_printf_i+0x1fe>
 800d71c:	f04f 30ff 	mov.w	r0, #4294967295
 800d720:	b004      	add	sp, #16
 800d722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d726:	4835      	ldr	r0, [pc, #212]	; (800d7fc <_printf_i+0x244>)
 800d728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	680e      	ldr	r6, [r1, #0]
 800d730:	061f      	lsls	r7, r3, #24
 800d732:	f856 5b04 	ldr.w	r5, [r6], #4
 800d736:	600e      	str	r6, [r1, #0]
 800d738:	d514      	bpl.n	800d764 <_printf_i+0x1ac>
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	bf44      	itt	mi
 800d73e:	f043 0320 	orrmi.w	r3, r3, #32
 800d742:	6023      	strmi	r3, [r4, #0]
 800d744:	b91d      	cbnz	r5, 800d74e <_printf_i+0x196>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f023 0320 	bic.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	2310      	movs	r3, #16
 800d750:	e7b0      	b.n	800d6b4 <_printf_i+0xfc>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	f043 0320 	orr.w	r3, r3, #32
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	2378      	movs	r3, #120	; 0x78
 800d75c:	4828      	ldr	r0, [pc, #160]	; (800d800 <_printf_i+0x248>)
 800d75e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d762:	e7e3      	b.n	800d72c <_printf_i+0x174>
 800d764:	065e      	lsls	r6, r3, #25
 800d766:	bf48      	it	mi
 800d768:	b2ad      	uxthmi	r5, r5
 800d76a:	e7e6      	b.n	800d73a <_printf_i+0x182>
 800d76c:	4616      	mov	r6, r2
 800d76e:	e7bb      	b.n	800d6e8 <_printf_i+0x130>
 800d770:	680b      	ldr	r3, [r1, #0]
 800d772:	6826      	ldr	r6, [r4, #0]
 800d774:	6960      	ldr	r0, [r4, #20]
 800d776:	1d1d      	adds	r5, r3, #4
 800d778:	600d      	str	r5, [r1, #0]
 800d77a:	0635      	lsls	r5, r6, #24
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	d501      	bpl.n	800d784 <_printf_i+0x1cc>
 800d780:	6018      	str	r0, [r3, #0]
 800d782:	e002      	b.n	800d78a <_printf_i+0x1d2>
 800d784:	0671      	lsls	r1, r6, #25
 800d786:	d5fb      	bpl.n	800d780 <_printf_i+0x1c8>
 800d788:	8018      	strh	r0, [r3, #0]
 800d78a:	2300      	movs	r3, #0
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	4616      	mov	r6, r2
 800d790:	e7ba      	b.n	800d708 <_printf_i+0x150>
 800d792:	680b      	ldr	r3, [r1, #0]
 800d794:	1d1a      	adds	r2, r3, #4
 800d796:	600a      	str	r2, [r1, #0]
 800d798:	681e      	ldr	r6, [r3, #0]
 800d79a:	6862      	ldr	r2, [r4, #4]
 800d79c:	2100      	movs	r1, #0
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7f2 fdbe 	bl	8000320 <memchr>
 800d7a4:	b108      	cbz	r0, 800d7aa <_printf_i+0x1f2>
 800d7a6:	1b80      	subs	r0, r0, r6
 800d7a8:	6060      	str	r0, [r4, #4]
 800d7aa:	6863      	ldr	r3, [r4, #4]
 800d7ac:	6123      	str	r3, [r4, #16]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7b4:	e7a8      	b.n	800d708 <_printf_i+0x150>
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	4649      	mov	r1, r9
 800d7bc:	4640      	mov	r0, r8
 800d7be:	47d0      	blx	sl
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d0ab      	beq.n	800d71c <_printf_i+0x164>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	079b      	lsls	r3, r3, #30
 800d7c8:	d413      	bmi.n	800d7f2 <_printf_i+0x23a>
 800d7ca:	68e0      	ldr	r0, [r4, #12]
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	4298      	cmp	r0, r3
 800d7d0:	bfb8      	it	lt
 800d7d2:	4618      	movlt	r0, r3
 800d7d4:	e7a4      	b.n	800d720 <_printf_i+0x168>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4632      	mov	r2, r6
 800d7da:	4649      	mov	r1, r9
 800d7dc:	4640      	mov	r0, r8
 800d7de:	47d0      	blx	sl
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d09b      	beq.n	800d71c <_printf_i+0x164>
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	68e3      	ldr	r3, [r4, #12]
 800d7e8:	9903      	ldr	r1, [sp, #12]
 800d7ea:	1a5b      	subs	r3, r3, r1
 800d7ec:	42ab      	cmp	r3, r5
 800d7ee:	dcf2      	bgt.n	800d7d6 <_printf_i+0x21e>
 800d7f0:	e7eb      	b.n	800d7ca <_printf_i+0x212>
 800d7f2:	2500      	movs	r5, #0
 800d7f4:	f104 0619 	add.w	r6, r4, #25
 800d7f8:	e7f5      	b.n	800d7e6 <_printf_i+0x22e>
 800d7fa:	bf00      	nop
 800d7fc:	0800f856 	.word	0x0800f856
 800d800:	0800f867 	.word	0x0800f867

0800d804 <quorem>:
 800d804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	6903      	ldr	r3, [r0, #16]
 800d80a:	690c      	ldr	r4, [r1, #16]
 800d80c:	42a3      	cmp	r3, r4
 800d80e:	4607      	mov	r7, r0
 800d810:	f2c0 8081 	blt.w	800d916 <quorem+0x112>
 800d814:	3c01      	subs	r4, #1
 800d816:	f101 0814 	add.w	r8, r1, #20
 800d81a:	f100 0514 	add.w	r5, r0, #20
 800d81e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d82c:	3301      	adds	r3, #1
 800d82e:	429a      	cmp	r2, r3
 800d830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d838:	fbb2 f6f3 	udiv	r6, r2, r3
 800d83c:	d331      	bcc.n	800d8a2 <quorem+0x9e>
 800d83e:	f04f 0e00 	mov.w	lr, #0
 800d842:	4640      	mov	r0, r8
 800d844:	46ac      	mov	ip, r5
 800d846:	46f2      	mov	sl, lr
 800d848:	f850 2b04 	ldr.w	r2, [r0], #4
 800d84c:	b293      	uxth	r3, r2
 800d84e:	fb06 e303 	mla	r3, r6, r3, lr
 800d852:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d856:	b29b      	uxth	r3, r3
 800d858:	ebaa 0303 	sub.w	r3, sl, r3
 800d85c:	0c12      	lsrs	r2, r2, #16
 800d85e:	f8dc a000 	ldr.w	sl, [ip]
 800d862:	fb06 e202 	mla	r2, r6, r2, lr
 800d866:	fa13 f38a 	uxtah	r3, r3, sl
 800d86a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d86e:	fa1f fa82 	uxth.w	sl, r2
 800d872:	f8dc 2000 	ldr.w	r2, [ip]
 800d876:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d87a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d87e:	b29b      	uxth	r3, r3
 800d880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d884:	4581      	cmp	r9, r0
 800d886:	f84c 3b04 	str.w	r3, [ip], #4
 800d88a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d88e:	d2db      	bcs.n	800d848 <quorem+0x44>
 800d890:	f855 300b 	ldr.w	r3, [r5, fp]
 800d894:	b92b      	cbnz	r3, 800d8a2 <quorem+0x9e>
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	3b04      	subs	r3, #4
 800d89a:	429d      	cmp	r5, r3
 800d89c:	461a      	mov	r2, r3
 800d89e:	d32e      	bcc.n	800d8fe <quorem+0xfa>
 800d8a0:	613c      	str	r4, [r7, #16]
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	f001 f848 	bl	800e938 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	db24      	blt.n	800d8f6 <quorem+0xf2>
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f04f 0c00 	mov.w	ip, #0
 800d8b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8b8:	f8d0 e000 	ldr.w	lr, [r0]
 800d8bc:	b293      	uxth	r3, r2
 800d8be:	ebac 0303 	sub.w	r3, ip, r3
 800d8c2:	0c12      	lsrs	r2, r2, #16
 800d8c4:	fa13 f38e 	uxtah	r3, r3, lr
 800d8c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d8cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8d6:	45c1      	cmp	r9, r8
 800d8d8:	f840 3b04 	str.w	r3, [r0], #4
 800d8dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d8e0:	d2e8      	bcs.n	800d8b4 <quorem+0xb0>
 800d8e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8ea:	b922      	cbnz	r2, 800d8f6 <quorem+0xf2>
 800d8ec:	3b04      	subs	r3, #4
 800d8ee:	429d      	cmp	r5, r3
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	d30a      	bcc.n	800d90a <quorem+0x106>
 800d8f4:	613c      	str	r4, [r7, #16]
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	b003      	add	sp, #12
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fe:	6812      	ldr	r2, [r2, #0]
 800d900:	3b04      	subs	r3, #4
 800d902:	2a00      	cmp	r2, #0
 800d904:	d1cc      	bne.n	800d8a0 <quorem+0x9c>
 800d906:	3c01      	subs	r4, #1
 800d908:	e7c7      	b.n	800d89a <quorem+0x96>
 800d90a:	6812      	ldr	r2, [r2, #0]
 800d90c:	3b04      	subs	r3, #4
 800d90e:	2a00      	cmp	r2, #0
 800d910:	d1f0      	bne.n	800d8f4 <quorem+0xf0>
 800d912:	3c01      	subs	r4, #1
 800d914:	e7eb      	b.n	800d8ee <quorem+0xea>
 800d916:	2000      	movs	r0, #0
 800d918:	e7ee      	b.n	800d8f8 <quorem+0xf4>
 800d91a:	0000      	movs	r0, r0
 800d91c:	0000      	movs	r0, r0
	...

0800d920 <_dtoa_r>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	ec59 8b10 	vmov	r8, r9, d0
 800d928:	b095      	sub	sp, #84	; 0x54
 800d92a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d92c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d92e:	9107      	str	r1, [sp, #28]
 800d930:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d934:	4606      	mov	r6, r0
 800d936:	9209      	str	r2, [sp, #36]	; 0x24
 800d938:	9310      	str	r3, [sp, #64]	; 0x40
 800d93a:	b975      	cbnz	r5, 800d95a <_dtoa_r+0x3a>
 800d93c:	2010      	movs	r0, #16
 800d93e:	f000 fd75 	bl	800e42c <malloc>
 800d942:	4602      	mov	r2, r0
 800d944:	6270      	str	r0, [r6, #36]	; 0x24
 800d946:	b920      	cbnz	r0, 800d952 <_dtoa_r+0x32>
 800d948:	4bab      	ldr	r3, [pc, #684]	; (800dbf8 <_dtoa_r+0x2d8>)
 800d94a:	21ea      	movs	r1, #234	; 0xea
 800d94c:	48ab      	ldr	r0, [pc, #684]	; (800dbfc <_dtoa_r+0x2dc>)
 800d94e:	f001 f9bd 	bl	800eccc <__assert_func>
 800d952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d956:	6005      	str	r5, [r0, #0]
 800d958:	60c5      	str	r5, [r0, #12]
 800d95a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d95c:	6819      	ldr	r1, [r3, #0]
 800d95e:	b151      	cbz	r1, 800d976 <_dtoa_r+0x56>
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	604a      	str	r2, [r1, #4]
 800d964:	2301      	movs	r3, #1
 800d966:	4093      	lsls	r3, r2
 800d968:	608b      	str	r3, [r1, #8]
 800d96a:	4630      	mov	r0, r6
 800d96c:	f000 fda6 	bl	800e4bc <_Bfree>
 800d970:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	f1b9 0300 	subs.w	r3, r9, #0
 800d97a:	bfbb      	ittet	lt
 800d97c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d980:	9303      	strlt	r3, [sp, #12]
 800d982:	2300      	movge	r3, #0
 800d984:	2201      	movlt	r2, #1
 800d986:	bfac      	ite	ge
 800d988:	6023      	strge	r3, [r4, #0]
 800d98a:	6022      	strlt	r2, [r4, #0]
 800d98c:	4b9c      	ldr	r3, [pc, #624]	; (800dc00 <_dtoa_r+0x2e0>)
 800d98e:	9c03      	ldr	r4, [sp, #12]
 800d990:	43a3      	bics	r3, r4
 800d992:	d11a      	bne.n	800d9ca <_dtoa_r+0xaa>
 800d994:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d996:	f242 730f 	movw	r3, #9999	; 0x270f
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d9a0:	ea53 0308 	orrs.w	r3, r3, r8
 800d9a4:	f000 8512 	beq.w	800e3cc <_dtoa_r+0xaac>
 800d9a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9aa:	b953      	cbnz	r3, 800d9c2 <_dtoa_r+0xa2>
 800d9ac:	4b95      	ldr	r3, [pc, #596]	; (800dc04 <_dtoa_r+0x2e4>)
 800d9ae:	e01f      	b.n	800d9f0 <_dtoa_r+0xd0>
 800d9b0:	4b95      	ldr	r3, [pc, #596]	; (800dc08 <_dtoa_r+0x2e8>)
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	9800      	ldr	r0, [sp, #0]
 800d9bc:	b015      	add	sp, #84	; 0x54
 800d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c2:	4b90      	ldr	r3, [pc, #576]	; (800dc04 <_dtoa_r+0x2e4>)
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	3303      	adds	r3, #3
 800d9c8:	e7f5      	b.n	800d9b6 <_dtoa_r+0x96>
 800d9ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d9da:	d10b      	bne.n	800d9f4 <_dtoa_r+0xd4>
 800d9dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9de:	2301      	movs	r3, #1
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 84ee 	beq.w	800e3c6 <_dtoa_r+0xaa6>
 800d9ea:	4888      	ldr	r0, [pc, #544]	; (800dc0c <_dtoa_r+0x2ec>)
 800d9ec:	6018      	str	r0, [r3, #0]
 800d9ee:	1e43      	subs	r3, r0, #1
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	e7e2      	b.n	800d9ba <_dtoa_r+0x9a>
 800d9f4:	a913      	add	r1, sp, #76	; 0x4c
 800d9f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d9fa:	aa12      	add	r2, sp, #72	; 0x48
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f001 f83f 	bl	800ea80 <__d2b>
 800da02:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800da06:	4605      	mov	r5, r0
 800da08:	9812      	ldr	r0, [sp, #72]	; 0x48
 800da0a:	2900      	cmp	r1, #0
 800da0c:	d047      	beq.n	800da9e <_dtoa_r+0x17e>
 800da0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800da10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da18:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800da1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800da20:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800da24:	2400      	movs	r4, #0
 800da26:	ec43 2b16 	vmov	d6, r2, r3
 800da2a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800da2e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800dbe0 <_dtoa_r+0x2c0>
 800da32:	ee36 7b47 	vsub.f64	d7, d6, d7
 800da36:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800dbe8 <_dtoa_r+0x2c8>
 800da3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800da3e:	eeb0 7b46 	vmov.f64	d7, d6
 800da42:	ee06 1a90 	vmov	s13, r1
 800da46:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800da4a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dbf0 <_dtoa_r+0x2d0>
 800da4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800da52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800da56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	ee16 ba90 	vmov	fp, s13
 800da62:	9411      	str	r4, [sp, #68]	; 0x44
 800da64:	d508      	bpl.n	800da78 <_dtoa_r+0x158>
 800da66:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800da6a:	eeb4 6b47 	vcmp.f64	d6, d7
 800da6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da72:	bf18      	it	ne
 800da74:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800da78:	f1bb 0f16 	cmp.w	fp, #22
 800da7c:	d832      	bhi.n	800dae4 <_dtoa_r+0x1c4>
 800da7e:	4b64      	ldr	r3, [pc, #400]	; (800dc10 <_dtoa_r+0x2f0>)
 800da80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da84:	ed93 7b00 	vldr	d7, [r3]
 800da88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800da8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da94:	d501      	bpl.n	800da9a <_dtoa_r+0x17a>
 800da96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da9a:	2300      	movs	r3, #0
 800da9c:	e023      	b.n	800dae6 <_dtoa_r+0x1c6>
 800da9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800daa0:	4401      	add	r1, r0
 800daa2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	bfc3      	ittte	gt
 800daaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800daae:	fa04 f303 	lslgt.w	r3, r4, r3
 800dab2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800dab6:	f1c3 0320 	rsble	r3, r3, #32
 800daba:	bfc6      	itte	gt
 800dabc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800dac0:	ea43 0308 	orrgt.w	r3, r3, r8
 800dac4:	fa08 f303 	lslle.w	r3, r8, r3
 800dac8:	ee07 3a90 	vmov	s15, r3
 800dacc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dad0:	3901      	subs	r1, #1
 800dad2:	ed8d 7b00 	vstr	d7, [sp]
 800dad6:	9c01      	ldr	r4, [sp, #4]
 800dad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dadc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800dae0:	2401      	movs	r4, #1
 800dae2:	e7a0      	b.n	800da26 <_dtoa_r+0x106>
 800dae4:	2301      	movs	r3, #1
 800dae6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dae8:	1a43      	subs	r3, r0, r1
 800daea:	1e5a      	subs	r2, r3, #1
 800daec:	bf45      	ittet	mi
 800daee:	f1c3 0301 	rsbmi	r3, r3, #1
 800daf2:	9305      	strmi	r3, [sp, #20]
 800daf4:	2300      	movpl	r3, #0
 800daf6:	2300      	movmi	r3, #0
 800daf8:	9206      	str	r2, [sp, #24]
 800dafa:	bf54      	ite	pl
 800dafc:	9305      	strpl	r3, [sp, #20]
 800dafe:	9306      	strmi	r3, [sp, #24]
 800db00:	f1bb 0f00 	cmp.w	fp, #0
 800db04:	db18      	blt.n	800db38 <_dtoa_r+0x218>
 800db06:	9b06      	ldr	r3, [sp, #24]
 800db08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800db0c:	445b      	add	r3, fp
 800db0e:	9306      	str	r3, [sp, #24]
 800db10:	2300      	movs	r3, #0
 800db12:	9a07      	ldr	r2, [sp, #28]
 800db14:	2a09      	cmp	r2, #9
 800db16:	d849      	bhi.n	800dbac <_dtoa_r+0x28c>
 800db18:	2a05      	cmp	r2, #5
 800db1a:	bfc4      	itt	gt
 800db1c:	3a04      	subgt	r2, #4
 800db1e:	9207      	strgt	r2, [sp, #28]
 800db20:	9a07      	ldr	r2, [sp, #28]
 800db22:	f1a2 0202 	sub.w	r2, r2, #2
 800db26:	bfcc      	ite	gt
 800db28:	2400      	movgt	r4, #0
 800db2a:	2401      	movle	r4, #1
 800db2c:	2a03      	cmp	r2, #3
 800db2e:	d848      	bhi.n	800dbc2 <_dtoa_r+0x2a2>
 800db30:	e8df f002 	tbb	[pc, r2]
 800db34:	3a2c2e0b 	.word	0x3a2c2e0b
 800db38:	9b05      	ldr	r3, [sp, #20]
 800db3a:	2200      	movs	r2, #0
 800db3c:	eba3 030b 	sub.w	r3, r3, fp
 800db40:	9305      	str	r3, [sp, #20]
 800db42:	920e      	str	r2, [sp, #56]	; 0x38
 800db44:	f1cb 0300 	rsb	r3, fp, #0
 800db48:	e7e3      	b.n	800db12 <_dtoa_r+0x1f2>
 800db4a:	2200      	movs	r2, #0
 800db4c:	9208      	str	r2, [sp, #32]
 800db4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db50:	2a00      	cmp	r2, #0
 800db52:	dc39      	bgt.n	800dbc8 <_dtoa_r+0x2a8>
 800db54:	f04f 0a01 	mov.w	sl, #1
 800db58:	46d1      	mov	r9, sl
 800db5a:	4652      	mov	r2, sl
 800db5c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800db60:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800db62:	2100      	movs	r1, #0
 800db64:	6079      	str	r1, [r7, #4]
 800db66:	2004      	movs	r0, #4
 800db68:	f100 0c14 	add.w	ip, r0, #20
 800db6c:	4594      	cmp	ip, r2
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	d92f      	bls.n	800dbd2 <_dtoa_r+0x2b2>
 800db72:	4630      	mov	r0, r6
 800db74:	930c      	str	r3, [sp, #48]	; 0x30
 800db76:	f000 fc61 	bl	800e43c <_Balloc>
 800db7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db7c:	9000      	str	r0, [sp, #0]
 800db7e:	4602      	mov	r2, r0
 800db80:	2800      	cmp	r0, #0
 800db82:	d149      	bne.n	800dc18 <_dtoa_r+0x2f8>
 800db84:	4b23      	ldr	r3, [pc, #140]	; (800dc14 <_dtoa_r+0x2f4>)
 800db86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800db8a:	e6df      	b.n	800d94c <_dtoa_r+0x2c>
 800db8c:	2201      	movs	r2, #1
 800db8e:	e7dd      	b.n	800db4c <_dtoa_r+0x22c>
 800db90:	2200      	movs	r2, #0
 800db92:	9208      	str	r2, [sp, #32]
 800db94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db96:	eb0b 0a02 	add.w	sl, fp, r2
 800db9a:	f10a 0901 	add.w	r9, sl, #1
 800db9e:	464a      	mov	r2, r9
 800dba0:	2a01      	cmp	r2, #1
 800dba2:	bfb8      	it	lt
 800dba4:	2201      	movlt	r2, #1
 800dba6:	e7db      	b.n	800db60 <_dtoa_r+0x240>
 800dba8:	2201      	movs	r2, #1
 800dbaa:	e7f2      	b.n	800db92 <_dtoa_r+0x272>
 800dbac:	2401      	movs	r4, #1
 800dbae:	2200      	movs	r2, #0
 800dbb0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800dbb4:	f04f 3aff 	mov.w	sl, #4294967295
 800dbb8:	2100      	movs	r1, #0
 800dbba:	46d1      	mov	r9, sl
 800dbbc:	2212      	movs	r2, #18
 800dbbe:	9109      	str	r1, [sp, #36]	; 0x24
 800dbc0:	e7ce      	b.n	800db60 <_dtoa_r+0x240>
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	9208      	str	r2, [sp, #32]
 800dbc6:	e7f5      	b.n	800dbb4 <_dtoa_r+0x294>
 800dbc8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800dbcc:	46d1      	mov	r9, sl
 800dbce:	4652      	mov	r2, sl
 800dbd0:	e7c6      	b.n	800db60 <_dtoa_r+0x240>
 800dbd2:	3101      	adds	r1, #1
 800dbd4:	6079      	str	r1, [r7, #4]
 800dbd6:	0040      	lsls	r0, r0, #1
 800dbd8:	e7c6      	b.n	800db68 <_dtoa_r+0x248>
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w
 800dbe0:	636f4361 	.word	0x636f4361
 800dbe4:	3fd287a7 	.word	0x3fd287a7
 800dbe8:	8b60c8b3 	.word	0x8b60c8b3
 800dbec:	3fc68a28 	.word	0x3fc68a28
 800dbf0:	509f79fb 	.word	0x509f79fb
 800dbf4:	3fd34413 	.word	0x3fd34413
 800dbf8:	0800f885 	.word	0x0800f885
 800dbfc:	0800f89c 	.word	0x0800f89c
 800dc00:	7ff00000 	.word	0x7ff00000
 800dc04:	0800f881 	.word	0x0800f881
 800dc08:	0800f878 	.word	0x0800f878
 800dc0c:	0800f855 	.word	0x0800f855
 800dc10:	0800f998 	.word	0x0800f998
 800dc14:	0800f8fb 	.word	0x0800f8fb
 800dc18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800dc1a:	9900      	ldr	r1, [sp, #0]
 800dc1c:	6011      	str	r1, [r2, #0]
 800dc1e:	f1b9 0f0e 	cmp.w	r9, #14
 800dc22:	d872      	bhi.n	800dd0a <_dtoa_r+0x3ea>
 800dc24:	2c00      	cmp	r4, #0
 800dc26:	d070      	beq.n	800dd0a <_dtoa_r+0x3ea>
 800dc28:	f1bb 0f00 	cmp.w	fp, #0
 800dc2c:	f340 80a6 	ble.w	800dd7c <_dtoa_r+0x45c>
 800dc30:	49ca      	ldr	r1, [pc, #808]	; (800df5c <_dtoa_r+0x63c>)
 800dc32:	f00b 020f 	and.w	r2, fp, #15
 800dc36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800dc3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc3e:	ed92 7b00 	vldr	d7, [r2]
 800dc42:	ea4f 112b 	mov.w	r1, fp, asr #4
 800dc46:	f000 808d 	beq.w	800dd64 <_dtoa_r+0x444>
 800dc4a:	4ac5      	ldr	r2, [pc, #788]	; (800df60 <_dtoa_r+0x640>)
 800dc4c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800dc50:	ed92 6b08 	vldr	d6, [r2, #32]
 800dc54:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800dc58:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dc5c:	f001 010f 	and.w	r1, r1, #15
 800dc60:	2203      	movs	r2, #3
 800dc62:	48bf      	ldr	r0, [pc, #764]	; (800df60 <_dtoa_r+0x640>)
 800dc64:	2900      	cmp	r1, #0
 800dc66:	d17f      	bne.n	800dd68 <_dtoa_r+0x448>
 800dc68:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dc6c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dc70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc76:	2900      	cmp	r1, #0
 800dc78:	f000 80b2 	beq.w	800dde0 <_dtoa_r+0x4c0>
 800dc7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dc80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8c:	f140 80a8 	bpl.w	800dde0 <_dtoa_r+0x4c0>
 800dc90:	f1b9 0f00 	cmp.w	r9, #0
 800dc94:	f000 80a4 	beq.w	800dde0 <_dtoa_r+0x4c0>
 800dc98:	f1ba 0f00 	cmp.w	sl, #0
 800dc9c:	dd31      	ble.n	800dd02 <_dtoa_r+0x3e2>
 800dc9e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800dca2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dca6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dcaa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dcae:	3201      	adds	r2, #1
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dcb6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dcba:	ee07 2a90 	vmov	s15, r2
 800dcbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcc2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dcc6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dcca:	9c03      	ldr	r4, [sp, #12]
 800dccc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dcd0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f040 8086 	bne.w	800dde6 <_dtoa_r+0x4c6>
 800dcda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dcde:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dce2:	ec42 1b17 	vmov	d7, r1, r2
 800dce6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcee:	f300 8272 	bgt.w	800e1d6 <_dtoa_r+0x8b6>
 800dcf2:	eeb1 7b47 	vneg.f64	d7, d7
 800dcf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfe:	f100 8267 	bmi.w	800e1d0 <_dtoa_r+0x8b0>
 800dd02:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800dd06:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800dd0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dd0c:	2a00      	cmp	r2, #0
 800dd0e:	f2c0 8129 	blt.w	800df64 <_dtoa_r+0x644>
 800dd12:	f1bb 0f0e 	cmp.w	fp, #14
 800dd16:	f300 8125 	bgt.w	800df64 <_dtoa_r+0x644>
 800dd1a:	4b90      	ldr	r3, [pc, #576]	; (800df5c <_dtoa_r+0x63c>)
 800dd1c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd20:	ed93 6b00 	vldr	d6, [r3]
 800dd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f280 80c3 	bge.w	800deb2 <_dtoa_r+0x592>
 800dd2c:	f1b9 0f00 	cmp.w	r9, #0
 800dd30:	f300 80bf 	bgt.w	800deb2 <_dtoa_r+0x592>
 800dd34:	f040 824c 	bne.w	800e1d0 <_dtoa_r+0x8b0>
 800dd38:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dd3c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dd40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4c:	464c      	mov	r4, r9
 800dd4e:	464f      	mov	r7, r9
 800dd50:	f280 8222 	bge.w	800e198 <_dtoa_r+0x878>
 800dd54:	f8dd 8000 	ldr.w	r8, [sp]
 800dd58:	2331      	movs	r3, #49	; 0x31
 800dd5a:	f808 3b01 	strb.w	r3, [r8], #1
 800dd5e:	f10b 0b01 	add.w	fp, fp, #1
 800dd62:	e21e      	b.n	800e1a2 <_dtoa_r+0x882>
 800dd64:	2202      	movs	r2, #2
 800dd66:	e77c      	b.n	800dc62 <_dtoa_r+0x342>
 800dd68:	07cc      	lsls	r4, r1, #31
 800dd6a:	d504      	bpl.n	800dd76 <_dtoa_r+0x456>
 800dd6c:	ed90 6b00 	vldr	d6, [r0]
 800dd70:	3201      	adds	r2, #1
 800dd72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd76:	1049      	asrs	r1, r1, #1
 800dd78:	3008      	adds	r0, #8
 800dd7a:	e773      	b.n	800dc64 <_dtoa_r+0x344>
 800dd7c:	d02e      	beq.n	800dddc <_dtoa_r+0x4bc>
 800dd7e:	f1cb 0100 	rsb	r1, fp, #0
 800dd82:	4a76      	ldr	r2, [pc, #472]	; (800df5c <_dtoa_r+0x63c>)
 800dd84:	f001 000f 	and.w	r0, r1, #15
 800dd88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dd8c:	ed92 7b00 	vldr	d7, [r2]
 800dd90:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800dd94:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dd98:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dd9c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800dda0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800dda4:	486e      	ldr	r0, [pc, #440]	; (800df60 <_dtoa_r+0x640>)
 800dda6:	1109      	asrs	r1, r1, #4
 800dda8:	2400      	movs	r4, #0
 800ddaa:	2202      	movs	r2, #2
 800ddac:	b939      	cbnz	r1, 800ddbe <_dtoa_r+0x49e>
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	f43f af60 	beq.w	800dc74 <_dtoa_r+0x354>
 800ddb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ddb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddbc:	e75a      	b.n	800dc74 <_dtoa_r+0x354>
 800ddbe:	07cf      	lsls	r7, r1, #31
 800ddc0:	d509      	bpl.n	800ddd6 <_dtoa_r+0x4b6>
 800ddc2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ddc6:	ed90 7b00 	vldr	d7, [r0]
 800ddca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ddce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ddd2:	3201      	adds	r2, #1
 800ddd4:	2401      	movs	r4, #1
 800ddd6:	1049      	asrs	r1, r1, #1
 800ddd8:	3008      	adds	r0, #8
 800ddda:	e7e7      	b.n	800ddac <_dtoa_r+0x48c>
 800dddc:	2202      	movs	r2, #2
 800ddde:	e749      	b.n	800dc74 <_dtoa_r+0x354>
 800dde0:	465f      	mov	r7, fp
 800dde2:	4648      	mov	r0, r9
 800dde4:	e765      	b.n	800dcb2 <_dtoa_r+0x392>
 800dde6:	ec42 1b17 	vmov	d7, r1, r2
 800ddea:	4a5c      	ldr	r2, [pc, #368]	; (800df5c <_dtoa_r+0x63c>)
 800ddec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ddf0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ddf4:	9a00      	ldr	r2, [sp, #0]
 800ddf6:	1814      	adds	r4, r2, r0
 800ddf8:	9a08      	ldr	r2, [sp, #32]
 800ddfa:	b352      	cbz	r2, 800de52 <_dtoa_r+0x532>
 800ddfc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800de00:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800de04:	f8dd 8000 	ldr.w	r8, [sp]
 800de08:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800de0c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800de10:	ee35 7b47 	vsub.f64	d7, d5, d7
 800de14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800de18:	ee14 2a90 	vmov	r2, s9
 800de1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800de20:	3230      	adds	r2, #48	; 0x30
 800de22:	ee36 6b45 	vsub.f64	d6, d6, d5
 800de26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800de2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2e:	f808 2b01 	strb.w	r2, [r8], #1
 800de32:	d439      	bmi.n	800dea8 <_dtoa_r+0x588>
 800de34:	ee32 5b46 	vsub.f64	d5, d2, d6
 800de38:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	d472      	bmi.n	800df28 <_dtoa_r+0x608>
 800de42:	45a0      	cmp	r8, r4
 800de44:	f43f af5d 	beq.w	800dd02 <_dtoa_r+0x3e2>
 800de48:	ee27 7b03 	vmul.f64	d7, d7, d3
 800de4c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800de50:	e7e0      	b.n	800de14 <_dtoa_r+0x4f4>
 800de52:	f8dd 8000 	ldr.w	r8, [sp]
 800de56:	ee27 7b04 	vmul.f64	d7, d7, d4
 800de5a:	4621      	mov	r1, r4
 800de5c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800de60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800de64:	ee14 2a90 	vmov	r2, s9
 800de68:	3230      	adds	r2, #48	; 0x30
 800de6a:	f808 2b01 	strb.w	r2, [r8], #1
 800de6e:	45a0      	cmp	r8, r4
 800de70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800de74:	ee36 6b45 	vsub.f64	d6, d6, d5
 800de78:	d118      	bne.n	800deac <_dtoa_r+0x58c>
 800de7a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800de7e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800de82:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800de86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8a:	dc4d      	bgt.n	800df28 <_dtoa_r+0x608>
 800de8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800de90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de98:	f57f af33 	bpl.w	800dd02 <_dtoa_r+0x3e2>
 800de9c:	4688      	mov	r8, r1
 800de9e:	3901      	subs	r1, #1
 800dea0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dea4:	2b30      	cmp	r3, #48	; 0x30
 800dea6:	d0f9      	beq.n	800de9c <_dtoa_r+0x57c>
 800dea8:	46bb      	mov	fp, r7
 800deaa:	e02a      	b.n	800df02 <_dtoa_r+0x5e2>
 800deac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800deb0:	e7d6      	b.n	800de60 <_dtoa_r+0x540>
 800deb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800deba:	f8dd 8000 	ldr.w	r8, [sp]
 800debe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dec2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dec6:	ee15 3a10 	vmov	r3, s10
 800deca:	3330      	adds	r3, #48	; 0x30
 800decc:	f808 3b01 	strb.w	r3, [r8], #1
 800ded0:	9b00      	ldr	r3, [sp, #0]
 800ded2:	eba8 0303 	sub.w	r3, r8, r3
 800ded6:	4599      	cmp	r9, r3
 800ded8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dedc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dee0:	d133      	bne.n	800df4a <_dtoa_r+0x62a>
 800dee2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dee6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800deea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deee:	dc1a      	bgt.n	800df26 <_dtoa_r+0x606>
 800def0:	eeb4 7b46 	vcmp.f64	d7, d6
 800def4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def8:	d103      	bne.n	800df02 <_dtoa_r+0x5e2>
 800defa:	ee15 3a10 	vmov	r3, s10
 800defe:	07d9      	lsls	r1, r3, #31
 800df00:	d411      	bmi.n	800df26 <_dtoa_r+0x606>
 800df02:	4629      	mov	r1, r5
 800df04:	4630      	mov	r0, r6
 800df06:	f000 fad9 	bl	800e4bc <_Bfree>
 800df0a:	2300      	movs	r3, #0
 800df0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df0e:	f888 3000 	strb.w	r3, [r8]
 800df12:	f10b 0301 	add.w	r3, fp, #1
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f43f ad4d 	beq.w	800d9ba <_dtoa_r+0x9a>
 800df20:	f8c3 8000 	str.w	r8, [r3]
 800df24:	e549      	b.n	800d9ba <_dtoa_r+0x9a>
 800df26:	465f      	mov	r7, fp
 800df28:	4643      	mov	r3, r8
 800df2a:	4698      	mov	r8, r3
 800df2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df30:	2a39      	cmp	r2, #57	; 0x39
 800df32:	d106      	bne.n	800df42 <_dtoa_r+0x622>
 800df34:	9a00      	ldr	r2, [sp, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d1f7      	bne.n	800df2a <_dtoa_r+0x60a>
 800df3a:	9900      	ldr	r1, [sp, #0]
 800df3c:	2230      	movs	r2, #48	; 0x30
 800df3e:	3701      	adds	r7, #1
 800df40:	700a      	strb	r2, [r1, #0]
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	3201      	adds	r2, #1
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	e7ae      	b.n	800dea8 <_dtoa_r+0x588>
 800df4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800df4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df56:	d1b2      	bne.n	800debe <_dtoa_r+0x59e>
 800df58:	e7d3      	b.n	800df02 <_dtoa_r+0x5e2>
 800df5a:	bf00      	nop
 800df5c:	0800f998 	.word	0x0800f998
 800df60:	0800f970 	.word	0x0800f970
 800df64:	9908      	ldr	r1, [sp, #32]
 800df66:	2900      	cmp	r1, #0
 800df68:	f000 80d1 	beq.w	800e10e <_dtoa_r+0x7ee>
 800df6c:	9907      	ldr	r1, [sp, #28]
 800df6e:	2901      	cmp	r1, #1
 800df70:	f300 80b4 	bgt.w	800e0dc <_dtoa_r+0x7bc>
 800df74:	9911      	ldr	r1, [sp, #68]	; 0x44
 800df76:	2900      	cmp	r1, #0
 800df78:	f000 80ac 	beq.w	800e0d4 <_dtoa_r+0x7b4>
 800df7c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800df80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800df84:	461c      	mov	r4, r3
 800df86:	930a      	str	r3, [sp, #40]	; 0x28
 800df88:	9b05      	ldr	r3, [sp, #20]
 800df8a:	4413      	add	r3, r2
 800df8c:	9305      	str	r3, [sp, #20]
 800df8e:	9b06      	ldr	r3, [sp, #24]
 800df90:	2101      	movs	r1, #1
 800df92:	4413      	add	r3, r2
 800df94:	4630      	mov	r0, r6
 800df96:	9306      	str	r3, [sp, #24]
 800df98:	f000 fb4c 	bl	800e634 <__i2b>
 800df9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df9e:	4607      	mov	r7, r0
 800dfa0:	f1b8 0f00 	cmp.w	r8, #0
 800dfa4:	dd0d      	ble.n	800dfc2 <_dtoa_r+0x6a2>
 800dfa6:	9a06      	ldr	r2, [sp, #24]
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	dd0a      	ble.n	800dfc2 <_dtoa_r+0x6a2>
 800dfac:	4542      	cmp	r2, r8
 800dfae:	9905      	ldr	r1, [sp, #20]
 800dfb0:	bfa8      	it	ge
 800dfb2:	4642      	movge	r2, r8
 800dfb4:	1a89      	subs	r1, r1, r2
 800dfb6:	9105      	str	r1, [sp, #20]
 800dfb8:	9906      	ldr	r1, [sp, #24]
 800dfba:	eba8 0802 	sub.w	r8, r8, r2
 800dfbe:	1a8a      	subs	r2, r1, r2
 800dfc0:	9206      	str	r2, [sp, #24]
 800dfc2:	b303      	cbz	r3, 800e006 <_dtoa_r+0x6e6>
 800dfc4:	9a08      	ldr	r2, [sp, #32]
 800dfc6:	2a00      	cmp	r2, #0
 800dfc8:	f000 80a6 	beq.w	800e118 <_dtoa_r+0x7f8>
 800dfcc:	2c00      	cmp	r4, #0
 800dfce:	dd13      	ble.n	800dff8 <_dtoa_r+0x6d8>
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	4622      	mov	r2, r4
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	930c      	str	r3, [sp, #48]	; 0x30
 800dfd8:	f000 fbe8 	bl	800e7ac <__pow5mult>
 800dfdc:	462a      	mov	r2, r5
 800dfde:	4601      	mov	r1, r0
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f000 fb3c 	bl	800e660 <__multiply>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	900a      	str	r0, [sp, #40]	; 0x28
 800dfec:	4630      	mov	r0, r6
 800dfee:	f000 fa65 	bl	800e4bc <_Bfree>
 800dff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dff6:	4615      	mov	r5, r2
 800dff8:	1b1a      	subs	r2, r3, r4
 800dffa:	d004      	beq.n	800e006 <_dtoa_r+0x6e6>
 800dffc:	4629      	mov	r1, r5
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 fbd4 	bl	800e7ac <__pow5mult>
 800e004:	4605      	mov	r5, r0
 800e006:	2101      	movs	r1, #1
 800e008:	4630      	mov	r0, r6
 800e00a:	f000 fb13 	bl	800e634 <__i2b>
 800e00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e010:	2b00      	cmp	r3, #0
 800e012:	4604      	mov	r4, r0
 800e014:	f340 8082 	ble.w	800e11c <_dtoa_r+0x7fc>
 800e018:	461a      	mov	r2, r3
 800e01a:	4601      	mov	r1, r0
 800e01c:	4630      	mov	r0, r6
 800e01e:	f000 fbc5 	bl	800e7ac <__pow5mult>
 800e022:	9b07      	ldr	r3, [sp, #28]
 800e024:	2b01      	cmp	r3, #1
 800e026:	4604      	mov	r4, r0
 800e028:	dd7b      	ble.n	800e122 <_dtoa_r+0x802>
 800e02a:	2300      	movs	r3, #0
 800e02c:	930a      	str	r3, [sp, #40]	; 0x28
 800e02e:	6922      	ldr	r2, [r4, #16]
 800e030:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e034:	6910      	ldr	r0, [r2, #16]
 800e036:	f000 faad 	bl	800e594 <__hi0bits>
 800e03a:	f1c0 0020 	rsb	r0, r0, #32
 800e03e:	9b06      	ldr	r3, [sp, #24]
 800e040:	4418      	add	r0, r3
 800e042:	f010 001f 	ands.w	r0, r0, #31
 800e046:	f000 808d 	beq.w	800e164 <_dtoa_r+0x844>
 800e04a:	f1c0 0220 	rsb	r2, r0, #32
 800e04e:	2a04      	cmp	r2, #4
 800e050:	f340 8086 	ble.w	800e160 <_dtoa_r+0x840>
 800e054:	f1c0 001c 	rsb	r0, r0, #28
 800e058:	9b05      	ldr	r3, [sp, #20]
 800e05a:	4403      	add	r3, r0
 800e05c:	9305      	str	r3, [sp, #20]
 800e05e:	9b06      	ldr	r3, [sp, #24]
 800e060:	4403      	add	r3, r0
 800e062:	4480      	add	r8, r0
 800e064:	9306      	str	r3, [sp, #24]
 800e066:	9b05      	ldr	r3, [sp, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	dd05      	ble.n	800e078 <_dtoa_r+0x758>
 800e06c:	4629      	mov	r1, r5
 800e06e:	461a      	mov	r2, r3
 800e070:	4630      	mov	r0, r6
 800e072:	f000 fbf5 	bl	800e860 <__lshift>
 800e076:	4605      	mov	r5, r0
 800e078:	9b06      	ldr	r3, [sp, #24]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dd05      	ble.n	800e08a <_dtoa_r+0x76a>
 800e07e:	4621      	mov	r1, r4
 800e080:	461a      	mov	r2, r3
 800e082:	4630      	mov	r0, r6
 800e084:	f000 fbec 	bl	800e860 <__lshift>
 800e088:	4604      	mov	r4, r0
 800e08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d06b      	beq.n	800e168 <_dtoa_r+0x848>
 800e090:	4621      	mov	r1, r4
 800e092:	4628      	mov	r0, r5
 800e094:	f000 fc50 	bl	800e938 <__mcmp>
 800e098:	2800      	cmp	r0, #0
 800e09a:	da65      	bge.n	800e168 <_dtoa_r+0x848>
 800e09c:	2300      	movs	r3, #0
 800e09e:	4629      	mov	r1, r5
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f000 fa2c 	bl	800e500 <__multadd>
 800e0a8:	9b08      	ldr	r3, [sp, #32]
 800e0aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 8192 	beq.w	800e3da <_dtoa_r+0xaba>
 800e0b6:	4639      	mov	r1, r7
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	220a      	movs	r2, #10
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f000 fa1f 	bl	800e500 <__multadd>
 800e0c2:	f1ba 0f00 	cmp.w	sl, #0
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	f300 808e 	bgt.w	800e1e8 <_dtoa_r+0x8c8>
 800e0cc:	9b07      	ldr	r3, [sp, #28]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	dc51      	bgt.n	800e176 <_dtoa_r+0x856>
 800e0d2:	e089      	b.n	800e1e8 <_dtoa_r+0x8c8>
 800e0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e0da:	e751      	b.n	800df80 <_dtoa_r+0x660>
 800e0dc:	f109 34ff 	add.w	r4, r9, #4294967295
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	bfbf      	itttt	lt
 800e0e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e0e6:	1ae3      	sublt	r3, r4, r3
 800e0e8:	18d2      	addlt	r2, r2, r3
 800e0ea:	4613      	movlt	r3, r2
 800e0ec:	bfb7      	itett	lt
 800e0ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e0f0:	1b1c      	subge	r4, r3, r4
 800e0f2:	4623      	movlt	r3, r4
 800e0f4:	2400      	movlt	r4, #0
 800e0f6:	f1b9 0f00 	cmp.w	r9, #0
 800e0fa:	bfb5      	itete	lt
 800e0fc:	9a05      	ldrlt	r2, [sp, #20]
 800e0fe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e102:	eba2 0809 	sublt.w	r8, r2, r9
 800e106:	464a      	movge	r2, r9
 800e108:	bfb8      	it	lt
 800e10a:	2200      	movlt	r2, #0
 800e10c:	e73b      	b.n	800df86 <_dtoa_r+0x666>
 800e10e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e112:	9f08      	ldr	r7, [sp, #32]
 800e114:	461c      	mov	r4, r3
 800e116:	e743      	b.n	800dfa0 <_dtoa_r+0x680>
 800e118:	461a      	mov	r2, r3
 800e11a:	e76f      	b.n	800dffc <_dtoa_r+0x6dc>
 800e11c:	9b07      	ldr	r3, [sp, #28]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	dc18      	bgt.n	800e154 <_dtoa_r+0x834>
 800e122:	9b02      	ldr	r3, [sp, #8]
 800e124:	b9b3      	cbnz	r3, 800e154 <_dtoa_r+0x834>
 800e126:	9b03      	ldr	r3, [sp, #12]
 800e128:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e12c:	b9a2      	cbnz	r2, 800e158 <_dtoa_r+0x838>
 800e12e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e132:	0d12      	lsrs	r2, r2, #20
 800e134:	0512      	lsls	r2, r2, #20
 800e136:	b18a      	cbz	r2, 800e15c <_dtoa_r+0x83c>
 800e138:	9b05      	ldr	r3, [sp, #20]
 800e13a:	3301      	adds	r3, #1
 800e13c:	9305      	str	r3, [sp, #20]
 800e13e:	9b06      	ldr	r3, [sp, #24]
 800e140:	3301      	adds	r3, #1
 800e142:	9306      	str	r3, [sp, #24]
 800e144:	2301      	movs	r3, #1
 800e146:	930a      	str	r3, [sp, #40]	; 0x28
 800e148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f47f af6f 	bne.w	800e02e <_dtoa_r+0x70e>
 800e150:	2001      	movs	r0, #1
 800e152:	e774      	b.n	800e03e <_dtoa_r+0x71e>
 800e154:	2300      	movs	r3, #0
 800e156:	e7f6      	b.n	800e146 <_dtoa_r+0x826>
 800e158:	9b02      	ldr	r3, [sp, #8]
 800e15a:	e7f4      	b.n	800e146 <_dtoa_r+0x826>
 800e15c:	920a      	str	r2, [sp, #40]	; 0x28
 800e15e:	e7f3      	b.n	800e148 <_dtoa_r+0x828>
 800e160:	d081      	beq.n	800e066 <_dtoa_r+0x746>
 800e162:	4610      	mov	r0, r2
 800e164:	301c      	adds	r0, #28
 800e166:	e777      	b.n	800e058 <_dtoa_r+0x738>
 800e168:	f1b9 0f00 	cmp.w	r9, #0
 800e16c:	dc37      	bgt.n	800e1de <_dtoa_r+0x8be>
 800e16e:	9b07      	ldr	r3, [sp, #28]
 800e170:	2b02      	cmp	r3, #2
 800e172:	dd34      	ble.n	800e1de <_dtoa_r+0x8be>
 800e174:	46ca      	mov	sl, r9
 800e176:	f1ba 0f00 	cmp.w	sl, #0
 800e17a:	d10d      	bne.n	800e198 <_dtoa_r+0x878>
 800e17c:	4621      	mov	r1, r4
 800e17e:	4653      	mov	r3, sl
 800e180:	2205      	movs	r2, #5
 800e182:	4630      	mov	r0, r6
 800e184:	f000 f9bc 	bl	800e500 <__multadd>
 800e188:	4601      	mov	r1, r0
 800e18a:	4604      	mov	r4, r0
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 fbd3 	bl	800e938 <__mcmp>
 800e192:	2800      	cmp	r0, #0
 800e194:	f73f adde 	bgt.w	800dd54 <_dtoa_r+0x434>
 800e198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e19a:	f8dd 8000 	ldr.w	r8, [sp]
 800e19e:	ea6f 0b03 	mvn.w	fp, r3
 800e1a2:	f04f 0900 	mov.w	r9, #0
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f000 f987 	bl	800e4bc <_Bfree>
 800e1ae:	2f00      	cmp	r7, #0
 800e1b0:	f43f aea7 	beq.w	800df02 <_dtoa_r+0x5e2>
 800e1b4:	f1b9 0f00 	cmp.w	r9, #0
 800e1b8:	d005      	beq.n	800e1c6 <_dtoa_r+0x8a6>
 800e1ba:	45b9      	cmp	r9, r7
 800e1bc:	d003      	beq.n	800e1c6 <_dtoa_r+0x8a6>
 800e1be:	4649      	mov	r1, r9
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f000 f97b 	bl	800e4bc <_Bfree>
 800e1c6:	4639      	mov	r1, r7
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f000 f977 	bl	800e4bc <_Bfree>
 800e1ce:	e698      	b.n	800df02 <_dtoa_r+0x5e2>
 800e1d0:	2400      	movs	r4, #0
 800e1d2:	4627      	mov	r7, r4
 800e1d4:	e7e0      	b.n	800e198 <_dtoa_r+0x878>
 800e1d6:	46bb      	mov	fp, r7
 800e1d8:	4604      	mov	r4, r0
 800e1da:	4607      	mov	r7, r0
 800e1dc:	e5ba      	b.n	800dd54 <_dtoa_r+0x434>
 800e1de:	9b08      	ldr	r3, [sp, #32]
 800e1e0:	46ca      	mov	sl, r9
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 8100 	beq.w	800e3e8 <_dtoa_r+0xac8>
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	dd05      	ble.n	800e1fa <_dtoa_r+0x8da>
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	4642      	mov	r2, r8
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f000 fb34 	bl	800e860 <__lshift>
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d05d      	beq.n	800e2bc <_dtoa_r+0x99c>
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	4630      	mov	r0, r6
 800e204:	f000 f91a 	bl	800e43c <_Balloc>
 800e208:	4680      	mov	r8, r0
 800e20a:	b928      	cbnz	r0, 800e218 <_dtoa_r+0x8f8>
 800e20c:	4b82      	ldr	r3, [pc, #520]	; (800e418 <_dtoa_r+0xaf8>)
 800e20e:	4602      	mov	r2, r0
 800e210:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e214:	f7ff bb9a 	b.w	800d94c <_dtoa_r+0x2c>
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	3202      	adds	r2, #2
 800e21c:	0092      	lsls	r2, r2, #2
 800e21e:	f107 010c 	add.w	r1, r7, #12
 800e222:	300c      	adds	r0, #12
 800e224:	f7fe fe94 	bl	800cf50 <memcpy>
 800e228:	2201      	movs	r2, #1
 800e22a:	4641      	mov	r1, r8
 800e22c:	4630      	mov	r0, r6
 800e22e:	f000 fb17 	bl	800e860 <__lshift>
 800e232:	9b00      	ldr	r3, [sp, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	9305      	str	r3, [sp, #20]
 800e238:	9b00      	ldr	r3, [sp, #0]
 800e23a:	4453      	add	r3, sl
 800e23c:	9309      	str	r3, [sp, #36]	; 0x24
 800e23e:	9b02      	ldr	r3, [sp, #8]
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	46b9      	mov	r9, r7
 800e246:	9308      	str	r3, [sp, #32]
 800e248:	4607      	mov	r7, r0
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	4621      	mov	r1, r4
 800e24e:	3b01      	subs	r3, #1
 800e250:	4628      	mov	r0, r5
 800e252:	9302      	str	r3, [sp, #8]
 800e254:	f7ff fad6 	bl	800d804 <quorem>
 800e258:	4603      	mov	r3, r0
 800e25a:	3330      	adds	r3, #48	; 0x30
 800e25c:	9006      	str	r0, [sp, #24]
 800e25e:	4649      	mov	r1, r9
 800e260:	4628      	mov	r0, r5
 800e262:	930a      	str	r3, [sp, #40]	; 0x28
 800e264:	f000 fb68 	bl	800e938 <__mcmp>
 800e268:	463a      	mov	r2, r7
 800e26a:	4682      	mov	sl, r0
 800e26c:	4621      	mov	r1, r4
 800e26e:	4630      	mov	r0, r6
 800e270:	f000 fb7e 	bl	800e970 <__mdiff>
 800e274:	68c2      	ldr	r2, [r0, #12]
 800e276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e278:	4680      	mov	r8, r0
 800e27a:	bb0a      	cbnz	r2, 800e2c0 <_dtoa_r+0x9a0>
 800e27c:	4601      	mov	r1, r0
 800e27e:	4628      	mov	r0, r5
 800e280:	f000 fb5a 	bl	800e938 <__mcmp>
 800e284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e286:	4602      	mov	r2, r0
 800e288:	4641      	mov	r1, r8
 800e28a:	4630      	mov	r0, r6
 800e28c:	920e      	str	r2, [sp, #56]	; 0x38
 800e28e:	930a      	str	r3, [sp, #40]	; 0x28
 800e290:	f000 f914 	bl	800e4bc <_Bfree>
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e298:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e29c:	ea43 0102 	orr.w	r1, r3, r2
 800e2a0:	9b08      	ldr	r3, [sp, #32]
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a6:	d10d      	bne.n	800e2c4 <_dtoa_r+0x9a4>
 800e2a8:	2b39      	cmp	r3, #57	; 0x39
 800e2aa:	d029      	beq.n	800e300 <_dtoa_r+0x9e0>
 800e2ac:	f1ba 0f00 	cmp.w	sl, #0
 800e2b0:	dd01      	ble.n	800e2b6 <_dtoa_r+0x996>
 800e2b2:	9b06      	ldr	r3, [sp, #24]
 800e2b4:	3331      	adds	r3, #49	; 0x31
 800e2b6:	9a02      	ldr	r2, [sp, #8]
 800e2b8:	7013      	strb	r3, [r2, #0]
 800e2ba:	e774      	b.n	800e1a6 <_dtoa_r+0x886>
 800e2bc:	4638      	mov	r0, r7
 800e2be:	e7b8      	b.n	800e232 <_dtoa_r+0x912>
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	e7e1      	b.n	800e288 <_dtoa_r+0x968>
 800e2c4:	f1ba 0f00 	cmp.w	sl, #0
 800e2c8:	db06      	blt.n	800e2d8 <_dtoa_r+0x9b8>
 800e2ca:	9907      	ldr	r1, [sp, #28]
 800e2cc:	ea41 0a0a 	orr.w	sl, r1, sl
 800e2d0:	9908      	ldr	r1, [sp, #32]
 800e2d2:	ea5a 0101 	orrs.w	r1, sl, r1
 800e2d6:	d120      	bne.n	800e31a <_dtoa_r+0x9fa>
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	ddec      	ble.n	800e2b6 <_dtoa_r+0x996>
 800e2dc:	4629      	mov	r1, r5
 800e2de:	2201      	movs	r2, #1
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	f000 fabc 	bl	800e860 <__lshift>
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	f000 fb24 	bl	800e938 <__mcmp>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	9b05      	ldr	r3, [sp, #20]
 800e2f4:	dc02      	bgt.n	800e2fc <_dtoa_r+0x9dc>
 800e2f6:	d1de      	bne.n	800e2b6 <_dtoa_r+0x996>
 800e2f8:	07da      	lsls	r2, r3, #31
 800e2fa:	d5dc      	bpl.n	800e2b6 <_dtoa_r+0x996>
 800e2fc:	2b39      	cmp	r3, #57	; 0x39
 800e2fe:	d1d8      	bne.n	800e2b2 <_dtoa_r+0x992>
 800e300:	9a02      	ldr	r2, [sp, #8]
 800e302:	2339      	movs	r3, #57	; 0x39
 800e304:	7013      	strb	r3, [r2, #0]
 800e306:	4643      	mov	r3, r8
 800e308:	4698      	mov	r8, r3
 800e30a:	3b01      	subs	r3, #1
 800e30c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e310:	2a39      	cmp	r2, #57	; 0x39
 800e312:	d051      	beq.n	800e3b8 <_dtoa_r+0xa98>
 800e314:	3201      	adds	r2, #1
 800e316:	701a      	strb	r2, [r3, #0]
 800e318:	e745      	b.n	800e1a6 <_dtoa_r+0x886>
 800e31a:	2a00      	cmp	r2, #0
 800e31c:	dd03      	ble.n	800e326 <_dtoa_r+0xa06>
 800e31e:	2b39      	cmp	r3, #57	; 0x39
 800e320:	d0ee      	beq.n	800e300 <_dtoa_r+0x9e0>
 800e322:	3301      	adds	r3, #1
 800e324:	e7c7      	b.n	800e2b6 <_dtoa_r+0x996>
 800e326:	9a05      	ldr	r2, [sp, #20]
 800e328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e32a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e32e:	428a      	cmp	r2, r1
 800e330:	d02b      	beq.n	800e38a <_dtoa_r+0xa6a>
 800e332:	4629      	mov	r1, r5
 800e334:	2300      	movs	r3, #0
 800e336:	220a      	movs	r2, #10
 800e338:	4630      	mov	r0, r6
 800e33a:	f000 f8e1 	bl	800e500 <__multadd>
 800e33e:	45b9      	cmp	r9, r7
 800e340:	4605      	mov	r5, r0
 800e342:	f04f 0300 	mov.w	r3, #0
 800e346:	f04f 020a 	mov.w	r2, #10
 800e34a:	4649      	mov	r1, r9
 800e34c:	4630      	mov	r0, r6
 800e34e:	d107      	bne.n	800e360 <_dtoa_r+0xa40>
 800e350:	f000 f8d6 	bl	800e500 <__multadd>
 800e354:	4681      	mov	r9, r0
 800e356:	4607      	mov	r7, r0
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	e774      	b.n	800e24a <_dtoa_r+0x92a>
 800e360:	f000 f8ce 	bl	800e500 <__multadd>
 800e364:	4639      	mov	r1, r7
 800e366:	4681      	mov	r9, r0
 800e368:	2300      	movs	r3, #0
 800e36a:	220a      	movs	r2, #10
 800e36c:	4630      	mov	r0, r6
 800e36e:	f000 f8c7 	bl	800e500 <__multadd>
 800e372:	4607      	mov	r7, r0
 800e374:	e7f0      	b.n	800e358 <_dtoa_r+0xa38>
 800e376:	f1ba 0f00 	cmp.w	sl, #0
 800e37a:	9a00      	ldr	r2, [sp, #0]
 800e37c:	bfcc      	ite	gt
 800e37e:	46d0      	movgt	r8, sl
 800e380:	f04f 0801 	movle.w	r8, #1
 800e384:	4490      	add	r8, r2
 800e386:	f04f 0900 	mov.w	r9, #0
 800e38a:	4629      	mov	r1, r5
 800e38c:	2201      	movs	r2, #1
 800e38e:	4630      	mov	r0, r6
 800e390:	9302      	str	r3, [sp, #8]
 800e392:	f000 fa65 	bl	800e860 <__lshift>
 800e396:	4621      	mov	r1, r4
 800e398:	4605      	mov	r5, r0
 800e39a:	f000 facd 	bl	800e938 <__mcmp>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	dcb1      	bgt.n	800e306 <_dtoa_r+0x9e6>
 800e3a2:	d102      	bne.n	800e3aa <_dtoa_r+0xa8a>
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	07db      	lsls	r3, r3, #31
 800e3a8:	d4ad      	bmi.n	800e306 <_dtoa_r+0x9e6>
 800e3aa:	4643      	mov	r3, r8
 800e3ac:	4698      	mov	r8, r3
 800e3ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3b2:	2a30      	cmp	r2, #48	; 0x30
 800e3b4:	d0fa      	beq.n	800e3ac <_dtoa_r+0xa8c>
 800e3b6:	e6f6      	b.n	800e1a6 <_dtoa_r+0x886>
 800e3b8:	9a00      	ldr	r2, [sp, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d1a4      	bne.n	800e308 <_dtoa_r+0x9e8>
 800e3be:	f10b 0b01 	add.w	fp, fp, #1
 800e3c2:	2331      	movs	r3, #49	; 0x31
 800e3c4:	e778      	b.n	800e2b8 <_dtoa_r+0x998>
 800e3c6:	4b15      	ldr	r3, [pc, #84]	; (800e41c <_dtoa_r+0xafc>)
 800e3c8:	f7ff bb12 	b.w	800d9f0 <_dtoa_r+0xd0>
 800e3cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f47f aaee 	bne.w	800d9b0 <_dtoa_r+0x90>
 800e3d4:	4b12      	ldr	r3, [pc, #72]	; (800e420 <_dtoa_r+0xb00>)
 800e3d6:	f7ff bb0b 	b.w	800d9f0 <_dtoa_r+0xd0>
 800e3da:	f1ba 0f00 	cmp.w	sl, #0
 800e3de:	dc03      	bgt.n	800e3e8 <_dtoa_r+0xac8>
 800e3e0:	9b07      	ldr	r3, [sp, #28]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	f73f aec7 	bgt.w	800e176 <_dtoa_r+0x856>
 800e3e8:	f8dd 8000 	ldr.w	r8, [sp]
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f7ff fa08 	bl	800d804 <quorem>
 800e3f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e3f8:	f808 3b01 	strb.w	r3, [r8], #1
 800e3fc:	9a00      	ldr	r2, [sp, #0]
 800e3fe:	eba8 0202 	sub.w	r2, r8, r2
 800e402:	4592      	cmp	sl, r2
 800e404:	ddb7      	ble.n	800e376 <_dtoa_r+0xa56>
 800e406:	4629      	mov	r1, r5
 800e408:	2300      	movs	r3, #0
 800e40a:	220a      	movs	r2, #10
 800e40c:	4630      	mov	r0, r6
 800e40e:	f000 f877 	bl	800e500 <__multadd>
 800e412:	4605      	mov	r5, r0
 800e414:	e7ea      	b.n	800e3ec <_dtoa_r+0xacc>
 800e416:	bf00      	nop
 800e418:	0800f8fb 	.word	0x0800f8fb
 800e41c:	0800f854 	.word	0x0800f854
 800e420:	0800f878 	.word	0x0800f878

0800e424 <_localeconv_r>:
 800e424:	4800      	ldr	r0, [pc, #0]	; (800e428 <_localeconv_r+0x4>)
 800e426:	4770      	bx	lr
 800e428:	2400016c 	.word	0x2400016c

0800e42c <malloc>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	; (800e438 <malloc+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f000 bbe1 	b.w	800ebf8 <_malloc_r>
 800e436:	bf00      	nop
 800e438:	24000018 	.word	0x24000018

0800e43c <_Balloc>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e440:	4604      	mov	r4, r0
 800e442:	460d      	mov	r5, r1
 800e444:	b976      	cbnz	r6, 800e464 <_Balloc+0x28>
 800e446:	2010      	movs	r0, #16
 800e448:	f7ff fff0 	bl	800e42c <malloc>
 800e44c:	4602      	mov	r2, r0
 800e44e:	6260      	str	r0, [r4, #36]	; 0x24
 800e450:	b920      	cbnz	r0, 800e45c <_Balloc+0x20>
 800e452:	4b18      	ldr	r3, [pc, #96]	; (800e4b4 <_Balloc+0x78>)
 800e454:	4818      	ldr	r0, [pc, #96]	; (800e4b8 <_Balloc+0x7c>)
 800e456:	2166      	movs	r1, #102	; 0x66
 800e458:	f000 fc38 	bl	800eccc <__assert_func>
 800e45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e460:	6006      	str	r6, [r0, #0]
 800e462:	60c6      	str	r6, [r0, #12]
 800e464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e466:	68f3      	ldr	r3, [r6, #12]
 800e468:	b183      	cbz	r3, 800e48c <_Balloc+0x50>
 800e46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e472:	b9b8      	cbnz	r0, 800e4a4 <_Balloc+0x68>
 800e474:	2101      	movs	r1, #1
 800e476:	fa01 f605 	lsl.w	r6, r1, r5
 800e47a:	1d72      	adds	r2, r6, #5
 800e47c:	0092      	lsls	r2, r2, #2
 800e47e:	4620      	mov	r0, r4
 800e480:	f000 fb5a 	bl	800eb38 <_calloc_r>
 800e484:	b160      	cbz	r0, 800e4a0 <_Balloc+0x64>
 800e486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e48a:	e00e      	b.n	800e4aa <_Balloc+0x6e>
 800e48c:	2221      	movs	r2, #33	; 0x21
 800e48e:	2104      	movs	r1, #4
 800e490:	4620      	mov	r0, r4
 800e492:	f000 fb51 	bl	800eb38 <_calloc_r>
 800e496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e498:	60f0      	str	r0, [r6, #12]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1e4      	bne.n	800e46a <_Balloc+0x2e>
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	6802      	ldr	r2, [r0, #0]
 800e4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4b0:	e7f7      	b.n	800e4a2 <_Balloc+0x66>
 800e4b2:	bf00      	nop
 800e4b4:	0800f885 	.word	0x0800f885
 800e4b8:	0800f90c 	.word	0x0800f90c

0800e4bc <_Bfree>:
 800e4bc:	b570      	push	{r4, r5, r6, lr}
 800e4be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	b976      	cbnz	r6, 800e4e4 <_Bfree+0x28>
 800e4c6:	2010      	movs	r0, #16
 800e4c8:	f7ff ffb0 	bl	800e42c <malloc>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	6268      	str	r0, [r5, #36]	; 0x24
 800e4d0:	b920      	cbnz	r0, 800e4dc <_Bfree+0x20>
 800e4d2:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <_Bfree+0x3c>)
 800e4d4:	4809      	ldr	r0, [pc, #36]	; (800e4fc <_Bfree+0x40>)
 800e4d6:	218a      	movs	r1, #138	; 0x8a
 800e4d8:	f000 fbf8 	bl	800eccc <__assert_func>
 800e4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e0:	6006      	str	r6, [r0, #0]
 800e4e2:	60c6      	str	r6, [r0, #12]
 800e4e4:	b13c      	cbz	r4, 800e4f6 <_Bfree+0x3a>
 800e4e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4e8:	6862      	ldr	r2, [r4, #4]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4f0:	6021      	str	r1, [r4, #0]
 800e4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	0800f885 	.word	0x0800f885
 800e4fc:	0800f90c 	.word	0x0800f90c

0800e500 <__multadd>:
 800e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e504:	690e      	ldr	r6, [r1, #16]
 800e506:	4607      	mov	r7, r0
 800e508:	4698      	mov	r8, r3
 800e50a:	460c      	mov	r4, r1
 800e50c:	f101 0014 	add.w	r0, r1, #20
 800e510:	2300      	movs	r3, #0
 800e512:	6805      	ldr	r5, [r0, #0]
 800e514:	b2a9      	uxth	r1, r5
 800e516:	fb02 8101 	mla	r1, r2, r1, r8
 800e51a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e51e:	0c2d      	lsrs	r5, r5, #16
 800e520:	fb02 c505 	mla	r5, r2, r5, ip
 800e524:	b289      	uxth	r1, r1
 800e526:	3301      	adds	r3, #1
 800e528:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e52c:	429e      	cmp	r6, r3
 800e52e:	f840 1b04 	str.w	r1, [r0], #4
 800e532:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e536:	dcec      	bgt.n	800e512 <__multadd+0x12>
 800e538:	f1b8 0f00 	cmp.w	r8, #0
 800e53c:	d022      	beq.n	800e584 <__multadd+0x84>
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	42b3      	cmp	r3, r6
 800e542:	dc19      	bgt.n	800e578 <__multadd+0x78>
 800e544:	6861      	ldr	r1, [r4, #4]
 800e546:	4638      	mov	r0, r7
 800e548:	3101      	adds	r1, #1
 800e54a:	f7ff ff77 	bl	800e43c <_Balloc>
 800e54e:	4605      	mov	r5, r0
 800e550:	b928      	cbnz	r0, 800e55e <__multadd+0x5e>
 800e552:	4602      	mov	r2, r0
 800e554:	4b0d      	ldr	r3, [pc, #52]	; (800e58c <__multadd+0x8c>)
 800e556:	480e      	ldr	r0, [pc, #56]	; (800e590 <__multadd+0x90>)
 800e558:	21b5      	movs	r1, #181	; 0xb5
 800e55a:	f000 fbb7 	bl	800eccc <__assert_func>
 800e55e:	6922      	ldr	r2, [r4, #16]
 800e560:	3202      	adds	r2, #2
 800e562:	f104 010c 	add.w	r1, r4, #12
 800e566:	0092      	lsls	r2, r2, #2
 800e568:	300c      	adds	r0, #12
 800e56a:	f7fe fcf1 	bl	800cf50 <memcpy>
 800e56e:	4621      	mov	r1, r4
 800e570:	4638      	mov	r0, r7
 800e572:	f7ff ffa3 	bl	800e4bc <_Bfree>
 800e576:	462c      	mov	r4, r5
 800e578:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e57c:	3601      	adds	r6, #1
 800e57e:	f8c3 8014 	str.w	r8, [r3, #20]
 800e582:	6126      	str	r6, [r4, #16]
 800e584:	4620      	mov	r0, r4
 800e586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58a:	bf00      	nop
 800e58c:	0800f8fb 	.word	0x0800f8fb
 800e590:	0800f90c 	.word	0x0800f90c

0800e594 <__hi0bits>:
 800e594:	0c03      	lsrs	r3, r0, #16
 800e596:	041b      	lsls	r3, r3, #16
 800e598:	b9d3      	cbnz	r3, 800e5d0 <__hi0bits+0x3c>
 800e59a:	0400      	lsls	r0, r0, #16
 800e59c:	2310      	movs	r3, #16
 800e59e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5a2:	bf04      	itt	eq
 800e5a4:	0200      	lsleq	r0, r0, #8
 800e5a6:	3308      	addeq	r3, #8
 800e5a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5ac:	bf04      	itt	eq
 800e5ae:	0100      	lsleq	r0, r0, #4
 800e5b0:	3304      	addeq	r3, #4
 800e5b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5b6:	bf04      	itt	eq
 800e5b8:	0080      	lsleq	r0, r0, #2
 800e5ba:	3302      	addeq	r3, #2
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	db05      	blt.n	800e5cc <__hi0bits+0x38>
 800e5c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5c4:	f103 0301 	add.w	r3, r3, #1
 800e5c8:	bf08      	it	eq
 800e5ca:	2320      	moveq	r3, #32
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	4770      	bx	lr
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e7e4      	b.n	800e59e <__hi0bits+0xa>

0800e5d4 <__lo0bits>:
 800e5d4:	6803      	ldr	r3, [r0, #0]
 800e5d6:	f013 0207 	ands.w	r2, r3, #7
 800e5da:	4601      	mov	r1, r0
 800e5dc:	d00b      	beq.n	800e5f6 <__lo0bits+0x22>
 800e5de:	07da      	lsls	r2, r3, #31
 800e5e0:	d424      	bmi.n	800e62c <__lo0bits+0x58>
 800e5e2:	0798      	lsls	r0, r3, #30
 800e5e4:	bf49      	itett	mi
 800e5e6:	085b      	lsrmi	r3, r3, #1
 800e5e8:	089b      	lsrpl	r3, r3, #2
 800e5ea:	2001      	movmi	r0, #1
 800e5ec:	600b      	strmi	r3, [r1, #0]
 800e5ee:	bf5c      	itt	pl
 800e5f0:	600b      	strpl	r3, [r1, #0]
 800e5f2:	2002      	movpl	r0, #2
 800e5f4:	4770      	bx	lr
 800e5f6:	b298      	uxth	r0, r3
 800e5f8:	b9b0      	cbnz	r0, 800e628 <__lo0bits+0x54>
 800e5fa:	0c1b      	lsrs	r3, r3, #16
 800e5fc:	2010      	movs	r0, #16
 800e5fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e602:	bf04      	itt	eq
 800e604:	0a1b      	lsreq	r3, r3, #8
 800e606:	3008      	addeq	r0, #8
 800e608:	071a      	lsls	r2, r3, #28
 800e60a:	bf04      	itt	eq
 800e60c:	091b      	lsreq	r3, r3, #4
 800e60e:	3004      	addeq	r0, #4
 800e610:	079a      	lsls	r2, r3, #30
 800e612:	bf04      	itt	eq
 800e614:	089b      	lsreq	r3, r3, #2
 800e616:	3002      	addeq	r0, #2
 800e618:	07da      	lsls	r2, r3, #31
 800e61a:	d403      	bmi.n	800e624 <__lo0bits+0x50>
 800e61c:	085b      	lsrs	r3, r3, #1
 800e61e:	f100 0001 	add.w	r0, r0, #1
 800e622:	d005      	beq.n	800e630 <__lo0bits+0x5c>
 800e624:	600b      	str	r3, [r1, #0]
 800e626:	4770      	bx	lr
 800e628:	4610      	mov	r0, r2
 800e62a:	e7e8      	b.n	800e5fe <__lo0bits+0x2a>
 800e62c:	2000      	movs	r0, #0
 800e62e:	4770      	bx	lr
 800e630:	2020      	movs	r0, #32
 800e632:	4770      	bx	lr

0800e634 <__i2b>:
 800e634:	b510      	push	{r4, lr}
 800e636:	460c      	mov	r4, r1
 800e638:	2101      	movs	r1, #1
 800e63a:	f7ff feff 	bl	800e43c <_Balloc>
 800e63e:	4602      	mov	r2, r0
 800e640:	b928      	cbnz	r0, 800e64e <__i2b+0x1a>
 800e642:	4b05      	ldr	r3, [pc, #20]	; (800e658 <__i2b+0x24>)
 800e644:	4805      	ldr	r0, [pc, #20]	; (800e65c <__i2b+0x28>)
 800e646:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e64a:	f000 fb3f 	bl	800eccc <__assert_func>
 800e64e:	2301      	movs	r3, #1
 800e650:	6144      	str	r4, [r0, #20]
 800e652:	6103      	str	r3, [r0, #16]
 800e654:	bd10      	pop	{r4, pc}
 800e656:	bf00      	nop
 800e658:	0800f8fb 	.word	0x0800f8fb
 800e65c:	0800f90c 	.word	0x0800f90c

0800e660 <__multiply>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	4614      	mov	r4, r2
 800e666:	690a      	ldr	r2, [r1, #16]
 800e668:	6923      	ldr	r3, [r4, #16]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	bfb8      	it	lt
 800e66e:	460b      	movlt	r3, r1
 800e670:	460d      	mov	r5, r1
 800e672:	bfbc      	itt	lt
 800e674:	4625      	movlt	r5, r4
 800e676:	461c      	movlt	r4, r3
 800e678:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e67c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e680:	68ab      	ldr	r3, [r5, #8]
 800e682:	6869      	ldr	r1, [r5, #4]
 800e684:	eb0a 0709 	add.w	r7, sl, r9
 800e688:	42bb      	cmp	r3, r7
 800e68a:	b085      	sub	sp, #20
 800e68c:	bfb8      	it	lt
 800e68e:	3101      	addlt	r1, #1
 800e690:	f7ff fed4 	bl	800e43c <_Balloc>
 800e694:	b930      	cbnz	r0, 800e6a4 <__multiply+0x44>
 800e696:	4602      	mov	r2, r0
 800e698:	4b42      	ldr	r3, [pc, #264]	; (800e7a4 <__multiply+0x144>)
 800e69a:	4843      	ldr	r0, [pc, #268]	; (800e7a8 <__multiply+0x148>)
 800e69c:	f240 115d 	movw	r1, #349	; 0x15d
 800e6a0:	f000 fb14 	bl	800eccc <__assert_func>
 800e6a4:	f100 0614 	add.w	r6, r0, #20
 800e6a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6ac:	4633      	mov	r3, r6
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	4543      	cmp	r3, r8
 800e6b2:	d31e      	bcc.n	800e6f2 <__multiply+0x92>
 800e6b4:	f105 0c14 	add.w	ip, r5, #20
 800e6b8:	f104 0314 	add.w	r3, r4, #20
 800e6bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6c4:	9202      	str	r2, [sp, #8]
 800e6c6:	ebac 0205 	sub.w	r2, ip, r5
 800e6ca:	3a15      	subs	r2, #21
 800e6cc:	f022 0203 	bic.w	r2, r2, #3
 800e6d0:	3204      	adds	r2, #4
 800e6d2:	f105 0115 	add.w	r1, r5, #21
 800e6d6:	458c      	cmp	ip, r1
 800e6d8:	bf38      	it	cc
 800e6da:	2204      	movcc	r2, #4
 800e6dc:	9201      	str	r2, [sp, #4]
 800e6de:	9a02      	ldr	r2, [sp, #8]
 800e6e0:	9303      	str	r3, [sp, #12]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d808      	bhi.n	800e6f8 <__multiply+0x98>
 800e6e6:	2f00      	cmp	r7, #0
 800e6e8:	dc55      	bgt.n	800e796 <__multiply+0x136>
 800e6ea:	6107      	str	r7, [r0, #16]
 800e6ec:	b005      	add	sp, #20
 800e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f2:	f843 2b04 	str.w	r2, [r3], #4
 800e6f6:	e7db      	b.n	800e6b0 <__multiply+0x50>
 800e6f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6fc:	f1ba 0f00 	cmp.w	sl, #0
 800e700:	d020      	beq.n	800e744 <__multiply+0xe4>
 800e702:	f105 0e14 	add.w	lr, r5, #20
 800e706:	46b1      	mov	r9, r6
 800e708:	2200      	movs	r2, #0
 800e70a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e70e:	f8d9 b000 	ldr.w	fp, [r9]
 800e712:	b2a1      	uxth	r1, r4
 800e714:	fa1f fb8b 	uxth.w	fp, fp
 800e718:	fb0a b101 	mla	r1, sl, r1, fp
 800e71c:	4411      	add	r1, r2
 800e71e:	f8d9 2000 	ldr.w	r2, [r9]
 800e722:	0c24      	lsrs	r4, r4, #16
 800e724:	0c12      	lsrs	r2, r2, #16
 800e726:	fb0a 2404 	mla	r4, sl, r4, r2
 800e72a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e72e:	b289      	uxth	r1, r1
 800e730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e734:	45f4      	cmp	ip, lr
 800e736:	f849 1b04 	str.w	r1, [r9], #4
 800e73a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e73e:	d8e4      	bhi.n	800e70a <__multiply+0xaa>
 800e740:	9901      	ldr	r1, [sp, #4]
 800e742:	5072      	str	r2, [r6, r1]
 800e744:	9a03      	ldr	r2, [sp, #12]
 800e746:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e74a:	3304      	adds	r3, #4
 800e74c:	f1b9 0f00 	cmp.w	r9, #0
 800e750:	d01f      	beq.n	800e792 <__multiply+0x132>
 800e752:	6834      	ldr	r4, [r6, #0]
 800e754:	f105 0114 	add.w	r1, r5, #20
 800e758:	46b6      	mov	lr, r6
 800e75a:	f04f 0a00 	mov.w	sl, #0
 800e75e:	880a      	ldrh	r2, [r1, #0]
 800e760:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e764:	fb09 b202 	mla	r2, r9, r2, fp
 800e768:	4492      	add	sl, r2
 800e76a:	b2a4      	uxth	r4, r4
 800e76c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e770:	f84e 4b04 	str.w	r4, [lr], #4
 800e774:	f851 4b04 	ldr.w	r4, [r1], #4
 800e778:	f8be 2000 	ldrh.w	r2, [lr]
 800e77c:	0c24      	lsrs	r4, r4, #16
 800e77e:	fb09 2404 	mla	r4, r9, r4, r2
 800e782:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e786:	458c      	cmp	ip, r1
 800e788:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e78c:	d8e7      	bhi.n	800e75e <__multiply+0xfe>
 800e78e:	9a01      	ldr	r2, [sp, #4]
 800e790:	50b4      	str	r4, [r6, r2]
 800e792:	3604      	adds	r6, #4
 800e794:	e7a3      	b.n	800e6de <__multiply+0x7e>
 800e796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1a5      	bne.n	800e6ea <__multiply+0x8a>
 800e79e:	3f01      	subs	r7, #1
 800e7a0:	e7a1      	b.n	800e6e6 <__multiply+0x86>
 800e7a2:	bf00      	nop
 800e7a4:	0800f8fb 	.word	0x0800f8fb
 800e7a8:	0800f90c 	.word	0x0800f90c

0800e7ac <__pow5mult>:
 800e7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b0:	4615      	mov	r5, r2
 800e7b2:	f012 0203 	ands.w	r2, r2, #3
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	460f      	mov	r7, r1
 800e7ba:	d007      	beq.n	800e7cc <__pow5mult+0x20>
 800e7bc:	4c25      	ldr	r4, [pc, #148]	; (800e854 <__pow5mult+0xa8>)
 800e7be:	3a01      	subs	r2, #1
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7c6:	f7ff fe9b 	bl	800e500 <__multadd>
 800e7ca:	4607      	mov	r7, r0
 800e7cc:	10ad      	asrs	r5, r5, #2
 800e7ce:	d03d      	beq.n	800e84c <__pow5mult+0xa0>
 800e7d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7d2:	b97c      	cbnz	r4, 800e7f4 <__pow5mult+0x48>
 800e7d4:	2010      	movs	r0, #16
 800e7d6:	f7ff fe29 	bl	800e42c <malloc>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	6270      	str	r0, [r6, #36]	; 0x24
 800e7de:	b928      	cbnz	r0, 800e7ec <__pow5mult+0x40>
 800e7e0:	4b1d      	ldr	r3, [pc, #116]	; (800e858 <__pow5mult+0xac>)
 800e7e2:	481e      	ldr	r0, [pc, #120]	; (800e85c <__pow5mult+0xb0>)
 800e7e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e7e8:	f000 fa70 	bl	800eccc <__assert_func>
 800e7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7f0:	6004      	str	r4, [r0, #0]
 800e7f2:	60c4      	str	r4, [r0, #12]
 800e7f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7fc:	b94c      	cbnz	r4, 800e812 <__pow5mult+0x66>
 800e7fe:	f240 2171 	movw	r1, #625	; 0x271
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff ff16 	bl	800e634 <__i2b>
 800e808:	2300      	movs	r3, #0
 800e80a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e80e:	4604      	mov	r4, r0
 800e810:	6003      	str	r3, [r0, #0]
 800e812:	f04f 0900 	mov.w	r9, #0
 800e816:	07eb      	lsls	r3, r5, #31
 800e818:	d50a      	bpl.n	800e830 <__pow5mult+0x84>
 800e81a:	4639      	mov	r1, r7
 800e81c:	4622      	mov	r2, r4
 800e81e:	4630      	mov	r0, r6
 800e820:	f7ff ff1e 	bl	800e660 <__multiply>
 800e824:	4639      	mov	r1, r7
 800e826:	4680      	mov	r8, r0
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff fe47 	bl	800e4bc <_Bfree>
 800e82e:	4647      	mov	r7, r8
 800e830:	106d      	asrs	r5, r5, #1
 800e832:	d00b      	beq.n	800e84c <__pow5mult+0xa0>
 800e834:	6820      	ldr	r0, [r4, #0]
 800e836:	b938      	cbnz	r0, 800e848 <__pow5mult+0x9c>
 800e838:	4622      	mov	r2, r4
 800e83a:	4621      	mov	r1, r4
 800e83c:	4630      	mov	r0, r6
 800e83e:	f7ff ff0f 	bl	800e660 <__multiply>
 800e842:	6020      	str	r0, [r4, #0]
 800e844:	f8c0 9000 	str.w	r9, [r0]
 800e848:	4604      	mov	r4, r0
 800e84a:	e7e4      	b.n	800e816 <__pow5mult+0x6a>
 800e84c:	4638      	mov	r0, r7
 800e84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e852:	bf00      	nop
 800e854:	0800fa60 	.word	0x0800fa60
 800e858:	0800f885 	.word	0x0800f885
 800e85c:	0800f90c 	.word	0x0800f90c

0800e860 <__lshift>:
 800e860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e864:	460c      	mov	r4, r1
 800e866:	6849      	ldr	r1, [r1, #4]
 800e868:	6923      	ldr	r3, [r4, #16]
 800e86a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e86e:	68a3      	ldr	r3, [r4, #8]
 800e870:	4607      	mov	r7, r0
 800e872:	4691      	mov	r9, r2
 800e874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e878:	f108 0601 	add.w	r6, r8, #1
 800e87c:	42b3      	cmp	r3, r6
 800e87e:	db0b      	blt.n	800e898 <__lshift+0x38>
 800e880:	4638      	mov	r0, r7
 800e882:	f7ff fddb 	bl	800e43c <_Balloc>
 800e886:	4605      	mov	r5, r0
 800e888:	b948      	cbnz	r0, 800e89e <__lshift+0x3e>
 800e88a:	4602      	mov	r2, r0
 800e88c:	4b28      	ldr	r3, [pc, #160]	; (800e930 <__lshift+0xd0>)
 800e88e:	4829      	ldr	r0, [pc, #164]	; (800e934 <__lshift+0xd4>)
 800e890:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e894:	f000 fa1a 	bl	800eccc <__assert_func>
 800e898:	3101      	adds	r1, #1
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	e7ee      	b.n	800e87c <__lshift+0x1c>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f100 0114 	add.w	r1, r0, #20
 800e8a4:	f100 0210 	add.w	r2, r0, #16
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	4553      	cmp	r3, sl
 800e8ac:	db33      	blt.n	800e916 <__lshift+0xb6>
 800e8ae:	6920      	ldr	r0, [r4, #16]
 800e8b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8b4:	f104 0314 	add.w	r3, r4, #20
 800e8b8:	f019 091f 	ands.w	r9, r9, #31
 800e8bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8c4:	d02b      	beq.n	800e91e <__lshift+0xbe>
 800e8c6:	f1c9 0e20 	rsb	lr, r9, #32
 800e8ca:	468a      	mov	sl, r1
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	6818      	ldr	r0, [r3, #0]
 800e8d0:	fa00 f009 	lsl.w	r0, r0, r9
 800e8d4:	4302      	orrs	r2, r0
 800e8d6:	f84a 2b04 	str.w	r2, [sl], #4
 800e8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8de:	459c      	cmp	ip, r3
 800e8e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8e4:	d8f3      	bhi.n	800e8ce <__lshift+0x6e>
 800e8e6:	ebac 0304 	sub.w	r3, ip, r4
 800e8ea:	3b15      	subs	r3, #21
 800e8ec:	f023 0303 	bic.w	r3, r3, #3
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	f104 0015 	add.w	r0, r4, #21
 800e8f6:	4584      	cmp	ip, r0
 800e8f8:	bf38      	it	cc
 800e8fa:	2304      	movcc	r3, #4
 800e8fc:	50ca      	str	r2, [r1, r3]
 800e8fe:	b10a      	cbz	r2, 800e904 <__lshift+0xa4>
 800e900:	f108 0602 	add.w	r6, r8, #2
 800e904:	3e01      	subs	r6, #1
 800e906:	4638      	mov	r0, r7
 800e908:	612e      	str	r6, [r5, #16]
 800e90a:	4621      	mov	r1, r4
 800e90c:	f7ff fdd6 	bl	800e4bc <_Bfree>
 800e910:	4628      	mov	r0, r5
 800e912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e916:	f842 0f04 	str.w	r0, [r2, #4]!
 800e91a:	3301      	adds	r3, #1
 800e91c:	e7c5      	b.n	800e8aa <__lshift+0x4a>
 800e91e:	3904      	subs	r1, #4
 800e920:	f853 2b04 	ldr.w	r2, [r3], #4
 800e924:	f841 2f04 	str.w	r2, [r1, #4]!
 800e928:	459c      	cmp	ip, r3
 800e92a:	d8f9      	bhi.n	800e920 <__lshift+0xc0>
 800e92c:	e7ea      	b.n	800e904 <__lshift+0xa4>
 800e92e:	bf00      	nop
 800e930:	0800f8fb 	.word	0x0800f8fb
 800e934:	0800f90c 	.word	0x0800f90c

0800e938 <__mcmp>:
 800e938:	b530      	push	{r4, r5, lr}
 800e93a:	6902      	ldr	r2, [r0, #16]
 800e93c:	690c      	ldr	r4, [r1, #16]
 800e93e:	1b12      	subs	r2, r2, r4
 800e940:	d10e      	bne.n	800e960 <__mcmp+0x28>
 800e942:	f100 0314 	add.w	r3, r0, #20
 800e946:	3114      	adds	r1, #20
 800e948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e94c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e958:	42a5      	cmp	r5, r4
 800e95a:	d003      	beq.n	800e964 <__mcmp+0x2c>
 800e95c:	d305      	bcc.n	800e96a <__mcmp+0x32>
 800e95e:	2201      	movs	r2, #1
 800e960:	4610      	mov	r0, r2
 800e962:	bd30      	pop	{r4, r5, pc}
 800e964:	4283      	cmp	r3, r0
 800e966:	d3f3      	bcc.n	800e950 <__mcmp+0x18>
 800e968:	e7fa      	b.n	800e960 <__mcmp+0x28>
 800e96a:	f04f 32ff 	mov.w	r2, #4294967295
 800e96e:	e7f7      	b.n	800e960 <__mcmp+0x28>

0800e970 <__mdiff>:
 800e970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	460c      	mov	r4, r1
 800e976:	4606      	mov	r6, r0
 800e978:	4611      	mov	r1, r2
 800e97a:	4620      	mov	r0, r4
 800e97c:	4617      	mov	r7, r2
 800e97e:	f7ff ffdb 	bl	800e938 <__mcmp>
 800e982:	1e05      	subs	r5, r0, #0
 800e984:	d110      	bne.n	800e9a8 <__mdiff+0x38>
 800e986:	4629      	mov	r1, r5
 800e988:	4630      	mov	r0, r6
 800e98a:	f7ff fd57 	bl	800e43c <_Balloc>
 800e98e:	b930      	cbnz	r0, 800e99e <__mdiff+0x2e>
 800e990:	4b39      	ldr	r3, [pc, #228]	; (800ea78 <__mdiff+0x108>)
 800e992:	4602      	mov	r2, r0
 800e994:	f240 2132 	movw	r1, #562	; 0x232
 800e998:	4838      	ldr	r0, [pc, #224]	; (800ea7c <__mdiff+0x10c>)
 800e99a:	f000 f997 	bl	800eccc <__assert_func>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a8:	bfa4      	itt	ge
 800e9aa:	463b      	movge	r3, r7
 800e9ac:	4627      	movge	r7, r4
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	6879      	ldr	r1, [r7, #4]
 800e9b2:	bfa6      	itte	ge
 800e9b4:	461c      	movge	r4, r3
 800e9b6:	2500      	movge	r5, #0
 800e9b8:	2501      	movlt	r5, #1
 800e9ba:	f7ff fd3f 	bl	800e43c <_Balloc>
 800e9be:	b920      	cbnz	r0, 800e9ca <__mdiff+0x5a>
 800e9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ea78 <__mdiff+0x108>)
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9c8:	e7e6      	b.n	800e998 <__mdiff+0x28>
 800e9ca:	693e      	ldr	r6, [r7, #16]
 800e9cc:	60c5      	str	r5, [r0, #12]
 800e9ce:	6925      	ldr	r5, [r4, #16]
 800e9d0:	f107 0114 	add.w	r1, r7, #20
 800e9d4:	f104 0914 	add.w	r9, r4, #20
 800e9d8:	f100 0e14 	add.w	lr, r0, #20
 800e9dc:	f107 0210 	add.w	r2, r7, #16
 800e9e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e9e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e9e8:	46f2      	mov	sl, lr
 800e9ea:	2700      	movs	r7, #0
 800e9ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9f4:	fa1f f883 	uxth.w	r8, r3
 800e9f8:	fa17 f78b 	uxtah	r7, r7, fp
 800e9fc:	0c1b      	lsrs	r3, r3, #16
 800e9fe:	eba7 0808 	sub.w	r8, r7, r8
 800ea02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea0a:	fa1f f888 	uxth.w	r8, r8
 800ea0e:	141f      	asrs	r7, r3, #16
 800ea10:	454d      	cmp	r5, r9
 800ea12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea16:	f84a 3b04 	str.w	r3, [sl], #4
 800ea1a:	d8e7      	bhi.n	800e9ec <__mdiff+0x7c>
 800ea1c:	1b2b      	subs	r3, r5, r4
 800ea1e:	3b15      	subs	r3, #21
 800ea20:	f023 0303 	bic.w	r3, r3, #3
 800ea24:	3304      	adds	r3, #4
 800ea26:	3415      	adds	r4, #21
 800ea28:	42a5      	cmp	r5, r4
 800ea2a:	bf38      	it	cc
 800ea2c:	2304      	movcc	r3, #4
 800ea2e:	4419      	add	r1, r3
 800ea30:	4473      	add	r3, lr
 800ea32:	469e      	mov	lr, r3
 800ea34:	460d      	mov	r5, r1
 800ea36:	4565      	cmp	r5, ip
 800ea38:	d30e      	bcc.n	800ea58 <__mdiff+0xe8>
 800ea3a:	f10c 0203 	add.w	r2, ip, #3
 800ea3e:	1a52      	subs	r2, r2, r1
 800ea40:	f022 0203 	bic.w	r2, r2, #3
 800ea44:	3903      	subs	r1, #3
 800ea46:	458c      	cmp	ip, r1
 800ea48:	bf38      	it	cc
 800ea4a:	2200      	movcc	r2, #0
 800ea4c:	441a      	add	r2, r3
 800ea4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea52:	b17b      	cbz	r3, 800ea74 <__mdiff+0x104>
 800ea54:	6106      	str	r6, [r0, #16]
 800ea56:	e7a5      	b.n	800e9a4 <__mdiff+0x34>
 800ea58:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea5c:	fa17 f488 	uxtah	r4, r7, r8
 800ea60:	1422      	asrs	r2, r4, #16
 800ea62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea66:	b2a4      	uxth	r4, r4
 800ea68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea6c:	f84e 4b04 	str.w	r4, [lr], #4
 800ea70:	1417      	asrs	r7, r2, #16
 800ea72:	e7e0      	b.n	800ea36 <__mdiff+0xc6>
 800ea74:	3e01      	subs	r6, #1
 800ea76:	e7ea      	b.n	800ea4e <__mdiff+0xde>
 800ea78:	0800f8fb 	.word	0x0800f8fb
 800ea7c:	0800f90c 	.word	0x0800f90c

0800ea80 <__d2b>:
 800ea80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea84:	4689      	mov	r9, r1
 800ea86:	2101      	movs	r1, #1
 800ea88:	ec57 6b10 	vmov	r6, r7, d0
 800ea8c:	4690      	mov	r8, r2
 800ea8e:	f7ff fcd5 	bl	800e43c <_Balloc>
 800ea92:	4604      	mov	r4, r0
 800ea94:	b930      	cbnz	r0, 800eaa4 <__d2b+0x24>
 800ea96:	4602      	mov	r2, r0
 800ea98:	4b25      	ldr	r3, [pc, #148]	; (800eb30 <__d2b+0xb0>)
 800ea9a:	4826      	ldr	r0, [pc, #152]	; (800eb34 <__d2b+0xb4>)
 800ea9c:	f240 310a 	movw	r1, #778	; 0x30a
 800eaa0:	f000 f914 	bl	800eccc <__assert_func>
 800eaa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eaa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eaac:	bb35      	cbnz	r5, 800eafc <__d2b+0x7c>
 800eaae:	2e00      	cmp	r6, #0
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	d028      	beq.n	800eb06 <__d2b+0x86>
 800eab4:	4668      	mov	r0, sp
 800eab6:	9600      	str	r6, [sp, #0]
 800eab8:	f7ff fd8c 	bl	800e5d4 <__lo0bits>
 800eabc:	9900      	ldr	r1, [sp, #0]
 800eabe:	b300      	cbz	r0, 800eb02 <__d2b+0x82>
 800eac0:	9a01      	ldr	r2, [sp, #4]
 800eac2:	f1c0 0320 	rsb	r3, r0, #32
 800eac6:	fa02 f303 	lsl.w	r3, r2, r3
 800eaca:	430b      	orrs	r3, r1
 800eacc:	40c2      	lsrs	r2, r0
 800eace:	6163      	str	r3, [r4, #20]
 800ead0:	9201      	str	r2, [sp, #4]
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	61a3      	str	r3, [r4, #24]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	bf14      	ite	ne
 800eada:	2202      	movne	r2, #2
 800eadc:	2201      	moveq	r2, #1
 800eade:	6122      	str	r2, [r4, #16]
 800eae0:	b1d5      	cbz	r5, 800eb18 <__d2b+0x98>
 800eae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eae6:	4405      	add	r5, r0
 800eae8:	f8c9 5000 	str.w	r5, [r9]
 800eaec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaf0:	f8c8 0000 	str.w	r0, [r8]
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	b003      	add	sp, #12
 800eaf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eafc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb00:	e7d5      	b.n	800eaae <__d2b+0x2e>
 800eb02:	6161      	str	r1, [r4, #20]
 800eb04:	e7e5      	b.n	800ead2 <__d2b+0x52>
 800eb06:	a801      	add	r0, sp, #4
 800eb08:	f7ff fd64 	bl	800e5d4 <__lo0bits>
 800eb0c:	9b01      	ldr	r3, [sp, #4]
 800eb0e:	6163      	str	r3, [r4, #20]
 800eb10:	2201      	movs	r2, #1
 800eb12:	6122      	str	r2, [r4, #16]
 800eb14:	3020      	adds	r0, #32
 800eb16:	e7e3      	b.n	800eae0 <__d2b+0x60>
 800eb18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb20:	f8c9 0000 	str.w	r0, [r9]
 800eb24:	6918      	ldr	r0, [r3, #16]
 800eb26:	f7ff fd35 	bl	800e594 <__hi0bits>
 800eb2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb2e:	e7df      	b.n	800eaf0 <__d2b+0x70>
 800eb30:	0800f8fb 	.word	0x0800f8fb
 800eb34:	0800f90c 	.word	0x0800f90c

0800eb38 <_calloc_r>:
 800eb38:	b513      	push	{r0, r1, r4, lr}
 800eb3a:	434a      	muls	r2, r1
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	9201      	str	r2, [sp, #4]
 800eb40:	f000 f85a 	bl	800ebf8 <_malloc_r>
 800eb44:	4604      	mov	r4, r0
 800eb46:	b118      	cbz	r0, 800eb50 <_calloc_r+0x18>
 800eb48:	9a01      	ldr	r2, [sp, #4]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	f7fe fa0e 	bl	800cf6c <memset>
 800eb50:	4620      	mov	r0, r4
 800eb52:	b002      	add	sp, #8
 800eb54:	bd10      	pop	{r4, pc}
	...

0800eb58 <_free_r>:
 800eb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	d048      	beq.n	800ebf0 <_free_r+0x98>
 800eb5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb62:	9001      	str	r0, [sp, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f1a1 0404 	sub.w	r4, r1, #4
 800eb6a:	bfb8      	it	lt
 800eb6c:	18e4      	addlt	r4, r4, r3
 800eb6e:	f000 f8ef 	bl	800ed50 <__malloc_lock>
 800eb72:	4a20      	ldr	r2, [pc, #128]	; (800ebf4 <_free_r+0x9c>)
 800eb74:	9801      	ldr	r0, [sp, #4]
 800eb76:	6813      	ldr	r3, [r2, #0]
 800eb78:	4615      	mov	r5, r2
 800eb7a:	b933      	cbnz	r3, 800eb8a <_free_r+0x32>
 800eb7c:	6063      	str	r3, [r4, #4]
 800eb7e:	6014      	str	r4, [r2, #0]
 800eb80:	b003      	add	sp, #12
 800eb82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb86:	f000 b8e9 	b.w	800ed5c <__malloc_unlock>
 800eb8a:	42a3      	cmp	r3, r4
 800eb8c:	d90b      	bls.n	800eba6 <_free_r+0x4e>
 800eb8e:	6821      	ldr	r1, [r4, #0]
 800eb90:	1862      	adds	r2, r4, r1
 800eb92:	4293      	cmp	r3, r2
 800eb94:	bf04      	itt	eq
 800eb96:	681a      	ldreq	r2, [r3, #0]
 800eb98:	685b      	ldreq	r3, [r3, #4]
 800eb9a:	6063      	str	r3, [r4, #4]
 800eb9c:	bf04      	itt	eq
 800eb9e:	1852      	addeq	r2, r2, r1
 800eba0:	6022      	streq	r2, [r4, #0]
 800eba2:	602c      	str	r4, [r5, #0]
 800eba4:	e7ec      	b.n	800eb80 <_free_r+0x28>
 800eba6:	461a      	mov	r2, r3
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	b10b      	cbz	r3, 800ebb0 <_free_r+0x58>
 800ebac:	42a3      	cmp	r3, r4
 800ebae:	d9fa      	bls.n	800eba6 <_free_r+0x4e>
 800ebb0:	6811      	ldr	r1, [r2, #0]
 800ebb2:	1855      	adds	r5, r2, r1
 800ebb4:	42a5      	cmp	r5, r4
 800ebb6:	d10b      	bne.n	800ebd0 <_free_r+0x78>
 800ebb8:	6824      	ldr	r4, [r4, #0]
 800ebba:	4421      	add	r1, r4
 800ebbc:	1854      	adds	r4, r2, r1
 800ebbe:	42a3      	cmp	r3, r4
 800ebc0:	6011      	str	r1, [r2, #0]
 800ebc2:	d1dd      	bne.n	800eb80 <_free_r+0x28>
 800ebc4:	681c      	ldr	r4, [r3, #0]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	6053      	str	r3, [r2, #4]
 800ebca:	4421      	add	r1, r4
 800ebcc:	6011      	str	r1, [r2, #0]
 800ebce:	e7d7      	b.n	800eb80 <_free_r+0x28>
 800ebd0:	d902      	bls.n	800ebd8 <_free_r+0x80>
 800ebd2:	230c      	movs	r3, #12
 800ebd4:	6003      	str	r3, [r0, #0]
 800ebd6:	e7d3      	b.n	800eb80 <_free_r+0x28>
 800ebd8:	6825      	ldr	r5, [r4, #0]
 800ebda:	1961      	adds	r1, r4, r5
 800ebdc:	428b      	cmp	r3, r1
 800ebde:	bf04      	itt	eq
 800ebe0:	6819      	ldreq	r1, [r3, #0]
 800ebe2:	685b      	ldreq	r3, [r3, #4]
 800ebe4:	6063      	str	r3, [r4, #4]
 800ebe6:	bf04      	itt	eq
 800ebe8:	1949      	addeq	r1, r1, r5
 800ebea:	6021      	streq	r1, [r4, #0]
 800ebec:	6054      	str	r4, [r2, #4]
 800ebee:	e7c7      	b.n	800eb80 <_free_r+0x28>
 800ebf0:	b003      	add	sp, #12
 800ebf2:	bd30      	pop	{r4, r5, pc}
 800ebf4:	24000234 	.word	0x24000234

0800ebf8 <_malloc_r>:
 800ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfa:	1ccd      	adds	r5, r1, #3
 800ebfc:	f025 0503 	bic.w	r5, r5, #3
 800ec00:	3508      	adds	r5, #8
 800ec02:	2d0c      	cmp	r5, #12
 800ec04:	bf38      	it	cc
 800ec06:	250c      	movcc	r5, #12
 800ec08:	2d00      	cmp	r5, #0
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	db01      	blt.n	800ec12 <_malloc_r+0x1a>
 800ec0e:	42a9      	cmp	r1, r5
 800ec10:	d903      	bls.n	800ec1a <_malloc_r+0x22>
 800ec12:	230c      	movs	r3, #12
 800ec14:	6033      	str	r3, [r6, #0]
 800ec16:	2000      	movs	r0, #0
 800ec18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1a:	f000 f899 	bl	800ed50 <__malloc_lock>
 800ec1e:	4921      	ldr	r1, [pc, #132]	; (800eca4 <_malloc_r+0xac>)
 800ec20:	680a      	ldr	r2, [r1, #0]
 800ec22:	4614      	mov	r4, r2
 800ec24:	b99c      	cbnz	r4, 800ec4e <_malloc_r+0x56>
 800ec26:	4f20      	ldr	r7, [pc, #128]	; (800eca8 <_malloc_r+0xb0>)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	b923      	cbnz	r3, 800ec36 <_malloc_r+0x3e>
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f000 f83c 	bl	800ecac <_sbrk_r>
 800ec34:	6038      	str	r0, [r7, #0]
 800ec36:	4629      	mov	r1, r5
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f000 f837 	bl	800ecac <_sbrk_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	d123      	bne.n	800ec8a <_malloc_r+0x92>
 800ec42:	230c      	movs	r3, #12
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	4630      	mov	r0, r6
 800ec48:	f000 f888 	bl	800ed5c <__malloc_unlock>
 800ec4c:	e7e3      	b.n	800ec16 <_malloc_r+0x1e>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	1b5b      	subs	r3, r3, r5
 800ec52:	d417      	bmi.n	800ec84 <_malloc_r+0x8c>
 800ec54:	2b0b      	cmp	r3, #11
 800ec56:	d903      	bls.n	800ec60 <_malloc_r+0x68>
 800ec58:	6023      	str	r3, [r4, #0]
 800ec5a:	441c      	add	r4, r3
 800ec5c:	6025      	str	r5, [r4, #0]
 800ec5e:	e004      	b.n	800ec6a <_malloc_r+0x72>
 800ec60:	6863      	ldr	r3, [r4, #4]
 800ec62:	42a2      	cmp	r2, r4
 800ec64:	bf0c      	ite	eq
 800ec66:	600b      	streq	r3, [r1, #0]
 800ec68:	6053      	strne	r3, [r2, #4]
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f000 f876 	bl	800ed5c <__malloc_unlock>
 800ec70:	f104 000b 	add.w	r0, r4, #11
 800ec74:	1d23      	adds	r3, r4, #4
 800ec76:	f020 0007 	bic.w	r0, r0, #7
 800ec7a:	1ac2      	subs	r2, r0, r3
 800ec7c:	d0cc      	beq.n	800ec18 <_malloc_r+0x20>
 800ec7e:	1a1b      	subs	r3, r3, r0
 800ec80:	50a3      	str	r3, [r4, r2]
 800ec82:	e7c9      	b.n	800ec18 <_malloc_r+0x20>
 800ec84:	4622      	mov	r2, r4
 800ec86:	6864      	ldr	r4, [r4, #4]
 800ec88:	e7cc      	b.n	800ec24 <_malloc_r+0x2c>
 800ec8a:	1cc4      	adds	r4, r0, #3
 800ec8c:	f024 0403 	bic.w	r4, r4, #3
 800ec90:	42a0      	cmp	r0, r4
 800ec92:	d0e3      	beq.n	800ec5c <_malloc_r+0x64>
 800ec94:	1a21      	subs	r1, r4, r0
 800ec96:	4630      	mov	r0, r6
 800ec98:	f000 f808 	bl	800ecac <_sbrk_r>
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d1dd      	bne.n	800ec5c <_malloc_r+0x64>
 800eca0:	e7cf      	b.n	800ec42 <_malloc_r+0x4a>
 800eca2:	bf00      	nop
 800eca4:	24000234 	.word	0x24000234
 800eca8:	24000238 	.word	0x24000238

0800ecac <_sbrk_r>:
 800ecac:	b538      	push	{r3, r4, r5, lr}
 800ecae:	4d06      	ldr	r5, [pc, #24]	; (800ecc8 <_sbrk_r+0x1c>)
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	4608      	mov	r0, r1
 800ecb6:	602b      	str	r3, [r5, #0]
 800ecb8:	f7f3 fae2 	bl	8002280 <_sbrk>
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	d102      	bne.n	800ecc6 <_sbrk_r+0x1a>
 800ecc0:	682b      	ldr	r3, [r5, #0]
 800ecc2:	b103      	cbz	r3, 800ecc6 <_sbrk_r+0x1a>
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
 800ecc8:	24000d6c 	.word	0x24000d6c

0800eccc <__assert_func>:
 800eccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecce:	4614      	mov	r4, r2
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4b09      	ldr	r3, [pc, #36]	; (800ecf8 <__assert_func+0x2c>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	68d8      	ldr	r0, [r3, #12]
 800ecda:	b14c      	cbz	r4, 800ecf0 <__assert_func+0x24>
 800ecdc:	4b07      	ldr	r3, [pc, #28]	; (800ecfc <__assert_func+0x30>)
 800ecde:	9100      	str	r1, [sp, #0]
 800ece0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ece4:	4906      	ldr	r1, [pc, #24]	; (800ed00 <__assert_func+0x34>)
 800ece6:	462b      	mov	r3, r5
 800ece8:	f000 f80e 	bl	800ed08 <fiprintf>
 800ecec:	f000 fa64 	bl	800f1b8 <abort>
 800ecf0:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <__assert_func+0x38>)
 800ecf2:	461c      	mov	r4, r3
 800ecf4:	e7f3      	b.n	800ecde <__assert_func+0x12>
 800ecf6:	bf00      	nop
 800ecf8:	24000018 	.word	0x24000018
 800ecfc:	0800fa6c 	.word	0x0800fa6c
 800ed00:	0800fa79 	.word	0x0800fa79
 800ed04:	0800faa7 	.word	0x0800faa7

0800ed08 <fiprintf>:
 800ed08:	b40e      	push	{r1, r2, r3}
 800ed0a:	b503      	push	{r0, r1, lr}
 800ed0c:	4601      	mov	r1, r0
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	4805      	ldr	r0, [pc, #20]	; (800ed28 <fiprintf+0x20>)
 800ed12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed16:	6800      	ldr	r0, [r0, #0]
 800ed18:	9301      	str	r3, [sp, #4]
 800ed1a:	f000 f84f 	bl	800edbc <_vfiprintf_r>
 800ed1e:	b002      	add	sp, #8
 800ed20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed24:	b003      	add	sp, #12
 800ed26:	4770      	bx	lr
 800ed28:	24000018 	.word	0x24000018

0800ed2c <__ascii_mbtowc>:
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	b901      	cbnz	r1, 800ed32 <__ascii_mbtowc+0x6>
 800ed30:	a901      	add	r1, sp, #4
 800ed32:	b142      	cbz	r2, 800ed46 <__ascii_mbtowc+0x1a>
 800ed34:	b14b      	cbz	r3, 800ed4a <__ascii_mbtowc+0x1e>
 800ed36:	7813      	ldrb	r3, [r2, #0]
 800ed38:	600b      	str	r3, [r1, #0]
 800ed3a:	7812      	ldrb	r2, [r2, #0]
 800ed3c:	1e10      	subs	r0, r2, #0
 800ed3e:	bf18      	it	ne
 800ed40:	2001      	movne	r0, #1
 800ed42:	b002      	add	sp, #8
 800ed44:	4770      	bx	lr
 800ed46:	4610      	mov	r0, r2
 800ed48:	e7fb      	b.n	800ed42 <__ascii_mbtowc+0x16>
 800ed4a:	f06f 0001 	mvn.w	r0, #1
 800ed4e:	e7f8      	b.n	800ed42 <__ascii_mbtowc+0x16>

0800ed50 <__malloc_lock>:
 800ed50:	4801      	ldr	r0, [pc, #4]	; (800ed58 <__malloc_lock+0x8>)
 800ed52:	f000 bbf1 	b.w	800f538 <__retarget_lock_acquire_recursive>
 800ed56:	bf00      	nop
 800ed58:	24000d74 	.word	0x24000d74

0800ed5c <__malloc_unlock>:
 800ed5c:	4801      	ldr	r0, [pc, #4]	; (800ed64 <__malloc_unlock+0x8>)
 800ed5e:	f000 bbec 	b.w	800f53a <__retarget_lock_release_recursive>
 800ed62:	bf00      	nop
 800ed64:	24000d74 	.word	0x24000d74

0800ed68 <__sfputc_r>:
 800ed68:	6893      	ldr	r3, [r2, #8]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	b410      	push	{r4}
 800ed70:	6093      	str	r3, [r2, #8]
 800ed72:	da08      	bge.n	800ed86 <__sfputc_r+0x1e>
 800ed74:	6994      	ldr	r4, [r2, #24]
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	db01      	blt.n	800ed7e <__sfputc_r+0x16>
 800ed7a:	290a      	cmp	r1, #10
 800ed7c:	d103      	bne.n	800ed86 <__sfputc_r+0x1e>
 800ed7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed82:	f000 b94b 	b.w	800f01c <__swbuf_r>
 800ed86:	6813      	ldr	r3, [r2, #0]
 800ed88:	1c58      	adds	r0, r3, #1
 800ed8a:	6010      	str	r0, [r2, #0]
 800ed8c:	7019      	strb	r1, [r3, #0]
 800ed8e:	4608      	mov	r0, r1
 800ed90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed94:	4770      	bx	lr

0800ed96 <__sfputs_r>:
 800ed96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed98:	4606      	mov	r6, r0
 800ed9a:	460f      	mov	r7, r1
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	18d5      	adds	r5, r2, r3
 800eda0:	42ac      	cmp	r4, r5
 800eda2:	d101      	bne.n	800eda8 <__sfputs_r+0x12>
 800eda4:	2000      	movs	r0, #0
 800eda6:	e007      	b.n	800edb8 <__sfputs_r+0x22>
 800eda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edac:	463a      	mov	r2, r7
 800edae:	4630      	mov	r0, r6
 800edb0:	f7ff ffda 	bl	800ed68 <__sfputc_r>
 800edb4:	1c43      	adds	r3, r0, #1
 800edb6:	d1f3      	bne.n	800eda0 <__sfputs_r+0xa>
 800edb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edbc <_vfiprintf_r>:
 800edbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc0:	460d      	mov	r5, r1
 800edc2:	b09d      	sub	sp, #116	; 0x74
 800edc4:	4614      	mov	r4, r2
 800edc6:	4698      	mov	r8, r3
 800edc8:	4606      	mov	r6, r0
 800edca:	b118      	cbz	r0, 800edd4 <_vfiprintf_r+0x18>
 800edcc:	6983      	ldr	r3, [r0, #24]
 800edce:	b90b      	cbnz	r3, 800edd4 <_vfiprintf_r+0x18>
 800edd0:	f000 fb14 	bl	800f3fc <__sinit>
 800edd4:	4b89      	ldr	r3, [pc, #548]	; (800effc <_vfiprintf_r+0x240>)
 800edd6:	429d      	cmp	r5, r3
 800edd8:	d11b      	bne.n	800ee12 <_vfiprintf_r+0x56>
 800edda:	6875      	ldr	r5, [r6, #4]
 800eddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edde:	07d9      	lsls	r1, r3, #31
 800ede0:	d405      	bmi.n	800edee <_vfiprintf_r+0x32>
 800ede2:	89ab      	ldrh	r3, [r5, #12]
 800ede4:	059a      	lsls	r2, r3, #22
 800ede6:	d402      	bmi.n	800edee <_vfiprintf_r+0x32>
 800ede8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edea:	f000 fba5 	bl	800f538 <__retarget_lock_acquire_recursive>
 800edee:	89ab      	ldrh	r3, [r5, #12]
 800edf0:	071b      	lsls	r3, r3, #28
 800edf2:	d501      	bpl.n	800edf8 <_vfiprintf_r+0x3c>
 800edf4:	692b      	ldr	r3, [r5, #16]
 800edf6:	b9eb      	cbnz	r3, 800ee34 <_vfiprintf_r+0x78>
 800edf8:	4629      	mov	r1, r5
 800edfa:	4630      	mov	r0, r6
 800edfc:	f000 f96e 	bl	800f0dc <__swsetup_r>
 800ee00:	b1c0      	cbz	r0, 800ee34 <_vfiprintf_r+0x78>
 800ee02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee04:	07dc      	lsls	r4, r3, #31
 800ee06:	d50e      	bpl.n	800ee26 <_vfiprintf_r+0x6a>
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	b01d      	add	sp, #116	; 0x74
 800ee0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee12:	4b7b      	ldr	r3, [pc, #492]	; (800f000 <_vfiprintf_r+0x244>)
 800ee14:	429d      	cmp	r5, r3
 800ee16:	d101      	bne.n	800ee1c <_vfiprintf_r+0x60>
 800ee18:	68b5      	ldr	r5, [r6, #8]
 800ee1a:	e7df      	b.n	800eddc <_vfiprintf_r+0x20>
 800ee1c:	4b79      	ldr	r3, [pc, #484]	; (800f004 <_vfiprintf_r+0x248>)
 800ee1e:	429d      	cmp	r5, r3
 800ee20:	bf08      	it	eq
 800ee22:	68f5      	ldreq	r5, [r6, #12]
 800ee24:	e7da      	b.n	800eddc <_vfiprintf_r+0x20>
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	0598      	lsls	r0, r3, #22
 800ee2a:	d4ed      	bmi.n	800ee08 <_vfiprintf_r+0x4c>
 800ee2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee2e:	f000 fb84 	bl	800f53a <__retarget_lock_release_recursive>
 800ee32:	e7e9      	b.n	800ee08 <_vfiprintf_r+0x4c>
 800ee34:	2300      	movs	r3, #0
 800ee36:	9309      	str	r3, [sp, #36]	; 0x24
 800ee38:	2320      	movs	r3, #32
 800ee3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee42:	2330      	movs	r3, #48	; 0x30
 800ee44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f008 <_vfiprintf_r+0x24c>
 800ee48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee4c:	f04f 0901 	mov.w	r9, #1
 800ee50:	4623      	mov	r3, r4
 800ee52:	469a      	mov	sl, r3
 800ee54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee58:	b10a      	cbz	r2, 800ee5e <_vfiprintf_r+0xa2>
 800ee5a:	2a25      	cmp	r2, #37	; 0x25
 800ee5c:	d1f9      	bne.n	800ee52 <_vfiprintf_r+0x96>
 800ee5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee62:	d00b      	beq.n	800ee7c <_vfiprintf_r+0xc0>
 800ee64:	465b      	mov	r3, fp
 800ee66:	4622      	mov	r2, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff ff93 	bl	800ed96 <__sfputs_r>
 800ee70:	3001      	adds	r0, #1
 800ee72:	f000 80aa 	beq.w	800efca <_vfiprintf_r+0x20e>
 800ee76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee78:	445a      	add	r2, fp
 800ee7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 80a2 	beq.w	800efca <_vfiprintf_r+0x20e>
 800ee86:	2300      	movs	r3, #0
 800ee88:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee90:	f10a 0a01 	add.w	sl, sl, #1
 800ee94:	9304      	str	r3, [sp, #16]
 800ee96:	9307      	str	r3, [sp, #28]
 800ee98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ee9e:	4654      	mov	r4, sl
 800eea0:	2205      	movs	r2, #5
 800eea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea6:	4858      	ldr	r0, [pc, #352]	; (800f008 <_vfiprintf_r+0x24c>)
 800eea8:	f7f1 fa3a 	bl	8000320 <memchr>
 800eeac:	9a04      	ldr	r2, [sp, #16]
 800eeae:	b9d8      	cbnz	r0, 800eee8 <_vfiprintf_r+0x12c>
 800eeb0:	06d1      	lsls	r1, r2, #27
 800eeb2:	bf44      	itt	mi
 800eeb4:	2320      	movmi	r3, #32
 800eeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeba:	0713      	lsls	r3, r2, #28
 800eebc:	bf44      	itt	mi
 800eebe:	232b      	movmi	r3, #43	; 0x2b
 800eec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec4:	f89a 3000 	ldrb.w	r3, [sl]
 800eec8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeca:	d015      	beq.n	800eef8 <_vfiprintf_r+0x13c>
 800eecc:	9a07      	ldr	r2, [sp, #28]
 800eece:	4654      	mov	r4, sl
 800eed0:	2000      	movs	r0, #0
 800eed2:	f04f 0c0a 	mov.w	ip, #10
 800eed6:	4621      	mov	r1, r4
 800eed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eedc:	3b30      	subs	r3, #48	; 0x30
 800eede:	2b09      	cmp	r3, #9
 800eee0:	d94e      	bls.n	800ef80 <_vfiprintf_r+0x1c4>
 800eee2:	b1b0      	cbz	r0, 800ef12 <_vfiprintf_r+0x156>
 800eee4:	9207      	str	r2, [sp, #28]
 800eee6:	e014      	b.n	800ef12 <_vfiprintf_r+0x156>
 800eee8:	eba0 0308 	sub.w	r3, r0, r8
 800eeec:	fa09 f303 	lsl.w	r3, r9, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	9304      	str	r3, [sp, #16]
 800eef4:	46a2      	mov	sl, r4
 800eef6:	e7d2      	b.n	800ee9e <_vfiprintf_r+0xe2>
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	1d19      	adds	r1, r3, #4
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	9103      	str	r1, [sp, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfbb      	ittet	lt
 800ef04:	425b      	neglt	r3, r3
 800ef06:	f042 0202 	orrlt.w	r2, r2, #2
 800ef0a:	9307      	strge	r3, [sp, #28]
 800ef0c:	9307      	strlt	r3, [sp, #28]
 800ef0e:	bfb8      	it	lt
 800ef10:	9204      	strlt	r2, [sp, #16]
 800ef12:	7823      	ldrb	r3, [r4, #0]
 800ef14:	2b2e      	cmp	r3, #46	; 0x2e
 800ef16:	d10c      	bne.n	800ef32 <_vfiprintf_r+0x176>
 800ef18:	7863      	ldrb	r3, [r4, #1]
 800ef1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef1c:	d135      	bne.n	800ef8a <_vfiprintf_r+0x1ce>
 800ef1e:	9b03      	ldr	r3, [sp, #12]
 800ef20:	1d1a      	adds	r2, r3, #4
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	9203      	str	r2, [sp, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	bfb8      	it	lt
 800ef2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef2e:	3402      	adds	r4, #2
 800ef30:	9305      	str	r3, [sp, #20]
 800ef32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f018 <_vfiprintf_r+0x25c>
 800ef36:	7821      	ldrb	r1, [r4, #0]
 800ef38:	2203      	movs	r2, #3
 800ef3a:	4650      	mov	r0, sl
 800ef3c:	f7f1 f9f0 	bl	8000320 <memchr>
 800ef40:	b140      	cbz	r0, 800ef54 <_vfiprintf_r+0x198>
 800ef42:	2340      	movs	r3, #64	; 0x40
 800ef44:	eba0 000a 	sub.w	r0, r0, sl
 800ef48:	fa03 f000 	lsl.w	r0, r3, r0
 800ef4c:	9b04      	ldr	r3, [sp, #16]
 800ef4e:	4303      	orrs	r3, r0
 800ef50:	3401      	adds	r4, #1
 800ef52:	9304      	str	r3, [sp, #16]
 800ef54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef58:	482c      	ldr	r0, [pc, #176]	; (800f00c <_vfiprintf_r+0x250>)
 800ef5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef5e:	2206      	movs	r2, #6
 800ef60:	f7f1 f9de 	bl	8000320 <memchr>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d03f      	beq.n	800efe8 <_vfiprintf_r+0x22c>
 800ef68:	4b29      	ldr	r3, [pc, #164]	; (800f010 <_vfiprintf_r+0x254>)
 800ef6a:	bb1b      	cbnz	r3, 800efb4 <_vfiprintf_r+0x1f8>
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	3307      	adds	r3, #7
 800ef70:	f023 0307 	bic.w	r3, r3, #7
 800ef74:	3308      	adds	r3, #8
 800ef76:	9303      	str	r3, [sp, #12]
 800ef78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef7a:	443b      	add	r3, r7
 800ef7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7e:	e767      	b.n	800ee50 <_vfiprintf_r+0x94>
 800ef80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef84:	460c      	mov	r4, r1
 800ef86:	2001      	movs	r0, #1
 800ef88:	e7a5      	b.n	800eed6 <_vfiprintf_r+0x11a>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	3401      	adds	r4, #1
 800ef8e:	9305      	str	r3, [sp, #20]
 800ef90:	4619      	mov	r1, r3
 800ef92:	f04f 0c0a 	mov.w	ip, #10
 800ef96:	4620      	mov	r0, r4
 800ef98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef9c:	3a30      	subs	r2, #48	; 0x30
 800ef9e:	2a09      	cmp	r2, #9
 800efa0:	d903      	bls.n	800efaa <_vfiprintf_r+0x1ee>
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d0c5      	beq.n	800ef32 <_vfiprintf_r+0x176>
 800efa6:	9105      	str	r1, [sp, #20]
 800efa8:	e7c3      	b.n	800ef32 <_vfiprintf_r+0x176>
 800efaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800efae:	4604      	mov	r4, r0
 800efb0:	2301      	movs	r3, #1
 800efb2:	e7f0      	b.n	800ef96 <_vfiprintf_r+0x1da>
 800efb4:	ab03      	add	r3, sp, #12
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	462a      	mov	r2, r5
 800efba:	4b16      	ldr	r3, [pc, #88]	; (800f014 <_vfiprintf_r+0x258>)
 800efbc:	a904      	add	r1, sp, #16
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7fe f86e 	bl	800d0a0 <_printf_float>
 800efc4:	4607      	mov	r7, r0
 800efc6:	1c78      	adds	r0, r7, #1
 800efc8:	d1d6      	bne.n	800ef78 <_vfiprintf_r+0x1bc>
 800efca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efcc:	07d9      	lsls	r1, r3, #31
 800efce:	d405      	bmi.n	800efdc <_vfiprintf_r+0x220>
 800efd0:	89ab      	ldrh	r3, [r5, #12]
 800efd2:	059a      	lsls	r2, r3, #22
 800efd4:	d402      	bmi.n	800efdc <_vfiprintf_r+0x220>
 800efd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efd8:	f000 faaf 	bl	800f53a <__retarget_lock_release_recursive>
 800efdc:	89ab      	ldrh	r3, [r5, #12]
 800efde:	065b      	lsls	r3, r3, #25
 800efe0:	f53f af12 	bmi.w	800ee08 <_vfiprintf_r+0x4c>
 800efe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efe6:	e711      	b.n	800ee0c <_vfiprintf_r+0x50>
 800efe8:	ab03      	add	r3, sp, #12
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	462a      	mov	r2, r5
 800efee:	4b09      	ldr	r3, [pc, #36]	; (800f014 <_vfiprintf_r+0x258>)
 800eff0:	a904      	add	r1, sp, #16
 800eff2:	4630      	mov	r0, r6
 800eff4:	f7fe fae0 	bl	800d5b8 <_printf_i>
 800eff8:	e7e4      	b.n	800efc4 <_vfiprintf_r+0x208>
 800effa:	bf00      	nop
 800effc:	0800fbe4 	.word	0x0800fbe4
 800f000:	0800fc04 	.word	0x0800fc04
 800f004:	0800fbc4 	.word	0x0800fbc4
 800f008:	0800fab2 	.word	0x0800fab2
 800f00c:	0800fabc 	.word	0x0800fabc
 800f010:	0800d0a1 	.word	0x0800d0a1
 800f014:	0800ed97 	.word	0x0800ed97
 800f018:	0800fab8 	.word	0x0800fab8

0800f01c <__swbuf_r>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	460e      	mov	r6, r1
 800f020:	4614      	mov	r4, r2
 800f022:	4605      	mov	r5, r0
 800f024:	b118      	cbz	r0, 800f02e <__swbuf_r+0x12>
 800f026:	6983      	ldr	r3, [r0, #24]
 800f028:	b90b      	cbnz	r3, 800f02e <__swbuf_r+0x12>
 800f02a:	f000 f9e7 	bl	800f3fc <__sinit>
 800f02e:	4b21      	ldr	r3, [pc, #132]	; (800f0b4 <__swbuf_r+0x98>)
 800f030:	429c      	cmp	r4, r3
 800f032:	d12b      	bne.n	800f08c <__swbuf_r+0x70>
 800f034:	686c      	ldr	r4, [r5, #4]
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	071a      	lsls	r2, r3, #28
 800f03e:	d52f      	bpl.n	800f0a0 <__swbuf_r+0x84>
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	b36b      	cbz	r3, 800f0a0 <__swbuf_r+0x84>
 800f044:	6923      	ldr	r3, [r4, #16]
 800f046:	6820      	ldr	r0, [r4, #0]
 800f048:	1ac0      	subs	r0, r0, r3
 800f04a:	6963      	ldr	r3, [r4, #20]
 800f04c:	b2f6      	uxtb	r6, r6
 800f04e:	4283      	cmp	r3, r0
 800f050:	4637      	mov	r7, r6
 800f052:	dc04      	bgt.n	800f05e <__swbuf_r+0x42>
 800f054:	4621      	mov	r1, r4
 800f056:	4628      	mov	r0, r5
 800f058:	f000 f93c 	bl	800f2d4 <_fflush_r>
 800f05c:	bb30      	cbnz	r0, 800f0ac <__swbuf_r+0x90>
 800f05e:	68a3      	ldr	r3, [r4, #8]
 800f060:	3b01      	subs	r3, #1
 800f062:	60a3      	str	r3, [r4, #8]
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	6022      	str	r2, [r4, #0]
 800f06a:	701e      	strb	r6, [r3, #0]
 800f06c:	6963      	ldr	r3, [r4, #20]
 800f06e:	3001      	adds	r0, #1
 800f070:	4283      	cmp	r3, r0
 800f072:	d004      	beq.n	800f07e <__swbuf_r+0x62>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	07db      	lsls	r3, r3, #31
 800f078:	d506      	bpl.n	800f088 <__swbuf_r+0x6c>
 800f07a:	2e0a      	cmp	r6, #10
 800f07c:	d104      	bne.n	800f088 <__swbuf_r+0x6c>
 800f07e:	4621      	mov	r1, r4
 800f080:	4628      	mov	r0, r5
 800f082:	f000 f927 	bl	800f2d4 <_fflush_r>
 800f086:	b988      	cbnz	r0, 800f0ac <__swbuf_r+0x90>
 800f088:	4638      	mov	r0, r7
 800f08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f08c:	4b0a      	ldr	r3, [pc, #40]	; (800f0b8 <__swbuf_r+0x9c>)
 800f08e:	429c      	cmp	r4, r3
 800f090:	d101      	bne.n	800f096 <__swbuf_r+0x7a>
 800f092:	68ac      	ldr	r4, [r5, #8]
 800f094:	e7cf      	b.n	800f036 <__swbuf_r+0x1a>
 800f096:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <__swbuf_r+0xa0>)
 800f098:	429c      	cmp	r4, r3
 800f09a:	bf08      	it	eq
 800f09c:	68ec      	ldreq	r4, [r5, #12]
 800f09e:	e7ca      	b.n	800f036 <__swbuf_r+0x1a>
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f000 f81a 	bl	800f0dc <__swsetup_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d0cb      	beq.n	800f044 <__swbuf_r+0x28>
 800f0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800f0b0:	e7ea      	b.n	800f088 <__swbuf_r+0x6c>
 800f0b2:	bf00      	nop
 800f0b4:	0800fbe4 	.word	0x0800fbe4
 800f0b8:	0800fc04 	.word	0x0800fc04
 800f0bc:	0800fbc4 	.word	0x0800fbc4

0800f0c0 <__ascii_wctomb>:
 800f0c0:	b149      	cbz	r1, 800f0d6 <__ascii_wctomb+0x16>
 800f0c2:	2aff      	cmp	r2, #255	; 0xff
 800f0c4:	bf85      	ittet	hi
 800f0c6:	238a      	movhi	r3, #138	; 0x8a
 800f0c8:	6003      	strhi	r3, [r0, #0]
 800f0ca:	700a      	strbls	r2, [r1, #0]
 800f0cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f0d0:	bf98      	it	ls
 800f0d2:	2001      	movls	r0, #1
 800f0d4:	4770      	bx	lr
 800f0d6:	4608      	mov	r0, r1
 800f0d8:	4770      	bx	lr
	...

0800f0dc <__swsetup_r>:
 800f0dc:	4b32      	ldr	r3, [pc, #200]	; (800f1a8 <__swsetup_r+0xcc>)
 800f0de:	b570      	push	{r4, r5, r6, lr}
 800f0e0:	681d      	ldr	r5, [r3, #0]
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	b125      	cbz	r5, 800f0f2 <__swsetup_r+0x16>
 800f0e8:	69ab      	ldr	r3, [r5, #24]
 800f0ea:	b913      	cbnz	r3, 800f0f2 <__swsetup_r+0x16>
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f000 f985 	bl	800f3fc <__sinit>
 800f0f2:	4b2e      	ldr	r3, [pc, #184]	; (800f1ac <__swsetup_r+0xd0>)
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	d10f      	bne.n	800f118 <__swsetup_r+0x3c>
 800f0f8:	686c      	ldr	r4, [r5, #4]
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f100:	0719      	lsls	r1, r3, #28
 800f102:	d42c      	bmi.n	800f15e <__swsetup_r+0x82>
 800f104:	06dd      	lsls	r5, r3, #27
 800f106:	d411      	bmi.n	800f12c <__swsetup_r+0x50>
 800f108:	2309      	movs	r3, #9
 800f10a:	6033      	str	r3, [r6, #0]
 800f10c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f110:	81a3      	strh	r3, [r4, #12]
 800f112:	f04f 30ff 	mov.w	r0, #4294967295
 800f116:	e03e      	b.n	800f196 <__swsetup_r+0xba>
 800f118:	4b25      	ldr	r3, [pc, #148]	; (800f1b0 <__swsetup_r+0xd4>)
 800f11a:	429c      	cmp	r4, r3
 800f11c:	d101      	bne.n	800f122 <__swsetup_r+0x46>
 800f11e:	68ac      	ldr	r4, [r5, #8]
 800f120:	e7eb      	b.n	800f0fa <__swsetup_r+0x1e>
 800f122:	4b24      	ldr	r3, [pc, #144]	; (800f1b4 <__swsetup_r+0xd8>)
 800f124:	429c      	cmp	r4, r3
 800f126:	bf08      	it	eq
 800f128:	68ec      	ldreq	r4, [r5, #12]
 800f12a:	e7e6      	b.n	800f0fa <__swsetup_r+0x1e>
 800f12c:	0758      	lsls	r0, r3, #29
 800f12e:	d512      	bpl.n	800f156 <__swsetup_r+0x7a>
 800f130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f132:	b141      	cbz	r1, 800f146 <__swsetup_r+0x6a>
 800f134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f138:	4299      	cmp	r1, r3
 800f13a:	d002      	beq.n	800f142 <__swsetup_r+0x66>
 800f13c:	4630      	mov	r0, r6
 800f13e:	f7ff fd0b 	bl	800eb58 <_free_r>
 800f142:	2300      	movs	r3, #0
 800f144:	6363      	str	r3, [r4, #52]	; 0x34
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f14c:	81a3      	strh	r3, [r4, #12]
 800f14e:	2300      	movs	r3, #0
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	f043 0308 	orr.w	r3, r3, #8
 800f15c:	81a3      	strh	r3, [r4, #12]
 800f15e:	6923      	ldr	r3, [r4, #16]
 800f160:	b94b      	cbnz	r3, 800f176 <__swsetup_r+0x9a>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f16c:	d003      	beq.n	800f176 <__swsetup_r+0x9a>
 800f16e:	4621      	mov	r1, r4
 800f170:	4630      	mov	r0, r6
 800f172:	f000 fa07 	bl	800f584 <__smakebuf_r>
 800f176:	89a0      	ldrh	r0, [r4, #12]
 800f178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f17c:	f010 0301 	ands.w	r3, r0, #1
 800f180:	d00a      	beq.n	800f198 <__swsetup_r+0xbc>
 800f182:	2300      	movs	r3, #0
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	6963      	ldr	r3, [r4, #20]
 800f188:	425b      	negs	r3, r3
 800f18a:	61a3      	str	r3, [r4, #24]
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	b943      	cbnz	r3, 800f1a2 <__swsetup_r+0xc6>
 800f190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f194:	d1ba      	bne.n	800f10c <__swsetup_r+0x30>
 800f196:	bd70      	pop	{r4, r5, r6, pc}
 800f198:	0781      	lsls	r1, r0, #30
 800f19a:	bf58      	it	pl
 800f19c:	6963      	ldrpl	r3, [r4, #20]
 800f19e:	60a3      	str	r3, [r4, #8]
 800f1a0:	e7f4      	b.n	800f18c <__swsetup_r+0xb0>
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	e7f7      	b.n	800f196 <__swsetup_r+0xba>
 800f1a6:	bf00      	nop
 800f1a8:	24000018 	.word	0x24000018
 800f1ac:	0800fbe4 	.word	0x0800fbe4
 800f1b0:	0800fc04 	.word	0x0800fc04
 800f1b4:	0800fbc4 	.word	0x0800fbc4

0800f1b8 <abort>:
 800f1b8:	b508      	push	{r3, lr}
 800f1ba:	2006      	movs	r0, #6
 800f1bc:	f000 fa4a 	bl	800f654 <raise>
 800f1c0:	2001      	movs	r0, #1
 800f1c2:	f7f2 ffe5 	bl	8002190 <_exit>
	...

0800f1c8 <__sflush_r>:
 800f1c8:	898a      	ldrh	r2, [r1, #12]
 800f1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	0710      	lsls	r0, r2, #28
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	d458      	bmi.n	800f288 <__sflush_r+0xc0>
 800f1d6:	684b      	ldr	r3, [r1, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dc05      	bgt.n	800f1e8 <__sflush_r+0x20>
 800f1dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	dc02      	bgt.n	800f1e8 <__sflush_r+0x20>
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ea:	2e00      	cmp	r6, #0
 800f1ec:	d0f9      	beq.n	800f1e2 <__sflush_r+0x1a>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1f4:	682f      	ldr	r7, [r5, #0]
 800f1f6:	602b      	str	r3, [r5, #0]
 800f1f8:	d032      	beq.n	800f260 <__sflush_r+0x98>
 800f1fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	075a      	lsls	r2, r3, #29
 800f200:	d505      	bpl.n	800f20e <__sflush_r+0x46>
 800f202:	6863      	ldr	r3, [r4, #4]
 800f204:	1ac0      	subs	r0, r0, r3
 800f206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f208:	b10b      	cbz	r3, 800f20e <__sflush_r+0x46>
 800f20a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f20c:	1ac0      	subs	r0, r0, r3
 800f20e:	2300      	movs	r3, #0
 800f210:	4602      	mov	r2, r0
 800f212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f214:	6a21      	ldr	r1, [r4, #32]
 800f216:	4628      	mov	r0, r5
 800f218:	47b0      	blx	r6
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	d106      	bne.n	800f22e <__sflush_r+0x66>
 800f220:	6829      	ldr	r1, [r5, #0]
 800f222:	291d      	cmp	r1, #29
 800f224:	d82c      	bhi.n	800f280 <__sflush_r+0xb8>
 800f226:	4a2a      	ldr	r2, [pc, #168]	; (800f2d0 <__sflush_r+0x108>)
 800f228:	40ca      	lsrs	r2, r1
 800f22a:	07d6      	lsls	r6, r2, #31
 800f22c:	d528      	bpl.n	800f280 <__sflush_r+0xb8>
 800f22e:	2200      	movs	r2, #0
 800f230:	6062      	str	r2, [r4, #4]
 800f232:	04d9      	lsls	r1, r3, #19
 800f234:	6922      	ldr	r2, [r4, #16]
 800f236:	6022      	str	r2, [r4, #0]
 800f238:	d504      	bpl.n	800f244 <__sflush_r+0x7c>
 800f23a:	1c42      	adds	r2, r0, #1
 800f23c:	d101      	bne.n	800f242 <__sflush_r+0x7a>
 800f23e:	682b      	ldr	r3, [r5, #0]
 800f240:	b903      	cbnz	r3, 800f244 <__sflush_r+0x7c>
 800f242:	6560      	str	r0, [r4, #84]	; 0x54
 800f244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f246:	602f      	str	r7, [r5, #0]
 800f248:	2900      	cmp	r1, #0
 800f24a:	d0ca      	beq.n	800f1e2 <__sflush_r+0x1a>
 800f24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f250:	4299      	cmp	r1, r3
 800f252:	d002      	beq.n	800f25a <__sflush_r+0x92>
 800f254:	4628      	mov	r0, r5
 800f256:	f7ff fc7f 	bl	800eb58 <_free_r>
 800f25a:	2000      	movs	r0, #0
 800f25c:	6360      	str	r0, [r4, #52]	; 0x34
 800f25e:	e7c1      	b.n	800f1e4 <__sflush_r+0x1c>
 800f260:	6a21      	ldr	r1, [r4, #32]
 800f262:	2301      	movs	r3, #1
 800f264:	4628      	mov	r0, r5
 800f266:	47b0      	blx	r6
 800f268:	1c41      	adds	r1, r0, #1
 800f26a:	d1c7      	bne.n	800f1fc <__sflush_r+0x34>
 800f26c:	682b      	ldr	r3, [r5, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0c4      	beq.n	800f1fc <__sflush_r+0x34>
 800f272:	2b1d      	cmp	r3, #29
 800f274:	d001      	beq.n	800f27a <__sflush_r+0xb2>
 800f276:	2b16      	cmp	r3, #22
 800f278:	d101      	bne.n	800f27e <__sflush_r+0xb6>
 800f27a:	602f      	str	r7, [r5, #0]
 800f27c:	e7b1      	b.n	800f1e2 <__sflush_r+0x1a>
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f284:	81a3      	strh	r3, [r4, #12]
 800f286:	e7ad      	b.n	800f1e4 <__sflush_r+0x1c>
 800f288:	690f      	ldr	r7, [r1, #16]
 800f28a:	2f00      	cmp	r7, #0
 800f28c:	d0a9      	beq.n	800f1e2 <__sflush_r+0x1a>
 800f28e:	0793      	lsls	r3, r2, #30
 800f290:	680e      	ldr	r6, [r1, #0]
 800f292:	bf08      	it	eq
 800f294:	694b      	ldreq	r3, [r1, #20]
 800f296:	600f      	str	r7, [r1, #0]
 800f298:	bf18      	it	ne
 800f29a:	2300      	movne	r3, #0
 800f29c:	eba6 0807 	sub.w	r8, r6, r7
 800f2a0:	608b      	str	r3, [r1, #8]
 800f2a2:	f1b8 0f00 	cmp.w	r8, #0
 800f2a6:	dd9c      	ble.n	800f1e2 <__sflush_r+0x1a>
 800f2a8:	6a21      	ldr	r1, [r4, #32]
 800f2aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2ac:	4643      	mov	r3, r8
 800f2ae:	463a      	mov	r2, r7
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	47b0      	blx	r6
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	dc06      	bgt.n	800f2c6 <__sflush_r+0xfe>
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c4:	e78e      	b.n	800f1e4 <__sflush_r+0x1c>
 800f2c6:	4407      	add	r7, r0
 800f2c8:	eba8 0800 	sub.w	r8, r8, r0
 800f2cc:	e7e9      	b.n	800f2a2 <__sflush_r+0xda>
 800f2ce:	bf00      	nop
 800f2d0:	20400001 	.word	0x20400001

0800f2d4 <_fflush_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	690b      	ldr	r3, [r1, #16]
 800f2d8:	4605      	mov	r5, r0
 800f2da:	460c      	mov	r4, r1
 800f2dc:	b913      	cbnz	r3, 800f2e4 <_fflush_r+0x10>
 800f2de:	2500      	movs	r5, #0
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	b118      	cbz	r0, 800f2ee <_fflush_r+0x1a>
 800f2e6:	6983      	ldr	r3, [r0, #24]
 800f2e8:	b90b      	cbnz	r3, 800f2ee <_fflush_r+0x1a>
 800f2ea:	f000 f887 	bl	800f3fc <__sinit>
 800f2ee:	4b14      	ldr	r3, [pc, #80]	; (800f340 <_fflush_r+0x6c>)
 800f2f0:	429c      	cmp	r4, r3
 800f2f2:	d11b      	bne.n	800f32c <_fflush_r+0x58>
 800f2f4:	686c      	ldr	r4, [r5, #4]
 800f2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0ef      	beq.n	800f2de <_fflush_r+0xa>
 800f2fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f300:	07d0      	lsls	r0, r2, #31
 800f302:	d404      	bmi.n	800f30e <_fflush_r+0x3a>
 800f304:	0599      	lsls	r1, r3, #22
 800f306:	d402      	bmi.n	800f30e <_fflush_r+0x3a>
 800f308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30a:	f000 f915 	bl	800f538 <__retarget_lock_acquire_recursive>
 800f30e:	4628      	mov	r0, r5
 800f310:	4621      	mov	r1, r4
 800f312:	f7ff ff59 	bl	800f1c8 <__sflush_r>
 800f316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f318:	07da      	lsls	r2, r3, #31
 800f31a:	4605      	mov	r5, r0
 800f31c:	d4e0      	bmi.n	800f2e0 <_fflush_r+0xc>
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	059b      	lsls	r3, r3, #22
 800f322:	d4dd      	bmi.n	800f2e0 <_fflush_r+0xc>
 800f324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f326:	f000 f908 	bl	800f53a <__retarget_lock_release_recursive>
 800f32a:	e7d9      	b.n	800f2e0 <_fflush_r+0xc>
 800f32c:	4b05      	ldr	r3, [pc, #20]	; (800f344 <_fflush_r+0x70>)
 800f32e:	429c      	cmp	r4, r3
 800f330:	d101      	bne.n	800f336 <_fflush_r+0x62>
 800f332:	68ac      	ldr	r4, [r5, #8]
 800f334:	e7df      	b.n	800f2f6 <_fflush_r+0x22>
 800f336:	4b04      	ldr	r3, [pc, #16]	; (800f348 <_fflush_r+0x74>)
 800f338:	429c      	cmp	r4, r3
 800f33a:	bf08      	it	eq
 800f33c:	68ec      	ldreq	r4, [r5, #12]
 800f33e:	e7da      	b.n	800f2f6 <_fflush_r+0x22>
 800f340:	0800fbe4 	.word	0x0800fbe4
 800f344:	0800fc04 	.word	0x0800fc04
 800f348:	0800fbc4 	.word	0x0800fbc4

0800f34c <std>:
 800f34c:	2300      	movs	r3, #0
 800f34e:	b510      	push	{r4, lr}
 800f350:	4604      	mov	r4, r0
 800f352:	e9c0 3300 	strd	r3, r3, [r0]
 800f356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f35a:	6083      	str	r3, [r0, #8]
 800f35c:	8181      	strh	r1, [r0, #12]
 800f35e:	6643      	str	r3, [r0, #100]	; 0x64
 800f360:	81c2      	strh	r2, [r0, #14]
 800f362:	6183      	str	r3, [r0, #24]
 800f364:	4619      	mov	r1, r3
 800f366:	2208      	movs	r2, #8
 800f368:	305c      	adds	r0, #92	; 0x5c
 800f36a:	f7fd fdff 	bl	800cf6c <memset>
 800f36e:	4b05      	ldr	r3, [pc, #20]	; (800f384 <std+0x38>)
 800f370:	6263      	str	r3, [r4, #36]	; 0x24
 800f372:	4b05      	ldr	r3, [pc, #20]	; (800f388 <std+0x3c>)
 800f374:	62a3      	str	r3, [r4, #40]	; 0x28
 800f376:	4b05      	ldr	r3, [pc, #20]	; (800f38c <std+0x40>)
 800f378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <std+0x44>)
 800f37c:	6224      	str	r4, [r4, #32]
 800f37e:	6323      	str	r3, [r4, #48]	; 0x30
 800f380:	bd10      	pop	{r4, pc}
 800f382:	bf00      	nop
 800f384:	0800f68d 	.word	0x0800f68d
 800f388:	0800f6af 	.word	0x0800f6af
 800f38c:	0800f6e7 	.word	0x0800f6e7
 800f390:	0800f70b 	.word	0x0800f70b

0800f394 <_cleanup_r>:
 800f394:	4901      	ldr	r1, [pc, #4]	; (800f39c <_cleanup_r+0x8>)
 800f396:	f000 b8af 	b.w	800f4f8 <_fwalk_reent>
 800f39a:	bf00      	nop
 800f39c:	0800f2d5 	.word	0x0800f2d5

0800f3a0 <__sfmoreglue>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	1e4a      	subs	r2, r1, #1
 800f3a4:	2568      	movs	r5, #104	; 0x68
 800f3a6:	4355      	muls	r5, r2
 800f3a8:	460e      	mov	r6, r1
 800f3aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3ae:	f7ff fc23 	bl	800ebf8 <_malloc_r>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	b140      	cbz	r0, 800f3c8 <__sfmoreglue+0x28>
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	e9c0 1600 	strd	r1, r6, [r0]
 800f3bc:	300c      	adds	r0, #12
 800f3be:	60a0      	str	r0, [r4, #8]
 800f3c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3c4:	f7fd fdd2 	bl	800cf6c <memset>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}

0800f3cc <__sfp_lock_acquire>:
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__sfp_lock_acquire+0x8>)
 800f3ce:	f000 b8b3 	b.w	800f538 <__retarget_lock_acquire_recursive>
 800f3d2:	bf00      	nop
 800f3d4:	24000d78 	.word	0x24000d78

0800f3d8 <__sfp_lock_release>:
 800f3d8:	4801      	ldr	r0, [pc, #4]	; (800f3e0 <__sfp_lock_release+0x8>)
 800f3da:	f000 b8ae 	b.w	800f53a <__retarget_lock_release_recursive>
 800f3de:	bf00      	nop
 800f3e0:	24000d78 	.word	0x24000d78

0800f3e4 <__sinit_lock_acquire>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__sinit_lock_acquire+0x8>)
 800f3e6:	f000 b8a7 	b.w	800f538 <__retarget_lock_acquire_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	24000d73 	.word	0x24000d73

0800f3f0 <__sinit_lock_release>:
 800f3f0:	4801      	ldr	r0, [pc, #4]	; (800f3f8 <__sinit_lock_release+0x8>)
 800f3f2:	f000 b8a2 	b.w	800f53a <__retarget_lock_release_recursive>
 800f3f6:	bf00      	nop
 800f3f8:	24000d73 	.word	0x24000d73

0800f3fc <__sinit>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	4604      	mov	r4, r0
 800f400:	f7ff fff0 	bl	800f3e4 <__sinit_lock_acquire>
 800f404:	69a3      	ldr	r3, [r4, #24]
 800f406:	b11b      	cbz	r3, 800f410 <__sinit+0x14>
 800f408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f40c:	f7ff bff0 	b.w	800f3f0 <__sinit_lock_release>
 800f410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f414:	6523      	str	r3, [r4, #80]	; 0x50
 800f416:	4b13      	ldr	r3, [pc, #76]	; (800f464 <__sinit+0x68>)
 800f418:	4a13      	ldr	r2, [pc, #76]	; (800f468 <__sinit+0x6c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f41e:	42a3      	cmp	r3, r4
 800f420:	bf04      	itt	eq
 800f422:	2301      	moveq	r3, #1
 800f424:	61a3      	streq	r3, [r4, #24]
 800f426:	4620      	mov	r0, r4
 800f428:	f000 f820 	bl	800f46c <__sfp>
 800f42c:	6060      	str	r0, [r4, #4]
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 f81c 	bl	800f46c <__sfp>
 800f434:	60a0      	str	r0, [r4, #8]
 800f436:	4620      	mov	r0, r4
 800f438:	f000 f818 	bl	800f46c <__sfp>
 800f43c:	2200      	movs	r2, #0
 800f43e:	60e0      	str	r0, [r4, #12]
 800f440:	2104      	movs	r1, #4
 800f442:	6860      	ldr	r0, [r4, #4]
 800f444:	f7ff ff82 	bl	800f34c <std>
 800f448:	68a0      	ldr	r0, [r4, #8]
 800f44a:	2201      	movs	r2, #1
 800f44c:	2109      	movs	r1, #9
 800f44e:	f7ff ff7d 	bl	800f34c <std>
 800f452:	68e0      	ldr	r0, [r4, #12]
 800f454:	2202      	movs	r2, #2
 800f456:	2112      	movs	r1, #18
 800f458:	f7ff ff78 	bl	800f34c <std>
 800f45c:	2301      	movs	r3, #1
 800f45e:	61a3      	str	r3, [r4, #24]
 800f460:	e7d2      	b.n	800f408 <__sinit+0xc>
 800f462:	bf00      	nop
 800f464:	0800f840 	.word	0x0800f840
 800f468:	0800f395 	.word	0x0800f395

0800f46c <__sfp>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	4607      	mov	r7, r0
 800f470:	f7ff ffac 	bl	800f3cc <__sfp_lock_acquire>
 800f474:	4b1e      	ldr	r3, [pc, #120]	; (800f4f0 <__sfp+0x84>)
 800f476:	681e      	ldr	r6, [r3, #0]
 800f478:	69b3      	ldr	r3, [r6, #24]
 800f47a:	b913      	cbnz	r3, 800f482 <__sfp+0x16>
 800f47c:	4630      	mov	r0, r6
 800f47e:	f7ff ffbd 	bl	800f3fc <__sinit>
 800f482:	3648      	adds	r6, #72	; 0x48
 800f484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f488:	3b01      	subs	r3, #1
 800f48a:	d503      	bpl.n	800f494 <__sfp+0x28>
 800f48c:	6833      	ldr	r3, [r6, #0]
 800f48e:	b30b      	cbz	r3, 800f4d4 <__sfp+0x68>
 800f490:	6836      	ldr	r6, [r6, #0]
 800f492:	e7f7      	b.n	800f484 <__sfp+0x18>
 800f494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f498:	b9d5      	cbnz	r5, 800f4d0 <__sfp+0x64>
 800f49a:	4b16      	ldr	r3, [pc, #88]	; (800f4f4 <__sfp+0x88>)
 800f49c:	60e3      	str	r3, [r4, #12]
 800f49e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f4a2:	6665      	str	r5, [r4, #100]	; 0x64
 800f4a4:	f000 f847 	bl	800f536 <__retarget_lock_init_recursive>
 800f4a8:	f7ff ff96 	bl	800f3d8 <__sfp_lock_release>
 800f4ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4b4:	6025      	str	r5, [r4, #0]
 800f4b6:	61a5      	str	r5, [r4, #24]
 800f4b8:	2208      	movs	r2, #8
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4c0:	f7fd fd54 	bl	800cf6c <memset>
 800f4c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d0:	3468      	adds	r4, #104	; 0x68
 800f4d2:	e7d9      	b.n	800f488 <__sfp+0x1c>
 800f4d4:	2104      	movs	r1, #4
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	f7ff ff62 	bl	800f3a0 <__sfmoreglue>
 800f4dc:	4604      	mov	r4, r0
 800f4de:	6030      	str	r0, [r6, #0]
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d1d5      	bne.n	800f490 <__sfp+0x24>
 800f4e4:	f7ff ff78 	bl	800f3d8 <__sfp_lock_release>
 800f4e8:	230c      	movs	r3, #12
 800f4ea:	603b      	str	r3, [r7, #0]
 800f4ec:	e7ee      	b.n	800f4cc <__sfp+0x60>
 800f4ee:	bf00      	nop
 800f4f0:	0800f840 	.word	0x0800f840
 800f4f4:	ffff0001 	.word	0xffff0001

0800f4f8 <_fwalk_reent>:
 800f4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	4688      	mov	r8, r1
 800f500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f504:	2700      	movs	r7, #0
 800f506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f50a:	f1b9 0901 	subs.w	r9, r9, #1
 800f50e:	d505      	bpl.n	800f51c <_fwalk_reent+0x24>
 800f510:	6824      	ldr	r4, [r4, #0]
 800f512:	2c00      	cmp	r4, #0
 800f514:	d1f7      	bne.n	800f506 <_fwalk_reent+0xe>
 800f516:	4638      	mov	r0, r7
 800f518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f51c:	89ab      	ldrh	r3, [r5, #12]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d907      	bls.n	800f532 <_fwalk_reent+0x3a>
 800f522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f526:	3301      	adds	r3, #1
 800f528:	d003      	beq.n	800f532 <_fwalk_reent+0x3a>
 800f52a:	4629      	mov	r1, r5
 800f52c:	4630      	mov	r0, r6
 800f52e:	47c0      	blx	r8
 800f530:	4307      	orrs	r7, r0
 800f532:	3568      	adds	r5, #104	; 0x68
 800f534:	e7e9      	b.n	800f50a <_fwalk_reent+0x12>

0800f536 <__retarget_lock_init_recursive>:
 800f536:	4770      	bx	lr

0800f538 <__retarget_lock_acquire_recursive>:
 800f538:	4770      	bx	lr

0800f53a <__retarget_lock_release_recursive>:
 800f53a:	4770      	bx	lr

0800f53c <__swhatbuf_r>:
 800f53c:	b570      	push	{r4, r5, r6, lr}
 800f53e:	460e      	mov	r6, r1
 800f540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f544:	2900      	cmp	r1, #0
 800f546:	b096      	sub	sp, #88	; 0x58
 800f548:	4614      	mov	r4, r2
 800f54a:	461d      	mov	r5, r3
 800f54c:	da07      	bge.n	800f55e <__swhatbuf_r+0x22>
 800f54e:	2300      	movs	r3, #0
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	89b3      	ldrh	r3, [r6, #12]
 800f554:	061a      	lsls	r2, r3, #24
 800f556:	d410      	bmi.n	800f57a <__swhatbuf_r+0x3e>
 800f558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f55c:	e00e      	b.n	800f57c <__swhatbuf_r+0x40>
 800f55e:	466a      	mov	r2, sp
 800f560:	f000 f8fa 	bl	800f758 <_fstat_r>
 800f564:	2800      	cmp	r0, #0
 800f566:	dbf2      	blt.n	800f54e <__swhatbuf_r+0x12>
 800f568:	9a01      	ldr	r2, [sp, #4]
 800f56a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f56e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f572:	425a      	negs	r2, r3
 800f574:	415a      	adcs	r2, r3
 800f576:	602a      	str	r2, [r5, #0]
 800f578:	e7ee      	b.n	800f558 <__swhatbuf_r+0x1c>
 800f57a:	2340      	movs	r3, #64	; 0x40
 800f57c:	2000      	movs	r0, #0
 800f57e:	6023      	str	r3, [r4, #0]
 800f580:	b016      	add	sp, #88	; 0x58
 800f582:	bd70      	pop	{r4, r5, r6, pc}

0800f584 <__smakebuf_r>:
 800f584:	898b      	ldrh	r3, [r1, #12]
 800f586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f588:	079d      	lsls	r5, r3, #30
 800f58a:	4606      	mov	r6, r0
 800f58c:	460c      	mov	r4, r1
 800f58e:	d507      	bpl.n	800f5a0 <__smakebuf_r+0x1c>
 800f590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	6123      	str	r3, [r4, #16]
 800f598:	2301      	movs	r3, #1
 800f59a:	6163      	str	r3, [r4, #20]
 800f59c:	b002      	add	sp, #8
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	ab01      	add	r3, sp, #4
 800f5a2:	466a      	mov	r2, sp
 800f5a4:	f7ff ffca 	bl	800f53c <__swhatbuf_r>
 800f5a8:	9900      	ldr	r1, [sp, #0]
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7ff fb23 	bl	800ebf8 <_malloc_r>
 800f5b2:	b948      	cbnz	r0, 800f5c8 <__smakebuf_r+0x44>
 800f5b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5b8:	059a      	lsls	r2, r3, #22
 800f5ba:	d4ef      	bmi.n	800f59c <__smakebuf_r+0x18>
 800f5bc:	f023 0303 	bic.w	r3, r3, #3
 800f5c0:	f043 0302 	orr.w	r3, r3, #2
 800f5c4:	81a3      	strh	r3, [r4, #12]
 800f5c6:	e7e3      	b.n	800f590 <__smakebuf_r+0xc>
 800f5c8:	4b0d      	ldr	r3, [pc, #52]	; (800f600 <__smakebuf_r+0x7c>)
 800f5ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5cc:	89a3      	ldrh	r3, [r4, #12]
 800f5ce:	6020      	str	r0, [r4, #0]
 800f5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5d4:	81a3      	strh	r3, [r4, #12]
 800f5d6:	9b00      	ldr	r3, [sp, #0]
 800f5d8:	6163      	str	r3, [r4, #20]
 800f5da:	9b01      	ldr	r3, [sp, #4]
 800f5dc:	6120      	str	r0, [r4, #16]
 800f5de:	b15b      	cbz	r3, 800f5f8 <__smakebuf_r+0x74>
 800f5e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f000 f8c9 	bl	800f77c <_isatty_r>
 800f5ea:	b128      	cbz	r0, 800f5f8 <__smakebuf_r+0x74>
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	f023 0303 	bic.w	r3, r3, #3
 800f5f2:	f043 0301 	orr.w	r3, r3, #1
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	89a0      	ldrh	r0, [r4, #12]
 800f5fa:	4305      	orrs	r5, r0
 800f5fc:	81a5      	strh	r5, [r4, #12]
 800f5fe:	e7cd      	b.n	800f59c <__smakebuf_r+0x18>
 800f600:	0800f395 	.word	0x0800f395

0800f604 <_raise_r>:
 800f604:	291f      	cmp	r1, #31
 800f606:	b538      	push	{r3, r4, r5, lr}
 800f608:	4604      	mov	r4, r0
 800f60a:	460d      	mov	r5, r1
 800f60c:	d904      	bls.n	800f618 <_raise_r+0x14>
 800f60e:	2316      	movs	r3, #22
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	f04f 30ff 	mov.w	r0, #4294967295
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f61a:	b112      	cbz	r2, 800f622 <_raise_r+0x1e>
 800f61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f620:	b94b      	cbnz	r3, 800f636 <_raise_r+0x32>
 800f622:	4620      	mov	r0, r4
 800f624:	f000 f830 	bl	800f688 <_getpid_r>
 800f628:	462a      	mov	r2, r5
 800f62a:	4601      	mov	r1, r0
 800f62c:	4620      	mov	r0, r4
 800f62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f632:	f000 b817 	b.w	800f664 <_kill_r>
 800f636:	2b01      	cmp	r3, #1
 800f638:	d00a      	beq.n	800f650 <_raise_r+0x4c>
 800f63a:	1c59      	adds	r1, r3, #1
 800f63c:	d103      	bne.n	800f646 <_raise_r+0x42>
 800f63e:	2316      	movs	r3, #22
 800f640:	6003      	str	r3, [r0, #0]
 800f642:	2001      	movs	r0, #1
 800f644:	e7e7      	b.n	800f616 <_raise_r+0x12>
 800f646:	2400      	movs	r4, #0
 800f648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f64c:	4628      	mov	r0, r5
 800f64e:	4798      	blx	r3
 800f650:	2000      	movs	r0, #0
 800f652:	e7e0      	b.n	800f616 <_raise_r+0x12>

0800f654 <raise>:
 800f654:	4b02      	ldr	r3, [pc, #8]	; (800f660 <raise+0xc>)
 800f656:	4601      	mov	r1, r0
 800f658:	6818      	ldr	r0, [r3, #0]
 800f65a:	f7ff bfd3 	b.w	800f604 <_raise_r>
 800f65e:	bf00      	nop
 800f660:	24000018 	.word	0x24000018

0800f664 <_kill_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	4d07      	ldr	r5, [pc, #28]	; (800f684 <_kill_r+0x20>)
 800f668:	2300      	movs	r3, #0
 800f66a:	4604      	mov	r4, r0
 800f66c:	4608      	mov	r0, r1
 800f66e:	4611      	mov	r1, r2
 800f670:	602b      	str	r3, [r5, #0]
 800f672:	f7f2 fd7d 	bl	8002170 <_kill>
 800f676:	1c43      	adds	r3, r0, #1
 800f678:	d102      	bne.n	800f680 <_kill_r+0x1c>
 800f67a:	682b      	ldr	r3, [r5, #0]
 800f67c:	b103      	cbz	r3, 800f680 <_kill_r+0x1c>
 800f67e:	6023      	str	r3, [r4, #0]
 800f680:	bd38      	pop	{r3, r4, r5, pc}
 800f682:	bf00      	nop
 800f684:	24000d6c 	.word	0x24000d6c

0800f688 <_getpid_r>:
 800f688:	f7f2 bd6a 	b.w	8002160 <_getpid>

0800f68c <__sread>:
 800f68c:	b510      	push	{r4, lr}
 800f68e:	460c      	mov	r4, r1
 800f690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f694:	f000 f894 	bl	800f7c0 <_read_r>
 800f698:	2800      	cmp	r0, #0
 800f69a:	bfab      	itete	ge
 800f69c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f69e:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a0:	181b      	addge	r3, r3, r0
 800f6a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6a6:	bfac      	ite	ge
 800f6a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6aa:	81a3      	strhlt	r3, [r4, #12]
 800f6ac:	bd10      	pop	{r4, pc}

0800f6ae <__swrite>:
 800f6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b2:	461f      	mov	r7, r3
 800f6b4:	898b      	ldrh	r3, [r1, #12]
 800f6b6:	05db      	lsls	r3, r3, #23
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	4616      	mov	r6, r2
 800f6be:	d505      	bpl.n	800f6cc <__swrite+0x1e>
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f000 f868 	bl	800f79c <_lseek_r>
 800f6cc:	89a3      	ldrh	r3, [r4, #12]
 800f6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6d6:	81a3      	strh	r3, [r4, #12]
 800f6d8:	4632      	mov	r2, r6
 800f6da:	463b      	mov	r3, r7
 800f6dc:	4628      	mov	r0, r5
 800f6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e2:	f000 b817 	b.w	800f714 <_write_r>

0800f6e6 <__sseek>:
 800f6e6:	b510      	push	{r4, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ee:	f000 f855 	bl	800f79c <_lseek_r>
 800f6f2:	1c43      	adds	r3, r0, #1
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	bf15      	itete	ne
 800f6f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f702:	81a3      	strheq	r3, [r4, #12]
 800f704:	bf18      	it	ne
 800f706:	81a3      	strhne	r3, [r4, #12]
 800f708:	bd10      	pop	{r4, pc}

0800f70a <__sclose>:
 800f70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70e:	f000 b813 	b.w	800f738 <_close_r>
	...

0800f714 <_write_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d07      	ldr	r5, [pc, #28]	; (800f734 <_write_r+0x20>)
 800f718:	4604      	mov	r4, r0
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	2200      	movs	r2, #0
 800f720:	602a      	str	r2, [r5, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	f7f2 fd5b 	bl	80021de <_write>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_write_r+0x1e>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_write_r+0x1e>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	24000d6c 	.word	0x24000d6c

0800f738 <_close_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d06      	ldr	r5, [pc, #24]	; (800f754 <_close_r+0x1c>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4604      	mov	r4, r0
 800f740:	4608      	mov	r0, r1
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	f7f2 fd67 	bl	8002216 <_close>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_close_r+0x1a>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_close_r+0x1a>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	24000d6c 	.word	0x24000d6c

0800f758 <_fstat_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d07      	ldr	r5, [pc, #28]	; (800f778 <_fstat_r+0x20>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	4611      	mov	r1, r2
 800f764:	602b      	str	r3, [r5, #0]
 800f766:	f7f2 fd62 	bl	800222e <_fstat>
 800f76a:	1c43      	adds	r3, r0, #1
 800f76c:	d102      	bne.n	800f774 <_fstat_r+0x1c>
 800f76e:	682b      	ldr	r3, [r5, #0]
 800f770:	b103      	cbz	r3, 800f774 <_fstat_r+0x1c>
 800f772:	6023      	str	r3, [r4, #0]
 800f774:	bd38      	pop	{r3, r4, r5, pc}
 800f776:	bf00      	nop
 800f778:	24000d6c 	.word	0x24000d6c

0800f77c <_isatty_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4d06      	ldr	r5, [pc, #24]	; (800f798 <_isatty_r+0x1c>)
 800f780:	2300      	movs	r3, #0
 800f782:	4604      	mov	r4, r0
 800f784:	4608      	mov	r0, r1
 800f786:	602b      	str	r3, [r5, #0]
 800f788:	f7f2 fd61 	bl	800224e <_isatty>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_isatty_r+0x1a>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_isatty_r+0x1a>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	24000d6c 	.word	0x24000d6c

0800f79c <_lseek_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d07      	ldr	r5, [pc, #28]	; (800f7bc <_lseek_r+0x20>)
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	602a      	str	r2, [r5, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f7f2 fd5a 	bl	8002264 <_lseek>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d102      	bne.n	800f7ba <_lseek_r+0x1e>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	b103      	cbz	r3, 800f7ba <_lseek_r+0x1e>
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	24000d6c 	.word	0x24000d6c

0800f7c0 <_read_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d07      	ldr	r5, [pc, #28]	; (800f7e0 <_read_r+0x20>)
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	4608      	mov	r0, r1
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	602a      	str	r2, [r5, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f7f2 fce8 	bl	80021a4 <_read>
 800f7d4:	1c43      	adds	r3, r0, #1
 800f7d6:	d102      	bne.n	800f7de <_read_r+0x1e>
 800f7d8:	682b      	ldr	r3, [r5, #0]
 800f7da:	b103      	cbz	r3, 800f7de <_read_r+0x1e>
 800f7dc:	6023      	str	r3, [r4, #0]
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	24000d6c 	.word	0x24000d6c

0800f7e4 <_init>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	bf00      	nop
 800f7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ea:	bc08      	pop	{r3}
 800f7ec:	469e      	mov	lr, r3
 800f7ee:	4770      	bx	lr

0800f7f0 <_fini>:
 800f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f2:	bf00      	nop
 800f7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7f6:	bc08      	pop	{r3}
 800f7f8:	469e      	mov	lr, r3
 800f7fa:	4770      	bx	lr

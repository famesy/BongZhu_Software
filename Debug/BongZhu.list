
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001003c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08010310  08010310  00020310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010910  08010910  00020910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010918  08010918  00020918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801091c  0801091c  0002091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  08010920  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a7c  240001f0  08010b10  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c6c  08010b10  00030c6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000348fc  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f9c  00000000  00000000  00064b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001940  00000000  00000000  00069ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001788  00000000  00000000  0006b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389c8  00000000  00000000  0006cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000239ac  00000000  00000000  000a5548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cc61  00000000  00000000  000c8ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00235b55  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a24  00000000  00000000  00235ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f0 	.word	0x240001f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080102f4 	.word	0x080102f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f4 	.word	0x240001f4
 800030c:	080102f4 	.word	0x080102f4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f006 fc17 	bl	8006f50 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00b f912 	bl	800b958 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f006 fc06 	bl	8006f50 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00b f997 	bl	800ba84 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <KalmanFilter_Init>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_Init(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6278      	str	r0, [r7, #36]	; 0x24
 80008b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80008b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80008bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80008c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80008c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80008c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80008cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80008d0:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	61da      	str	r2, [r3, #28]
}
 8000904:	bf00      	nop
 8000906:	372c      	adds	r7, #44	; 0x2c
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,float theta_k) {
 8000910:	b480      	push	{r7}
 8000912:	b08f      	sub	sp, #60	; 0x3c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]
	float X1 = (dev->x1);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
	float X2 = (dev->x2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
	float P11 = (dev->p11);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float P12 = (dev->p12);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
	float P21 = (dev->p21);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
	float P22 = (dev->p22);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	623b      	str	r3, [r7, #32]
	float Q = (dev->Q);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	61fb      	str	r3, [r7, #28]
	float R = (dev->R);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	61bb      	str	r3, [r7, #24]
	float dt_pow2 = DT * DT;
 800094c:	4bf8      	ldr	r3, [pc, #992]	; (8000d30 <KalmanFilter_Update+0x420>)
 800094e:	617b      	str	r3, [r7, #20]
	float dt_pow3 = DT * DT * DT;
 8000950:	4bf8      	ldr	r3, [pc, #992]	; (8000d34 <KalmanFilter_Update+0x424>)
 8000952:	613b      	str	r3, [r7, #16]
	float dt_pow4 = DT * DT * DT * DT;
 8000954:	4bf8      	ldr	r3, [pc, #992]	; (8000d38 <KalmanFilter_Update+0x428>)
 8000956:	60fb      	str	r3, [r7, #12]
	dev->x1 = X1 + X2*DT - ((X1 - theta_k + X2*DT)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000958:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800095c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000960:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000968:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8000d28 <KalmanFilter_Update+0x418>
 800096c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000970:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000974:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000978:	edd7 7a00 	vldr	s15, [r7]
 800097c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000980:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000984:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800098c:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8000d28 <KalmanFilter_Update+0x418>
 8000990:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000994:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000998:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800099c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80009a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80009a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a8:	ed9f 3bdf 	vldr	d3, [pc, #892]	; 8000d28 <KalmanFilter_Update+0x418>
 80009ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009b0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80009b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80009bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c0:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 80009c4:	eec7 7a23 	vdiv.f32	s15, s14, s7
 80009c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009cc:	ee34 4b07 	vadd.f64	d4, d4, d7
 80009d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009d4:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80009d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80009dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e0:	ed9f 2bd1 	vldr	d2, [pc, #836]	; 8000d28 <KalmanFilter_Update+0x418>
 80009e4:	ee27 7b02 	vmul.f64	d7, d7, d2
 80009e8:	ee33 7b07 	vadd.f64	d7, d3, d7
 80009ec:	ed9f 3bce 	vldr	d3, [pc, #824]	; 8000d28 <KalmanFilter_Update+0x418>
 80009f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009f4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80009f8:	ee25 4b07 	vmul.f64	d4, d5, d7
 80009fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a08:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a14:	ed9f 3bc4 	vldr	d3, [pc, #784]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a1c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a2c:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000a30:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a38:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000a40:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4c:	ed9f 2bb6 	vldr	d2, [pc, #728]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a50:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000a54:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000a58:	ed9f 3bb3 	vldr	d3, [pc, #716]	; 8000d28 <KalmanFilter_Update+0x418>
 8000a5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a60:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a64:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->x2  = X2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(X1 - theta_k + X2*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000a76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a8a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000a8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000a92:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a96:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9e:	ed9f 4ba2 	vldr	d4, [pc, #648]	; 8000d28 <KalmanFilter_Update+0x418>
 8000aa2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000aa6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000aaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ab6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000aba:	edd7 7a00 	vldr	s15, [r7]
 8000abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ac6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ace:	ed9f 3b96 	vldr	d3, [pc, #600]	; 8000d28 <KalmanFilter_Update+0x418>
 8000ad2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ad6:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000ada:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000ade:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000aee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af6:	ed9f 3b8c 	vldr	d3, [pc, #560]	; 8000d28 <KalmanFilter_Update+0x418>
 8000afa:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000afe:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b02:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0e:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000b12:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b22:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000b26:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2e:	ed9f 2b7e 	vldr	d2, [pc, #504]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b32:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000b36:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000b3a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b3e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000b42:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b46:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->p11  = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000b58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8000d28 <KalmanFilter_Update+0x418>
 8000b6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b80:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000b84:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b94:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b98:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba0:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8000d28 <KalmanFilter_Update+0x418>
 8000ba4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000ba8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000bac:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8000d28 <KalmanFilter_Update+0x418>
 8000bb0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000bb4:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000bb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd0:	ed9f 4b55 	vldr	d4, [pc, #340]	; 8000d28 <KalmanFilter_Update+0x418>
 8000bd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be8:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000bec:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bfc:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c00:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c08:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c10:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c14:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c2c:	eeb1 6b47 	vneg.f64	d6, d7
 8000c30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c34:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 4b39 	vldr	d4, [pc, #228]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c44:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c48:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c58:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000c5c:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c64:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c6c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c78:	ed9f 3b2b 	vldr	d3, [pc, #172]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c80:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c84:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000d28 <KalmanFilter_Update+0x418>
 8000c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c8c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->p12 = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*((Q*dt_pow3)/2 + P22*DT + P12);
 8000c9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ca2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ca6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cba:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cc6:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000cca:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cda:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce6:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000cee:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000cf2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000d28 <KalmanFilter_Update+0x418>
 8000cf6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cfa:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000cfe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d16:	ed9f 4b04 	vldr	d4, [pc, #16]	; 8000d28 <KalmanFilter_Update+0x418>
 8000d1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d22:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d26:	e009      	b.n	8000d3c <KalmanFilter_Update+0x42c>
 8000d28:	47ae147b 	.word	0x47ae147b
 8000d2c:	3f847ae1 	.word	0x3f847ae1
 8000d30:	38d1b717 	.word	0x38d1b717
 8000d34:	358637bd 	.word	0x358637bd
 8000d38:	322bcc77 	.word	0x322bcc77
 8000d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d44:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000d48:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d58:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	ed9f 3bb4 	vldr	d3, [pc, #720]	; 8001038 <KalmanFilter_Update+0x728>
 8000d68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000d6c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000d70:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8001038 <KalmanFilter_Update+0x728>
 8000d74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d88:	eeb1 6b47 	vneg.f64	d6, d7
 8000d8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d98:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000d9c:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000da0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000da4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dac:	ed9f 4ba2 	vldr	d4, [pc, #648]	; 8001038 <KalmanFilter_Update+0x728>
 8000db0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000db4:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000db8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000dc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->p21 = P21 + P22*DT + (Q*dt_pow3)/2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dd6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de2:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8001038 <KalmanFilter_Update+0x728>
 8000de6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dee:	ed97 7a07 	vldr	s14, [r7, #28]
 8000df2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000dfe:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000e1a:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e1e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e22:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e2a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8001038 <KalmanFilter_Update+0x728>
 8000e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000e32:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e46:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	ed9f 3b79 	vldr	d3, [pc, #484]	; 8001038 <KalmanFilter_Update+0x728>
 8000e56:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000e5a:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000e5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6a:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000e6e:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e76:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000e7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e7e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000e82:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e8a:	ed9f 2b6b 	vldr	d2, [pc, #428]	; 8001038 <KalmanFilter_Update+0x728>
 8000e8e:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000e92:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000e96:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001038 <KalmanFilter_Update+0x728>
 8000e9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000e9e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000ea2:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000ea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000eb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ebe:	ed9f 3b5e 	vldr	d3, [pc, #376]	; 8001038 <KalmanFilter_Update+0x728>
 8000ec2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ec6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000eca:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed6:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000eda:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000eea:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000eee:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef6:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8001038 <KalmanFilter_Update+0x728>
 8000efa:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000efe:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000f02:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8001038 <KalmanFilter_Update+0x728>
 8000f06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000f0a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->p22 = P22 + Q*dt_pow2 - (((Q*dt_pow3)/2 + P22*DT + P12)*((Q*dt_pow3)/2 + P22*DT + P21))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8000f20:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f38:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f44:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000f48:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000f4c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f58:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001038 <KalmanFilter_Update+0x728>
 8000f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000f60:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f6c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f70:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8000f80:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000f84:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f88:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f90:	ed9f 3b29 	vldr	d3, [pc, #164]	; 8001038 <KalmanFilter_Update+0x728>
 8000f94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000f98:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000f9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa4:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000fa8:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000fac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc4:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 8001038 <KalmanFilter_Update+0x728>
 8000fc8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000fcc:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fdc:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000fe0:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ff0:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000ff4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffc:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001038 <KalmanFilter_Update+0x728>
 8001000:	ee27 7b02 	vmul.f64	d7, d7, d2
 8001004:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001008:	ed9f 3b0b 	vldr	d3, [pc, #44]	; 8001038 <KalmanFilter_Update+0x728>
 800100c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001010:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001014:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001018:	ee36 7b47 	vsub.f64	d7, d6, d7
 800101c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001026:	bf00      	nop
 8001028:	373c      	adds	r7, #60	; 0x3c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	47ae147b 	.word	0x47ae147b
 800103c:	3f847ae1 	.word	0x3f847ae1

08001040 <PIDController_initialise>:
 */

#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd,
		float lim_min, float lim_max, float lim_int_min, float lim_int_max) {
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	61f8      	str	r0, [r7, #28]
 8001048:	ed87 0a06 	vstr	s0, [r7, #24]
 800104c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001050:	ed87 1a04 	vstr	s2, [r7, #16]
 8001054:	edc7 1a03 	vstr	s3, [r7, #12]
 8001058:	ed87 2a02 	vstr	s4, [r7, #8]
 800105c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001060:	ed87 3a00 	vstr	s6, [r7]
	/* Set Struct Variable */
	pid->Kp = Kp;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	609a      	str	r2, [r3, #8]
	pid->lim_min = lim_min;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	60da      	str	r2, [r3, #12]
	pid->lim_min = lim_min;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	60da      	str	r2, [r3, #12]
	pid->lim_int_max = lim_int_max;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	615a      	str	r2, [r3, #20]
	pid->lim_int_min = lim_int_min;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]

	/* Clear controller variables */
	pid->proportional_term = 0.0;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
	pid->integrator = 0.0;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
	pid->integral_term = 0.0;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->derivative_term = 0.0;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = 0.0;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->out = 0.0;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 80010ca:	b480      	push	{r7}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d6:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 80010da:	ed97 7a02 	vldr	s14, [r7, #8]
 80010de:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e6:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a08 	vldr	s14, [r3, #32]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	ed93 7a01 	vldr	s14, [r3, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	edd3 7a08 	vldr	s15, [r3, #32]
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * Anti-wind-up
	 */
	if (pid->integral_term > pid->lim_int_max){
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	edd3 7a05 	vldr	s15, [r3, #20]
 8001134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	dd04      	ble.n	8001148 <PIDController_update+0x7e>
		pid->integral_term = pid->lim_int_max;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
 8001146:	e00e      	b.n	8001166 <PIDController_update+0x9c>
	}
	else if (pid->integral_term < pid->lim_int_min){
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a06 	vldr	s15, [r3, #24]
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d503      	bpl.n	8001166 <PIDController_update+0x9c>
		pid->integral_term = pid->lim_int_min;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	699a      	ldr	r2, [r3, #24]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (measurement - pid->prevMeasurement);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	ed93 7a02 	vldr	s14, [r3, #8]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001172:	edd7 6a01 	vldr	s13, [r7, #4]
 8001176:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevMeasurement = measurement;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return pid->out;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2224      	movs	r2, #36	; 0x24
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f00b fe75 	bl	800cec8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <MX_ADC1_Init+0xe8>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <MX_ADC1_Init+0xe4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001204:	2200      	movs	r2, #0
 8001206:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <MX_ADC1_Init+0xe4>)
 800120a:	2201      	movs	r2, #1
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0xe4>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_ADC1_Init+0xe4>)
 800122a:	2200      	movs	r2, #0
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001230:	2200      	movs	r2, #0
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_ADC1_Init+0xe4>)
 800123e:	f002 fde7 	bl	8003e10 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 fc76 	bl	8001b38 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_ADC1_Init+0xe4>)
 8001258:	f003 fe20 	bl	8004e9c <HAL_ADCEx_MultiModeConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001262:	f000 fc69 	bl	8001b38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_ADC1_Init+0xec>)
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001278:	2304      	movs	r3, #4
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_ADC1_Init+0xe4>)
 800128c:	f002 ffc8 	bl	8004220 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001296:	f000 fc4f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3730      	adds	r7, #48	; 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000244 	.word	0x24000244
 80012a8:	40022000 	.word	0x40022000
 80012ac:	2a000400 	.word	0x2a000400

080012b0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2224      	movs	r2, #36	; 0x24
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f00b fe03 	bl	800cec8 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <MX_ADC3_Init+0xd8>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012dc:	2204      	movs	r2, #4
 80012de:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC3_Init+0xd4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001302:	2200      	movs	r2, #0
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001310:	2200      	movs	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001316:	2200      	movs	r2, #0
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_ADC3_Init+0xd4>)
 800131c:	2200      	movs	r2, #0
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001322:	2200      	movs	r2, #0
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800132e:	4815      	ldr	r0, [pc, #84]	; (8001384 <MX_ADC3_Init+0xd4>)
 8001330:	f002 fd6e 	bl	8003e10 <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800133a:	f000 fbfd 	bl	8001b38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_ADC3_Init+0xdc>)
 8001340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	2306      	movs	r3, #6
 8001344:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8001346:	2302      	movs	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800134a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800134e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001350:	2304      	movs	r3, #4
 8001352:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_ADC3_Init+0xd4>)
 800136e:	f002 ff57 	bl	8004220 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001378:	f000 fbde 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	240002b4 	.word	0x240002b4
 8001388:	58026000 	.word	0x58026000
 800138c:	c7520000 	.word	0xc7520000

08001390 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a22      	ldr	r2, [pc, #136]	; (8001438 <HAL_ADC_MspInit+0xa8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12a      	bne.n	8001408 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b8:	4a20      	ldr	r2, [pc, #128]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_ADC_MspInit+0xac>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	2303      	movs	r3, #3
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <HAL_ADC_MspInit+0xb0>)
 8001402:	f005 fbfd 	bl	8006c00 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001406:	e013      	b.n	8001430 <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_ADC_MspInit+0xb4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10e      	bne.n	8001430 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_ADC_MspInit+0xac>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_ADC_MspInit+0xac>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_ADC_MspInit+0xac>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40022000 	.word	0x40022000
 800143c:	58024400 	.word	0x58024400
 8001440:	58020800 	.word	0x58020800
 8001444:	58026000 	.word	0x58026000

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_DMA_Init+0x3c>)
 8001450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <MX_DMA_Init+0x3c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_DMA_Init+0x3c>)
 8001460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	200b      	movs	r0, #11
 8001472:	f003 fed0 	bl	8005216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001476:	200b      	movs	r0, #11
 8001478:	f003 fee7 	bl	800524a <HAL_NVIC_EnableIRQ>

}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400

08001488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a60      	ldr	r2, [pc, #384]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a59      	ldr	r2, [pc, #356]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a51      	ldr	r2, [pc, #324]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <MX_GPIO_Init+0x1a0>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <MX_GPIO_Init+0x1a0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <MX_GPIO_Init+0x1a0>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <MX_GPIO_Init+0x1a0>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a42      	ldr	r2, [pc, #264]	; (8001628 <MX_GPIO_Init+0x1a0>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b40      	ldr	r3, [pc, #256]	; (8001628 <MX_GPIO_Init+0x1a0>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <MX_GPIO_Init+0x1a0>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <MX_GPIO_Init+0x1a0>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <MX_GPIO_Init+0x1a0>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001558:	4834      	ldr	r0, [pc, #208]	; (800162c <MX_GPIO_Init+0x1a4>)
 800155a:	f005 fcf9 	bl	8006f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8001564:	4832      	ldr	r0, [pc, #200]	; (8001630 <MX_GPIO_Init+0x1a8>)
 8001566:	f005 fcf3 	bl	8006f50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800156a:	2200      	movs	r2, #0
 800156c:	f644 7111 	movw	r1, #20241	; 0x4f11
 8001570:	4830      	ldr	r0, [pc, #192]	; (8001634 <MX_GPIO_Init+0x1ac>)
 8001572:	f005 fced 	bl	8006f50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 800157c:	482e      	ldr	r0, [pc, #184]	; (8001638 <MX_GPIO_Init+0x1b0>)
 800157e:	f005 fce7 	bl	8006f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	21f0      	movs	r1, #240	; 0xf0
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_GPIO_Init+0x1b4>)
 8001588:	f005 fce2 	bl	8006f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 800158c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <MX_GPIO_Init+0x1a4>)
 80015a6:	f005 fb2b 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 80015aa:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 80015ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_GPIO_Init+0x1a8>)
 80015c4:	f005 fb1c 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015c8:	f644 7311 	movw	r3, #20241	; 0x4f11
 80015cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <MX_GPIO_Init+0x1ac>)
 80015e2:	f005 fb0d 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 80015e6:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_GPIO_Init+0x1b0>)
 8001600:	f005 fafe 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8001604:	23f0      	movs	r3, #240	; 0xf0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_GPIO_Init+0x1b4>)
 800161c:	f005 faf0 	bl	8006c00 <HAL_GPIO_Init>

}
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400
 800162c:	58021000 	.word	0x58021000
 8001630:	58020800 	.word	0x58020800
 8001634:	58020c00 	.word	0x58020c00
 8001638:	58020000 	.word	0x58020000
 800163c:	58020400 	.word	0x58020400

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001646:	f002 f90b 	bl	8003860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164a:	f000 f94f 	bl	80018ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800164e:	f000 f9c7 	bl	80019e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001652:	f7ff ff19 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 8001656:	f7ff fef7 	bl	8001448 <MX_DMA_Init>
  MX_ADC1_Init();
 800165a:	f7ff fdb1 	bl	80011c0 <MX_ADC1_Init>
  MX_ADC3_Init();
 800165e:	f7ff fe27 	bl	80012b0 <MX_ADC3_Init>
  MX_SPI3_Init();
 8001662:	f000 fb8f 	bl	8001d84 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001666:	f000 fde1 	bl	800222c <MX_TIM1_Init>
  MX_TIM2_Init();
 800166a:	f000 fe8d 	bl	8002388 <MX_TIM2_Init>
  MX_TIM3_Init();
 800166e:	f000 ff03 	bl	8002478 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001672:	f000 ff79 	bl	8002568 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001676:	f000 ffef 	bl	8002658 <MX_TIM12_Init>
  MX_TIM13_Init();
 800167a:	f001 f851 	bl	8002720 <MX_TIM13_Init>
  MX_TIM14_Init();
 800167e:	f001 f89d 	bl	80027bc <MX_TIM14_Init>
  MX_TIM15_Init();
 8001682:	f001 f8e9 	bl	8002858 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001686:	f001 f98b 	bl	80029a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 800168a:	f001 fa03 	bl	8002a94 <MX_TIM17_Init>
  MX_UART4_Init();
 800168e:	f001 fe13 	bl	80032b8 <MX_UART4_Init>
  MX_UART5_Init();
 8001692:	f001 fe5d 	bl	8003350 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8001696:	f001 fea7 	bl	80033e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800169a:	f001 fef1 	bl	8003480 <MX_USART3_UART_Init>
  MX_TIM24_Init();
 800169e:	f001 fac5 	bl	8002c2c <MX_TIM24_Init>
  MX_TIM23_Init();
 80016a2:	f001 fa73 	bl	8002b8c <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim24);
 80016a6:	4871      	ldr	r0, [pc, #452]	; (800186c <main+0x22c>)
 80016a8:	f008 fe14 	bl	800a2d4 <HAL_TIM_Base_Start_IT>
	uint32_t timestamp = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
	int32_t encoder_unwrap_value = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
	//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 80016b4:	2310      	movs	r3, #16
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <main+0x230>)
 80016ba:	222c      	movs	r2, #44	; 0x2c
 80016bc:	496d      	ldr	r1, [pc, #436]	; (8001874 <main+0x234>)
 80016be:	486e      	ldr	r0, [pc, #440]	; (8001878 <main+0x238>)
 80016c0:	f7fe fffa 	bl	80006b8 <AMT21_initialise>
			USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 80016c4:	2310      	movs	r3, #16
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4b69      	ldr	r3, [pc, #420]	; (8001870 <main+0x230>)
 80016ca:	2270      	movs	r2, #112	; 0x70
 80016cc:	4969      	ldr	r1, [pc, #420]	; (8001874 <main+0x234>)
 80016ce:	486b      	ldr	r0, [pc, #428]	; (800187c <main+0x23c>)
 80016d0:	f7fe fff2 	bl	80006b8 <AMT21_initialise>
			USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 80016d4:	2310      	movs	r3, #16
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4b65      	ldr	r3, [pc, #404]	; (8001870 <main+0x230>)
 80016da:	2254      	movs	r2, #84	; 0x54
 80016dc:	4965      	ldr	r1, [pc, #404]	; (8001874 <main+0x234>)
 80016de:	4868      	ldr	r0, [pc, #416]	; (8001880 <main+0x240>)
 80016e0:	f7fe ffea 	bl	80006b8 <AMT21_initialise>
			USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xE8, USART2_DE_GPIO_Port,
 80016e4:	2310      	movs	r3, #16
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4b61      	ldr	r3, [pc, #388]	; (8001870 <main+0x230>)
 80016ea:	22e8      	movs	r2, #232	; 0xe8
 80016ec:	4961      	ldr	r1, [pc, #388]	; (8001874 <main+0x234>)
 80016ee:	4865      	ldr	r0, [pc, #404]	; (8001884 <main+0x244>)
 80016f0:	f7fe ffe2 	bl	80006b8 <AMT21_initialise>
			USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xB4, USART2_DE_GPIO_Port,
 80016f4:	2310      	movs	r3, #16
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <main+0x230>)
 80016fa:	22b4      	movs	r2, #180	; 0xb4
 80016fc:	495d      	ldr	r1, [pc, #372]	; (8001874 <main+0x234>)
 80016fe:	4862      	ldr	r0, [pc, #392]	; (8001888 <main+0x248>)
 8001700:	f7fe ffda 	bl	80006b8 <AMT21_initialise>
			USART2_DE_Pin);
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8001704:	2308      	movs	r3, #8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4b60      	ldr	r3, [pc, #384]	; (800188c <main+0x24c>)
 800170a:	2200      	movs	r2, #0
 800170c:	4960      	ldr	r1, [pc, #384]	; (8001890 <main+0x250>)
 800170e:	4861      	ldr	r0, [pc, #388]	; (8001894 <main+0x254>)
 8001710:	f000 fa18 	bl	8001b44 <stepper_initialise>
			DIR1_Pin);
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8001714:	2310      	movs	r3, #16
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4b5c      	ldr	r3, [pc, #368]	; (800188c <main+0x24c>)
 800171a:	2200      	movs	r2, #0
 800171c:	495e      	ldr	r1, [pc, #376]	; (8001898 <main+0x258>)
 800171e:	485f      	ldr	r0, [pc, #380]	; (800189c <main+0x25c>)
 8001720:	f000 fa10 	bl	8001b44 <stepper_initialise>
			DIR2_Pin);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <main+0x260>)
 800172c:	2200      	movs	r2, #0
 800172e:	495d      	ldr	r1, [pc, #372]	; (80018a4 <main+0x264>)
 8001730:	485d      	ldr	r0, [pc, #372]	; (80018a8 <main+0x268>)
 8001732:	f000 fa07 	bl	8001b44 <stepper_initialise>
			DIR3_Pin);
	stepper_initialise(&steppers[3], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 8001736:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <main+0x260>)
 800173e:	2200      	movs	r2, #0
 8001740:	495a      	ldr	r1, [pc, #360]	; (80018ac <main+0x26c>)
 8001742:	485b      	ldr	r0, [pc, #364]	; (80018b0 <main+0x270>)
 8001744:	f000 f9fe 	bl	8001b44 <stepper_initialise>
			DIR4_Pin);
	stepper_initialise(&steppers[4], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8001748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <main+0x260>)
 8001750:	2200      	movs	r2, #0
 8001752:	4958      	ldr	r1, [pc, #352]	; (80018b4 <main+0x274>)
 8001754:	4858      	ldr	r0, [pc, #352]	; (80018b8 <main+0x278>)
 8001756:	f000 f9f5 	bl	8001b44 <stepper_initialise>
			DIR5_Pin);
	//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	KalmanFilter_Init(&kalman_filter[0], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <main+0x27c>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <main+0x280>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	eef0 3a47 	vmov.f32	s7, s14
 800176a:	eeb0 3a67 	vmov.f32	s6, s15
 800176e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001772:	ed9f 2a54 	vldr	s4, [pc, #336]	; 80018c4 <main+0x284>
 8001776:	eddf 1a53 	vldr	s3, [pc, #332]	; 80018c4 <main+0x284>
 800177a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800177e:	eddf 0a51 	vldr	s1, [pc, #324]	; 80018c4 <main+0x284>
 8001782:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80018c4 <main+0x284>
 8001786:	4850      	ldr	r0, [pc, #320]	; (80018c8 <main+0x288>)
 8001788:	f7ff f890 	bl	80008ac <KalmanFilter_Init>
	PIDController_initialise(&pid_controller[0], 1.5, 0.1, 0, -500, 500, -50,
 800178c:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 80018c4 <main+0x284>
 8001790:	eddf 2a4e 	vldr	s5, [pc, #312]	; 80018cc <main+0x28c>
 8001794:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 80018d0 <main+0x290>
 8001798:	eddf 1a4e 	vldr	s3, [pc, #312]	; 80018d4 <main+0x294>
 800179c:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80018c4 <main+0x284>
 80017a0:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80018d8 <main+0x298>
 80017a4:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80017a8:	484c      	ldr	r0, [pc, #304]	; (80018dc <main+0x29c>)
 80017aa:	f7ff fc49 	bl	8001040 <PIDController_initialise>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - timestamp >= 10) { // 500 hz
 80017ae:	f002 f8dd 	bl	800396c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d9f8      	bls.n	80017ae <main+0x16e>
			timestamp = HAL_GetTick();
 80017bc:	f002 f8d6 	bl	800396c <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]
			HAL_StatusTypeDef rep = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
			encoder_unwrap_value = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
			while (1) {
				AMT21_read_value(&(encoders[CURRENT_NUMBER]));
 80017ca:	482b      	ldr	r0, [pc, #172]	; (8001878 <main+0x238>)
 80017cc:	f7fe ff9d 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[CURRENT_NUMBER]));
 80017d0:	4829      	ldr	r0, [pc, #164]	; (8001878 <main+0x238>)
 80017d2:	f7fe ffd9 	bl	8000788 <AMT21_check_value>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
				if (rep == HAL_OK) {
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f4      	bne.n	80017ca <main+0x18a>
					encoder_unwrap_value = AMT21_unwrap(
							(int32_t) encoders[CURRENT_NUMBER].position,
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <main+0x238>)
 80017e2:	89db      	ldrh	r3, [r3, #14]
					encoder_unwrap_value = AMT21_unwrap(
 80017e4:	461a      	mov	r2, r3
							(int32_t) encoders[CURRENT_NUMBER].prev_position);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <main+0x238>)
 80017e8:	8a1b      	ldrh	r3, [r3, #16]
					encoder_unwrap_value = AMT21_unwrap(
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7ff f82d 	bl	800084c <AMT21_unwrap>
 80017f2:	60b8      	str	r0, [r7, #8]
					if ((encoder_unwrap_value > 1000)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fa:	dc03      	bgt.n	8001804 <main+0x1c4>
							|| (encoder_unwrap_value < -1000)) {
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001802:	da02      	bge.n	800180a <main+0x1ca>
						rep = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	e02f      	b.n	800186a <main+0x22a>
					} else {
						encoders[CURRENT_NUMBER].prev_position =
								encoders[CURRENT_NUMBER].position;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <main+0x238>)
 800180c:	89da      	ldrh	r2, [r3, #14]
						encoders[CURRENT_NUMBER].prev_position =
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <main+0x238>)
 8001810:	821a      	strh	r2, [r3, #16]
						break;
 8001812:	bf00      	nop
					}
				}
			}
			joint_state[CURRENT_NUMBER] = joint_state[CURRENT_NUMBER]
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <main+0x2a0>)
 8001816:	681a      	ldr	r2, [r3, #0]
					+ encoder_unwrap_value;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4413      	add	r3, r2
			joint_state[CURRENT_NUMBER] = joint_state[CURRENT_NUMBER]
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <main+0x2a0>)
 800181e:	6013      	str	r3, [r2, #0]

			KalmanFilter_Update(&kalman_filter[CURRENT_NUMBER], joint_state[CURRENT_NUMBER]);
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <main+0x2a0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	4825      	ldr	r0, [pc, #148]	; (80018c8 <main+0x288>)
 8001832:	f7ff f86d 	bl	8000910 <KalmanFilter_Update>
			/*
			 * Speed Controller
			 */
			PIDController_update(&pid_controller[CURRENT_NUMBER], desired_value, kalman_filter[CURRENT_NUMBER].x2);
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <main+0x2a4>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <main+0x288>)
 800183e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001842:	eef0 0a47 	vmov.f32	s1, s14
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	4824      	ldr	r0, [pc, #144]	; (80018dc <main+0x29c>)
 800184c:	f7ff fc3d 	bl	80010ca <PIDController_update>
			stepper_set_speed(&steppers[CURRENT_NUMBER], pid_controller[CURRENT_NUMBER].out);
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <main+0x29c>)
 8001852:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <main+0x254>)
 800185c:	f000 fa26 	bl	8001cac <stepper_set_speed>
			prev_joint_state[CURRENT_NUMBER] = joint_state[CURRENT_NUMBER];
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <main+0x2a0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <main+0x2a8>)
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e7a1      	b.n	80017ae <main+0x16e>
				AMT21_read_value(&(encoders[CURRENT_NUMBER]));
 800186a:	e7ae      	b.n	80017ca <main+0x18a>
 800186c:	24000610 	.word	0x24000610
 8001870:	58020c00 	.word	0x58020c00
 8001874:	24000bc8 	.word	0x24000bc8
 8001878:	24000380 	.word	0x24000380
 800187c:	24000394 	.word	0x24000394
 8001880:	240003a8 	.word	0x240003a8
 8001884:	240003bc 	.word	0x240003bc
 8001888:	240003d0 	.word	0x240003d0
 800188c:	58021000 	.word	0x58021000
 8001890:	240007d8 	.word	0x240007d8
 8001894:	24000324 	.word	0x24000324
 8001898:	24000824 	.word	0x24000824
 800189c:	24000334 	.word	0x24000334
 80018a0:	58020800 	.word	0x58020800
 80018a4:	24000740 	.word	0x24000740
 80018a8:	24000344 	.word	0x24000344
 80018ac:	2400065c 	.word	0x2400065c
 80018b0:	24000354 	.word	0x24000354
 80018b4:	240006a8 	.word	0x240006a8
 80018b8:	24000364 	.word	0x24000364
 80018bc:	24000000 	.word	0x24000000
 80018c0:	24000004 	.word	0x24000004
 80018c4:	00000000 	.word	0x00000000
 80018c8:	240003e4 	.word	0x240003e4
 80018cc:	c2480000 	.word	0xc2480000
 80018d0:	43fa0000 	.word	0x43fa0000
 80018d4:	c3fa0000 	.word	0xc3fa0000
 80018d8:	3dcccccd 	.word	0x3dcccccd
 80018dc:	24000484 	.word	0x24000484
 80018e0:	2400020c 	.word	0x2400020c
 80018e4:	2400000c 	.word	0x2400000c
 80018e8:	24000220 	.word	0x24000220

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09c      	sub	sp, #112	; 0x70
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	224c      	movs	r2, #76	; 0x4c
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00b fae4 	bl	800cec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2220      	movs	r2, #32
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f00b fade 	bl	800cec8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800190c:	2002      	movs	r0, #2
 800190e:	f005 fb39 	bl	8006f84 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <SystemClock_Config+0xec>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <SystemClock_Config+0xec>)
 800191c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <SystemClock_Config+0xec>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800192e:	bf00      	nop
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <SystemClock_Config+0xec>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193c:	d1f8      	bne.n	8001930 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <SystemClock_Config+0xf0>)
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	4a25      	ldr	r2, [pc, #148]	; (80019dc <SystemClock_Config+0xf0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2302      	movs	r3, #2
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195c:	2302      	movs	r3, #2
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001960:	2302      	movs	r3, #2
 8001962:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001964:	232c      	movs	r3, #44	; 0x2c
 8001966:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800196c:	2303      	movs	r3, #3
 800196e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001970:	2302      	movs	r3, #2
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001974:	230c      	movs	r3, #12
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001978:	2300      	movs	r3, #0
 800197a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fb37 	bl	8006ff8 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001990:	f000 f8d2 	bl	8001b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	233f      	movs	r3, #63	; 0x3f
 8001996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001998:	2303      	movs	r3, #3
 800199a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019a0:	2308      	movs	r3, #8
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2103      	movs	r1, #3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 fec8 	bl	8007750 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0xde>
  {
    Error_Handler();
 80019c6:	f000 f8b7 	bl	8001b38 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80019ca:	f006 f877 	bl	8007abc <HAL_RCC_EnableCSS>
}
 80019ce:	bf00      	nop
 80019d0:	3770      	adds	r7, #112	; 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	58024800 	.word	0x58024800
 80019dc:	58024400 	.word	0x58024400

080019e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0ae      	sub	sp, #184	; 0xb8
 80019e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	22b4      	movs	r2, #180	; 0xb4
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00b fa6b 	bl	800cec8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019f6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80019fc:	230f      	movs	r3, #15
 80019fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a0c:	23c0      	movs	r3, #192	; 0xc0
 8001a0e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001a14:	f640 3386 	movw	r3, #2950	; 0xb86
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 fa4c 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001a2e:	f000 f883 	bl	8001b38 <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	37b8      	adds	r7, #184	; 0xb8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8001a44:	1d39      	adds	r1, r7, #4
 8001a46:	2301      	movs	r3, #1
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <__io_putchar+0x20>)
 8001a4c:	f009 ff84 	bl	800b958 <HAL_UART_Transmit>

	return ch;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24000a18 	.word	0x24000a18

08001a60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if (htim == &htim24) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d14f      	bne.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0xb0>
		/*
		 * Sine Wave Generator
		 */
		AngleInput += changeRate;
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a72:	ed93 7a00 	vldr	s14, [r3]
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
		if (AngleInput > 2 * M_PI) {
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a90:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b18 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001a94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	dd0e      	ble.n	8001abc <HAL_TIM_PeriodElapsedCallback+0x5c>
			AngleInput -= 2 * M_PI;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa8:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001b18 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001aac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ab0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
 8001aba:	e015      	b.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x88>
		} else if (AngleInput < 0) {
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d50d      	bpl.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x88>
			AngleInput += 2 * M_PI;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001b18 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001ada:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ade:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
		}
		desired_value = sin(AngleInput) * 500;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af2:	eeb0 0b47 	vmov.f64	d0, d7
 8001af6:	f00d fe2b 	bl	800f750 <sin>
 8001afa:	eeb0 7b40 	vmov.f64	d7, d0
 8001afe:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001b20 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001b02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
////			if (tim_cnt > 750){
////				desired_value = -1 * desired_value;
////				tim_cnt = 0;
////			}
	}
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	54442d18 	.word	0x54442d18
 8001b1c:	401921fb 	.word	0x401921fb
 8001b20:	00000000 	.word	0x00000000
 8001b24:	407f4000 	.word	0x407f4000
 8001b28:	24000610 	.word	0x24000610
 8001b2c:	24000234 	.word	0x24000234
 8001b30:	24000008 	.word	0x24000008
 8001b34:	2400000c 	.word	0x2400000c

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8b3a      	ldrh	r2, [r7, #24]
 8001b68:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6898      	ldr	r0, [r3, #8]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	899b      	ldrh	r3, [r3, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	f005 f9eb 	bl	8006f50 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f008 fc8d 	bl	800a4a4 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	739a      	strb	r2, [r3, #14]
	stepper_set_speed(dev, 0);
 8001b90:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001ba4 <stepper_initialise+0x60>
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f889 	bl	8001cac <stepper_set_speed>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq < MIN_FREQUENCY){
 8001bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbe:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d503      	bpl.n	8001bd4 <set_pwm+0x2c>
		freq = MIN_FREQUENCY;
 8001bcc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e00a      	b.n	8001bea <set_pwm+0x42>
	}
	else if (freq > MAX_FREQUENCY){
 8001bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ca4 <set_pwm+0xfc>
 8001bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	dd01      	ble.n	8001bea <set_pwm+0x42>
		freq = MAX_FREQUENCY;
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <set_pwm+0x100>)
 8001be8:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 500000 / freq; //500000 come from 275MHz/550
 8001bea:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ca4 <set_pwm+0xfc>
 8001bee:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8001c00:	8abb      	ldrh	r3, [r7, #20]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0a:	edd7 7a00 	vldr	s15, [r7]
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c16:	ee17 3a90 	vmov	r3, s15
 8001c1a:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8001c1c:	edd7 7a00 	vldr	s15, [r7]
 8001c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c24:	eef4 7a47 	vcmp.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d101      	bne.n	8001c32 <set_pwm+0x8a>
		CCRx_value = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	8aba      	ldrh	r2, [r7, #20]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c3a:	8aba      	ldrh	r2, [r7, #20]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <set_pwm+0xa8>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	8afa      	ldrh	r2, [r7, #22]
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c4e:	e023      	b.n	8001c98 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d104      	bne.n	8001c60 <set_pwm+0xb8>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	8afb      	ldrh	r3, [r7, #22]
 8001c5c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c5e:	e01b      	b.n	8001c98 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d104      	bne.n	8001c70 <set_pwm+0xc8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c6e:	e013      	b.n	8001c98 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d104      	bne.n	8001c80 <set_pwm+0xd8>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c7e:	e00b      	b.n	8001c98 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d104      	bne.n	8001c90 <set_pwm+0xe8>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	8afb      	ldrh	r3, [r7, #22]
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001c8e:	e003      	b.n	8001c98 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	48f42400 	.word	0x48f42400
 8001ca8:	48f42400 	.word	0x48f42400

08001cac <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	ed87 0a02 	vstr	s0, [r7, #8]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	7b9b      	ldrb	r3, [r3, #14]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cc8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d051      	beq.n	8001d76 <stepper_set_speed+0xca>
		if (freq > 0) {
 8001cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd14      	ble.n	8001d0a <stepper_set_speed+0x5e>
			HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6898      	ldr	r0, [r3, #8]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	899b      	ldrh	r3, [r3, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f005 f930 	bl	8006f50 <HAL_GPIO_WritePin>
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001cfc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff ff50 	bl	8001ba8 <set_pwm>
 8001d08:	e02b      	b.n	8001d62 <stepper_set_speed+0xb6>
		} else if (freq < 0) {
 8001d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d518      	bpl.n	8001d4a <stepper_set_speed+0x9e>
			HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6898      	ldr	r0, [r3, #8]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	899b      	ldrh	r3, [r3, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	f005 f914 	bl	8006f50 <HAL_GPIO_WritePin>
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d34:	eef1 7a67 	vneg.f32	s15, s15
 8001d38:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff ff30 	bl	8001ba8 <set_pwm>
 8001d48:	e00b      	b.n	8001d62 <stepper_set_speed+0xb6>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d56:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d80 <stepper_set_speed+0xd4>
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7ff ff23 	bl	8001ba8 <set_pwm>
		}
		dev->freq = freq;
 8001d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d6e:	793b      	ldrb	r3, [r7, #4]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	739a      	strb	r2, [r3, #14]
	}
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	42c80000 	.word	0x42c80000

08001d84 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <MX_SPI3_Init+0xa8>)
 8001d8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001d90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001d9e:	2203      	movs	r2, #3
 8001da0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001db0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001db4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_SPI3_Init+0xa4>)
 8001e14:	f008 f8e6 	bl	8009fe4 <HAL_SPI_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001e1e:	f7ff fe8b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	24000588 	.word	0x24000588
 8001e2c:	40003c00 	.word	0x40003c00

08001e30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b6      	sub	sp, #216	; 0xd8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	22b4      	movs	r2, #180	; 0xb4
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00b f839 	bl	800cec8 <memset>
  if(spiHandle->Instance==SPI3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <HAL_SPI_MspInit+0xc0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d142      	bne.n	8001ee6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 f826 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e7a:	f7ff fe5d 	bl	8001b38 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_SPI_MspInit+0xc4>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001eba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ed4:	2306      	movs	r3, #6
 8001ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_SPI_MspInit+0xc8>)
 8001ee2:	f004 fe8d 	bl	8006c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	37d8      	adds	r7, #216	; 0xd8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40003c00 	.word	0x40003c00
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020800 	.word	0x58020800

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_MspInit+0x30>)
 8001f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f08:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_MspInit+0x30>)
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_MspInit+0x30>)
 8001f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	58024400 	.word	0x58024400

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f34:	f005 ffa8 	bl	8007e88 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x8>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f001 fce0 	bl	8003944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Stream0_IRQHandler+0x10>)
 8001f8e:	f003 fcd1 	bl	8005934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	240009a0 	.word	0x240009a0

08001f9c <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM24_IRQHandler+0x10>)
 8001fa2:	f008 fb9b 	bl	800a6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	24000610 	.word	0x24000610

08001fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_kill>:

int _kill(int pid, int sig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fca:	f00a ff45 	bl	800ce58 <__errno>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2216      	movs	r2, #22
 8001fd2:	601a      	str	r2, [r3, #0]
	return -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_exit>:

void _exit (int status)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffe7 	bl	8001fc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ff2:	e7fe      	b.n	8001ff2 <_exit+0x12>

08001ff4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e00a      	b.n	800201c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002006:	f3af 8000 	nop.w
 800200a:	4601      	mov	r1, r0
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf0      	blt.n	8002006 <_read+0x12>
	}

return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e009      	b.n	8002054 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fcf7 	bl	8001a3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf1      	blt.n	8002040 <_write+0x12>
	}
	return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_close>:

int _close(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	return -1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208e:	605a      	str	r2, [r3, #4]
	return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_isatty>:

int _isatty(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return 1;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
	return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002100:	f00a feaa 	bl	800ce58 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	24050000 	.word	0x24050000
 8002130:	00000400 	.word	0x00000400
 8002134:	24000238 	.word	0x24000238
 8002138:	24000c70 	.word	0x24000c70

0800213c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <SystemInit+0xd0>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	4a31      	ldr	r2, [pc, #196]	; (800220c <SystemInit+0xd0>)
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <SystemInit+0xd4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	2b06      	cmp	r3, #6
 800215a:	d807      	bhi.n	800216c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <SystemInit+0xd4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 030f 	bic.w	r3, r3, #15
 8002164:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <SystemInit+0xd4>)
 8002166:	f043 0307 	orr.w	r3, r3, #7
 800216a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <SystemInit+0xd8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <SystemInit+0xd8>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <SystemInit+0xd8>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <SystemInit+0xd8>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4924      	ldr	r1, [pc, #144]	; (8002214 <SystemInit+0xd8>)
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <SystemInit+0xdc>)
 8002186:	4013      	ands	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <SystemInit+0xd4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <SystemInit+0xd4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 030f 	bic.w	r3, r3, #15
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <SystemInit+0xd4>)
 80021a0:	f043 0307 	orr.w	r3, r3, #7
 80021a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <SystemInit+0xd8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <SystemInit+0xd8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <SystemInit+0xd8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <SystemInit+0xd8>)
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <SystemInit+0xe0>)
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <SystemInit+0xd8>)
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <SystemInit+0xe4>)
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <SystemInit+0xd8>)
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <SystemInit+0xe8>)
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <SystemInit+0xd8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <SystemInit+0xd8>)
 80021d2:	4a14      	ldr	r2, [pc, #80]	; (8002224 <SystemInit+0xe8>)
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <SystemInit+0xd8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <SystemInit+0xd8>)
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <SystemInit+0xe8>)
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <SystemInit+0xd8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <SystemInit+0xd8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <SystemInit+0xd8>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <SystemInit+0xd8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <SystemInit+0xec>)
 80021fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002200:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00
 8002210:	52002000 	.word	0x52002000
 8002214:	58024400 	.word	0x58024400
 8002218:	eaf6ed7f 	.word	0xeaf6ed7f
 800221c:	02020200 	.word	0x02020200
 8002220:	01ff0000 	.word	0x01ff0000
 8002224:	01010280 	.word	0x01010280
 8002228:	52004000 	.word	0x52004000

0800222c <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b09c      	sub	sp, #112	; 0x70
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2234      	movs	r2, #52	; 0x34
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f00a fe2e 	bl	800cec8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <MX_TIM1_Init+0x154>)
 800226e:	4a45      	ldr	r2, [pc, #276]	; (8002384 <MX_TIM1_Init+0x158>)
 8002270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 550-1;
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <MX_TIM1_Init+0x154>)
 8002274:	f240 2225 	movw	r2, #549	; 0x225
 8002278:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <MX_TIM1_Init+0x154>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <MX_TIM1_Init+0x154>)
 8002282:	f242 7210 	movw	r2, #10000	; 0x2710
 8002286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <MX_TIM1_Init+0x154>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <MX_TIM1_Init+0x154>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <MX_TIM1_Init+0x154>)
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800229a:	4839      	ldr	r0, [pc, #228]	; (8002380 <MX_TIM1_Init+0x154>)
 800229c:	f007 ffc3 	bl	800a226 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80022a6:	f7ff fc47 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022b4:	4619      	mov	r1, r3
 80022b6:	4832      	ldr	r0, [pc, #200]	; (8002380 <MX_TIM1_Init+0x154>)
 80022b8:	f008 fc44 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80022c2:	f7ff fc39 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022c6:	482e      	ldr	r0, [pc, #184]	; (8002380 <MX_TIM1_Init+0x154>)
 80022c8:	f008 f88a 	bl	800a3e0 <HAL_TIM_PWM_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80022d2:	f7ff fc31 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e6:	4619      	mov	r1, r3
 80022e8:	4825      	ldr	r0, [pc, #148]	; (8002380 <MX_TIM1_Init+0x154>)
 80022ea:	f009 f98b 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80022f4:	f7ff fc20 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002300:	2300      	movs	r3, #0
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002318:	2200      	movs	r2, #0
 800231a:	4619      	mov	r1, r3
 800231c:	4818      	ldr	r0, [pc, #96]	; (8002380 <MX_TIM1_Init+0x154>)
 800231e:	f008 fafd 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002328:	f7ff fc06 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002344:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800234e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <MX_TIM1_Init+0x154>)
 8002362:	f009 f9eb 	bl	800b73c <HAL_TIMEx_ConfigBreakDeadTime>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800236c:	f7ff fbe4 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <MX_TIM1_Init+0x154>)
 8002372:	f000 fdf7 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002376:	bf00      	nop
 8002378:	3770      	adds	r7, #112	; 0x70
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	240007d8 	.word	0x240007d8
 8002384:	40010000 	.word	0x40010000

08002388 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <MX_TIM2_Init+0xec>)
 80023bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550 - 1;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <MX_TIM2_Init+0xec>)
 80023c4:	f240 2225 	movw	r2, #549	; 0x225
 80023c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <MX_TIM2_Init+0xec>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <MX_TIM2_Init+0xec>)
 80023d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80023d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <MX_TIM2_Init+0xec>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <MX_TIM2_Init+0xec>)
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e4:	4823      	ldr	r0, [pc, #140]	; (8002474 <MX_TIM2_Init+0xec>)
 80023e6:	f007 ff1e 	bl	800a226 <HAL_TIM_Base_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80023f0:	f7ff fba2 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fe:	4619      	mov	r1, r3
 8002400:	481c      	ldr	r0, [pc, #112]	; (8002474 <MX_TIM2_Init+0xec>)
 8002402:	f008 fb9f 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800240c:	f7ff fb94 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <MX_TIM2_Init+0xec>)
 8002412:	f007 ffe5 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800241c:	f7ff fb8c 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	4811      	ldr	r0, [pc, #68]	; (8002474 <MX_TIM2_Init+0xec>)
 8002430:	f009 f8e8 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800243a:	f7ff fb7d 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243e:	2360      	movs	r3, #96	; 0x60
 8002440:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <MX_TIM2_Init+0xec>)
 8002456:	f008 fa61 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002460:	f7ff fb6a 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <MX_TIM2_Init+0xec>)
 8002466:	f000 fd7d 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 800246a:	bf00      	nop
 800246c:	3738      	adds	r7, #56	; 0x38
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24000824 	.word	0x24000824

08002478 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002498:	463b      	mov	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024ac:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <MX_TIM3_Init+0xec>)
 80024ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550 - 1;
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024b2:	f240 2225 	movw	r2, #549	; 0x225
 80024b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024d2:	4823      	ldr	r0, [pc, #140]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024d4:	f007 fea7 	bl	800a226 <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7ff fb2b 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ec:	4619      	mov	r1, r3
 80024ee:	481c      	ldr	r0, [pc, #112]	; (8002560 <MX_TIM3_Init+0xe8>)
 80024f0:	f008 fb28 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80024fa:	f7ff fb1d 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024fe:	4818      	ldr	r0, [pc, #96]	; (8002560 <MX_TIM3_Init+0xe8>)
 8002500:	f007 ff6e 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800250a:	f7ff fb15 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	4619      	mov	r1, r3
 800251c:	4810      	ldr	r0, [pc, #64]	; (8002560 <MX_TIM3_Init+0xe8>)
 800251e:	f009 f871 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002528:	f7ff fb06 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252c:	2360      	movs	r3, #96	; 0x60
 800252e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM3_Init+0xe8>)
 8002544:	f008 f9ea 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800254e:	f7ff faf3 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM3_Init+0xe8>)
 8002554:	f000 fd06 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002558:	bf00      	nop
 800255a:	3738      	adds	r7, #56	; 0x38
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	24000740 	.word	0x24000740
 8002564:	40000400 	.word	0x40000400

08002568 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	615a      	str	r2, [r3, #20]
 8002598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <MX_TIM4_Init+0xe8>)
 800259c:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <MX_TIM4_Init+0xec>)
 800259e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 550-1;
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025a2:	f240 2225 	movw	r2, #549	; 0x225
 80025a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b29      	ldr	r3, [pc, #164]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80025b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025c2:	4823      	ldr	r0, [pc, #140]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025c4:	f007 fe2f 	bl	800a226 <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80025ce:	f7ff fab3 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025dc:	4619      	mov	r1, r3
 80025de:	481c      	ldr	r0, [pc, #112]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025e0:	f008 fab0 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80025ea:	f7ff faa5 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025ee:	4818      	ldr	r0, [pc, #96]	; (8002650 <MX_TIM4_Init+0xe8>)
 80025f0:	f007 fef6 	bl	800a3e0 <HAL_TIM_PWM_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80025fa:	f7ff fa9d 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <MX_TIM4_Init+0xe8>)
 800260e:	f008 fff9 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002618:	f7ff fa8e 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261c:	2360      	movs	r3, #96	; 0x60
 800261e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262c:	463b      	mov	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	4807      	ldr	r0, [pc, #28]	; (8002650 <MX_TIM4_Init+0xe8>)
 8002634:	f008 f972 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800263e:	f7ff fa7b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002642:	4803      	ldr	r0, [pc, #12]	; (8002650 <MX_TIM4_Init+0xe8>)
 8002644:	f000 fc8e 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002648:	bf00      	nop
 800264a:	3738      	adds	r7, #56	; 0x38
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2400065c 	.word	0x2400065c
 8002654:	40000800 	.word	0x40000800

08002658 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <MX_TIM12_Init+0xc0>)
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <MX_TIM12_Init+0xc4>)
 8002682:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <MX_TIM12_Init+0xc0>)
 8002686:	f240 2225 	movw	r2, #549	; 0x225
 800268a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <MX_TIM12_Init+0xc0>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <MX_TIM12_Init+0xc0>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_TIM12_Init+0xc0>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <MX_TIM12_Init+0xc0>)
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80026a4:	481c      	ldr	r0, [pc, #112]	; (8002718 <MX_TIM12_Init+0xc0>)
 80026a6:	f007 fdbe 	bl	800a226 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80026b0:	f7ff fa42 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	4619      	mov	r1, r3
 80026c0:	4815      	ldr	r0, [pc, #84]	; (8002718 <MX_TIM12_Init+0xc0>)
 80026c2:	f008 fa3f 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80026cc:	f7ff fa34 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026d0:	4811      	ldr	r0, [pc, #68]	; (8002718 <MX_TIM12_Init+0xc0>)
 80026d2:	f007 fe85 	bl	800a3e0 <HAL_TIM_PWM_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80026dc:	f7ff fa2c 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e0:	2360      	movs	r3, #96	; 0x60
 80026e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 80026e4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80026e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <MX_TIM12_Init+0xc0>)
 80026fa:	f008 f90f 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002704:	f7ff fa18 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002708:	4803      	ldr	r0, [pc, #12]	; (8002718 <MX_TIM12_Init+0xc0>)
 800270a:	f000 fc2b 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 800270e:	bf00      	nop
 8002710:	3730      	adds	r7, #48	; 0x30
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	24000908 	.word	0x24000908
 800271c:	40001800 	.word	0x40001800

08002720 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <MX_TIM13_Init+0x94>)
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <MX_TIM13_Init+0x98>)
 800273c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002740:	f240 2225 	movw	r2, #549	; 0x225
 8002744:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <MX_TIM13_Init+0x94>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <MX_TIM13_Init+0x94>)
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800275e:	4815      	ldr	r0, [pc, #84]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002760:	f007 fd61 	bl	800a226 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800276a:	f7ff f9e5 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800276e:	4811      	ldr	r0, [pc, #68]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002770:	f007 fe36 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800277a:	f7ff f9dd 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277e:	2360      	movs	r3, #96	; 0x60
 8002780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002782:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	2200      	movs	r2, #0
 8002794:	4619      	mov	r1, r3
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <MX_TIM13_Init+0x94>)
 8002798:	f008 f8c0 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80027a2:	f7ff f9c9 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <MX_TIM13_Init+0x94>)
 80027a8:	f000 fbdc 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 80027ac:	bf00      	nop
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	2400078c 	.word	0x2400078c
 80027b8:	40001c00 	.word	0x40001c00

080027bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <MX_TIM14_Init+0x94>)
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <MX_TIM14_Init+0x98>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <MX_TIM14_Init+0x94>)
 80027dc:	f240 2225 	movw	r2, #549	; 0x225
 80027e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <MX_TIM14_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <MX_TIM14_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <MX_TIM14_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <MX_TIM14_Init+0x94>)
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027fa:	4815      	ldr	r0, [pc, #84]	; (8002850 <MX_TIM14_Init+0x94>)
 80027fc:	f007 fd13 	bl	800a226 <HAL_TIM_Base_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002806:	f7ff f997 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800280a:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_TIM14_Init+0x94>)
 800280c:	f007 fde8 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002816:	f7ff f98f 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800281e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2200      	movs	r2, #0
 8002830:	4619      	mov	r1, r3
 8002832:	4807      	ldr	r0, [pc, #28]	; (8002850 <MX_TIM14_Init+0x94>)
 8002834:	f008 f872 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800283e:	f7ff f97b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002842:	4803      	ldr	r0, [pc, #12]	; (8002850 <MX_TIM14_Init+0x94>)
 8002844:	f000 fb8e 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002848:	bf00      	nop
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	240008bc 	.word	0x240008bc
 8002854:	40002000 	.word	0x40002000

08002858 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b09c      	sub	sp, #112	; 0x70
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	615a      	str	r2, [r3, #20]
 800288a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2234      	movs	r2, #52	; 0x34
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f00a fb18 	bl	800cec8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <MX_TIM15_Init+0x140>)
 800289a:	4a40      	ldr	r2, [pc, #256]	; (800299c <MX_TIM15_Init+0x144>)
 800289c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <MX_TIM15_Init+0x140>)
 80028a0:	f240 2225 	movw	r2, #549	; 0x225
 80028a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <MX_TIM15_Init+0x140>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80028ac:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <MX_TIM15_Init+0x140>)
 80028ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80028b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b38      	ldr	r3, [pc, #224]	; (8002998 <MX_TIM15_Init+0x140>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <MX_TIM15_Init+0x140>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <MX_TIM15_Init+0x140>)
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80028c6:	4834      	ldr	r0, [pc, #208]	; (8002998 <MX_TIM15_Init+0x140>)
 80028c8:	f007 fcad 	bl	800a226 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80028d2:	f7ff f931 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80028dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80028e0:	4619      	mov	r1, r3
 80028e2:	482d      	ldr	r0, [pc, #180]	; (8002998 <MX_TIM15_Init+0x140>)
 80028e4:	f008 f92e 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80028ee:	f7ff f923 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80028f2:	4829      	ldr	r0, [pc, #164]	; (8002998 <MX_TIM15_Init+0x140>)
 80028f4:	f007 fd74 	bl	800a3e0 <HAL_TIM_PWM_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80028fe:	f7ff f91b 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800290a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800290e:	4619      	mov	r1, r3
 8002910:	4821      	ldr	r0, [pc, #132]	; (8002998 <MX_TIM15_Init+0x140>)
 8002912:	f008 fe77 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 800291c:	f7ff f90c 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002920:	2360      	movs	r3, #96	; 0x60
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	2300      	movs	r3, #0
 800292a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292c:	2300      	movs	r3, #0
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <MX_TIM15_Init+0x140>)
 8002946:	f007 ffe9 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002950:	f7ff f8f2 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <MX_TIM15_Init+0x140>)
 800297c:	f008 fede 	bl	800b73c <HAL_TIMEx_ConfigBreakDeadTime>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002986:	f7ff f8d7 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <MX_TIM15_Init+0x140>)
 800298c:	f000 faea 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002990:	bf00      	nop
 8002992:	3770      	adds	r7, #112	; 0x70
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	240006a8 	.word	0x240006a8
 800299c:	40014000 	.word	0x40014000

080029a0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b094      	sub	sp, #80	; 0x50
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	615a      	str	r2, [r3, #20]
 80029b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ba:	463b      	mov	r3, r7
 80029bc:	2234      	movs	r2, #52	; 0x34
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00a fa81 	bl	800cec8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029c6:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029c8:	4a31      	ldr	r2, [pc, #196]	; (8002a90 <MX_TIM16_Init+0xf0>)
 80029ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029ce:	f240 2225 	movw	r2, #549	; 0x225
 80029d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029f2:	4826      	ldr	r0, [pc, #152]	; (8002a8c <MX_TIM16_Init+0xec>)
 80029f4:	f007 fc17 	bl	800a226 <HAL_TIM_Base_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80029fe:	f7ff f89b 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002a02:	4822      	ldr	r0, [pc, #136]	; (8002a8c <MX_TIM16_Init+0xec>)
 8002a04:	f007 fcec 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002a0e:	f7ff f893 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a12:	2360      	movs	r3, #96	; 0x60
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002a16:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a20:	2300      	movs	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4814      	ldr	r0, [pc, #80]	; (8002a8c <MX_TIM16_Init+0xec>)
 8002a3a:	f007 ff6f 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002a44:	f7ff f878 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <MX_TIM16_Init+0xec>)
 8002a70:	f008 fe64 	bl	800b73c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002a7a:	f7ff f85d 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002a7e:	4803      	ldr	r0, [pc, #12]	; (8002a8c <MX_TIM16_Init+0xec>)
 8002a80:	f000 fa70 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002a84:	bf00      	nop
 8002a86:	3750      	adds	r7, #80	; 0x50
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	24000954 	.word	0x24000954
 8002a90:	40014400 	.word	0x40014400

08002a94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b094      	sub	sp, #80	; 0x50
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aae:	463b      	mov	r3, r7
 8002ab0:	2234      	movs	r2, #52	; 0x34
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00a fa07 	bl	800cec8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002abc:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <MX_TIM17_Init+0xf4>)
 8002abe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002ac2:	f240 2225 	movw	r2, #549	; 0x225
 8002ac6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ae8:	4826      	ldr	r0, [pc, #152]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002aea:	f007 fb9c 	bl	800a226 <HAL_TIM_Base_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002af4:	f7ff f820 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002af8:	4822      	ldr	r0, [pc, #136]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002afa:	f007 fc71 	bl	800a3e0 <HAL_TIM_PWM_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002b04:	f7ff f818 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b08:	2360      	movs	r3, #96	; 0x60
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002b0c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b16:	2300      	movs	r3, #0
 8002b18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4815      	ldr	r0, [pc, #84]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002b30:	f007 fef4 	bl	800a91c <HAL_TIM_PWM_ConfigChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8002b3a:	f7fe fffd 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b60:	463b      	mov	r3, r7
 8002b62:	4619      	mov	r1, r3
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002b66:	f008 fde9 	bl	800b73c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002b70:	f7fe ffe2 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <MX_TIM17_Init+0xf0>)
 8002b76:	f000 f9f5 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002b7a:	bf00      	nop
 8002b7c:	3750      	adds	r7, #80	; 0x50
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	240006f4 	.word	0x240006f4
 8002b88:	40014800 	.word	0x40014800

08002b8c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <MX_TIM23_Init+0x9c>)
 8002bae:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bb2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002bb6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002bd2:	4814      	ldr	r0, [pc, #80]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bd4:	f007 fb27 	bl	800a226 <HAL_TIM_Base_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8002bde:	f7fe ffab 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	480d      	ldr	r0, [pc, #52]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002bf0:	f007 ffa8 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8002bfa:	f7fe ff9d 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4806      	ldr	r0, [pc, #24]	; (8002c24 <MX_TIM23_Init+0x98>)
 8002c0c:	f008 fcfa 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002c16:	f7fe ff8f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	24000870 	.word	0x24000870
 8002c28:	4000e000 	.word	0x4000e000

08002c2c <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <MX_TIM24_Init+0x9c>)
 8002c4e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c52:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002c56:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c60:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c64:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002c72:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c74:	f007 fad7 	bl	800a226 <HAL_TIM_Base_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002c7e:	f7fe ff5b 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002c90:	f007 ff58 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002c9a:	f7fe ff4d 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <MX_TIM24_Init+0x98>)
 8002cac:	f008 fcaa 	bl	800b604 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002cb6:	f7fe ff3f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	24000610 	.word	0x24000610
 8002cc8:	4000e400 	.word	0x4000e400

08002ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b094      	sub	sp, #80	; 0x50
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a91      	ldr	r2, [pc, #580]	; (8002f30 <HAL_TIM_Base_MspInit+0x264>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10f      	bne.n	8002d0e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cee:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf4:	4a8f      	ldr	r2, [pc, #572]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cfe:	4b8d      	ldr	r3, [pc, #564]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002d0c:	e10c      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d10f      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d18:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1e:	4a85      	ldr	r2, [pc, #532]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d28:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d36:	e0f7      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_TIM_Base_MspInit+0x26c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10f      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d42:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d52:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d60:	e0e2      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM4)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_TIM_Base_MspInit+0x270>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d10f      	bne.n	8002d8c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d6c:	4b71      	ldr	r3, [pc, #452]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d72:	4a70      	ldr	r2, [pc, #448]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d7c:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d8a:	e0cd      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM12)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <HAL_TIM_Base_MspInit+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10f      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d9c:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002db4:	e0b8      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM13)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a62      	ldr	r2, [pc, #392]	; (8002f44 <HAL_TIM_Base_MspInit+0x278>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10f      	bne.n	8002de0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002dc0:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc6:	4a5b      	ldr	r2, [pc, #364]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002dde:	e0a3      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM14)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_TIM_Base_MspInit+0x27c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10f      	bne.n	8002e0a <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002dea:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df0:	4a50      	ldr	r2, [pc, #320]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
}
 8002e08:	e08e      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM15)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4f      	ldr	r2, [pc, #316]	; (8002f4c <HAL_TIM_Base_MspInit+0x280>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d12e      	bne.n	8002e72 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002e14:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e1a:	4a46      	ldr	r2, [pc, #280]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e38:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e50:	2308      	movs	r3, #8
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002e60:	2304      	movs	r3, #4
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4839      	ldr	r0, [pc, #228]	; (8002f50 <HAL_TIM_Base_MspInit+0x284>)
 8002e6c:	f003 fec8 	bl	8006c00 <HAL_GPIO_Init>
}
 8002e70:	e05a      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM16)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a37      	ldr	r2, [pc, #220]	; (8002f54 <HAL_TIM_Base_MspInit+0x288>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10f      	bne.n	8002e9c <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e82:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]
}
 8002e9a:	e045      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM17)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <HAL_TIM_Base_MspInit+0x28c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
}
 8002ec4:	e030      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM23)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_TIM_Base_MspInit+0x290>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10f      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002ed2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002edc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002ee2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	e01b      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM24)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_TIM_Base_MspInit+0x294>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d116      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002efc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f06:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_TIM_Base_MspInit+0x268>)
 8002f0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	20a2      	movs	r0, #162	; 0xa2
 8002f1e:	f002 f97a 	bl	8005216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8002f22:	20a2      	movs	r0, #162	; 0xa2
 8002f24:	f002 f991 	bl	800524a <HAL_NVIC_EnableIRQ>
}
 8002f28:	bf00      	nop
 8002f2a:	3750      	adds	r7, #80	; 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40010000 	.word	0x40010000
 8002f34:	58024400 	.word	0x58024400
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40001800 	.word	0x40001800
 8002f44:	40001c00 	.word	0x40001c00
 8002f48:	40002000 	.word	0x40002000
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	58020000 	.word	0x58020000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800
 8002f5c:	4000e000 	.word	0x4000e000
 8002f60:	4000e400 	.word	0x4000e400

08002f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4aa7      	ldr	r2, [pc, #668]	; (8003220 <HAL_TIM_MspPostInit+0x2bc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d120      	bne.n	8002fc8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f86:	4ba7      	ldr	r3, [pc, #668]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	4aa5      	ldr	r2, [pc, #660]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002f8e:	f043 0310 	orr.w	r3, r3, #16
 8002f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f96:	4ba3      	ldr	r3, [pc, #652]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4899      	ldr	r0, [pc, #612]	; (8003228 <HAL_TIM_MspPostInit+0x2c4>)
 8002fc2:	f003 fe1d 	bl	8006c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002fc6:	e16c      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d11f      	bne.n	8003012 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b94      	ldr	r3, [pc, #592]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	4a92      	ldr	r2, [pc, #584]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe2:	4b90      	ldr	r3, [pc, #576]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8002fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003000:	2301      	movs	r3, #1
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003008:	4619      	mov	r1, r3
 800300a:	4888      	ldr	r0, [pc, #544]	; (800322c <HAL_TIM_MspPostInit+0x2c8>)
 800300c:	f003 fdf8 	bl	8006c00 <HAL_GPIO_Init>
}
 8003010:	e147      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a86      	ldr	r2, [pc, #536]	; (8003230 <HAL_TIM_MspPostInit+0x2cc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d11f      	bne.n	800305c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800301c:	4b81      	ldr	r3, [pc, #516]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003022:	4a80      	ldr	r2, [pc, #512]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302c:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800302e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800304a:	2302      	movs	r3, #2
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003052:	4619      	mov	r1, r3
 8003054:	4877      	ldr	r0, [pc, #476]	; (8003234 <HAL_TIM_MspPostInit+0x2d0>)
 8003056:	f003 fdd3 	bl	8006c00 <HAL_GPIO_Init>
}
 800305a:	e122      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM4)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_TIM_MspPostInit+0x2d4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d120      	bne.n	80030a8 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306c:	4a6d      	ldr	r2, [pc, #436]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800306e:	f043 0308 	orr.w	r3, r3, #8
 8003072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003076:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003096:	2302      	movs	r3, #2
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800309e:	4619      	mov	r1, r3
 80030a0:	4866      	ldr	r0, [pc, #408]	; (800323c <HAL_TIM_MspPostInit+0x2d8>)
 80030a2:	f003 fdad 	bl	8006c00 <HAL_GPIO_Init>
}
 80030a6:	e0fc      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM12)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a64      	ldr	r2, [pc, #400]	; (8003240 <HAL_TIM_MspPostInit+0x2dc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d120      	bne.n	80030f4 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	4a5a      	ldr	r2, [pc, #360]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c2:	4b58      	ldr	r3, [pc, #352]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80030c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80030e2:	2302      	movs	r3, #2
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ea:	4619      	mov	r1, r3
 80030ec:	4855      	ldr	r0, [pc, #340]	; (8003244 <HAL_TIM_MspPostInit+0x2e0>)
 80030ee:	f003 fd87 	bl	8006c00 <HAL_GPIO_Init>
}
 80030f2:	e0d6      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM13)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a53      	ldr	r2, [pc, #332]	; (8003248 <HAL_TIM_MspPostInit+0x2e4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d11f      	bne.n	800313e <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	4a47      	ldr	r2, [pc, #284]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310e:	4b45      	ldr	r3, [pc, #276]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800312c:	2309      	movs	r3, #9
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003134:	4619      	mov	r1, r3
 8003136:	483d      	ldr	r0, [pc, #244]	; (800322c <HAL_TIM_MspPostInit+0x2c8>)
 8003138:	f003 fd62 	bl	8006c00 <HAL_GPIO_Init>
}
 800313c:	e0b1      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM14)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a42      	ldr	r2, [pc, #264]	; (800324c <HAL_TIM_MspPostInit+0x2e8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d11f      	bne.n	8003188 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800314a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314e:	4a35      	ldr	r2, [pc, #212]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800315a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003176:	2309      	movs	r3, #9
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800317e:	4619      	mov	r1, r3
 8003180:	482a      	ldr	r0, [pc, #168]	; (800322c <HAL_TIM_MspPostInit+0x2c8>)
 8003182:	f003 fd3d 	bl	8006c00 <HAL_GPIO_Init>
}
 8003186:	e08c      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM15)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a30      	ldr	r2, [pc, #192]	; (8003250 <HAL_TIM_MspPostInit+0x2ec>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d11f      	bne.n	80031d2 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 800319a:	f043 0310 	orr.w	r3, r3, #16
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031b0:	2320      	movs	r3, #32
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80031c0:	2304      	movs	r3, #4
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031c8:	4619      	mov	r1, r3
 80031ca:	4817      	ldr	r0, [pc, #92]	; (8003228 <HAL_TIM_MspPostInit+0x2c4>)
 80031cc:	f003 fd18 	bl	8006c00 <HAL_GPIO_Init>
}
 80031d0:	e067      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM16)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_TIM_MspPostInit+0x2f0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d13d      	bne.n	8003258 <HAL_TIM_MspPostInit+0x2f4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_TIM_MspPostInit+0x2c0>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800320c:	2301      	movs	r3, #1
 800320e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003214:	4619      	mov	r1, r3
 8003216:	480b      	ldr	r0, [pc, #44]	; (8003244 <HAL_TIM_MspPostInit+0x2e0>)
 8003218:	f003 fcf2 	bl	8006c00 <HAL_GPIO_Init>
}
 800321c:	e041      	b.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	58024400 	.word	0x58024400
 8003228:	58021000 	.word	0x58021000
 800322c:	58020000 	.word	0x58020000
 8003230:	40000400 	.word	0x40000400
 8003234:	58020800 	.word	0x58020800
 8003238:	40000800 	.word	0x40000800
 800323c:	58020c00 	.word	0x58020c00
 8003240:	40001800 	.word	0x40001800
 8003244:	58020400 	.word	0x58020400
 8003248:	40001c00 	.word	0x40001c00
 800324c:	40002000 	.word	0x40002000
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
  else if(timHandle->Instance==TIM17)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_TIM_MspPostInit+0x348>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d11f      	bne.n	80032a2 <HAL_TIM_MspPostInit+0x33e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_TIM_MspPostInit+0x34c>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_TIM_MspPostInit+0x34c>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_TIM_MspPostInit+0x34c>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003292:	2301      	movs	r3, #1
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800329a:	4619      	mov	r1, r3
 800329c:	4805      	ldr	r0, [pc, #20]	; (80032b4 <HAL_TIM_MspPostInit+0x350>)
 800329e:	f003 fcaf 	bl	8006c00 <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3748      	adds	r7, #72	; 0x48
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40014800 	.word	0x40014800
 80032b0:	58024400 	.word	0x58024400
 80032b4:	58020400 	.word	0x58020400

080032b8 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <MX_UART4_Init+0x90>)
 80032be:	4a23      	ldr	r2, [pc, #140]	; (800334c <MX_UART4_Init+0x94>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <MX_UART4_Init+0x90>)
 80032c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <MX_UART4_Init+0x90>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <MX_UART4_Init+0x90>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <MX_UART4_Init+0x90>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <MX_UART4_Init+0x90>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <MX_UART4_Init+0x90>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <MX_UART4_Init+0x90>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <MX_UART4_Init+0x90>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <MX_UART4_Init+0x90>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <MX_UART4_Init+0x90>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003300:	4811      	ldr	r0, [pc, #68]	; (8003348 <MX_UART4_Init+0x90>)
 8003302:	f008 fad9 	bl	800b8b8 <HAL_UART_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800330c:	f7fe fc14 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003310:	2100      	movs	r1, #0
 8003312:	480d      	ldr	r0, [pc, #52]	; (8003348 <MX_UART4_Init+0x90>)
 8003314:	f009 fcd6 	bl	800ccc4 <HAL_UARTEx_SetTxFifoThreshold>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800331e:	f7fe fc0b 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003322:	2100      	movs	r1, #0
 8003324:	4808      	ldr	r0, [pc, #32]	; (8003348 <MX_UART4_Init+0x90>)
 8003326:	f009 fd0b 	bl	800cd40 <HAL_UARTEx_SetRxFifoThreshold>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003330:	f7fe fc02 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <MX_UART4_Init+0x90>)
 8003336:	f009 fc8c 	bl	800cc52 <HAL_UARTEx_DisableFifoMode>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003340:	f7fe fbfa 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	24000b38 	.word	0x24000b38
 800334c:	40004c00 	.word	0x40004c00

08003350 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <MX_UART5_Init+0x90>)
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <MX_UART5_Init+0x94>)
 8003358:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <MX_UART5_Init+0x90>)
 800335c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003360:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <MX_UART5_Init+0x90>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <MX_UART5_Init+0x90>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <MX_UART5_Init+0x90>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <MX_UART5_Init+0x90>)
 8003376:	220c      	movs	r2, #12
 8003378:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <MX_UART5_Init+0x90>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <MX_UART5_Init+0x90>)
 8003382:	2200      	movs	r2, #0
 8003384:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <MX_UART5_Init+0x90>)
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <MX_UART5_Init+0x90>)
 800338e:	2200      	movs	r2, #0
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <MX_UART5_Init+0x90>)
 8003394:	2200      	movs	r2, #0
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003398:	4811      	ldr	r0, [pc, #68]	; (80033e0 <MX_UART5_Init+0x90>)
 800339a:	f008 fa8d 	bl	800b8b8 <HAL_UART_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80033a4:	f7fe fbc8 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033a8:	2100      	movs	r1, #0
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <MX_UART5_Init+0x90>)
 80033ac:	f009 fc8a 	bl	800ccc4 <HAL_UARTEx_SetTxFifoThreshold>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80033b6:	f7fe fbbf 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033ba:	2100      	movs	r1, #0
 80033bc:	4808      	ldr	r0, [pc, #32]	; (80033e0 <MX_UART5_Init+0x90>)
 80033be:	f009 fcbf 	bl	800cd40 <HAL_UARTEx_SetRxFifoThreshold>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80033c8:	f7fe fbb6 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80033cc:	4804      	ldr	r0, [pc, #16]	; (80033e0 <MX_UART5_Init+0x90>)
 80033ce:	f009 fc40 	bl	800cc52 <HAL_UARTEx_DisableFifoMode>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80033d8:	f7fe fbae 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	24000aa8 	.word	0x24000aa8
 80033e4:	40005000 	.word	0x40005000

080033e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <MX_USART2_UART_Init+0x90>)
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <MX_USART2_UART_Init+0x94>)
 80033f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <MX_USART2_UART_Init+0x90>)
 80033f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <MX_USART2_UART_Init+0x90>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_USART2_UART_Init+0x90>)
 800340e:	220c      	movs	r2, #12
 8003410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <MX_USART2_UART_Init+0x90>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <MX_USART2_UART_Init+0x90>)
 800342c:	2200      	movs	r2, #0
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003430:	4811      	ldr	r0, [pc, #68]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003432:	f008 fa41 	bl	800b8b8 <HAL_UART_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800343c:	f7fe fb7c 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003440:	2100      	movs	r1, #0
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003444:	f009 fc3e 	bl	800ccc4 <HAL_UARTEx_SetTxFifoThreshold>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800344e:	f7fe fb73 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003452:	2100      	movs	r1, #0
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003456:	f009 fc73 	bl	800cd40 <HAL_UARTEx_SetRxFifoThreshold>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003460:	f7fe fb6a 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <MX_USART2_UART_Init+0x90>)
 8003466:	f009 fbf4 	bl	800cc52 <HAL_UARTEx_DisableFifoMode>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003470:	f7fe fb62 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	24000bc8 	.word	0x24000bc8
 800347c:	40004400 	.word	0x40004400

08003480 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <MX_USART3_UART_Init+0x90>)
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <MX_USART3_UART_Init+0x94>)
 8003488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <MX_USART3_UART_Init+0x90>)
 800348c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <MX_USART3_UART_Init+0x90>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <MX_USART3_UART_Init+0x90>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034a6:	220c      	movs	r2, #12
 80034a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034be:	2200      	movs	r2, #0
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034c8:	4811      	ldr	r0, [pc, #68]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034ca:	f008 f9f5 	bl	800b8b8 <HAL_UART_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80034d4:	f7fe fb30 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034d8:	2100      	movs	r1, #0
 80034da:	480d      	ldr	r0, [pc, #52]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034dc:	f009 fbf2 	bl	800ccc4 <HAL_UARTEx_SetTxFifoThreshold>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80034e6:	f7fe fb27 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034ea:	2100      	movs	r1, #0
 80034ec:	4808      	ldr	r0, [pc, #32]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034ee:	f009 fc27 	bl	800cd40 <HAL_UARTEx_SetRxFifoThreshold>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80034f8:	f7fe fb1e 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80034fc:	4804      	ldr	r0, [pc, #16]	; (8003510 <MX_USART3_UART_Init+0x90>)
 80034fe:	f009 fba8 	bl	800cc52 <HAL_UARTEx_DisableFifoMode>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003508:	f7fe fb16 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	24000a18 	.word	0x24000a18
 8003514:	40004800 	.word	0x40004800

08003518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0bc      	sub	sp, #240	; 0xf0
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003534:	22b4      	movs	r2, #180	; 0xb4
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f009 fcc5 	bl	800cec8 <memset>
  if(uartHandle->Instance==UART4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4aa8      	ldr	r2, [pc, #672]	; (80037e4 <HAL_UART_MspInit+0x2cc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d143      	bne.n	80035d0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003548:	2302      	movs	r3, #2
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003556:	4618      	mov	r0, r3
 8003558:	f004 fcb2 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003562:	f7fe fae9 	bl	8001b38 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003566:	4ba0      	ldr	r3, [pc, #640]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356c:	4a9e      	ldr	r2, [pc, #632]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800356e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003576:	4b9c      	ldr	r3, [pc, #624]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003584:	4b98      	ldr	r3, [pc, #608]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358a:	4a97      	ldr	r2, [pc, #604]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003594:	4b94      	ldr	r3, [pc, #592]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80035bc:	2306      	movs	r3, #6
 80035be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035c6:	4619      	mov	r1, r3
 80035c8:	4888      	ldr	r0, [pc, #544]	; (80037ec <HAL_UART_MspInit+0x2d4>)
 80035ca:	f003 fb19 	bl	8006c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80035ce:	e105      	b.n	80037dc <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==UART5)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a86      	ldr	r2, [pc, #536]	; (80037f0 <HAL_UART_MspInit+0x2d8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d143      	bne.n	8003662 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80035da:	2302      	movs	r3, #2
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e8:	4618      	mov	r0, r3
 80035ea:	f004 fc69 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80035f4:	f7fe faa0 	bl	8001b38 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80035f8:	4b7b      	ldr	r3, [pc, #492]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 80035fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035fe:	4a7a      	ldr	r2, [pc, #488]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003604:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003608:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800360a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361c:	4a72      	ldr	r2, [pc, #456]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003626:	4b70      	ldr	r3, [pc, #448]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003634:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800364e:	230e      	movs	r3, #14
 8003650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003658:	4619      	mov	r1, r3
 800365a:	4866      	ldr	r0, [pc, #408]	; (80037f4 <HAL_UART_MspInit+0x2dc>)
 800365c:	f003 fad0 	bl	8006c00 <HAL_GPIO_Init>
}
 8003660:	e0bc      	b.n	80037dc <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a64      	ldr	r2, [pc, #400]	; (80037f8 <HAL_UART_MspInit+0x2e0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d16f      	bne.n	800374c <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800366c:	2302      	movs	r3, #2
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800367a:	4618      	mov	r0, r3
 800367c:	f004 fc20 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8003686:	f7fe fa57 	bl	8001b38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800368a:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800368c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003690:	4a55      	ldr	r2, [pc, #340]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800369c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ae:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 80036ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036c6:	2360      	movs	r3, #96	; 0x60
 80036c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036de:	2307      	movs	r3, #7
 80036e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036e8:	4619      	mov	r1, r3
 80036ea:	4844      	ldr	r0, [pc, #272]	; (80037fc <HAL_UART_MspInit+0x2e4>)
 80036ec:	f003 fa88 	bl	8006c00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 80036f2:	4a44      	ldr	r2, [pc, #272]	; (8003804 <HAL_UART_MspInit+0x2ec>)
 80036f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 80036f8:	222b      	movs	r2, #43	; 0x2b
 80036fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003702:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003704:	2200      	movs	r2, #0
 8003706:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 800370a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003712:	2200      	movs	r2, #0
 8003714:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800371c:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003728:	4b35      	ldr	r3, [pc, #212]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 800372a:	2200      	movs	r2, #0
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800372e:	4834      	ldr	r0, [pc, #208]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003730:	f001 fda6 	bl	8005280 <HAL_DMA_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800373a:	f7fe f9fd 	bl	8001b38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003742:	67da      	str	r2, [r3, #124]	; 0x7c
 8003744:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_UART_MspInit+0x2e8>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6393      	str	r3, [r2, #56]	; 0x38
}
 800374a:	e047      	b.n	80037dc <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <HAL_UART_MspInit+0x2f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d142      	bne.n	80037dc <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003756:	2302      	movs	r3, #2
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fbab 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003770:	f7fe f9e2 	bl	8001b38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377a:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003780:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_UART_MspInit+0x2d0>)
 80037a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037ca:	2307      	movs	r3, #7
 80037cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037d4:	4619      	mov	r1, r3
 80037d6:	4807      	ldr	r0, [pc, #28]	; (80037f4 <HAL_UART_MspInit+0x2dc>)
 80037d8:	f003 fa12 	bl	8006c00 <HAL_GPIO_Init>
}
 80037dc:	bf00      	nop
 80037de:	37f0      	adds	r7, #240	; 0xf0
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40004c00 	.word	0x40004c00
 80037e8:	58024400 	.word	0x58024400
 80037ec:	58020000 	.word	0x58020000
 80037f0:	40005000 	.word	0x40005000
 80037f4:	58020400 	.word	0x58020400
 80037f8:	40004400 	.word	0x40004400
 80037fc:	58020c00 	.word	0x58020c00
 8003800:	240009a0 	.word	0x240009a0
 8003804:	40020010 	.word	0x40020010
 8003808:	40004800 	.word	0x40004800

0800380c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800380c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003810:	f7fe fc94 	bl	800213c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003816:	490d      	ldr	r1, [pc, #52]	; (800384c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800381c:	e002      	b.n	8003824 <LoopCopyDataInit>

0800381e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003822:	3304      	adds	r3, #4

08003824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003828:	d3f9      	bcc.n	800381e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800382c:	4c0a      	ldr	r4, [pc, #40]	; (8003858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003830:	e001      	b.n	8003836 <LoopFillZerobss>

08003832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003834:	3204      	adds	r2, #4

08003836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003838:	d3fb      	bcc.n	8003832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800383a:	f009 fb13 	bl	800ce64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800383e:	f7fd feff 	bl	8001640 <main>
  bx  lr
 8003842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003844:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800384c:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003850:	08010920 	.word	0x08010920
  ldr r2, =_sbss
 8003854:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8003858:	24000c6c 	.word	0x24000c6c

0800385c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800385c:	e7fe      	b.n	800385c <ADC3_IRQHandler>
	...

08003860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003866:	2003      	movs	r0, #3
 8003868:	f001 fcca 	bl	8005200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800386c:	f004 f936 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_Init+0x68>)
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	4913      	ldr	r1, [pc, #76]	; (80038cc <HAL_Init+0x6c>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
 8003888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <HAL_Init+0x68>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_Init+0x6c>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <HAL_Init+0x70>)
 80038a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_Init+0x74>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038aa:	2000      	movs	r0, #0
 80038ac:	f000 f814 	bl	80038d8 <HAL_InitTick>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e002      	b.n	80038c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038ba:	f7fe fb1f 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58024400 	.word	0x58024400
 80038cc:	08010310 	.word	0x08010310
 80038d0:	24000014 	.word	0x24000014
 80038d4:	24000010 	.word	0x24000010

080038d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_InitTick+0x60>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e021      	b.n	8003930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_InitTick+0x64>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_InitTick+0x60>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fcaf 	bl	8005266 <HAL_SYSTICK_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e00e      	b.n	8003930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d80a      	bhi.n	800392e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003918:	2200      	movs	r2, #0
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f001 fc79 	bl	8005216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <HAL_InitTick+0x68>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2400001c 	.word	0x2400001c
 800393c:	24000010 	.word	0x24000010
 8003940:	24000018 	.word	0x24000018

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2400001c 	.word	0x2400001c
 8003968:	24000c58 	.word	0x24000c58

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	24000c58 	.word	0x24000c58

08003984 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3360      	adds	r3, #96	; 0x60
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <LL_ADC_SetOffset+0x60>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10b      	bne.n	8003a28 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a26:	e00b      	b.n	8003a40 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	58026000 	.word	0x58026000

08003a50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3360      	adds	r3, #96	; 0x60
 8003a5e:	461a      	mov	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3360      	adds	r3, #96	; 0x60
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	601a      	str	r2, [r3, #0]
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	58026000 	.word	0x58026000

08003af4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <LL_ADC_SetOffsetSaturation+0x40>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10e      	bne.n	8003b26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3360      	adds	r3, #96	; 0x60
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	58026000 	.word	0x58026000

08003b38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <LL_ADC_SetOffsetSign+0x40>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10e      	bne.n	8003b6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58026000 	.word	0x58026000

08003b7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3360      	adds	r3, #96	; 0x60
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <LL_ADC_SetOffsetState+0x50>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003bae:	e007      	b.n	8003bc0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	58026000 	.word	0x58026000

08003bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3330      	adds	r3, #48	; 0x30
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	4413      	add	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	211f      	movs	r1, #31
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0e9b      	lsrs	r3, r3, #26
 8003c08:	f003 011f 	and.w	r1, r3, #31
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	431a      	orrs	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3314      	adds	r3, #20
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	0e5b      	lsrs	r3, r3, #25
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	0d1b      	lsrs	r3, r3, #20
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2107      	movs	r1, #7
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0d1b      	lsrs	r3, r3, #20
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d115      	bne.n	8003cc0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0318 	and.w	r3, r3, #24
 8003caa:	4914      	ldr	r1, [pc, #80]	; (8003cfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003cac:	40d9      	lsrs	r1, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003cbe:	e014      	b.n	8003cea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0318 	and.w	r3, r3, #24
 8003cd6:	4909      	ldr	r1, [pc, #36]	; (8003cfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003cd8:	40d9      	lsrs	r1, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	400b      	ands	r3, r1
 8003cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	58026000 	.word	0x58026000
 8003cfc:	000fffff 	.word	0x000fffff

08003d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6093      	str	r3, [r2, #8]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	5fffffc0 	.word	0x5fffffc0

08003d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d101      	bne.n	8003d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	6fffffc0 	.word	0x6fffffc0

08003d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d88:	d101      	bne.n	8003d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <LL_ADC_IsEnabled+0x18>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <LL_ADC_IsEnabled+0x1a>
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d101      	bne.n	8003dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d101      	bne.n	8003e00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e1ee      	b.n	8004208 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fd faa9 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff67 	bl	8003d24 <LL_ADC_IsDeepPowerDownEnabled>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff4d 	bl	8003d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff82 	bl	8003d74 <LL_ADC_IsInternalRegulatorEnabled>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d114      	bne.n	8003ea0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff66 	bl	8003d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e80:	4b8e      	ldr	r3, [pc, #568]	; (80040bc <HAL_ADC_Init+0x2ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	4a8e      	ldr	r2, [pc, #568]	; (80040c0 <HAL_ADC_Init+0x2b0>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e92:	e002      	b.n	8003e9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f9      	bne.n	8003e94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff65 	bl	8003d74 <LL_ADC_IsInternalRegulatorEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f043 0210 	orr.w	r2, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff76 	bl	8003dc2 <LL_ADC_REG_IsConversionOngoing>
 8003ed6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 8188 	bne.w	80041f6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 8184 	bne.w	80041f6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff4a 	bl	8003d9c <LL_ADC_IsEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d136      	bne.n	8003f7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6c      	ldr	r2, [pc, #432]	; (80040c4 <HAL_ADC_Init+0x2b4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_ADC_Init+0x112>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6a      	ldr	r2, [pc, #424]	; (80040c8 <HAL_ADC_Init+0x2b8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10e      	bne.n	8003f40 <HAL_ADC_Init+0x130>
 8003f22:	4868      	ldr	r0, [pc, #416]	; (80040c4 <HAL_ADC_Init+0x2b4>)
 8003f24:	f7ff ff3a 	bl	8003d9c <LL_ADC_IsEnabled>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	4867      	ldr	r0, [pc, #412]	; (80040c8 <HAL_ADC_Init+0x2b8>)
 8003f2c:	f7ff ff36 	bl	8003d9c <LL_ADC_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4323      	orrs	r3, r4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e008      	b.n	8003f52 <HAL_ADC_Init+0x142>
 8003f40:	4862      	ldr	r0, [pc, #392]	; (80040cc <HAL_ADC_Init+0x2bc>)
 8003f42:	f7ff ff2b 	bl	8003d9c <LL_ADC_IsEnabled>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5a      	ldr	r2, [pc, #360]	; (80040c4 <HAL_ADC_Init+0x2b4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_ADC_Init+0x15a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_ADC_Init+0x2b8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_Init+0x15e>
 8003f6a:	4a59      	ldr	r2, [pc, #356]	; (80040d0 <HAL_ADC_Init+0x2c0>)
 8003f6c:	e000      	b.n	8003f70 <HAL_ADC_Init+0x160>
 8003f6e:	4a59      	ldr	r2, [pc, #356]	; (80040d4 <HAL_ADC_Init+0x2c4>)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7ff fd04 	bl	8003984 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_ADC_Init+0x2bc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d129      	bne.n	8003fda <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7e5b      	ldrb	r3, [r3, #25]
 8003f8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f90:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003f96:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d013      	beq.n	8003fc8 <HAL_ADC_Init+0x1b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_ADC_Init+0x1b4>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b1c      	cmp	r3, #28
 8003fae:	d007      	beq.n	8003fc0 <HAL_ADC_Init+0x1b0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b18      	cmp	r3, #24
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_Init+0x1ac>
 8003fb8:	2318      	movs	r3, #24
 8003fba:	e006      	b.n	8003fca <HAL_ADC_Init+0x1ba>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e004      	b.n	8003fca <HAL_ADC_Init+0x1ba>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	e002      	b.n	8003fca <HAL_ADC_Init+0x1ba>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	e000      	b.n	8003fca <HAL_ADC_Init+0x1ba>
 8003fc8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003fca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e00e      	b.n	8003ff8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7e5b      	ldrb	r3, [r3, #25]
 8003fde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fe4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003fea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d106      	bne.n	8004010 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	045b      	lsls	r3, r3, #17
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <HAL_ADC_Init+0x2bc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d115      	bne.n	8004062 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <HAL_ADC_Init+0x2c8>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	430b      	orrs	r3, r1
 8004048:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	611a      	str	r2, [r3, #16]
 8004060:	e009      	b.n	8004076 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_ADC_Init+0x2cc>)
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	69b9      	ldr	r1, [r7, #24]
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fea1 	bl	8003dc2 <LL_ADC_REG_IsConversionOngoing>
 8004080:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff feae 	bl	8003de8 <LL_ADC_INJ_IsConversionOngoing>
 800408c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 808e 	bne.w	80041b2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 808a 	bne.w	80041b2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <HAL_ADC_Init+0x2bc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d11b      	bne.n	80040e0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7e1b      	ldrb	r3, [r3, #24]
 80040ac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040b4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e018      	b.n	80040ee <HAL_ADC_Init+0x2de>
 80040bc:	24000010 	.word	0x24000010
 80040c0:	053e2d63 	.word	0x053e2d63
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40022100 	.word	0x40022100
 80040cc:	58026000 	.word	0x58026000
 80040d0:	40022300 	.word	0x40022300
 80040d4:	58026300 	.word	0x58026300
 80040d8:	fff04007 	.word	0xfff04007
 80040dc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7e1b      	ldrb	r3, [r3, #24]
 80040e4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_ADC_Init+0x400>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	430b      	orrs	r3, r1
 8004100:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004108:	2b01      	cmp	r3, #1
 800410a:	d137      	bne.n	800417c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3f      	ldr	r2, [pc, #252]	; (8004214 <HAL_ADC_Init+0x404>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d116      	bne.n	800414a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_ADC_Init+0x408>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004134:	4311      	orrs	r1, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800413a:	430a      	orrs	r2, r1
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	611a      	str	r2, [r3, #16]
 8004148:	e020      	b.n	800418c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_ADC_Init+0x40c>)
 8004152:	4013      	ands	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004158:	3a01      	subs	r2, #1
 800415a:	0411      	lsls	r1, r2, #16
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800416c:	430a      	orrs	r2, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	e007      	b.n	800418c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_ADC_Init+0x404>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d002      	beq.n	80041b2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fd63 	bl	8004c78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10c      	bne.n	80041d4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f023 010f 	bic.w	r1, r3, #15
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
 80041d2:	e007      	b.n	80041e4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020f 	bic.w	r2, r2, #15
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	f023 0303 	bic.w	r3, r3, #3
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
 80041f4:	e007      	b.n	8004206 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004206:	7ffb      	ldrb	r3, [r7, #31]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3724      	adds	r7, #36	; 0x24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	ffffbffc 	.word	0xffffbffc
 8004214:	58026000 	.word	0x58026000
 8004218:	fc00f81f 	.word	0xfc00f81f
 800421c:	fc00f81e 	.word	0xfc00f81e

08004220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b0b9      	sub	sp, #228	; 0xe4
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4ab3      	ldr	r2, [pc, #716]	; (8004510 <HAL_ADC_ConfigChannel+0x2f0>)
 8004242:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x34>
 800424e:	2302      	movs	r3, #2
 8004250:	f000 bcfa 	b.w	8004c48 <HAL_ADC_ConfigChannel+0xa28>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fdae 	bl	8003dc2 <LL_ADC_REG_IsConversionOngoing>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 84de 	bne.w	8004c2a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4aa8      	ldr	r2, [pc, #672]	; (8004514 <HAL_ADC_ConfigChannel+0x2f4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d033      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x76>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	e01d      	b.n	80042d2 <HAL_ADC_ConfigChannel+0xb2>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e004      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80042be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2201      	movs	r2, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	69d1      	ldr	r1, [r2, #28]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f7ff fc6f 	bl	8003bd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fd63 	bl	8003dc2 <LL_ADC_REG_IsConversionOngoing>
 80042fc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fd6f 	bl	8003de8 <LL_ADC_INJ_IsConversionOngoing>
 800430a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800430e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 8270 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 826b 	bne.w	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	461a      	mov	r2, r3
 8004330:	f7ff fc7a 	bl	8003c28 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a76      	ldr	r2, [pc, #472]	; (8004514 <HAL_ADC_ConfigChannel+0x2f4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10d      	bne.n	800435a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004358:	e032      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800435a:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_ADC_ConfigChannel+0x2f8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004366:	d10b      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x160>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	e01d      	b.n	80043bc <HAL_ADC_ConfigChannel+0x19c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x186>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	e00a      	b.n	80043bc <HAL_ADC_ConfigChannel+0x19c>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d048      	beq.n	800445a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6919      	ldr	r1, [r3, #16]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d8:	f7ff fb08 	bl	80039ec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a4c      	ldr	r2, [pc, #304]	; (8004514 <HAL_ADC_ConfigChannel+0x2f4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d119      	bne.n	800441a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6919      	ldr	r1, [r3, #16]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7ff fba0 	bl	8003b38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6919      	ldr	r1, [r3, #16]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x1f0>
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	e000      	b.n	8004412 <HAL_ADC_ConfigChannel+0x1f2>
 8004410:	2300      	movs	r3, #0
 8004412:	461a      	mov	r2, r3
 8004414:	f7ff fb6e 	bl	8003af4 <LL_ADC_SetOffsetSaturation>
 8004418:	e1ee      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6919      	ldr	r1, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x212>
 800442c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004430:	e000      	b.n	8004434 <HAL_ADC_ConfigChannel+0x214>
 8004432:	2300      	movs	r3, #0
 8004434:	461a      	mov	r2, r3
 8004436:	f7ff fb3b 	bl	8003ab0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	7e1b      	ldrb	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x230>
 800444a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800444e:	e000      	b.n	8004452 <HAL_ADC_ConfigChannel+0x232>
 8004450:	2300      	movs	r3, #0
 8004452:	461a      	mov	r2, r3
 8004454:	f7ff fb12 	bl	8003a7c <LL_ADC_SetDataRightShift>
 8004458:	e1ce      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2d      	ldr	r2, [pc, #180]	; (8004514 <HAL_ADC_ConfigChannel+0x2f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	f040 8181 	bne.w	8004768 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff faef 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x272>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fae4 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	e01e      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x2b0>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fad9 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800449e:	4603      	mov	r3, r0
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80044b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80044b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e004      	b.n	80044ce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80044c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x2c8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	e01e      	b.n	8004526 <HAL_ADC_ConfigChannel+0x306>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80044fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800450c:	2320      	movs	r3, #32
 800450e:	e00a      	b.n	8004526 <HAL_ADC_ConfigChannel+0x306>
 8004510:	47ff0000 	.word	0x47ff0000
 8004514:	58026000 	.word	0x58026000
 8004518:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 800451c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	429a      	cmp	r2, r3
 8004528:	d106      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fb22 	bl	8003b7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fa86 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004544:	4603      	mov	r3, r0
 8004546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x344>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fa7b 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	f003 021f 	and.w	r2, r3, #31
 8004562:	e01e      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x382>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fa70 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004570:	4603      	mov	r3, r0
 8004572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800458a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004592:	2320      	movs	r3, #32
 8004594:	e004      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x39a>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	0e9b      	lsrs	r3, r3, #26
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	e018      	b.n	80045ec <HAL_ADC_ConfigChannel+0x3cc>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80045ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80045d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80045de:	2320      	movs	r3, #32
 80045e0:	e004      	b.n	80045ec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80045e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d106      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fabf 	bl	8003b7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fa23 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800460a:	4603      	mov	r3, r0
 800460c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <HAL_ADC_ConfigChannel+0x40a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fa18 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004620:	4603      	mov	r3, r0
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	e01e      	b.n	8004668 <HAL_ADC_ConfigChannel+0x448>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2102      	movs	r1, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fa0d 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004636:	4603      	mov	r3, r0
 8004638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800464c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	e004      	b.n	8004666 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800465c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x460>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	e014      	b.n	80046aa <HAL_ADC_ConfigChannel+0x48a>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800468e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800469c:	2320      	movs	r3, #32
 800469e:	e004      	b.n	80046aa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80046a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d106      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fa60 	bl	8003b7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2103      	movs	r1, #3
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f9c4 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x4c8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2103      	movs	r1, #3
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff f9b9 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80046de:	4603      	mov	r3, r0
 80046e0:	0e9b      	lsrs	r3, r3, #26
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	e017      	b.n	8004718 <HAL_ADC_ConfigChannel+0x4f8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2103      	movs	r1, #3
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff f9ae 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80046f4:	4603      	mov	r3, r0
 80046f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e003      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800470e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x510>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	0e9b      	lsrs	r3, r3, #26
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	e011      	b.n	8004754 <HAL_ADC_ConfigChannel+0x534>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800473e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004740:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004748:	2320      	movs	r3, #32
 800474a:	e003      	b.n	8004754 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800474c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	429a      	cmp	r2, r3
 8004756:	d14f      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2103      	movs	r1, #3
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fa0b 	bl	8003b7c <LL_ADC_SetOffsetState>
 8004766:	e047      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	069b      	lsls	r3, r3, #26
 8004778:	429a      	cmp	r2, r3
 800477a:	d107      	bne.n	800478c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800478a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	069b      	lsls	r3, r3, #26
 800479c:	429a      	cmp	r2, r3
 800479e:	d107      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	069b      	lsls	r3, r3, #26
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	069b      	lsls	r3, r3, #26
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff facd 	bl	8003d9c <LL_ADC_IsEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8219 	bne.w	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f7ff fa32 	bl	8003c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4aa1      	ldr	r2, [pc, #644]	; (8004aa8 <HAL_ADC_ConfigChannel+0x888>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f040 812e 	bne.w	8004a84 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x630>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	3301      	adds	r3, #1
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b09      	cmp	r3, #9
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e019      	b.n	8004884 <HAL_ADC_ConfigChannel+0x664>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800485e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004860:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004868:	2320      	movs	r3, #32
 800486a:	e003      	b.n	8004874 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2b09      	cmp	r3, #9
 800487c:	bf94      	ite	ls
 800487e:	2301      	movls	r3, #1
 8004880:	2300      	movhi	r3, #0
 8004882:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004884:	2b00      	cmp	r3, #0
 8004886:	d079      	beq.n	800497c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x684>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	3301      	adds	r3, #1
 800489c:	069b      	lsls	r3, r3, #26
 800489e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a2:	e015      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x6b0>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e003      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	069b      	lsls	r3, r3, #26
 80048cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x6d0>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	3301      	adds	r3, #1
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	e017      	b.n	8004920 <HAL_ADC_ConfigChannel+0x700>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004908:	2320      	movs	r3, #32
 800490a:	e003      	b.n	8004914 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	3301      	adds	r3, #1
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2101      	movs	r1, #1
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	ea42 0103 	orr.w	r1, r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x726>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0e9b      	lsrs	r3, r3, #26
 8004936:	3301      	adds	r3, #1
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	051b      	lsls	r3, r3, #20
 8004944:	e018      	b.n	8004978 <HAL_ADC_ConfigChannel+0x758>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800495e:	2320      	movs	r3, #32
 8004960:	e003      	b.n	800496a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3301      	adds	r3, #1
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004978:	430b      	orrs	r3, r1
 800497a:	e07e      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x778>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0e9b      	lsrs	r3, r3, #26
 800498e:	3301      	adds	r3, #1
 8004990:	069b      	lsls	r3, r3, #26
 8004992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004996:	e015      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x7a4>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	069b      	lsls	r3, r3, #26
 80049c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7c4>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	e017      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x7f4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	61bb      	str	r3, [r7, #24]
  return result;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x820>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4613      	mov	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	4413      	add	r3, r2
 8004a36:	3b1e      	subs	r3, #30
 8004a38:	051b      	lsls	r3, r3, #20
 8004a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	e01b      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x858>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
  return result;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004a58:	2320      	movs	r3, #32
 8004a5a:	e003      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3301      	adds	r3, #1
 8004a66:	f003 021f 	and.w	r2, r3, #31
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b1e      	subs	r3, #30
 8004a72:	051b      	lsls	r3, r3, #20
 8004a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7ff f8d2 	bl	8003c28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f280 80d7 	bge.w	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a06      	ldr	r2, [pc, #24]	; (8004aac <HAL_ADC_ConfigChannel+0x88c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_ADC_ConfigChannel+0x882>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_ADC_ConfigChannel+0x890>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10a      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x898>
 8004aa2:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <HAL_ADC_ConfigChannel+0x894>)
 8004aa4:	e009      	b.n	8004aba <HAL_ADC_ConfigChannel+0x89a>
 8004aa6:	bf00      	nop
 8004aa8:	47ff0000 	.word	0x47ff0000
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40022100 	.word	0x40022100
 8004ab4:	40022300 	.word	0x40022300
 8004ab8:	4b65      	ldr	r3, [pc, #404]	; (8004c50 <HAL_ADC_ConfigChannel+0xa30>)
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe ff88 	bl	80039d0 <LL_ADC_GetCommonPathInternalCh>
 8004ac0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a62      	ldr	r2, [pc, #392]	; (8004c54 <HAL_ADC_ConfigChannel+0xa34>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_ADC_ConfigChannel+0x8b8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a61      	ldr	r2, [pc, #388]	; (8004c58 <HAL_ADC_ConfigChannel+0xa38>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10e      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x8d6>
 8004ad8:	485e      	ldr	r0, [pc, #376]	; (8004c54 <HAL_ADC_ConfigChannel+0xa34>)
 8004ada:	f7ff f95f 	bl	8003d9c <LL_ADC_IsEnabled>
 8004ade:	4604      	mov	r4, r0
 8004ae0:	485d      	ldr	r0, [pc, #372]	; (8004c58 <HAL_ADC_ConfigChannel+0xa38>)
 8004ae2:	f7ff f95b 	bl	8003d9c <LL_ADC_IsEnabled>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4323      	orrs	r3, r4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e008      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x8e8>
 8004af6:	4859      	ldr	r0, [pc, #356]	; (8004c5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004af8:	f7ff f950 	bl	8003d9c <LL_ADC_IsEnabled>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8084 	beq.w	8004c16 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <HAL_ADC_ConfigChannel+0xa40>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d132      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x95e>
 8004b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d12c      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	f040 8086 	bne.w	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a47      	ldr	r2, [pc, #284]	; (8004c54 <HAL_ADC_ConfigChannel+0xa34>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0x924>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a46      	ldr	r2, [pc, #280]	; (8004c58 <HAL_ADC_ConfigChannel+0xa38>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x928>
 8004b44:	4a47      	ldr	r2, [pc, #284]	; (8004c64 <HAL_ADC_ConfigChannel+0xa44>)
 8004b46:	e000      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x92a>
 8004b48:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <HAL_ADC_ConfigChannel+0xa30>)
 8004b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fe ff28 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_ADC_ConfigChannel+0xa48>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <HAL_ADC_ConfigChannel+0xa4c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	3301      	adds	r3, #1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b6e:	e002      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f9      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b7c:	e05e      	b.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <HAL_ADC_ConfigChannel+0xa50>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d120      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x9aa>
 8004b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11a      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a30      	ldr	r2, [pc, #192]	; (8004c5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d14e      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <HAL_ADC_ConfigChannel+0xa34>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_ADC_ConfigChannel+0x992>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <HAL_ADC_ConfigChannel+0xa38>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x996>
 8004bb2:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <HAL_ADC_ConfigChannel+0xa44>)
 8004bb4:	e000      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x998>
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <HAL_ADC_ConfigChannel+0xa30>)
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f7fe fef1 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bc8:	e038      	b.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <HAL_ADC_ConfigChannel+0xa54>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d133      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
 8004bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d12d      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d128      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_ADC_ConfigChannel+0xa34>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x9de>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <HAL_ADC_ConfigChannel+0xa38>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x9e2>
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_ADC_ConfigChannel+0xa44>)
 8004c00:	e000      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x9e4>
 8004c02:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <HAL_ADC_ConfigChannel+0xa30>)
 8004c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f7fe fecb 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
 8004c14:	e012      	b.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004c28:	e008      	b.n	8004c3c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c44:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	37e4      	adds	r7, #228	; 0xe4
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	58026300 	.word	0x58026300
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40022100 	.word	0x40022100
 8004c5c:	58026000 	.word	0x58026000
 8004c60:	c7520000 	.word	0xc7520000
 8004c64:	40022300 	.word	0x40022300
 8004c68:	24000010 	.word	0x24000010
 8004c6c:	053e2d63 	.word	0x053e2d63
 8004c70:	c3210000 	.word	0xc3210000
 8004c74:	cb840000 	.word	0xcb840000

08004c78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6b      	ldr	r2, [pc, #428]	; (8004e34 <ADC_ConfigureBoostMode+0x1bc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <ADC_ConfigureBoostMode+0x1c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6a      	ldr	r2, [pc, #424]	; (8004e38 <ADC_ConfigureBoostMode+0x1c0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d109      	bne.n	8004ca8 <ADC_ConfigureBoostMode+0x30>
 8004c94:	4b69      	ldr	r3, [pc, #420]	; (8004e3c <ADC_ConfigureBoostMode+0x1c4>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <ADC_ConfigureBoostMode+0x42>
 8004ca8:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <ADC_ConfigureBoostMode+0x1c8>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01c      	beq.n	8004cf8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004cbe:	f003 f887 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8004cc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ccc:	d010      	beq.n	8004cf0 <ADC_ConfigureBoostMode+0x78>
 8004cce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cd2:	d871      	bhi.n	8004db8 <ADC_ConfigureBoostMode+0x140>
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd8:	d002      	beq.n	8004ce0 <ADC_ConfigureBoostMode+0x68>
 8004cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cde:	d16b      	bne.n	8004db8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	60fb      	str	r3, [r7, #12]
        break;
 8004cee:	e066      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	60fb      	str	r3, [r7, #12]
        break;
 8004cf6:	e062      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004cf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004cfc:	f003 ffda 	bl	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d0a:	d051      	beq.n	8004db0 <ADC_ConfigureBoostMode+0x138>
 8004d0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d10:	d854      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d16:	d047      	beq.n	8004da8 <ADC_ConfigureBoostMode+0x130>
 8004d18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d1c:	d84e      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d22:	d03d      	beq.n	8004da0 <ADC_ConfigureBoostMode+0x128>
 8004d24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d28:	d848      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d2e:	d033      	beq.n	8004d98 <ADC_ConfigureBoostMode+0x120>
 8004d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d34:	d842      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d3a:	d029      	beq.n	8004d90 <ADC_ConfigureBoostMode+0x118>
 8004d3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d40:	d83c      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d46:	d01a      	beq.n	8004d7e <ADC_ConfigureBoostMode+0x106>
 8004d48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d4c:	d836      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d52:	d014      	beq.n	8004d7e <ADC_ConfigureBoostMode+0x106>
 8004d54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d58:	d830      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5e:	d00e      	beq.n	8004d7e <ADC_ConfigureBoostMode+0x106>
 8004d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d64:	d82a      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d6a:	d008      	beq.n	8004d7e <ADC_ConfigureBoostMode+0x106>
 8004d6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d70:	d824      	bhi.n	8004dbc <ADC_ConfigureBoostMode+0x144>
 8004d72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d76:	d002      	beq.n	8004d7e <ADC_ConfigureBoostMode+0x106>
 8004d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d7c:	d11e      	bne.n	8004dbc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	0c9b      	lsrs	r3, r3, #18
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	60fb      	str	r3, [r7, #12]
        break;
 8004d8e:	e016      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
        break;
 8004d96:	e012      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	60fb      	str	r3, [r7, #12]
        break;
 8004d9e:	e00e      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	60fb      	str	r3, [r7, #12]
        break;
 8004da6:	e00a      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	60fb      	str	r3, [r7, #12]
        break;
 8004dae:	e006      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	60fb      	str	r3, [r7, #12]
        break;
 8004db6:	e002      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
        break;
 8004db8:	bf00      	nop
 8004dba:	e000      	b.n	8004dbe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004dbc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <ADC_ConfigureBoostMode+0x1cc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d808      	bhi.n	8004dde <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dda:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ddc:	e025      	b.n	8004e2a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <ADC_ConfigureBoostMode+0x1d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d80a      	bhi.n	8004dfc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	e016      	b.n	8004e2a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <ADC_ConfigureBoostMode+0x1d4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d80a      	bhi.n	8004e1a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	e007      	b.n	8004e2a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40022000 	.word	0x40022000
 8004e38:	40022100 	.word	0x40022100
 8004e3c:	40022300 	.word	0x40022300
 8004e40:	58026300 	.word	0x58026300
 8004e44:	005f5e10 	.word	0x005f5e10
 8004e48:	00bebc20 	.word	0x00bebc20
 8004e4c:	017d7840 	.word	0x017d7840

08004e50 <LL_ADC_IsEnabled>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <LL_ADC_IsEnabled+0x18>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <LL_ADC_IsEnabled+0x1a>
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d101      	bne.n	8004e8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b0a3      	sub	sp, #140	; 0x8c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0c1      	b.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5e      	ldr	r2, [pc, #376]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d102      	bne.n	8004eda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ed4:	4b5d      	ldr	r3, [pc, #372]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e001      	b.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0a0      	b.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff ffb9 	bl	8004e76 <LL_ADC_REG_IsConversionOngoing>
 8004f04:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ffb2 	bl	8004e76 <LL_ADC_REG_IsConversionOngoing>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8081 	bne.w	800501c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d17c      	bne.n	800501c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a48      	ldr	r2, [pc, #288]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a46      	ldr	r2, [pc, #280]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004f36:	4b46      	ldr	r3, [pc, #280]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f38:	e000      	b.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f3c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d039      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a39      	ldr	r2, [pc, #228]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10e      	bne.n	8004f8a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004f6c:	4836      	ldr	r0, [pc, #216]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f6e:	f7ff ff6f 	bl	8004e50 <LL_ADC_IsEnabled>
 8004f72:	4604      	mov	r4, r0
 8004f74:	4835      	ldr	r0, [pc, #212]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f76:	f7ff ff6b 	bl	8004e50 <LL_ADC_IsEnabled>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4323      	orrs	r3, r4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e008      	b.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f8a:	4833      	ldr	r0, [pc, #204]	; (8005058 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f8c:	f7ff ff60 	bl	8004e50 <LL_ADC_IsEnabled>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d047      	beq.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	6811      	ldr	r1, [r2, #0]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fb8:	e03a      	b.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004fda:	481b      	ldr	r0, [pc, #108]	; (8005048 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fdc:	f7ff ff38 	bl	8004e50 <LL_ADC_IsEnabled>
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	481a      	ldr	r0, [pc, #104]	; (800504c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fe4:	f7ff ff34 	bl	8004e50 <LL_ADC_IsEnabled>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4323      	orrs	r3, r4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e008      	b.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ff8:	4817      	ldr	r0, [pc, #92]	; (8005058 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ffa:	f7ff ff29 	bl	8004e50 <LL_ADC_IsEnabled>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800500e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005014:	4013      	ands	r3, r2
 8005016:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005018:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800501a:	e009      	b.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800502e:	e000      	b.n	8005032 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800503a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800503e:	4618      	mov	r0, r3
 8005040:	378c      	adds	r7, #140	; 0x8c
 8005042:	46bd      	mov	sp, r7
 8005044:	bd90      	pop	{r4, r7, pc}
 8005046:	bf00      	nop
 8005048:	40022000 	.word	0x40022000
 800504c:	40022100 	.word	0x40022100
 8005050:	40022300 	.word	0x40022300
 8005054:	58026300 	.word	0x58026300
 8005058:	58026000 	.word	0x58026000
 800505c:	fffff0e0 	.word	0xfffff0e0

08005060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800507c:	4013      	ands	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <__NVIC_SetPriorityGrouping+0x44>)
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800508e:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	60d3      	str	r3, [r2, #12]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000ed00 	.word	0xe000ed00
 80050a4:	05fa0000 	.word	0x05fa0000

080050a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <__NVIC_GetPriorityGrouping+0x18>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 0307 	and.w	r3, r3, #7
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	db0b      	blt.n	80050ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f003 021f 	and.w	r2, r3, #31
 80050dc:	4907      	ldr	r1, [pc, #28]	; (80050fc <__NVIC_EnableIRQ+0x38>)
 80050de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	2001      	movs	r0, #1
 80050e6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e100 	.word	0xe000e100

08005100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800510c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db0a      	blt.n	800512a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	490c      	ldr	r1, [pc, #48]	; (800514c <__NVIC_SetPriority+0x4c>)
 800511a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511e:	0112      	lsls	r2, r2, #4
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	440b      	add	r3, r1
 8005124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005128:	e00a      	b.n	8005140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	4908      	ldr	r1, [pc, #32]	; (8005150 <__NVIC_SetPriority+0x50>)
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	3b04      	subs	r3, #4
 8005138:	0112      	lsls	r2, r2, #4
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	440b      	add	r3, r1
 800513e:	761a      	strb	r2, [r3, #24]
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000e100 	.word	0xe000e100
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f1c3 0307 	rsb	r3, r3, #7
 800516e:	2b04      	cmp	r3, #4
 8005170:	bf28      	it	cs
 8005172:	2304      	movcs	r3, #4
 8005174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3304      	adds	r3, #4
 800517a:	2b06      	cmp	r3, #6
 800517c:	d902      	bls.n	8005184 <NVIC_EncodePriority+0x30>
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3b03      	subs	r3, #3
 8005182:	e000      	b.n	8005186 <NVIC_EncodePriority+0x32>
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43da      	mvns	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	401a      	ands	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800519c:	f04f 31ff 	mov.w	r1, #4294967295
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43d9      	mvns	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ac:	4313      	orrs	r3, r2
         );
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3724      	adds	r7, #36	; 0x24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051cc:	d301      	bcc.n	80051d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00f      	b.n	80051f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <SysTick_Config+0x40>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051da:	210f      	movs	r1, #15
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	f7ff ff8e 	bl	8005100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <SysTick_Config+0x40>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <SysTick_Config+0x40>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	e000e010 	.word	0xe000e010

08005200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff29 	bl	8005060 <__NVIC_SetPriorityGrouping>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	4603      	mov	r3, r0
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005224:	f7ff ff40 	bl	80050a8 <__NVIC_GetPriorityGrouping>
 8005228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	6978      	ldr	r0, [r7, #20]
 8005230:	f7ff ff90 	bl	8005154 <NVIC_EncodePriority>
 8005234:	4602      	mov	r2, r0
 8005236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff ff5f 	bl	8005100 <__NVIC_SetPriority>
}
 8005242:	bf00      	nop
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	4603      	mov	r3, r0
 8005252:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff33 	bl	80050c4 <__NVIC_EnableIRQ>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff ffa4 	bl	80051bc <SysTick_Config>
 8005274:	4603      	mov	r3, r0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005288:	f7fe fb70 	bl	800396c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e314      	b.n	80058c2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a66      	ldr	r2, [pc, #408]	; (8005438 <HAL_DMA_Init+0x1b8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_DMA_Init+0x1bc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_DMA_Init+0x1c0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a62      	ldr	r2, [pc, #392]	; (8005444 <HAL_DMA_Init+0x1c4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a60      	ldr	r2, [pc, #384]	; (8005448 <HAL_DMA_Init+0x1c8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5f      	ldr	r2, [pc, #380]	; (800544c <HAL_DMA_Init+0x1cc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5d      	ldr	r2, [pc, #372]	; (8005450 <HAL_DMA_Init+0x1d0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5c      	ldr	r2, [pc, #368]	; (8005454 <HAL_DMA_Init+0x1d4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5a      	ldr	r2, [pc, #360]	; (8005458 <HAL_DMA_Init+0x1d8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a59      	ldr	r2, [pc, #356]	; (800545c <HAL_DMA_Init+0x1dc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_DMA_Init+0x1e0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_DMA_Init+0x1e4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a54      	ldr	r2, [pc, #336]	; (8005468 <HAL_DMA_Init+0x1e8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a53      	ldr	r2, [pc, #332]	; (800546c <HAL_DMA_Init+0x1ec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_DMA_Init+0x1f0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_Init+0xb8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a50      	ldr	r2, [pc, #320]	; (8005474 <HAL_DMA_Init+0x1f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d101      	bne.n	800533c <HAL_DMA_Init+0xbc>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_DMA_Init+0xbe>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 813c 	beq.w	80055bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a37      	ldr	r2, [pc, #220]	; (8005438 <HAL_DMA_Init+0x1b8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d04a      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a36      	ldr	r2, [pc, #216]	; (800543c <HAL_DMA_Init+0x1bc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d045      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a34      	ldr	r2, [pc, #208]	; (8005440 <HAL_DMA_Init+0x1c0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d040      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a33      	ldr	r2, [pc, #204]	; (8005444 <HAL_DMA_Init+0x1c4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d03b      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a31      	ldr	r2, [pc, #196]	; (8005448 <HAL_DMA_Init+0x1c8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d036      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a30      	ldr	r2, [pc, #192]	; (800544c <HAL_DMA_Init+0x1cc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d031      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <HAL_DMA_Init+0x1d0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d02c      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <HAL_DMA_Init+0x1d4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d027      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <HAL_DMA_Init+0x1d8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d022      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <HAL_DMA_Init+0x1dc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01d      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a28      	ldr	r2, [pc, #160]	; (8005460 <HAL_DMA_Init+0x1e0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d018      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a27      	ldr	r2, [pc, #156]	; (8005464 <HAL_DMA_Init+0x1e4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <HAL_DMA_Init+0x1e8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a24      	ldr	r2, [pc, #144]	; (800546c <HAL_DMA_Init+0x1ec>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <HAL_DMA_Init+0x1f0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_Init+0x174>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_DMA_Init+0x1f4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <HAL_DMA_Init+0x186>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e007      	b.n	8005416 <HAL_DMA_Init+0x196>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005416:	e02f      	b.n	8005478 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005418:	f7fe faa8 	bl	800396c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b05      	cmp	r3, #5
 8005424:	d928      	bls.n	8005478 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e244      	b.n	80058c2 <HAL_DMA_Init+0x642>
 8005438:	40020010 	.word	0x40020010
 800543c:	40020028 	.word	0x40020028
 8005440:	40020040 	.word	0x40020040
 8005444:	40020058 	.word	0x40020058
 8005448:	40020070 	.word	0x40020070
 800544c:	40020088 	.word	0x40020088
 8005450:	400200a0 	.word	0x400200a0
 8005454:	400200b8 	.word	0x400200b8
 8005458:	40020410 	.word	0x40020410
 800545c:	40020428 	.word	0x40020428
 8005460:	40020440 	.word	0x40020440
 8005464:	40020458 	.word	0x40020458
 8005468:	40020470 	.word	0x40020470
 800546c:	40020488 	.word	0x40020488
 8005470:	400204a0 	.word	0x400204a0
 8005474:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1c8      	bne.n	8005418 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4b84      	ldr	r3, [pc, #528]	; (80056a4 <HAL_DMA_Init+0x424>)
 8005492:	4013      	ands	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800549e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d107      	bne.n	80054dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4313      	orrs	r3, r2
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b28      	cmp	r3, #40	; 0x28
 80054e2:	d903      	bls.n	80054ec <HAL_DMA_Init+0x26c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b2e      	cmp	r3, #46	; 0x2e
 80054ea:	d91f      	bls.n	800552c <HAL_DMA_Init+0x2ac>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b3e      	cmp	r3, #62	; 0x3e
 80054f2:	d903      	bls.n	80054fc <HAL_DMA_Init+0x27c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b42      	cmp	r3, #66	; 0x42
 80054fa:	d917      	bls.n	800552c <HAL_DMA_Init+0x2ac>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b46      	cmp	r3, #70	; 0x46
 8005502:	d903      	bls.n	800550c <HAL_DMA_Init+0x28c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b48      	cmp	r3, #72	; 0x48
 800550a:	d90f      	bls.n	800552c <HAL_DMA_Init+0x2ac>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b4e      	cmp	r3, #78	; 0x4e
 8005512:	d903      	bls.n	800551c <HAL_DMA_Init+0x29c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b52      	cmp	r3, #82	; 0x52
 800551a:	d907      	bls.n	800552c <HAL_DMA_Init+0x2ac>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b73      	cmp	r3, #115	; 0x73
 8005522:	d905      	bls.n	8005530 <HAL_DMA_Init+0x2b0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b77      	cmp	r3, #119	; 0x77
 800552a:	d801      	bhi.n	8005530 <HAL_DMA_Init+0x2b0>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_DMA_Init+0x2b2>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b04      	cmp	r3, #4
 8005566:	d117      	bne.n	8005598 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00e      	beq.n	8005598 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 f9b6 	bl	80068ec <DMA_CheckFifoParam>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2240      	movs	r2, #64	; 0x40
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e194      	b.n	80058c2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f8f1 	bl	8006788 <DMA_CalcBaseAndBitshift>
 80055a6:	4603      	mov	r3, r0
 80055a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	223f      	movs	r2, #63	; 0x3f
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	e0ca      	b.n	8005752 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a39      	ldr	r2, [pc, #228]	; (80056a8 <HAL_DMA_Init+0x428>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <HAL_DMA_Init+0x42c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01d      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a36      	ldr	r2, [pc, #216]	; (80056b0 <HAL_DMA_Init+0x430>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a35      	ldr	r2, [pc, #212]	; (80056b4 <HAL_DMA_Init+0x434>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a33      	ldr	r2, [pc, #204]	; (80056b8 <HAL_DMA_Init+0x438>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a32      	ldr	r2, [pc, #200]	; (80056bc <HAL_DMA_Init+0x43c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_DMA_Init+0x38c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a30      	ldr	r2, [pc, #192]	; (80056c0 <HAL_DMA_Init+0x440>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_DMA_Init+0x38c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a2f      	ldr	r2, [pc, #188]	; (80056c4 <HAL_DMA_Init+0x444>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d101      	bne.n	8005610 <HAL_DMA_Init+0x390>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_DMA_Init+0x392>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8094 	beq.w	8005740 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <HAL_DMA_Init+0x428>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d021      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <HAL_DMA_Init+0x42c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d01c      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <HAL_DMA_Init+0x430>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d017      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <HAL_DMA_Init+0x434>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d012      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <HAL_DMA_Init+0x438>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00d      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_DMA_Init+0x43c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d008      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <HAL_DMA_Init+0x440>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <HAL_DMA_Init+0x3e6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_DMA_Init+0x444>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_DMA_Init+0x448>)
 8005684:	4013      	ands	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d01d      	beq.n	80056cc <HAL_DMA_Init+0x44c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d102      	bne.n	800569e <HAL_DMA_Init+0x41e>
 8005698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800569c:	e017      	b.n	80056ce <HAL_DMA_Init+0x44e>
 800569e:	2300      	movs	r3, #0
 80056a0:	e015      	b.n	80056ce <HAL_DMA_Init+0x44e>
 80056a2:	bf00      	nop
 80056a4:	fe10803f 	.word	0xfe10803f
 80056a8:	58025408 	.word	0x58025408
 80056ac:	5802541c 	.word	0x5802541c
 80056b0:	58025430 	.word	0x58025430
 80056b4:	58025444 	.word	0x58025444
 80056b8:	58025458 	.word	0x58025458
 80056bc:	5802546c 	.word	0x5802546c
 80056c0:	58025480 	.word	0x58025480
 80056c4:	58025494 	.word	0x58025494
 80056c8:	fffe000f 	.word	0xfffe000f
 80056cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	4b6e      	ldr	r3, [pc, #440]	; (80058cc <HAL_DMA_Init+0x64c>)
 8005714:	4413      	add	r3, r2
 8005716:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <HAL_DMA_Init+0x650>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f82f 	bl	8006788 <DMA_CalcBaseAndBitshift>
 800572a:	4603      	mov	r3, r0
 800572c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2201      	movs	r2, #1
 8005738:	409a      	lsls	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e008      	b.n	8005752 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2203      	movs	r2, #3
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0b7      	b.n	80058c2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a5f      	ldr	r2, [pc, #380]	; (80058d4 <HAL_DMA_Init+0x654>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d072      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a5d      	ldr	r2, [pc, #372]	; (80058d8 <HAL_DMA_Init+0x658>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d06d      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a5c      	ldr	r2, [pc, #368]	; (80058dc <HAL_DMA_Init+0x65c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d068      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5a      	ldr	r2, [pc, #360]	; (80058e0 <HAL_DMA_Init+0x660>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d063      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a59      	ldr	r2, [pc, #356]	; (80058e4 <HAL_DMA_Init+0x664>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d05e      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a57      	ldr	r2, [pc, #348]	; (80058e8 <HAL_DMA_Init+0x668>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d059      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a56      	ldr	r2, [pc, #344]	; (80058ec <HAL_DMA_Init+0x66c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d054      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a54      	ldr	r2, [pc, #336]	; (80058f0 <HAL_DMA_Init+0x670>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04f      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a53      	ldr	r2, [pc, #332]	; (80058f4 <HAL_DMA_Init+0x674>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04a      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a51      	ldr	r2, [pc, #324]	; (80058f8 <HAL_DMA_Init+0x678>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d045      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a50      	ldr	r2, [pc, #320]	; (80058fc <HAL_DMA_Init+0x67c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d040      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a4e      	ldr	r2, [pc, #312]	; (8005900 <HAL_DMA_Init+0x680>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d03b      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4d      	ldr	r2, [pc, #308]	; (8005904 <HAL_DMA_Init+0x684>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d036      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a4b      	ldr	r2, [pc, #300]	; (8005908 <HAL_DMA_Init+0x688>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d031      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a4a      	ldr	r2, [pc, #296]	; (800590c <HAL_DMA_Init+0x68c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d02c      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a48      	ldr	r2, [pc, #288]	; (8005910 <HAL_DMA_Init+0x690>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d027      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a47      	ldr	r2, [pc, #284]	; (8005914 <HAL_DMA_Init+0x694>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d022      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a45      	ldr	r2, [pc, #276]	; (8005918 <HAL_DMA_Init+0x698>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a44      	ldr	r2, [pc, #272]	; (800591c <HAL_DMA_Init+0x69c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <HAL_DMA_Init+0x6a0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a41      	ldr	r2, [pc, #260]	; (8005924 <HAL_DMA_Init+0x6a4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <HAL_DMA_Init+0x6a8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a3e      	ldr	r2, [pc, #248]	; (800592c <HAL_DMA_Init+0x6ac>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_DMA_Init+0x5c2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3c      	ldr	r2, [pc, #240]	; (8005930 <HAL_DMA_Init+0x6b0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Init+0x5c6>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_DMA_Init+0x5c8>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d032      	beq.n	80058b2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 f8c9 	bl	80069e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d102      	bne.n	8005860 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005874:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <HAL_DMA_Init+0x620>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d80c      	bhi.n	80058a0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 f946 	bl	8006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	e008      	b.n	80058b2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	a7fdabf8 	.word	0xa7fdabf8
 80058d0:	cccccccd 	.word	0xcccccccd
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	58025408 	.word	0x58025408
 8005918:	5802541c 	.word	0x5802541c
 800591c:	58025430 	.word	0x58025430
 8005920:	58025444 	.word	0x58025444
 8005924:	58025458 	.word	0x58025458
 8005928:	5802546c 	.word	0x5802546c
 800592c:	58025480 	.word	0x58025480
 8005930:	58025494 	.word	0x58025494

08005934 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005940:	4b67      	ldr	r3, [pc, #412]	; (8005ae0 <HAL_DMA_IRQHandler+0x1ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a67      	ldr	r2, [pc, #412]	; (8005ae4 <HAL_DMA_IRQHandler+0x1b0>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	0a9b      	lsrs	r3, r3, #10
 800594c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a5f      	ldr	r2, [pc, #380]	; (8005ae8 <HAL_DMA_IRQHandler+0x1b4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d04a      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5d      	ldr	r2, [pc, #372]	; (8005aec <HAL_DMA_IRQHandler+0x1b8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d045      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a5c      	ldr	r2, [pc, #368]	; (8005af0 <HAL_DMA_IRQHandler+0x1bc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d040      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5a      	ldr	r2, [pc, #360]	; (8005af4 <HAL_DMA_IRQHandler+0x1c0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d03b      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a59      	ldr	r2, [pc, #356]	; (8005af8 <HAL_DMA_IRQHandler+0x1c4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d036      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a57      	ldr	r2, [pc, #348]	; (8005afc <HAL_DMA_IRQHandler+0x1c8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d031      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_DMA_IRQHandler+0x1cc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d02c      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a54      	ldr	r2, [pc, #336]	; (8005b04 <HAL_DMA_IRQHandler+0x1d0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d027      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a53      	ldr	r2, [pc, #332]	; (8005b08 <HAL_DMA_IRQHandler+0x1d4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a51      	ldr	r2, [pc, #324]	; (8005b0c <HAL_DMA_IRQHandler+0x1d8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a50      	ldr	r2, [pc, #320]	; (8005b10 <HAL_DMA_IRQHandler+0x1dc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4e      	ldr	r2, [pc, #312]	; (8005b14 <HAL_DMA_IRQHandler+0x1e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4d      	ldr	r2, [pc, #308]	; (8005b18 <HAL_DMA_IRQHandler+0x1e4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <HAL_DMA_IRQHandler+0x1e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <HAL_DMA_IRQHandler+0x1ec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_DMA_IRQHandler+0xd2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a48      	ldr	r2, [pc, #288]	; (8005b24 <HAL_DMA_IRQHandler+0x1f0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA_IRQHandler+0xd6>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_DMA_IRQHandler+0xd8>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 842b 	beq.w	8006268 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a2 	beq.w	8005b6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <HAL_DMA_IRQHandler+0x1b4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <HAL_DMA_IRQHandler+0x1b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <HAL_DMA_IRQHandler+0x1bc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <HAL_DMA_IRQHandler+0x1c0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <HAL_DMA_IRQHandler+0x1c4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_DMA_IRQHandler+0x1c8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <HAL_DMA_IRQHandler+0x1cc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <HAL_DMA_IRQHandler+0x1d0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <HAL_DMA_IRQHandler+0x1d4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a21      	ldr	r2, [pc, #132]	; (8005b0c <HAL_DMA_IRQHandler+0x1d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <HAL_DMA_IRQHandler+0x1dc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <HAL_DMA_IRQHandler+0x1e0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_DMA_IRQHandler+0x1e4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_DMA_IRQHandler+0x1e8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_DMA_IRQHandler+0x1ec>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x194>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <HAL_DMA_IRQHandler+0x1f0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d12f      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x1f4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	e02e      	b.n	8005b3c <HAL_DMA_IRQHandler+0x208>
 8005ade:	bf00      	nop
 8005ae0:	24000010 	.word	0x24000010
 8005ae4:	1b4e81b5 	.word	0x1b4e81b5
 8005ae8:	40020010 	.word	0x40020010
 8005aec:	40020028 	.word	0x40020028
 8005af0:	40020040 	.word	0x40020040
 8005af4:	40020058 	.word	0x40020058
 8005af8:	40020070 	.word	0x40020070
 8005afc:	40020088 	.word	0x40020088
 8005b00:	400200a0 	.word	0x400200a0
 8005b04:	400200b8 	.word	0x400200b8
 8005b08:	40020410 	.word	0x40020410
 8005b0c:	40020428 	.word	0x40020428
 8005b10:	40020440 	.word	0x40020440
 8005b14:	40020458 	.word	0x40020458
 8005b18:	40020470 	.word	0x40020470
 8005b1c:	40020488 	.word	0x40020488
 8005b20:	400204a0 	.word	0x400204a0
 8005b24:	400204b8 	.word	0x400204b8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0204 	bic.w	r2, r2, #4
 8005b4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	2208      	movs	r2, #8
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d06e      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a69      	ldr	r2, [pc, #420]	; (8005d2c <HAL_DMA_IRQHandler+0x3f8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a67      	ldr	r2, [pc, #412]	; (8005d30 <HAL_DMA_IRQHandler+0x3fc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <HAL_DMA_IRQHandler+0x400>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a64      	ldr	r2, [pc, #400]	; (8005d38 <HAL_DMA_IRQHandler+0x404>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a63      	ldr	r2, [pc, #396]	; (8005d3c <HAL_DMA_IRQHandler+0x408>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a61      	ldr	r2, [pc, #388]	; (8005d40 <HAL_DMA_IRQHandler+0x40c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a60      	ldr	r2, [pc, #384]	; (8005d44 <HAL_DMA_IRQHandler+0x410>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a5e      	ldr	r2, [pc, #376]	; (8005d48 <HAL_DMA_IRQHandler+0x414>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a5d      	ldr	r2, [pc, #372]	; (8005d4c <HAL_DMA_IRQHandler+0x418>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a5b      	ldr	r2, [pc, #364]	; (8005d50 <HAL_DMA_IRQHandler+0x41c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a5a      	ldr	r2, [pc, #360]	; (8005d54 <HAL_DMA_IRQHandler+0x420>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <HAL_DMA_IRQHandler+0x424>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a57      	ldr	r2, [pc, #348]	; (8005d5c <HAL_DMA_IRQHandler+0x428>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a55      	ldr	r2, [pc, #340]	; (8005d60 <HAL_DMA_IRQHandler+0x42c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a54      	ldr	r2, [pc, #336]	; (8005d64 <HAL_DMA_IRQHandler+0x430>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x2ee>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a52      	ldr	r2, [pc, #328]	; (8005d68 <HAL_DMA_IRQHandler+0x434>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10a      	bne.n	8005c38 <HAL_DMA_IRQHandler+0x304>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e003      	b.n	8005c40 <HAL_DMA_IRQHandler+0x30c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00d      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	f043 0202 	orr.w	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2204      	movs	r2, #4
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 808f 	beq.w	8005d94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <HAL_DMA_IRQHandler+0x3f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d04a      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <HAL_DMA_IRQHandler+0x3fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d045      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <HAL_DMA_IRQHandler+0x400>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d040      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <HAL_DMA_IRQHandler+0x404>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d03b      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <HAL_DMA_IRQHandler+0x408>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d036      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <HAL_DMA_IRQHandler+0x40c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d031      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <HAL_DMA_IRQHandler+0x410>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d02c      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <HAL_DMA_IRQHandler+0x414>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d027      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <HAL_DMA_IRQHandler+0x418>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <HAL_DMA_IRQHandler+0x41c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01d      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_DMA_IRQHandler+0x420>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <HAL_DMA_IRQHandler+0x424>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <HAL_DMA_IRQHandler+0x428>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_DMA_IRQHandler+0x42c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_DMA_IRQHandler+0x430>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x3e2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <HAL_DMA_IRQHandler+0x434>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d12a      	bne.n	8005d6c <HAL_DMA_IRQHandler+0x438>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	e023      	b.n	8005d74 <HAL_DMA_IRQHandler+0x440>
 8005d2c:	40020010 	.word	0x40020010
 8005d30:	40020028 	.word	0x40020028
 8005d34:	40020040 	.word	0x40020040
 8005d38:	40020058 	.word	0x40020058
 8005d3c:	40020070 	.word	0x40020070
 8005d40:	40020088 	.word	0x40020088
 8005d44:	400200a0 	.word	0x400200a0
 8005d48:	400200b8 	.word	0x400200b8
 8005d4c:	40020410 	.word	0x40020410
 8005d50:	40020428 	.word	0x40020428
 8005d54:	40020440 	.word	0x40020440
 8005d58:	40020458 	.word	0x40020458
 8005d5c:	40020470 	.word	0x40020470
 8005d60:	40020488 	.word	0x40020488
 8005d64:	400204a0 	.word	0x400204a0
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2204      	movs	r2, #4
 8005d82:	409a      	lsls	r2, r3
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	f043 0204 	orr.w	r2, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80a6 	beq.w	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a85      	ldr	r2, [pc, #532]	; (8005fc4 <HAL_DMA_IRQHandler+0x690>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d04a      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a83      	ldr	r2, [pc, #524]	; (8005fc8 <HAL_DMA_IRQHandler+0x694>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d045      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a82      	ldr	r2, [pc, #520]	; (8005fcc <HAL_DMA_IRQHandler+0x698>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d040      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a80      	ldr	r2, [pc, #512]	; (8005fd0 <HAL_DMA_IRQHandler+0x69c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d03b      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a7f      	ldr	r2, [pc, #508]	; (8005fd4 <HAL_DMA_IRQHandler+0x6a0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d036      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a7d      	ldr	r2, [pc, #500]	; (8005fd8 <HAL_DMA_IRQHandler+0x6a4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d031      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a7c      	ldr	r2, [pc, #496]	; (8005fdc <HAL_DMA_IRQHandler+0x6a8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d02c      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a7a      	ldr	r2, [pc, #488]	; (8005fe0 <HAL_DMA_IRQHandler+0x6ac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d027      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a79      	ldr	r2, [pc, #484]	; (8005fe4 <HAL_DMA_IRQHandler+0x6b0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a77      	ldr	r2, [pc, #476]	; (8005fe8 <HAL_DMA_IRQHandler+0x6b4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01d      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a76      	ldr	r2, [pc, #472]	; (8005fec <HAL_DMA_IRQHandler+0x6b8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a74      	ldr	r2, [pc, #464]	; (8005ff0 <HAL_DMA_IRQHandler+0x6bc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a73      	ldr	r2, [pc, #460]	; (8005ff4 <HAL_DMA_IRQHandler+0x6c0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a71      	ldr	r2, [pc, #452]	; (8005ff8 <HAL_DMA_IRQHandler+0x6c4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a70      	ldr	r2, [pc, #448]	; (8005ffc <HAL_DMA_IRQHandler+0x6c8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x516>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a6e      	ldr	r2, [pc, #440]	; (8006000 <HAL_DMA_IRQHandler+0x6cc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10a      	bne.n	8005e60 <HAL_DMA_IRQHandler+0x52c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e009      	b.n	8005e74 <HAL_DMA_IRQHandler+0x540>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d03e      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2210      	movs	r2, #16
 8005e82:	409a      	lsls	r2, r3
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d108      	bne.n	8005eb6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d024      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	e01f      	b.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01b      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
 8005ec6:	e016      	b.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0208 	bic.w	r2, r2, #8
 8005ee4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	2220      	movs	r2, #32
 8005f00:	409a      	lsls	r2, r3
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8110 	beq.w	800612c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <HAL_DMA_IRQHandler+0x690>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04a      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <HAL_DMA_IRQHandler+0x694>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d045      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a29      	ldr	r2, [pc, #164]	; (8005fcc <HAL_DMA_IRQHandler+0x698>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d040      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a28      	ldr	r2, [pc, #160]	; (8005fd0 <HAL_DMA_IRQHandler+0x69c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d03b      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <HAL_DMA_IRQHandler+0x6a0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d036      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <HAL_DMA_IRQHandler+0x6a4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d031      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a23      	ldr	r2, [pc, #140]	; (8005fdc <HAL_DMA_IRQHandler+0x6a8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02c      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_DMA_IRQHandler+0x6ac>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d027      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <HAL_DMA_IRQHandler+0x6b0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <HAL_DMA_IRQHandler+0x6b4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01d      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_DMA_IRQHandler+0x6b8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <HAL_DMA_IRQHandler+0x6bc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <HAL_DMA_IRQHandler+0x6c0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a19      	ldr	r2, [pc, #100]	; (8005ff8 <HAL_DMA_IRQHandler+0x6c4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_DMA_IRQHandler+0x6c8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_IRQHandler+0x678>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_DMA_IRQHandler+0x6cc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d12b      	bne.n	8006004 <HAL_DMA_IRQHandler+0x6d0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	e02a      	b.n	8006018 <HAL_DMA_IRQHandler+0x6e4>
 8005fc2:	bf00      	nop
 8005fc4:	40020010 	.word	0x40020010
 8005fc8:	40020028 	.word	0x40020028
 8005fcc:	40020040 	.word	0x40020040
 8005fd0:	40020058 	.word	0x40020058
 8005fd4:	40020070 	.word	0x40020070
 8005fd8:	40020088 	.word	0x40020088
 8005fdc:	400200a0 	.word	0x400200a0
 8005fe0:	400200b8 	.word	0x400200b8
 8005fe4:	40020410 	.word	0x40020410
 8005fe8:	40020428 	.word	0x40020428
 8005fec:	40020440 	.word	0x40020440
 8005ff0:	40020458 	.word	0x40020458
 8005ff4:	40020470 	.word	0x40020470
 8005ff8:	40020488 	.word	0x40020488
 8005ffc:	400204a0 	.word	0x400204a0
 8006000:	400204b8 	.word	0x400204b8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	bf14      	ite	ne
 8006012:	2301      	movne	r3, #1
 8006014:	2300      	moveq	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8087 	beq.w	800612c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2220      	movs	r2, #32
 8006028:	409a      	lsls	r2, r3
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b04      	cmp	r3, #4
 8006038:	d139      	bne.n	80060ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0216 	bic.w	r2, r2, #22
 8006048:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695a      	ldr	r2, [r3, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006058:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d103      	bne.n	800606a <HAL_DMA_IRQHandler+0x736>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0208 	bic.w	r2, r2, #8
 8006078:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	223f      	movs	r2, #63	; 0x3f
 8006084:	409a      	lsls	r2, r3
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 834a 	beq.w	8006738 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
          }
          return;
 80060ac:	e344      	b.n	8006738 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d02c      	beq.n	800612c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	e027      	b.n	800612c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d023      	beq.n	800612c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	e01e      	b.n	800612c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0210 	bic.w	r2, r2, #16
 800610a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8306 	beq.w	8006742 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8088 	beq.w	8006254 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2204      	movs	r2, #4
 8006148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a7a      	ldr	r2, [pc, #488]	; (800633c <HAL_DMA_IRQHandler+0xa08>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d04a      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a79      	ldr	r2, [pc, #484]	; (8006340 <HAL_DMA_IRQHandler+0xa0c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d045      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a77      	ldr	r2, [pc, #476]	; (8006344 <HAL_DMA_IRQHandler+0xa10>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d040      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a76      	ldr	r2, [pc, #472]	; (8006348 <HAL_DMA_IRQHandler+0xa14>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d03b      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a74      	ldr	r2, [pc, #464]	; (800634c <HAL_DMA_IRQHandler+0xa18>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d036      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a73      	ldr	r2, [pc, #460]	; (8006350 <HAL_DMA_IRQHandler+0xa1c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d031      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a71      	ldr	r2, [pc, #452]	; (8006354 <HAL_DMA_IRQHandler+0xa20>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d02c      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a70      	ldr	r2, [pc, #448]	; (8006358 <HAL_DMA_IRQHandler+0xa24>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d027      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a6e      	ldr	r2, [pc, #440]	; (800635c <HAL_DMA_IRQHandler+0xa28>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d022      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a6d      	ldr	r2, [pc, #436]	; (8006360 <HAL_DMA_IRQHandler+0xa2c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d01d      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a6b      	ldr	r2, [pc, #428]	; (8006364 <HAL_DMA_IRQHandler+0xa30>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d018      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a6a      	ldr	r2, [pc, #424]	; (8006368 <HAL_DMA_IRQHandler+0xa34>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a68      	ldr	r2, [pc, #416]	; (800636c <HAL_DMA_IRQHandler+0xa38>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00e      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a67      	ldr	r2, [pc, #412]	; (8006370 <HAL_DMA_IRQHandler+0xa3c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a65      	ldr	r2, [pc, #404]	; (8006374 <HAL_DMA_IRQHandler+0xa40>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_DMA_IRQHandler+0x8b8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a64      	ldr	r2, [pc, #400]	; (8006378 <HAL_DMA_IRQHandler+0xa44>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <HAL_DMA_IRQHandler+0x8ca>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e007      	b.n	800620e <HAL_DMA_IRQHandler+0x8da>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	429a      	cmp	r2, r3
 8006218:	d307      	bcc.n	800622a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f2      	bne.n	800620e <HAL_DMA_IRQHandler+0x8da>
 8006228:	e000      	b.n	800622c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800622a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006242:	e003      	b.n	800624c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8272 	beq.w	8006742 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
 8006266:	e26c      	b.n	8006742 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a43      	ldr	r2, [pc, #268]	; (800637c <HAL_DMA_IRQHandler+0xa48>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d022      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a42      	ldr	r2, [pc, #264]	; (8006380 <HAL_DMA_IRQHandler+0xa4c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d01d      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a40      	ldr	r2, [pc, #256]	; (8006384 <HAL_DMA_IRQHandler+0xa50>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d018      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3f      	ldr	r2, [pc, #252]	; (8006388 <HAL_DMA_IRQHandler+0xa54>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a3d      	ldr	r2, [pc, #244]	; (800638c <HAL_DMA_IRQHandler+0xa58>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <HAL_DMA_IRQHandler+0xa5c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a3a      	ldr	r2, [pc, #232]	; (8006394 <HAL_DMA_IRQHandler+0xa60>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x984>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a39      	ldr	r2, [pc, #228]	; (8006398 <HAL_DMA_IRQHandler+0xa64>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d101      	bne.n	80062bc <HAL_DMA_IRQHandler+0x988>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_DMA_IRQHandler+0x98a>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 823f 	beq.w	8006742 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2204      	movs	r2, #4
 80062d6:	409a      	lsls	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80cd 	beq.w	800647c <HAL_DMA_IRQHandler+0xb48>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80c7 	beq.w	800647c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2204      	movs	r2, #4
 80062f8:	409a      	lsls	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d049      	beq.n	800639c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8210 	beq.w	800673c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006324:	e20a      	b.n	800673c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8206 	beq.w	800673c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006338:	e200      	b.n	800673c <HAL_DMA_IRQHandler+0xe08>
 800633a:	bf00      	nop
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	58025408 	.word	0x58025408
 8006380:	5802541c 	.word	0x5802541c
 8006384:	58025430 	.word	0x58025430
 8006388:	58025444 	.word	0x58025444
 800638c:	58025458 	.word	0x58025458
 8006390:	5802546c 	.word	0x5802546c
 8006394:	58025480 	.word	0x58025480
 8006398:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d160      	bne.n	8006468 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a8c      	ldr	r2, [pc, #560]	; (80065dc <HAL_DMA_IRQHandler+0xca8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a8a      	ldr	r2, [pc, #552]	; (80065e0 <HAL_DMA_IRQHandler+0xcac>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a89      	ldr	r2, [pc, #548]	; (80065e4 <HAL_DMA_IRQHandler+0xcb0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a87      	ldr	r2, [pc, #540]	; (80065e8 <HAL_DMA_IRQHandler+0xcb4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a86      	ldr	r2, [pc, #536]	; (80065ec <HAL_DMA_IRQHandler+0xcb8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a84      	ldr	r2, [pc, #528]	; (80065f0 <HAL_DMA_IRQHandler+0xcbc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a83      	ldr	r2, [pc, #524]	; (80065f4 <HAL_DMA_IRQHandler+0xcc0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a81      	ldr	r2, [pc, #516]	; (80065f8 <HAL_DMA_IRQHandler+0xcc4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a80      	ldr	r2, [pc, #512]	; (80065fc <HAL_DMA_IRQHandler+0xcc8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a7e      	ldr	r2, [pc, #504]	; (8006600 <HAL_DMA_IRQHandler+0xccc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a7d      	ldr	r2, [pc, #500]	; (8006604 <HAL_DMA_IRQHandler+0xcd0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a7b      	ldr	r2, [pc, #492]	; (8006608 <HAL_DMA_IRQHandler+0xcd4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a7a      	ldr	r2, [pc, #488]	; (800660c <HAL_DMA_IRQHandler+0xcd8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a78      	ldr	r2, [pc, #480]	; (8006610 <HAL_DMA_IRQHandler+0xcdc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a77      	ldr	r2, [pc, #476]	; (8006614 <HAL_DMA_IRQHandler+0xce0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_IRQHandler+0xb12>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a75      	ldr	r2, [pc, #468]	; (8006618 <HAL_DMA_IRQHandler+0xce4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <HAL_DMA_IRQHandler+0xb24>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0208 	bic.w	r2, r2, #8
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <HAL_DMA_IRQHandler+0xb34>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8165 	beq.w	800673c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800647a:	e15f      	b.n	800673c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2202      	movs	r2, #2
 8006486:	409a      	lsls	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80c5 	beq.w	800661c <HAL_DMA_IRQHandler+0xce8>
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80bf 	beq.w	800661c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2202      	movs	r2, #2
 80064a8:	409a      	lsls	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d018      	beq.n	80064ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 813a 	beq.w	8006740 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064d4:	e134      	b.n	8006740 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8130 	beq.w	8006740 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e8:	e12a      	b.n	8006740 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d168      	bne.n	80065c6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a38      	ldr	r2, [pc, #224]	; (80065dc <HAL_DMA_IRQHandler+0xca8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d04a      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a37      	ldr	r2, [pc, #220]	; (80065e0 <HAL_DMA_IRQHandler+0xcac>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d045      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a35      	ldr	r2, [pc, #212]	; (80065e4 <HAL_DMA_IRQHandler+0xcb0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d040      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a34      	ldr	r2, [pc, #208]	; (80065e8 <HAL_DMA_IRQHandler+0xcb4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d03b      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a32      	ldr	r2, [pc, #200]	; (80065ec <HAL_DMA_IRQHandler+0xcb8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d036      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a31      	ldr	r2, [pc, #196]	; (80065f0 <HAL_DMA_IRQHandler+0xcbc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d031      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2f      	ldr	r2, [pc, #188]	; (80065f4 <HAL_DMA_IRQHandler+0xcc0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d02c      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <HAL_DMA_IRQHandler+0xcc4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d027      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <HAL_DMA_IRQHandler+0xcc8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d022      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <HAL_DMA_IRQHandler+0xccc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d01d      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a29      	ldr	r2, [pc, #164]	; (8006604 <HAL_DMA_IRQHandler+0xcd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d018      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a28      	ldr	r2, [pc, #160]	; (8006608 <HAL_DMA_IRQHandler+0xcd4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <HAL_DMA_IRQHandler+0xcd8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00e      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a25      	ldr	r2, [pc, #148]	; (8006610 <HAL_DMA_IRQHandler+0xcdc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_DMA_IRQHandler+0xce0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_DMA_IRQHandler+0xc60>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_DMA_IRQHandler+0xce4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <HAL_DMA_IRQHandler+0xc72>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0214 	bic.w	r2, r2, #20
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e007      	b.n	80065b6 <HAL_DMA_IRQHandler+0xc82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 020a 	bic.w	r2, r2, #10
 80065b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 80b8 	beq.w	8006740 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065d8:	e0b2      	b.n	8006740 <HAL_DMA_IRQHandler+0xe0c>
 80065da:	bf00      	nop
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	2208      	movs	r2, #8
 8006626:	409a      	lsls	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8088 	beq.w	8006742 <HAL_DMA_IRQHandler+0xe0e>
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8082 	beq.w	8006742 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a41      	ldr	r2, [pc, #260]	; (8006748 <HAL_DMA_IRQHandler+0xe14>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d04a      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a3f      	ldr	r2, [pc, #252]	; (800674c <HAL_DMA_IRQHandler+0xe18>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d045      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3e      	ldr	r2, [pc, #248]	; (8006750 <HAL_DMA_IRQHandler+0xe1c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d040      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <HAL_DMA_IRQHandler+0xe20>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d03b      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <HAL_DMA_IRQHandler+0xe24>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d036      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a39      	ldr	r2, [pc, #228]	; (800675c <HAL_DMA_IRQHandler+0xe28>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d031      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a38      	ldr	r2, [pc, #224]	; (8006760 <HAL_DMA_IRQHandler+0xe2c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d02c      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a36      	ldr	r2, [pc, #216]	; (8006764 <HAL_DMA_IRQHandler+0xe30>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d027      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a35      	ldr	r2, [pc, #212]	; (8006768 <HAL_DMA_IRQHandler+0xe34>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d022      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a33      	ldr	r2, [pc, #204]	; (800676c <HAL_DMA_IRQHandler+0xe38>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01d      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a32      	ldr	r2, [pc, #200]	; (8006770 <HAL_DMA_IRQHandler+0xe3c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a30      	ldr	r2, [pc, #192]	; (8006774 <HAL_DMA_IRQHandler+0xe40>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <HAL_DMA_IRQHandler+0xe44>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a2d      	ldr	r2, [pc, #180]	; (800677c <HAL_DMA_IRQHandler+0xe48>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2c      	ldr	r2, [pc, #176]	; (8006780 <HAL_DMA_IRQHandler+0xe4c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_DMA_IRQHandler+0xdaa>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <HAL_DMA_IRQHandler+0xe50>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d108      	bne.n	80066f0 <HAL_DMA_IRQHandler+0xdbc>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 021c 	bic.w	r2, r2, #28
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e007      	b.n	8006700 <HAL_DMA_IRQHandler+0xdcc>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 020e 	bic.w	r2, r2, #14
 80066fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	e004      	b.n	8006742 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006740:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40020010 	.word	0x40020010
 800674c:	40020028 	.word	0x40020028
 8006750:	40020040 	.word	0x40020040
 8006754:	40020058 	.word	0x40020058
 8006758:	40020070 	.word	0x40020070
 800675c:	40020088 	.word	0x40020088
 8006760:	400200a0 	.word	0x400200a0
 8006764:	400200b8 	.word	0x400200b8
 8006768:	40020410 	.word	0x40020410
 800676c:	40020428 	.word	0x40020428
 8006770:	40020440 	.word	0x40020440
 8006774:	40020458 	.word	0x40020458
 8006778:	40020470 	.word	0x40020470
 800677c:	40020488 	.word	0x40020488
 8006780:	400204a0 	.word	0x400204a0
 8006784:	400204b8 	.word	0x400204b8

08006788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a42      	ldr	r2, [pc, #264]	; (80068a0 <DMA_CalcBaseAndBitshift+0x118>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d04a      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a41      	ldr	r2, [pc, #260]	; (80068a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d045      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <DMA_CalcBaseAndBitshift+0x120>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d040      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a3e      	ldr	r2, [pc, #248]	; (80068ac <DMA_CalcBaseAndBitshift+0x124>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d03b      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a3c      	ldr	r2, [pc, #240]	; (80068b0 <DMA_CalcBaseAndBitshift+0x128>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d036      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a3b      	ldr	r2, [pc, #236]	; (80068b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d031      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a39      	ldr	r2, [pc, #228]	; (80068b8 <DMA_CalcBaseAndBitshift+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d02c      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a38      	ldr	r2, [pc, #224]	; (80068bc <DMA_CalcBaseAndBitshift+0x134>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d027      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a36      	ldr	r2, [pc, #216]	; (80068c0 <DMA_CalcBaseAndBitshift+0x138>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d022      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a35      	ldr	r2, [pc, #212]	; (80068c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d01d      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a33      	ldr	r2, [pc, #204]	; (80068c8 <DMA_CalcBaseAndBitshift+0x140>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a32      	ldr	r2, [pc, #200]	; (80068cc <DMA_CalcBaseAndBitshift+0x144>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a30      	ldr	r2, [pc, #192]	; (80068d0 <DMA_CalcBaseAndBitshift+0x148>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <DMA_CalcBaseAndBitshift+0x150>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <DMA_CalcBaseAndBitshift+0xa8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2c      	ldr	r2, [pc, #176]	; (80068dc <DMA_CalcBaseAndBitshift+0x154>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d101      	bne.n	8006834 <DMA_CalcBaseAndBitshift+0xac>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <DMA_CalcBaseAndBitshift+0xae>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d024      	beq.n	8006884 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	3b10      	subs	r3, #16
 8006842:	4a27      	ldr	r2, [pc, #156]	; (80068e0 <DMA_CalcBaseAndBitshift+0x158>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006854:	5cd3      	ldrb	r3, [r2, r3]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b03      	cmp	r3, #3
 8006860:	d908      	bls.n	8006874 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <DMA_CalcBaseAndBitshift+0x160>)
 800686a:	4013      	ands	r3, r2
 800686c:	1d1a      	adds	r2, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	659a      	str	r2, [r3, #88]	; 0x58
 8006872:	e00d      	b.n	8006890 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <DMA_CalcBaseAndBitshift+0x160>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6593      	str	r3, [r2, #88]	; 0x58
 8006882:	e005      	b.n	8006890 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	40020010 	.word	0x40020010
 80068a4:	40020028 	.word	0x40020028
 80068a8:	40020040 	.word	0x40020040
 80068ac:	40020058 	.word	0x40020058
 80068b0:	40020070 	.word	0x40020070
 80068b4:	40020088 	.word	0x40020088
 80068b8:	400200a0 	.word	0x400200a0
 80068bc:	400200b8 	.word	0x400200b8
 80068c0:	40020410 	.word	0x40020410
 80068c4:	40020428 	.word	0x40020428
 80068c8:	40020440 	.word	0x40020440
 80068cc:	40020458 	.word	0x40020458
 80068d0:	40020470 	.word	0x40020470
 80068d4:	40020488 	.word	0x40020488
 80068d8:	400204a0 	.word	0x400204a0
 80068dc:	400204b8 	.word	0x400204b8
 80068e0:	aaaaaaab 	.word	0xaaaaaaab
 80068e4:	08010320 	.word	0x08010320
 80068e8:	fffffc00 	.word	0xfffffc00

080068ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d120      	bne.n	8006942 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	2b03      	cmp	r3, #3
 8006906:	d858      	bhi.n	80069ba <DMA_CheckFifoParam+0xce>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <DMA_CheckFifoParam+0x24>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006921 	.word	0x08006921
 8006914:	08006933 	.word	0x08006933
 8006918:	08006921 	.word	0x08006921
 800691c:	080069bb 	.word	0x080069bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d048      	beq.n	80069be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006930:	e045      	b.n	80069be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800693a:	d142      	bne.n	80069c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006940:	e03f      	b.n	80069c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694a:	d123      	bne.n	8006994 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	2b03      	cmp	r3, #3
 8006952:	d838      	bhi.n	80069c6 <DMA_CheckFifoParam+0xda>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <DMA_CheckFifoParam+0x70>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	0800696d 	.word	0x0800696d
 8006960:	08006973 	.word	0x08006973
 8006964:	0800696d 	.word	0x0800696d
 8006968:	08006985 	.word	0x08006985
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	73fb      	strb	r3, [r7, #15]
        break;
 8006970:	e030      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d025      	beq.n	80069ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006982:	e022      	b.n	80069ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800698c:	d11f      	bne.n	80069ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006992:	e01c      	b.n	80069ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	2b02      	cmp	r3, #2
 800699a:	d902      	bls.n	80069a2 <DMA_CheckFifoParam+0xb6>
 800699c:	2b03      	cmp	r3, #3
 800699e:	d003      	beq.n	80069a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069a0:	e018      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
        break;
 80069a6:	e015      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
    break;
 80069b8:	e00b      	b.n	80069d2 <DMA_CheckFifoParam+0xe6>
        break;
 80069ba:	bf00      	nop
 80069bc:	e00a      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        break;
 80069be:	bf00      	nop
 80069c0:	e008      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        break;
 80069c2:	bf00      	nop
 80069c4:	e006      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        break;
 80069c6:	bf00      	nop
 80069c8:	e004      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        break;
 80069ca:	bf00      	nop
 80069cc:	e002      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
        break;
 80069ce:	bf00      	nop
 80069d0:	e000      	b.n	80069d4 <DMA_CheckFifoParam+0xe8>
    break;
 80069d2:	bf00      	nop
    }
  }

  return status;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a38      	ldr	r2, [pc, #224]	; (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a36      	ldr	r2, [pc, #216]	; (8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01d      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a35      	ldr	r2, [pc, #212]	; (8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a33      	ldr	r2, [pc, #204]	; (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a30      	ldr	r2, [pc, #192]	; (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d101      	bne.n	8006a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01a      	beq.n	8006a82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	3b08      	subs	r3, #8
 8006a54:	4a28      	ldr	r2, [pc, #160]	; (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4b26      	ldr	r3, [pc, #152]	; (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a24      	ldr	r2, [pc, #144]	; (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2201      	movs	r2, #1
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a80:	e024      	b.n	8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	3b10      	subs	r3, #16
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	091b      	lsrs	r3, r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d806      	bhi.n	8006aaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d902      	bls.n	8006aaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006abc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	58025408 	.word	0x58025408
 8006adc:	5802541c 	.word	0x5802541c
 8006ae0:	58025430 	.word	0x58025430
 8006ae4:	58025444 	.word	0x58025444
 8006ae8:	58025458 	.word	0x58025458
 8006aec:	5802546c 	.word	0x5802546c
 8006af0:	58025480 	.word	0x58025480
 8006af4:	58025494 	.word	0x58025494
 8006af8:	cccccccd 	.word	0xcccccccd
 8006afc:	16009600 	.word	0x16009600
 8006b00:	58025880 	.word	0x58025880
 8006b04:	aaaaaaab 	.word	0xaaaaaaab
 8006b08:	400204b8 	.word	0x400204b8
 8006b0c:	4002040f 	.word	0x4002040f
 8006b10:	10008200 	.word	0x10008200
 8006b14:	40020880 	.word	0x40020880

08006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d04a      	beq.n	8006bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d847      	bhi.n	8006bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a25      	ldr	r2, [pc, #148]	; (8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ba0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ba2:	e009      	b.n	8006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	58025408 	.word	0x58025408
 8006bd4:	5802541c 	.word	0x5802541c
 8006bd8:	58025430 	.word	0x58025430
 8006bdc:	58025444 	.word	0x58025444
 8006be0:	58025458 	.word	0x58025458
 8006be4:	5802546c 	.word	0x5802546c
 8006be8:	58025480 	.word	0x58025480
 8006bec:	58025494 	.word	0x58025494
 8006bf0:	1600963f 	.word	0x1600963f
 8006bf4:	58025940 	.word	0x58025940
 8006bf8:	1000823f 	.word	0x1000823f
 8006bfc:	40020940 	.word	0x40020940

08006c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	; 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c0e:	4b86      	ldr	r3, [pc, #536]	; (8006e28 <HAL_GPIO_Init+0x228>)
 8006c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c12:	e18c      	b.n	8006f2e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	2101      	movs	r1, #1
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c20:	4013      	ands	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 817e 	beq.w	8006f28 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d005      	beq.n	8006c44 <HAL_GPIO_Init+0x44>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d130      	bne.n	8006ca6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	2203      	movs	r2, #3
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	4013      	ands	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	f003 0201 	and.w	r2, r3, #1
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d017      	beq.n	8006ce2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d123      	bne.n	8006d36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	08da      	lsrs	r2, r3, #3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3208      	adds	r2, #8
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	220f      	movs	r2, #15
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	08da      	lsrs	r2, r3, #3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3208      	adds	r2, #8
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2203      	movs	r2, #3
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f003 0203 	and.w	r2, r3, #3
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80d8 	beq.w	8006f28 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d78:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <HAL_GPIO_Init+0x22c>)
 8006d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d7e:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <HAL_GPIO_Init+0x22c>)
 8006d80:	f043 0302 	orr.w	r3, r3, #2
 8006d84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d88:	4b28      	ldr	r3, [pc, #160]	; (8006e2c <HAL_GPIO_Init+0x22c>)
 8006d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d96:	4a26      	ldr	r2, [pc, #152]	; (8006e30 <HAL_GPIO_Init+0x230>)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	220f      	movs	r2, #15
 8006dae:	fa02 f303 	lsl.w	r3, r2, r3
 8006db2:	43db      	mvns	r3, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	4013      	ands	r3, r2
 8006db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	; (8006e34 <HAL_GPIO_Init+0x234>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d04a      	beq.n	8006e58 <HAL_GPIO_Init+0x258>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <HAL_GPIO_Init+0x238>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02b      	beq.n	8006e22 <HAL_GPIO_Init+0x222>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <HAL_GPIO_Init+0x23c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d025      	beq.n	8006e1e <HAL_GPIO_Init+0x21e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1a      	ldr	r2, [pc, #104]	; (8006e40 <HAL_GPIO_Init+0x240>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01f      	beq.n	8006e1a <HAL_GPIO_Init+0x21a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <HAL_GPIO_Init+0x244>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d019      	beq.n	8006e16 <HAL_GPIO_Init+0x216>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <HAL_GPIO_Init+0x248>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_GPIO_Init+0x212>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <HAL_GPIO_Init+0x24c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00d      	beq.n	8006e0e <HAL_GPIO_Init+0x20e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a16      	ldr	r2, [pc, #88]	; (8006e50 <HAL_GPIO_Init+0x250>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <HAL_GPIO_Init+0x20a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <HAL_GPIO_Init+0x254>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <HAL_GPIO_Init+0x206>
 8006e02:	2309      	movs	r3, #9
 8006e04:	e029      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e06:	230a      	movs	r3, #10
 8006e08:	e027      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e0a:	2307      	movs	r3, #7
 8006e0c:	e025      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e0e:	2306      	movs	r3, #6
 8006e10:	e023      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e12:	2305      	movs	r3, #5
 8006e14:	e021      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e16:	2304      	movs	r3, #4
 8006e18:	e01f      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e01d      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e01b      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e019      	b.n	8006e5a <HAL_GPIO_Init+0x25a>
 8006e26:	bf00      	nop
 8006e28:	58000080 	.word	0x58000080
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	58000400 	.word	0x58000400
 8006e34:	58020000 	.word	0x58020000
 8006e38:	58020400 	.word	0x58020400
 8006e3c:	58020800 	.word	0x58020800
 8006e40:	58020c00 	.word	0x58020c00
 8006e44:	58021000 	.word	0x58021000
 8006e48:	58021400 	.word	0x58021400
 8006e4c:	58021800 	.word	0x58021800
 8006e50:	58021c00 	.word	0x58021c00
 8006e54:	58022400 	.word	0x58022400
 8006e58:	2300      	movs	r3, #0
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	f002 0203 	and.w	r2, r2, #3
 8006e60:	0092      	lsls	r2, r2, #2
 8006e62:	4093      	lsls	r3, r2
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e6a:	4938      	ldr	r1, [pc, #224]	; (8006f4c <HAL_GPIO_Init+0x34c>)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	089b      	lsrs	r3, r3, #2
 8006e70:	3302      	adds	r3, #2
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	43db      	mvns	r3, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4013      	ands	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	43db      	mvns	r3, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	43db      	mvns	r3, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f ae6b 	bne.w	8006c14 <HAL_GPIO_Init+0x14>
  }
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3724      	adds	r7, #36	; 0x24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	58000400 	.word	0x58000400

08006f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	807b      	strh	r3, [r7, #2]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f60:	787b      	ldrb	r3, [r7, #1]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f66:	887a      	ldrh	r2, [r7, #2]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f6c:	e003      	b.n	8006f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f6e:	887b      	ldrh	r3, [r7, #2]
 8006f70:	041a      	lsls	r2, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	619a      	str	r2, [r3, #24]
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d00a      	beq.n	8006fae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d001      	beq.n	8006faa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e01f      	b.n	8006fea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e01d      	b.n	8006fea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006fae:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 0207 	bic.w	r2, r3, #7
 8006fb6:	490f      	ldr	r1, [pc, #60]	; (8006ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006fbe:	f7fc fcd5 	bl	800396c <HAL_GetTick>
 8006fc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fc4:	e009      	b.n	8006fda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fc6:	f7fc fcd1 	bl	800396c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fd4:	d901      	bls.n	8006fda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e007      	b.n	8006fea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe6:	d1ee      	bne.n	8006fc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	58024800 	.word	0x58024800

08006ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08c      	sub	sp, #48	; 0x30
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e397      	b.n	800773a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8087 	beq.w	8007126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007018:	4b9e      	ldr	r3, [pc, #632]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007022:	4b9c      	ldr	r3, [pc, #624]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2b10      	cmp	r3, #16
 800702c:	d007      	beq.n	800703e <HAL_RCC_OscConfig+0x46>
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	2b18      	cmp	r3, #24
 8007032:	d110      	bne.n	8007056 <HAL_RCC_OscConfig+0x5e>
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d10b      	bne.n	8007056 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703e:	4b95      	ldr	r3, [pc, #596]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d06c      	beq.n	8007124 <HAL_RCC_OscConfig+0x12c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d168      	bne.n	8007124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e371      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705e:	d106      	bne.n	800706e <HAL_RCC_OscConfig+0x76>
 8007060:	4b8c      	ldr	r3, [pc, #560]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a8b      	ldr	r2, [pc, #556]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e02e      	b.n	80070cc <HAL_RCC_OscConfig+0xd4>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0x98>
 8007076:	4b87      	ldr	r3, [pc, #540]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a86      	ldr	r2, [pc, #536]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800707c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b84      	ldr	r3, [pc, #528]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e01d      	b.n	80070cc <HAL_RCC_OscConfig+0xd4>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007098:	d10c      	bne.n	80070b4 <HAL_RCC_OscConfig+0xbc>
 800709a:	4b7e      	ldr	r3, [pc, #504]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7d      	ldr	r2, [pc, #500]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	4b7b      	ldr	r3, [pc, #492]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7a      	ldr	r2, [pc, #488]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e00b      	b.n	80070cc <HAL_RCC_OscConfig+0xd4>
 80070b4:	4b77      	ldr	r3, [pc, #476]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a76      	ldr	r2, [pc, #472]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4b74      	ldr	r3, [pc, #464]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a73      	ldr	r2, [pc, #460]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d013      	beq.n	80070fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d4:	f7fc fc4a 	bl	800396c <HAL_GetTick>
 80070d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070dc:	f7fc fc46 	bl	800396c <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b64      	cmp	r3, #100	; 0x64
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e325      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ee:	4b69      	ldr	r3, [pc, #420]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f0      	beq.n	80070dc <HAL_RCC_OscConfig+0xe4>
 80070fa:	e014      	b.n	8007126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fc fc36 	bl	800396c <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007104:	f7fc fc32 	bl	800396c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	; 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e311      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007116:	4b5f      	ldr	r3, [pc, #380]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x10c>
 8007122:	e000      	b.n	8007126 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 808a 	beq.w	8007248 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007134:	4b57      	ldr	r3, [pc, #348]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800713c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800713e:	4b55      	ldr	r3, [pc, #340]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <HAL_RCC_OscConfig+0x162>
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2b18      	cmp	r3, #24
 800714e:	d137      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1c8>
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d132      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800715a:	4b4e      	ldr	r3, [pc, #312]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_RCC_OscConfig+0x17a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e2e3      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007172:	4b48      	ldr	r3, [pc, #288]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 0219 	bic.w	r2, r3, #25
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	4945      	ldr	r1, [pc, #276]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007184:	f7fc fbf2 	bl	800396c <HAL_GetTick>
 8007188:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800718c:	f7fc fbee 	bl	800396c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e2cd      	b.n	800773a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800719e:	4b3d      	ldr	r3, [pc, #244]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0f0      	beq.n	800718c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071aa:	4b3a      	ldr	r3, [pc, #232]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	061b      	lsls	r3, r3, #24
 80071b8:	4936      	ldr	r1, [pc, #216]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071be:	e043      	b.n	8007248 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d026      	beq.n	8007216 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071c8:	4b32      	ldr	r3, [pc, #200]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f023 0219 	bic.w	r2, r3, #25
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	492f      	ldr	r1, [pc, #188]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fc fbc7 	bl	800396c <HAL_GetTick>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071e2:	f7fc fbc3 	bl	800396c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e2a2      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007200:	4b24      	ldr	r3, [pc, #144]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	061b      	lsls	r3, r3, #24
 800720e:	4921      	ldr	r1, [pc, #132]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
 8007214:	e018      	b.n	8007248 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007216:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1e      	ldr	r2, [pc, #120]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fc fba3 	bl	800396c <HAL_GetTick>
 8007226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800722a:	f7fc fb9f 	bl	800396c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e27e      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800723c:	4b15      	ldr	r3, [pc, #84]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f0      	bne.n	800722a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d06d      	beq.n	8007330 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800725c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b08      	cmp	r3, #8
 8007268:	d007      	beq.n	800727a <HAL_RCC_OscConfig+0x282>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b18      	cmp	r3, #24
 800726e:	d11e      	bne.n	80072ae <HAL_RCC_OscConfig+0x2b6>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b01      	cmp	r3, #1
 8007278:	d119      	bne.n	80072ae <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <HAL_RCC_OscConfig+0x29c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_RCC_OscConfig+0x2a0>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d004      	beq.n	8007298 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e253      	b.n	800773a <HAL_RCC_OscConfig+0x742>
 8007292:	bf00      	nop
 8007294:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007298:	4ba3      	ldr	r3, [pc, #652]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	49a0      	ldr	r1, [pc, #640]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072ac:	e040      	b.n	8007330 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d023      	beq.n	80072fe <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072b6:	4b9c      	ldr	r3, [pc, #624]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a9b      	ldr	r2, [pc, #620]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c2:	f7fc fb53 	bl	800396c <HAL_GetTick>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072ca:	f7fc fb4f 	bl	800396c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e22e      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072dc:	4b92      	ldr	r3, [pc, #584]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072e8:	4b8f      	ldr	r3, [pc, #572]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	498c      	ldr	r1, [pc, #560]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60cb      	str	r3, [r1, #12]
 80072fc:	e018      	b.n	8007330 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072fe:	4b8a      	ldr	r3, [pc, #552]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a89      	ldr	r2, [pc, #548]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fc fb2f 	bl	800396c <HAL_GetTick>
 800730e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007312:	f7fc fb2b 	bl	800396c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e20a      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007324:	4b80      	ldr	r3, [pc, #512]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d036      	beq.n	80073aa <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d019      	beq.n	8007378 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007344:	4b78      	ldr	r3, [pc, #480]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007348:	4a77      	ldr	r2, [pc, #476]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007350:	f7fc fb0c 	bl	800396c <HAL_GetTick>
 8007354:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007358:	f7fc fb08 	bl	800396c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e1e7      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800736a:	4b6f      	ldr	r3, [pc, #444]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800736c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x360>
 8007376:	e018      	b.n	80073aa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007378:	4b6b      	ldr	r3, [pc, #428]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	4a6a      	ldr	r2, [pc, #424]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007384:	f7fc faf2 	bl	800396c <HAL_GetTick>
 8007388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800738c:	f7fc faee 	bl	800396c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1cd      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800739e:	4b62      	ldr	r3, [pc, #392]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d036      	beq.n	8007424 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d019      	beq.n	80073f2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073be:	4b5a      	ldr	r3, [pc, #360]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a59      	ldr	r2, [pc, #356]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073ca:	f7fc facf 	bl	800396c <HAL_GetTick>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073d2:	f7fc facb 	bl	800396c <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e1aa      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073e4:	4b50      	ldr	r3, [pc, #320]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCC_OscConfig+0x3da>
 80073f0:	e018      	b.n	8007424 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073f2:	4b4d      	ldr	r3, [pc, #308]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a4c      	ldr	r2, [pc, #304]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80073f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073fe:	f7fc fab5 	bl	800396c <HAL_GetTick>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007406:	f7fc fab1 	bl	800396c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e190      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007418:	4b43      	ldr	r3, [pc, #268]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8085 	beq.w	800753c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007432:	4b3e      	ldr	r3, [pc, #248]	; (800752c <HAL_RCC_OscConfig+0x534>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a3d      	ldr	r2, [pc, #244]	; (800752c <HAL_RCC_OscConfig+0x534>)
 8007438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800743e:	f7fc fa95 	bl	800396c <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007446:	f7fc fa91 	bl	800396c <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b64      	cmp	r3, #100	; 0x64
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e170      	b.n	800773a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007458:	4b34      	ldr	r3, [pc, #208]	; (800752c <HAL_RCC_OscConfig+0x534>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d106      	bne.n	800747a <HAL_RCC_OscConfig+0x482>
 800746c:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	6713      	str	r3, [r2, #112]	; 0x70
 8007478:	e02d      	b.n	80074d6 <HAL_RCC_OscConfig+0x4de>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10c      	bne.n	800749c <HAL_RCC_OscConfig+0x4a4>
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	4a28      	ldr	r2, [pc, #160]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	6713      	str	r3, [r2, #112]	; 0x70
 800748e:	4b26      	ldr	r3, [pc, #152]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	4a25      	ldr	r2, [pc, #148]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 8007494:	f023 0304 	bic.w	r3, r3, #4
 8007498:	6713      	str	r3, [r2, #112]	; 0x70
 800749a:	e01c      	b.n	80074d6 <HAL_RCC_OscConfig+0x4de>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d10c      	bne.n	80074be <HAL_RCC_OscConfig+0x4c6>
 80074a4:	4b20      	ldr	r3, [pc, #128]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074aa:	f043 0304 	orr.w	r3, r3, #4
 80074ae:	6713      	str	r3, [r2, #112]	; 0x70
 80074b0:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	6713      	str	r3, [r2, #112]	; 0x70
 80074bc:	e00b      	b.n	80074d6 <HAL_RCC_OscConfig+0x4de>
 80074be:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	4a19      	ldr	r2, [pc, #100]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	4a16      	ldr	r2, [pc, #88]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074d0:	f023 0304 	bic.w	r3, r3, #4
 80074d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d015      	beq.n	800750a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fc fa45 	bl	800396c <HAL_GetTick>
 80074e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fc fa41 	bl	800396c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e11e      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <HAL_RCC_OscConfig+0x530>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ee      	beq.n	80074e6 <HAL_RCC_OscConfig+0x4ee>
 8007508:	e018      	b.n	800753c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fc fa2f 	bl	800396c <HAL_GetTick>
 800750e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007510:	e00e      	b.n	8007530 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007512:	f7fc fa2b 	bl	800396c <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d905      	bls.n	8007530 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e108      	b.n	800773a <HAL_RCC_OscConfig+0x742>
 8007528:	58024400 	.word	0x58024400
 800752c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007530:	4b84      	ldr	r3, [pc, #528]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ea      	bne.n	8007512 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80f9 	beq.w	8007738 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007546:	4b7f      	ldr	r3, [pc, #508]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800754e:	2b18      	cmp	r3, #24
 8007550:	f000 80b4 	beq.w	80076bc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b02      	cmp	r3, #2
 800755a:	f040 8095 	bne.w	8007688 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755e:	4b79      	ldr	r3, [pc, #484]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a78      	ldr	r2, [pc, #480]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756a:	f7fc f9ff 	bl	800396c <HAL_GetTick>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007572:	f7fc f9fb 	bl	800396c <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e0da      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007584:	4b6f      	ldr	r3, [pc, #444]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f0      	bne.n	8007572 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007590:	4b6c      	ldr	r3, [pc, #432]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007594:	4b6c      	ldr	r3, [pc, #432]	; (8007748 <HAL_RCC_OscConfig+0x750>)
 8007596:	4013      	ands	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075a0:	0112      	lsls	r2, r2, #4
 80075a2:	430a      	orrs	r2, r1
 80075a4:	4967      	ldr	r1, [pc, #412]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	628b      	str	r3, [r1, #40]	; 0x28
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	3b01      	subs	r3, #1
 80075b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	3b01      	subs	r3, #1
 80075ba:	025b      	lsls	r3, r3, #9
 80075bc:	b29b      	uxth	r3, r3
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	3b01      	subs	r3, #1
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	3b01      	subs	r3, #1
 80075d4:	061b      	lsls	r3, r3, #24
 80075d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075da:	495a      	ldr	r1, [pc, #360]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80075e0:	4b58      	ldr	r3, [pc, #352]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a57      	ldr	r2, [pc, #348]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075ec:	4b55      	ldr	r3, [pc, #340]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f0:	4b56      	ldr	r3, [pc, #344]	; (800774c <HAL_RCC_OscConfig+0x754>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075f8:	00d2      	lsls	r2, r2, #3
 80075fa:	4952      	ldr	r1, [pc, #328]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007600:	4b50      	ldr	r3, [pc, #320]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f023 020c 	bic.w	r2, r3, #12
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	494d      	ldr	r1, [pc, #308]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007612:	4b4c      	ldr	r3, [pc, #304]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f023 0202 	bic.w	r2, r3, #2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	4949      	ldr	r1, [pc, #292]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007624:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	4a46      	ldr	r2, [pc, #280]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800762a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007630:	4b44      	ldr	r3, [pc, #272]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4a43      	ldr	r2, [pc, #268]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800763c:	4b41      	ldr	r3, [pc, #260]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	4a40      	ldr	r2, [pc, #256]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a3d      	ldr	r2, [pc, #244]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007654:	4b3b      	ldr	r3, [pc, #236]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800765a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007660:	f7fc f984 	bl	800396c <HAL_GetTick>
 8007664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007668:	f7fc f980 	bl	800396c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e05f      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800767a:	4b32      	ldr	r3, [pc, #200]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x670>
 8007686:	e057      	b.n	8007738 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007688:	4b2e      	ldr	r3, [pc, #184]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 800768e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fc f96a 	bl	800396c <HAL_GetTick>
 8007698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800769c:	f7fc f966 	bl	800396c <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e045      	b.n	800773a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076ae:	4b25      	ldr	r3, [pc, #148]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x6a4>
 80076ba:	e03d      	b.n	8007738 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076bc:	4b21      	ldr	r3, [pc, #132]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80076c2:	4b20      	ldr	r3, [pc, #128]	; (8007744 <HAL_RCC_OscConfig+0x74c>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d031      	beq.n	8007734 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f003 0203 	and.w	r2, r3, #3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076da:	429a      	cmp	r2, r3
 80076dc:	d12a      	bne.n	8007734 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d122      	bne.n	8007734 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d11a      	bne.n	8007734 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d111      	bne.n	8007734 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800771e:	429a      	cmp	r2, r3
 8007720:	d108      	bne.n	8007734 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3730      	adds	r7, #48	; 0x30
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	fffffc0c 	.word	0xfffffc0c
 800774c:	ffff0007 	.word	0xffff0007

08007750 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e19c      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007764:	4b8a      	ldr	r3, [pc, #552]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d910      	bls.n	8007794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007772:	4b87      	ldr	r3, [pc, #540]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 020f 	bic.w	r2, r3, #15
 800777a:	4985      	ldr	r1, [pc, #532]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b83      	ldr	r3, [pc, #524]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e184      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d010      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	4b7b      	ldr	r3, [pc, #492]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d908      	bls.n	80077c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077b0:	4b78      	ldr	r3, [pc, #480]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4975      	ldr	r1, [pc, #468]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d010      	beq.n	80077f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	4b70      	ldr	r3, [pc, #448]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077da:	429a      	cmp	r2, r3
 80077dc:	d908      	bls.n	80077f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077de:	4b6d      	ldr	r3, [pc, #436]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	496a      	ldr	r1, [pc, #424]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d010      	beq.n	800781e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	4b64      	ldr	r3, [pc, #400]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007808:	429a      	cmp	r2, r3
 800780a:	d908      	bls.n	800781e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800780c:	4b61      	ldr	r3, [pc, #388]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	495e      	ldr	r1, [pc, #376]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800781a:	4313      	orrs	r3, r2
 800781c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	4b59      	ldr	r3, [pc, #356]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007836:	429a      	cmp	r2, r3
 8007838:	d908      	bls.n	800784c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800783a:	4b56      	ldr	r3, [pc, #344]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	4953      	ldr	r1, [pc, #332]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007848:	4313      	orrs	r3, r2
 800784a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d010      	beq.n	800787a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	4b4d      	ldr	r3, [pc, #308]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	429a      	cmp	r2, r3
 8007866:	d908      	bls.n	800787a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007868:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f023 020f 	bic.w	r2, r3, #15
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4947      	ldr	r1, [pc, #284]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007876:	4313      	orrs	r3, r2
 8007878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d055      	beq.n	8007932 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007886:	4b43      	ldr	r3, [pc, #268]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	4940      	ldr	r1, [pc, #256]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007894:	4313      	orrs	r3, r2
 8007896:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d107      	bne.n	80078b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078a0:	4b3c      	ldr	r3, [pc, #240]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d121      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e0f6      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d107      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078b8:	4b36      	ldr	r3, [pc, #216]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d115      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0ea      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d107      	bne.n	80078e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078d0:	4b30      	ldr	r3, [pc, #192]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e0de      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078e0:	4b2c      	ldr	r3, [pc, #176]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0d6      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078f0:	4b28      	ldr	r3, [pc, #160]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f023 0207 	bic.w	r2, r3, #7
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4925      	ldr	r1, [pc, #148]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007902:	f7fc f833 	bl	800396c <HAL_GetTick>
 8007906:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007908:	e00a      	b.n	8007920 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800790a:	f7fc f82f 	bl	800396c <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	; 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e0be      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	429a      	cmp	r2, r3
 8007930:	d1eb      	bne.n	800790a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	4b14      	ldr	r3, [pc, #80]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	429a      	cmp	r2, r3
 800794c:	d208      	bcs.n	8007960 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800794e:	4b11      	ldr	r3, [pc, #68]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f023 020f 	bic.w	r2, r3, #15
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	490e      	ldr	r1, [pc, #56]	; (8007994 <HAL_RCC_ClockConfig+0x244>)
 800795c:	4313      	orrs	r3, r2
 800795e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d214      	bcs.n	8007998 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796e:	4b08      	ldr	r3, [pc, #32]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f023 020f 	bic.w	r2, r3, #15
 8007976:	4906      	ldr	r1, [pc, #24]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	4313      	orrs	r3, r2
 800797c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <HAL_RCC_ClockConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d005      	beq.n	8007998 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e086      	b.n	8007a9e <HAL_RCC_ClockConfig+0x34e>
 8007990:	52002000 	.word	0x52002000
 8007994:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d010      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	4b3f      	ldr	r3, [pc, #252]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d208      	bcs.n	80079c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079b4:	4b3c      	ldr	r3, [pc, #240]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	4939      	ldr	r1, [pc, #228]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079de:	429a      	cmp	r2, r3
 80079e0:	d208      	bcs.n	80079f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079e2:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	492e      	ldr	r1, [pc, #184]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d010      	beq.n	8007a22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	4b28      	ldr	r3, [pc, #160]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d208      	bcs.n	8007a22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	4922      	ldr	r1, [pc, #136]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d010      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69da      	ldr	r2, [r3, #28]
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d208      	bcs.n	8007a50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	4917      	ldr	r1, [pc, #92]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a50:	f000 f844 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	4912      	ldr	r1, [pc, #72]	; (8007aac <HAL_RCC_ClockConfig+0x35c>)
 8007a62:	5ccb      	ldrb	r3, [r1, r3]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <HAL_RCC_ClockConfig+0x358>)
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <HAL_RCC_ClockConfig+0x35c>)
 8007a78:	5cd3      	ldrb	r3, [r2, r3]
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
 8007a84:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <HAL_RCC_ClockConfig+0x360>)
 8007a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a88:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <HAL_RCC_ClockConfig+0x364>)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HAL_RCC_ClockConfig+0x368>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fb ff20 	bl	80038d8 <HAL_InitTick>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	08010310 	.word	0x08010310
 8007ab0:	24000014 	.word	0x24000014
 8007ab4:	24000010 	.word	0x24000010
 8007ab8:	24000018 	.word	0x24000018

08007abc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_RCC_EnableCSS+0x1c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a04      	ldr	r2, [pc, #16]	; (8007ad8 <HAL_RCC_EnableCSS+0x1c>)
 8007ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	58024400 	.word	0x58024400

08007adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ae2:	4bb3      	ldr	r3, [pc, #716]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aea:	2b18      	cmp	r3, #24
 8007aec:	f200 8155 	bhi.w	8007d9a <HAL_RCC_GetSysClockFreq+0x2be>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007d9b 	.word	0x08007d9b
 8007b00:	08007d9b 	.word	0x08007d9b
 8007b04:	08007d9b 	.word	0x08007d9b
 8007b08:	08007d9b 	.word	0x08007d9b
 8007b0c:	08007d9b 	.word	0x08007d9b
 8007b10:	08007d9b 	.word	0x08007d9b
 8007b14:	08007d9b 	.word	0x08007d9b
 8007b18:	08007b83 	.word	0x08007b83
 8007b1c:	08007d9b 	.word	0x08007d9b
 8007b20:	08007d9b 	.word	0x08007d9b
 8007b24:	08007d9b 	.word	0x08007d9b
 8007b28:	08007d9b 	.word	0x08007d9b
 8007b2c:	08007d9b 	.word	0x08007d9b
 8007b30:	08007d9b 	.word	0x08007d9b
 8007b34:	08007d9b 	.word	0x08007d9b
 8007b38:	08007b89 	.word	0x08007b89
 8007b3c:	08007d9b 	.word	0x08007d9b
 8007b40:	08007d9b 	.word	0x08007d9b
 8007b44:	08007d9b 	.word	0x08007d9b
 8007b48:	08007d9b 	.word	0x08007d9b
 8007b4c:	08007d9b 	.word	0x08007d9b
 8007b50:	08007d9b 	.word	0x08007d9b
 8007b54:	08007d9b 	.word	0x08007d9b
 8007b58:	08007b8f 	.word	0x08007b8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5c:	4b94      	ldr	r3, [pc, #592]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b68:	4b91      	ldr	r3, [pc, #580]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	08db      	lsrs	r3, r3, #3
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	4a90      	ldr	r2, [pc, #576]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
 8007b78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b7a:	e111      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b7c:	4b8d      	ldr	r3, [pc, #564]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b7e:	61bb      	str	r3, [r7, #24]
    break;
 8007b80:	e10e      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b82:	4b8d      	ldr	r3, [pc, #564]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b84:	61bb      	str	r3, [r7, #24]
    break;
 8007b86:	e10b      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007b88:	4b8c      	ldr	r3, [pc, #560]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b8a:	61bb      	str	r3, [r7, #24]
    break;
 8007b8c:	e108      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b8e:	4b88      	ldr	r3, [pc, #544]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b98:	4b85      	ldr	r3, [pc, #532]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ba4:	4b82      	ldr	r3, [pc, #520]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007bae:	4b80      	ldr	r3, [pc, #512]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80e1 	beq.w	8007d94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	f000 8083 	beq.w	8007ce0 <HAL_RCC_GetSysClockFreq+0x204>
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f200 80a1 	bhi.w	8007d24 <HAL_RCC_GetSysClockFreq+0x248>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x114>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d056      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bee:	e099      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf0:	4b6f      	ldr	r3, [pc, #444]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02d      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bfc:	4b6c      	ldr	r3, [pc, #432]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	08db      	lsrs	r3, r3, #3
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	4a6b      	ldr	r2, [pc, #428]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c08:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b62      	ldr	r3, [pc, #392]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007c56:	e087      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007dc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b51      	ldr	r3, [pc, #324]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c9a:	e065      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b40      	ldr	r3, [pc, #256]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cde:	e043      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007dcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d22:	e021      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d68:	4b11      	ldr	r3, [pc, #68]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	0a5b      	lsrs	r3, r3, #9
 8007d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d72:	3301      	adds	r3, #1
 8007d74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8c:	ee17 3a90 	vmov	r3, s15
 8007d90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d92:	e005      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
    break;
 8007d98:	e002      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d9c:	61bb      	str	r3, [r7, #24]
    break;
 8007d9e:	bf00      	nop
  }

  return sysclockfreq;
 8007da0:	69bb      	ldr	r3, [r7, #24]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	003d0900 	.word	0x003d0900
 8007dbc:	017d7840 	.word	0x017d7840
 8007dc0:	46000000 	.word	0x46000000
 8007dc4:	4c742400 	.word	0x4c742400
 8007dc8:	4a742400 	.word	0x4a742400
 8007dcc:	4bbebc20 	.word	0x4bbebc20

08007dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007dd6:	f7ff fe81 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	490f      	ldr	r1, [pc, #60]	; (8007e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007de8:	5ccb      	ldrb	r3, [r1, r3]
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dfe:	5cd3      	ldrb	r3, [r2, r3]
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0a:	4a07      	ldr	r2, [pc, #28]	; (8007e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e0e:	4a07      	ldr	r2, [pc, #28]	; (8007e2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	58024400 	.word	0x58024400
 8007e24:	08010310 	.word	0x08010310
 8007e28:	24000014 	.word	0x24000014
 8007e2c:	24000010 	.word	0x24000010

08007e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e34:	f7ff ffcc 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	4904      	ldr	r1, [pc, #16]	; (8007e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e46:	5ccb      	ldrb	r3, [r1, r3]
 8007e48:	f003 031f 	and.w	r3, r3, #31
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	58024400 	.word	0x58024400
 8007e58:	08010310 	.word	0x08010310

08007e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e60:	f7ff ffb6 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	4904      	ldr	r1, [pc, #16]	; (8007e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e72:	5ccb      	ldrb	r3, [r1, r3]
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	58024400 	.word	0x58024400
 8007e84:	08010310 	.word	0x08010310

08007e88 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <HAL_RCC_NMI_IRQHandler+0x24>)
 8007e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e98:	d105      	bne.n	8007ea6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007e9a:	f000 f809 	bl	8007eb0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007e9e:	4b03      	ldr	r3, [pc, #12]	; (8007eac <HAL_RCC_NMI_IRQHandler+0x24>)
 8007ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ea4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400

08007eb0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d03f      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ee4:	d02a      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eea:	d824      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ef0:	d018      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ef6:	d81e      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f00:	d007      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f02:	e018      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4bab      	ldr	r3, [pc, #684]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4aaa      	ldr	r2, [pc, #680]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f10:	e015      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2102      	movs	r1, #2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 feff 	bl	8009d1c <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f22:	e00c      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	2102      	movs	r1, #2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 ffa8 	bl	8009e80 <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f34:	e003      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3a:	e000      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f44:	4b9b      	ldr	r3, [pc, #620]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f50:	4998      	ldr	r1, [pc, #608]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	650b      	str	r3, [r1, #80]	; 0x50
 8007f56:	e001      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d03d      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d826      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f8d 	.word	0x08007f8d
 8007f7c:	08007f9b 	.word	0x08007f9b
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fc5 	.word	0x08007fc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8c:	4b89      	ldr	r3, [pc, #548]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	4a88      	ldr	r2, [pc, #544]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f98:	e015      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 febb 	bl	8009d1c <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007faa:	e00c      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 ff64 	bl	8009e80 <RCCEx_PLL3_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fbc:	e003      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fcc:	4b79      	ldr	r3, [pc, #484]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	f023 0207 	bic.w	r2, r3, #7
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	4976      	ldr	r1, [pc, #472]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8007fde:	e001      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d051      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ff6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ffa:	d036      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ffc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008000:	d830      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008006:	d032      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800800c:	d82a      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800800e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008012:	d02e      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008014:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008018:	d824      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800801a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800801e:	d018      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008024:	d81e      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800802a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802e:	d007      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008030:	e018      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008032:	4b60      	ldr	r3, [pc, #384]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	4a5f      	ldr	r2, [pc, #380]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800803e:	e019      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fe68 	bl	8009d1c <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008050:	e010      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f001 ff11 	bl	8009e80 <RCCEx_PLL3_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800807a:	4b4e      	ldr	r3, [pc, #312]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800807c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008088:	494a      	ldr	r1, [pc, #296]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808a:	4313      	orrs	r3, r2
 800808c:	658b      	str	r3, [r1, #88]	; 0x58
 800808e:	e001      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800809c:	2b00      	cmp	r3, #0
 800809e:	d051      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80080aa:	d036      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80080ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80080b0:	d830      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80080b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b6:	d032      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80080b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080bc:	d82a      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80080be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c2:	d02e      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80080c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c8:	d824      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80080ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ce:	d018      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80080d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d4:	d81e      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80080da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080de:	d007      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80080e0:	e018      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e2:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080ee:	e019      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fe10 	bl	8009d1c <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008100:	e010      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3324      	adds	r3, #36	; 0x24
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f001 feb9 	bl	8009e80 <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008112:	e007      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
      break;
 8008118:	e004      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800811a:	bf00      	nop
 800811c:	e002      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800812a:	4b22      	ldr	r3, [pc, #136]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008138:	491e      	ldr	r1, [pc, #120]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813a:	4313      	orrs	r3, r2
 800813c:	658b      	str	r3, [r1, #88]	; 0x58
 800813e:	e001      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d035      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d01c      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008158:	2b30      	cmp	r3, #48	; 0x30
 800815a:	d817      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d00c      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008160:	2b20      	cmp	r3, #32
 8008162:	d813      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d016      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008168:	2b10      	cmp	r3, #16
 800816a:	d10f      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816c:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008178:	e00e      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3304      	adds	r3, #4
 800817e:	2102      	movs	r1, #2
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fdcb 	bl	8009d1c <RCCEx_PLL2_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800818a:	e005      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	e002      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10c      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081aa:	4902      	ldr	r1, [pc, #8]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081b0:	e004      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80081b2:	bf00      	nop
 80081b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d047      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d0:	d030      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80081d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d6:	d82a      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80081d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081dc:	d02c      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80081de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081e2:	d824      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80081e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e8:	d018      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80081ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ee:	d81e      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f8:	d007      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80081fa:	e018      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fc:	4bac      	ldr	r3, [pc, #688]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4aab      	ldr	r2, [pc, #684]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008208:	e017      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3304      	adds	r3, #4
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fd83 	bl	8009d1c <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800821a:	e00e      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fe2c 	bl	8009e80 <RCCEx_PLL3_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800822c:	e005      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	e002      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d109      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008240:	4b9b      	ldr	r3, [pc, #620]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008244:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	4998      	ldr	r1, [pc, #608]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800824e:	4313      	orrs	r3, r2
 8008250:	650b      	str	r3, [r1, #80]	; 0x50
 8008252:	e001      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d049      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800826c:	d02e      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800826e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008272:	d828      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008278:	d02a      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800827a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800827e:	d822      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008284:	d026      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800828a:	d81c      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800828c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008290:	d010      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008296:	d816      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01d      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800829c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a0:	d111      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2101      	movs	r1, #1
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fd37 	bl	8009d1c <RCCEx_PLL2_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80082b2:	e012      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3324      	adds	r3, #36	; 0x24
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fde0 	bl	8009e80 <RCCEx_PLL3_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80082c4:	e009      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	e006      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80082cc:	bf00      	nop
 80082ce:	e004      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80082d0:	bf00      	nop
 80082d2:	e002      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80082d4:	bf00      	nop
 80082d6:	e000      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80082d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082e0:	4b73      	ldr	r3, [pc, #460]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ec:	4970      	ldr	r1, [pc, #448]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	650b      	str	r3, [r1, #80]	; 0x50
 80082f2:	e001      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d04b      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800830a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800830e:	d02e      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008314:	d828      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831a:	d02a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800831c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008320:	d822      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008326:	d026      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800832c:	d81c      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800832e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008332:	d010      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008338:	d816      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01d      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800833e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008342:	d111      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	2101      	movs	r1, #1
 800834a:	4618      	mov	r0, r3
 800834c:	f001 fce6 	bl	8009d1c <RCCEx_PLL2_Config>
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008354:	e012      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3324      	adds	r3, #36	; 0x24
 800835a:	2101      	movs	r1, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fd8f 	bl	8009e80 <RCCEx_PLL3_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008366:	e009      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]
      break;
 800836c:	e006      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800836e:	bf00      	nop
 8008370:	e004      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008372:	bf00      	nop
 8008374:	e002      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008376:	bf00      	nop
 8008378:	e000      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800837a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008382:	4b4b      	ldr	r3, [pc, #300]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008390:	4947      	ldr	r1, [pc, #284]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008392:	4313      	orrs	r3, r2
 8008394:	658b      	str	r3, [r1, #88]	; 0x58
 8008396:	e001      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d02f      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b0:	d00e      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80083b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b6:	d814      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d015      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80083bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c0:	d10f      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c2:	4b3b      	ldr	r3, [pc, #236]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a3a      	ldr	r2, [pc, #232]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083ce:	e00c      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3304      	adds	r3, #4
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 fca0 	bl	8009d1c <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083e0:	e003      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]
      break;
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80083e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083f0:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fc:	492c      	ldr	r1, [pc, #176]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	650b      	str	r3, [r1, #80]	; 0x50
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d032      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008418:	2b03      	cmp	r3, #3
 800841a:	d81b      	bhi.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800841c:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008422:	bf00      	nop
 8008424:	0800845b 	.word	0x0800845b
 8008428:	08008435 	.word	0x08008435
 800842c:	08008443 	.word	0x08008443
 8008430:	0800845b 	.word	0x0800845b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008434:	4b1e      	ldr	r3, [pc, #120]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800843a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008440:	e00c      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3304      	adds	r3, #4
 8008446:	2102      	movs	r1, #2
 8008448:	4618      	mov	r0, r3
 800844a:	f001 fc67 	bl	8009d1c <RCCEx_PLL2_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008452:	e003      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	75fb      	strb	r3, [r7, #23]
      break;
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800845a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008466:	f023 0203 	bic.w	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	4910      	ldr	r1, [pc, #64]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008470:	4313      	orrs	r3, r2
 8008472:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008474:	e001      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 808a 	beq.w	800859c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800848e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008494:	f7fb fa6a 	bl	800396c <HAL_GetTick>
 8008498:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800849a:	e00d      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849c:	f7fb fa66 	bl	800396c <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b64      	cmp	r3, #100	; 0x64
 80084a8:	d906      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	75fb      	strb	r3, [r7, #23]
        break;
 80084ae:	e009      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80084b0:	58024400 	.word	0x58024400
 80084b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084b8:	4bb9      	ldr	r3, [pc, #740]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0eb      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d166      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80084ca:	4bb6      	ldr	r3, [pc, #728]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084d4:	4053      	eors	r3, r2
 80084d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d013      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084de:	4bb1      	ldr	r3, [pc, #708]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084e8:	4bae      	ldr	r3, [pc, #696]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ec:	4aad      	ldr	r2, [pc, #692]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084f4:	4bab      	ldr	r3, [pc, #684]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	4aaa      	ldr	r2, [pc, #680]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008500:	4aa8      	ldr	r2, [pc, #672]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800850c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008510:	d115      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008512:	f7fb fa2b 	bl	800396c <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008518:	e00b      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800851a:	f7fb fa27 	bl	800396c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f241 3288 	movw	r2, #5000	; 0x1388
 8008528:	4293      	cmp	r3, r2
 800852a:	d902      	bls.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	75fb      	strb	r3, [r7, #23]
            break;
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008532:	4b9c      	ldr	r3, [pc, #624]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0ed      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d126      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800854a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800854e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008552:	d10d      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8008554:	4b93      	ldr	r3, [pc, #588]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008562:	0919      	lsrs	r1, r3, #4
 8008564:	4b90      	ldr	r3, [pc, #576]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008566:	400b      	ands	r3, r1
 8008568:	498e      	ldr	r1, [pc, #568]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800856a:	4313      	orrs	r3, r2
 800856c:	610b      	str	r3, [r1, #16]
 800856e:	e005      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008570:	4b8c      	ldr	r3, [pc, #560]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	4a8b      	ldr	r2, [pc, #556]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008576:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800857a:	6113      	str	r3, [r2, #16]
 800857c:	4b89      	ldr	r3, [pc, #548]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800857e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800858a:	4986      	ldr	r1, [pc, #536]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800858c:	4313      	orrs	r3, r2
 800858e:	670b      	str	r3, [r1, #112]	; 0x70
 8008590:	e004      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	75bb      	strb	r3, [r7, #22]
 8008596:	e001      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d07e      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ac:	2b28      	cmp	r3, #40	; 0x28
 80085ae:	d867      	bhi.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80085b0:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	08008687 	.word	0x08008687
 80085bc:	08008681 	.word	0x08008681
 80085c0:	08008681 	.word	0x08008681
 80085c4:	08008681 	.word	0x08008681
 80085c8:	08008681 	.word	0x08008681
 80085cc:	08008681 	.word	0x08008681
 80085d0:	08008681 	.word	0x08008681
 80085d4:	08008681 	.word	0x08008681
 80085d8:	0800865d 	.word	0x0800865d
 80085dc:	08008681 	.word	0x08008681
 80085e0:	08008681 	.word	0x08008681
 80085e4:	08008681 	.word	0x08008681
 80085e8:	08008681 	.word	0x08008681
 80085ec:	08008681 	.word	0x08008681
 80085f0:	08008681 	.word	0x08008681
 80085f4:	08008681 	.word	0x08008681
 80085f8:	0800866f 	.word	0x0800866f
 80085fc:	08008681 	.word	0x08008681
 8008600:	08008681 	.word	0x08008681
 8008604:	08008681 	.word	0x08008681
 8008608:	08008681 	.word	0x08008681
 800860c:	08008681 	.word	0x08008681
 8008610:	08008681 	.word	0x08008681
 8008614:	08008681 	.word	0x08008681
 8008618:	08008687 	.word	0x08008687
 800861c:	08008681 	.word	0x08008681
 8008620:	08008681 	.word	0x08008681
 8008624:	08008681 	.word	0x08008681
 8008628:	08008681 	.word	0x08008681
 800862c:	08008681 	.word	0x08008681
 8008630:	08008681 	.word	0x08008681
 8008634:	08008681 	.word	0x08008681
 8008638:	08008687 	.word	0x08008687
 800863c:	08008681 	.word	0x08008681
 8008640:	08008681 	.word	0x08008681
 8008644:	08008681 	.word	0x08008681
 8008648:	08008681 	.word	0x08008681
 800864c:	08008681 	.word	0x08008681
 8008650:	08008681 	.word	0x08008681
 8008654:	08008681 	.word	0x08008681
 8008658:	08008687 	.word	0x08008687
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	2101      	movs	r1, #1
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fb5a 	bl	8009d1c <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800866c:	e00c      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3324      	adds	r3, #36	; 0x24
 8008672:	2101      	movs	r1, #1
 8008674:	4618      	mov	r0, r3
 8008676:	f001 fc03 	bl	8009e80 <RCCEx_PLL3_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800867e:	e003      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]
      break;
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800868e:	4b45      	ldr	r3, [pc, #276]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800869a:	4942      	ldr	r1, [pc, #264]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800869c:	4313      	orrs	r3, r2
 800869e:	654b      	str	r3, [r1, #84]	; 0x54
 80086a0:	e001      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d037      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	d820      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	08008703 	.word	0x08008703
 80086c4:	080086d9 	.word	0x080086d9
 80086c8:	080086eb 	.word	0x080086eb
 80086cc:	08008703 	.word	0x08008703
 80086d0:	08008703 	.word	0x08008703
 80086d4:	08008703 	.word	0x08008703
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	2101      	movs	r1, #1
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fb1c 	bl	8009d1c <RCCEx_PLL2_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086e8:	e00c      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2101      	movs	r1, #1
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 fbc5 	bl	8009e80 <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086fa:	e003      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800870a:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f023 0207 	bic.w	r2, r3, #7
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008716:	4923      	ldr	r1, [pc, #140]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008718:	4313      	orrs	r3, r2
 800871a:	654b      	str	r3, [r1, #84]	; 0x54
 800871c:	e001      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d040      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008734:	2b05      	cmp	r3, #5
 8008736:	d821      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008783 	.word	0x08008783
 8008744:	08008759 	.word	0x08008759
 8008748:	0800876b 	.word	0x0800876b
 800874c:	08008783 	.word	0x08008783
 8008750:	08008783 	.word	0x08008783
 8008754:	08008783 	.word	0x08008783
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	2101      	movs	r1, #1
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fadc 	bl	8009d1c <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008768:	e00c      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3324      	adds	r3, #36	; 0x24
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fb85 	bl	8009e80 <RCCEx_PLL3_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800877a:	e003      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
      break;
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d110      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800878c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878e:	f023 0207 	bic.w	r2, r3, #7
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008798:	4902      	ldr	r1, [pc, #8]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800879a:	4313      	orrs	r3, r2
 800879c:	658b      	str	r3, [r1, #88]	; 0x58
 800879e:	e007      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80087a0:	58024800 	.word	0x58024800
 80087a4:	58024400 	.word	0x58024400
 80087a8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04b      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c6:	d02e      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80087c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087cc:	d828      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d2:	d02a      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d822      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80087da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087de:	d026      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80087e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087e4:	d81c      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80087e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ea:	d010      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f0:	d816      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01d      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80087f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087fa:	d111      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3304      	adds	r3, #4
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f001 fa8a 	bl	8009d1c <RCCEx_PLL2_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800880c:	e012      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3324      	adds	r3, #36	; 0x24
 8008812:	2102      	movs	r1, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fb33 	bl	8009e80 <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800881e:	e009      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
      break;
 8008824:	e006      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008826:	bf00      	nop
 8008828:	e004      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800882a:	bf00      	nop
 800882c:	e002      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800882e:	bf00      	nop
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800883a:	4bb2      	ldr	r3, [pc, #712]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800883c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008848:	49ae      	ldr	r1, [pc, #696]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800884a:	4313      	orrs	r3, r2
 800884c:	654b      	str	r3, [r1, #84]	; 0x54
 800884e:	e001      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d04b      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008866:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800886a:	d02e      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800886c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008870:	d828      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008876:	d02a      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887c:	d822      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800887e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008882:	d026      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008888:	d81c      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800888a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800888e:	d010      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008894:	d816      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01d      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800889a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800889e:	d111      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fa38 	bl	8009d1c <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80088b0:	e012      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3324      	adds	r3, #36	; 0x24
 80088b6:	2102      	movs	r1, #2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fae1 	bl	8009e80 <RCCEx_PLL3_Config>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80088c2:	e009      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	e006      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80088ca:	bf00      	nop
 80088cc:	e004      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80088ce:	bf00      	nop
 80088d0:	e002      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80088d2:	bf00      	nop
 80088d4:	e000      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80088d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088de:	4b89      	ldr	r3, [pc, #548]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ec:	4985      	ldr	r1, [pc, #532]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	658b      	str	r3, [r1, #88]	; 0x58
 80088f2:	e001      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008900:	2b00      	cmp	r3, #0
 8008902:	d04b      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800890a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800890e:	d02e      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008910:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008914:	d828      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891a:	d02a      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800891c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008920:	d822      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008922:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008926:	d026      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008928:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800892c:	d81c      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800892e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008932:	d010      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008938:	d816      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01d      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800893e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008942:	d111      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f001 f9e6 	bl	8009d1c <RCCEx_PLL2_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008954:	e012      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3324      	adds	r3, #36	; 0x24
 800895a:	2102      	movs	r1, #2
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fa8f 	bl	8009e80 <RCCEx_PLL3_Config>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008966:	e009      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
      break;
 800896c:	e006      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800896e:	bf00      	nop
 8008970:	e004      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008972:	bf00      	nop
 8008974:	e002      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008976:	bf00      	nop
 8008978:	e000      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800897a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008982:	4b60      	ldr	r3, [pc, #384]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008990:	495c      	ldr	r1, [pc, #368]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008992:	4313      	orrs	r3, r2
 8008994:	658b      	str	r3, [r1, #88]	; 0x58
 8008996:	e001      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d018      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b0:	d10a      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3324      	adds	r3, #36	; 0x24
 80089b6:	2102      	movs	r1, #2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fa61 	bl	8009e80 <RCCEx_PLL3_Config>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80089c8:	4b4e      	ldr	r3, [pc, #312]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d4:	494b      	ldr	r1, [pc, #300]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01a      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d10a      	bne.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3324      	adds	r3, #36	; 0x24
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fa41 	bl	8009e80 <RCCEx_PLL3_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a08:	4b3e      	ldr	r3, [pc, #248]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a16:	493b      	ldr	r1, [pc, #236]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d034      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a32:	d01d      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a38:	d817      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a42:	d009      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a44:	e011      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 f965 	bl	8009d1c <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a56:	e00c      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3324      	adds	r3, #36	; 0x24
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fa0e 	bl	8009e80 <RCCEx_PLL3_Config>
 8008a64:	4603      	mov	r3, r0
 8008a66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a68:	e003      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a6e:	e000      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a78:	4b22      	ldr	r3, [pc, #136]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a86:	491f      	ldr	r1, [pc, #124]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	658b      	str	r3, [r1, #88]	; 0x58
 8008a8c:	e001      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d036      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa8:	d01c      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aae:	d816      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab4:	d003      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aba:	d007      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008abc:	e00f      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008aca:	e00c      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3324      	adds	r3, #36	; 0x24
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 f9d4 	bl	8009e80 <RCCEx_PLL3_Config>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008adc:	e003      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae2:	e000      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008afa:	4902      	ldr	r1, [pc, #8]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	654b      	str	r3, [r1, #84]	; 0x54
 8008b00:	e004      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008b02:	bf00      	nop
 8008b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d029      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b24:	d007      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008b26:	e00f      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b28:	4b61      	ldr	r3, [pc, #388]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4a60      	ldr	r2, [pc, #384]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b34:	e00b      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 f8ed 	bl	8009d1c <RCCEx_PLL2_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b46:	e002      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d109      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b54:	4b56      	ldr	r3, [pc, #344]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b60:	4953      	ldr	r1, [pc, #332]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b66:	e001      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3324      	adds	r3, #36	; 0x24
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 f97e 	bl	8009e80 <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d030      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba2:	d017      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba8:	d811      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bae:	d013      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb4:	d80b      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc0:	4b3b      	ldr	r3, [pc, #236]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a3a      	ldr	r2, [pc, #232]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008bcc:	e007      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd2:	e004      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e002      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008bd8:	bf00      	nop
 8008bda:	e000      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d109      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008be4:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bf0:	492f      	ldr	r1, [pc, #188]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	654b      	str	r3, [r1, #84]	; 0x54
 8008bf6:	e001      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d008      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c08:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	4926      	ldr	r1, [pc, #152]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d008      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c26:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c32:	491f      	ldr	r1, [pc, #124]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00d      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	4a19      	ldr	r2, [pc, #100]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c4e:	6113      	str	r3, [r2, #16]
 8008c50:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c5a:	4915      	ldr	r1, [pc, #84]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da08      	bge.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c74:	490e      	ldr	r1, [pc, #56]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c86:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c94:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	58024400 	.word	0x58024400

08008cb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b090      	sub	sp, #64	; 0x40
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc2:	f040 8089 	bne.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008cc6:	4b95      	ldr	r3, [pc, #596]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d87d      	bhi.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008d15 	.word	0x08008d15
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008dcd 	.word	0x08008dcd
 8008cec:	08008d5d 	.word	0x08008d5d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cf0:	4b8a      	ldr	r3, [pc, #552]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cfc:	d107      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 feb8 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d0c:	e3ed      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d12:	e3ea      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d14:	4b81      	ldr	r3, [pc, #516]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d20:	d107      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d22:	f107 0318 	add.w	r3, r7, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fbfe 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d30:	e3db      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d36:	e3d8      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d38:	4b78      	ldr	r3, [pc, #480]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d44:	d107      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d46:	f107 030c 	add.w	r3, r7, #12
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fd40 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d54:	e3c9      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5a:	e3c6      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d5c:	4b6f      	ldr	r3, [pc, #444]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d66:	4b6d      	ldr	r3, [pc, #436]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d10c      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d78:	4b68      	ldr	r3, [pc, #416]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	08db      	lsrs	r3, r3, #3
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	4a67      	ldr	r2, [pc, #412]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e01e      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d8c:	4b63      	ldr	r3, [pc, #396]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d98:	d106      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008da0:	d102      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008da2:	4b60      	ldr	r3, [pc, #384]	; (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da6:	e010      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da8:	4b5c      	ldr	r3, [pc, #368]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db4:	d106      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbc:	d102      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008dbe:	4b5a      	ldr	r3, [pc, #360]	; (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc2:	e002      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dc8:	e38f      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008dca:	e38e      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008dcc:	4b57      	ldr	r3, [pc, #348]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd0:	e38b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd6:	e388      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dde:	f040 80a7 	bne.w	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008de2:	4b4e      	ldr	r3, [pc, #312]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df2:	d054      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dfa:	f200 808b 	bhi.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e04:	f000 8083 	beq.w	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e0e:	f200 8081 	bhi.w	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e18:	d02f      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e20:	d878      	bhi.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e2e:	d012      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008e30:	e070      	b.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e32:	4b3a      	ldr	r3, [pc, #232]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3e:	d107      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fe17 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e4e:	e34c      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	e349      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e56:	4b31      	ldr	r3, [pc, #196]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fb5d 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e72:	e33a      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e78:	e337      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e7a:	4b28      	ldr	r3, [pc, #160]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e86:	d107      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fc9f 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e96:	e328      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9c:	e325      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e9e:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea8:	4b1c      	ldr	r3, [pc, #112]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d10c      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	08db      	lsrs	r3, r3, #3
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	4a16      	ldr	r2, [pc, #88]	; (8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ecc:	e01e      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eda:	d106      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee2:	d102      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee8:	e010      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eea:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efe:	d102      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	e002      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f0a:	e2ee      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f0c:	e2ed      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f12:	e2ea      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f18:	e2e7      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f1a:	bf00      	nop
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	03d09000 	.word	0x03d09000
 8008f24:	003d0900 	.word	0x003d0900
 8008f28:	017d7840 	.word	0x017d7840
 8008f2c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f36:	f040 809c 	bne.w	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008f3a:	4b9e      	ldr	r3, [pc, #632]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f4a:	d054      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f52:	f200 808b 	bhi.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f5c:	f000 8083 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f66:	f200 8081 	bhi.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f70:	d02f      	beq.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f78:	d878      	bhi.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d004      	beq.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f86:	d012      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008f88:	e070      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f8a:	4b8a      	ldr	r3, [pc, #552]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f96:	d107      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fd6b 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fa6:	e2a0      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fac:	e29d      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fae:	4b81      	ldr	r3, [pc, #516]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fba:	d107      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fbc:	f107 0318 	add.w	r3, r7, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fab1 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008fca:	e28e      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd0:	e28b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd2:	4b78      	ldr	r3, [pc, #480]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fde:	d107      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fbf3 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fee:	e27c      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff4:	e279      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ff6:	4b6f      	ldr	r3, [pc, #444]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009000:	4b6c      	ldr	r3, [pc, #432]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d10c      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800900c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009012:	4b68      	ldr	r3, [pc, #416]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	4a66      	ldr	r2, [pc, #408]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800901e:	fa22 f303 	lsr.w	r3, r2, r3
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009024:	e01e      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009026:	4b63      	ldr	r3, [pc, #396]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009032:	d106      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800903c:	4b5f      	ldr	r3, [pc, #380]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009040:	e010      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009042:	4b5c      	ldr	r3, [pc, #368]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800904e:	d106      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009056:	d102      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009058:	4b59      	ldr	r3, [pc, #356]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800905c:	e002      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009062:	e242      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009064:	e241      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009066:	4b57      	ldr	r3, [pc, #348]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800906a:	e23e      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009070:	e23b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009078:	f040 80a6 	bne.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800907c:	4b4d      	ldr	r3, [pc, #308]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800907e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009080:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009084:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800908c:	d054      	beq.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009094:	f200 808b 	bhi.w	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800909e:	f000 8083 	beq.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090a8:	f200 8081 	bhi.w	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b2:	d02f      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ba:	d878      	bhi.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c8:	d012      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80090ca:	e070      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090cc:	4b39      	ldr	r3, [pc, #228]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d8:	d107      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fcca 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e8:	e1ff      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ee:	e1fc      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f0:	4b30      	ldr	r3, [pc, #192]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090fc:	d107      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fe:	f107 0318 	add.w	r3, r7, #24
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fa10 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800910c:	e1ed      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009112:	e1ea      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009114:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009120:	d107      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fb52 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009130:	e1db      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009136:	e1d8      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009138:	4b1e      	ldr	r3, [pc, #120]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800913a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009140:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009142:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b04      	cmp	r3, #4
 800914c:	d10c      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	4a16      	ldr	r2, [pc, #88]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009166:	e01e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009174:	d106      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800917c:	d102      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800917e:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009182:	e010      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800918c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009190:	d106      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009198:	d102      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919e:	e002      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091a4:	e1a1      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80091a6:	e1a0      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091a8:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ac:	e19d      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b2:	e19a      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80091b4:	58024400 	.word	0x58024400
 80091b8:	03d09000 	.word	0x03d09000
 80091bc:	003d0900 	.word	0x003d0900
 80091c0:	017d7840 	.word	0x017d7840
 80091c4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091ce:	d173      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80091d0:	4b9a      	ldr	r3, [pc, #616]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80091d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091e0:	d02f      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091e8:	d863      	bhi.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f6:	d012      	beq.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80091f8:	e05b      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091fa:	4b90      	ldr	r3, [pc, #576]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009206:	d107      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009208:	f107 0318 	add.w	r3, r7, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f98b 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009216:	e168      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800921c:	e165      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800921e:	4b87      	ldr	r3, [pc, #540]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800922a:	d107      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800922c:	f107 030c 	add.w	r3, r7, #12
 8009230:	4618      	mov	r0, r3
 8009232:	f000 facd 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800923a:	e156      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009240:	e153      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009242:	4b7e      	ldr	r3, [pc, #504]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800924a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800924c:	4b7b      	ldr	r3, [pc, #492]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b04      	cmp	r3, #4
 8009256:	d10c      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800925e:	4b77      	ldr	r3, [pc, #476]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	08db      	lsrs	r3, r3, #3
 8009264:	f003 0303 	and.w	r3, r3, #3
 8009268:	4a75      	ldr	r2, [pc, #468]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800926a:	fa22 f303 	lsr.w	r3, r2, r3
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009270:	e01e      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009272:	4b72      	ldr	r3, [pc, #456]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927e:	d106      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009286:	d102      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009288:	4b6e      	ldr	r3, [pc, #440]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800928c:	e010      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800928e:	4b6b      	ldr	r3, [pc, #428]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929a:	d106      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800929c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a2:	d102      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092a4:	4b68      	ldr	r3, [pc, #416]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	e002      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092ae:	e11c      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80092b0:	e11b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b6:	e118      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092be:	d133      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80092c0:	4b5e      	ldr	r3, [pc, #376]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d6:	d012      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80092d8:	e023      	b.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092da:	4b58      	ldr	r3, [pc, #352]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092e6:	d107      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fbc3 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092f6:	e0f8      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092fc:	e0f5      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092fe:	4b4f      	ldr	r3, [pc, #316]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800930a:	d107      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930c:	f107 0318 	add.w	r3, r7, #24
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f909 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800931a:	e0e6      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009320:	e0e3      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009326:	e0e0      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800932e:	f040 808d 	bne.w	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009332:	4b42      	ldr	r3, [pc, #264]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800933a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009342:	d06b      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800934a:	d874      	bhi.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009352:	d056      	beq.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d86c      	bhi.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009362:	d03b      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800936a:	d864      	bhi.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009372:	d021      	beq.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800937a:	d85c      	bhi.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	2b00      	cmp	r3, #0
 8009380:	d004      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009388:	d004      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800938a:	e054      	b.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800938c:	f000 f8b6 	bl	80094fc <HAL_RCCEx_GetD3PCLK1Freq>
 8009390:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009392:	e0aa      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009394:	4b29      	ldr	r3, [pc, #164]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a0:	d107      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a2:	f107 0318 	add.w	r3, r7, #24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f8be 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093b0:	e09b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b6:	e098      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093b8:	4b20      	ldr	r3, [pc, #128]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c4:	d107      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa00 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093d4:	e089      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093da:	e086      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093dc:	4b17      	ldr	r3, [pc, #92]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d109      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093e8:	4b14      	ldr	r3, [pc, #80]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	08db      	lsrs	r3, r3, #3
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	4a13      	ldr	r2, [pc, #76]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093fa:	e076      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009400:	e073      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009402:	4b0e      	ldr	r3, [pc, #56]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009414:	e069      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800941a:	e066      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009428:	d102      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800942e:	e05c      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009434:	e059      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943a:	e056      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800943c:	58024400 	.word	0x58024400
 8009440:	03d09000 	.word	0x03d09000
 8009444:	003d0900 	.word	0x003d0900
 8009448:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009452:	d148      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009454:	4b27      	ldr	r3, [pc, #156]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800945c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009464:	d02a      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946c:	d838      	bhi.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800947a:	d00d      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800947c:	e030      	b.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800947e:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800948a:	d102      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800948c:	4b1a      	ldr	r3, [pc, #104]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009490:	e02b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009496:	e028      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009498:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094a4:	d107      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fae4 	bl	8009a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094b4:	e019      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ba:	e016      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094bc:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094c8:	d107      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ca:	f107 0318 	add.w	r3, r7, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f82a 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094d8:	e007      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094de:	e004      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e4:	e001      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80094ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3740      	adds	r7, #64	; 0x40
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	58024400 	.word	0x58024400
 80094f8:	017d7840 	.word	0x017d7840

080094fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009500:	f7fe fc66 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8009504:	4602      	mov	r2, r0
 8009506:	4b06      	ldr	r3, [pc, #24]	; (8009520 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	091b      	lsrs	r3, r3, #4
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	4904      	ldr	r1, [pc, #16]	; (8009524 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009512:	5ccb      	ldrb	r3, [r1, r3]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800951c:	4618      	mov	r0, r3
 800951e:	bd80      	pop	{r7, pc}
 8009520:	58024400 	.word	0x58024400
 8009524:	08010310 	.word	0x08010310

08009528 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009528:	b480      	push	{r7}
 800952a:	b089      	sub	sp, #36	; 0x24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009530:	4ba1      	ldr	r3, [pc, #644]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800953a:	4b9f      	ldr	r3, [pc, #636]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953e:	0b1b      	lsrs	r3, r3, #12
 8009540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009544:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009546:	4b9c      	ldr	r3, [pc, #624]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	091b      	lsrs	r3, r3, #4
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009552:	4b99      	ldr	r3, [pc, #612]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	08db      	lsrs	r3, r3, #3
 8009558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 8111 	beq.w	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b02      	cmp	r3, #2
 800957a:	f000 8083 	beq.w	8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f200 80a1 	bhi.w	80096c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d056      	beq.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009592:	e099      	b.n	80096c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009594:	4b88      	ldr	r3, [pc, #544]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d02d      	beq.n	80095fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095a0:	4b85      	ldr	r3, [pc, #532]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	08db      	lsrs	r3, r3, #3
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	4a84      	ldr	r2, [pc, #528]	; (80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095ac:	fa22 f303 	lsr.w	r3, r2, r3
 80095b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b7b      	ldr	r3, [pc, #492]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a03 	vldr	s12, [r7, #12]
 80095de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095fa:	e087      	b.n	800970c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b6a      	ldr	r3, [pc, #424]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009622:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800963e:	e065      	b.n	800970c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b59      	ldr	r3, [pc, #356]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a03 	vldr	s12, [r7, #12]
 8009666:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009682:	e043      	b.n	800970c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b48      	ldr	r3, [pc, #288]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096c6:	e021      	b.n	800970c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096da:	4b37      	ldr	r3, [pc, #220]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800970a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800970c:	4b2a      	ldr	r3, [pc, #168]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	0a5b      	lsrs	r3, r3, #9
 8009712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009726:	edd7 6a07 	vldr	s13, [r7, #28]
 800972a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009732:	ee17 2a90 	vmov	r2, s15
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800973a:	4b1f      	ldr	r3, [pc, #124]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	0c1b      	lsrs	r3, r3, #16
 8009740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009754:	edd7 6a07 	vldr	s13, [r7, #28]
 8009758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009760:	ee17 2a90 	vmov	r2, s15
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009796:	e008      	b.n	80097aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]
}
 80097aa:	bf00      	nop
 80097ac:	3724      	adds	r7, #36	; 0x24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	46000000 	.word	0x46000000
 80097c4:	4c742400 	.word	0x4c742400
 80097c8:	4a742400 	.word	0x4a742400
 80097cc:	4bbebc20 	.word	0x4bbebc20

080097d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b089      	sub	sp, #36	; 0x24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097d8:	4ba1      	ldr	r3, [pc, #644]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097e2:	4b9f      	ldr	r3, [pc, #636]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	0d1b      	lsrs	r3, r3, #20
 80097e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097ee:	4b9c      	ldr	r3, [pc, #624]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	0a1b      	lsrs	r3, r3, #8
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097fa:	4b99      	ldr	r3, [pc, #612]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fe:	08db      	lsrs	r3, r3, #3
 8009800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	fb02 f303 	mul.w	r3, r2, r3
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8111 	beq.w	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b02      	cmp	r3, #2
 8009822:	f000 8083 	beq.w	800992c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	2b02      	cmp	r3, #2
 800982a:	f200 80a1 	bhi.w	8009970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d056      	beq.n	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800983a:	e099      	b.n	8009970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800983c:	4b88      	ldr	r3, [pc, #544]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b00      	cmp	r3, #0
 8009846:	d02d      	beq.n	80098a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009848:	4b85      	ldr	r3, [pc, #532]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	08db      	lsrs	r3, r3, #3
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	4a84      	ldr	r2, [pc, #528]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009854:	fa22 f303 	lsr.w	r3, r2, r3
 8009858:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009872:	4b7b      	ldr	r3, [pc, #492]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009882:	ed97 6a03 	vldr	s12, [r7, #12]
 8009886:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800988a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098a2:	e087      	b.n	80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b6:	4b6a      	ldr	r3, [pc, #424]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e6:	e065      	b.n	80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fa:	4b59      	ldr	r3, [pc, #356]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990a:	ed97 6a03 	vldr	s12, [r7, #12]
 800990e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992a:	e043      	b.n	80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009936:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800993a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993e:	4b48      	ldr	r3, [pc, #288]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009952:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800996e:	e021      	b.n	80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800997e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009982:	4b37      	ldr	r3, [pc, #220]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009992:	ed97 6a03 	vldr	s12, [r7, #12]
 8009996:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800999a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099b4:	4b2a      	ldr	r3, [pc, #168]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	0a5b      	lsrs	r3, r3, #9
 80099ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099da:	ee17 2a90 	vmov	r2, s15
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099e2:	4b1f      	ldr	r3, [pc, #124]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	0c1b      	lsrs	r3, r3, #16
 80099e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a08:	ee17 2a90 	vmov	r2, s15
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a10:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	0e1b      	lsrs	r3, r3, #24
 8009a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a36:	ee17 2a90 	vmov	r2, s15
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a3e:	e008      	b.n	8009a52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	609a      	str	r2, [r3, #8]
}
 8009a52:	bf00      	nop
 8009a54:	3724      	adds	r7, #36	; 0x24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	46000000 	.word	0x46000000
 8009a6c:	4c742400 	.word	0x4c742400
 8009a70:	4a742400 	.word	0x4a742400
 8009a74:	4bbebc20 	.word	0x4bbebc20

08009a78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a80:	4ba0      	ldr	r3, [pc, #640]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a8a:	4b9e      	ldr	r3, [pc, #632]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a96:	4b9b      	ldr	r3, [pc, #620]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009aa0:	4b98      	ldr	r3, [pc, #608]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
 8009ab0:	ee07 3a90 	vmov	s15, r3
 8009ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 8111 	beq.w	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	f000 8083 	beq.w	8009bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	f200 80a1 	bhi.w	8009c16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d056      	beq.n	8009b8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ae0:	e099      	b.n	8009c16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae2:	4b88      	ldr	r3, [pc, #544]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02d      	beq.n	8009b4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009aee:	4b85      	ldr	r3, [pc, #532]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	08db      	lsrs	r3, r3, #3
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	4a83      	ldr	r2, [pc, #524]	; (8009d08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	ee07 3a90 	vmov	s15, r3
 8009b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b18:	4b7a      	ldr	r3, [pc, #488]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b48:	e087      	b.n	8009c5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	ee07 3a90 	vmov	s15, r3
 8009b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5c:	4b69      	ldr	r3, [pc, #420]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b64:	ee07 3a90 	vmov	s15, r3
 8009b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b70:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b8c:	e065      	b.n	8009c5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	ee07 3a90 	vmov	s15, r3
 8009b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009d14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba0:	4b58      	ldr	r3, [pc, #352]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba8:	ee07 3a90 	vmov	s15, r3
 8009bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bd0:	e043      	b.n	8009c5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be4:	4b47      	ldr	r3, [pc, #284]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bec:	ee07 3a90 	vmov	s15, r3
 8009bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c14:	e021      	b.n	8009c5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c20:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009d10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c28:	4b36      	ldr	r3, [pc, #216]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009c5a:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	0a5b      	lsrs	r3, r3, #9
 8009c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c80:	ee17 2a90 	vmov	r2, s15
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009c88:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cae:	ee17 2a90 	vmov	r2, s15
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009cb6:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	0e1b      	lsrs	r3, r3, #24
 8009cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cdc:	ee17 2a90 	vmov	r2, s15
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ce4:	e008      	b.n	8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	609a      	str	r2, [r3, #8]
}
 8009cf8:	bf00      	nop
 8009cfa:	3724      	adds	r7, #36	; 0x24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	58024400 	.word	0x58024400
 8009d08:	03d09000 	.word	0x03d09000
 8009d0c:	46000000 	.word	0x46000000
 8009d10:	4c742400 	.word	0x4c742400
 8009d14:	4a742400 	.word	0x4a742400
 8009d18:	4bbebc20 	.word	0x4bbebc20

08009d1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d2a:	4b53      	ldr	r3, [pc, #332]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d101      	bne.n	8009d3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e099      	b.n	8009e6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d3a:	4b4f      	ldr	r3, [pc, #316]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a4e      	ldr	r2, [pc, #312]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d46:	f7f9 fe11 	bl	800396c <HAL_GetTick>
 8009d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d4c:	e008      	b.n	8009d60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d4e:	f7f9 fe0d 	bl	800396c <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d901      	bls.n	8009d60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e086      	b.n	8009e6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d60:	4b45      	ldr	r3, [pc, #276]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f0      	bne.n	8009d4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d6c:	4b42      	ldr	r3, [pc, #264]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	031b      	lsls	r3, r3, #12
 8009d7a:	493f      	ldr	r1, [pc, #252]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	628b      	str	r3, [r1, #40]	; 0x28
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	025b      	lsls	r3, r3, #9
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	041b      	lsls	r3, r3, #16
 8009d9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	061b      	lsls	r3, r3, #24
 8009dac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009db0:	4931      	ldr	r1, [pc, #196]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009db6:	4b30      	ldr	r3, [pc, #192]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	492d      	ldr	r1, [pc, #180]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009dc8:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f023 0220 	bic.w	r2, r3, #32
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	4928      	ldr	r1, [pc, #160]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009dda:	4b27      	ldr	r3, [pc, #156]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	4a26      	ldr	r2, [pc, #152]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009de0:	f023 0310 	bic.w	r3, r3, #16
 8009de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009de6:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <RCCEx_PLL2_Config+0x160>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	69d2      	ldr	r2, [r2, #28]
 8009df2:	00d2      	lsls	r2, r2, #3
 8009df4:	4920      	ldr	r1, [pc, #128]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009dfa:	4b1f      	ldr	r3, [pc, #124]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e00:	f043 0310 	orr.w	r3, r3, #16
 8009e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e0c:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	4a19      	ldr	r2, [pc, #100]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e18:	e00f      	b.n	8009e3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d106      	bne.n	8009e2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e20:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	4a14      	ldr	r2, [pc, #80]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e2c:	e005      	b.n	8009e3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e2e:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	4a11      	ldr	r2, [pc, #68]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a0e      	ldr	r2, [pc, #56]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e46:	f7f9 fd91 	bl	800396c <HAL_GetTick>
 8009e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e4c:	e008      	b.n	8009e60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e4e:	f7f9 fd8d 	bl	800396c <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d901      	bls.n	8009e60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e006      	b.n	8009e6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e60:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <RCCEx_PLL2_Config+0x15c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0f0      	beq.n	8009e4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	58024400 	.word	0x58024400
 8009e7c:	ffff0007 	.word	0xffff0007

08009e80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e8e:	4b53      	ldr	r3, [pc, #332]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d101      	bne.n	8009e9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e099      	b.n	8009fd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e9e:	4b4f      	ldr	r3, [pc, #316]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a4e      	ldr	r2, [pc, #312]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eaa:	f7f9 fd5f 	bl	800396c <HAL_GetTick>
 8009eae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eb0:	e008      	b.n	8009ec4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009eb2:	f7f9 fd5b 	bl	800396c <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d901      	bls.n	8009ec4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e086      	b.n	8009fd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ec4:	4b45      	ldr	r3, [pc, #276]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1f0      	bne.n	8009eb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ed0:	4b42      	ldr	r3, [pc, #264]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	051b      	lsls	r3, r3, #20
 8009ede:	493f      	ldr	r1, [pc, #252]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	628b      	str	r3, [r1, #40]	; 0x28
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	025b      	lsls	r3, r3, #9
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	041b      	lsls	r3, r3, #16
 8009f02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	061b      	lsls	r3, r3, #24
 8009f10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f14:	4931      	ldr	r1, [pc, #196]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f1a:	4b30      	ldr	r3, [pc, #192]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	492d      	ldr	r1, [pc, #180]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f2c:	4b2b      	ldr	r3, [pc, #172]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	4928      	ldr	r1, [pc, #160]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f3e:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	4a26      	ldr	r2, [pc, #152]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f4a:	4b24      	ldr	r3, [pc, #144]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f4e:	4b24      	ldr	r3, [pc, #144]	; (8009fe0 <RCCEx_PLL3_Config+0x160>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	69d2      	ldr	r2, [r2, #28]
 8009f56:	00d2      	lsls	r2, r2, #3
 8009f58:	4920      	ldr	r1, [pc, #128]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f5e:	4b1f      	ldr	r3, [pc, #124]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	4a1e      	ldr	r2, [pc, #120]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d106      	bne.n	8009f7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f70:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	4a19      	ldr	r2, [pc, #100]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f7c:	e00f      	b.n	8009f9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d106      	bne.n	8009f92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f84:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	4a14      	ldr	r2, [pc, #80]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f90:	e005      	b.n	8009f9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009faa:	f7f9 fcdf 	bl	800396c <HAL_GetTick>
 8009fae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fb0:	e008      	b.n	8009fc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009fb2:	f7f9 fcdb 	bl	800396c <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e006      	b.n	8009fd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <RCCEx_PLL3_Config+0x15c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0f0      	beq.n	8009fb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400
 8009fe0:	ffff0007 	.word	0xffff0007

08009fe4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e0f1      	b.n	800a1da <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a78      	ldr	r2, [pc, #480]	; (800a1e4 <HAL_SPI_Init+0x200>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d00f      	beq.n	800a026 <HAL_SPI_Init+0x42>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a77      	ldr	r2, [pc, #476]	; (800a1e8 <HAL_SPI_Init+0x204>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00a      	beq.n	800a026 <HAL_SPI_Init+0x42>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a75      	ldr	r2, [pc, #468]	; (800a1ec <HAL_SPI_Init+0x208>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d005      	beq.n	800a026 <HAL_SPI_Init+0x42>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	2b0f      	cmp	r3, #15
 800a020:	d901      	bls.n	800a026 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e0d9      	b.n	800a1da <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f8e2 	bl	800a1f0 <SPI_GetPacketSize>
 800a02c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a6c      	ldr	r2, [pc, #432]	; (800a1e4 <HAL_SPI_Init+0x200>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00c      	beq.n	800a052 <HAL_SPI_Init+0x6e>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a6a      	ldr	r2, [pc, #424]	; (800a1e8 <HAL_SPI_Init+0x204>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d007      	beq.n	800a052 <HAL_SPI_Init+0x6e>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a69      	ldr	r2, [pc, #420]	; (800a1ec <HAL_SPI_Init+0x208>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d002      	beq.n	800a052 <HAL_SPI_Init+0x6e>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d811      	bhi.n	800a076 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a056:	4a63      	ldr	r2, [pc, #396]	; (800a1e4 <HAL_SPI_Init+0x200>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d009      	beq.n	800a070 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a61      	ldr	r2, [pc, #388]	; (800a1e8 <HAL_SPI_Init+0x204>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d004      	beq.n	800a070 <HAL_SPI_Init+0x8c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a60      	ldr	r2, [pc, #384]	; (800a1ec <HAL_SPI_Init+0x208>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d104      	bne.n	800a07a <HAL_SPI_Init+0x96>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b10      	cmp	r3, #16
 800a074:	d901      	bls.n	800a07a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e0af      	b.n	800a1da <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7f7 fece 	bl	8001e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0201 	bic.w	r2, r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a0b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0c0:	d119      	bne.n	800a0f6 <HAL_SPI_Init+0x112>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0ca:	d103      	bne.n	800a0d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10c      	bne.n	800a0f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a0e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0e4:	d107      	bne.n	800a0f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69da      	ldr	r2, [r3, #28]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	431a      	orrs	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a108:	ea42 0103 	orr.w	r1, r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	431a      	orrs	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a126:	431a      	orrs	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	431a      	orrs	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	431a      	orrs	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	431a      	orrs	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14a:	431a      	orrs	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a156:	ea42 0103 	orr.w	r1, r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d113      	bne.n	800a196 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a180:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a194:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0201 	bic.w	r2, r2, #1
 800a1a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	40013000 	.word	0x40013000
 800a1e8:	40003800 	.word	0x40003800
 800a1ec:	40003c00 	.word	0x40003c00

0800a1f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	3307      	adds	r3, #7
 800a20e:	08db      	lsrs	r3, r3, #3
 800a210:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	fb02 f303 	mul.w	r3, r2, r3
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e049      	b.n	800a2cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7f8 fd3d 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f000 fd8d 	bl	800ad84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d001      	beq.n	800a2ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e05e      	b.n	800a3aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0201 	orr.w	r2, r2, #1
 800a302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a2b      	ldr	r2, [pc, #172]	; (800a3b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d02c      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a316:	d027      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a27      	ldr	r2, [pc, #156]	; (800a3bc <HAL_TIM_Base_Start_IT+0xe8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d022      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a26      	ldr	r2, [pc, #152]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xec>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d01d      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xf0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d018      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a23      	ldr	r2, [pc, #140]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d013      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <HAL_TIM_Base_Start_IT+0xf8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d00e      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a20      	ldr	r2, [pc, #128]	; (800a3d0 <HAL_TIM_Base_Start_IT+0xfc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d009      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <HAL_TIM_Base_Start_IT+0x100>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d004      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x94>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1d      	ldr	r2, [pc, #116]	; (800a3d8 <HAL_TIM_Base_Start_IT+0x104>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d115      	bne.n	800a394 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <HAL_TIM_Base_Start_IT+0x108>)
 800a370:	4013      	ands	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b06      	cmp	r3, #6
 800a378:	d015      	beq.n	800a3a6 <HAL_TIM_Base_Start_IT+0xd2>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d011      	beq.n	800a3a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0201 	orr.w	r2, r2, #1
 800a390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a392:	e008      	b.n	800a3a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	e000      	b.n	800a3a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40000400 	.word	0x40000400
 800a3c0:	40000800 	.word	0x40000800
 800a3c4:	40000c00 	.word	0x40000c00
 800a3c8:	40010400 	.word	0x40010400
 800a3cc:	40001800 	.word	0x40001800
 800a3d0:	40014000 	.word	0x40014000
 800a3d4:	4000e000 	.word	0x4000e000
 800a3d8:	4000e400 	.word	0x4000e400
 800a3dc:	00010007 	.word	0x00010007

0800a3e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e049      	b.n	800a486 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f841 	bl	800a48e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f000 fcb0 	bl	800ad84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <HAL_TIM_PWM_Start+0x24>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	bf14      	ite	ne
 800a4c0:	2301      	movne	r3, #1
 800a4c2:	2300      	moveq	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	e03c      	b.n	800a542 <HAL_TIM_PWM_Start+0x9e>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d109      	bne.n	800a4e2 <HAL_TIM_PWM_Start+0x3e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	bf14      	ite	ne
 800a4da:	2301      	movne	r3, #1
 800a4dc:	2300      	moveq	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	e02f      	b.n	800a542 <HAL_TIM_PWM_Start+0x9e>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d109      	bne.n	800a4fc <HAL_TIM_PWM_Start+0x58>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	e022      	b.n	800a542 <HAL_TIM_PWM_Start+0x9e>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b0c      	cmp	r3, #12
 800a500:	d109      	bne.n	800a516 <HAL_TIM_PWM_Start+0x72>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	bf14      	ite	ne
 800a50e:	2301      	movne	r3, #1
 800a510:	2300      	moveq	r3, #0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	e015      	b.n	800a542 <HAL_TIM_PWM_Start+0x9e>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d109      	bne.n	800a530 <HAL_TIM_PWM_Start+0x8c>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b01      	cmp	r3, #1
 800a526:	bf14      	ite	ne
 800a528:	2301      	movne	r3, #1
 800a52a:	2300      	moveq	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	e008      	b.n	800a542 <HAL_TIM_PWM_Start+0x9e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b01      	cmp	r3, #1
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e0ab      	b.n	800a6a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <HAL_TIM_PWM_Start+0xb6>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a558:	e023      	b.n	800a5a2 <HAL_TIM_PWM_Start+0xfe>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d104      	bne.n	800a56a <HAL_TIM_PWM_Start+0xc6>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a568:	e01b      	b.n	800a5a2 <HAL_TIM_PWM_Start+0xfe>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d104      	bne.n	800a57a <HAL_TIM_PWM_Start+0xd6>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a578:	e013      	b.n	800a5a2 <HAL_TIM_PWM_Start+0xfe>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b0c      	cmp	r3, #12
 800a57e:	d104      	bne.n	800a58a <HAL_TIM_PWM_Start+0xe6>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a588:	e00b      	b.n	800a5a2 <HAL_TIM_PWM_Start+0xfe>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b10      	cmp	r3, #16
 800a58e:	d104      	bne.n	800a59a <HAL_TIM_PWM_Start+0xf6>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a598:	e003      	b.n	800a5a2 <HAL_TIM_PWM_Start+0xfe>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2202      	movs	r2, #2
 800a59e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f001 f804 	bl	800b5b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a3d      	ldr	r2, [pc, #244]	; (800a6ac <HAL_TIM_PWM_Start+0x208>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x13e>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a3c      	ldr	r2, [pc, #240]	; (800a6b0 <HAL_TIM_PWM_Start+0x20c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x13e>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a3a      	ldr	r2, [pc, #232]	; (800a6b4 <HAL_TIM_PWM_Start+0x210>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d009      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x13e>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a39      	ldr	r2, [pc, #228]	; (800a6b8 <HAL_TIM_PWM_Start+0x214>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_TIM_PWM_Start+0x13e>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a37      	ldr	r2, [pc, #220]	; (800a6bc <HAL_TIM_PWM_Start+0x218>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d101      	bne.n	800a5e6 <HAL_TIM_PWM_Start+0x142>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <HAL_TIM_PWM_Start+0x144>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d007      	beq.n	800a5fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a2a      	ldr	r2, [pc, #168]	; (800a6ac <HAL_TIM_PWM_Start+0x208>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d02c      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a60e:	d027      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a2a      	ldr	r2, [pc, #168]	; (800a6c0 <HAL_TIM_PWM_Start+0x21c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d022      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a29      	ldr	r2, [pc, #164]	; (800a6c4 <HAL_TIM_PWM_Start+0x220>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d01d      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a27      	ldr	r2, [pc, #156]	; (800a6c8 <HAL_TIM_PWM_Start+0x224>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d018      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <HAL_TIM_PWM_Start+0x20c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d013      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a23      	ldr	r2, [pc, #140]	; (800a6cc <HAL_TIM_PWM_Start+0x228>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00e      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a1b      	ldr	r2, [pc, #108]	; (800a6b4 <HAL_TIM_PWM_Start+0x210>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d009      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <HAL_TIM_PWM_Start+0x22c>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d004      	beq.n	800a660 <HAL_TIM_PWM_Start+0x1bc>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <HAL_TIM_PWM_Start+0x230>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d115      	bne.n	800a68c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689a      	ldr	r2, [r3, #8]
 800a666:	4b1c      	ldr	r3, [pc, #112]	; (800a6d8 <HAL_TIM_PWM_Start+0x234>)
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b06      	cmp	r3, #6
 800a670:	d015      	beq.n	800a69e <HAL_TIM_PWM_Start+0x1fa>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a678:	d011      	beq.n	800a69e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0201 	orr.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68a:	e008      	b.n	800a69e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	e000      	b.n	800a6a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a69e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40010000 	.word	0x40010000
 800a6b0:	40010400 	.word	0x40010400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800
 800a6c8:	40000c00 	.word	0x40000c00
 800a6cc:	40001800 	.word	0x40001800
 800a6d0:	4000e000 	.word	0x4000e000
 800a6d4:	4000e400 	.word	0x4000e400
 800a6d8:	00010007 	.word	0x00010007

0800a6dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d122      	bne.n	800a738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d11b      	bne.n	800a738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f06f 0202 	mvn.w	r2, #2
 800a708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fb12 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a724:	e005      	b.n	800a732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fb04 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fb15 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b04      	cmp	r3, #4
 800a744:	d122      	bne.n	800a78c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b04      	cmp	r3, #4
 800a752:	d11b      	bne.n	800a78c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f06f 0204 	mvn.w	r2, #4
 800a75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fae8 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a778:	e005      	b.n	800a786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fada 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 faeb 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f003 0308 	and.w	r3, r3, #8
 800a796:	2b08      	cmp	r3, #8
 800a798:	d122      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d11b      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f06f 0208 	mvn.w	r2, #8
 800a7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fabe 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a7cc:	e005      	b.n	800a7da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fab0 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fac1 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f003 0310 	and.w	r3, r3, #16
 800a7ea:	2b10      	cmp	r3, #16
 800a7ec:	d122      	bne.n	800a834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f003 0310 	and.w	r3, r3, #16
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d11b      	bne.n	800a834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f06f 0210 	mvn.w	r2, #16
 800a804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2208      	movs	r2, #8
 800a80a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa94 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a820:	e005      	b.n	800a82e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa86 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fa97 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d10e      	bne.n	800a860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d107      	bne.n	800a860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f06f 0201 	mvn.w	r2, #1
 800a858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f7 f900 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86a:	2b80      	cmp	r3, #128	; 0x80
 800a86c:	d10e      	bne.n	800a88c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a878:	2b80      	cmp	r3, #128	; 0x80
 800a87a:	d107      	bne.n	800a88c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f001 f802 	bl	800b890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a89a:	d10e      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a6:	2b80      	cmp	r3, #128	; 0x80
 800a8a8:	d107      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fff5 	bl	800b8a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c4:	2b40      	cmp	r3, #64	; 0x40
 800a8c6:	d10e      	bne.n	800a8e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d107      	bne.n	800a8e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fa45 	bl	800ad70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 0320 	and.w	r3, r3, #32
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	d10e      	bne.n	800a912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d107      	bne.n	800a912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f06f 0220 	mvn.w	r2, #32
 800a90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 ffb5 	bl	800b87c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a932:	2b01      	cmp	r3, #1
 800a934:	d101      	bne.n	800a93a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a936:	2302      	movs	r3, #2
 800a938:	e0ff      	b.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b14      	cmp	r3, #20
 800a946:	f200 80f0 	bhi.w	800ab2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a9a5 	.word	0x0800a9a5
 800a954:	0800ab2b 	.word	0x0800ab2b
 800a958:	0800ab2b 	.word	0x0800ab2b
 800a95c:	0800ab2b 	.word	0x0800ab2b
 800a960:	0800a9e5 	.word	0x0800a9e5
 800a964:	0800ab2b 	.word	0x0800ab2b
 800a968:	0800ab2b 	.word	0x0800ab2b
 800a96c:	0800ab2b 	.word	0x0800ab2b
 800a970:	0800aa27 	.word	0x0800aa27
 800a974:	0800ab2b 	.word	0x0800ab2b
 800a978:	0800ab2b 	.word	0x0800ab2b
 800a97c:	0800ab2b 	.word	0x0800ab2b
 800a980:	0800aa67 	.word	0x0800aa67
 800a984:	0800ab2b 	.word	0x0800ab2b
 800a988:	0800ab2b 	.word	0x0800ab2b
 800a98c:	0800ab2b 	.word	0x0800ab2b
 800a990:	0800aaa9 	.word	0x0800aaa9
 800a994:	0800ab2b 	.word	0x0800ab2b
 800a998:	0800ab2b 	.word	0x0800ab2b
 800a99c:	0800ab2b 	.word	0x0800ab2b
 800a9a0:	0800aae9 	.word	0x0800aae9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 fa90 	bl	800aed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0208 	orr.w	r2, r2, #8
 800a9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0204 	bic.w	r2, r2, #4
 800a9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6999      	ldr	r1, [r3, #24]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	691a      	ldr	r2, [r3, #16]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	619a      	str	r2, [r3, #24]
      break;
 800a9e2:	e0a5      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fb00 	bl	800aff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	699a      	ldr	r2, [r3, #24]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6999      	ldr	r1, [r3, #24]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	021a      	lsls	r2, r3, #8
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	619a      	str	r2, [r3, #24]
      break;
 800aa24:	e084      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fb69 	bl	800b104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	69da      	ldr	r2, [r3, #28]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0208 	orr.w	r2, r2, #8
 800aa40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	69da      	ldr	r2, [r3, #28]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0204 	bic.w	r2, r2, #4
 800aa50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69d9      	ldr	r1, [r3, #28]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	61da      	str	r2, [r3, #28]
      break;
 800aa64:	e064      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fbd1 	bl	800b214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69da      	ldr	r2, [r3, #28]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69d9      	ldr	r1, [r3, #28]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	021a      	lsls	r2, r3, #8
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	61da      	str	r2, [r3, #28]
      break;
 800aaa6:	e043      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fc1a 	bl	800b2e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 0208 	orr.w	r2, r2, #8
 800aac2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0204 	bic.w	r2, r2, #4
 800aad2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aae6:	e023      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fc5e 	bl	800b3b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	021a      	lsls	r2, r3, #8
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab28:	e002      	b.n	800ab30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop

0800ab44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIM_ConfigClockSource+0x1c>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0dc      	b.n	800ad1a <HAL_TIM_ConfigClockSource+0x1d6>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a64      	ldr	r2, [pc, #400]	; (800ad28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f000 80a9 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ab9c:	4a62      	ldr	r2, [pc, #392]	; (800ad28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f200 80ae 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aba4:	4a61      	ldr	r2, [pc, #388]	; (800ad2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	f000 80a1 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abac:	4a5f      	ldr	r2, [pc, #380]	; (800ad2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	f200 80a6 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abb4:	4a5e      	ldr	r2, [pc, #376]	; (800ad30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f000 8099 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abbc:	4a5c      	ldr	r2, [pc, #368]	; (800ad30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	f200 809e 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abc8:	f000 8091 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abd0:	f200 8096 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abd8:	f000 8089 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe0:	f200 808e 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe8:	d03e      	beq.n	800ac68 <HAL_TIM_ConfigClockSource+0x124>
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abee:	f200 8087 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf6:	f000 8086 	beq.w	800ad06 <HAL_TIM_ConfigClockSource+0x1c2>
 800abfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfe:	d87f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac00:	2b70      	cmp	r3, #112	; 0x70
 800ac02:	d01a      	beq.n	800ac3a <HAL_TIM_ConfigClockSource+0xf6>
 800ac04:	2b70      	cmp	r3, #112	; 0x70
 800ac06:	d87b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac08:	2b60      	cmp	r3, #96	; 0x60
 800ac0a:	d050      	beq.n	800acae <HAL_TIM_ConfigClockSource+0x16a>
 800ac0c:	2b60      	cmp	r3, #96	; 0x60
 800ac0e:	d877      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac10:	2b50      	cmp	r3, #80	; 0x50
 800ac12:	d03c      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x14a>
 800ac14:	2b50      	cmp	r3, #80	; 0x50
 800ac16:	d873      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d058      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x18a>
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d86f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac20:	2b30      	cmp	r3, #48	; 0x30
 800ac22:	d064      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d86b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d060      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d867      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d05c      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d05a      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac38:	e062      	b.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6899      	ldr	r1, [r3, #8]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	f000 fc95 	bl	800b578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	609a      	str	r2, [r3, #8]
      break;
 800ac66:	e04f      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	6899      	ldr	r1, [r3, #8]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f000 fc7e 	bl	800b578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac8a:	609a      	str	r2, [r3, #8]
      break;
 800ac8c:	e03c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6859      	ldr	r1, [r3, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f000 fbee 	bl	800b47c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2150      	movs	r1, #80	; 0x50
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fc48 	bl	800b53c <TIM_ITRx_SetConfig>
      break;
 800acac:	e02c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6859      	ldr	r1, [r3, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	461a      	mov	r2, r3
 800acbc:	f000 fc0d 	bl	800b4da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2160      	movs	r1, #96	; 0x60
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fc38 	bl	800b53c <TIM_ITRx_SetConfig>
      break;
 800accc:	e01c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6859      	ldr	r1, [r3, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	461a      	mov	r2, r3
 800acdc:	f000 fbce 	bl	800b47c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2140      	movs	r1, #64	; 0x40
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fc28 	bl	800b53c <TIM_ITRx_SetConfig>
      break;
 800acec:	e00c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4619      	mov	r1, r3
 800acf8:	4610      	mov	r0, r2
 800acfa:	f000 fc1f 	bl	800b53c <TIM_ITRx_SetConfig>
      break;
 800acfe:	e003      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
      break;
 800ad04:	e000      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	ffceff88 	.word	0xffceff88
 800ad28:	00100040 	.word	0x00100040
 800ad2c:	00100030 	.word	0x00100030
 800ad30:	00100020 	.word	0x00100020

0800ad34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a44      	ldr	r2, [pc, #272]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada2:	d00f      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a41      	ldr	r2, [pc, #260]	; (800aeac <TIM_Base_SetConfig+0x128>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a40      	ldr	r2, [pc, #256]	; (800aeb0 <TIM_Base_SetConfig+0x12c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a3f      	ldr	r2, [pc, #252]	; (800aeb4 <TIM_Base_SetConfig+0x130>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a3e      	ldr	r2, [pc, #248]	; (800aeb8 <TIM_Base_SetConfig+0x134>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d108      	bne.n	800add6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a33      	ldr	r2, [pc, #204]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d027      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade4:	d023      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a30      	ldr	r2, [pc, #192]	; (800aeac <TIM_Base_SetConfig+0x128>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d01f      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a2f      	ldr	r2, [pc, #188]	; (800aeb0 <TIM_Base_SetConfig+0x12c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d01b      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a2e      	ldr	r2, [pc, #184]	; (800aeb4 <TIM_Base_SetConfig+0x130>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d017      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a2d      	ldr	r2, [pc, #180]	; (800aeb8 <TIM_Base_SetConfig+0x134>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d013      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a2c      	ldr	r2, [pc, #176]	; (800aebc <TIM_Base_SetConfig+0x138>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d00f      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a2b      	ldr	r2, [pc, #172]	; (800aec0 <TIM_Base_SetConfig+0x13c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00b      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a2a      	ldr	r2, [pc, #168]	; (800aec4 <TIM_Base_SetConfig+0x140>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d007      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a29      	ldr	r2, [pc, #164]	; (800aec8 <TIM_Base_SetConfig+0x144>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d003      	beq.n	800ae2e <TIM_Base_SetConfig+0xaa>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a28      	ldr	r2, [pc, #160]	; (800aecc <TIM_Base_SetConfig+0x148>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d108      	bne.n	800ae40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a10      	ldr	r2, [pc, #64]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00f      	beq.n	800ae8c <TIM_Base_SetConfig+0x108>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a12      	ldr	r2, [pc, #72]	; (800aeb8 <TIM_Base_SetConfig+0x134>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d00b      	beq.n	800ae8c <TIM_Base_SetConfig+0x108>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a11      	ldr	r2, [pc, #68]	; (800aebc <TIM_Base_SetConfig+0x138>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d007      	beq.n	800ae8c <TIM_Base_SetConfig+0x108>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a10      	ldr	r2, [pc, #64]	; (800aec0 <TIM_Base_SetConfig+0x13c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d003      	beq.n	800ae8c <TIM_Base_SetConfig+0x108>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a0f      	ldr	r2, [pc, #60]	; (800aec4 <TIM_Base_SetConfig+0x140>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d103      	bne.n	800ae94 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	691a      	ldr	r2, [r3, #16]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	615a      	str	r2, [r3, #20]
}
 800ae9a:	bf00      	nop
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	40010000 	.word	0x40010000
 800aeac:	40000400 	.word	0x40000400
 800aeb0:	40000800 	.word	0x40000800
 800aeb4:	40000c00 	.word	0x40000c00
 800aeb8:	40010400 	.word	0x40010400
 800aebc:	40014000 	.word	0x40014000
 800aec0:	40014400 	.word	0x40014400
 800aec4:	40014800 	.word	0x40014800
 800aec8:	4000e000 	.word	0x4000e000
 800aecc:	4000e400 	.word	0x4000e400

0800aed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0201 	bic.w	r2, r3, #1
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4b37      	ldr	r3, [pc, #220]	; (800afd8 <TIM_OC1_SetConfig+0x108>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f023 0302 	bic.w	r3, r3, #2
 800af18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a2d      	ldr	r2, [pc, #180]	; (800afdc <TIM_OC1_SetConfig+0x10c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00f      	beq.n	800af4c <TIM_OC1_SetConfig+0x7c>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a2c      	ldr	r2, [pc, #176]	; (800afe0 <TIM_OC1_SetConfig+0x110>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d00b      	beq.n	800af4c <TIM_OC1_SetConfig+0x7c>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a2b      	ldr	r2, [pc, #172]	; (800afe4 <TIM_OC1_SetConfig+0x114>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d007      	beq.n	800af4c <TIM_OC1_SetConfig+0x7c>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a2a      	ldr	r2, [pc, #168]	; (800afe8 <TIM_OC1_SetConfig+0x118>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d003      	beq.n	800af4c <TIM_OC1_SetConfig+0x7c>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a29      	ldr	r2, [pc, #164]	; (800afec <TIM_OC1_SetConfig+0x11c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d10c      	bne.n	800af66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f023 0308 	bic.w	r3, r3, #8
 800af52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f023 0304 	bic.w	r3, r3, #4
 800af64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a1c      	ldr	r2, [pc, #112]	; (800afdc <TIM_OC1_SetConfig+0x10c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00f      	beq.n	800af8e <TIM_OC1_SetConfig+0xbe>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a1b      	ldr	r2, [pc, #108]	; (800afe0 <TIM_OC1_SetConfig+0x110>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d00b      	beq.n	800af8e <TIM_OC1_SetConfig+0xbe>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a1a      	ldr	r2, [pc, #104]	; (800afe4 <TIM_OC1_SetConfig+0x114>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d007      	beq.n	800af8e <TIM_OC1_SetConfig+0xbe>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a19      	ldr	r2, [pc, #100]	; (800afe8 <TIM_OC1_SetConfig+0x118>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d003      	beq.n	800af8e <TIM_OC1_SetConfig+0xbe>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a18      	ldr	r2, [pc, #96]	; (800afec <TIM_OC1_SetConfig+0x11c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d111      	bne.n	800afb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4313      	orrs	r3, r2
 800afb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	621a      	str	r2, [r3, #32]
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	fffeff8f 	.word	0xfffeff8f
 800afdc:	40010000 	.word	0x40010000
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40014000 	.word	0x40014000
 800afe8:	40014400 	.word	0x40014400
 800afec:	40014800 	.word	0x40014800

0800aff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	f023 0210 	bic.w	r2, r3, #16
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4b34      	ldr	r3, [pc, #208]	; (800b0ec <TIM_OC2_SetConfig+0xfc>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f023 0320 	bic.w	r3, r3, #32
 800b03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a29      	ldr	r2, [pc, #164]	; (800b0f0 <TIM_OC2_SetConfig+0x100>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d003      	beq.n	800b058 <TIM_OC2_SetConfig+0x68>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a28      	ldr	r2, [pc, #160]	; (800b0f4 <TIM_OC2_SetConfig+0x104>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d10d      	bne.n	800b074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	4313      	orrs	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a1e      	ldr	r2, [pc, #120]	; (800b0f0 <TIM_OC2_SetConfig+0x100>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00f      	beq.n	800b09c <TIM_OC2_SetConfig+0xac>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <TIM_OC2_SetConfig+0x104>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00b      	beq.n	800b09c <TIM_OC2_SetConfig+0xac>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a1c      	ldr	r2, [pc, #112]	; (800b0f8 <TIM_OC2_SetConfig+0x108>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d007      	beq.n	800b09c <TIM_OC2_SetConfig+0xac>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a1b      	ldr	r2, [pc, #108]	; (800b0fc <TIM_OC2_SetConfig+0x10c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d003      	beq.n	800b09c <TIM_OC2_SetConfig+0xac>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a1a      	ldr	r2, [pc, #104]	; (800b100 <TIM_OC2_SetConfig+0x110>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d113      	bne.n	800b0c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	621a      	str	r2, [r3, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	feff8fff 	.word	0xfeff8fff
 800b0f0:	40010000 	.word	0x40010000
 800b0f4:	40010400 	.word	0x40010400
 800b0f8:	40014000 	.word	0x40014000
 800b0fc:	40014400 	.word	0x40014400
 800b100:	40014800 	.word	0x40014800

0800b104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4b33      	ldr	r3, [pc, #204]	; (800b1fc <TIM_OC3_SetConfig+0xf8>)
 800b130:	4013      	ands	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b14c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a28      	ldr	r2, [pc, #160]	; (800b200 <TIM_OC3_SetConfig+0xfc>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d003      	beq.n	800b16a <TIM_OC3_SetConfig+0x66>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a27      	ldr	r2, [pc, #156]	; (800b204 <TIM_OC3_SetConfig+0x100>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d10d      	bne.n	800b186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a1d      	ldr	r2, [pc, #116]	; (800b200 <TIM_OC3_SetConfig+0xfc>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00f      	beq.n	800b1ae <TIM_OC3_SetConfig+0xaa>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a1c      	ldr	r2, [pc, #112]	; (800b204 <TIM_OC3_SetConfig+0x100>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d00b      	beq.n	800b1ae <TIM_OC3_SetConfig+0xaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a1b      	ldr	r2, [pc, #108]	; (800b208 <TIM_OC3_SetConfig+0x104>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d007      	beq.n	800b1ae <TIM_OC3_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a1a      	ldr	r2, [pc, #104]	; (800b20c <TIM_OC3_SetConfig+0x108>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d003      	beq.n	800b1ae <TIM_OC3_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a19      	ldr	r2, [pc, #100]	; (800b210 <TIM_OC3_SetConfig+0x10c>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d113      	bne.n	800b1d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	011b      	lsls	r3, r3, #4
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	621a      	str	r2, [r3, #32]
}
 800b1f0:	bf00      	nop
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	fffeff8f 	.word	0xfffeff8f
 800b200:	40010000 	.word	0x40010000
 800b204:	40010400 	.word	0x40010400
 800b208:	40014000 	.word	0x40014000
 800b20c:	40014400 	.word	0x40014400
 800b210:	40014800 	.word	0x40014800

0800b214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b214:	b480      	push	{r7}
 800b216:	b087      	sub	sp, #28
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4b24      	ldr	r3, [pc, #144]	; (800b2d0 <TIM_OC4_SetConfig+0xbc>)
 800b240:	4013      	ands	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b25e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	031b      	lsls	r3, r3, #12
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a19      	ldr	r2, [pc, #100]	; (800b2d4 <TIM_OC4_SetConfig+0xc0>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_OC4_SetConfig+0x80>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a18      	ldr	r2, [pc, #96]	; (800b2d8 <TIM_OC4_SetConfig+0xc4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00b      	beq.n	800b294 <TIM_OC4_SetConfig+0x80>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a17      	ldr	r2, [pc, #92]	; (800b2dc <TIM_OC4_SetConfig+0xc8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_OC4_SetConfig+0x80>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a16      	ldr	r2, [pc, #88]	; (800b2e0 <TIM_OC4_SetConfig+0xcc>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_OC4_SetConfig+0x80>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <TIM_OC4_SetConfig+0xd0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d109      	bne.n	800b2a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b29a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	019b      	lsls	r3, r3, #6
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	621a      	str	r2, [r3, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	feff8fff 	.word	0xfeff8fff
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40010400 	.word	0x40010400
 800b2dc:	40014000 	.word	0x40014000
 800b2e0:	40014400 	.word	0x40014400
 800b2e4:	40014800 	.word	0x40014800

0800b2e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4b21      	ldr	r3, [pc, #132]	; (800b398 <TIM_OC5_SetConfig+0xb0>)
 800b314:	4013      	ands	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	041b      	lsls	r3, r3, #16
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	4313      	orrs	r3, r2
 800b334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a18      	ldr	r2, [pc, #96]	; (800b39c <TIM_OC5_SetConfig+0xb4>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d00f      	beq.n	800b35e <TIM_OC5_SetConfig+0x76>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a17      	ldr	r2, [pc, #92]	; (800b3a0 <TIM_OC5_SetConfig+0xb8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00b      	beq.n	800b35e <TIM_OC5_SetConfig+0x76>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a16      	ldr	r2, [pc, #88]	; (800b3a4 <TIM_OC5_SetConfig+0xbc>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d007      	beq.n	800b35e <TIM_OC5_SetConfig+0x76>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a15      	ldr	r2, [pc, #84]	; (800b3a8 <TIM_OC5_SetConfig+0xc0>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d003      	beq.n	800b35e <TIM_OC5_SetConfig+0x76>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a14      	ldr	r2, [pc, #80]	; (800b3ac <TIM_OC5_SetConfig+0xc4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d109      	bne.n	800b372 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	621a      	str	r2, [r3, #32]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	fffeff8f 	.word	0xfffeff8f
 800b39c:	40010000 	.word	0x40010000
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800

0800b3b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4b22      	ldr	r3, [pc, #136]	; (800b464 <TIM_OC6_SetConfig+0xb4>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	051b      	lsls	r3, r3, #20
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a19      	ldr	r2, [pc, #100]	; (800b468 <TIM_OC6_SetConfig+0xb8>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d00f      	beq.n	800b428 <TIM_OC6_SetConfig+0x78>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a18      	ldr	r2, [pc, #96]	; (800b46c <TIM_OC6_SetConfig+0xbc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d00b      	beq.n	800b428 <TIM_OC6_SetConfig+0x78>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a17      	ldr	r2, [pc, #92]	; (800b470 <TIM_OC6_SetConfig+0xc0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d007      	beq.n	800b428 <TIM_OC6_SetConfig+0x78>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a16      	ldr	r2, [pc, #88]	; (800b474 <TIM_OC6_SetConfig+0xc4>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d003      	beq.n	800b428 <TIM_OC6_SetConfig+0x78>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a15      	ldr	r2, [pc, #84]	; (800b478 <TIM_OC6_SetConfig+0xc8>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d109      	bne.n	800b43c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b42e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	029b      	lsls	r3, r3, #10
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	621a      	str	r2, [r3, #32]
}
 800b456:	bf00      	nop
 800b458:	371c      	adds	r7, #28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	feff8fff 	.word	0xfeff8fff
 800b468:	40010000 	.word	0x40010000
 800b46c:	40010400 	.word	0x40010400
 800b470:	40014000 	.word	0x40014000
 800b474:	40014400 	.word	0x40014400
 800b478:	40014800 	.word	0x40014800

0800b47c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f023 0201 	bic.w	r2, r3, #1
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	011b      	lsls	r3, r3, #4
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f023 030a 	bic.w	r3, r3, #10
 800b4b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4ba:	697a      	ldr	r2, [r7, #20]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	621a      	str	r2, [r3, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b087      	sub	sp, #28
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	f023 0210 	bic.w	r2, r3, #16
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	031b      	lsls	r3, r3, #12
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	011b      	lsls	r3, r3, #4
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	4313      	orrs	r3, r2
 800b520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	621a      	str	r2, [r3, #32]
}
 800b52e:	bf00      	nop
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
	...

0800b53c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <TIM_ITRx_SetConfig+0x38>)
 800b550:	4013      	ands	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	4313      	orrs	r3, r2
 800b55a:	f043 0307 	orr.w	r3, r3, #7
 800b55e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	609a      	str	r2, [r3, #8]
}
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	ffcfff8f 	.word	0xffcfff8f

0800b578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	021a      	lsls	r2, r3, #8
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	431a      	orrs	r2, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	609a      	str	r2, [r3, #8]
}
 800b5ac:	bf00      	nop
 800b5ae:	371c      	adds	r7, #28
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f003 031f 	and.w	r3, r3, #31
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6a1a      	ldr	r2, [r3, #32]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	43db      	mvns	r3, r3
 800b5da:	401a      	ands	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a1a      	ldr	r2, [r3, #32]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f003 031f 	and.w	r3, r3, #31
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	621a      	str	r2, [r3, #32]
}
 800b5f6:	bf00      	nop
 800b5f8:	371c      	adds	r7, #28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b618:	2302      	movs	r3, #2
 800b61a:	e077      	b.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a35      	ldr	r2, [pc, #212]	; (800b718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d004      	beq.n	800b650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a34      	ldr	r2, [pc, #208]	; (800b71c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d108      	bne.n	800b662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	4313      	orrs	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a25      	ldr	r2, [pc, #148]	; (800b718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d02c      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b68e:	d027      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a22      	ldr	r2, [pc, #136]	; (800b720 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d022      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a21      	ldr	r2, [pc, #132]	; (800b724 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d01d      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a1f      	ldr	r2, [pc, #124]	; (800b728 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d018      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a1a      	ldr	r2, [pc, #104]	; (800b71c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d013      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a1b      	ldr	r2, [pc, #108]	; (800b72c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00e      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a1a      	ldr	r2, [pc, #104]	; (800b730 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d009      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a18      	ldr	r2, [pc, #96]	; (800b734 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d004      	beq.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10c      	bne.n	800b6fa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	40010000 	.word	0x40010000
 800b71c:	40010400 	.word	0x40010400
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40000c00 	.word	0x40000c00
 800b72c:	40001800 	.word	0x40001800
 800b730:	40014000 	.word	0x40014000
 800b734:	4000e000 	.word	0x4000e000
 800b738:	4000e400 	.word	0x4000e400

0800b73c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b754:	2302      	movs	r3, #2
 800b756:	e087      	b.n	800b868 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4313      	orrs	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	041b      	lsls	r3, r3, #16
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a27      	ldr	r2, [pc, #156]	; (800b874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d004      	beq.n	800b7e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a25      	ldr	r2, [pc, #148]	; (800b878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d106      	bne.n	800b7f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a1e      	ldr	r2, [pc, #120]	; (800b874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d004      	beq.n	800b808 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a1d      	ldr	r2, [pc, #116]	; (800b878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d126      	bne.n	800b856 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b812:	051b      	lsls	r3, r3, #20
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	4313      	orrs	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d004      	beq.n	800b848 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a0d      	ldr	r2, [pc, #52]	; (800b878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d106      	bne.n	800b856 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	4313      	orrs	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	40010000 	.word	0x40010000
 800b878:	40010400 	.word	0x40010400

0800b87c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e042      	b.n	800b950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d106      	bne.n	800b8e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7f7 fe1b 	bl	8003518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2224      	movs	r2, #36	; 0x24
 800b8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f022 0201 	bic.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f996 	bl	800bc2c <UART_SetConfig>
 800b900:	4603      	mov	r3, r0
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e022      	b.n	800b950 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 ffe8 	bl	800c8e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0201 	orr.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 f86f 	bl	800ca2c <UART_CheckIdleState>
 800b94e:	4603      	mov	r3, r0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08a      	sub	sp, #40	; 0x28
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	4613      	mov	r3, r2
 800b966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b96e:	2b20      	cmp	r3, #32
 800b970:	f040 8083 	bne.w	800ba7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <HAL_UART_Transmit+0x28>
 800b97a:	88fb      	ldrh	r3, [r7, #6]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e07b      	b.n	800ba7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <HAL_UART_Transmit+0x3a>
 800b98e:	2302      	movs	r3, #2
 800b990:	e074      	b.n	800ba7c <HAL_UART_Transmit+0x124>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2221      	movs	r2, #33	; 0x21
 800b9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9aa:	f7f7 ffdf 	bl	800396c <HAL_GetTick>
 800b9ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	88fa      	ldrh	r2, [r7, #6]
 800b9b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	88fa      	ldrh	r2, [r7, #6]
 800b9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c8:	d108      	bne.n	800b9dc <HAL_UART_Transmit+0x84>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	61bb      	str	r3, [r7, #24]
 800b9da:	e003      	b.n	800b9e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b9ec:	e02c      	b.n	800ba48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2180      	movs	r1, #128	; 0x80
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 f862 	bl	800cac2 <UART_WaitOnFlagUntilTimeout>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e039      	b.n	800ba7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10b      	bne.n	800ba26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	3302      	adds	r3, #2
 800ba22:	61bb      	str	r3, [r7, #24]
 800ba24:	e007      	b.n	800ba36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	781a      	ldrb	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1cc      	bne.n	800b9ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2140      	movs	r1, #64	; 0x40
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f001 f82f 	bl	800cac2 <UART_WaitOnFlagUntilTimeout>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e006      	b.n	800ba7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2220      	movs	r2, #32
 800ba72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	e000      	b.n	800ba7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ba7a:	2302      	movs	r3, #2
  }
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3720      	adds	r7, #32
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba9a:	2b20      	cmp	r3, #32
 800ba9c:	f040 80c0 	bne.w	800bc20 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <HAL_UART_Receive+0x28>
 800baa6:	88fb      	ldrh	r3, [r7, #6]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e0b8      	b.n	800bc22 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d101      	bne.n	800babe <HAL_UART_Receive+0x3a>
 800baba:	2302      	movs	r3, #2
 800babc:	e0b1      	b.n	800bc22 <HAL_UART_Receive+0x19e>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2222      	movs	r2, #34	; 0x22
 800bad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800badc:	f7f7 ff46 	bl	800396c <HAL_GetTick>
 800bae0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	88fa      	ldrh	r2, [r7, #6]
 800bae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	88fa      	ldrh	r2, [r7, #6]
 800baee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bafa:	d10e      	bne.n	800bb1a <HAL_UART_Receive+0x96>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <HAL_UART_Receive+0x8c>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bb0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb0e:	e02d      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	22ff      	movs	r2, #255	; 0xff
 800bb14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb18:	e028      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10d      	bne.n	800bb3e <HAL_UART_Receive+0xba>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d104      	bne.n	800bb34 <HAL_UART_Receive+0xb0>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	22ff      	movs	r2, #255	; 0xff
 800bb2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb32:	e01b      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	227f      	movs	r2, #127	; 0x7f
 800bb38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb3c:	e016      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb46:	d10d      	bne.n	800bb64 <HAL_UART_Receive+0xe0>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d104      	bne.n	800bb5a <HAL_UART_Receive+0xd6>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	227f      	movs	r2, #127	; 0x7f
 800bb54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb58:	e008      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	223f      	movs	r2, #63	; 0x3f
 800bb5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb62:	e003      	b.n	800bb6c <HAL_UART_Receive+0xe8>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7c:	d108      	bne.n	800bb90 <HAL_UART_Receive+0x10c>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d104      	bne.n	800bb90 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	e003      	b.n	800bb98 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bba0:	e032      	b.n	800bc08 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2120      	movs	r1, #32
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 ff88 	bl	800cac2 <UART_WaitOnFlagUntilTimeout>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e032      	b.n	800bc22 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10c      	bne.n	800bbdc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	8a7b      	ldrh	r3, [r7, #18]
 800bbcc:	4013      	ands	r3, r2
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	3302      	adds	r3, #2
 800bbd8:	61bb      	str	r3, [r7, #24]
 800bbda:	e00c      	b.n	800bbf6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	8a7b      	ldrh	r3, [r7, #18]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4013      	ands	r3, r2
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1c6      	bne.n	800bba2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	e000      	b.n	800bc22 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800bc20:	2302      	movs	r3, #2
  }
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b08e      	sub	sp, #56	; 0x38
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	431a      	orrs	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	4bbf      	ldr	r3, [pc, #764]	; (800bf58 <UART_SetConfig+0x32c>)
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc62:	430b      	orrs	r3, r1
 800bc64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68da      	ldr	r2, [r3, #12]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4ab5      	ldr	r2, [pc, #724]	; (800bf5c <UART_SetConfig+0x330>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d004      	beq.n	800bc96 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc92:	4313      	orrs	r3, r2
 800bc94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	4bb0      	ldr	r3, [pc, #704]	; (800bf60 <UART_SetConfig+0x334>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6812      	ldr	r2, [r2, #0]
 800bca4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bca6:	430b      	orrs	r3, r1
 800bca8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	f023 010f 	bic.w	r1, r3, #15
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4aa7      	ldr	r2, [pc, #668]	; (800bf64 <UART_SetConfig+0x338>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d176      	bne.n	800bdb8 <UART_SetConfig+0x18c>
 800bcca:	4ba7      	ldr	r3, [pc, #668]	; (800bf68 <UART_SetConfig+0x33c>)
 800bccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcd2:	2b28      	cmp	r3, #40	; 0x28
 800bcd4:	d86c      	bhi.n	800bdb0 <UART_SetConfig+0x184>
 800bcd6:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <UART_SetConfig+0xb0>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bd81 	.word	0x0800bd81
 800bce0:	0800bdb1 	.word	0x0800bdb1
 800bce4:	0800bdb1 	.word	0x0800bdb1
 800bce8:	0800bdb1 	.word	0x0800bdb1
 800bcec:	0800bdb1 	.word	0x0800bdb1
 800bcf0:	0800bdb1 	.word	0x0800bdb1
 800bcf4:	0800bdb1 	.word	0x0800bdb1
 800bcf8:	0800bdb1 	.word	0x0800bdb1
 800bcfc:	0800bd89 	.word	0x0800bd89
 800bd00:	0800bdb1 	.word	0x0800bdb1
 800bd04:	0800bdb1 	.word	0x0800bdb1
 800bd08:	0800bdb1 	.word	0x0800bdb1
 800bd0c:	0800bdb1 	.word	0x0800bdb1
 800bd10:	0800bdb1 	.word	0x0800bdb1
 800bd14:	0800bdb1 	.word	0x0800bdb1
 800bd18:	0800bdb1 	.word	0x0800bdb1
 800bd1c:	0800bd91 	.word	0x0800bd91
 800bd20:	0800bdb1 	.word	0x0800bdb1
 800bd24:	0800bdb1 	.word	0x0800bdb1
 800bd28:	0800bdb1 	.word	0x0800bdb1
 800bd2c:	0800bdb1 	.word	0x0800bdb1
 800bd30:	0800bdb1 	.word	0x0800bdb1
 800bd34:	0800bdb1 	.word	0x0800bdb1
 800bd38:	0800bdb1 	.word	0x0800bdb1
 800bd3c:	0800bd99 	.word	0x0800bd99
 800bd40:	0800bdb1 	.word	0x0800bdb1
 800bd44:	0800bdb1 	.word	0x0800bdb1
 800bd48:	0800bdb1 	.word	0x0800bdb1
 800bd4c:	0800bdb1 	.word	0x0800bdb1
 800bd50:	0800bdb1 	.word	0x0800bdb1
 800bd54:	0800bdb1 	.word	0x0800bdb1
 800bd58:	0800bdb1 	.word	0x0800bdb1
 800bd5c:	0800bda1 	.word	0x0800bda1
 800bd60:	0800bdb1 	.word	0x0800bdb1
 800bd64:	0800bdb1 	.word	0x0800bdb1
 800bd68:	0800bdb1 	.word	0x0800bdb1
 800bd6c:	0800bdb1 	.word	0x0800bdb1
 800bd70:	0800bdb1 	.word	0x0800bdb1
 800bd74:	0800bdb1 	.word	0x0800bdb1
 800bd78:	0800bdb1 	.word	0x0800bdb1
 800bd7c:	0800bda9 	.word	0x0800bda9
 800bd80:	2301      	movs	r3, #1
 800bd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd86:	e326      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bd88:	2304      	movs	r3, #4
 800bd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8e:	e322      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bd90:	2308      	movs	r3, #8
 800bd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd96:	e31e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bd98:	2310      	movs	r3, #16
 800bd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd9e:	e31a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bda0:	2320      	movs	r3, #32
 800bda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda6:	e316      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bda8:	2340      	movs	r3, #64	; 0x40
 800bdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdae:	e312      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bdb0:	2380      	movs	r3, #128	; 0x80
 800bdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb6:	e30e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a6b      	ldr	r2, [pc, #428]	; (800bf6c <UART_SetConfig+0x340>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d130      	bne.n	800be24 <UART_SetConfig+0x1f8>
 800bdc2:	4b69      	ldr	r3, [pc, #420]	; (800bf68 <UART_SetConfig+0x33c>)
 800bdc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	2b05      	cmp	r3, #5
 800bdcc:	d826      	bhi.n	800be1c <UART_SetConfig+0x1f0>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <UART_SetConfig+0x1a8>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bded 	.word	0x0800bded
 800bdd8:	0800bdf5 	.word	0x0800bdf5
 800bddc:	0800bdfd 	.word	0x0800bdfd
 800bde0:	0800be05 	.word	0x0800be05
 800bde4:	0800be0d 	.word	0x0800be0d
 800bde8:	0800be15 	.word	0x0800be15
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf2:	e2f0      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfa:	e2ec      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be02:	e2e8      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be04:	2310      	movs	r3, #16
 800be06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be0a:	e2e4      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be0c:	2320      	movs	r3, #32
 800be0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be12:	e2e0      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be14:	2340      	movs	r3, #64	; 0x40
 800be16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be1a:	e2dc      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be1c:	2380      	movs	r3, #128	; 0x80
 800be1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be22:	e2d8      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a51      	ldr	r2, [pc, #324]	; (800bf70 <UART_SetConfig+0x344>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d130      	bne.n	800be90 <UART_SetConfig+0x264>
 800be2e:	4b4e      	ldr	r3, [pc, #312]	; (800bf68 <UART_SetConfig+0x33c>)
 800be30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b05      	cmp	r3, #5
 800be38:	d826      	bhi.n	800be88 <UART_SetConfig+0x25c>
 800be3a:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <UART_SetConfig+0x214>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be59 	.word	0x0800be59
 800be44:	0800be61 	.word	0x0800be61
 800be48:	0800be69 	.word	0x0800be69
 800be4c:	0800be71 	.word	0x0800be71
 800be50:	0800be79 	.word	0x0800be79
 800be54:	0800be81 	.word	0x0800be81
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be5e:	e2ba      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be60:	2304      	movs	r3, #4
 800be62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be66:	e2b6      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be68:	2308      	movs	r3, #8
 800be6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be6e:	e2b2      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be70:	2310      	movs	r3, #16
 800be72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be76:	e2ae      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be78:	2320      	movs	r3, #32
 800be7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be7e:	e2aa      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be80:	2340      	movs	r3, #64	; 0x40
 800be82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be86:	e2a6      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be88:	2380      	movs	r3, #128	; 0x80
 800be8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8e:	e2a2      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a37      	ldr	r2, [pc, #220]	; (800bf74 <UART_SetConfig+0x348>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d130      	bne.n	800befc <UART_SetConfig+0x2d0>
 800be9a:	4b33      	ldr	r3, [pc, #204]	; (800bf68 <UART_SetConfig+0x33c>)
 800be9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9e:	f003 0307 	and.w	r3, r3, #7
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d826      	bhi.n	800bef4 <UART_SetConfig+0x2c8>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <UART_SetConfig+0x280>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bec5 	.word	0x0800bec5
 800beb0:	0800becd 	.word	0x0800becd
 800beb4:	0800bed5 	.word	0x0800bed5
 800beb8:	0800bedd 	.word	0x0800bedd
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800beed 	.word	0x0800beed
 800bec4:	2300      	movs	r3, #0
 800bec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beca:	e284      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800becc:	2304      	movs	r3, #4
 800bece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed2:	e280      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bed4:	2308      	movs	r3, #8
 800bed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beda:	e27c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bedc:	2310      	movs	r3, #16
 800bede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bee2:	e278      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bee4:	2320      	movs	r3, #32
 800bee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beea:	e274      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800beec:	2340      	movs	r3, #64	; 0x40
 800beee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bef2:	e270      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bef4:	2380      	movs	r3, #128	; 0x80
 800bef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800befa:	e26c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a1d      	ldr	r2, [pc, #116]	; (800bf78 <UART_SetConfig+0x34c>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d142      	bne.n	800bf8c <UART_SetConfig+0x360>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <UART_SetConfig+0x33c>)
 800bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0a:	f003 0307 	and.w	r3, r3, #7
 800bf0e:	2b05      	cmp	r3, #5
 800bf10:	d838      	bhi.n	800bf84 <UART_SetConfig+0x358>
 800bf12:	a201      	add	r2, pc, #4	; (adr r2, 800bf18 <UART_SetConfig+0x2ec>)
 800bf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf18:	0800bf31 	.word	0x0800bf31
 800bf1c:	0800bf39 	.word	0x0800bf39
 800bf20:	0800bf41 	.word	0x0800bf41
 800bf24:	0800bf49 	.word	0x0800bf49
 800bf28:	0800bf51 	.word	0x0800bf51
 800bf2c:	0800bf7d 	.word	0x0800bf7d
 800bf30:	2300      	movs	r3, #0
 800bf32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf36:	e24e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf38:	2304      	movs	r3, #4
 800bf3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf3e:	e24a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf40:	2308      	movs	r3, #8
 800bf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf46:	e246      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf48:	2310      	movs	r3, #16
 800bf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf4e:	e242      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf50:	2320      	movs	r3, #32
 800bf52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf56:	e23e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf58:	cfff69f3 	.word	0xcfff69f3
 800bf5c:	58000c00 	.word	0x58000c00
 800bf60:	11fff4ff 	.word	0x11fff4ff
 800bf64:	40011000 	.word	0x40011000
 800bf68:	58024400 	.word	0x58024400
 800bf6c:	40004400 	.word	0x40004400
 800bf70:	40004800 	.word	0x40004800
 800bf74:	40004c00 	.word	0x40004c00
 800bf78:	40005000 	.word	0x40005000
 800bf7c:	2340      	movs	r3, #64	; 0x40
 800bf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf82:	e228      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf8a:	e224      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4ab1      	ldr	r2, [pc, #708]	; (800c258 <UART_SetConfig+0x62c>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d176      	bne.n	800c084 <UART_SetConfig+0x458>
 800bf96:	4bb1      	ldr	r3, [pc, #708]	; (800c25c <UART_SetConfig+0x630>)
 800bf98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf9e:	2b28      	cmp	r3, #40	; 0x28
 800bfa0:	d86c      	bhi.n	800c07c <UART_SetConfig+0x450>
 800bfa2:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <UART_SetConfig+0x37c>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800c04d 	.word	0x0800c04d
 800bfac:	0800c07d 	.word	0x0800c07d
 800bfb0:	0800c07d 	.word	0x0800c07d
 800bfb4:	0800c07d 	.word	0x0800c07d
 800bfb8:	0800c07d 	.word	0x0800c07d
 800bfbc:	0800c07d 	.word	0x0800c07d
 800bfc0:	0800c07d 	.word	0x0800c07d
 800bfc4:	0800c07d 	.word	0x0800c07d
 800bfc8:	0800c055 	.word	0x0800c055
 800bfcc:	0800c07d 	.word	0x0800c07d
 800bfd0:	0800c07d 	.word	0x0800c07d
 800bfd4:	0800c07d 	.word	0x0800c07d
 800bfd8:	0800c07d 	.word	0x0800c07d
 800bfdc:	0800c07d 	.word	0x0800c07d
 800bfe0:	0800c07d 	.word	0x0800c07d
 800bfe4:	0800c07d 	.word	0x0800c07d
 800bfe8:	0800c05d 	.word	0x0800c05d
 800bfec:	0800c07d 	.word	0x0800c07d
 800bff0:	0800c07d 	.word	0x0800c07d
 800bff4:	0800c07d 	.word	0x0800c07d
 800bff8:	0800c07d 	.word	0x0800c07d
 800bffc:	0800c07d 	.word	0x0800c07d
 800c000:	0800c07d 	.word	0x0800c07d
 800c004:	0800c07d 	.word	0x0800c07d
 800c008:	0800c065 	.word	0x0800c065
 800c00c:	0800c07d 	.word	0x0800c07d
 800c010:	0800c07d 	.word	0x0800c07d
 800c014:	0800c07d 	.word	0x0800c07d
 800c018:	0800c07d 	.word	0x0800c07d
 800c01c:	0800c07d 	.word	0x0800c07d
 800c020:	0800c07d 	.word	0x0800c07d
 800c024:	0800c07d 	.word	0x0800c07d
 800c028:	0800c06d 	.word	0x0800c06d
 800c02c:	0800c07d 	.word	0x0800c07d
 800c030:	0800c07d 	.word	0x0800c07d
 800c034:	0800c07d 	.word	0x0800c07d
 800c038:	0800c07d 	.word	0x0800c07d
 800c03c:	0800c07d 	.word	0x0800c07d
 800c040:	0800c07d 	.word	0x0800c07d
 800c044:	0800c07d 	.word	0x0800c07d
 800c048:	0800c075 	.word	0x0800c075
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c052:	e1c0      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c054:	2304      	movs	r3, #4
 800c056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05a:	e1bc      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c05c:	2308      	movs	r3, #8
 800c05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c062:	e1b8      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c064:	2310      	movs	r3, #16
 800c066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c06a:	e1b4      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c06c:	2320      	movs	r3, #32
 800c06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c072:	e1b0      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c074:	2340      	movs	r3, #64	; 0x40
 800c076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c07a:	e1ac      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c07c:	2380      	movs	r3, #128	; 0x80
 800c07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c082:	e1a8      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a75      	ldr	r2, [pc, #468]	; (800c260 <UART_SetConfig+0x634>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d130      	bne.n	800c0f0 <UART_SetConfig+0x4c4>
 800c08e:	4b73      	ldr	r3, [pc, #460]	; (800c25c <UART_SetConfig+0x630>)
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b05      	cmp	r3, #5
 800c098:	d826      	bhi.n	800c0e8 <UART_SetConfig+0x4bc>
 800c09a:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <UART_SetConfig+0x474>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0b9 	.word	0x0800c0b9
 800c0a4:	0800c0c1 	.word	0x0800c0c1
 800c0a8:	0800c0c9 	.word	0x0800c0c9
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0d9 	.word	0x0800c0d9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	e18a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c6:	e186      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ce:	e182      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0d6:	e17e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0d8:	2320      	movs	r3, #32
 800c0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0de:	e17a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0e6:	e176      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0e8:	2380      	movs	r3, #128	; 0x80
 800c0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ee:	e172      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a5b      	ldr	r2, [pc, #364]	; (800c264 <UART_SetConfig+0x638>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d130      	bne.n	800c15c <UART_SetConfig+0x530>
 800c0fa:	4b58      	ldr	r3, [pc, #352]	; (800c25c <UART_SetConfig+0x630>)
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b05      	cmp	r3, #5
 800c104:	d826      	bhi.n	800c154 <UART_SetConfig+0x528>
 800c106:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <UART_SetConfig+0x4e0>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c125 	.word	0x0800c125
 800c110:	0800c12d 	.word	0x0800c12d
 800c114:	0800c135 	.word	0x0800c135
 800c118:	0800c13d 	.word	0x0800c13d
 800c11c:	0800c145 	.word	0x0800c145
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12a:	e154      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c132:	e150      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13a:	e14c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c142:	e148      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14a:	e144      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c152:	e140      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15a:	e13c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a41      	ldr	r2, [pc, #260]	; (800c268 <UART_SetConfig+0x63c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	f040 8082 	bne.w	800c26c <UART_SetConfig+0x640>
 800c168:	4b3c      	ldr	r3, [pc, #240]	; (800c25c <UART_SetConfig+0x630>)
 800c16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c170:	2b28      	cmp	r3, #40	; 0x28
 800c172:	d86d      	bhi.n	800c250 <UART_SetConfig+0x624>
 800c174:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <UART_SetConfig+0x550>)
 800c176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17a:	bf00      	nop
 800c17c:	0800c221 	.word	0x0800c221
 800c180:	0800c251 	.word	0x0800c251
 800c184:	0800c251 	.word	0x0800c251
 800c188:	0800c251 	.word	0x0800c251
 800c18c:	0800c251 	.word	0x0800c251
 800c190:	0800c251 	.word	0x0800c251
 800c194:	0800c251 	.word	0x0800c251
 800c198:	0800c251 	.word	0x0800c251
 800c19c:	0800c229 	.word	0x0800c229
 800c1a0:	0800c251 	.word	0x0800c251
 800c1a4:	0800c251 	.word	0x0800c251
 800c1a8:	0800c251 	.word	0x0800c251
 800c1ac:	0800c251 	.word	0x0800c251
 800c1b0:	0800c251 	.word	0x0800c251
 800c1b4:	0800c251 	.word	0x0800c251
 800c1b8:	0800c251 	.word	0x0800c251
 800c1bc:	0800c231 	.word	0x0800c231
 800c1c0:	0800c251 	.word	0x0800c251
 800c1c4:	0800c251 	.word	0x0800c251
 800c1c8:	0800c251 	.word	0x0800c251
 800c1cc:	0800c251 	.word	0x0800c251
 800c1d0:	0800c251 	.word	0x0800c251
 800c1d4:	0800c251 	.word	0x0800c251
 800c1d8:	0800c251 	.word	0x0800c251
 800c1dc:	0800c239 	.word	0x0800c239
 800c1e0:	0800c251 	.word	0x0800c251
 800c1e4:	0800c251 	.word	0x0800c251
 800c1e8:	0800c251 	.word	0x0800c251
 800c1ec:	0800c251 	.word	0x0800c251
 800c1f0:	0800c251 	.word	0x0800c251
 800c1f4:	0800c251 	.word	0x0800c251
 800c1f8:	0800c251 	.word	0x0800c251
 800c1fc:	0800c241 	.word	0x0800c241
 800c200:	0800c251 	.word	0x0800c251
 800c204:	0800c251 	.word	0x0800c251
 800c208:	0800c251 	.word	0x0800c251
 800c20c:	0800c251 	.word	0x0800c251
 800c210:	0800c251 	.word	0x0800c251
 800c214:	0800c251 	.word	0x0800c251
 800c218:	0800c251 	.word	0x0800c251
 800c21c:	0800c249 	.word	0x0800c249
 800c220:	2301      	movs	r3, #1
 800c222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c226:	e0d6      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c228:	2304      	movs	r3, #4
 800c22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22e:	e0d2      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c230:	2308      	movs	r3, #8
 800c232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c236:	e0ce      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c238:	2310      	movs	r3, #16
 800c23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c23e:	e0ca      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c240:	2320      	movs	r3, #32
 800c242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c246:	e0c6      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c248:	2340      	movs	r3, #64	; 0x40
 800c24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24e:	e0c2      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c250:	2380      	movs	r3, #128	; 0x80
 800c252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c256:	e0be      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c258:	40011400 	.word	0x40011400
 800c25c:	58024400 	.word	0x58024400
 800c260:	40007800 	.word	0x40007800
 800c264:	40007c00 	.word	0x40007c00
 800c268:	40011800 	.word	0x40011800
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4aad      	ldr	r2, [pc, #692]	; (800c528 <UART_SetConfig+0x8fc>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d176      	bne.n	800c364 <UART_SetConfig+0x738>
 800c276:	4bad      	ldr	r3, [pc, #692]	; (800c52c <UART_SetConfig+0x900>)
 800c278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c27e:	2b28      	cmp	r3, #40	; 0x28
 800c280:	d86c      	bhi.n	800c35c <UART_SetConfig+0x730>
 800c282:	a201      	add	r2, pc, #4	; (adr r2, 800c288 <UART_SetConfig+0x65c>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c32d 	.word	0x0800c32d
 800c28c:	0800c35d 	.word	0x0800c35d
 800c290:	0800c35d 	.word	0x0800c35d
 800c294:	0800c35d 	.word	0x0800c35d
 800c298:	0800c35d 	.word	0x0800c35d
 800c29c:	0800c35d 	.word	0x0800c35d
 800c2a0:	0800c35d 	.word	0x0800c35d
 800c2a4:	0800c35d 	.word	0x0800c35d
 800c2a8:	0800c335 	.word	0x0800c335
 800c2ac:	0800c35d 	.word	0x0800c35d
 800c2b0:	0800c35d 	.word	0x0800c35d
 800c2b4:	0800c35d 	.word	0x0800c35d
 800c2b8:	0800c35d 	.word	0x0800c35d
 800c2bc:	0800c35d 	.word	0x0800c35d
 800c2c0:	0800c35d 	.word	0x0800c35d
 800c2c4:	0800c35d 	.word	0x0800c35d
 800c2c8:	0800c33d 	.word	0x0800c33d
 800c2cc:	0800c35d 	.word	0x0800c35d
 800c2d0:	0800c35d 	.word	0x0800c35d
 800c2d4:	0800c35d 	.word	0x0800c35d
 800c2d8:	0800c35d 	.word	0x0800c35d
 800c2dc:	0800c35d 	.word	0x0800c35d
 800c2e0:	0800c35d 	.word	0x0800c35d
 800c2e4:	0800c35d 	.word	0x0800c35d
 800c2e8:	0800c345 	.word	0x0800c345
 800c2ec:	0800c35d 	.word	0x0800c35d
 800c2f0:	0800c35d 	.word	0x0800c35d
 800c2f4:	0800c35d 	.word	0x0800c35d
 800c2f8:	0800c35d 	.word	0x0800c35d
 800c2fc:	0800c35d 	.word	0x0800c35d
 800c300:	0800c35d 	.word	0x0800c35d
 800c304:	0800c35d 	.word	0x0800c35d
 800c308:	0800c34d 	.word	0x0800c34d
 800c30c:	0800c35d 	.word	0x0800c35d
 800c310:	0800c35d 	.word	0x0800c35d
 800c314:	0800c35d 	.word	0x0800c35d
 800c318:	0800c35d 	.word	0x0800c35d
 800c31c:	0800c35d 	.word	0x0800c35d
 800c320:	0800c35d 	.word	0x0800c35d
 800c324:	0800c35d 	.word	0x0800c35d
 800c328:	0800c355 	.word	0x0800c355
 800c32c:	2301      	movs	r3, #1
 800c32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c332:	e050      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c334:	2304      	movs	r3, #4
 800c336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33a:	e04c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c33c:	2308      	movs	r3, #8
 800c33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c342:	e048      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c344:	2310      	movs	r3, #16
 800c346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34a:	e044      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c34c:	2320      	movs	r3, #32
 800c34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c352:	e040      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c354:	2340      	movs	r3, #64	; 0x40
 800c356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c35a:	e03c      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c35c:	2380      	movs	r3, #128	; 0x80
 800c35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c362:	e038      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a71      	ldr	r2, [pc, #452]	; (800c530 <UART_SetConfig+0x904>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d130      	bne.n	800c3d0 <UART_SetConfig+0x7a4>
 800c36e:	4b6f      	ldr	r3, [pc, #444]	; (800c52c <UART_SetConfig+0x900>)
 800c370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c372:	f003 0307 	and.w	r3, r3, #7
 800c376:	2b05      	cmp	r3, #5
 800c378:	d826      	bhi.n	800c3c8 <UART_SetConfig+0x79c>
 800c37a:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <UART_SetConfig+0x754>)
 800c37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c380:	0800c399 	.word	0x0800c399
 800c384:	0800c3a1 	.word	0x0800c3a1
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c3b1 	.word	0x0800c3b1
 800c390:	0800c3b9 	.word	0x0800c3b9
 800c394:	0800c3c1 	.word	0x0800c3c1
 800c398:	2302      	movs	r3, #2
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	e01a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a6:	e016      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ae:	e012      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b6:	e00e      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3b8:	2320      	movs	r3, #32
 800c3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3be:	e00a      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3c0:	2340      	movs	r3, #64	; 0x40
 800c3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3c6:	e006      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3c8:	2380      	movs	r3, #128	; 0x80
 800c3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ce:	e002      	b.n	800c3d6 <UART_SetConfig+0x7aa>
 800c3d0:	2380      	movs	r3, #128	; 0x80
 800c3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a55      	ldr	r2, [pc, #340]	; (800c530 <UART_SetConfig+0x904>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	f040 80f0 	bne.w	800c5c2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	dc46      	bgt.n	800c478 <UART_SetConfig+0x84c>
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	db75      	blt.n	800c4da <UART_SetConfig+0x8ae>
 800c3ee:	3b02      	subs	r3, #2
 800c3f0:	2b1e      	cmp	r3, #30
 800c3f2:	d872      	bhi.n	800c4da <UART_SetConfig+0x8ae>
 800c3f4:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <UART_SetConfig+0x7d0>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c47f 	.word	0x0800c47f
 800c400:	0800c4db 	.word	0x0800c4db
 800c404:	0800c487 	.word	0x0800c487
 800c408:	0800c4db 	.word	0x0800c4db
 800c40c:	0800c4db 	.word	0x0800c4db
 800c410:	0800c4db 	.word	0x0800c4db
 800c414:	0800c497 	.word	0x0800c497
 800c418:	0800c4db 	.word	0x0800c4db
 800c41c:	0800c4db 	.word	0x0800c4db
 800c420:	0800c4db 	.word	0x0800c4db
 800c424:	0800c4db 	.word	0x0800c4db
 800c428:	0800c4db 	.word	0x0800c4db
 800c42c:	0800c4db 	.word	0x0800c4db
 800c430:	0800c4db 	.word	0x0800c4db
 800c434:	0800c4a7 	.word	0x0800c4a7
 800c438:	0800c4db 	.word	0x0800c4db
 800c43c:	0800c4db 	.word	0x0800c4db
 800c440:	0800c4db 	.word	0x0800c4db
 800c444:	0800c4db 	.word	0x0800c4db
 800c448:	0800c4db 	.word	0x0800c4db
 800c44c:	0800c4db 	.word	0x0800c4db
 800c450:	0800c4db 	.word	0x0800c4db
 800c454:	0800c4db 	.word	0x0800c4db
 800c458:	0800c4db 	.word	0x0800c4db
 800c45c:	0800c4db 	.word	0x0800c4db
 800c460:	0800c4db 	.word	0x0800c4db
 800c464:	0800c4db 	.word	0x0800c4db
 800c468:	0800c4db 	.word	0x0800c4db
 800c46c:	0800c4db 	.word	0x0800c4db
 800c470:	0800c4db 	.word	0x0800c4db
 800c474:	0800c4cd 	.word	0x0800c4cd
 800c478:	2b40      	cmp	r3, #64	; 0x40
 800c47a:	d02a      	beq.n	800c4d2 <UART_SetConfig+0x8a6>
 800c47c:	e02d      	b.n	800c4da <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c47e:	f7fd f83d 	bl	80094fc <HAL_RCCEx_GetD3PCLK1Freq>
 800c482:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c484:	e02f      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c486:	f107 0314 	add.w	r3, r7, #20
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fd f84c 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c494:	e027      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c496:	f107 0308 	add.w	r3, r7, #8
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fd f998 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4a4:	e01f      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4a6:	4b21      	ldr	r3, [pc, #132]	; (800c52c <UART_SetConfig+0x900>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d009      	beq.n	800c4c6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4b2:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <UART_SetConfig+0x900>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	08db      	lsrs	r3, r3, #3
 800c4b8:	f003 0303 	and.w	r3, r3, #3
 800c4bc:	4a1d      	ldr	r2, [pc, #116]	; (800c534 <UART_SetConfig+0x908>)
 800c4be:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4c4:	e00f      	b.n	800c4e6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c4c6:	4b1b      	ldr	r3, [pc, #108]	; (800c534 <UART_SetConfig+0x908>)
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4ca:	e00c      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4cc:	4b1a      	ldr	r3, [pc, #104]	; (800c538 <UART_SetConfig+0x90c>)
 800c4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4d0:	e009      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4d8:	e005      	b.n	800c4e6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c4e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 81e6 	beq.w	800c8ba <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f2:	4a12      	ldr	r2, [pc, #72]	; (800c53c <UART_SetConfig+0x910>)
 800c4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c500:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	4413      	add	r3, r2
 800c50c:	6a3a      	ldr	r2, [r7, #32]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d305      	bcc.n	800c51e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d910      	bls.n	800c540 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c524:	e1c9      	b.n	800c8ba <UART_SetConfig+0xc8e>
 800c526:	bf00      	nop
 800c528:	40011c00 	.word	0x40011c00
 800c52c:	58024400 	.word	0x58024400
 800c530:	58000c00 	.word	0x58000c00
 800c534:	03d09000 	.word	0x03d09000
 800c538:	003d0900 	.word	0x003d0900
 800c53c:	08010328 	.word	0x08010328
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	4618      	mov	r0, r3
 800c544:	f04f 0100 	mov.w	r1, #0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	4ac1      	ldr	r2, [pc, #772]	; (800c854 <UART_SetConfig+0xc28>)
 800c54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c552:	b29a      	uxth	r2, r3
 800c554:	f04f 0300 	mov.w	r3, #0
 800c558:	f7f3 ff32 	bl	80003c0 <__aeabi_uldivmod>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4610      	mov	r0, r2
 800c562:	4619      	mov	r1, r3
 800c564:	f04f 0200 	mov.w	r2, #0
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	020b      	lsls	r3, r1, #8
 800c56e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c572:	0202      	lsls	r2, r0, #8
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	6849      	ldr	r1, [r1, #4]
 800c578:	0849      	lsrs	r1, r1, #1
 800c57a:	4608      	mov	r0, r1
 800c57c:	f04f 0100 	mov.w	r1, #0
 800c580:	1814      	adds	r4, r2, r0
 800c582:	eb43 0501 	adc.w	r5, r3, r1
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	461a      	mov	r2, r3
 800c58c:	f04f 0300 	mov.w	r3, #0
 800c590:	4620      	mov	r0, r4
 800c592:	4629      	mov	r1, r5
 800c594:	f7f3 ff14 	bl	80003c0 <__aeabi_uldivmod>
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4613      	mov	r3, r2
 800c59e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5a6:	d308      	bcc.n	800c5ba <UART_SetConfig+0x98e>
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ae:	d204      	bcs.n	800c5ba <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b6:	60da      	str	r2, [r3, #12]
 800c5b8:	e17f      	b.n	800c8ba <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c5c0:	e17b      	b.n	800c8ba <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	69db      	ldr	r3, [r3, #28]
 800c5c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ca:	f040 80bd 	bne.w	800c748 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c5ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	dc48      	bgt.n	800c668 <UART_SetConfig+0xa3c>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	db7b      	blt.n	800c6d2 <UART_SetConfig+0xaa6>
 800c5da:	2b20      	cmp	r3, #32
 800c5dc:	d879      	bhi.n	800c6d2 <UART_SetConfig+0xaa6>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <UART_SetConfig+0x9b8>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c66f 	.word	0x0800c66f
 800c5e8:	0800c677 	.word	0x0800c677
 800c5ec:	0800c6d3 	.word	0x0800c6d3
 800c5f0:	0800c6d3 	.word	0x0800c6d3
 800c5f4:	0800c67f 	.word	0x0800c67f
 800c5f8:	0800c6d3 	.word	0x0800c6d3
 800c5fc:	0800c6d3 	.word	0x0800c6d3
 800c600:	0800c6d3 	.word	0x0800c6d3
 800c604:	0800c68f 	.word	0x0800c68f
 800c608:	0800c6d3 	.word	0x0800c6d3
 800c60c:	0800c6d3 	.word	0x0800c6d3
 800c610:	0800c6d3 	.word	0x0800c6d3
 800c614:	0800c6d3 	.word	0x0800c6d3
 800c618:	0800c6d3 	.word	0x0800c6d3
 800c61c:	0800c6d3 	.word	0x0800c6d3
 800c620:	0800c6d3 	.word	0x0800c6d3
 800c624:	0800c69f 	.word	0x0800c69f
 800c628:	0800c6d3 	.word	0x0800c6d3
 800c62c:	0800c6d3 	.word	0x0800c6d3
 800c630:	0800c6d3 	.word	0x0800c6d3
 800c634:	0800c6d3 	.word	0x0800c6d3
 800c638:	0800c6d3 	.word	0x0800c6d3
 800c63c:	0800c6d3 	.word	0x0800c6d3
 800c640:	0800c6d3 	.word	0x0800c6d3
 800c644:	0800c6d3 	.word	0x0800c6d3
 800c648:	0800c6d3 	.word	0x0800c6d3
 800c64c:	0800c6d3 	.word	0x0800c6d3
 800c650:	0800c6d3 	.word	0x0800c6d3
 800c654:	0800c6d3 	.word	0x0800c6d3
 800c658:	0800c6d3 	.word	0x0800c6d3
 800c65c:	0800c6d3 	.word	0x0800c6d3
 800c660:	0800c6d3 	.word	0x0800c6d3
 800c664:	0800c6c5 	.word	0x0800c6c5
 800c668:	2b40      	cmp	r3, #64	; 0x40
 800c66a:	d02e      	beq.n	800c6ca <UART_SetConfig+0xa9e>
 800c66c:	e031      	b.n	800c6d2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c66e:	f7fb fbdf 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 800c672:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c674:	e033      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c676:	f7fb fbf1 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800c67a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c67c:	e02f      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	4618      	mov	r0, r3
 800c684:	f7fc ff50 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c68c:	e027      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68e:	f107 0308 	add.w	r3, r7, #8
 800c692:	4618      	mov	r0, r3
 800c694:	f7fd f89c 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c69c:	e01f      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c69e:	4b6e      	ldr	r3, [pc, #440]	; (800c858 <UART_SetConfig+0xc2c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6aa:	4b6b      	ldr	r3, [pc, #428]	; (800c858 <UART_SetConfig+0xc2c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	08db      	lsrs	r3, r3, #3
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	4a69      	ldr	r2, [pc, #420]	; (800c85c <UART_SetConfig+0xc30>)
 800c6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6bc:	e00f      	b.n	800c6de <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c6be:	4b67      	ldr	r3, [pc, #412]	; (800c85c <UART_SetConfig+0xc30>)
 800c6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6c2:	e00c      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6c4:	4b66      	ldr	r3, [pc, #408]	; (800c860 <UART_SetConfig+0xc34>)
 800c6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6c8:	e009      	b.n	800c6de <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6d0:	e005      	b.n	800c6de <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c6dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 80ea 	beq.w	800c8ba <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	4a5a      	ldr	r2, [pc, #360]	; (800c854 <UART_SetConfig+0xc28>)
 800c6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6f8:	005a      	lsls	r2, r3, #1
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	085b      	lsrs	r3, r3, #1
 800c700:	441a      	add	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	2b0f      	cmp	r3, #15
 800c710:	d916      	bls.n	800c740 <UART_SetConfig+0xb14>
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c718:	d212      	bcs.n	800c740 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	f023 030f 	bic.w	r3, r3, #15
 800c722:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	085b      	lsrs	r3, r3, #1
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	b29a      	uxth	r2, r3
 800c730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c732:	4313      	orrs	r3, r2
 800c734:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c73c:	60da      	str	r2, [r3, #12]
 800c73e:	e0bc      	b.n	800c8ba <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c746:	e0b8      	b.n	800c8ba <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	dc4b      	bgt.n	800c7e8 <UART_SetConfig+0xbbc>
 800c750:	2b00      	cmp	r3, #0
 800c752:	f2c0 8087 	blt.w	800c864 <UART_SetConfig+0xc38>
 800c756:	2b20      	cmp	r3, #32
 800c758:	f200 8084 	bhi.w	800c864 <UART_SetConfig+0xc38>
 800c75c:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <UART_SetConfig+0xb38>)
 800c75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c762:	bf00      	nop
 800c764:	0800c7ef 	.word	0x0800c7ef
 800c768:	0800c7f7 	.word	0x0800c7f7
 800c76c:	0800c865 	.word	0x0800c865
 800c770:	0800c865 	.word	0x0800c865
 800c774:	0800c7ff 	.word	0x0800c7ff
 800c778:	0800c865 	.word	0x0800c865
 800c77c:	0800c865 	.word	0x0800c865
 800c780:	0800c865 	.word	0x0800c865
 800c784:	0800c80f 	.word	0x0800c80f
 800c788:	0800c865 	.word	0x0800c865
 800c78c:	0800c865 	.word	0x0800c865
 800c790:	0800c865 	.word	0x0800c865
 800c794:	0800c865 	.word	0x0800c865
 800c798:	0800c865 	.word	0x0800c865
 800c79c:	0800c865 	.word	0x0800c865
 800c7a0:	0800c865 	.word	0x0800c865
 800c7a4:	0800c81f 	.word	0x0800c81f
 800c7a8:	0800c865 	.word	0x0800c865
 800c7ac:	0800c865 	.word	0x0800c865
 800c7b0:	0800c865 	.word	0x0800c865
 800c7b4:	0800c865 	.word	0x0800c865
 800c7b8:	0800c865 	.word	0x0800c865
 800c7bc:	0800c865 	.word	0x0800c865
 800c7c0:	0800c865 	.word	0x0800c865
 800c7c4:	0800c865 	.word	0x0800c865
 800c7c8:	0800c865 	.word	0x0800c865
 800c7cc:	0800c865 	.word	0x0800c865
 800c7d0:	0800c865 	.word	0x0800c865
 800c7d4:	0800c865 	.word	0x0800c865
 800c7d8:	0800c865 	.word	0x0800c865
 800c7dc:	0800c865 	.word	0x0800c865
 800c7e0:	0800c865 	.word	0x0800c865
 800c7e4:	0800c845 	.word	0x0800c845
 800c7e8:	2b40      	cmp	r3, #64	; 0x40
 800c7ea:	d02e      	beq.n	800c84a <UART_SetConfig+0xc1e>
 800c7ec:	e03a      	b.n	800c864 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7ee:	f7fb fb1f 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 800c7f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7f4:	e03c      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7f6:	f7fb fb31 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800c7fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7fc:	e038      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fe:	f107 0314 	add.w	r3, r7, #20
 800c802:	4618      	mov	r0, r3
 800c804:	f7fc fe90 	bl	8009528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c80c:	e030      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80e:	f107 0308 	add.w	r3, r7, #8
 800c812:	4618      	mov	r0, r3
 800c814:	f7fc ffdc 	bl	80097d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c81c:	e028      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c81e:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <UART_SetConfig+0xc2c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 0320 	and.w	r3, r3, #32
 800c826:	2b00      	cmp	r3, #0
 800c828:	d009      	beq.n	800c83e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c82a:	4b0b      	ldr	r3, [pc, #44]	; (800c858 <UART_SetConfig+0xc2c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	08db      	lsrs	r3, r3, #3
 800c830:	f003 0303 	and.w	r3, r3, #3
 800c834:	4a09      	ldr	r2, [pc, #36]	; (800c85c <UART_SetConfig+0xc30>)
 800c836:	fa22 f303 	lsr.w	r3, r2, r3
 800c83a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c83c:	e018      	b.n	800c870 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c83e:	4b07      	ldr	r3, [pc, #28]	; (800c85c <UART_SetConfig+0xc30>)
 800c840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c842:	e015      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c844:	4b06      	ldr	r3, [pc, #24]	; (800c860 <UART_SetConfig+0xc34>)
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c848:	e012      	b.n	800c870 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c84a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c850:	e00e      	b.n	800c870 <UART_SetConfig+0xc44>
 800c852:	bf00      	nop
 800c854:	08010328 	.word	0x08010328
 800c858:	58024400 	.word	0x58024400
 800c85c:	03d09000 	.word	0x03d09000
 800c860:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c86e:	bf00      	nop
    }

    if (pclk != 0U)
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d021      	beq.n	800c8ba <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	4a1a      	ldr	r2, [pc, #104]	; (800c8e4 <UART_SetConfig+0xcb8>)
 800c87c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c880:	461a      	mov	r2, r3
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	fbb3 f2f2 	udiv	r2, r3, r2
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	085b      	lsrs	r3, r3, #1
 800c88e:	441a      	add	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	fbb2 f3f3 	udiv	r3, r2, r3
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	2b0f      	cmp	r3, #15
 800c89e:	d909      	bls.n	800c8b4 <UART_SetConfig+0xc88>
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a6:	d205      	bcs.n	800c8b4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	60da      	str	r2, [r3, #12]
 800c8b2:	e002      	b.n	800c8ba <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c8d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3738      	adds	r7, #56	; 0x38
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	08010328 	.word	0x08010328

0800c8e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00a      	beq.n	800c912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	430a      	orrs	r2, r1
 800c910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c916:	f003 0302 	and.w	r3, r3, #2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	430a      	orrs	r2, r1
 800c932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	430a      	orrs	r2, r1
 800c954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	f003 0308 	and.w	r3, r3, #8
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00a      	beq.n	800c978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	430a      	orrs	r2, r1
 800c976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97c:	f003 0310 	and.w	r3, r3, #16
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00a      	beq.n	800c99a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	430a      	orrs	r2, r1
 800c998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00a      	beq.n	800c9bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d01a      	beq.n	800c9fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9e6:	d10a      	bne.n	800c9fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	605a      	str	r2, [r3, #4]
  }
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca3c:	f7f6 ff96 	bl	800396c <HAL_GetTick>
 800ca40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b08      	cmp	r3, #8
 800ca4e:	d10e      	bne.n	800ca6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f82f 	bl	800cac2 <UART_WaitOnFlagUntilTimeout>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e025      	b.n	800caba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 0304 	and.w	r3, r3, #4
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	d10e      	bne.n	800ca9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f819 	bl	800cac2 <UART_WaitOnFlagUntilTimeout>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e00f      	b.n	800caba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2220      	movs	r2, #32
 800caa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b09c      	sub	sp, #112	; 0x70
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	603b      	str	r3, [r7, #0]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cad2:	e0a9      	b.n	800cc28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cada:	f000 80a5 	beq.w	800cc28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cade:	f7f6 ff45 	bl	800396c <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800caea:	429a      	cmp	r2, r3
 800caec:	d302      	bcc.n	800caf4 <UART_WaitOnFlagUntilTimeout+0x32>
 800caee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d140      	bne.n	800cb76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb08:	667b      	str	r3, [r7, #100]	; 0x64
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e6      	bne.n	800caf4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	f023 0301 	bic.w	r3, r3, #1
 800cb3c:	663b      	str	r3, [r7, #96]	; 0x60
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb46:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb4e:	e841 2300 	strex	r3, r2, [r1]
 800cb52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e5      	bne.n	800cb26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2220      	movs	r2, #32
 800cb66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e069      	b.n	800cc4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d051      	beq.n	800cc28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb92:	d149      	bne.n	800cc28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbbc:	637b      	str	r3, [r7, #52]	; 0x34
 800cbbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e6      	bne.n	800cb9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	e853 3f00 	ldrex	r3, [r3]
 800cbde:	613b      	str	r3, [r7, #16]
   return(result);
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f023 0301 	bic.w	r3, r3, #1
 800cbe6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbf0:	623a      	str	r2, [r7, #32]
 800cbf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	69f9      	ldr	r1, [r7, #28]
 800cbf6:	6a3a      	ldr	r2, [r7, #32]
 800cbf8:	e841 2300 	strex	r3, r2, [r1]
 800cbfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1e5      	bne.n	800cbd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cc24:	2303      	movs	r3, #3
 800cc26:	e010      	b.n	800cc4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69da      	ldr	r2, [r3, #28]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	4013      	ands	r3, r2
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	bf0c      	ite	eq
 800cc38:	2301      	moveq	r3, #1
 800cc3a:	2300      	movne	r3, #0
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	461a      	mov	r2, r3
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	f43f af46 	beq.w	800cad4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3770      	adds	r7, #112	; 0x70
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b085      	sub	sp, #20
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d101      	bne.n	800cc68 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc64:	2302      	movs	r3, #2
 800cc66:	e027      	b.n	800ccb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2224      	movs	r2, #36	; 0x24
 800cc74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f022 0201 	bic.w	r2, r2, #1
 800cc8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2220      	movs	r2, #32
 800ccaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d101      	bne.n	800ccdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e02d      	b.n	800cd38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2224      	movs	r2, #36	; 0x24
 800cce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0201 	bic.w	r2, r2, #1
 800cd02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	430a      	orrs	r2, r1
 800cd16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f84f 	bl	800cdbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2220      	movs	r2, #32
 800cd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d101      	bne.n	800cd58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e02d      	b.n	800cdb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2224      	movs	r2, #36	; 0x24
 800cd64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0201 	bic.w	r2, r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	430a      	orrs	r2, r1
 800cd92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f811 	bl	800cdbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d108      	bne.n	800cdde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cddc:	e031      	b.n	800ce42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cdde:	2310      	movs	r3, #16
 800cde0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cde2:	2310      	movs	r3, #16
 800cde4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	0e5b      	lsrs	r3, r3, #25
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	f003 0307 	and.w	r3, r3, #7
 800cdf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	0f5b      	lsrs	r3, r3, #29
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	7b3a      	ldrb	r2, [r7, #12]
 800ce0a:	4911      	ldr	r1, [pc, #68]	; (800ce50 <UARTEx_SetNbDataToProcess+0x94>)
 800ce0c:	5c8a      	ldrb	r2, [r1, r2]
 800ce0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce12:	7b3a      	ldrb	r2, [r7, #12]
 800ce14:	490f      	ldr	r1, [pc, #60]	; (800ce54 <UARTEx_SetNbDataToProcess+0x98>)
 800ce16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
 800ce26:	7b7a      	ldrb	r2, [r7, #13]
 800ce28:	4909      	ldr	r1, [pc, #36]	; (800ce50 <UARTEx_SetNbDataToProcess+0x94>)
 800ce2a:	5c8a      	ldrb	r2, [r1, r2]
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce30:	7b7a      	ldrb	r2, [r7, #13]
 800ce32:	4908      	ldr	r1, [pc, #32]	; (800ce54 <UARTEx_SetNbDataToProcess+0x98>)
 800ce34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce42:	bf00      	nop
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	08010340 	.word	0x08010340
 800ce54:	08010348 	.word	0x08010348

0800ce58 <__errno>:
 800ce58:	4b01      	ldr	r3, [pc, #4]	; (800ce60 <__errno+0x8>)
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	24000020 	.word	0x24000020

0800ce64 <__libc_init_array>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4d0d      	ldr	r5, [pc, #52]	; (800ce9c <__libc_init_array+0x38>)
 800ce68:	4c0d      	ldr	r4, [pc, #52]	; (800cea0 <__libc_init_array+0x3c>)
 800ce6a:	1b64      	subs	r4, r4, r5
 800ce6c:	10a4      	asrs	r4, r4, #2
 800ce6e:	2600      	movs	r6, #0
 800ce70:	42a6      	cmp	r6, r4
 800ce72:	d109      	bne.n	800ce88 <__libc_init_array+0x24>
 800ce74:	4d0b      	ldr	r5, [pc, #44]	; (800cea4 <__libc_init_array+0x40>)
 800ce76:	4c0c      	ldr	r4, [pc, #48]	; (800cea8 <__libc_init_array+0x44>)
 800ce78:	f003 fa3c 	bl	80102f4 <_init>
 800ce7c:	1b64      	subs	r4, r4, r5
 800ce7e:	10a4      	asrs	r4, r4, #2
 800ce80:	2600      	movs	r6, #0
 800ce82:	42a6      	cmp	r6, r4
 800ce84:	d105      	bne.n	800ce92 <__libc_init_array+0x2e>
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce8c:	4798      	blx	r3
 800ce8e:	3601      	adds	r6, #1
 800ce90:	e7ee      	b.n	800ce70 <__libc_init_array+0xc>
 800ce92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce96:	4798      	blx	r3
 800ce98:	3601      	adds	r6, #1
 800ce9a:	e7f2      	b.n	800ce82 <__libc_init_array+0x1e>
 800ce9c:	08010918 	.word	0x08010918
 800cea0:	08010918 	.word	0x08010918
 800cea4:	08010918 	.word	0x08010918
 800cea8:	0801091c 	.word	0x0801091c

0800ceac <memcpy>:
 800ceac:	440a      	add	r2, r1
 800ceae:	4291      	cmp	r1, r2
 800ceb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceb4:	d100      	bne.n	800ceb8 <memcpy+0xc>
 800ceb6:	4770      	bx	lr
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cec2:	4291      	cmp	r1, r2
 800cec4:	d1f9      	bne.n	800ceba <memcpy+0xe>
 800cec6:	bd10      	pop	{r4, pc}

0800cec8 <memset>:
 800cec8:	4402      	add	r2, r0
 800ceca:	4603      	mov	r3, r0
 800cecc:	4293      	cmp	r3, r2
 800cece:	d100      	bne.n	800ced2 <memset+0xa>
 800ced0:	4770      	bx	lr
 800ced2:	f803 1b01 	strb.w	r1, [r3], #1
 800ced6:	e7f9      	b.n	800cecc <memset+0x4>

0800ced8 <__cvt>:
 800ced8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceda:	ed2d 8b02 	vpush	{d8}
 800cede:	eeb0 8b40 	vmov.f64	d8, d0
 800cee2:	b085      	sub	sp, #20
 800cee4:	4617      	mov	r7, r2
 800cee6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cee8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ceea:	ee18 2a90 	vmov	r2, s17
 800ceee:	f025 0520 	bic.w	r5, r5, #32
 800cef2:	2a00      	cmp	r2, #0
 800cef4:	bfb6      	itet	lt
 800cef6:	222d      	movlt	r2, #45	; 0x2d
 800cef8:	2200      	movge	r2, #0
 800cefa:	eeb1 8b40 	vneglt.f64	d8, d0
 800cefe:	2d46      	cmp	r5, #70	; 0x46
 800cf00:	460c      	mov	r4, r1
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	d004      	beq.n	800cf10 <__cvt+0x38>
 800cf06:	2d45      	cmp	r5, #69	; 0x45
 800cf08:	d100      	bne.n	800cf0c <__cvt+0x34>
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	2102      	movs	r1, #2
 800cf0e:	e000      	b.n	800cf12 <__cvt+0x3a>
 800cf10:	2103      	movs	r1, #3
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	ab02      	add	r3, sp, #8
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	4633      	mov	r3, r6
 800cf1e:	eeb0 0b48 	vmov.f64	d0, d8
 800cf22:	f000 fca9 	bl	800d878 <_dtoa_r>
 800cf26:	2d47      	cmp	r5, #71	; 0x47
 800cf28:	d109      	bne.n	800cf3e <__cvt+0x66>
 800cf2a:	07fb      	lsls	r3, r7, #31
 800cf2c:	d407      	bmi.n	800cf3e <__cvt+0x66>
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf32:	1a1b      	subs	r3, r3, r0
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	b005      	add	sp, #20
 800cf38:	ecbd 8b02 	vpop	{d8}
 800cf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3e:	2d46      	cmp	r5, #70	; 0x46
 800cf40:	eb00 0204 	add.w	r2, r0, r4
 800cf44:	d10c      	bne.n	800cf60 <__cvt+0x88>
 800cf46:	7803      	ldrb	r3, [r0, #0]
 800cf48:	2b30      	cmp	r3, #48	; 0x30
 800cf4a:	d107      	bne.n	800cf5c <__cvt+0x84>
 800cf4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf54:	bf1c      	itt	ne
 800cf56:	f1c4 0401 	rsbne	r4, r4, #1
 800cf5a:	6034      	strne	r4, [r6, #0]
 800cf5c:	6833      	ldr	r3, [r6, #0]
 800cf5e:	441a      	add	r2, r3
 800cf60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	bf08      	it	eq
 800cf6a:	9203      	streq	r2, [sp, #12]
 800cf6c:	2130      	movs	r1, #48	; 0x30
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d2dc      	bcs.n	800cf2e <__cvt+0x56>
 800cf74:	1c5c      	adds	r4, r3, #1
 800cf76:	9403      	str	r4, [sp, #12]
 800cf78:	7019      	strb	r1, [r3, #0]
 800cf7a:	e7f8      	b.n	800cf6e <__cvt+0x96>

0800cf7c <__exponent>:
 800cf7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2900      	cmp	r1, #0
 800cf82:	bfb8      	it	lt
 800cf84:	4249      	neglt	r1, r1
 800cf86:	f803 2b02 	strb.w	r2, [r3], #2
 800cf8a:	bfb4      	ite	lt
 800cf8c:	222d      	movlt	r2, #45	; 0x2d
 800cf8e:	222b      	movge	r2, #43	; 0x2b
 800cf90:	2909      	cmp	r1, #9
 800cf92:	7042      	strb	r2, [r0, #1]
 800cf94:	dd2a      	ble.n	800cfec <__exponent+0x70>
 800cf96:	f10d 0407 	add.w	r4, sp, #7
 800cf9a:	46a4      	mov	ip, r4
 800cf9c:	270a      	movs	r7, #10
 800cf9e:	46a6      	mov	lr, r4
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cfa6:	fb07 1516 	mls	r5, r7, r6, r1
 800cfaa:	3530      	adds	r5, #48	; 0x30
 800cfac:	2a63      	cmp	r2, #99	; 0x63
 800cfae:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	dcf1      	bgt.n	800cf9e <__exponent+0x22>
 800cfba:	3130      	adds	r1, #48	; 0x30
 800cfbc:	f1ae 0502 	sub.w	r5, lr, #2
 800cfc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cfc4:	1c44      	adds	r4, r0, #1
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	4561      	cmp	r1, ip
 800cfca:	d30a      	bcc.n	800cfe2 <__exponent+0x66>
 800cfcc:	f10d 0209 	add.w	r2, sp, #9
 800cfd0:	eba2 020e 	sub.w	r2, r2, lr
 800cfd4:	4565      	cmp	r5, ip
 800cfd6:	bf88      	it	hi
 800cfd8:	2200      	movhi	r2, #0
 800cfda:	4413      	add	r3, r2
 800cfdc:	1a18      	subs	r0, r3, r0
 800cfde:	b003      	add	sp, #12
 800cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfe6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfea:	e7ed      	b.n	800cfc8 <__exponent+0x4c>
 800cfec:	2330      	movs	r3, #48	; 0x30
 800cfee:	3130      	adds	r1, #48	; 0x30
 800cff0:	7083      	strb	r3, [r0, #2]
 800cff2:	70c1      	strb	r1, [r0, #3]
 800cff4:	1d03      	adds	r3, r0, #4
 800cff6:	e7f1      	b.n	800cfdc <__exponent+0x60>

0800cff8 <_printf_float>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	b08b      	sub	sp, #44	; 0x2c
 800cffe:	460c      	mov	r4, r1
 800d000:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d004:	4616      	mov	r6, r2
 800d006:	461f      	mov	r7, r3
 800d008:	4605      	mov	r5, r0
 800d00a:	f001 f9b7 	bl	800e37c <_localeconv_r>
 800d00e:	f8d0 b000 	ldr.w	fp, [r0]
 800d012:	4658      	mov	r0, fp
 800d014:	f7f3 f97c 	bl	8000310 <strlen>
 800d018:	2300      	movs	r3, #0
 800d01a:	9308      	str	r3, [sp, #32]
 800d01c:	f8d8 3000 	ldr.w	r3, [r8]
 800d020:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d024:	6822      	ldr	r2, [r4, #0]
 800d026:	3307      	adds	r3, #7
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	f103 0108 	add.w	r1, r3, #8
 800d030:	f8c8 1000 	str.w	r1, [r8]
 800d034:	4682      	mov	sl, r0
 800d036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d03a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d03e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d2a0 <_printf_float+0x2a8>
 800d042:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d046:	eeb0 6bc0 	vabs.f64	d6, d0
 800d04a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d052:	dd24      	ble.n	800d09e <_printf_float+0xa6>
 800d054:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05c:	d502      	bpl.n	800d064 <_printf_float+0x6c>
 800d05e:	232d      	movs	r3, #45	; 0x2d
 800d060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d064:	4b90      	ldr	r3, [pc, #576]	; (800d2a8 <_printf_float+0x2b0>)
 800d066:	4891      	ldr	r0, [pc, #580]	; (800d2ac <_printf_float+0x2b4>)
 800d068:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d06c:	bf94      	ite	ls
 800d06e:	4698      	movls	r8, r3
 800d070:	4680      	movhi	r8, r0
 800d072:	2303      	movs	r3, #3
 800d074:	6123      	str	r3, [r4, #16]
 800d076:	f022 0204 	bic.w	r2, r2, #4
 800d07a:	2300      	movs	r3, #0
 800d07c:	6022      	str	r2, [r4, #0]
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	9700      	str	r7, [sp, #0]
 800d082:	4633      	mov	r3, r6
 800d084:	aa09      	add	r2, sp, #36	; 0x24
 800d086:	4621      	mov	r1, r4
 800d088:	4628      	mov	r0, r5
 800d08a:	f000 f9d3 	bl	800d434 <_printf_common>
 800d08e:	3001      	adds	r0, #1
 800d090:	f040 808a 	bne.w	800d1a8 <_printf_float+0x1b0>
 800d094:	f04f 30ff 	mov.w	r0, #4294967295
 800d098:	b00b      	add	sp, #44	; 0x2c
 800d09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a6:	d709      	bvc.n	800d0bc <_printf_float+0xc4>
 800d0a8:	ee10 3a90 	vmov	r3, s1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bfbc      	itt	lt
 800d0b0:	232d      	movlt	r3, #45	; 0x2d
 800d0b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0b6:	487e      	ldr	r0, [pc, #504]	; (800d2b0 <_printf_float+0x2b8>)
 800d0b8:	4b7e      	ldr	r3, [pc, #504]	; (800d2b4 <_printf_float+0x2bc>)
 800d0ba:	e7d5      	b.n	800d068 <_printf_float+0x70>
 800d0bc:	6863      	ldr	r3, [r4, #4]
 800d0be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d0c2:	9104      	str	r1, [sp, #16]
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	d13c      	bne.n	800d142 <_printf_float+0x14a>
 800d0c8:	2306      	movs	r3, #6
 800d0ca:	6063      	str	r3, [r4, #4]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	9303      	str	r3, [sp, #12]
 800d0d0:	ab08      	add	r3, sp, #32
 800d0d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d0d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0da:	ab07      	add	r3, sp, #28
 800d0dc:	6861      	ldr	r1, [r4, #4]
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	6022      	str	r2, [r4, #0]
 800d0e2:	f10d 031b 	add.w	r3, sp, #27
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f7ff fef6 	bl	800ced8 <__cvt>
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	9907      	ldr	r1, [sp, #28]
 800d0f0:	2b47      	cmp	r3, #71	; 0x47
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	d108      	bne.n	800d108 <_printf_float+0x110>
 800d0f6:	1cc8      	adds	r0, r1, #3
 800d0f8:	db02      	blt.n	800d100 <_printf_float+0x108>
 800d0fa:	6863      	ldr	r3, [r4, #4]
 800d0fc:	4299      	cmp	r1, r3
 800d0fe:	dd41      	ble.n	800d184 <_printf_float+0x18c>
 800d100:	f1a9 0902 	sub.w	r9, r9, #2
 800d104:	fa5f f989 	uxtb.w	r9, r9
 800d108:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d10c:	d820      	bhi.n	800d150 <_printf_float+0x158>
 800d10e:	3901      	subs	r1, #1
 800d110:	464a      	mov	r2, r9
 800d112:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d116:	9107      	str	r1, [sp, #28]
 800d118:	f7ff ff30 	bl	800cf7c <__exponent>
 800d11c:	9a08      	ldr	r2, [sp, #32]
 800d11e:	9004      	str	r0, [sp, #16]
 800d120:	1813      	adds	r3, r2, r0
 800d122:	2a01      	cmp	r2, #1
 800d124:	6123      	str	r3, [r4, #16]
 800d126:	dc02      	bgt.n	800d12e <_printf_float+0x136>
 800d128:	6822      	ldr	r2, [r4, #0]
 800d12a:	07d2      	lsls	r2, r2, #31
 800d12c:	d501      	bpl.n	800d132 <_printf_float+0x13a>
 800d12e:	3301      	adds	r3, #1
 800d130:	6123      	str	r3, [r4, #16]
 800d132:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0a2      	beq.n	800d080 <_printf_float+0x88>
 800d13a:	232d      	movs	r3, #45	; 0x2d
 800d13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d140:	e79e      	b.n	800d080 <_printf_float+0x88>
 800d142:	9904      	ldr	r1, [sp, #16]
 800d144:	2947      	cmp	r1, #71	; 0x47
 800d146:	d1c1      	bne.n	800d0cc <_printf_float+0xd4>
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1bf      	bne.n	800d0cc <_printf_float+0xd4>
 800d14c:	2301      	movs	r3, #1
 800d14e:	e7bc      	b.n	800d0ca <_printf_float+0xd2>
 800d150:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d154:	d118      	bne.n	800d188 <_printf_float+0x190>
 800d156:	2900      	cmp	r1, #0
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	dd0b      	ble.n	800d174 <_printf_float+0x17c>
 800d15c:	6121      	str	r1, [r4, #16]
 800d15e:	b913      	cbnz	r3, 800d166 <_printf_float+0x16e>
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	07d0      	lsls	r0, r2, #31
 800d164:	d502      	bpl.n	800d16c <_printf_float+0x174>
 800d166:	3301      	adds	r3, #1
 800d168:	440b      	add	r3, r1
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	2300      	movs	r3, #0
 800d16e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	e7de      	b.n	800d132 <_printf_float+0x13a>
 800d174:	b913      	cbnz	r3, 800d17c <_printf_float+0x184>
 800d176:	6822      	ldr	r2, [r4, #0]
 800d178:	07d2      	lsls	r2, r2, #31
 800d17a:	d501      	bpl.n	800d180 <_printf_float+0x188>
 800d17c:	3302      	adds	r3, #2
 800d17e:	e7f4      	b.n	800d16a <_printf_float+0x172>
 800d180:	2301      	movs	r3, #1
 800d182:	e7f2      	b.n	800d16a <_printf_float+0x172>
 800d184:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d188:	9b08      	ldr	r3, [sp, #32]
 800d18a:	4299      	cmp	r1, r3
 800d18c:	db05      	blt.n	800d19a <_printf_float+0x1a2>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	6121      	str	r1, [r4, #16]
 800d192:	07d8      	lsls	r0, r3, #31
 800d194:	d5ea      	bpl.n	800d16c <_printf_float+0x174>
 800d196:	1c4b      	adds	r3, r1, #1
 800d198:	e7e7      	b.n	800d16a <_printf_float+0x172>
 800d19a:	2900      	cmp	r1, #0
 800d19c:	bfd4      	ite	le
 800d19e:	f1c1 0202 	rsble	r2, r1, #2
 800d1a2:	2201      	movgt	r2, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	e7e0      	b.n	800d16a <_printf_float+0x172>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	055a      	lsls	r2, r3, #21
 800d1ac:	d407      	bmi.n	800d1be <_printf_float+0x1c6>
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	47b8      	blx	r7
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	d12a      	bne.n	800d212 <_printf_float+0x21a>
 800d1bc:	e76a      	b.n	800d094 <_printf_float+0x9c>
 800d1be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d1c2:	f240 80e2 	bls.w	800d38a <_printf_float+0x392>
 800d1c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d1ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d2:	d133      	bne.n	800d23c <_printf_float+0x244>
 800d1d4:	4a38      	ldr	r2, [pc, #224]	; (800d2b8 <_printf_float+0x2c0>)
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b8      	blx	r7
 800d1de:	3001      	adds	r0, #1
 800d1e0:	f43f af58 	beq.w	800d094 <_printf_float+0x9c>
 800d1e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	db02      	blt.n	800d1f2 <_printf_float+0x1fa>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	07d8      	lsls	r0, r3, #31
 800d1f0:	d50f      	bpl.n	800d212 <_printf_float+0x21a>
 800d1f2:	4653      	mov	r3, sl
 800d1f4:	465a      	mov	r2, fp
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b8      	blx	r7
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f43f af49 	beq.w	800d094 <_printf_float+0x9c>
 800d202:	f04f 0800 	mov.w	r8, #0
 800d206:	f104 091a 	add.w	r9, r4, #26
 800d20a:	9b08      	ldr	r3, [sp, #32]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4543      	cmp	r3, r8
 800d210:	dc09      	bgt.n	800d226 <_printf_float+0x22e>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	079b      	lsls	r3, r3, #30
 800d216:	f100 8108 	bmi.w	800d42a <_printf_float+0x432>
 800d21a:	68e0      	ldr	r0, [r4, #12]
 800d21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d21e:	4298      	cmp	r0, r3
 800d220:	bfb8      	it	lt
 800d222:	4618      	movlt	r0, r3
 800d224:	e738      	b.n	800d098 <_printf_float+0xa0>
 800d226:	2301      	movs	r3, #1
 800d228:	464a      	mov	r2, r9
 800d22a:	4631      	mov	r1, r6
 800d22c:	4628      	mov	r0, r5
 800d22e:	47b8      	blx	r7
 800d230:	3001      	adds	r0, #1
 800d232:	f43f af2f 	beq.w	800d094 <_printf_float+0x9c>
 800d236:	f108 0801 	add.w	r8, r8, #1
 800d23a:	e7e6      	b.n	800d20a <_printf_float+0x212>
 800d23c:	9b07      	ldr	r3, [sp, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dc3c      	bgt.n	800d2bc <_printf_float+0x2c4>
 800d242:	4a1d      	ldr	r2, [pc, #116]	; (800d2b8 <_printf_float+0x2c0>)
 800d244:	2301      	movs	r3, #1
 800d246:	4631      	mov	r1, r6
 800d248:	4628      	mov	r0, r5
 800d24a:	47b8      	blx	r7
 800d24c:	3001      	adds	r0, #1
 800d24e:	f43f af21 	beq.w	800d094 <_printf_float+0x9c>
 800d252:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d256:	4313      	orrs	r3, r2
 800d258:	d102      	bne.n	800d260 <_printf_float+0x268>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	07d9      	lsls	r1, r3, #31
 800d25e:	d5d8      	bpl.n	800d212 <_printf_float+0x21a>
 800d260:	4653      	mov	r3, sl
 800d262:	465a      	mov	r2, fp
 800d264:	4631      	mov	r1, r6
 800d266:	4628      	mov	r0, r5
 800d268:	47b8      	blx	r7
 800d26a:	3001      	adds	r0, #1
 800d26c:	f43f af12 	beq.w	800d094 <_printf_float+0x9c>
 800d270:	f04f 0900 	mov.w	r9, #0
 800d274:	f104 0a1a 	add.w	sl, r4, #26
 800d278:	9b07      	ldr	r3, [sp, #28]
 800d27a:	425b      	negs	r3, r3
 800d27c:	454b      	cmp	r3, r9
 800d27e:	dc01      	bgt.n	800d284 <_printf_float+0x28c>
 800d280:	9b08      	ldr	r3, [sp, #32]
 800d282:	e795      	b.n	800d1b0 <_printf_float+0x1b8>
 800d284:	2301      	movs	r3, #1
 800d286:	4652      	mov	r2, sl
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f af00 	beq.w	800d094 <_printf_float+0x9c>
 800d294:	f109 0901 	add.w	r9, r9, #1
 800d298:	e7ee      	b.n	800d278 <_printf_float+0x280>
 800d29a:	bf00      	nop
 800d29c:	f3af 8000 	nop.w
 800d2a0:	ffffffff 	.word	0xffffffff
 800d2a4:	7fefffff 	.word	0x7fefffff
 800d2a8:	08010354 	.word	0x08010354
 800d2ac:	08010358 	.word	0x08010358
 800d2b0:	08010360 	.word	0x08010360
 800d2b4:	0801035c 	.word	0x0801035c
 800d2b8:	08010364 	.word	0x08010364
 800d2bc:	9a08      	ldr	r2, [sp, #32]
 800d2be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	bfa8      	it	ge
 800d2c4:	461a      	movge	r2, r3
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	4691      	mov	r9, r2
 800d2ca:	dc38      	bgt.n	800d33e <_printf_float+0x346>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9305      	str	r3, [sp, #20]
 800d2d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2d4:	f104 021a 	add.w	r2, r4, #26
 800d2d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2da:	9905      	ldr	r1, [sp, #20]
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	eba3 0309 	sub.w	r3, r3, r9
 800d2e2:	428b      	cmp	r3, r1
 800d2e4:	dc33      	bgt.n	800d34e <_printf_float+0x356>
 800d2e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	db3c      	blt.n	800d368 <_printf_float+0x370>
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	07da      	lsls	r2, r3, #31
 800d2f2:	d439      	bmi.n	800d368 <_printf_float+0x370>
 800d2f4:	9a08      	ldr	r2, [sp, #32]
 800d2f6:	9b04      	ldr	r3, [sp, #16]
 800d2f8:	9907      	ldr	r1, [sp, #28]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	eba2 0901 	sub.w	r9, r2, r1
 800d300:	4599      	cmp	r9, r3
 800d302:	bfa8      	it	ge
 800d304:	4699      	movge	r9, r3
 800d306:	f1b9 0f00 	cmp.w	r9, #0
 800d30a:	dc35      	bgt.n	800d378 <_printf_float+0x380>
 800d30c:	f04f 0800 	mov.w	r8, #0
 800d310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d314:	f104 0a1a 	add.w	sl, r4, #26
 800d318:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d31c:	1a9b      	subs	r3, r3, r2
 800d31e:	eba3 0309 	sub.w	r3, r3, r9
 800d322:	4543      	cmp	r3, r8
 800d324:	f77f af75 	ble.w	800d212 <_printf_float+0x21a>
 800d328:	2301      	movs	r3, #1
 800d32a:	4652      	mov	r2, sl
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	f43f aeae 	beq.w	800d094 <_printf_float+0x9c>
 800d338:	f108 0801 	add.w	r8, r8, #1
 800d33c:	e7ec      	b.n	800d318 <_printf_float+0x320>
 800d33e:	4613      	mov	r3, r2
 800d340:	4631      	mov	r1, r6
 800d342:	4642      	mov	r2, r8
 800d344:	4628      	mov	r0, r5
 800d346:	47b8      	blx	r7
 800d348:	3001      	adds	r0, #1
 800d34a:	d1bf      	bne.n	800d2cc <_printf_float+0x2d4>
 800d34c:	e6a2      	b.n	800d094 <_printf_float+0x9c>
 800d34e:	2301      	movs	r3, #1
 800d350:	4631      	mov	r1, r6
 800d352:	4628      	mov	r0, r5
 800d354:	9204      	str	r2, [sp, #16]
 800d356:	47b8      	blx	r7
 800d358:	3001      	adds	r0, #1
 800d35a:	f43f ae9b 	beq.w	800d094 <_printf_float+0x9c>
 800d35e:	9b05      	ldr	r3, [sp, #20]
 800d360:	9a04      	ldr	r2, [sp, #16]
 800d362:	3301      	adds	r3, #1
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	e7b7      	b.n	800d2d8 <_printf_float+0x2e0>
 800d368:	4653      	mov	r3, sl
 800d36a:	465a      	mov	r2, fp
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	d1be      	bne.n	800d2f4 <_printf_float+0x2fc>
 800d376:	e68d      	b.n	800d094 <_printf_float+0x9c>
 800d378:	9a04      	ldr	r2, [sp, #16]
 800d37a:	464b      	mov	r3, r9
 800d37c:	4442      	add	r2, r8
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	d1c1      	bne.n	800d30c <_printf_float+0x314>
 800d388:	e684      	b.n	800d094 <_printf_float+0x9c>
 800d38a:	9a08      	ldr	r2, [sp, #32]
 800d38c:	2a01      	cmp	r2, #1
 800d38e:	dc01      	bgt.n	800d394 <_printf_float+0x39c>
 800d390:	07db      	lsls	r3, r3, #31
 800d392:	d537      	bpl.n	800d404 <_printf_float+0x40c>
 800d394:	2301      	movs	r3, #1
 800d396:	4642      	mov	r2, r8
 800d398:	4631      	mov	r1, r6
 800d39a:	4628      	mov	r0, r5
 800d39c:	47b8      	blx	r7
 800d39e:	3001      	adds	r0, #1
 800d3a0:	f43f ae78 	beq.w	800d094 <_printf_float+0x9c>
 800d3a4:	4653      	mov	r3, sl
 800d3a6:	465a      	mov	r2, fp
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	47b8      	blx	r7
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	f43f ae70 	beq.w	800d094 <_printf_float+0x9c>
 800d3b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d3b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c0:	d01b      	beq.n	800d3fa <_printf_float+0x402>
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	f108 0201 	add.w	r2, r8, #1
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	47b8      	blx	r7
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d10e      	bne.n	800d3f2 <_printf_float+0x3fa>
 800d3d4:	e65e      	b.n	800d094 <_printf_float+0x9c>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	464a      	mov	r2, r9
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4628      	mov	r0, r5
 800d3de:	47b8      	blx	r7
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	f43f ae57 	beq.w	800d094 <_printf_float+0x9c>
 800d3e6:	f108 0801 	add.w	r8, r8, #1
 800d3ea:	9b08      	ldr	r3, [sp, #32]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	4543      	cmp	r3, r8
 800d3f0:	dcf1      	bgt.n	800d3d6 <_printf_float+0x3de>
 800d3f2:	9b04      	ldr	r3, [sp, #16]
 800d3f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3f8:	e6db      	b.n	800d1b2 <_printf_float+0x1ba>
 800d3fa:	f04f 0800 	mov.w	r8, #0
 800d3fe:	f104 091a 	add.w	r9, r4, #26
 800d402:	e7f2      	b.n	800d3ea <_printf_float+0x3f2>
 800d404:	2301      	movs	r3, #1
 800d406:	4642      	mov	r2, r8
 800d408:	e7df      	b.n	800d3ca <_printf_float+0x3d2>
 800d40a:	2301      	movs	r3, #1
 800d40c:	464a      	mov	r2, r9
 800d40e:	4631      	mov	r1, r6
 800d410:	4628      	mov	r0, r5
 800d412:	47b8      	blx	r7
 800d414:	3001      	adds	r0, #1
 800d416:	f43f ae3d 	beq.w	800d094 <_printf_float+0x9c>
 800d41a:	f108 0801 	add.w	r8, r8, #1
 800d41e:	68e3      	ldr	r3, [r4, #12]
 800d420:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d422:	1a5b      	subs	r3, r3, r1
 800d424:	4543      	cmp	r3, r8
 800d426:	dcf0      	bgt.n	800d40a <_printf_float+0x412>
 800d428:	e6f7      	b.n	800d21a <_printf_float+0x222>
 800d42a:	f04f 0800 	mov.w	r8, #0
 800d42e:	f104 0919 	add.w	r9, r4, #25
 800d432:	e7f4      	b.n	800d41e <_printf_float+0x426>

0800d434 <_printf_common>:
 800d434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	4616      	mov	r6, r2
 800d43a:	4699      	mov	r9, r3
 800d43c:	688a      	ldr	r2, [r1, #8]
 800d43e:	690b      	ldr	r3, [r1, #16]
 800d440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d444:	4293      	cmp	r3, r2
 800d446:	bfb8      	it	lt
 800d448:	4613      	movlt	r3, r2
 800d44a:	6033      	str	r3, [r6, #0]
 800d44c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d450:	4607      	mov	r7, r0
 800d452:	460c      	mov	r4, r1
 800d454:	b10a      	cbz	r2, 800d45a <_printf_common+0x26>
 800d456:	3301      	adds	r3, #1
 800d458:	6033      	str	r3, [r6, #0]
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	0699      	lsls	r1, r3, #26
 800d45e:	bf42      	ittt	mi
 800d460:	6833      	ldrmi	r3, [r6, #0]
 800d462:	3302      	addmi	r3, #2
 800d464:	6033      	strmi	r3, [r6, #0]
 800d466:	6825      	ldr	r5, [r4, #0]
 800d468:	f015 0506 	ands.w	r5, r5, #6
 800d46c:	d106      	bne.n	800d47c <_printf_common+0x48>
 800d46e:	f104 0a19 	add.w	sl, r4, #25
 800d472:	68e3      	ldr	r3, [r4, #12]
 800d474:	6832      	ldr	r2, [r6, #0]
 800d476:	1a9b      	subs	r3, r3, r2
 800d478:	42ab      	cmp	r3, r5
 800d47a:	dc26      	bgt.n	800d4ca <_printf_common+0x96>
 800d47c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d480:	1e13      	subs	r3, r2, #0
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	bf18      	it	ne
 800d486:	2301      	movne	r3, #1
 800d488:	0692      	lsls	r2, r2, #26
 800d48a:	d42b      	bmi.n	800d4e4 <_printf_common+0xb0>
 800d48c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d490:	4649      	mov	r1, r9
 800d492:	4638      	mov	r0, r7
 800d494:	47c0      	blx	r8
 800d496:	3001      	adds	r0, #1
 800d498:	d01e      	beq.n	800d4d8 <_printf_common+0xa4>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	68e5      	ldr	r5, [r4, #12]
 800d49e:	6832      	ldr	r2, [r6, #0]
 800d4a0:	f003 0306 	and.w	r3, r3, #6
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	bf08      	it	eq
 800d4a8:	1aad      	subeq	r5, r5, r2
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	bf0c      	ite	eq
 800d4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b4:	2500      	movne	r5, #0
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	bfc4      	itt	gt
 800d4ba:	1a9b      	subgt	r3, r3, r2
 800d4bc:	18ed      	addgt	r5, r5, r3
 800d4be:	2600      	movs	r6, #0
 800d4c0:	341a      	adds	r4, #26
 800d4c2:	42b5      	cmp	r5, r6
 800d4c4:	d11a      	bne.n	800d4fc <_printf_common+0xc8>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	e008      	b.n	800d4dc <_printf_common+0xa8>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4652      	mov	r2, sl
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	47c0      	blx	r8
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d103      	bne.n	800d4e0 <_printf_common+0xac>
 800d4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e0:	3501      	adds	r5, #1
 800d4e2:	e7c6      	b.n	800d472 <_printf_common+0x3e>
 800d4e4:	18e1      	adds	r1, r4, r3
 800d4e6:	1c5a      	adds	r2, r3, #1
 800d4e8:	2030      	movs	r0, #48	; 0x30
 800d4ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4ee:	4422      	add	r2, r4
 800d4f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4f8:	3302      	adds	r3, #2
 800d4fa:	e7c7      	b.n	800d48c <_printf_common+0x58>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	4622      	mov	r2, r4
 800d500:	4649      	mov	r1, r9
 800d502:	4638      	mov	r0, r7
 800d504:	47c0      	blx	r8
 800d506:	3001      	adds	r0, #1
 800d508:	d0e6      	beq.n	800d4d8 <_printf_common+0xa4>
 800d50a:	3601      	adds	r6, #1
 800d50c:	e7d9      	b.n	800d4c2 <_printf_common+0x8e>
	...

0800d510 <_printf_i>:
 800d510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d514:	460c      	mov	r4, r1
 800d516:	4691      	mov	r9, r2
 800d518:	7e27      	ldrb	r7, [r4, #24]
 800d51a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d51c:	2f78      	cmp	r7, #120	; 0x78
 800d51e:	4680      	mov	r8, r0
 800d520:	469a      	mov	sl, r3
 800d522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d526:	d807      	bhi.n	800d538 <_printf_i+0x28>
 800d528:	2f62      	cmp	r7, #98	; 0x62
 800d52a:	d80a      	bhi.n	800d542 <_printf_i+0x32>
 800d52c:	2f00      	cmp	r7, #0
 800d52e:	f000 80d8 	beq.w	800d6e2 <_printf_i+0x1d2>
 800d532:	2f58      	cmp	r7, #88	; 0x58
 800d534:	f000 80a3 	beq.w	800d67e <_printf_i+0x16e>
 800d538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d540:	e03a      	b.n	800d5b8 <_printf_i+0xa8>
 800d542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d546:	2b15      	cmp	r3, #21
 800d548:	d8f6      	bhi.n	800d538 <_printf_i+0x28>
 800d54a:	a001      	add	r0, pc, #4	; (adr r0, 800d550 <_printf_i+0x40>)
 800d54c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d550:	0800d5a9 	.word	0x0800d5a9
 800d554:	0800d5bd 	.word	0x0800d5bd
 800d558:	0800d539 	.word	0x0800d539
 800d55c:	0800d539 	.word	0x0800d539
 800d560:	0800d539 	.word	0x0800d539
 800d564:	0800d539 	.word	0x0800d539
 800d568:	0800d5bd 	.word	0x0800d5bd
 800d56c:	0800d539 	.word	0x0800d539
 800d570:	0800d539 	.word	0x0800d539
 800d574:	0800d539 	.word	0x0800d539
 800d578:	0800d539 	.word	0x0800d539
 800d57c:	0800d6c9 	.word	0x0800d6c9
 800d580:	0800d5ed 	.word	0x0800d5ed
 800d584:	0800d6ab 	.word	0x0800d6ab
 800d588:	0800d539 	.word	0x0800d539
 800d58c:	0800d539 	.word	0x0800d539
 800d590:	0800d6eb 	.word	0x0800d6eb
 800d594:	0800d539 	.word	0x0800d539
 800d598:	0800d5ed 	.word	0x0800d5ed
 800d59c:	0800d539 	.word	0x0800d539
 800d5a0:	0800d539 	.word	0x0800d539
 800d5a4:	0800d6b3 	.word	0x0800d6b3
 800d5a8:	680b      	ldr	r3, [r1, #0]
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	600a      	str	r2, [r1, #0]
 800d5b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e0a3      	b.n	800d704 <_printf_i+0x1f4>
 800d5bc:	6825      	ldr	r5, [r4, #0]
 800d5be:	6808      	ldr	r0, [r1, #0]
 800d5c0:	062e      	lsls	r6, r5, #24
 800d5c2:	f100 0304 	add.w	r3, r0, #4
 800d5c6:	d50a      	bpl.n	800d5de <_printf_i+0xce>
 800d5c8:	6805      	ldr	r5, [r0, #0]
 800d5ca:	600b      	str	r3, [r1, #0]
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	da03      	bge.n	800d5d8 <_printf_i+0xc8>
 800d5d0:	232d      	movs	r3, #45	; 0x2d
 800d5d2:	426d      	negs	r5, r5
 800d5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5d8:	485e      	ldr	r0, [pc, #376]	; (800d754 <_printf_i+0x244>)
 800d5da:	230a      	movs	r3, #10
 800d5dc:	e019      	b.n	800d612 <_printf_i+0x102>
 800d5de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d5e2:	6805      	ldr	r5, [r0, #0]
 800d5e4:	600b      	str	r3, [r1, #0]
 800d5e6:	bf18      	it	ne
 800d5e8:	b22d      	sxthne	r5, r5
 800d5ea:	e7ef      	b.n	800d5cc <_printf_i+0xbc>
 800d5ec:	680b      	ldr	r3, [r1, #0]
 800d5ee:	6825      	ldr	r5, [r4, #0]
 800d5f0:	1d18      	adds	r0, r3, #4
 800d5f2:	6008      	str	r0, [r1, #0]
 800d5f4:	0628      	lsls	r0, r5, #24
 800d5f6:	d501      	bpl.n	800d5fc <_printf_i+0xec>
 800d5f8:	681d      	ldr	r5, [r3, #0]
 800d5fa:	e002      	b.n	800d602 <_printf_i+0xf2>
 800d5fc:	0669      	lsls	r1, r5, #25
 800d5fe:	d5fb      	bpl.n	800d5f8 <_printf_i+0xe8>
 800d600:	881d      	ldrh	r5, [r3, #0]
 800d602:	4854      	ldr	r0, [pc, #336]	; (800d754 <_printf_i+0x244>)
 800d604:	2f6f      	cmp	r7, #111	; 0x6f
 800d606:	bf0c      	ite	eq
 800d608:	2308      	moveq	r3, #8
 800d60a:	230a      	movne	r3, #10
 800d60c:	2100      	movs	r1, #0
 800d60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d612:	6866      	ldr	r6, [r4, #4]
 800d614:	60a6      	str	r6, [r4, #8]
 800d616:	2e00      	cmp	r6, #0
 800d618:	bfa2      	ittt	ge
 800d61a:	6821      	ldrge	r1, [r4, #0]
 800d61c:	f021 0104 	bicge.w	r1, r1, #4
 800d620:	6021      	strge	r1, [r4, #0]
 800d622:	b90d      	cbnz	r5, 800d628 <_printf_i+0x118>
 800d624:	2e00      	cmp	r6, #0
 800d626:	d04d      	beq.n	800d6c4 <_printf_i+0x1b4>
 800d628:	4616      	mov	r6, r2
 800d62a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d62e:	fb03 5711 	mls	r7, r3, r1, r5
 800d632:	5dc7      	ldrb	r7, [r0, r7]
 800d634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d638:	462f      	mov	r7, r5
 800d63a:	42bb      	cmp	r3, r7
 800d63c:	460d      	mov	r5, r1
 800d63e:	d9f4      	bls.n	800d62a <_printf_i+0x11a>
 800d640:	2b08      	cmp	r3, #8
 800d642:	d10b      	bne.n	800d65c <_printf_i+0x14c>
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	07df      	lsls	r7, r3, #31
 800d648:	d508      	bpl.n	800d65c <_printf_i+0x14c>
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	6861      	ldr	r1, [r4, #4]
 800d64e:	4299      	cmp	r1, r3
 800d650:	bfde      	ittt	le
 800d652:	2330      	movle	r3, #48	; 0x30
 800d654:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d65c:	1b92      	subs	r2, r2, r6
 800d65e:	6122      	str	r2, [r4, #16]
 800d660:	f8cd a000 	str.w	sl, [sp]
 800d664:	464b      	mov	r3, r9
 800d666:	aa03      	add	r2, sp, #12
 800d668:	4621      	mov	r1, r4
 800d66a:	4640      	mov	r0, r8
 800d66c:	f7ff fee2 	bl	800d434 <_printf_common>
 800d670:	3001      	adds	r0, #1
 800d672:	d14c      	bne.n	800d70e <_printf_i+0x1fe>
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	b004      	add	sp, #16
 800d67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67e:	4835      	ldr	r0, [pc, #212]	; (800d754 <_printf_i+0x244>)
 800d680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	680e      	ldr	r6, [r1, #0]
 800d688:	061f      	lsls	r7, r3, #24
 800d68a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d68e:	600e      	str	r6, [r1, #0]
 800d690:	d514      	bpl.n	800d6bc <_printf_i+0x1ac>
 800d692:	07d9      	lsls	r1, r3, #31
 800d694:	bf44      	itt	mi
 800d696:	f043 0320 	orrmi.w	r3, r3, #32
 800d69a:	6023      	strmi	r3, [r4, #0]
 800d69c:	b91d      	cbnz	r5, 800d6a6 <_printf_i+0x196>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	f023 0320 	bic.w	r3, r3, #32
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	2310      	movs	r3, #16
 800d6a8:	e7b0      	b.n	800d60c <_printf_i+0xfc>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	f043 0320 	orr.w	r3, r3, #32
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	2378      	movs	r3, #120	; 0x78
 800d6b4:	4828      	ldr	r0, [pc, #160]	; (800d758 <_printf_i+0x248>)
 800d6b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6ba:	e7e3      	b.n	800d684 <_printf_i+0x174>
 800d6bc:	065e      	lsls	r6, r3, #25
 800d6be:	bf48      	it	mi
 800d6c0:	b2ad      	uxthmi	r5, r5
 800d6c2:	e7e6      	b.n	800d692 <_printf_i+0x182>
 800d6c4:	4616      	mov	r6, r2
 800d6c6:	e7bb      	b.n	800d640 <_printf_i+0x130>
 800d6c8:	680b      	ldr	r3, [r1, #0]
 800d6ca:	6826      	ldr	r6, [r4, #0]
 800d6cc:	6960      	ldr	r0, [r4, #20]
 800d6ce:	1d1d      	adds	r5, r3, #4
 800d6d0:	600d      	str	r5, [r1, #0]
 800d6d2:	0635      	lsls	r5, r6, #24
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	d501      	bpl.n	800d6dc <_printf_i+0x1cc>
 800d6d8:	6018      	str	r0, [r3, #0]
 800d6da:	e002      	b.n	800d6e2 <_printf_i+0x1d2>
 800d6dc:	0671      	lsls	r1, r6, #25
 800d6de:	d5fb      	bpl.n	800d6d8 <_printf_i+0x1c8>
 800d6e0:	8018      	strh	r0, [r3, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6123      	str	r3, [r4, #16]
 800d6e6:	4616      	mov	r6, r2
 800d6e8:	e7ba      	b.n	800d660 <_printf_i+0x150>
 800d6ea:	680b      	ldr	r3, [r1, #0]
 800d6ec:	1d1a      	adds	r2, r3, #4
 800d6ee:	600a      	str	r2, [r1, #0]
 800d6f0:	681e      	ldr	r6, [r3, #0]
 800d6f2:	6862      	ldr	r2, [r4, #4]
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f7f2 fe12 	bl	8000320 <memchr>
 800d6fc:	b108      	cbz	r0, 800d702 <_printf_i+0x1f2>
 800d6fe:	1b80      	subs	r0, r0, r6
 800d700:	6060      	str	r0, [r4, #4]
 800d702:	6863      	ldr	r3, [r4, #4]
 800d704:	6123      	str	r3, [r4, #16]
 800d706:	2300      	movs	r3, #0
 800d708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d70c:	e7a8      	b.n	800d660 <_printf_i+0x150>
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	4632      	mov	r2, r6
 800d712:	4649      	mov	r1, r9
 800d714:	4640      	mov	r0, r8
 800d716:	47d0      	blx	sl
 800d718:	3001      	adds	r0, #1
 800d71a:	d0ab      	beq.n	800d674 <_printf_i+0x164>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	079b      	lsls	r3, r3, #30
 800d720:	d413      	bmi.n	800d74a <_printf_i+0x23a>
 800d722:	68e0      	ldr	r0, [r4, #12]
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	4298      	cmp	r0, r3
 800d728:	bfb8      	it	lt
 800d72a:	4618      	movlt	r0, r3
 800d72c:	e7a4      	b.n	800d678 <_printf_i+0x168>
 800d72e:	2301      	movs	r3, #1
 800d730:	4632      	mov	r2, r6
 800d732:	4649      	mov	r1, r9
 800d734:	4640      	mov	r0, r8
 800d736:	47d0      	blx	sl
 800d738:	3001      	adds	r0, #1
 800d73a:	d09b      	beq.n	800d674 <_printf_i+0x164>
 800d73c:	3501      	adds	r5, #1
 800d73e:	68e3      	ldr	r3, [r4, #12]
 800d740:	9903      	ldr	r1, [sp, #12]
 800d742:	1a5b      	subs	r3, r3, r1
 800d744:	42ab      	cmp	r3, r5
 800d746:	dcf2      	bgt.n	800d72e <_printf_i+0x21e>
 800d748:	e7eb      	b.n	800d722 <_printf_i+0x212>
 800d74a:	2500      	movs	r5, #0
 800d74c:	f104 0619 	add.w	r6, r4, #25
 800d750:	e7f5      	b.n	800d73e <_printf_i+0x22e>
 800d752:	bf00      	nop
 800d754:	08010366 	.word	0x08010366
 800d758:	08010377 	.word	0x08010377

0800d75c <quorem>:
 800d75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d760:	6903      	ldr	r3, [r0, #16]
 800d762:	690c      	ldr	r4, [r1, #16]
 800d764:	42a3      	cmp	r3, r4
 800d766:	4607      	mov	r7, r0
 800d768:	f2c0 8081 	blt.w	800d86e <quorem+0x112>
 800d76c:	3c01      	subs	r4, #1
 800d76e:	f101 0814 	add.w	r8, r1, #20
 800d772:	f100 0514 	add.w	r5, r0, #20
 800d776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d784:	3301      	adds	r3, #1
 800d786:	429a      	cmp	r2, r3
 800d788:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d78c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d790:	fbb2 f6f3 	udiv	r6, r2, r3
 800d794:	d331      	bcc.n	800d7fa <quorem+0x9e>
 800d796:	f04f 0e00 	mov.w	lr, #0
 800d79a:	4640      	mov	r0, r8
 800d79c:	46ac      	mov	ip, r5
 800d79e:	46f2      	mov	sl, lr
 800d7a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7a4:	b293      	uxth	r3, r2
 800d7a6:	fb06 e303 	mla	r3, r6, r3, lr
 800d7aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d7b4:	0c12      	lsrs	r2, r2, #16
 800d7b6:	f8dc a000 	ldr.w	sl, [ip]
 800d7ba:	fb06 e202 	mla	r2, r6, r2, lr
 800d7be:	fa13 f38a 	uxtah	r3, r3, sl
 800d7c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7c6:	fa1f fa82 	uxth.w	sl, r2
 800d7ca:	f8dc 2000 	ldr.w	r2, [ip]
 800d7ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d7d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7dc:	4581      	cmp	r9, r0
 800d7de:	f84c 3b04 	str.w	r3, [ip], #4
 800d7e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7e6:	d2db      	bcs.n	800d7a0 <quorem+0x44>
 800d7e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7ec:	b92b      	cbnz	r3, 800d7fa <quorem+0x9e>
 800d7ee:	9b01      	ldr	r3, [sp, #4]
 800d7f0:	3b04      	subs	r3, #4
 800d7f2:	429d      	cmp	r5, r3
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	d32e      	bcc.n	800d856 <quorem+0xfa>
 800d7f8:	613c      	str	r4, [r7, #16]
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	f001 f848 	bl	800e890 <__mcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	db24      	blt.n	800d84e <quorem+0xf2>
 800d804:	3601      	adds	r6, #1
 800d806:	4628      	mov	r0, r5
 800d808:	f04f 0c00 	mov.w	ip, #0
 800d80c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d810:	f8d0 e000 	ldr.w	lr, [r0]
 800d814:	b293      	uxth	r3, r2
 800d816:	ebac 0303 	sub.w	r3, ip, r3
 800d81a:	0c12      	lsrs	r2, r2, #16
 800d81c:	fa13 f38e 	uxtah	r3, r3, lr
 800d820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d828:	b29b      	uxth	r3, r3
 800d82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d82e:	45c1      	cmp	r9, r8
 800d830:	f840 3b04 	str.w	r3, [r0], #4
 800d834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d838:	d2e8      	bcs.n	800d80c <quorem+0xb0>
 800d83a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d842:	b922      	cbnz	r2, 800d84e <quorem+0xf2>
 800d844:	3b04      	subs	r3, #4
 800d846:	429d      	cmp	r5, r3
 800d848:	461a      	mov	r2, r3
 800d84a:	d30a      	bcc.n	800d862 <quorem+0x106>
 800d84c:	613c      	str	r4, [r7, #16]
 800d84e:	4630      	mov	r0, r6
 800d850:	b003      	add	sp, #12
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	6812      	ldr	r2, [r2, #0]
 800d858:	3b04      	subs	r3, #4
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	d1cc      	bne.n	800d7f8 <quorem+0x9c>
 800d85e:	3c01      	subs	r4, #1
 800d860:	e7c7      	b.n	800d7f2 <quorem+0x96>
 800d862:	6812      	ldr	r2, [r2, #0]
 800d864:	3b04      	subs	r3, #4
 800d866:	2a00      	cmp	r2, #0
 800d868:	d1f0      	bne.n	800d84c <quorem+0xf0>
 800d86a:	3c01      	subs	r4, #1
 800d86c:	e7eb      	b.n	800d846 <quorem+0xea>
 800d86e:	2000      	movs	r0, #0
 800d870:	e7ee      	b.n	800d850 <quorem+0xf4>
 800d872:	0000      	movs	r0, r0
 800d874:	0000      	movs	r0, r0
	...

0800d878 <_dtoa_r>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	ec59 8b10 	vmov	r8, r9, d0
 800d880:	b095      	sub	sp, #84	; 0x54
 800d882:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d884:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d886:	9107      	str	r1, [sp, #28]
 800d888:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d88c:	4606      	mov	r6, r0
 800d88e:	9209      	str	r2, [sp, #36]	; 0x24
 800d890:	9310      	str	r3, [sp, #64]	; 0x40
 800d892:	b975      	cbnz	r5, 800d8b2 <_dtoa_r+0x3a>
 800d894:	2010      	movs	r0, #16
 800d896:	f000 fd75 	bl	800e384 <malloc>
 800d89a:	4602      	mov	r2, r0
 800d89c:	6270      	str	r0, [r6, #36]	; 0x24
 800d89e:	b920      	cbnz	r0, 800d8aa <_dtoa_r+0x32>
 800d8a0:	4bab      	ldr	r3, [pc, #684]	; (800db50 <_dtoa_r+0x2d8>)
 800d8a2:	21ea      	movs	r1, #234	; 0xea
 800d8a4:	48ab      	ldr	r0, [pc, #684]	; (800db54 <_dtoa_r+0x2dc>)
 800d8a6:	f001 f9bd 	bl	800ec24 <__assert_func>
 800d8aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8ae:	6005      	str	r5, [r0, #0]
 800d8b0:	60c5      	str	r5, [r0, #12]
 800d8b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8b4:	6819      	ldr	r1, [r3, #0]
 800d8b6:	b151      	cbz	r1, 800d8ce <_dtoa_r+0x56>
 800d8b8:	685a      	ldr	r2, [r3, #4]
 800d8ba:	604a      	str	r2, [r1, #4]
 800d8bc:	2301      	movs	r3, #1
 800d8be:	4093      	lsls	r3, r2
 800d8c0:	608b      	str	r3, [r1, #8]
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f000 fda6 	bl	800e414 <_Bfree>
 800d8c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	f1b9 0300 	subs.w	r3, r9, #0
 800d8d2:	bfbb      	ittet	lt
 800d8d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8d8:	9303      	strlt	r3, [sp, #12]
 800d8da:	2300      	movge	r3, #0
 800d8dc:	2201      	movlt	r2, #1
 800d8de:	bfac      	ite	ge
 800d8e0:	6023      	strge	r3, [r4, #0]
 800d8e2:	6022      	strlt	r2, [r4, #0]
 800d8e4:	4b9c      	ldr	r3, [pc, #624]	; (800db58 <_dtoa_r+0x2e0>)
 800d8e6:	9c03      	ldr	r4, [sp, #12]
 800d8e8:	43a3      	bics	r3, r4
 800d8ea:	d11a      	bne.n	800d922 <_dtoa_r+0xaa>
 800d8ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8f2:	6013      	str	r3, [r2, #0]
 800d8f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d8f8:	ea53 0308 	orrs.w	r3, r3, r8
 800d8fc:	f000 8512 	beq.w	800e324 <_dtoa_r+0xaac>
 800d900:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d902:	b953      	cbnz	r3, 800d91a <_dtoa_r+0xa2>
 800d904:	4b95      	ldr	r3, [pc, #596]	; (800db5c <_dtoa_r+0x2e4>)
 800d906:	e01f      	b.n	800d948 <_dtoa_r+0xd0>
 800d908:	4b95      	ldr	r3, [pc, #596]	; (800db60 <_dtoa_r+0x2e8>)
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	3308      	adds	r3, #8
 800d90e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	9800      	ldr	r0, [sp, #0]
 800d914:	b015      	add	sp, #84	; 0x54
 800d916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91a:	4b90      	ldr	r3, [pc, #576]	; (800db5c <_dtoa_r+0x2e4>)
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	3303      	adds	r3, #3
 800d920:	e7f5      	b.n	800d90e <_dtoa_r+0x96>
 800d922:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d926:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d932:	d10b      	bne.n	800d94c <_dtoa_r+0xd4>
 800d934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d936:	2301      	movs	r3, #1
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f000 84ee 	beq.w	800e31e <_dtoa_r+0xaa6>
 800d942:	4888      	ldr	r0, [pc, #544]	; (800db64 <_dtoa_r+0x2ec>)
 800d944:	6018      	str	r0, [r3, #0]
 800d946:	1e43      	subs	r3, r0, #1
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	e7e2      	b.n	800d912 <_dtoa_r+0x9a>
 800d94c:	a913      	add	r1, sp, #76	; 0x4c
 800d94e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d952:	aa12      	add	r2, sp, #72	; 0x48
 800d954:	4630      	mov	r0, r6
 800d956:	f001 f83f 	bl	800e9d8 <__d2b>
 800d95a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d95e:	4605      	mov	r5, r0
 800d960:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d962:	2900      	cmp	r1, #0
 800d964:	d047      	beq.n	800d9f6 <_dtoa_r+0x17e>
 800d966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d968:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d96c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d970:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d974:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d978:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d97c:	2400      	movs	r4, #0
 800d97e:	ec43 2b16 	vmov	d6, r2, r3
 800d982:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d986:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800db38 <_dtoa_r+0x2c0>
 800d98a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d98e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800db40 <_dtoa_r+0x2c8>
 800d992:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d996:	eeb0 7b46 	vmov.f64	d7, d6
 800d99a:	ee06 1a90 	vmov	s13, r1
 800d99e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d9a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800db48 <_dtoa_r+0x2d0>
 800d9a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d9aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d9ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b6:	ee16 ba90 	vmov	fp, s13
 800d9ba:	9411      	str	r4, [sp, #68]	; 0x44
 800d9bc:	d508      	bpl.n	800d9d0 <_dtoa_r+0x158>
 800d9be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d9c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ca:	bf18      	it	ne
 800d9cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d9d0:	f1bb 0f16 	cmp.w	fp, #22
 800d9d4:	d832      	bhi.n	800da3c <_dtoa_r+0x1c4>
 800d9d6:	4b64      	ldr	r3, [pc, #400]	; (800db68 <_dtoa_r+0x2f0>)
 800d9d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9dc:	ed93 7b00 	vldr	d7, [r3]
 800d9e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d9e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ec:	d501      	bpl.n	800d9f2 <_dtoa_r+0x17a>
 800d9ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e023      	b.n	800da3e <_dtoa_r+0x1c6>
 800d9f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d9f8:	4401      	add	r1, r0
 800d9fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d9fe:	2b20      	cmp	r3, #32
 800da00:	bfc3      	ittte	gt
 800da02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da06:	fa04 f303 	lslgt.w	r3, r4, r3
 800da0a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800da0e:	f1c3 0320 	rsble	r3, r3, #32
 800da12:	bfc6      	itte	gt
 800da14:	fa28 f804 	lsrgt.w	r8, r8, r4
 800da18:	ea43 0308 	orrgt.w	r3, r3, r8
 800da1c:	fa08 f303 	lslle.w	r3, r8, r3
 800da20:	ee07 3a90 	vmov	s15, r3
 800da24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800da28:	3901      	subs	r1, #1
 800da2a:	ed8d 7b00 	vstr	d7, [sp]
 800da2e:	9c01      	ldr	r4, [sp, #4]
 800da30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800da38:	2401      	movs	r4, #1
 800da3a:	e7a0      	b.n	800d97e <_dtoa_r+0x106>
 800da3c:	2301      	movs	r3, #1
 800da3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da40:	1a43      	subs	r3, r0, r1
 800da42:	1e5a      	subs	r2, r3, #1
 800da44:	bf45      	ittet	mi
 800da46:	f1c3 0301 	rsbmi	r3, r3, #1
 800da4a:	9305      	strmi	r3, [sp, #20]
 800da4c:	2300      	movpl	r3, #0
 800da4e:	2300      	movmi	r3, #0
 800da50:	9206      	str	r2, [sp, #24]
 800da52:	bf54      	ite	pl
 800da54:	9305      	strpl	r3, [sp, #20]
 800da56:	9306      	strmi	r3, [sp, #24]
 800da58:	f1bb 0f00 	cmp.w	fp, #0
 800da5c:	db18      	blt.n	800da90 <_dtoa_r+0x218>
 800da5e:	9b06      	ldr	r3, [sp, #24]
 800da60:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800da64:	445b      	add	r3, fp
 800da66:	9306      	str	r3, [sp, #24]
 800da68:	2300      	movs	r3, #0
 800da6a:	9a07      	ldr	r2, [sp, #28]
 800da6c:	2a09      	cmp	r2, #9
 800da6e:	d849      	bhi.n	800db04 <_dtoa_r+0x28c>
 800da70:	2a05      	cmp	r2, #5
 800da72:	bfc4      	itt	gt
 800da74:	3a04      	subgt	r2, #4
 800da76:	9207      	strgt	r2, [sp, #28]
 800da78:	9a07      	ldr	r2, [sp, #28]
 800da7a:	f1a2 0202 	sub.w	r2, r2, #2
 800da7e:	bfcc      	ite	gt
 800da80:	2400      	movgt	r4, #0
 800da82:	2401      	movle	r4, #1
 800da84:	2a03      	cmp	r2, #3
 800da86:	d848      	bhi.n	800db1a <_dtoa_r+0x2a2>
 800da88:	e8df f002 	tbb	[pc, r2]
 800da8c:	3a2c2e0b 	.word	0x3a2c2e0b
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	2200      	movs	r2, #0
 800da94:	eba3 030b 	sub.w	r3, r3, fp
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	920e      	str	r2, [sp, #56]	; 0x38
 800da9c:	f1cb 0300 	rsb	r3, fp, #0
 800daa0:	e7e3      	b.n	800da6a <_dtoa_r+0x1f2>
 800daa2:	2200      	movs	r2, #0
 800daa4:	9208      	str	r2, [sp, #32]
 800daa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	dc39      	bgt.n	800db20 <_dtoa_r+0x2a8>
 800daac:	f04f 0a01 	mov.w	sl, #1
 800dab0:	46d1      	mov	r9, sl
 800dab2:	4652      	mov	r2, sl
 800dab4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dab8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800daba:	2100      	movs	r1, #0
 800dabc:	6079      	str	r1, [r7, #4]
 800dabe:	2004      	movs	r0, #4
 800dac0:	f100 0c14 	add.w	ip, r0, #20
 800dac4:	4594      	cmp	ip, r2
 800dac6:	6879      	ldr	r1, [r7, #4]
 800dac8:	d92f      	bls.n	800db2a <_dtoa_r+0x2b2>
 800daca:	4630      	mov	r0, r6
 800dacc:	930c      	str	r3, [sp, #48]	; 0x30
 800dace:	f000 fc61 	bl	800e394 <_Balloc>
 800dad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dad4:	9000      	str	r0, [sp, #0]
 800dad6:	4602      	mov	r2, r0
 800dad8:	2800      	cmp	r0, #0
 800dada:	d149      	bne.n	800db70 <_dtoa_r+0x2f8>
 800dadc:	4b23      	ldr	r3, [pc, #140]	; (800db6c <_dtoa_r+0x2f4>)
 800dade:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dae2:	e6df      	b.n	800d8a4 <_dtoa_r+0x2c>
 800dae4:	2201      	movs	r2, #1
 800dae6:	e7dd      	b.n	800daa4 <_dtoa_r+0x22c>
 800dae8:	2200      	movs	r2, #0
 800daea:	9208      	str	r2, [sp, #32]
 800daec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daee:	eb0b 0a02 	add.w	sl, fp, r2
 800daf2:	f10a 0901 	add.w	r9, sl, #1
 800daf6:	464a      	mov	r2, r9
 800daf8:	2a01      	cmp	r2, #1
 800dafa:	bfb8      	it	lt
 800dafc:	2201      	movlt	r2, #1
 800dafe:	e7db      	b.n	800dab8 <_dtoa_r+0x240>
 800db00:	2201      	movs	r2, #1
 800db02:	e7f2      	b.n	800daea <_dtoa_r+0x272>
 800db04:	2401      	movs	r4, #1
 800db06:	2200      	movs	r2, #0
 800db08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800db0c:	f04f 3aff 	mov.w	sl, #4294967295
 800db10:	2100      	movs	r1, #0
 800db12:	46d1      	mov	r9, sl
 800db14:	2212      	movs	r2, #18
 800db16:	9109      	str	r1, [sp, #36]	; 0x24
 800db18:	e7ce      	b.n	800dab8 <_dtoa_r+0x240>
 800db1a:	2201      	movs	r2, #1
 800db1c:	9208      	str	r2, [sp, #32]
 800db1e:	e7f5      	b.n	800db0c <_dtoa_r+0x294>
 800db20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800db24:	46d1      	mov	r9, sl
 800db26:	4652      	mov	r2, sl
 800db28:	e7c6      	b.n	800dab8 <_dtoa_r+0x240>
 800db2a:	3101      	adds	r1, #1
 800db2c:	6079      	str	r1, [r7, #4]
 800db2e:	0040      	lsls	r0, r0, #1
 800db30:	e7c6      	b.n	800dac0 <_dtoa_r+0x248>
 800db32:	bf00      	nop
 800db34:	f3af 8000 	nop.w
 800db38:	636f4361 	.word	0x636f4361
 800db3c:	3fd287a7 	.word	0x3fd287a7
 800db40:	8b60c8b3 	.word	0x8b60c8b3
 800db44:	3fc68a28 	.word	0x3fc68a28
 800db48:	509f79fb 	.word	0x509f79fb
 800db4c:	3fd34413 	.word	0x3fd34413
 800db50:	08010395 	.word	0x08010395
 800db54:	080103ac 	.word	0x080103ac
 800db58:	7ff00000 	.word	0x7ff00000
 800db5c:	08010391 	.word	0x08010391
 800db60:	08010388 	.word	0x08010388
 800db64:	08010365 	.word	0x08010365
 800db68:	080104a8 	.word	0x080104a8
 800db6c:	0801040b 	.word	0x0801040b
 800db70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800db72:	9900      	ldr	r1, [sp, #0]
 800db74:	6011      	str	r1, [r2, #0]
 800db76:	f1b9 0f0e 	cmp.w	r9, #14
 800db7a:	d872      	bhi.n	800dc62 <_dtoa_r+0x3ea>
 800db7c:	2c00      	cmp	r4, #0
 800db7e:	d070      	beq.n	800dc62 <_dtoa_r+0x3ea>
 800db80:	f1bb 0f00 	cmp.w	fp, #0
 800db84:	f340 80a6 	ble.w	800dcd4 <_dtoa_r+0x45c>
 800db88:	49ca      	ldr	r1, [pc, #808]	; (800deb4 <_dtoa_r+0x63c>)
 800db8a:	f00b 020f 	and.w	r2, fp, #15
 800db8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800db92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800db96:	ed92 7b00 	vldr	d7, [r2]
 800db9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800db9e:	f000 808d 	beq.w	800dcbc <_dtoa_r+0x444>
 800dba2:	4ac5      	ldr	r2, [pc, #788]	; (800deb8 <_dtoa_r+0x640>)
 800dba4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800dba8:	ed92 6b08 	vldr	d6, [r2, #32]
 800dbac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800dbb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dbb4:	f001 010f 	and.w	r1, r1, #15
 800dbb8:	2203      	movs	r2, #3
 800dbba:	48bf      	ldr	r0, [pc, #764]	; (800deb8 <_dtoa_r+0x640>)
 800dbbc:	2900      	cmp	r1, #0
 800dbbe:	d17f      	bne.n	800dcc0 <_dtoa_r+0x448>
 800dbc0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dbc4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dbc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbce:	2900      	cmp	r1, #0
 800dbd0:	f000 80b2 	beq.w	800dd38 <_dtoa_r+0x4c0>
 800dbd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dbd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe4:	f140 80a8 	bpl.w	800dd38 <_dtoa_r+0x4c0>
 800dbe8:	f1b9 0f00 	cmp.w	r9, #0
 800dbec:	f000 80a4 	beq.w	800dd38 <_dtoa_r+0x4c0>
 800dbf0:	f1ba 0f00 	cmp.w	sl, #0
 800dbf4:	dd31      	ble.n	800dc5a <_dtoa_r+0x3e2>
 800dbf6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800dbfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc02:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dc06:	3201      	adds	r2, #1
 800dc08:	4650      	mov	r0, sl
 800dc0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dc0e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dc12:	ee07 2a90 	vmov	s15, r2
 800dc16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dc1e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dc22:	9c03      	ldr	r4, [sp, #12]
 800dc24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dc28:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	f040 8086 	bne.w	800dd3e <_dtoa_r+0x4c6>
 800dc32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dc36:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dc3a:	ec42 1b17 	vmov	d7, r1, r2
 800dc3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc46:	f300 8272 	bgt.w	800e12e <_dtoa_r+0x8b6>
 800dc4a:	eeb1 7b47 	vneg.f64	d7, d7
 800dc4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc56:	f100 8267 	bmi.w	800e128 <_dtoa_r+0x8b0>
 800dc5a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800dc5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800dc62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	f2c0 8129 	blt.w	800debc <_dtoa_r+0x644>
 800dc6a:	f1bb 0f0e 	cmp.w	fp, #14
 800dc6e:	f300 8125 	bgt.w	800debc <_dtoa_r+0x644>
 800dc72:	4b90      	ldr	r3, [pc, #576]	; (800deb4 <_dtoa_r+0x63c>)
 800dc74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc78:	ed93 6b00 	vldr	d6, [r3]
 800dc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f280 80c3 	bge.w	800de0a <_dtoa_r+0x592>
 800dc84:	f1b9 0f00 	cmp.w	r9, #0
 800dc88:	f300 80bf 	bgt.w	800de0a <_dtoa_r+0x592>
 800dc8c:	f040 824c 	bne.w	800e128 <_dtoa_r+0x8b0>
 800dc90:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dc94:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dc98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca4:	464c      	mov	r4, r9
 800dca6:	464f      	mov	r7, r9
 800dca8:	f280 8222 	bge.w	800e0f0 <_dtoa_r+0x878>
 800dcac:	f8dd 8000 	ldr.w	r8, [sp]
 800dcb0:	2331      	movs	r3, #49	; 0x31
 800dcb2:	f808 3b01 	strb.w	r3, [r8], #1
 800dcb6:	f10b 0b01 	add.w	fp, fp, #1
 800dcba:	e21e      	b.n	800e0fa <_dtoa_r+0x882>
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	e77c      	b.n	800dbba <_dtoa_r+0x342>
 800dcc0:	07cc      	lsls	r4, r1, #31
 800dcc2:	d504      	bpl.n	800dcce <_dtoa_r+0x456>
 800dcc4:	ed90 6b00 	vldr	d6, [r0]
 800dcc8:	3201      	adds	r2, #1
 800dcca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcce:	1049      	asrs	r1, r1, #1
 800dcd0:	3008      	adds	r0, #8
 800dcd2:	e773      	b.n	800dbbc <_dtoa_r+0x344>
 800dcd4:	d02e      	beq.n	800dd34 <_dtoa_r+0x4bc>
 800dcd6:	f1cb 0100 	rsb	r1, fp, #0
 800dcda:	4a76      	ldr	r2, [pc, #472]	; (800deb4 <_dtoa_r+0x63c>)
 800dcdc:	f001 000f 	and.w	r0, r1, #15
 800dce0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dce4:	ed92 7b00 	vldr	d7, [r2]
 800dce8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800dcec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcf0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dcf4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800dcf8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800dcfc:	486e      	ldr	r0, [pc, #440]	; (800deb8 <_dtoa_r+0x640>)
 800dcfe:	1109      	asrs	r1, r1, #4
 800dd00:	2400      	movs	r4, #0
 800dd02:	2202      	movs	r2, #2
 800dd04:	b939      	cbnz	r1, 800dd16 <_dtoa_r+0x49e>
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	f43f af60 	beq.w	800dbcc <_dtoa_r+0x354>
 800dd0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd14:	e75a      	b.n	800dbcc <_dtoa_r+0x354>
 800dd16:	07cf      	lsls	r7, r1, #31
 800dd18:	d509      	bpl.n	800dd2e <_dtoa_r+0x4b6>
 800dd1a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800dd1e:	ed90 7b00 	vldr	d7, [r0]
 800dd22:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dd26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	2401      	movs	r4, #1
 800dd2e:	1049      	asrs	r1, r1, #1
 800dd30:	3008      	adds	r0, #8
 800dd32:	e7e7      	b.n	800dd04 <_dtoa_r+0x48c>
 800dd34:	2202      	movs	r2, #2
 800dd36:	e749      	b.n	800dbcc <_dtoa_r+0x354>
 800dd38:	465f      	mov	r7, fp
 800dd3a:	4648      	mov	r0, r9
 800dd3c:	e765      	b.n	800dc0a <_dtoa_r+0x392>
 800dd3e:	ec42 1b17 	vmov	d7, r1, r2
 800dd42:	4a5c      	ldr	r2, [pc, #368]	; (800deb4 <_dtoa_r+0x63c>)
 800dd44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dd48:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dd4c:	9a00      	ldr	r2, [sp, #0]
 800dd4e:	1814      	adds	r4, r2, r0
 800dd50:	9a08      	ldr	r2, [sp, #32]
 800dd52:	b352      	cbz	r2, 800ddaa <_dtoa_r+0x532>
 800dd54:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dd58:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dd5c:	f8dd 8000 	ldr.w	r8, [sp]
 800dd60:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dd64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dd68:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dd6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dd70:	ee14 2a90 	vmov	r2, s9
 800dd74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dd78:	3230      	adds	r2, #48	; 0x30
 800dd7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd86:	f808 2b01 	strb.w	r2, [r8], #1
 800dd8a:	d439      	bmi.n	800de00 <_dtoa_r+0x588>
 800dd8c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dd90:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd98:	d472      	bmi.n	800de80 <_dtoa_r+0x608>
 800dd9a:	45a0      	cmp	r8, r4
 800dd9c:	f43f af5d 	beq.w	800dc5a <_dtoa_r+0x3e2>
 800dda0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dda4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dda8:	e7e0      	b.n	800dd6c <_dtoa_r+0x4f4>
 800ddaa:	f8dd 8000 	ldr.w	r8, [sp]
 800ddae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ddb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ddbc:	ee14 2a90 	vmov	r2, s9
 800ddc0:	3230      	adds	r2, #48	; 0x30
 800ddc2:	f808 2b01 	strb.w	r2, [r8], #1
 800ddc6:	45a0      	cmp	r8, r4
 800ddc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ddcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ddd0:	d118      	bne.n	800de04 <_dtoa_r+0x58c>
 800ddd2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ddd6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ddda:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	dc4d      	bgt.n	800de80 <_dtoa_r+0x608>
 800dde4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dde8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ddec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf0:	f57f af33 	bpl.w	800dc5a <_dtoa_r+0x3e2>
 800ddf4:	4688      	mov	r8, r1
 800ddf6:	3901      	subs	r1, #1
 800ddf8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ddfc:	2b30      	cmp	r3, #48	; 0x30
 800ddfe:	d0f9      	beq.n	800ddf4 <_dtoa_r+0x57c>
 800de00:	46bb      	mov	fp, r7
 800de02:	e02a      	b.n	800de5a <_dtoa_r+0x5e2>
 800de04:	ee26 6b03 	vmul.f64	d6, d6, d3
 800de08:	e7d6      	b.n	800ddb8 <_dtoa_r+0x540>
 800de0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800de12:	f8dd 8000 	ldr.w	r8, [sp]
 800de16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800de1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800de1e:	ee15 3a10 	vmov	r3, s10
 800de22:	3330      	adds	r3, #48	; 0x30
 800de24:	f808 3b01 	strb.w	r3, [r8], #1
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	eba8 0303 	sub.w	r3, r8, r3
 800de2e:	4599      	cmp	r9, r3
 800de30:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800de34:	eea3 7b46 	vfms.f64	d7, d3, d6
 800de38:	d133      	bne.n	800dea2 <_dtoa_r+0x62a>
 800de3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800de3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de46:	dc1a      	bgt.n	800de7e <_dtoa_r+0x606>
 800de48:	eeb4 7b46 	vcmp.f64	d7, d6
 800de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de50:	d103      	bne.n	800de5a <_dtoa_r+0x5e2>
 800de52:	ee15 3a10 	vmov	r3, s10
 800de56:	07d9      	lsls	r1, r3, #31
 800de58:	d411      	bmi.n	800de7e <_dtoa_r+0x606>
 800de5a:	4629      	mov	r1, r5
 800de5c:	4630      	mov	r0, r6
 800de5e:	f000 fad9 	bl	800e414 <_Bfree>
 800de62:	2300      	movs	r3, #0
 800de64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de66:	f888 3000 	strb.w	r3, [r8]
 800de6a:	f10b 0301 	add.w	r3, fp, #1
 800de6e:	6013      	str	r3, [r2, #0]
 800de70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de72:	2b00      	cmp	r3, #0
 800de74:	f43f ad4d 	beq.w	800d912 <_dtoa_r+0x9a>
 800de78:	f8c3 8000 	str.w	r8, [r3]
 800de7c:	e549      	b.n	800d912 <_dtoa_r+0x9a>
 800de7e:	465f      	mov	r7, fp
 800de80:	4643      	mov	r3, r8
 800de82:	4698      	mov	r8, r3
 800de84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de88:	2a39      	cmp	r2, #57	; 0x39
 800de8a:	d106      	bne.n	800de9a <_dtoa_r+0x622>
 800de8c:	9a00      	ldr	r2, [sp, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d1f7      	bne.n	800de82 <_dtoa_r+0x60a>
 800de92:	9900      	ldr	r1, [sp, #0]
 800de94:	2230      	movs	r2, #48	; 0x30
 800de96:	3701      	adds	r7, #1
 800de98:	700a      	strb	r2, [r1, #0]
 800de9a:	781a      	ldrb	r2, [r3, #0]
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	e7ae      	b.n	800de00 <_dtoa_r+0x588>
 800dea2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800deaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deae:	d1b2      	bne.n	800de16 <_dtoa_r+0x59e>
 800deb0:	e7d3      	b.n	800de5a <_dtoa_r+0x5e2>
 800deb2:	bf00      	nop
 800deb4:	080104a8 	.word	0x080104a8
 800deb8:	08010480 	.word	0x08010480
 800debc:	9908      	ldr	r1, [sp, #32]
 800debe:	2900      	cmp	r1, #0
 800dec0:	f000 80d1 	beq.w	800e066 <_dtoa_r+0x7ee>
 800dec4:	9907      	ldr	r1, [sp, #28]
 800dec6:	2901      	cmp	r1, #1
 800dec8:	f300 80b4 	bgt.w	800e034 <_dtoa_r+0x7bc>
 800decc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dece:	2900      	cmp	r1, #0
 800ded0:	f000 80ac 	beq.w	800e02c <_dtoa_r+0x7b4>
 800ded4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ded8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dedc:	461c      	mov	r4, r3
 800dede:	930a      	str	r3, [sp, #40]	; 0x28
 800dee0:	9b05      	ldr	r3, [sp, #20]
 800dee2:	4413      	add	r3, r2
 800dee4:	9305      	str	r3, [sp, #20]
 800dee6:	9b06      	ldr	r3, [sp, #24]
 800dee8:	2101      	movs	r1, #1
 800deea:	4413      	add	r3, r2
 800deec:	4630      	mov	r0, r6
 800deee:	9306      	str	r3, [sp, #24]
 800def0:	f000 fb4c 	bl	800e58c <__i2b>
 800def4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def6:	4607      	mov	r7, r0
 800def8:	f1b8 0f00 	cmp.w	r8, #0
 800defc:	dd0d      	ble.n	800df1a <_dtoa_r+0x6a2>
 800defe:	9a06      	ldr	r2, [sp, #24]
 800df00:	2a00      	cmp	r2, #0
 800df02:	dd0a      	ble.n	800df1a <_dtoa_r+0x6a2>
 800df04:	4542      	cmp	r2, r8
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	bfa8      	it	ge
 800df0a:	4642      	movge	r2, r8
 800df0c:	1a89      	subs	r1, r1, r2
 800df0e:	9105      	str	r1, [sp, #20]
 800df10:	9906      	ldr	r1, [sp, #24]
 800df12:	eba8 0802 	sub.w	r8, r8, r2
 800df16:	1a8a      	subs	r2, r1, r2
 800df18:	9206      	str	r2, [sp, #24]
 800df1a:	b303      	cbz	r3, 800df5e <_dtoa_r+0x6e6>
 800df1c:	9a08      	ldr	r2, [sp, #32]
 800df1e:	2a00      	cmp	r2, #0
 800df20:	f000 80a6 	beq.w	800e070 <_dtoa_r+0x7f8>
 800df24:	2c00      	cmp	r4, #0
 800df26:	dd13      	ble.n	800df50 <_dtoa_r+0x6d8>
 800df28:	4639      	mov	r1, r7
 800df2a:	4622      	mov	r2, r4
 800df2c:	4630      	mov	r0, r6
 800df2e:	930c      	str	r3, [sp, #48]	; 0x30
 800df30:	f000 fbe8 	bl	800e704 <__pow5mult>
 800df34:	462a      	mov	r2, r5
 800df36:	4601      	mov	r1, r0
 800df38:	4607      	mov	r7, r0
 800df3a:	4630      	mov	r0, r6
 800df3c:	f000 fb3c 	bl	800e5b8 <__multiply>
 800df40:	4629      	mov	r1, r5
 800df42:	900a      	str	r0, [sp, #40]	; 0x28
 800df44:	4630      	mov	r0, r6
 800df46:	f000 fa65 	bl	800e414 <_Bfree>
 800df4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df4e:	4615      	mov	r5, r2
 800df50:	1b1a      	subs	r2, r3, r4
 800df52:	d004      	beq.n	800df5e <_dtoa_r+0x6e6>
 800df54:	4629      	mov	r1, r5
 800df56:	4630      	mov	r0, r6
 800df58:	f000 fbd4 	bl	800e704 <__pow5mult>
 800df5c:	4605      	mov	r5, r0
 800df5e:	2101      	movs	r1, #1
 800df60:	4630      	mov	r0, r6
 800df62:	f000 fb13 	bl	800e58c <__i2b>
 800df66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df68:	2b00      	cmp	r3, #0
 800df6a:	4604      	mov	r4, r0
 800df6c:	f340 8082 	ble.w	800e074 <_dtoa_r+0x7fc>
 800df70:	461a      	mov	r2, r3
 800df72:	4601      	mov	r1, r0
 800df74:	4630      	mov	r0, r6
 800df76:	f000 fbc5 	bl	800e704 <__pow5mult>
 800df7a:	9b07      	ldr	r3, [sp, #28]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	4604      	mov	r4, r0
 800df80:	dd7b      	ble.n	800e07a <_dtoa_r+0x802>
 800df82:	2300      	movs	r3, #0
 800df84:	930a      	str	r3, [sp, #40]	; 0x28
 800df86:	6922      	ldr	r2, [r4, #16]
 800df88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800df8c:	6910      	ldr	r0, [r2, #16]
 800df8e:	f000 faad 	bl	800e4ec <__hi0bits>
 800df92:	f1c0 0020 	rsb	r0, r0, #32
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	4418      	add	r0, r3
 800df9a:	f010 001f 	ands.w	r0, r0, #31
 800df9e:	f000 808d 	beq.w	800e0bc <_dtoa_r+0x844>
 800dfa2:	f1c0 0220 	rsb	r2, r0, #32
 800dfa6:	2a04      	cmp	r2, #4
 800dfa8:	f340 8086 	ble.w	800e0b8 <_dtoa_r+0x840>
 800dfac:	f1c0 001c 	rsb	r0, r0, #28
 800dfb0:	9b05      	ldr	r3, [sp, #20]
 800dfb2:	4403      	add	r3, r0
 800dfb4:	9305      	str	r3, [sp, #20]
 800dfb6:	9b06      	ldr	r3, [sp, #24]
 800dfb8:	4403      	add	r3, r0
 800dfba:	4480      	add	r8, r0
 800dfbc:	9306      	str	r3, [sp, #24]
 800dfbe:	9b05      	ldr	r3, [sp, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	dd05      	ble.n	800dfd0 <_dtoa_r+0x758>
 800dfc4:	4629      	mov	r1, r5
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f000 fbf5 	bl	800e7b8 <__lshift>
 800dfce:	4605      	mov	r5, r0
 800dfd0:	9b06      	ldr	r3, [sp, #24]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	dd05      	ble.n	800dfe2 <_dtoa_r+0x76a>
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f000 fbec 	bl	800e7b8 <__lshift>
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d06b      	beq.n	800e0c0 <_dtoa_r+0x848>
 800dfe8:	4621      	mov	r1, r4
 800dfea:	4628      	mov	r0, r5
 800dfec:	f000 fc50 	bl	800e890 <__mcmp>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	da65      	bge.n	800e0c0 <_dtoa_r+0x848>
 800dff4:	2300      	movs	r3, #0
 800dff6:	4629      	mov	r1, r5
 800dff8:	220a      	movs	r2, #10
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 fa2c 	bl	800e458 <__multadd>
 800e000:	9b08      	ldr	r3, [sp, #32]
 800e002:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e006:	4605      	mov	r5, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 8192 	beq.w	800e332 <_dtoa_r+0xaba>
 800e00e:	4639      	mov	r1, r7
 800e010:	2300      	movs	r3, #0
 800e012:	220a      	movs	r2, #10
 800e014:	4630      	mov	r0, r6
 800e016:	f000 fa1f 	bl	800e458 <__multadd>
 800e01a:	f1ba 0f00 	cmp.w	sl, #0
 800e01e:	4607      	mov	r7, r0
 800e020:	f300 808e 	bgt.w	800e140 <_dtoa_r+0x8c8>
 800e024:	9b07      	ldr	r3, [sp, #28]
 800e026:	2b02      	cmp	r3, #2
 800e028:	dc51      	bgt.n	800e0ce <_dtoa_r+0x856>
 800e02a:	e089      	b.n	800e140 <_dtoa_r+0x8c8>
 800e02c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e02e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e032:	e751      	b.n	800ded8 <_dtoa_r+0x660>
 800e034:	f109 34ff 	add.w	r4, r9, #4294967295
 800e038:	42a3      	cmp	r3, r4
 800e03a:	bfbf      	itttt	lt
 800e03c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e03e:	1ae3      	sublt	r3, r4, r3
 800e040:	18d2      	addlt	r2, r2, r3
 800e042:	4613      	movlt	r3, r2
 800e044:	bfb7      	itett	lt
 800e046:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e048:	1b1c      	subge	r4, r3, r4
 800e04a:	4623      	movlt	r3, r4
 800e04c:	2400      	movlt	r4, #0
 800e04e:	f1b9 0f00 	cmp.w	r9, #0
 800e052:	bfb5      	itete	lt
 800e054:	9a05      	ldrlt	r2, [sp, #20]
 800e056:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e05a:	eba2 0809 	sublt.w	r8, r2, r9
 800e05e:	464a      	movge	r2, r9
 800e060:	bfb8      	it	lt
 800e062:	2200      	movlt	r2, #0
 800e064:	e73b      	b.n	800dede <_dtoa_r+0x666>
 800e066:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e06a:	9f08      	ldr	r7, [sp, #32]
 800e06c:	461c      	mov	r4, r3
 800e06e:	e743      	b.n	800def8 <_dtoa_r+0x680>
 800e070:	461a      	mov	r2, r3
 800e072:	e76f      	b.n	800df54 <_dtoa_r+0x6dc>
 800e074:	9b07      	ldr	r3, [sp, #28]
 800e076:	2b01      	cmp	r3, #1
 800e078:	dc18      	bgt.n	800e0ac <_dtoa_r+0x834>
 800e07a:	9b02      	ldr	r3, [sp, #8]
 800e07c:	b9b3      	cbnz	r3, 800e0ac <_dtoa_r+0x834>
 800e07e:	9b03      	ldr	r3, [sp, #12]
 800e080:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e084:	b9a2      	cbnz	r2, 800e0b0 <_dtoa_r+0x838>
 800e086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e08a:	0d12      	lsrs	r2, r2, #20
 800e08c:	0512      	lsls	r2, r2, #20
 800e08e:	b18a      	cbz	r2, 800e0b4 <_dtoa_r+0x83c>
 800e090:	9b05      	ldr	r3, [sp, #20]
 800e092:	3301      	adds	r3, #1
 800e094:	9305      	str	r3, [sp, #20]
 800e096:	9b06      	ldr	r3, [sp, #24]
 800e098:	3301      	adds	r3, #1
 800e09a:	9306      	str	r3, [sp, #24]
 800e09c:	2301      	movs	r3, #1
 800e09e:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f47f af6f 	bne.w	800df86 <_dtoa_r+0x70e>
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	e774      	b.n	800df96 <_dtoa_r+0x71e>
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e7f6      	b.n	800e09e <_dtoa_r+0x826>
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	e7f4      	b.n	800e09e <_dtoa_r+0x826>
 800e0b4:	920a      	str	r2, [sp, #40]	; 0x28
 800e0b6:	e7f3      	b.n	800e0a0 <_dtoa_r+0x828>
 800e0b8:	d081      	beq.n	800dfbe <_dtoa_r+0x746>
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	301c      	adds	r0, #28
 800e0be:	e777      	b.n	800dfb0 <_dtoa_r+0x738>
 800e0c0:	f1b9 0f00 	cmp.w	r9, #0
 800e0c4:	dc37      	bgt.n	800e136 <_dtoa_r+0x8be>
 800e0c6:	9b07      	ldr	r3, [sp, #28]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	dd34      	ble.n	800e136 <_dtoa_r+0x8be>
 800e0cc:	46ca      	mov	sl, r9
 800e0ce:	f1ba 0f00 	cmp.w	sl, #0
 800e0d2:	d10d      	bne.n	800e0f0 <_dtoa_r+0x878>
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4653      	mov	r3, sl
 800e0d8:	2205      	movs	r2, #5
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f000 f9bc 	bl	800e458 <__multadd>
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f000 fbd3 	bl	800e890 <__mcmp>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	f73f adde 	bgt.w	800dcac <_dtoa_r+0x434>
 800e0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f2:	f8dd 8000 	ldr.w	r8, [sp]
 800e0f6:	ea6f 0b03 	mvn.w	fp, r3
 800e0fa:	f04f 0900 	mov.w	r9, #0
 800e0fe:	4621      	mov	r1, r4
 800e100:	4630      	mov	r0, r6
 800e102:	f000 f987 	bl	800e414 <_Bfree>
 800e106:	2f00      	cmp	r7, #0
 800e108:	f43f aea7 	beq.w	800de5a <_dtoa_r+0x5e2>
 800e10c:	f1b9 0f00 	cmp.w	r9, #0
 800e110:	d005      	beq.n	800e11e <_dtoa_r+0x8a6>
 800e112:	45b9      	cmp	r9, r7
 800e114:	d003      	beq.n	800e11e <_dtoa_r+0x8a6>
 800e116:	4649      	mov	r1, r9
 800e118:	4630      	mov	r0, r6
 800e11a:	f000 f97b 	bl	800e414 <_Bfree>
 800e11e:	4639      	mov	r1, r7
 800e120:	4630      	mov	r0, r6
 800e122:	f000 f977 	bl	800e414 <_Bfree>
 800e126:	e698      	b.n	800de5a <_dtoa_r+0x5e2>
 800e128:	2400      	movs	r4, #0
 800e12a:	4627      	mov	r7, r4
 800e12c:	e7e0      	b.n	800e0f0 <_dtoa_r+0x878>
 800e12e:	46bb      	mov	fp, r7
 800e130:	4604      	mov	r4, r0
 800e132:	4607      	mov	r7, r0
 800e134:	e5ba      	b.n	800dcac <_dtoa_r+0x434>
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	46ca      	mov	sl, r9
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f000 8100 	beq.w	800e340 <_dtoa_r+0xac8>
 800e140:	f1b8 0f00 	cmp.w	r8, #0
 800e144:	dd05      	ble.n	800e152 <_dtoa_r+0x8da>
 800e146:	4639      	mov	r1, r7
 800e148:	4642      	mov	r2, r8
 800e14a:	4630      	mov	r0, r6
 800e14c:	f000 fb34 	bl	800e7b8 <__lshift>
 800e150:	4607      	mov	r7, r0
 800e152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e154:	2b00      	cmp	r3, #0
 800e156:	d05d      	beq.n	800e214 <_dtoa_r+0x99c>
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	4630      	mov	r0, r6
 800e15c:	f000 f91a 	bl	800e394 <_Balloc>
 800e160:	4680      	mov	r8, r0
 800e162:	b928      	cbnz	r0, 800e170 <_dtoa_r+0x8f8>
 800e164:	4b82      	ldr	r3, [pc, #520]	; (800e370 <_dtoa_r+0xaf8>)
 800e166:	4602      	mov	r2, r0
 800e168:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e16c:	f7ff bb9a 	b.w	800d8a4 <_dtoa_r+0x2c>
 800e170:	693a      	ldr	r2, [r7, #16]
 800e172:	3202      	adds	r2, #2
 800e174:	0092      	lsls	r2, r2, #2
 800e176:	f107 010c 	add.w	r1, r7, #12
 800e17a:	300c      	adds	r0, #12
 800e17c:	f7fe fe96 	bl	800ceac <memcpy>
 800e180:	2201      	movs	r2, #1
 800e182:	4641      	mov	r1, r8
 800e184:	4630      	mov	r0, r6
 800e186:	f000 fb17 	bl	800e7b8 <__lshift>
 800e18a:	9b00      	ldr	r3, [sp, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	9305      	str	r3, [sp, #20]
 800e190:	9b00      	ldr	r3, [sp, #0]
 800e192:	4453      	add	r3, sl
 800e194:	9309      	str	r3, [sp, #36]	; 0x24
 800e196:	9b02      	ldr	r3, [sp, #8]
 800e198:	f003 0301 	and.w	r3, r3, #1
 800e19c:	46b9      	mov	r9, r7
 800e19e:	9308      	str	r3, [sp, #32]
 800e1a0:	4607      	mov	r7, r0
 800e1a2:	9b05      	ldr	r3, [sp, #20]
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	9302      	str	r3, [sp, #8]
 800e1ac:	f7ff fad6 	bl	800d75c <quorem>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	3330      	adds	r3, #48	; 0x30
 800e1b4:	9006      	str	r0, [sp, #24]
 800e1b6:	4649      	mov	r1, r9
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e1bc:	f000 fb68 	bl	800e890 <__mcmp>
 800e1c0:	463a      	mov	r2, r7
 800e1c2:	4682      	mov	sl, r0
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f000 fb7e 	bl	800e8c8 <__mdiff>
 800e1cc:	68c2      	ldr	r2, [r0, #12]
 800e1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1d0:	4680      	mov	r8, r0
 800e1d2:	bb0a      	cbnz	r2, 800e218 <_dtoa_r+0x9a0>
 800e1d4:	4601      	mov	r1, r0
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f000 fb5a 	bl	800e890 <__mcmp>
 800e1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1de:	4602      	mov	r2, r0
 800e1e0:	4641      	mov	r1, r8
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	920e      	str	r2, [sp, #56]	; 0x38
 800e1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1e8:	f000 f914 	bl	800e414 <_Bfree>
 800e1ec:	9b07      	ldr	r3, [sp, #28]
 800e1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e1f4:	ea43 0102 	orr.w	r1, r3, r2
 800e1f8:	9b08      	ldr	r3, [sp, #32]
 800e1fa:	430b      	orrs	r3, r1
 800e1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fe:	d10d      	bne.n	800e21c <_dtoa_r+0x9a4>
 800e200:	2b39      	cmp	r3, #57	; 0x39
 800e202:	d029      	beq.n	800e258 <_dtoa_r+0x9e0>
 800e204:	f1ba 0f00 	cmp.w	sl, #0
 800e208:	dd01      	ble.n	800e20e <_dtoa_r+0x996>
 800e20a:	9b06      	ldr	r3, [sp, #24]
 800e20c:	3331      	adds	r3, #49	; 0x31
 800e20e:	9a02      	ldr	r2, [sp, #8]
 800e210:	7013      	strb	r3, [r2, #0]
 800e212:	e774      	b.n	800e0fe <_dtoa_r+0x886>
 800e214:	4638      	mov	r0, r7
 800e216:	e7b8      	b.n	800e18a <_dtoa_r+0x912>
 800e218:	2201      	movs	r2, #1
 800e21a:	e7e1      	b.n	800e1e0 <_dtoa_r+0x968>
 800e21c:	f1ba 0f00 	cmp.w	sl, #0
 800e220:	db06      	blt.n	800e230 <_dtoa_r+0x9b8>
 800e222:	9907      	ldr	r1, [sp, #28]
 800e224:	ea41 0a0a 	orr.w	sl, r1, sl
 800e228:	9908      	ldr	r1, [sp, #32]
 800e22a:	ea5a 0101 	orrs.w	r1, sl, r1
 800e22e:	d120      	bne.n	800e272 <_dtoa_r+0x9fa>
 800e230:	2a00      	cmp	r2, #0
 800e232:	ddec      	ble.n	800e20e <_dtoa_r+0x996>
 800e234:	4629      	mov	r1, r5
 800e236:	2201      	movs	r2, #1
 800e238:	4630      	mov	r0, r6
 800e23a:	9305      	str	r3, [sp, #20]
 800e23c:	f000 fabc 	bl	800e7b8 <__lshift>
 800e240:	4621      	mov	r1, r4
 800e242:	4605      	mov	r5, r0
 800e244:	f000 fb24 	bl	800e890 <__mcmp>
 800e248:	2800      	cmp	r0, #0
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	dc02      	bgt.n	800e254 <_dtoa_r+0x9dc>
 800e24e:	d1de      	bne.n	800e20e <_dtoa_r+0x996>
 800e250:	07da      	lsls	r2, r3, #31
 800e252:	d5dc      	bpl.n	800e20e <_dtoa_r+0x996>
 800e254:	2b39      	cmp	r3, #57	; 0x39
 800e256:	d1d8      	bne.n	800e20a <_dtoa_r+0x992>
 800e258:	9a02      	ldr	r2, [sp, #8]
 800e25a:	2339      	movs	r3, #57	; 0x39
 800e25c:	7013      	strb	r3, [r2, #0]
 800e25e:	4643      	mov	r3, r8
 800e260:	4698      	mov	r8, r3
 800e262:	3b01      	subs	r3, #1
 800e264:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e268:	2a39      	cmp	r2, #57	; 0x39
 800e26a:	d051      	beq.n	800e310 <_dtoa_r+0xa98>
 800e26c:	3201      	adds	r2, #1
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	e745      	b.n	800e0fe <_dtoa_r+0x886>
 800e272:	2a00      	cmp	r2, #0
 800e274:	dd03      	ble.n	800e27e <_dtoa_r+0xa06>
 800e276:	2b39      	cmp	r3, #57	; 0x39
 800e278:	d0ee      	beq.n	800e258 <_dtoa_r+0x9e0>
 800e27a:	3301      	adds	r3, #1
 800e27c:	e7c7      	b.n	800e20e <_dtoa_r+0x996>
 800e27e:	9a05      	ldr	r2, [sp, #20]
 800e280:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e282:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e286:	428a      	cmp	r2, r1
 800e288:	d02b      	beq.n	800e2e2 <_dtoa_r+0xa6a>
 800e28a:	4629      	mov	r1, r5
 800e28c:	2300      	movs	r3, #0
 800e28e:	220a      	movs	r2, #10
 800e290:	4630      	mov	r0, r6
 800e292:	f000 f8e1 	bl	800e458 <__multadd>
 800e296:	45b9      	cmp	r9, r7
 800e298:	4605      	mov	r5, r0
 800e29a:	f04f 0300 	mov.w	r3, #0
 800e29e:	f04f 020a 	mov.w	r2, #10
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	d107      	bne.n	800e2b8 <_dtoa_r+0xa40>
 800e2a8:	f000 f8d6 	bl	800e458 <__multadd>
 800e2ac:	4681      	mov	r9, r0
 800e2ae:	4607      	mov	r7, r0
 800e2b0:	9b05      	ldr	r3, [sp, #20]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	9305      	str	r3, [sp, #20]
 800e2b6:	e774      	b.n	800e1a2 <_dtoa_r+0x92a>
 800e2b8:	f000 f8ce 	bl	800e458 <__multadd>
 800e2bc:	4639      	mov	r1, r7
 800e2be:	4681      	mov	r9, r0
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	220a      	movs	r2, #10
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f000 f8c7 	bl	800e458 <__multadd>
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	e7f0      	b.n	800e2b0 <_dtoa_r+0xa38>
 800e2ce:	f1ba 0f00 	cmp.w	sl, #0
 800e2d2:	9a00      	ldr	r2, [sp, #0]
 800e2d4:	bfcc      	ite	gt
 800e2d6:	46d0      	movgt	r8, sl
 800e2d8:	f04f 0801 	movle.w	r8, #1
 800e2dc:	4490      	add	r8, r2
 800e2de:	f04f 0900 	mov.w	r9, #0
 800e2e2:	4629      	mov	r1, r5
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	9302      	str	r3, [sp, #8]
 800e2ea:	f000 fa65 	bl	800e7b8 <__lshift>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	f000 facd 	bl	800e890 <__mcmp>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	dcb1      	bgt.n	800e25e <_dtoa_r+0x9e6>
 800e2fa:	d102      	bne.n	800e302 <_dtoa_r+0xa8a>
 800e2fc:	9b02      	ldr	r3, [sp, #8]
 800e2fe:	07db      	lsls	r3, r3, #31
 800e300:	d4ad      	bmi.n	800e25e <_dtoa_r+0x9e6>
 800e302:	4643      	mov	r3, r8
 800e304:	4698      	mov	r8, r3
 800e306:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e30a:	2a30      	cmp	r2, #48	; 0x30
 800e30c:	d0fa      	beq.n	800e304 <_dtoa_r+0xa8c>
 800e30e:	e6f6      	b.n	800e0fe <_dtoa_r+0x886>
 800e310:	9a00      	ldr	r2, [sp, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d1a4      	bne.n	800e260 <_dtoa_r+0x9e8>
 800e316:	f10b 0b01 	add.w	fp, fp, #1
 800e31a:	2331      	movs	r3, #49	; 0x31
 800e31c:	e778      	b.n	800e210 <_dtoa_r+0x998>
 800e31e:	4b15      	ldr	r3, [pc, #84]	; (800e374 <_dtoa_r+0xafc>)
 800e320:	f7ff bb12 	b.w	800d948 <_dtoa_r+0xd0>
 800e324:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e326:	2b00      	cmp	r3, #0
 800e328:	f47f aaee 	bne.w	800d908 <_dtoa_r+0x90>
 800e32c:	4b12      	ldr	r3, [pc, #72]	; (800e378 <_dtoa_r+0xb00>)
 800e32e:	f7ff bb0b 	b.w	800d948 <_dtoa_r+0xd0>
 800e332:	f1ba 0f00 	cmp.w	sl, #0
 800e336:	dc03      	bgt.n	800e340 <_dtoa_r+0xac8>
 800e338:	9b07      	ldr	r3, [sp, #28]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	f73f aec7 	bgt.w	800e0ce <_dtoa_r+0x856>
 800e340:	f8dd 8000 	ldr.w	r8, [sp]
 800e344:	4621      	mov	r1, r4
 800e346:	4628      	mov	r0, r5
 800e348:	f7ff fa08 	bl	800d75c <quorem>
 800e34c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e350:	f808 3b01 	strb.w	r3, [r8], #1
 800e354:	9a00      	ldr	r2, [sp, #0]
 800e356:	eba8 0202 	sub.w	r2, r8, r2
 800e35a:	4592      	cmp	sl, r2
 800e35c:	ddb7      	ble.n	800e2ce <_dtoa_r+0xa56>
 800e35e:	4629      	mov	r1, r5
 800e360:	2300      	movs	r3, #0
 800e362:	220a      	movs	r2, #10
 800e364:	4630      	mov	r0, r6
 800e366:	f000 f877 	bl	800e458 <__multadd>
 800e36a:	4605      	mov	r5, r0
 800e36c:	e7ea      	b.n	800e344 <_dtoa_r+0xacc>
 800e36e:	bf00      	nop
 800e370:	0801040b 	.word	0x0801040b
 800e374:	08010364 	.word	0x08010364
 800e378:	08010388 	.word	0x08010388

0800e37c <_localeconv_r>:
 800e37c:	4800      	ldr	r0, [pc, #0]	; (800e380 <_localeconv_r+0x4>)
 800e37e:	4770      	bx	lr
 800e380:	24000174 	.word	0x24000174

0800e384 <malloc>:
 800e384:	4b02      	ldr	r3, [pc, #8]	; (800e390 <malloc+0xc>)
 800e386:	4601      	mov	r1, r0
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f000 bbe1 	b.w	800eb50 <_malloc_r>
 800e38e:	bf00      	nop
 800e390:	24000020 	.word	0x24000020

0800e394 <_Balloc>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e398:	4604      	mov	r4, r0
 800e39a:	460d      	mov	r5, r1
 800e39c:	b976      	cbnz	r6, 800e3bc <_Balloc+0x28>
 800e39e:	2010      	movs	r0, #16
 800e3a0:	f7ff fff0 	bl	800e384 <malloc>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6260      	str	r0, [r4, #36]	; 0x24
 800e3a8:	b920      	cbnz	r0, 800e3b4 <_Balloc+0x20>
 800e3aa:	4b18      	ldr	r3, [pc, #96]	; (800e40c <_Balloc+0x78>)
 800e3ac:	4818      	ldr	r0, [pc, #96]	; (800e410 <_Balloc+0x7c>)
 800e3ae:	2166      	movs	r1, #102	; 0x66
 800e3b0:	f000 fc38 	bl	800ec24 <__assert_func>
 800e3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3b8:	6006      	str	r6, [r0, #0]
 800e3ba:	60c6      	str	r6, [r0, #12]
 800e3bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e3be:	68f3      	ldr	r3, [r6, #12]
 800e3c0:	b183      	cbz	r3, 800e3e4 <_Balloc+0x50>
 800e3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3ca:	b9b8      	cbnz	r0, 800e3fc <_Balloc+0x68>
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	fa01 f605 	lsl.w	r6, r1, r5
 800e3d2:	1d72      	adds	r2, r6, #5
 800e3d4:	0092      	lsls	r2, r2, #2
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 fb5a 	bl	800ea90 <_calloc_r>
 800e3dc:	b160      	cbz	r0, 800e3f8 <_Balloc+0x64>
 800e3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3e2:	e00e      	b.n	800e402 <_Balloc+0x6e>
 800e3e4:	2221      	movs	r2, #33	; 0x21
 800e3e6:	2104      	movs	r1, #4
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fb51 	bl	800ea90 <_calloc_r>
 800e3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3f0:	60f0      	str	r0, [r6, #12]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1e4      	bne.n	800e3c2 <_Balloc+0x2e>
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	6802      	ldr	r2, [r0, #0]
 800e3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e402:	2300      	movs	r3, #0
 800e404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e408:	e7f7      	b.n	800e3fa <_Balloc+0x66>
 800e40a:	bf00      	nop
 800e40c:	08010395 	.word	0x08010395
 800e410:	0801041c 	.word	0x0801041c

0800e414 <_Bfree>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e418:	4605      	mov	r5, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	b976      	cbnz	r6, 800e43c <_Bfree+0x28>
 800e41e:	2010      	movs	r0, #16
 800e420:	f7ff ffb0 	bl	800e384 <malloc>
 800e424:	4602      	mov	r2, r0
 800e426:	6268      	str	r0, [r5, #36]	; 0x24
 800e428:	b920      	cbnz	r0, 800e434 <_Bfree+0x20>
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <_Bfree+0x3c>)
 800e42c:	4809      	ldr	r0, [pc, #36]	; (800e454 <_Bfree+0x40>)
 800e42e:	218a      	movs	r1, #138	; 0x8a
 800e430:	f000 fbf8 	bl	800ec24 <__assert_func>
 800e434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e438:	6006      	str	r6, [r0, #0]
 800e43a:	60c6      	str	r6, [r0, #12]
 800e43c:	b13c      	cbz	r4, 800e44e <_Bfree+0x3a>
 800e43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e440:	6862      	ldr	r2, [r4, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e448:	6021      	str	r1, [r4, #0]
 800e44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e44e:	bd70      	pop	{r4, r5, r6, pc}
 800e450:	08010395 	.word	0x08010395
 800e454:	0801041c 	.word	0x0801041c

0800e458 <__multadd>:
 800e458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45c:	690e      	ldr	r6, [r1, #16]
 800e45e:	4607      	mov	r7, r0
 800e460:	4698      	mov	r8, r3
 800e462:	460c      	mov	r4, r1
 800e464:	f101 0014 	add.w	r0, r1, #20
 800e468:	2300      	movs	r3, #0
 800e46a:	6805      	ldr	r5, [r0, #0]
 800e46c:	b2a9      	uxth	r1, r5
 800e46e:	fb02 8101 	mla	r1, r2, r1, r8
 800e472:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e476:	0c2d      	lsrs	r5, r5, #16
 800e478:	fb02 c505 	mla	r5, r2, r5, ip
 800e47c:	b289      	uxth	r1, r1
 800e47e:	3301      	adds	r3, #1
 800e480:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e484:	429e      	cmp	r6, r3
 800e486:	f840 1b04 	str.w	r1, [r0], #4
 800e48a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e48e:	dcec      	bgt.n	800e46a <__multadd+0x12>
 800e490:	f1b8 0f00 	cmp.w	r8, #0
 800e494:	d022      	beq.n	800e4dc <__multadd+0x84>
 800e496:	68a3      	ldr	r3, [r4, #8]
 800e498:	42b3      	cmp	r3, r6
 800e49a:	dc19      	bgt.n	800e4d0 <__multadd+0x78>
 800e49c:	6861      	ldr	r1, [r4, #4]
 800e49e:	4638      	mov	r0, r7
 800e4a0:	3101      	adds	r1, #1
 800e4a2:	f7ff ff77 	bl	800e394 <_Balloc>
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	b928      	cbnz	r0, 800e4b6 <__multadd+0x5e>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <__multadd+0x8c>)
 800e4ae:	480e      	ldr	r0, [pc, #56]	; (800e4e8 <__multadd+0x90>)
 800e4b0:	21b5      	movs	r1, #181	; 0xb5
 800e4b2:	f000 fbb7 	bl	800ec24 <__assert_func>
 800e4b6:	6922      	ldr	r2, [r4, #16]
 800e4b8:	3202      	adds	r2, #2
 800e4ba:	f104 010c 	add.w	r1, r4, #12
 800e4be:	0092      	lsls	r2, r2, #2
 800e4c0:	300c      	adds	r0, #12
 800e4c2:	f7fe fcf3 	bl	800ceac <memcpy>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	f7ff ffa3 	bl	800e414 <_Bfree>
 800e4ce:	462c      	mov	r4, r5
 800e4d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e4d4:	3601      	adds	r6, #1
 800e4d6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e4da:	6126      	str	r6, [r4, #16]
 800e4dc:	4620      	mov	r0, r4
 800e4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e2:	bf00      	nop
 800e4e4:	0801040b 	.word	0x0801040b
 800e4e8:	0801041c 	.word	0x0801041c

0800e4ec <__hi0bits>:
 800e4ec:	0c03      	lsrs	r3, r0, #16
 800e4ee:	041b      	lsls	r3, r3, #16
 800e4f0:	b9d3      	cbnz	r3, 800e528 <__hi0bits+0x3c>
 800e4f2:	0400      	lsls	r0, r0, #16
 800e4f4:	2310      	movs	r3, #16
 800e4f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e4fa:	bf04      	itt	eq
 800e4fc:	0200      	lsleq	r0, r0, #8
 800e4fe:	3308      	addeq	r3, #8
 800e500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e504:	bf04      	itt	eq
 800e506:	0100      	lsleq	r0, r0, #4
 800e508:	3304      	addeq	r3, #4
 800e50a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e50e:	bf04      	itt	eq
 800e510:	0080      	lsleq	r0, r0, #2
 800e512:	3302      	addeq	r3, #2
 800e514:	2800      	cmp	r0, #0
 800e516:	db05      	blt.n	800e524 <__hi0bits+0x38>
 800e518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e51c:	f103 0301 	add.w	r3, r3, #1
 800e520:	bf08      	it	eq
 800e522:	2320      	moveq	r3, #32
 800e524:	4618      	mov	r0, r3
 800e526:	4770      	bx	lr
 800e528:	2300      	movs	r3, #0
 800e52a:	e7e4      	b.n	800e4f6 <__hi0bits+0xa>

0800e52c <__lo0bits>:
 800e52c:	6803      	ldr	r3, [r0, #0]
 800e52e:	f013 0207 	ands.w	r2, r3, #7
 800e532:	4601      	mov	r1, r0
 800e534:	d00b      	beq.n	800e54e <__lo0bits+0x22>
 800e536:	07da      	lsls	r2, r3, #31
 800e538:	d424      	bmi.n	800e584 <__lo0bits+0x58>
 800e53a:	0798      	lsls	r0, r3, #30
 800e53c:	bf49      	itett	mi
 800e53e:	085b      	lsrmi	r3, r3, #1
 800e540:	089b      	lsrpl	r3, r3, #2
 800e542:	2001      	movmi	r0, #1
 800e544:	600b      	strmi	r3, [r1, #0]
 800e546:	bf5c      	itt	pl
 800e548:	600b      	strpl	r3, [r1, #0]
 800e54a:	2002      	movpl	r0, #2
 800e54c:	4770      	bx	lr
 800e54e:	b298      	uxth	r0, r3
 800e550:	b9b0      	cbnz	r0, 800e580 <__lo0bits+0x54>
 800e552:	0c1b      	lsrs	r3, r3, #16
 800e554:	2010      	movs	r0, #16
 800e556:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e55a:	bf04      	itt	eq
 800e55c:	0a1b      	lsreq	r3, r3, #8
 800e55e:	3008      	addeq	r0, #8
 800e560:	071a      	lsls	r2, r3, #28
 800e562:	bf04      	itt	eq
 800e564:	091b      	lsreq	r3, r3, #4
 800e566:	3004      	addeq	r0, #4
 800e568:	079a      	lsls	r2, r3, #30
 800e56a:	bf04      	itt	eq
 800e56c:	089b      	lsreq	r3, r3, #2
 800e56e:	3002      	addeq	r0, #2
 800e570:	07da      	lsls	r2, r3, #31
 800e572:	d403      	bmi.n	800e57c <__lo0bits+0x50>
 800e574:	085b      	lsrs	r3, r3, #1
 800e576:	f100 0001 	add.w	r0, r0, #1
 800e57a:	d005      	beq.n	800e588 <__lo0bits+0x5c>
 800e57c:	600b      	str	r3, [r1, #0]
 800e57e:	4770      	bx	lr
 800e580:	4610      	mov	r0, r2
 800e582:	e7e8      	b.n	800e556 <__lo0bits+0x2a>
 800e584:	2000      	movs	r0, #0
 800e586:	4770      	bx	lr
 800e588:	2020      	movs	r0, #32
 800e58a:	4770      	bx	lr

0800e58c <__i2b>:
 800e58c:	b510      	push	{r4, lr}
 800e58e:	460c      	mov	r4, r1
 800e590:	2101      	movs	r1, #1
 800e592:	f7ff feff 	bl	800e394 <_Balloc>
 800e596:	4602      	mov	r2, r0
 800e598:	b928      	cbnz	r0, 800e5a6 <__i2b+0x1a>
 800e59a:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <__i2b+0x24>)
 800e59c:	4805      	ldr	r0, [pc, #20]	; (800e5b4 <__i2b+0x28>)
 800e59e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e5a2:	f000 fb3f 	bl	800ec24 <__assert_func>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	6144      	str	r4, [r0, #20]
 800e5aa:	6103      	str	r3, [r0, #16]
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	bf00      	nop
 800e5b0:	0801040b 	.word	0x0801040b
 800e5b4:	0801041c 	.word	0x0801041c

0800e5b8 <__multiply>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	4614      	mov	r4, r2
 800e5be:	690a      	ldr	r2, [r1, #16]
 800e5c0:	6923      	ldr	r3, [r4, #16]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	bfb8      	it	lt
 800e5c6:	460b      	movlt	r3, r1
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	bfbc      	itt	lt
 800e5cc:	4625      	movlt	r5, r4
 800e5ce:	461c      	movlt	r4, r3
 800e5d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e5d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e5d8:	68ab      	ldr	r3, [r5, #8]
 800e5da:	6869      	ldr	r1, [r5, #4]
 800e5dc:	eb0a 0709 	add.w	r7, sl, r9
 800e5e0:	42bb      	cmp	r3, r7
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	bfb8      	it	lt
 800e5e6:	3101      	addlt	r1, #1
 800e5e8:	f7ff fed4 	bl	800e394 <_Balloc>
 800e5ec:	b930      	cbnz	r0, 800e5fc <__multiply+0x44>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	4b42      	ldr	r3, [pc, #264]	; (800e6fc <__multiply+0x144>)
 800e5f2:	4843      	ldr	r0, [pc, #268]	; (800e700 <__multiply+0x148>)
 800e5f4:	f240 115d 	movw	r1, #349	; 0x15d
 800e5f8:	f000 fb14 	bl	800ec24 <__assert_func>
 800e5fc:	f100 0614 	add.w	r6, r0, #20
 800e600:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e604:	4633      	mov	r3, r6
 800e606:	2200      	movs	r2, #0
 800e608:	4543      	cmp	r3, r8
 800e60a:	d31e      	bcc.n	800e64a <__multiply+0x92>
 800e60c:	f105 0c14 	add.w	ip, r5, #20
 800e610:	f104 0314 	add.w	r3, r4, #20
 800e614:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e618:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e61c:	9202      	str	r2, [sp, #8]
 800e61e:	ebac 0205 	sub.w	r2, ip, r5
 800e622:	3a15      	subs	r2, #21
 800e624:	f022 0203 	bic.w	r2, r2, #3
 800e628:	3204      	adds	r2, #4
 800e62a:	f105 0115 	add.w	r1, r5, #21
 800e62e:	458c      	cmp	ip, r1
 800e630:	bf38      	it	cc
 800e632:	2204      	movcc	r2, #4
 800e634:	9201      	str	r2, [sp, #4]
 800e636:	9a02      	ldr	r2, [sp, #8]
 800e638:	9303      	str	r3, [sp, #12]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d808      	bhi.n	800e650 <__multiply+0x98>
 800e63e:	2f00      	cmp	r7, #0
 800e640:	dc55      	bgt.n	800e6ee <__multiply+0x136>
 800e642:	6107      	str	r7, [r0, #16]
 800e644:	b005      	add	sp, #20
 800e646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64a:	f843 2b04 	str.w	r2, [r3], #4
 800e64e:	e7db      	b.n	800e608 <__multiply+0x50>
 800e650:	f8b3 a000 	ldrh.w	sl, [r3]
 800e654:	f1ba 0f00 	cmp.w	sl, #0
 800e658:	d020      	beq.n	800e69c <__multiply+0xe4>
 800e65a:	f105 0e14 	add.w	lr, r5, #20
 800e65e:	46b1      	mov	r9, r6
 800e660:	2200      	movs	r2, #0
 800e662:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e666:	f8d9 b000 	ldr.w	fp, [r9]
 800e66a:	b2a1      	uxth	r1, r4
 800e66c:	fa1f fb8b 	uxth.w	fp, fp
 800e670:	fb0a b101 	mla	r1, sl, r1, fp
 800e674:	4411      	add	r1, r2
 800e676:	f8d9 2000 	ldr.w	r2, [r9]
 800e67a:	0c24      	lsrs	r4, r4, #16
 800e67c:	0c12      	lsrs	r2, r2, #16
 800e67e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e682:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e686:	b289      	uxth	r1, r1
 800e688:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e68c:	45f4      	cmp	ip, lr
 800e68e:	f849 1b04 	str.w	r1, [r9], #4
 800e692:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e696:	d8e4      	bhi.n	800e662 <__multiply+0xaa>
 800e698:	9901      	ldr	r1, [sp, #4]
 800e69a:	5072      	str	r2, [r6, r1]
 800e69c:	9a03      	ldr	r2, [sp, #12]
 800e69e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	f1b9 0f00 	cmp.w	r9, #0
 800e6a8:	d01f      	beq.n	800e6ea <__multiply+0x132>
 800e6aa:	6834      	ldr	r4, [r6, #0]
 800e6ac:	f105 0114 	add.w	r1, r5, #20
 800e6b0:	46b6      	mov	lr, r6
 800e6b2:	f04f 0a00 	mov.w	sl, #0
 800e6b6:	880a      	ldrh	r2, [r1, #0]
 800e6b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e6bc:	fb09 b202 	mla	r2, r9, r2, fp
 800e6c0:	4492      	add	sl, r2
 800e6c2:	b2a4      	uxth	r4, r4
 800e6c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e6c8:	f84e 4b04 	str.w	r4, [lr], #4
 800e6cc:	f851 4b04 	ldr.w	r4, [r1], #4
 800e6d0:	f8be 2000 	ldrh.w	r2, [lr]
 800e6d4:	0c24      	lsrs	r4, r4, #16
 800e6d6:	fb09 2404 	mla	r4, r9, r4, r2
 800e6da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e6de:	458c      	cmp	ip, r1
 800e6e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e6e4:	d8e7      	bhi.n	800e6b6 <__multiply+0xfe>
 800e6e6:	9a01      	ldr	r2, [sp, #4]
 800e6e8:	50b4      	str	r4, [r6, r2]
 800e6ea:	3604      	adds	r6, #4
 800e6ec:	e7a3      	b.n	800e636 <__multiply+0x7e>
 800e6ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1a5      	bne.n	800e642 <__multiply+0x8a>
 800e6f6:	3f01      	subs	r7, #1
 800e6f8:	e7a1      	b.n	800e63e <__multiply+0x86>
 800e6fa:	bf00      	nop
 800e6fc:	0801040b 	.word	0x0801040b
 800e700:	0801041c 	.word	0x0801041c

0800e704 <__pow5mult>:
 800e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e708:	4615      	mov	r5, r2
 800e70a:	f012 0203 	ands.w	r2, r2, #3
 800e70e:	4606      	mov	r6, r0
 800e710:	460f      	mov	r7, r1
 800e712:	d007      	beq.n	800e724 <__pow5mult+0x20>
 800e714:	4c25      	ldr	r4, [pc, #148]	; (800e7ac <__pow5mult+0xa8>)
 800e716:	3a01      	subs	r2, #1
 800e718:	2300      	movs	r3, #0
 800e71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e71e:	f7ff fe9b 	bl	800e458 <__multadd>
 800e722:	4607      	mov	r7, r0
 800e724:	10ad      	asrs	r5, r5, #2
 800e726:	d03d      	beq.n	800e7a4 <__pow5mult+0xa0>
 800e728:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e72a:	b97c      	cbnz	r4, 800e74c <__pow5mult+0x48>
 800e72c:	2010      	movs	r0, #16
 800e72e:	f7ff fe29 	bl	800e384 <malloc>
 800e732:	4602      	mov	r2, r0
 800e734:	6270      	str	r0, [r6, #36]	; 0x24
 800e736:	b928      	cbnz	r0, 800e744 <__pow5mult+0x40>
 800e738:	4b1d      	ldr	r3, [pc, #116]	; (800e7b0 <__pow5mult+0xac>)
 800e73a:	481e      	ldr	r0, [pc, #120]	; (800e7b4 <__pow5mult+0xb0>)
 800e73c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e740:	f000 fa70 	bl	800ec24 <__assert_func>
 800e744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e748:	6004      	str	r4, [r0, #0]
 800e74a:	60c4      	str	r4, [r0, #12]
 800e74c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e754:	b94c      	cbnz	r4, 800e76a <__pow5mult+0x66>
 800e756:	f240 2171 	movw	r1, #625	; 0x271
 800e75a:	4630      	mov	r0, r6
 800e75c:	f7ff ff16 	bl	800e58c <__i2b>
 800e760:	2300      	movs	r3, #0
 800e762:	f8c8 0008 	str.w	r0, [r8, #8]
 800e766:	4604      	mov	r4, r0
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	f04f 0900 	mov.w	r9, #0
 800e76e:	07eb      	lsls	r3, r5, #31
 800e770:	d50a      	bpl.n	800e788 <__pow5mult+0x84>
 800e772:	4639      	mov	r1, r7
 800e774:	4622      	mov	r2, r4
 800e776:	4630      	mov	r0, r6
 800e778:	f7ff ff1e 	bl	800e5b8 <__multiply>
 800e77c:	4639      	mov	r1, r7
 800e77e:	4680      	mov	r8, r0
 800e780:	4630      	mov	r0, r6
 800e782:	f7ff fe47 	bl	800e414 <_Bfree>
 800e786:	4647      	mov	r7, r8
 800e788:	106d      	asrs	r5, r5, #1
 800e78a:	d00b      	beq.n	800e7a4 <__pow5mult+0xa0>
 800e78c:	6820      	ldr	r0, [r4, #0]
 800e78e:	b938      	cbnz	r0, 800e7a0 <__pow5mult+0x9c>
 800e790:	4622      	mov	r2, r4
 800e792:	4621      	mov	r1, r4
 800e794:	4630      	mov	r0, r6
 800e796:	f7ff ff0f 	bl	800e5b8 <__multiply>
 800e79a:	6020      	str	r0, [r4, #0]
 800e79c:	f8c0 9000 	str.w	r9, [r0]
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	e7e4      	b.n	800e76e <__pow5mult+0x6a>
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08010570 	.word	0x08010570
 800e7b0:	08010395 	.word	0x08010395
 800e7b4:	0801041c 	.word	0x0801041c

0800e7b8 <__lshift>:
 800e7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7bc:	460c      	mov	r4, r1
 800e7be:	6849      	ldr	r1, [r1, #4]
 800e7c0:	6923      	ldr	r3, [r4, #16]
 800e7c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	4691      	mov	r9, r2
 800e7cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7d0:	f108 0601 	add.w	r6, r8, #1
 800e7d4:	42b3      	cmp	r3, r6
 800e7d6:	db0b      	blt.n	800e7f0 <__lshift+0x38>
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff fddb 	bl	800e394 <_Balloc>
 800e7de:	4605      	mov	r5, r0
 800e7e0:	b948      	cbnz	r0, 800e7f6 <__lshift+0x3e>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	4b28      	ldr	r3, [pc, #160]	; (800e888 <__lshift+0xd0>)
 800e7e6:	4829      	ldr	r0, [pc, #164]	; (800e88c <__lshift+0xd4>)
 800e7e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e7ec:	f000 fa1a 	bl	800ec24 <__assert_func>
 800e7f0:	3101      	adds	r1, #1
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	e7ee      	b.n	800e7d4 <__lshift+0x1c>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f100 0114 	add.w	r1, r0, #20
 800e7fc:	f100 0210 	add.w	r2, r0, #16
 800e800:	4618      	mov	r0, r3
 800e802:	4553      	cmp	r3, sl
 800e804:	db33      	blt.n	800e86e <__lshift+0xb6>
 800e806:	6920      	ldr	r0, [r4, #16]
 800e808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e80c:	f104 0314 	add.w	r3, r4, #20
 800e810:	f019 091f 	ands.w	r9, r9, #31
 800e814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e81c:	d02b      	beq.n	800e876 <__lshift+0xbe>
 800e81e:	f1c9 0e20 	rsb	lr, r9, #32
 800e822:	468a      	mov	sl, r1
 800e824:	2200      	movs	r2, #0
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	fa00 f009 	lsl.w	r0, r0, r9
 800e82c:	4302      	orrs	r2, r0
 800e82e:	f84a 2b04 	str.w	r2, [sl], #4
 800e832:	f853 2b04 	ldr.w	r2, [r3], #4
 800e836:	459c      	cmp	ip, r3
 800e838:	fa22 f20e 	lsr.w	r2, r2, lr
 800e83c:	d8f3      	bhi.n	800e826 <__lshift+0x6e>
 800e83e:	ebac 0304 	sub.w	r3, ip, r4
 800e842:	3b15      	subs	r3, #21
 800e844:	f023 0303 	bic.w	r3, r3, #3
 800e848:	3304      	adds	r3, #4
 800e84a:	f104 0015 	add.w	r0, r4, #21
 800e84e:	4584      	cmp	ip, r0
 800e850:	bf38      	it	cc
 800e852:	2304      	movcc	r3, #4
 800e854:	50ca      	str	r2, [r1, r3]
 800e856:	b10a      	cbz	r2, 800e85c <__lshift+0xa4>
 800e858:	f108 0602 	add.w	r6, r8, #2
 800e85c:	3e01      	subs	r6, #1
 800e85e:	4638      	mov	r0, r7
 800e860:	612e      	str	r6, [r5, #16]
 800e862:	4621      	mov	r1, r4
 800e864:	f7ff fdd6 	bl	800e414 <_Bfree>
 800e868:	4628      	mov	r0, r5
 800e86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e872:	3301      	adds	r3, #1
 800e874:	e7c5      	b.n	800e802 <__lshift+0x4a>
 800e876:	3904      	subs	r1, #4
 800e878:	f853 2b04 	ldr.w	r2, [r3], #4
 800e87c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e880:	459c      	cmp	ip, r3
 800e882:	d8f9      	bhi.n	800e878 <__lshift+0xc0>
 800e884:	e7ea      	b.n	800e85c <__lshift+0xa4>
 800e886:	bf00      	nop
 800e888:	0801040b 	.word	0x0801040b
 800e88c:	0801041c 	.word	0x0801041c

0800e890 <__mcmp>:
 800e890:	b530      	push	{r4, r5, lr}
 800e892:	6902      	ldr	r2, [r0, #16]
 800e894:	690c      	ldr	r4, [r1, #16]
 800e896:	1b12      	subs	r2, r2, r4
 800e898:	d10e      	bne.n	800e8b8 <__mcmp+0x28>
 800e89a:	f100 0314 	add.w	r3, r0, #20
 800e89e:	3114      	adds	r1, #20
 800e8a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8b0:	42a5      	cmp	r5, r4
 800e8b2:	d003      	beq.n	800e8bc <__mcmp+0x2c>
 800e8b4:	d305      	bcc.n	800e8c2 <__mcmp+0x32>
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	bd30      	pop	{r4, r5, pc}
 800e8bc:	4283      	cmp	r3, r0
 800e8be:	d3f3      	bcc.n	800e8a8 <__mcmp+0x18>
 800e8c0:	e7fa      	b.n	800e8b8 <__mcmp+0x28>
 800e8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c6:	e7f7      	b.n	800e8b8 <__mcmp+0x28>

0800e8c8 <__mdiff>:
 800e8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4617      	mov	r7, r2
 800e8d6:	f7ff ffdb 	bl	800e890 <__mcmp>
 800e8da:	1e05      	subs	r5, r0, #0
 800e8dc:	d110      	bne.n	800e900 <__mdiff+0x38>
 800e8de:	4629      	mov	r1, r5
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f7ff fd57 	bl	800e394 <_Balloc>
 800e8e6:	b930      	cbnz	r0, 800e8f6 <__mdiff+0x2e>
 800e8e8:	4b39      	ldr	r3, [pc, #228]	; (800e9d0 <__mdiff+0x108>)
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	f240 2132 	movw	r1, #562	; 0x232
 800e8f0:	4838      	ldr	r0, [pc, #224]	; (800e9d4 <__mdiff+0x10c>)
 800e8f2:	f000 f997 	bl	800ec24 <__assert_func>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e900:	bfa4      	itt	ge
 800e902:	463b      	movge	r3, r7
 800e904:	4627      	movge	r7, r4
 800e906:	4630      	mov	r0, r6
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	bfa6      	itte	ge
 800e90c:	461c      	movge	r4, r3
 800e90e:	2500      	movge	r5, #0
 800e910:	2501      	movlt	r5, #1
 800e912:	f7ff fd3f 	bl	800e394 <_Balloc>
 800e916:	b920      	cbnz	r0, 800e922 <__mdiff+0x5a>
 800e918:	4b2d      	ldr	r3, [pc, #180]	; (800e9d0 <__mdiff+0x108>)
 800e91a:	4602      	mov	r2, r0
 800e91c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e920:	e7e6      	b.n	800e8f0 <__mdiff+0x28>
 800e922:	693e      	ldr	r6, [r7, #16]
 800e924:	60c5      	str	r5, [r0, #12]
 800e926:	6925      	ldr	r5, [r4, #16]
 800e928:	f107 0114 	add.w	r1, r7, #20
 800e92c:	f104 0914 	add.w	r9, r4, #20
 800e930:	f100 0e14 	add.w	lr, r0, #20
 800e934:	f107 0210 	add.w	r2, r7, #16
 800e938:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e93c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e940:	46f2      	mov	sl, lr
 800e942:	2700      	movs	r7, #0
 800e944:	f859 3b04 	ldr.w	r3, [r9], #4
 800e948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e94c:	fa1f f883 	uxth.w	r8, r3
 800e950:	fa17 f78b 	uxtah	r7, r7, fp
 800e954:	0c1b      	lsrs	r3, r3, #16
 800e956:	eba7 0808 	sub.w	r8, r7, r8
 800e95a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e95e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e962:	fa1f f888 	uxth.w	r8, r8
 800e966:	141f      	asrs	r7, r3, #16
 800e968:	454d      	cmp	r5, r9
 800e96a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e96e:	f84a 3b04 	str.w	r3, [sl], #4
 800e972:	d8e7      	bhi.n	800e944 <__mdiff+0x7c>
 800e974:	1b2b      	subs	r3, r5, r4
 800e976:	3b15      	subs	r3, #21
 800e978:	f023 0303 	bic.w	r3, r3, #3
 800e97c:	3304      	adds	r3, #4
 800e97e:	3415      	adds	r4, #21
 800e980:	42a5      	cmp	r5, r4
 800e982:	bf38      	it	cc
 800e984:	2304      	movcc	r3, #4
 800e986:	4419      	add	r1, r3
 800e988:	4473      	add	r3, lr
 800e98a:	469e      	mov	lr, r3
 800e98c:	460d      	mov	r5, r1
 800e98e:	4565      	cmp	r5, ip
 800e990:	d30e      	bcc.n	800e9b0 <__mdiff+0xe8>
 800e992:	f10c 0203 	add.w	r2, ip, #3
 800e996:	1a52      	subs	r2, r2, r1
 800e998:	f022 0203 	bic.w	r2, r2, #3
 800e99c:	3903      	subs	r1, #3
 800e99e:	458c      	cmp	ip, r1
 800e9a0:	bf38      	it	cc
 800e9a2:	2200      	movcc	r2, #0
 800e9a4:	441a      	add	r2, r3
 800e9a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e9aa:	b17b      	cbz	r3, 800e9cc <__mdiff+0x104>
 800e9ac:	6106      	str	r6, [r0, #16]
 800e9ae:	e7a5      	b.n	800e8fc <__mdiff+0x34>
 800e9b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800e9b4:	fa17 f488 	uxtah	r4, r7, r8
 800e9b8:	1422      	asrs	r2, r4, #16
 800e9ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e9be:	b2a4      	uxth	r4, r4
 800e9c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e9c4:	f84e 4b04 	str.w	r4, [lr], #4
 800e9c8:	1417      	asrs	r7, r2, #16
 800e9ca:	e7e0      	b.n	800e98e <__mdiff+0xc6>
 800e9cc:	3e01      	subs	r6, #1
 800e9ce:	e7ea      	b.n	800e9a6 <__mdiff+0xde>
 800e9d0:	0801040b 	.word	0x0801040b
 800e9d4:	0801041c 	.word	0x0801041c

0800e9d8 <__d2b>:
 800e9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9dc:	4689      	mov	r9, r1
 800e9de:	2101      	movs	r1, #1
 800e9e0:	ec57 6b10 	vmov	r6, r7, d0
 800e9e4:	4690      	mov	r8, r2
 800e9e6:	f7ff fcd5 	bl	800e394 <_Balloc>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	b930      	cbnz	r0, 800e9fc <__d2b+0x24>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	4b25      	ldr	r3, [pc, #148]	; (800ea88 <__d2b+0xb0>)
 800e9f2:	4826      	ldr	r0, [pc, #152]	; (800ea8c <__d2b+0xb4>)
 800e9f4:	f240 310a 	movw	r1, #778	; 0x30a
 800e9f8:	f000 f914 	bl	800ec24 <__assert_func>
 800e9fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea04:	bb35      	cbnz	r5, 800ea54 <__d2b+0x7c>
 800ea06:	2e00      	cmp	r6, #0
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	d028      	beq.n	800ea5e <__d2b+0x86>
 800ea0c:	4668      	mov	r0, sp
 800ea0e:	9600      	str	r6, [sp, #0]
 800ea10:	f7ff fd8c 	bl	800e52c <__lo0bits>
 800ea14:	9900      	ldr	r1, [sp, #0]
 800ea16:	b300      	cbz	r0, 800ea5a <__d2b+0x82>
 800ea18:	9a01      	ldr	r2, [sp, #4]
 800ea1a:	f1c0 0320 	rsb	r3, r0, #32
 800ea1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea22:	430b      	orrs	r3, r1
 800ea24:	40c2      	lsrs	r2, r0
 800ea26:	6163      	str	r3, [r4, #20]
 800ea28:	9201      	str	r2, [sp, #4]
 800ea2a:	9b01      	ldr	r3, [sp, #4]
 800ea2c:	61a3      	str	r3, [r4, #24]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	bf14      	ite	ne
 800ea32:	2202      	movne	r2, #2
 800ea34:	2201      	moveq	r2, #1
 800ea36:	6122      	str	r2, [r4, #16]
 800ea38:	b1d5      	cbz	r5, 800ea70 <__d2b+0x98>
 800ea3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea3e:	4405      	add	r5, r0
 800ea40:	f8c9 5000 	str.w	r5, [r9]
 800ea44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea48:	f8c8 0000 	str.w	r0, [r8]
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	b003      	add	sp, #12
 800ea50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea58:	e7d5      	b.n	800ea06 <__d2b+0x2e>
 800ea5a:	6161      	str	r1, [r4, #20]
 800ea5c:	e7e5      	b.n	800ea2a <__d2b+0x52>
 800ea5e:	a801      	add	r0, sp, #4
 800ea60:	f7ff fd64 	bl	800e52c <__lo0bits>
 800ea64:	9b01      	ldr	r3, [sp, #4]
 800ea66:	6163      	str	r3, [r4, #20]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	6122      	str	r2, [r4, #16]
 800ea6c:	3020      	adds	r0, #32
 800ea6e:	e7e3      	b.n	800ea38 <__d2b+0x60>
 800ea70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea78:	f8c9 0000 	str.w	r0, [r9]
 800ea7c:	6918      	ldr	r0, [r3, #16]
 800ea7e:	f7ff fd35 	bl	800e4ec <__hi0bits>
 800ea82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea86:	e7df      	b.n	800ea48 <__d2b+0x70>
 800ea88:	0801040b 	.word	0x0801040b
 800ea8c:	0801041c 	.word	0x0801041c

0800ea90 <_calloc_r>:
 800ea90:	b513      	push	{r0, r1, r4, lr}
 800ea92:	434a      	muls	r2, r1
 800ea94:	4611      	mov	r1, r2
 800ea96:	9201      	str	r2, [sp, #4]
 800ea98:	f000 f85a 	bl	800eb50 <_malloc_r>
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	b118      	cbz	r0, 800eaa8 <_calloc_r+0x18>
 800eaa0:	9a01      	ldr	r2, [sp, #4]
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	f7fe fa10 	bl	800cec8 <memset>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	b002      	add	sp, #8
 800eaac:	bd10      	pop	{r4, pc}
	...

0800eab0 <_free_r>:
 800eab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eab2:	2900      	cmp	r1, #0
 800eab4:	d048      	beq.n	800eb48 <_free_r+0x98>
 800eab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaba:	9001      	str	r0, [sp, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f1a1 0404 	sub.w	r4, r1, #4
 800eac2:	bfb8      	it	lt
 800eac4:	18e4      	addlt	r4, r4, r3
 800eac6:	f000 f8ef 	bl	800eca8 <__malloc_lock>
 800eaca:	4a20      	ldr	r2, [pc, #128]	; (800eb4c <_free_r+0x9c>)
 800eacc:	9801      	ldr	r0, [sp, #4]
 800eace:	6813      	ldr	r3, [r2, #0]
 800ead0:	4615      	mov	r5, r2
 800ead2:	b933      	cbnz	r3, 800eae2 <_free_r+0x32>
 800ead4:	6063      	str	r3, [r4, #4]
 800ead6:	6014      	str	r4, [r2, #0]
 800ead8:	b003      	add	sp, #12
 800eada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eade:	f000 b8e9 	b.w	800ecb4 <__malloc_unlock>
 800eae2:	42a3      	cmp	r3, r4
 800eae4:	d90b      	bls.n	800eafe <_free_r+0x4e>
 800eae6:	6821      	ldr	r1, [r4, #0]
 800eae8:	1862      	adds	r2, r4, r1
 800eaea:	4293      	cmp	r3, r2
 800eaec:	bf04      	itt	eq
 800eaee:	681a      	ldreq	r2, [r3, #0]
 800eaf0:	685b      	ldreq	r3, [r3, #4]
 800eaf2:	6063      	str	r3, [r4, #4]
 800eaf4:	bf04      	itt	eq
 800eaf6:	1852      	addeq	r2, r2, r1
 800eaf8:	6022      	streq	r2, [r4, #0]
 800eafa:	602c      	str	r4, [r5, #0]
 800eafc:	e7ec      	b.n	800ead8 <_free_r+0x28>
 800eafe:	461a      	mov	r2, r3
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	b10b      	cbz	r3, 800eb08 <_free_r+0x58>
 800eb04:	42a3      	cmp	r3, r4
 800eb06:	d9fa      	bls.n	800eafe <_free_r+0x4e>
 800eb08:	6811      	ldr	r1, [r2, #0]
 800eb0a:	1855      	adds	r5, r2, r1
 800eb0c:	42a5      	cmp	r5, r4
 800eb0e:	d10b      	bne.n	800eb28 <_free_r+0x78>
 800eb10:	6824      	ldr	r4, [r4, #0]
 800eb12:	4421      	add	r1, r4
 800eb14:	1854      	adds	r4, r2, r1
 800eb16:	42a3      	cmp	r3, r4
 800eb18:	6011      	str	r1, [r2, #0]
 800eb1a:	d1dd      	bne.n	800ead8 <_free_r+0x28>
 800eb1c:	681c      	ldr	r4, [r3, #0]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	6053      	str	r3, [r2, #4]
 800eb22:	4421      	add	r1, r4
 800eb24:	6011      	str	r1, [r2, #0]
 800eb26:	e7d7      	b.n	800ead8 <_free_r+0x28>
 800eb28:	d902      	bls.n	800eb30 <_free_r+0x80>
 800eb2a:	230c      	movs	r3, #12
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	e7d3      	b.n	800ead8 <_free_r+0x28>
 800eb30:	6825      	ldr	r5, [r4, #0]
 800eb32:	1961      	adds	r1, r4, r5
 800eb34:	428b      	cmp	r3, r1
 800eb36:	bf04      	itt	eq
 800eb38:	6819      	ldreq	r1, [r3, #0]
 800eb3a:	685b      	ldreq	r3, [r3, #4]
 800eb3c:	6063      	str	r3, [r4, #4]
 800eb3e:	bf04      	itt	eq
 800eb40:	1949      	addeq	r1, r1, r5
 800eb42:	6021      	streq	r1, [r4, #0]
 800eb44:	6054      	str	r4, [r2, #4]
 800eb46:	e7c7      	b.n	800ead8 <_free_r+0x28>
 800eb48:	b003      	add	sp, #12
 800eb4a:	bd30      	pop	{r4, r5, pc}
 800eb4c:	2400023c 	.word	0x2400023c

0800eb50 <_malloc_r>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	1ccd      	adds	r5, r1, #3
 800eb54:	f025 0503 	bic.w	r5, r5, #3
 800eb58:	3508      	adds	r5, #8
 800eb5a:	2d0c      	cmp	r5, #12
 800eb5c:	bf38      	it	cc
 800eb5e:	250c      	movcc	r5, #12
 800eb60:	2d00      	cmp	r5, #0
 800eb62:	4606      	mov	r6, r0
 800eb64:	db01      	blt.n	800eb6a <_malloc_r+0x1a>
 800eb66:	42a9      	cmp	r1, r5
 800eb68:	d903      	bls.n	800eb72 <_malloc_r+0x22>
 800eb6a:	230c      	movs	r3, #12
 800eb6c:	6033      	str	r3, [r6, #0]
 800eb6e:	2000      	movs	r0, #0
 800eb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb72:	f000 f899 	bl	800eca8 <__malloc_lock>
 800eb76:	4921      	ldr	r1, [pc, #132]	; (800ebfc <_malloc_r+0xac>)
 800eb78:	680a      	ldr	r2, [r1, #0]
 800eb7a:	4614      	mov	r4, r2
 800eb7c:	b99c      	cbnz	r4, 800eba6 <_malloc_r+0x56>
 800eb7e:	4f20      	ldr	r7, [pc, #128]	; (800ec00 <_malloc_r+0xb0>)
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	b923      	cbnz	r3, 800eb8e <_malloc_r+0x3e>
 800eb84:	4621      	mov	r1, r4
 800eb86:	4630      	mov	r0, r6
 800eb88:	f000 f83c 	bl	800ec04 <_sbrk_r>
 800eb8c:	6038      	str	r0, [r7, #0]
 800eb8e:	4629      	mov	r1, r5
 800eb90:	4630      	mov	r0, r6
 800eb92:	f000 f837 	bl	800ec04 <_sbrk_r>
 800eb96:	1c43      	adds	r3, r0, #1
 800eb98:	d123      	bne.n	800ebe2 <_malloc_r+0x92>
 800eb9a:	230c      	movs	r3, #12
 800eb9c:	6033      	str	r3, [r6, #0]
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f000 f888 	bl	800ecb4 <__malloc_unlock>
 800eba4:	e7e3      	b.n	800eb6e <_malloc_r+0x1e>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	1b5b      	subs	r3, r3, r5
 800ebaa:	d417      	bmi.n	800ebdc <_malloc_r+0x8c>
 800ebac:	2b0b      	cmp	r3, #11
 800ebae:	d903      	bls.n	800ebb8 <_malloc_r+0x68>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	441c      	add	r4, r3
 800ebb4:	6025      	str	r5, [r4, #0]
 800ebb6:	e004      	b.n	800ebc2 <_malloc_r+0x72>
 800ebb8:	6863      	ldr	r3, [r4, #4]
 800ebba:	42a2      	cmp	r2, r4
 800ebbc:	bf0c      	ite	eq
 800ebbe:	600b      	streq	r3, [r1, #0]
 800ebc0:	6053      	strne	r3, [r2, #4]
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 f876 	bl	800ecb4 <__malloc_unlock>
 800ebc8:	f104 000b 	add.w	r0, r4, #11
 800ebcc:	1d23      	adds	r3, r4, #4
 800ebce:	f020 0007 	bic.w	r0, r0, #7
 800ebd2:	1ac2      	subs	r2, r0, r3
 800ebd4:	d0cc      	beq.n	800eb70 <_malloc_r+0x20>
 800ebd6:	1a1b      	subs	r3, r3, r0
 800ebd8:	50a3      	str	r3, [r4, r2]
 800ebda:	e7c9      	b.n	800eb70 <_malloc_r+0x20>
 800ebdc:	4622      	mov	r2, r4
 800ebde:	6864      	ldr	r4, [r4, #4]
 800ebe0:	e7cc      	b.n	800eb7c <_malloc_r+0x2c>
 800ebe2:	1cc4      	adds	r4, r0, #3
 800ebe4:	f024 0403 	bic.w	r4, r4, #3
 800ebe8:	42a0      	cmp	r0, r4
 800ebea:	d0e3      	beq.n	800ebb4 <_malloc_r+0x64>
 800ebec:	1a21      	subs	r1, r4, r0
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f000 f808 	bl	800ec04 <_sbrk_r>
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d1dd      	bne.n	800ebb4 <_malloc_r+0x64>
 800ebf8:	e7cf      	b.n	800eb9a <_malloc_r+0x4a>
 800ebfa:	bf00      	nop
 800ebfc:	2400023c 	.word	0x2400023c
 800ec00:	24000240 	.word	0x24000240

0800ec04 <_sbrk_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4d06      	ldr	r5, [pc, #24]	; (800ec20 <_sbrk_r+0x1c>)
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	602b      	str	r3, [r5, #0]
 800ec10:	f7f3 fa5e 	bl	80020d0 <_sbrk>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_sbrk_r+0x1a>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_sbrk_r+0x1a>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	24000c5c 	.word	0x24000c5c

0800ec24 <__assert_func>:
 800ec24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec26:	4614      	mov	r4, r2
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4b09      	ldr	r3, [pc, #36]	; (800ec50 <__assert_func+0x2c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4605      	mov	r5, r0
 800ec30:	68d8      	ldr	r0, [r3, #12]
 800ec32:	b14c      	cbz	r4, 800ec48 <__assert_func+0x24>
 800ec34:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <__assert_func+0x30>)
 800ec36:	9100      	str	r1, [sp, #0]
 800ec38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec3c:	4906      	ldr	r1, [pc, #24]	; (800ec58 <__assert_func+0x34>)
 800ec3e:	462b      	mov	r3, r5
 800ec40:	f000 f80e 	bl	800ec60 <fiprintf>
 800ec44:	f000 fa64 	bl	800f110 <abort>
 800ec48:	4b04      	ldr	r3, [pc, #16]	; (800ec5c <__assert_func+0x38>)
 800ec4a:	461c      	mov	r4, r3
 800ec4c:	e7f3      	b.n	800ec36 <__assert_func+0x12>
 800ec4e:	bf00      	nop
 800ec50:	24000020 	.word	0x24000020
 800ec54:	0801057c 	.word	0x0801057c
 800ec58:	08010589 	.word	0x08010589
 800ec5c:	080105b7 	.word	0x080105b7

0800ec60 <fiprintf>:
 800ec60:	b40e      	push	{r1, r2, r3}
 800ec62:	b503      	push	{r0, r1, lr}
 800ec64:	4601      	mov	r1, r0
 800ec66:	ab03      	add	r3, sp, #12
 800ec68:	4805      	ldr	r0, [pc, #20]	; (800ec80 <fiprintf+0x20>)
 800ec6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec6e:	6800      	ldr	r0, [r0, #0]
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	f000 f84f 	bl	800ed14 <_vfiprintf_r>
 800ec76:	b002      	add	sp, #8
 800ec78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec7c:	b003      	add	sp, #12
 800ec7e:	4770      	bx	lr
 800ec80:	24000020 	.word	0x24000020

0800ec84 <__ascii_mbtowc>:
 800ec84:	b082      	sub	sp, #8
 800ec86:	b901      	cbnz	r1, 800ec8a <__ascii_mbtowc+0x6>
 800ec88:	a901      	add	r1, sp, #4
 800ec8a:	b142      	cbz	r2, 800ec9e <__ascii_mbtowc+0x1a>
 800ec8c:	b14b      	cbz	r3, 800eca2 <__ascii_mbtowc+0x1e>
 800ec8e:	7813      	ldrb	r3, [r2, #0]
 800ec90:	600b      	str	r3, [r1, #0]
 800ec92:	7812      	ldrb	r2, [r2, #0]
 800ec94:	1e10      	subs	r0, r2, #0
 800ec96:	bf18      	it	ne
 800ec98:	2001      	movne	r0, #1
 800ec9a:	b002      	add	sp, #8
 800ec9c:	4770      	bx	lr
 800ec9e:	4610      	mov	r0, r2
 800eca0:	e7fb      	b.n	800ec9a <__ascii_mbtowc+0x16>
 800eca2:	f06f 0001 	mvn.w	r0, #1
 800eca6:	e7f8      	b.n	800ec9a <__ascii_mbtowc+0x16>

0800eca8 <__malloc_lock>:
 800eca8:	4801      	ldr	r0, [pc, #4]	; (800ecb0 <__malloc_lock+0x8>)
 800ecaa:	f000 bbf1 	b.w	800f490 <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	24000c64 	.word	0x24000c64

0800ecb4 <__malloc_unlock>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	; (800ecbc <__malloc_unlock+0x8>)
 800ecb6:	f000 bbec 	b.w	800f492 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	24000c64 	.word	0x24000c64

0800ecc0 <__sfputc_r>:
 800ecc0:	6893      	ldr	r3, [r2, #8]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	b410      	push	{r4}
 800ecc8:	6093      	str	r3, [r2, #8]
 800ecca:	da08      	bge.n	800ecde <__sfputc_r+0x1e>
 800eccc:	6994      	ldr	r4, [r2, #24]
 800ecce:	42a3      	cmp	r3, r4
 800ecd0:	db01      	blt.n	800ecd6 <__sfputc_r+0x16>
 800ecd2:	290a      	cmp	r1, #10
 800ecd4:	d103      	bne.n	800ecde <__sfputc_r+0x1e>
 800ecd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecda:	f000 b94b 	b.w	800ef74 <__swbuf_r>
 800ecde:	6813      	ldr	r3, [r2, #0]
 800ece0:	1c58      	adds	r0, r3, #1
 800ece2:	6010      	str	r0, [r2, #0]
 800ece4:	7019      	strb	r1, [r3, #0]
 800ece6:	4608      	mov	r0, r1
 800ece8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <__sfputs_r>:
 800ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	4614      	mov	r4, r2
 800ecf6:	18d5      	adds	r5, r2, r3
 800ecf8:	42ac      	cmp	r4, r5
 800ecfa:	d101      	bne.n	800ed00 <__sfputs_r+0x12>
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	e007      	b.n	800ed10 <__sfputs_r+0x22>
 800ed00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed04:	463a      	mov	r2, r7
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7ff ffda 	bl	800ecc0 <__sfputc_r>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d1f3      	bne.n	800ecf8 <__sfputs_r+0xa>
 800ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed14 <_vfiprintf_r>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	460d      	mov	r5, r1
 800ed1a:	b09d      	sub	sp, #116	; 0x74
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4698      	mov	r8, r3
 800ed20:	4606      	mov	r6, r0
 800ed22:	b118      	cbz	r0, 800ed2c <_vfiprintf_r+0x18>
 800ed24:	6983      	ldr	r3, [r0, #24]
 800ed26:	b90b      	cbnz	r3, 800ed2c <_vfiprintf_r+0x18>
 800ed28:	f000 fb14 	bl	800f354 <__sinit>
 800ed2c:	4b89      	ldr	r3, [pc, #548]	; (800ef54 <_vfiprintf_r+0x240>)
 800ed2e:	429d      	cmp	r5, r3
 800ed30:	d11b      	bne.n	800ed6a <_vfiprintf_r+0x56>
 800ed32:	6875      	ldr	r5, [r6, #4]
 800ed34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed36:	07d9      	lsls	r1, r3, #31
 800ed38:	d405      	bmi.n	800ed46 <_vfiprintf_r+0x32>
 800ed3a:	89ab      	ldrh	r3, [r5, #12]
 800ed3c:	059a      	lsls	r2, r3, #22
 800ed3e:	d402      	bmi.n	800ed46 <_vfiprintf_r+0x32>
 800ed40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed42:	f000 fba5 	bl	800f490 <__retarget_lock_acquire_recursive>
 800ed46:	89ab      	ldrh	r3, [r5, #12]
 800ed48:	071b      	lsls	r3, r3, #28
 800ed4a:	d501      	bpl.n	800ed50 <_vfiprintf_r+0x3c>
 800ed4c:	692b      	ldr	r3, [r5, #16]
 800ed4e:	b9eb      	cbnz	r3, 800ed8c <_vfiprintf_r+0x78>
 800ed50:	4629      	mov	r1, r5
 800ed52:	4630      	mov	r0, r6
 800ed54:	f000 f96e 	bl	800f034 <__swsetup_r>
 800ed58:	b1c0      	cbz	r0, 800ed8c <_vfiprintf_r+0x78>
 800ed5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed5c:	07dc      	lsls	r4, r3, #31
 800ed5e:	d50e      	bpl.n	800ed7e <_vfiprintf_r+0x6a>
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	b01d      	add	sp, #116	; 0x74
 800ed66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed6a:	4b7b      	ldr	r3, [pc, #492]	; (800ef58 <_vfiprintf_r+0x244>)
 800ed6c:	429d      	cmp	r5, r3
 800ed6e:	d101      	bne.n	800ed74 <_vfiprintf_r+0x60>
 800ed70:	68b5      	ldr	r5, [r6, #8]
 800ed72:	e7df      	b.n	800ed34 <_vfiprintf_r+0x20>
 800ed74:	4b79      	ldr	r3, [pc, #484]	; (800ef5c <_vfiprintf_r+0x248>)
 800ed76:	429d      	cmp	r5, r3
 800ed78:	bf08      	it	eq
 800ed7a:	68f5      	ldreq	r5, [r6, #12]
 800ed7c:	e7da      	b.n	800ed34 <_vfiprintf_r+0x20>
 800ed7e:	89ab      	ldrh	r3, [r5, #12]
 800ed80:	0598      	lsls	r0, r3, #22
 800ed82:	d4ed      	bmi.n	800ed60 <_vfiprintf_r+0x4c>
 800ed84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed86:	f000 fb84 	bl	800f492 <__retarget_lock_release_recursive>
 800ed8a:	e7e9      	b.n	800ed60 <_vfiprintf_r+0x4c>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed90:	2320      	movs	r3, #32
 800ed92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed9a:	2330      	movs	r3, #48	; 0x30
 800ed9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef60 <_vfiprintf_r+0x24c>
 800eda0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eda4:	f04f 0901 	mov.w	r9, #1
 800eda8:	4623      	mov	r3, r4
 800edaa:	469a      	mov	sl, r3
 800edac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edb0:	b10a      	cbz	r2, 800edb6 <_vfiprintf_r+0xa2>
 800edb2:	2a25      	cmp	r2, #37	; 0x25
 800edb4:	d1f9      	bne.n	800edaa <_vfiprintf_r+0x96>
 800edb6:	ebba 0b04 	subs.w	fp, sl, r4
 800edba:	d00b      	beq.n	800edd4 <_vfiprintf_r+0xc0>
 800edbc:	465b      	mov	r3, fp
 800edbe:	4622      	mov	r2, r4
 800edc0:	4629      	mov	r1, r5
 800edc2:	4630      	mov	r0, r6
 800edc4:	f7ff ff93 	bl	800ecee <__sfputs_r>
 800edc8:	3001      	adds	r0, #1
 800edca:	f000 80aa 	beq.w	800ef22 <_vfiprintf_r+0x20e>
 800edce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edd0:	445a      	add	r2, fp
 800edd2:	9209      	str	r2, [sp, #36]	; 0x24
 800edd4:	f89a 3000 	ldrb.w	r3, [sl]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 80a2 	beq.w	800ef22 <_vfiprintf_r+0x20e>
 800edde:	2300      	movs	r3, #0
 800ede0:	f04f 32ff 	mov.w	r2, #4294967295
 800ede4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ede8:	f10a 0a01 	add.w	sl, sl, #1
 800edec:	9304      	str	r3, [sp, #16]
 800edee:	9307      	str	r3, [sp, #28]
 800edf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edf4:	931a      	str	r3, [sp, #104]	; 0x68
 800edf6:	4654      	mov	r4, sl
 800edf8:	2205      	movs	r2, #5
 800edfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfe:	4858      	ldr	r0, [pc, #352]	; (800ef60 <_vfiprintf_r+0x24c>)
 800ee00:	f7f1 fa8e 	bl	8000320 <memchr>
 800ee04:	9a04      	ldr	r2, [sp, #16]
 800ee06:	b9d8      	cbnz	r0, 800ee40 <_vfiprintf_r+0x12c>
 800ee08:	06d1      	lsls	r1, r2, #27
 800ee0a:	bf44      	itt	mi
 800ee0c:	2320      	movmi	r3, #32
 800ee0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee12:	0713      	lsls	r3, r2, #28
 800ee14:	bf44      	itt	mi
 800ee16:	232b      	movmi	r3, #43	; 0x2b
 800ee18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee20:	2b2a      	cmp	r3, #42	; 0x2a
 800ee22:	d015      	beq.n	800ee50 <_vfiprintf_r+0x13c>
 800ee24:	9a07      	ldr	r2, [sp, #28]
 800ee26:	4654      	mov	r4, sl
 800ee28:	2000      	movs	r0, #0
 800ee2a:	f04f 0c0a 	mov.w	ip, #10
 800ee2e:	4621      	mov	r1, r4
 800ee30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee34:	3b30      	subs	r3, #48	; 0x30
 800ee36:	2b09      	cmp	r3, #9
 800ee38:	d94e      	bls.n	800eed8 <_vfiprintf_r+0x1c4>
 800ee3a:	b1b0      	cbz	r0, 800ee6a <_vfiprintf_r+0x156>
 800ee3c:	9207      	str	r2, [sp, #28]
 800ee3e:	e014      	b.n	800ee6a <_vfiprintf_r+0x156>
 800ee40:	eba0 0308 	sub.w	r3, r0, r8
 800ee44:	fa09 f303 	lsl.w	r3, r9, r3
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	9304      	str	r3, [sp, #16]
 800ee4c:	46a2      	mov	sl, r4
 800ee4e:	e7d2      	b.n	800edf6 <_vfiprintf_r+0xe2>
 800ee50:	9b03      	ldr	r3, [sp, #12]
 800ee52:	1d19      	adds	r1, r3, #4
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	9103      	str	r1, [sp, #12]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	bfbb      	ittet	lt
 800ee5c:	425b      	neglt	r3, r3
 800ee5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee62:	9307      	strge	r3, [sp, #28]
 800ee64:	9307      	strlt	r3, [sp, #28]
 800ee66:	bfb8      	it	lt
 800ee68:	9204      	strlt	r2, [sp, #16]
 800ee6a:	7823      	ldrb	r3, [r4, #0]
 800ee6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee6e:	d10c      	bne.n	800ee8a <_vfiprintf_r+0x176>
 800ee70:	7863      	ldrb	r3, [r4, #1]
 800ee72:	2b2a      	cmp	r3, #42	; 0x2a
 800ee74:	d135      	bne.n	800eee2 <_vfiprintf_r+0x1ce>
 800ee76:	9b03      	ldr	r3, [sp, #12]
 800ee78:	1d1a      	adds	r2, r3, #4
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	9203      	str	r2, [sp, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	bfb8      	it	lt
 800ee82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee86:	3402      	adds	r4, #2
 800ee88:	9305      	str	r3, [sp, #20]
 800ee8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef70 <_vfiprintf_r+0x25c>
 800ee8e:	7821      	ldrb	r1, [r4, #0]
 800ee90:	2203      	movs	r2, #3
 800ee92:	4650      	mov	r0, sl
 800ee94:	f7f1 fa44 	bl	8000320 <memchr>
 800ee98:	b140      	cbz	r0, 800eeac <_vfiprintf_r+0x198>
 800ee9a:	2340      	movs	r3, #64	; 0x40
 800ee9c:	eba0 000a 	sub.w	r0, r0, sl
 800eea0:	fa03 f000 	lsl.w	r0, r3, r0
 800eea4:	9b04      	ldr	r3, [sp, #16]
 800eea6:	4303      	orrs	r3, r0
 800eea8:	3401      	adds	r4, #1
 800eeaa:	9304      	str	r3, [sp, #16]
 800eeac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb0:	482c      	ldr	r0, [pc, #176]	; (800ef64 <_vfiprintf_r+0x250>)
 800eeb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeb6:	2206      	movs	r2, #6
 800eeb8:	f7f1 fa32 	bl	8000320 <memchr>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d03f      	beq.n	800ef40 <_vfiprintf_r+0x22c>
 800eec0:	4b29      	ldr	r3, [pc, #164]	; (800ef68 <_vfiprintf_r+0x254>)
 800eec2:	bb1b      	cbnz	r3, 800ef0c <_vfiprintf_r+0x1f8>
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	3307      	adds	r3, #7
 800eec8:	f023 0307 	bic.w	r3, r3, #7
 800eecc:	3308      	adds	r3, #8
 800eece:	9303      	str	r3, [sp, #12]
 800eed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed2:	443b      	add	r3, r7
 800eed4:	9309      	str	r3, [sp, #36]	; 0x24
 800eed6:	e767      	b.n	800eda8 <_vfiprintf_r+0x94>
 800eed8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eedc:	460c      	mov	r4, r1
 800eede:	2001      	movs	r0, #1
 800eee0:	e7a5      	b.n	800ee2e <_vfiprintf_r+0x11a>
 800eee2:	2300      	movs	r3, #0
 800eee4:	3401      	adds	r4, #1
 800eee6:	9305      	str	r3, [sp, #20]
 800eee8:	4619      	mov	r1, r3
 800eeea:	f04f 0c0a 	mov.w	ip, #10
 800eeee:	4620      	mov	r0, r4
 800eef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eef4:	3a30      	subs	r2, #48	; 0x30
 800eef6:	2a09      	cmp	r2, #9
 800eef8:	d903      	bls.n	800ef02 <_vfiprintf_r+0x1ee>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d0c5      	beq.n	800ee8a <_vfiprintf_r+0x176>
 800eefe:	9105      	str	r1, [sp, #20]
 800ef00:	e7c3      	b.n	800ee8a <_vfiprintf_r+0x176>
 800ef02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef06:	4604      	mov	r4, r0
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e7f0      	b.n	800eeee <_vfiprintf_r+0x1da>
 800ef0c:	ab03      	add	r3, sp, #12
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	462a      	mov	r2, r5
 800ef12:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <_vfiprintf_r+0x258>)
 800ef14:	a904      	add	r1, sp, #16
 800ef16:	4630      	mov	r0, r6
 800ef18:	f7fe f86e 	bl	800cff8 <_printf_float>
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	1c78      	adds	r0, r7, #1
 800ef20:	d1d6      	bne.n	800eed0 <_vfiprintf_r+0x1bc>
 800ef22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef24:	07d9      	lsls	r1, r3, #31
 800ef26:	d405      	bmi.n	800ef34 <_vfiprintf_r+0x220>
 800ef28:	89ab      	ldrh	r3, [r5, #12]
 800ef2a:	059a      	lsls	r2, r3, #22
 800ef2c:	d402      	bmi.n	800ef34 <_vfiprintf_r+0x220>
 800ef2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef30:	f000 faaf 	bl	800f492 <__retarget_lock_release_recursive>
 800ef34:	89ab      	ldrh	r3, [r5, #12]
 800ef36:	065b      	lsls	r3, r3, #25
 800ef38:	f53f af12 	bmi.w	800ed60 <_vfiprintf_r+0x4c>
 800ef3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef3e:	e711      	b.n	800ed64 <_vfiprintf_r+0x50>
 800ef40:	ab03      	add	r3, sp, #12
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	462a      	mov	r2, r5
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <_vfiprintf_r+0x258>)
 800ef48:	a904      	add	r1, sp, #16
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f7fe fae0 	bl	800d510 <_printf_i>
 800ef50:	e7e4      	b.n	800ef1c <_vfiprintf_r+0x208>
 800ef52:	bf00      	nop
 800ef54:	080106f4 	.word	0x080106f4
 800ef58:	08010714 	.word	0x08010714
 800ef5c:	080106d4 	.word	0x080106d4
 800ef60:	080105c2 	.word	0x080105c2
 800ef64:	080105cc 	.word	0x080105cc
 800ef68:	0800cff9 	.word	0x0800cff9
 800ef6c:	0800ecef 	.word	0x0800ecef
 800ef70:	080105c8 	.word	0x080105c8

0800ef74 <__swbuf_r>:
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef76:	460e      	mov	r6, r1
 800ef78:	4614      	mov	r4, r2
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	b118      	cbz	r0, 800ef86 <__swbuf_r+0x12>
 800ef7e:	6983      	ldr	r3, [r0, #24]
 800ef80:	b90b      	cbnz	r3, 800ef86 <__swbuf_r+0x12>
 800ef82:	f000 f9e7 	bl	800f354 <__sinit>
 800ef86:	4b21      	ldr	r3, [pc, #132]	; (800f00c <__swbuf_r+0x98>)
 800ef88:	429c      	cmp	r4, r3
 800ef8a:	d12b      	bne.n	800efe4 <__swbuf_r+0x70>
 800ef8c:	686c      	ldr	r4, [r5, #4]
 800ef8e:	69a3      	ldr	r3, [r4, #24]
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	071a      	lsls	r2, r3, #28
 800ef96:	d52f      	bpl.n	800eff8 <__swbuf_r+0x84>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	b36b      	cbz	r3, 800eff8 <__swbuf_r+0x84>
 800ef9c:	6923      	ldr	r3, [r4, #16]
 800ef9e:	6820      	ldr	r0, [r4, #0]
 800efa0:	1ac0      	subs	r0, r0, r3
 800efa2:	6963      	ldr	r3, [r4, #20]
 800efa4:	b2f6      	uxtb	r6, r6
 800efa6:	4283      	cmp	r3, r0
 800efa8:	4637      	mov	r7, r6
 800efaa:	dc04      	bgt.n	800efb6 <__swbuf_r+0x42>
 800efac:	4621      	mov	r1, r4
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 f93c 	bl	800f22c <_fflush_r>
 800efb4:	bb30      	cbnz	r0, 800f004 <__swbuf_r+0x90>
 800efb6:	68a3      	ldr	r3, [r4, #8]
 800efb8:	3b01      	subs	r3, #1
 800efba:	60a3      	str	r3, [r4, #8]
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	6022      	str	r2, [r4, #0]
 800efc2:	701e      	strb	r6, [r3, #0]
 800efc4:	6963      	ldr	r3, [r4, #20]
 800efc6:	3001      	adds	r0, #1
 800efc8:	4283      	cmp	r3, r0
 800efca:	d004      	beq.n	800efd6 <__swbuf_r+0x62>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	07db      	lsls	r3, r3, #31
 800efd0:	d506      	bpl.n	800efe0 <__swbuf_r+0x6c>
 800efd2:	2e0a      	cmp	r6, #10
 800efd4:	d104      	bne.n	800efe0 <__swbuf_r+0x6c>
 800efd6:	4621      	mov	r1, r4
 800efd8:	4628      	mov	r0, r5
 800efda:	f000 f927 	bl	800f22c <_fflush_r>
 800efde:	b988      	cbnz	r0, 800f004 <__swbuf_r+0x90>
 800efe0:	4638      	mov	r0, r7
 800efe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efe4:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <__swbuf_r+0x9c>)
 800efe6:	429c      	cmp	r4, r3
 800efe8:	d101      	bne.n	800efee <__swbuf_r+0x7a>
 800efea:	68ac      	ldr	r4, [r5, #8]
 800efec:	e7cf      	b.n	800ef8e <__swbuf_r+0x1a>
 800efee:	4b09      	ldr	r3, [pc, #36]	; (800f014 <__swbuf_r+0xa0>)
 800eff0:	429c      	cmp	r4, r3
 800eff2:	bf08      	it	eq
 800eff4:	68ec      	ldreq	r4, [r5, #12]
 800eff6:	e7ca      	b.n	800ef8e <__swbuf_r+0x1a>
 800eff8:	4621      	mov	r1, r4
 800effa:	4628      	mov	r0, r5
 800effc:	f000 f81a 	bl	800f034 <__swsetup_r>
 800f000:	2800      	cmp	r0, #0
 800f002:	d0cb      	beq.n	800ef9c <__swbuf_r+0x28>
 800f004:	f04f 37ff 	mov.w	r7, #4294967295
 800f008:	e7ea      	b.n	800efe0 <__swbuf_r+0x6c>
 800f00a:	bf00      	nop
 800f00c:	080106f4 	.word	0x080106f4
 800f010:	08010714 	.word	0x08010714
 800f014:	080106d4 	.word	0x080106d4

0800f018 <__ascii_wctomb>:
 800f018:	b149      	cbz	r1, 800f02e <__ascii_wctomb+0x16>
 800f01a:	2aff      	cmp	r2, #255	; 0xff
 800f01c:	bf85      	ittet	hi
 800f01e:	238a      	movhi	r3, #138	; 0x8a
 800f020:	6003      	strhi	r3, [r0, #0]
 800f022:	700a      	strbls	r2, [r1, #0]
 800f024:	f04f 30ff 	movhi.w	r0, #4294967295
 800f028:	bf98      	it	ls
 800f02a:	2001      	movls	r0, #1
 800f02c:	4770      	bx	lr
 800f02e:	4608      	mov	r0, r1
 800f030:	4770      	bx	lr
	...

0800f034 <__swsetup_r>:
 800f034:	4b32      	ldr	r3, [pc, #200]	; (800f100 <__swsetup_r+0xcc>)
 800f036:	b570      	push	{r4, r5, r6, lr}
 800f038:	681d      	ldr	r5, [r3, #0]
 800f03a:	4606      	mov	r6, r0
 800f03c:	460c      	mov	r4, r1
 800f03e:	b125      	cbz	r5, 800f04a <__swsetup_r+0x16>
 800f040:	69ab      	ldr	r3, [r5, #24]
 800f042:	b913      	cbnz	r3, 800f04a <__swsetup_r+0x16>
 800f044:	4628      	mov	r0, r5
 800f046:	f000 f985 	bl	800f354 <__sinit>
 800f04a:	4b2e      	ldr	r3, [pc, #184]	; (800f104 <__swsetup_r+0xd0>)
 800f04c:	429c      	cmp	r4, r3
 800f04e:	d10f      	bne.n	800f070 <__swsetup_r+0x3c>
 800f050:	686c      	ldr	r4, [r5, #4]
 800f052:	89a3      	ldrh	r3, [r4, #12]
 800f054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f058:	0719      	lsls	r1, r3, #28
 800f05a:	d42c      	bmi.n	800f0b6 <__swsetup_r+0x82>
 800f05c:	06dd      	lsls	r5, r3, #27
 800f05e:	d411      	bmi.n	800f084 <__swsetup_r+0x50>
 800f060:	2309      	movs	r3, #9
 800f062:	6033      	str	r3, [r6, #0]
 800f064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f068:	81a3      	strh	r3, [r4, #12]
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	e03e      	b.n	800f0ee <__swsetup_r+0xba>
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <__swsetup_r+0xd4>)
 800f072:	429c      	cmp	r4, r3
 800f074:	d101      	bne.n	800f07a <__swsetup_r+0x46>
 800f076:	68ac      	ldr	r4, [r5, #8]
 800f078:	e7eb      	b.n	800f052 <__swsetup_r+0x1e>
 800f07a:	4b24      	ldr	r3, [pc, #144]	; (800f10c <__swsetup_r+0xd8>)
 800f07c:	429c      	cmp	r4, r3
 800f07e:	bf08      	it	eq
 800f080:	68ec      	ldreq	r4, [r5, #12]
 800f082:	e7e6      	b.n	800f052 <__swsetup_r+0x1e>
 800f084:	0758      	lsls	r0, r3, #29
 800f086:	d512      	bpl.n	800f0ae <__swsetup_r+0x7a>
 800f088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f08a:	b141      	cbz	r1, 800f09e <__swsetup_r+0x6a>
 800f08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f090:	4299      	cmp	r1, r3
 800f092:	d002      	beq.n	800f09a <__swsetup_r+0x66>
 800f094:	4630      	mov	r0, r6
 800f096:	f7ff fd0b 	bl	800eab0 <_free_r>
 800f09a:	2300      	movs	r3, #0
 800f09c:	6363      	str	r3, [r4, #52]	; 0x34
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0a4:	81a3      	strh	r3, [r4, #12]
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6063      	str	r3, [r4, #4]
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f043 0308 	orr.w	r3, r3, #8
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	b94b      	cbnz	r3, 800f0ce <__swsetup_r+0x9a>
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0c4:	d003      	beq.n	800f0ce <__swsetup_r+0x9a>
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f000 fa07 	bl	800f4dc <__smakebuf_r>
 800f0ce:	89a0      	ldrh	r0, [r4, #12]
 800f0d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0d4:	f010 0301 	ands.w	r3, r0, #1
 800f0d8:	d00a      	beq.n	800f0f0 <__swsetup_r+0xbc>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60a3      	str	r3, [r4, #8]
 800f0de:	6963      	ldr	r3, [r4, #20]
 800f0e0:	425b      	negs	r3, r3
 800f0e2:	61a3      	str	r3, [r4, #24]
 800f0e4:	6923      	ldr	r3, [r4, #16]
 800f0e6:	b943      	cbnz	r3, 800f0fa <__swsetup_r+0xc6>
 800f0e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0ec:	d1ba      	bne.n	800f064 <__swsetup_r+0x30>
 800f0ee:	bd70      	pop	{r4, r5, r6, pc}
 800f0f0:	0781      	lsls	r1, r0, #30
 800f0f2:	bf58      	it	pl
 800f0f4:	6963      	ldrpl	r3, [r4, #20]
 800f0f6:	60a3      	str	r3, [r4, #8]
 800f0f8:	e7f4      	b.n	800f0e4 <__swsetup_r+0xb0>
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	e7f7      	b.n	800f0ee <__swsetup_r+0xba>
 800f0fe:	bf00      	nop
 800f100:	24000020 	.word	0x24000020
 800f104:	080106f4 	.word	0x080106f4
 800f108:	08010714 	.word	0x08010714
 800f10c:	080106d4 	.word	0x080106d4

0800f110 <abort>:
 800f110:	b508      	push	{r3, lr}
 800f112:	2006      	movs	r0, #6
 800f114:	f000 fa4a 	bl	800f5ac <raise>
 800f118:	2001      	movs	r0, #1
 800f11a:	f7f2 ff61 	bl	8001fe0 <_exit>
	...

0800f120 <__sflush_r>:
 800f120:	898a      	ldrh	r2, [r1, #12]
 800f122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f126:	4605      	mov	r5, r0
 800f128:	0710      	lsls	r0, r2, #28
 800f12a:	460c      	mov	r4, r1
 800f12c:	d458      	bmi.n	800f1e0 <__sflush_r+0xc0>
 800f12e:	684b      	ldr	r3, [r1, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	dc05      	bgt.n	800f140 <__sflush_r+0x20>
 800f134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f136:	2b00      	cmp	r3, #0
 800f138:	dc02      	bgt.n	800f140 <__sflush_r+0x20>
 800f13a:	2000      	movs	r0, #0
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f142:	2e00      	cmp	r6, #0
 800f144:	d0f9      	beq.n	800f13a <__sflush_r+0x1a>
 800f146:	2300      	movs	r3, #0
 800f148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f14c:	682f      	ldr	r7, [r5, #0]
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	d032      	beq.n	800f1b8 <__sflush_r+0x98>
 800f152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	075a      	lsls	r2, r3, #29
 800f158:	d505      	bpl.n	800f166 <__sflush_r+0x46>
 800f15a:	6863      	ldr	r3, [r4, #4]
 800f15c:	1ac0      	subs	r0, r0, r3
 800f15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f160:	b10b      	cbz	r3, 800f166 <__sflush_r+0x46>
 800f162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f164:	1ac0      	subs	r0, r0, r3
 800f166:	2300      	movs	r3, #0
 800f168:	4602      	mov	r2, r0
 800f16a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f16c:	6a21      	ldr	r1, [r4, #32]
 800f16e:	4628      	mov	r0, r5
 800f170:	47b0      	blx	r6
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	d106      	bne.n	800f186 <__sflush_r+0x66>
 800f178:	6829      	ldr	r1, [r5, #0]
 800f17a:	291d      	cmp	r1, #29
 800f17c:	d82c      	bhi.n	800f1d8 <__sflush_r+0xb8>
 800f17e:	4a2a      	ldr	r2, [pc, #168]	; (800f228 <__sflush_r+0x108>)
 800f180:	40ca      	lsrs	r2, r1
 800f182:	07d6      	lsls	r6, r2, #31
 800f184:	d528      	bpl.n	800f1d8 <__sflush_r+0xb8>
 800f186:	2200      	movs	r2, #0
 800f188:	6062      	str	r2, [r4, #4]
 800f18a:	04d9      	lsls	r1, r3, #19
 800f18c:	6922      	ldr	r2, [r4, #16]
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	d504      	bpl.n	800f19c <__sflush_r+0x7c>
 800f192:	1c42      	adds	r2, r0, #1
 800f194:	d101      	bne.n	800f19a <__sflush_r+0x7a>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b903      	cbnz	r3, 800f19c <__sflush_r+0x7c>
 800f19a:	6560      	str	r0, [r4, #84]	; 0x54
 800f19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f19e:	602f      	str	r7, [r5, #0]
 800f1a0:	2900      	cmp	r1, #0
 800f1a2:	d0ca      	beq.n	800f13a <__sflush_r+0x1a>
 800f1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1a8:	4299      	cmp	r1, r3
 800f1aa:	d002      	beq.n	800f1b2 <__sflush_r+0x92>
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f7ff fc7f 	bl	800eab0 <_free_r>
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800f1b6:	e7c1      	b.n	800f13c <__sflush_r+0x1c>
 800f1b8:	6a21      	ldr	r1, [r4, #32]
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4628      	mov	r0, r5
 800f1be:	47b0      	blx	r6
 800f1c0:	1c41      	adds	r1, r0, #1
 800f1c2:	d1c7      	bne.n	800f154 <__sflush_r+0x34>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d0c4      	beq.n	800f154 <__sflush_r+0x34>
 800f1ca:	2b1d      	cmp	r3, #29
 800f1cc:	d001      	beq.n	800f1d2 <__sflush_r+0xb2>
 800f1ce:	2b16      	cmp	r3, #22
 800f1d0:	d101      	bne.n	800f1d6 <__sflush_r+0xb6>
 800f1d2:	602f      	str	r7, [r5, #0]
 800f1d4:	e7b1      	b.n	800f13a <__sflush_r+0x1a>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	e7ad      	b.n	800f13c <__sflush_r+0x1c>
 800f1e0:	690f      	ldr	r7, [r1, #16]
 800f1e2:	2f00      	cmp	r7, #0
 800f1e4:	d0a9      	beq.n	800f13a <__sflush_r+0x1a>
 800f1e6:	0793      	lsls	r3, r2, #30
 800f1e8:	680e      	ldr	r6, [r1, #0]
 800f1ea:	bf08      	it	eq
 800f1ec:	694b      	ldreq	r3, [r1, #20]
 800f1ee:	600f      	str	r7, [r1, #0]
 800f1f0:	bf18      	it	ne
 800f1f2:	2300      	movne	r3, #0
 800f1f4:	eba6 0807 	sub.w	r8, r6, r7
 800f1f8:	608b      	str	r3, [r1, #8]
 800f1fa:	f1b8 0f00 	cmp.w	r8, #0
 800f1fe:	dd9c      	ble.n	800f13a <__sflush_r+0x1a>
 800f200:	6a21      	ldr	r1, [r4, #32]
 800f202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f204:	4643      	mov	r3, r8
 800f206:	463a      	mov	r2, r7
 800f208:	4628      	mov	r0, r5
 800f20a:	47b0      	blx	r6
 800f20c:	2800      	cmp	r0, #0
 800f20e:	dc06      	bgt.n	800f21e <__sflush_r+0xfe>
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	f04f 30ff 	mov.w	r0, #4294967295
 800f21c:	e78e      	b.n	800f13c <__sflush_r+0x1c>
 800f21e:	4407      	add	r7, r0
 800f220:	eba8 0800 	sub.w	r8, r8, r0
 800f224:	e7e9      	b.n	800f1fa <__sflush_r+0xda>
 800f226:	bf00      	nop
 800f228:	20400001 	.word	0x20400001

0800f22c <_fflush_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	690b      	ldr	r3, [r1, #16]
 800f230:	4605      	mov	r5, r0
 800f232:	460c      	mov	r4, r1
 800f234:	b913      	cbnz	r3, 800f23c <_fflush_r+0x10>
 800f236:	2500      	movs	r5, #0
 800f238:	4628      	mov	r0, r5
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	b118      	cbz	r0, 800f246 <_fflush_r+0x1a>
 800f23e:	6983      	ldr	r3, [r0, #24]
 800f240:	b90b      	cbnz	r3, 800f246 <_fflush_r+0x1a>
 800f242:	f000 f887 	bl	800f354 <__sinit>
 800f246:	4b14      	ldr	r3, [pc, #80]	; (800f298 <_fflush_r+0x6c>)
 800f248:	429c      	cmp	r4, r3
 800f24a:	d11b      	bne.n	800f284 <_fflush_r+0x58>
 800f24c:	686c      	ldr	r4, [r5, #4]
 800f24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0ef      	beq.n	800f236 <_fflush_r+0xa>
 800f256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f258:	07d0      	lsls	r0, r2, #31
 800f25a:	d404      	bmi.n	800f266 <_fflush_r+0x3a>
 800f25c:	0599      	lsls	r1, r3, #22
 800f25e:	d402      	bmi.n	800f266 <_fflush_r+0x3a>
 800f260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f262:	f000 f915 	bl	800f490 <__retarget_lock_acquire_recursive>
 800f266:	4628      	mov	r0, r5
 800f268:	4621      	mov	r1, r4
 800f26a:	f7ff ff59 	bl	800f120 <__sflush_r>
 800f26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f270:	07da      	lsls	r2, r3, #31
 800f272:	4605      	mov	r5, r0
 800f274:	d4e0      	bmi.n	800f238 <_fflush_r+0xc>
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	059b      	lsls	r3, r3, #22
 800f27a:	d4dd      	bmi.n	800f238 <_fflush_r+0xc>
 800f27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f27e:	f000 f908 	bl	800f492 <__retarget_lock_release_recursive>
 800f282:	e7d9      	b.n	800f238 <_fflush_r+0xc>
 800f284:	4b05      	ldr	r3, [pc, #20]	; (800f29c <_fflush_r+0x70>)
 800f286:	429c      	cmp	r4, r3
 800f288:	d101      	bne.n	800f28e <_fflush_r+0x62>
 800f28a:	68ac      	ldr	r4, [r5, #8]
 800f28c:	e7df      	b.n	800f24e <_fflush_r+0x22>
 800f28e:	4b04      	ldr	r3, [pc, #16]	; (800f2a0 <_fflush_r+0x74>)
 800f290:	429c      	cmp	r4, r3
 800f292:	bf08      	it	eq
 800f294:	68ec      	ldreq	r4, [r5, #12]
 800f296:	e7da      	b.n	800f24e <_fflush_r+0x22>
 800f298:	080106f4 	.word	0x080106f4
 800f29c:	08010714 	.word	0x08010714
 800f2a0:	080106d4 	.word	0x080106d4

0800f2a4 <std>:
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2b2:	6083      	str	r3, [r0, #8]
 800f2b4:	8181      	strh	r1, [r0, #12]
 800f2b6:	6643      	str	r3, [r0, #100]	; 0x64
 800f2b8:	81c2      	strh	r2, [r0, #14]
 800f2ba:	6183      	str	r3, [r0, #24]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	2208      	movs	r2, #8
 800f2c0:	305c      	adds	r0, #92	; 0x5c
 800f2c2:	f7fd fe01 	bl	800cec8 <memset>
 800f2c6:	4b05      	ldr	r3, [pc, #20]	; (800f2dc <std+0x38>)
 800f2c8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2ca:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <std+0x3c>)
 800f2cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2ce:	4b05      	ldr	r3, [pc, #20]	; (800f2e4 <std+0x40>)
 800f2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2d2:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <std+0x44>)
 800f2d4:	6224      	str	r4, [r4, #32]
 800f2d6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2d8:	bd10      	pop	{r4, pc}
 800f2da:	bf00      	nop
 800f2dc:	0800f5e5 	.word	0x0800f5e5
 800f2e0:	0800f607 	.word	0x0800f607
 800f2e4:	0800f63f 	.word	0x0800f63f
 800f2e8:	0800f663 	.word	0x0800f663

0800f2ec <_cleanup_r>:
 800f2ec:	4901      	ldr	r1, [pc, #4]	; (800f2f4 <_cleanup_r+0x8>)
 800f2ee:	f000 b8af 	b.w	800f450 <_fwalk_reent>
 800f2f2:	bf00      	nop
 800f2f4:	0800f22d 	.word	0x0800f22d

0800f2f8 <__sfmoreglue>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	1e4a      	subs	r2, r1, #1
 800f2fc:	2568      	movs	r5, #104	; 0x68
 800f2fe:	4355      	muls	r5, r2
 800f300:	460e      	mov	r6, r1
 800f302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f306:	f7ff fc23 	bl	800eb50 <_malloc_r>
 800f30a:	4604      	mov	r4, r0
 800f30c:	b140      	cbz	r0, 800f320 <__sfmoreglue+0x28>
 800f30e:	2100      	movs	r1, #0
 800f310:	e9c0 1600 	strd	r1, r6, [r0]
 800f314:	300c      	adds	r0, #12
 800f316:	60a0      	str	r0, [r4, #8]
 800f318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f31c:	f7fd fdd4 	bl	800cec8 <memset>
 800f320:	4620      	mov	r0, r4
 800f322:	bd70      	pop	{r4, r5, r6, pc}

0800f324 <__sfp_lock_acquire>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__sfp_lock_acquire+0x8>)
 800f326:	f000 b8b3 	b.w	800f490 <__retarget_lock_acquire_recursive>
 800f32a:	bf00      	nop
 800f32c:	24000c68 	.word	0x24000c68

0800f330 <__sfp_lock_release>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__sfp_lock_release+0x8>)
 800f332:	f000 b8ae 	b.w	800f492 <__retarget_lock_release_recursive>
 800f336:	bf00      	nop
 800f338:	24000c68 	.word	0x24000c68

0800f33c <__sinit_lock_acquire>:
 800f33c:	4801      	ldr	r0, [pc, #4]	; (800f344 <__sinit_lock_acquire+0x8>)
 800f33e:	f000 b8a7 	b.w	800f490 <__retarget_lock_acquire_recursive>
 800f342:	bf00      	nop
 800f344:	24000c63 	.word	0x24000c63

0800f348 <__sinit_lock_release>:
 800f348:	4801      	ldr	r0, [pc, #4]	; (800f350 <__sinit_lock_release+0x8>)
 800f34a:	f000 b8a2 	b.w	800f492 <__retarget_lock_release_recursive>
 800f34e:	bf00      	nop
 800f350:	24000c63 	.word	0x24000c63

0800f354 <__sinit>:
 800f354:	b510      	push	{r4, lr}
 800f356:	4604      	mov	r4, r0
 800f358:	f7ff fff0 	bl	800f33c <__sinit_lock_acquire>
 800f35c:	69a3      	ldr	r3, [r4, #24]
 800f35e:	b11b      	cbz	r3, 800f368 <__sinit+0x14>
 800f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f364:	f7ff bff0 	b.w	800f348 <__sinit_lock_release>
 800f368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f36c:	6523      	str	r3, [r4, #80]	; 0x50
 800f36e:	4b13      	ldr	r3, [pc, #76]	; (800f3bc <__sinit+0x68>)
 800f370:	4a13      	ldr	r2, [pc, #76]	; (800f3c0 <__sinit+0x6c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	62a2      	str	r2, [r4, #40]	; 0x28
 800f376:	42a3      	cmp	r3, r4
 800f378:	bf04      	itt	eq
 800f37a:	2301      	moveq	r3, #1
 800f37c:	61a3      	streq	r3, [r4, #24]
 800f37e:	4620      	mov	r0, r4
 800f380:	f000 f820 	bl	800f3c4 <__sfp>
 800f384:	6060      	str	r0, [r4, #4]
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f81c 	bl	800f3c4 <__sfp>
 800f38c:	60a0      	str	r0, [r4, #8]
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 f818 	bl	800f3c4 <__sfp>
 800f394:	2200      	movs	r2, #0
 800f396:	60e0      	str	r0, [r4, #12]
 800f398:	2104      	movs	r1, #4
 800f39a:	6860      	ldr	r0, [r4, #4]
 800f39c:	f7ff ff82 	bl	800f2a4 <std>
 800f3a0:	68a0      	ldr	r0, [r4, #8]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	2109      	movs	r1, #9
 800f3a6:	f7ff ff7d 	bl	800f2a4 <std>
 800f3aa:	68e0      	ldr	r0, [r4, #12]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	2112      	movs	r1, #18
 800f3b0:	f7ff ff78 	bl	800f2a4 <std>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	61a3      	str	r3, [r4, #24]
 800f3b8:	e7d2      	b.n	800f360 <__sinit+0xc>
 800f3ba:	bf00      	nop
 800f3bc:	08010350 	.word	0x08010350
 800f3c0:	0800f2ed 	.word	0x0800f2ed

0800f3c4 <__sfp>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	4607      	mov	r7, r0
 800f3c8:	f7ff ffac 	bl	800f324 <__sfp_lock_acquire>
 800f3cc:	4b1e      	ldr	r3, [pc, #120]	; (800f448 <__sfp+0x84>)
 800f3ce:	681e      	ldr	r6, [r3, #0]
 800f3d0:	69b3      	ldr	r3, [r6, #24]
 800f3d2:	b913      	cbnz	r3, 800f3da <__sfp+0x16>
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff ffbd 	bl	800f354 <__sinit>
 800f3da:	3648      	adds	r6, #72	; 0x48
 800f3dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	d503      	bpl.n	800f3ec <__sfp+0x28>
 800f3e4:	6833      	ldr	r3, [r6, #0]
 800f3e6:	b30b      	cbz	r3, 800f42c <__sfp+0x68>
 800f3e8:	6836      	ldr	r6, [r6, #0]
 800f3ea:	e7f7      	b.n	800f3dc <__sfp+0x18>
 800f3ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3f0:	b9d5      	cbnz	r5, 800f428 <__sfp+0x64>
 800f3f2:	4b16      	ldr	r3, [pc, #88]	; (800f44c <__sfp+0x88>)
 800f3f4:	60e3      	str	r3, [r4, #12]
 800f3f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3fa:	6665      	str	r5, [r4, #100]	; 0x64
 800f3fc:	f000 f847 	bl	800f48e <__retarget_lock_init_recursive>
 800f400:	f7ff ff96 	bl	800f330 <__sfp_lock_release>
 800f404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f40c:	6025      	str	r5, [r4, #0]
 800f40e:	61a5      	str	r5, [r4, #24]
 800f410:	2208      	movs	r2, #8
 800f412:	4629      	mov	r1, r5
 800f414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f418:	f7fd fd56 	bl	800cec8 <memset>
 800f41c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f424:	4620      	mov	r0, r4
 800f426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f428:	3468      	adds	r4, #104	; 0x68
 800f42a:	e7d9      	b.n	800f3e0 <__sfp+0x1c>
 800f42c:	2104      	movs	r1, #4
 800f42e:	4638      	mov	r0, r7
 800f430:	f7ff ff62 	bl	800f2f8 <__sfmoreglue>
 800f434:	4604      	mov	r4, r0
 800f436:	6030      	str	r0, [r6, #0]
 800f438:	2800      	cmp	r0, #0
 800f43a:	d1d5      	bne.n	800f3e8 <__sfp+0x24>
 800f43c:	f7ff ff78 	bl	800f330 <__sfp_lock_release>
 800f440:	230c      	movs	r3, #12
 800f442:	603b      	str	r3, [r7, #0]
 800f444:	e7ee      	b.n	800f424 <__sfp+0x60>
 800f446:	bf00      	nop
 800f448:	08010350 	.word	0x08010350
 800f44c:	ffff0001 	.word	0xffff0001

0800f450 <_fwalk_reent>:
 800f450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f454:	4606      	mov	r6, r0
 800f456:	4688      	mov	r8, r1
 800f458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f45c:	2700      	movs	r7, #0
 800f45e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f462:	f1b9 0901 	subs.w	r9, r9, #1
 800f466:	d505      	bpl.n	800f474 <_fwalk_reent+0x24>
 800f468:	6824      	ldr	r4, [r4, #0]
 800f46a:	2c00      	cmp	r4, #0
 800f46c:	d1f7      	bne.n	800f45e <_fwalk_reent+0xe>
 800f46e:	4638      	mov	r0, r7
 800f470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f474:	89ab      	ldrh	r3, [r5, #12]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d907      	bls.n	800f48a <_fwalk_reent+0x3a>
 800f47a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f47e:	3301      	adds	r3, #1
 800f480:	d003      	beq.n	800f48a <_fwalk_reent+0x3a>
 800f482:	4629      	mov	r1, r5
 800f484:	4630      	mov	r0, r6
 800f486:	47c0      	blx	r8
 800f488:	4307      	orrs	r7, r0
 800f48a:	3568      	adds	r5, #104	; 0x68
 800f48c:	e7e9      	b.n	800f462 <_fwalk_reent+0x12>

0800f48e <__retarget_lock_init_recursive>:
 800f48e:	4770      	bx	lr

0800f490 <__retarget_lock_acquire_recursive>:
 800f490:	4770      	bx	lr

0800f492 <__retarget_lock_release_recursive>:
 800f492:	4770      	bx	lr

0800f494 <__swhatbuf_r>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	460e      	mov	r6, r1
 800f498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49c:	2900      	cmp	r1, #0
 800f49e:	b096      	sub	sp, #88	; 0x58
 800f4a0:	4614      	mov	r4, r2
 800f4a2:	461d      	mov	r5, r3
 800f4a4:	da07      	bge.n	800f4b6 <__swhatbuf_r+0x22>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	89b3      	ldrh	r3, [r6, #12]
 800f4ac:	061a      	lsls	r2, r3, #24
 800f4ae:	d410      	bmi.n	800f4d2 <__swhatbuf_r+0x3e>
 800f4b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b4:	e00e      	b.n	800f4d4 <__swhatbuf_r+0x40>
 800f4b6:	466a      	mov	r2, sp
 800f4b8:	f000 f8fa 	bl	800f6b0 <_fstat_r>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	dbf2      	blt.n	800f4a6 <__swhatbuf_r+0x12>
 800f4c0:	9a01      	ldr	r2, [sp, #4]
 800f4c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4ca:	425a      	negs	r2, r3
 800f4cc:	415a      	adcs	r2, r3
 800f4ce:	602a      	str	r2, [r5, #0]
 800f4d0:	e7ee      	b.n	800f4b0 <__swhatbuf_r+0x1c>
 800f4d2:	2340      	movs	r3, #64	; 0x40
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	6023      	str	r3, [r4, #0]
 800f4d8:	b016      	add	sp, #88	; 0x58
 800f4da:	bd70      	pop	{r4, r5, r6, pc}

0800f4dc <__smakebuf_r>:
 800f4dc:	898b      	ldrh	r3, [r1, #12]
 800f4de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4e0:	079d      	lsls	r5, r3, #30
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	d507      	bpl.n	800f4f8 <__smakebuf_r+0x1c>
 800f4e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	6123      	str	r3, [r4, #16]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	6163      	str	r3, [r4, #20]
 800f4f4:	b002      	add	sp, #8
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	ab01      	add	r3, sp, #4
 800f4fa:	466a      	mov	r2, sp
 800f4fc:	f7ff ffca 	bl	800f494 <__swhatbuf_r>
 800f500:	9900      	ldr	r1, [sp, #0]
 800f502:	4605      	mov	r5, r0
 800f504:	4630      	mov	r0, r6
 800f506:	f7ff fb23 	bl	800eb50 <_malloc_r>
 800f50a:	b948      	cbnz	r0, 800f520 <__smakebuf_r+0x44>
 800f50c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f510:	059a      	lsls	r2, r3, #22
 800f512:	d4ef      	bmi.n	800f4f4 <__smakebuf_r+0x18>
 800f514:	f023 0303 	bic.w	r3, r3, #3
 800f518:	f043 0302 	orr.w	r3, r3, #2
 800f51c:	81a3      	strh	r3, [r4, #12]
 800f51e:	e7e3      	b.n	800f4e8 <__smakebuf_r+0xc>
 800f520:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <__smakebuf_r+0x7c>)
 800f522:	62b3      	str	r3, [r6, #40]	; 0x28
 800f524:	89a3      	ldrh	r3, [r4, #12]
 800f526:	6020      	str	r0, [r4, #0]
 800f528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f52c:	81a3      	strh	r3, [r4, #12]
 800f52e:	9b00      	ldr	r3, [sp, #0]
 800f530:	6163      	str	r3, [r4, #20]
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	6120      	str	r0, [r4, #16]
 800f536:	b15b      	cbz	r3, 800f550 <__smakebuf_r+0x74>
 800f538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f53c:	4630      	mov	r0, r6
 800f53e:	f000 f8c9 	bl	800f6d4 <_isatty_r>
 800f542:	b128      	cbz	r0, 800f550 <__smakebuf_r+0x74>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f023 0303 	bic.w	r3, r3, #3
 800f54a:	f043 0301 	orr.w	r3, r3, #1
 800f54e:	81a3      	strh	r3, [r4, #12]
 800f550:	89a0      	ldrh	r0, [r4, #12]
 800f552:	4305      	orrs	r5, r0
 800f554:	81a5      	strh	r5, [r4, #12]
 800f556:	e7cd      	b.n	800f4f4 <__smakebuf_r+0x18>
 800f558:	0800f2ed 	.word	0x0800f2ed

0800f55c <_raise_r>:
 800f55c:	291f      	cmp	r1, #31
 800f55e:	b538      	push	{r3, r4, r5, lr}
 800f560:	4604      	mov	r4, r0
 800f562:	460d      	mov	r5, r1
 800f564:	d904      	bls.n	800f570 <_raise_r+0x14>
 800f566:	2316      	movs	r3, #22
 800f568:	6003      	str	r3, [r0, #0]
 800f56a:	f04f 30ff 	mov.w	r0, #4294967295
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f572:	b112      	cbz	r2, 800f57a <_raise_r+0x1e>
 800f574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f578:	b94b      	cbnz	r3, 800f58e <_raise_r+0x32>
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 f830 	bl	800f5e0 <_getpid_r>
 800f580:	462a      	mov	r2, r5
 800f582:	4601      	mov	r1, r0
 800f584:	4620      	mov	r0, r4
 800f586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f58a:	f000 b817 	b.w	800f5bc <_kill_r>
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d00a      	beq.n	800f5a8 <_raise_r+0x4c>
 800f592:	1c59      	adds	r1, r3, #1
 800f594:	d103      	bne.n	800f59e <_raise_r+0x42>
 800f596:	2316      	movs	r3, #22
 800f598:	6003      	str	r3, [r0, #0]
 800f59a:	2001      	movs	r0, #1
 800f59c:	e7e7      	b.n	800f56e <_raise_r+0x12>
 800f59e:	2400      	movs	r4, #0
 800f5a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	4798      	blx	r3
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	e7e0      	b.n	800f56e <_raise_r+0x12>

0800f5ac <raise>:
 800f5ac:	4b02      	ldr	r3, [pc, #8]	; (800f5b8 <raise+0xc>)
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	6818      	ldr	r0, [r3, #0]
 800f5b2:	f7ff bfd3 	b.w	800f55c <_raise_r>
 800f5b6:	bf00      	nop
 800f5b8:	24000020 	.word	0x24000020

0800f5bc <_kill_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4d07      	ldr	r5, [pc, #28]	; (800f5dc <_kill_r+0x20>)
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	4608      	mov	r0, r1
 800f5c6:	4611      	mov	r1, r2
 800f5c8:	602b      	str	r3, [r5, #0]
 800f5ca:	f7f2 fcf9 	bl	8001fc0 <_kill>
 800f5ce:	1c43      	adds	r3, r0, #1
 800f5d0:	d102      	bne.n	800f5d8 <_kill_r+0x1c>
 800f5d2:	682b      	ldr	r3, [r5, #0]
 800f5d4:	b103      	cbz	r3, 800f5d8 <_kill_r+0x1c>
 800f5d6:	6023      	str	r3, [r4, #0]
 800f5d8:	bd38      	pop	{r3, r4, r5, pc}
 800f5da:	bf00      	nop
 800f5dc:	24000c5c 	.word	0x24000c5c

0800f5e0 <_getpid_r>:
 800f5e0:	f7f2 bce6 	b.w	8001fb0 <_getpid>

0800f5e4 <__sread>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ec:	f000 f894 	bl	800f718 <_read_r>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	bfab      	itete	ge
 800f5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5f8:	181b      	addge	r3, r3, r0
 800f5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5fe:	bfac      	ite	ge
 800f600:	6563      	strge	r3, [r4, #84]	; 0x54
 800f602:	81a3      	strhlt	r3, [r4, #12]
 800f604:	bd10      	pop	{r4, pc}

0800f606 <__swrite>:
 800f606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60a:	461f      	mov	r7, r3
 800f60c:	898b      	ldrh	r3, [r1, #12]
 800f60e:	05db      	lsls	r3, r3, #23
 800f610:	4605      	mov	r5, r0
 800f612:	460c      	mov	r4, r1
 800f614:	4616      	mov	r6, r2
 800f616:	d505      	bpl.n	800f624 <__swrite+0x1e>
 800f618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61c:	2302      	movs	r3, #2
 800f61e:	2200      	movs	r2, #0
 800f620:	f000 f868 	bl	800f6f4 <_lseek_r>
 800f624:	89a3      	ldrh	r3, [r4, #12]
 800f626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	4632      	mov	r2, r6
 800f632:	463b      	mov	r3, r7
 800f634:	4628      	mov	r0, r5
 800f636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63a:	f000 b817 	b.w	800f66c <_write_r>

0800f63e <__sseek>:
 800f63e:	b510      	push	{r4, lr}
 800f640:	460c      	mov	r4, r1
 800f642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f646:	f000 f855 	bl	800f6f4 <_lseek_r>
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	bf15      	itete	ne
 800f650:	6560      	strne	r0, [r4, #84]	; 0x54
 800f652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f65a:	81a3      	strheq	r3, [r4, #12]
 800f65c:	bf18      	it	ne
 800f65e:	81a3      	strhne	r3, [r4, #12]
 800f660:	bd10      	pop	{r4, pc}

0800f662 <__sclose>:
 800f662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f666:	f000 b813 	b.w	800f690 <_close_r>
	...

0800f66c <_write_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d07      	ldr	r5, [pc, #28]	; (800f68c <_write_r+0x20>)
 800f670:	4604      	mov	r4, r0
 800f672:	4608      	mov	r0, r1
 800f674:	4611      	mov	r1, r2
 800f676:	2200      	movs	r2, #0
 800f678:	602a      	str	r2, [r5, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	f7f2 fcd7 	bl	800202e <_write>
 800f680:	1c43      	adds	r3, r0, #1
 800f682:	d102      	bne.n	800f68a <_write_r+0x1e>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	b103      	cbz	r3, 800f68a <_write_r+0x1e>
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	24000c5c 	.word	0x24000c5c

0800f690 <_close_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d06      	ldr	r5, [pc, #24]	; (800f6ac <_close_r+0x1c>)
 800f694:	2300      	movs	r3, #0
 800f696:	4604      	mov	r4, r0
 800f698:	4608      	mov	r0, r1
 800f69a:	602b      	str	r3, [r5, #0]
 800f69c:	f7f2 fce3 	bl	8002066 <_close>
 800f6a0:	1c43      	adds	r3, r0, #1
 800f6a2:	d102      	bne.n	800f6aa <_close_r+0x1a>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	b103      	cbz	r3, 800f6aa <_close_r+0x1a>
 800f6a8:	6023      	str	r3, [r4, #0]
 800f6aa:	bd38      	pop	{r3, r4, r5, pc}
 800f6ac:	24000c5c 	.word	0x24000c5c

0800f6b0 <_fstat_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4d07      	ldr	r5, [pc, #28]	; (800f6d0 <_fstat_r+0x20>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	602b      	str	r3, [r5, #0]
 800f6be:	f7f2 fcde 	bl	800207e <_fstat>
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	d102      	bne.n	800f6cc <_fstat_r+0x1c>
 800f6c6:	682b      	ldr	r3, [r5, #0]
 800f6c8:	b103      	cbz	r3, 800f6cc <_fstat_r+0x1c>
 800f6ca:	6023      	str	r3, [r4, #0]
 800f6cc:	bd38      	pop	{r3, r4, r5, pc}
 800f6ce:	bf00      	nop
 800f6d0:	24000c5c 	.word	0x24000c5c

0800f6d4 <_isatty_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4d06      	ldr	r5, [pc, #24]	; (800f6f0 <_isatty_r+0x1c>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	602b      	str	r3, [r5, #0]
 800f6e0:	f7f2 fcdd 	bl	800209e <_isatty>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_isatty_r+0x1a>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_isatty_r+0x1a>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	24000c5c 	.word	0x24000c5c

0800f6f4 <_lseek_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	; (800f714 <_lseek_r+0x20>)
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	4608      	mov	r0, r1
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	2200      	movs	r2, #0
 800f700:	602a      	str	r2, [r5, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	f7f2 fcd6 	bl	80020b4 <_lseek>
 800f708:	1c43      	adds	r3, r0, #1
 800f70a:	d102      	bne.n	800f712 <_lseek_r+0x1e>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	b103      	cbz	r3, 800f712 <_lseek_r+0x1e>
 800f710:	6023      	str	r3, [r4, #0]
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	24000c5c 	.word	0x24000c5c

0800f718 <_read_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d07      	ldr	r5, [pc, #28]	; (800f738 <_read_r+0x20>)
 800f71c:	4604      	mov	r4, r0
 800f71e:	4608      	mov	r0, r1
 800f720:	4611      	mov	r1, r2
 800f722:	2200      	movs	r2, #0
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	f7f2 fc64 	bl	8001ff4 <_read>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d102      	bne.n	800f736 <_read_r+0x1e>
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	b103      	cbz	r3, 800f736 <_read_r+0x1e>
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	24000c5c 	.word	0x24000c5c

0800f73c <fabs>:
 800f73c:	ec51 0b10 	vmov	r0, r1, d0
 800f740:	ee10 2a10 	vmov	r2, s0
 800f744:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f748:	ec43 2b10 	vmov	d0, r2, r3
 800f74c:	4770      	bx	lr
	...

0800f750 <sin>:
 800f750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f752:	eeb0 7b40 	vmov.f64	d7, d0
 800f756:	ee17 3a90 	vmov	r3, s15
 800f75a:	4a1f      	ldr	r2, [pc, #124]	; (800f7d8 <sin+0x88>)
 800f75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f760:	4293      	cmp	r3, r2
 800f762:	dc05      	bgt.n	800f770 <sin+0x20>
 800f764:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800f7d0 <sin+0x80>
 800f768:	2000      	movs	r0, #0
 800f76a:	f000 fc65 	bl	8010038 <__kernel_sin>
 800f76e:	e004      	b.n	800f77a <sin+0x2a>
 800f770:	4a1a      	ldr	r2, [pc, #104]	; (800f7dc <sin+0x8c>)
 800f772:	4293      	cmp	r3, r2
 800f774:	dd04      	ble.n	800f780 <sin+0x30>
 800f776:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f77a:	b005      	add	sp, #20
 800f77c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f780:	4668      	mov	r0, sp
 800f782:	f000 f82d 	bl	800f7e0 <__ieee754_rem_pio2>
 800f786:	f000 0003 	and.w	r0, r0, #3
 800f78a:	2801      	cmp	r0, #1
 800f78c:	d008      	beq.n	800f7a0 <sin+0x50>
 800f78e:	2802      	cmp	r0, #2
 800f790:	d00d      	beq.n	800f7ae <sin+0x5e>
 800f792:	b9b0      	cbnz	r0, 800f7c2 <sin+0x72>
 800f794:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f798:	ed9d 0b00 	vldr	d0, [sp]
 800f79c:	2001      	movs	r0, #1
 800f79e:	e7e4      	b.n	800f76a <sin+0x1a>
 800f7a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7a4:	ed9d 0b00 	vldr	d0, [sp]
 800f7a8:	f000 f95a 	bl	800fa60 <__kernel_cos>
 800f7ac:	e7e5      	b.n	800f77a <sin+0x2a>
 800f7ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7b2:	ed9d 0b00 	vldr	d0, [sp]
 800f7b6:	2001      	movs	r0, #1
 800f7b8:	f000 fc3e 	bl	8010038 <__kernel_sin>
 800f7bc:	eeb1 0b40 	vneg.f64	d0, d0
 800f7c0:	e7db      	b.n	800f77a <sin+0x2a>
 800f7c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7c6:	ed9d 0b00 	vldr	d0, [sp]
 800f7ca:	f000 f949 	bl	800fa60 <__kernel_cos>
 800f7ce:	e7f5      	b.n	800f7bc <sin+0x6c>
	...
 800f7d8:	3fe921fb 	.word	0x3fe921fb
 800f7dc:	7fefffff 	.word	0x7fefffff

0800f7e0 <__ieee754_rem_pio2>:
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	eeb0 7b40 	vmov.f64	d7, d0
 800f7e6:	ee17 5a90 	vmov	r5, s15
 800f7ea:	4b97      	ldr	r3, [pc, #604]	; (800fa48 <__ieee754_rem_pio2+0x268>)
 800f7ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f7f0:	429e      	cmp	r6, r3
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	dc07      	bgt.n	800f808 <__ieee754_rem_pio2+0x28>
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	ed84 0b00 	vstr	d0, [r4]
 800f800:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f804:	2000      	movs	r0, #0
 800f806:	e01b      	b.n	800f840 <__ieee754_rem_pio2+0x60>
 800f808:	4b90      	ldr	r3, [pc, #576]	; (800fa4c <__ieee754_rem_pio2+0x26c>)
 800f80a:	429e      	cmp	r6, r3
 800f80c:	dc3b      	bgt.n	800f886 <__ieee754_rem_pio2+0xa6>
 800f80e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f812:	2d00      	cmp	r5, #0
 800f814:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800fa08 <__ieee754_rem_pio2+0x228>
 800f818:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f81c:	dd19      	ble.n	800f852 <__ieee754_rem_pio2+0x72>
 800f81e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f822:	429e      	cmp	r6, r3
 800f824:	d00e      	beq.n	800f844 <__ieee754_rem_pio2+0x64>
 800f826:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800fa10 <__ieee754_rem_pio2+0x230>
 800f82a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f82e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f832:	ed84 5b00 	vstr	d5, [r4]
 800f836:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f83a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f83e:	2001      	movs	r0, #1
 800f840:	b008      	add	sp, #32
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800fa18 <__ieee754_rem_pio2+0x238>
 800f848:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f84c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800fa20 <__ieee754_rem_pio2+0x240>
 800f850:	e7eb      	b.n	800f82a <__ieee754_rem_pio2+0x4a>
 800f852:	429e      	cmp	r6, r3
 800f854:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f858:	d00e      	beq.n	800f878 <__ieee754_rem_pio2+0x98>
 800f85a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800fa10 <__ieee754_rem_pio2+0x230>
 800f85e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f862:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f866:	ed84 5b00 	vstr	d5, [r4]
 800f86a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f86e:	f04f 30ff 	mov.w	r0, #4294967295
 800f872:	ed84 7b02 	vstr	d7, [r4, #8]
 800f876:	e7e3      	b.n	800f840 <__ieee754_rem_pio2+0x60>
 800f878:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800fa18 <__ieee754_rem_pio2+0x238>
 800f87c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f880:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800fa20 <__ieee754_rem_pio2+0x240>
 800f884:	e7eb      	b.n	800f85e <__ieee754_rem_pio2+0x7e>
 800f886:	4b72      	ldr	r3, [pc, #456]	; (800fa50 <__ieee754_rem_pio2+0x270>)
 800f888:	429e      	cmp	r6, r3
 800f88a:	dc6e      	bgt.n	800f96a <__ieee754_rem_pio2+0x18a>
 800f88c:	f7ff ff56 	bl	800f73c <fabs>
 800f890:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f894:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800fa28 <__ieee754_rem_pio2+0x248>
 800f898:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f89c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f8a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f8a4:	ee17 0a90 	vmov	r0, s15
 800f8a8:	eeb1 4b45 	vneg.f64	d4, d5
 800f8ac:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fa08 <__ieee754_rem_pio2+0x228>
 800f8b0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800f8b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fa10 <__ieee754_rem_pio2+0x230>
 800f8b8:	281f      	cmp	r0, #31
 800f8ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f8be:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f8c2:	dc08      	bgt.n	800f8d6 <__ieee754_rem_pio2+0xf6>
 800f8c4:	4b63      	ldr	r3, [pc, #396]	; (800fa54 <__ieee754_rem_pio2+0x274>)
 800f8c6:	1e42      	subs	r2, r0, #1
 800f8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8cc:	42b3      	cmp	r3, r6
 800f8ce:	d002      	beq.n	800f8d6 <__ieee754_rem_pio2+0xf6>
 800f8d0:	ed84 6b00 	vstr	d6, [r4]
 800f8d4:	e024      	b.n	800f920 <__ieee754_rem_pio2+0x140>
 800f8d6:	ee16 3a90 	vmov	r3, s13
 800f8da:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f8de:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800f8e2:	2b10      	cmp	r3, #16
 800f8e4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800f8e8:	ddf2      	ble.n	800f8d0 <__ieee754_rem_pio2+0xf0>
 800f8ea:	eeb0 6b40 	vmov.f64	d6, d0
 800f8ee:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800fa18 <__ieee754_rem_pio2+0x238>
 800f8f2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800f8f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f8fa:	eea4 7b03 	vfma.f64	d7, d4, d3
 800f8fe:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800fa20 <__ieee754_rem_pio2+0x240>
 800f902:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800f906:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f90a:	ee13 3a90 	vmov	r3, s7
 800f90e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	2b31      	cmp	r3, #49	; 0x31
 800f916:	dc17      	bgt.n	800f948 <__ieee754_rem_pio2+0x168>
 800f918:	eeb0 0b46 	vmov.f64	d0, d6
 800f91c:	ed84 3b00 	vstr	d3, [r4]
 800f920:	ed94 6b00 	vldr	d6, [r4]
 800f924:	2d00      	cmp	r5, #0
 800f926:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f92a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f92e:	ed84 7b02 	vstr	d7, [r4, #8]
 800f932:	da85      	bge.n	800f840 <__ieee754_rem_pio2+0x60>
 800f934:	eeb1 6b46 	vneg.f64	d6, d6
 800f938:	ed84 6b00 	vstr	d6, [r4]
 800f93c:	eeb1 7b47 	vneg.f64	d7, d7
 800f940:	4240      	negs	r0, r0
 800f942:	ed84 7b02 	vstr	d7, [r4, #8]
 800f946:	e77b      	b.n	800f840 <__ieee754_rem_pio2+0x60>
 800f948:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800fa30 <__ieee754_rem_pio2+0x250>
 800f94c:	eeb0 0b46 	vmov.f64	d0, d6
 800f950:	eea4 0b03 	vfma.f64	d0, d4, d3
 800f954:	ee36 7b40 	vsub.f64	d7, d6, d0
 800f958:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800fa38 <__ieee754_rem_pio2+0x258>
 800f95c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800f960:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f964:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f968:	e7b2      	b.n	800f8d0 <__ieee754_rem_pio2+0xf0>
 800f96a:	4b3b      	ldr	r3, [pc, #236]	; (800fa58 <__ieee754_rem_pio2+0x278>)
 800f96c:	429e      	cmp	r6, r3
 800f96e:	dd06      	ble.n	800f97e <__ieee754_rem_pio2+0x19e>
 800f970:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f974:	ed80 7b02 	vstr	d7, [r0, #8]
 800f978:	ed80 7b00 	vstr	d7, [r0]
 800f97c:	e742      	b.n	800f804 <__ieee754_rem_pio2+0x24>
 800f97e:	1532      	asrs	r2, r6, #20
 800f980:	ee10 0a10 	vmov	r0, s0
 800f984:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f988:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f98c:	ec41 0b17 	vmov	d7, r0, r1
 800f990:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f994:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800fa40 <__ieee754_rem_pio2+0x260>
 800f998:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f99c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f9a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f9a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9a8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f9ac:	a902      	add	r1, sp, #8
 800f9ae:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f9b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f9b6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f9ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9c2:	2603      	movs	r6, #3
 800f9c4:	4608      	mov	r0, r1
 800f9c6:	ed91 7b04 	vldr	d7, [r1, #16]
 800f9ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d2:	4633      	mov	r3, r6
 800f9d4:	f1a1 0108 	sub.w	r1, r1, #8
 800f9d8:	f106 36ff 	add.w	r6, r6, #4294967295
 800f9dc:	d0f3      	beq.n	800f9c6 <__ieee754_rem_pio2+0x1e6>
 800f9de:	491f      	ldr	r1, [pc, #124]	; (800fa5c <__ieee754_rem_pio2+0x27c>)
 800f9e0:	9101      	str	r1, [sp, #4]
 800f9e2:	2102      	movs	r1, #2
 800f9e4:	9100      	str	r1, [sp, #0]
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	f000 f8a6 	bl	800fb38 <__kernel_rem_pio2>
 800f9ec:	2d00      	cmp	r5, #0
 800f9ee:	f6bf af27 	bge.w	800f840 <__ieee754_rem_pio2+0x60>
 800f9f2:	ed94 7b00 	vldr	d7, [r4]
 800f9f6:	eeb1 7b47 	vneg.f64	d7, d7
 800f9fa:	ed84 7b00 	vstr	d7, [r4]
 800f9fe:	ed94 7b02 	vldr	d7, [r4, #8]
 800fa02:	e79b      	b.n	800f93c <__ieee754_rem_pio2+0x15c>
 800fa04:	f3af 8000 	nop.w
 800fa08:	54400000 	.word	0x54400000
 800fa0c:	3ff921fb 	.word	0x3ff921fb
 800fa10:	1a626331 	.word	0x1a626331
 800fa14:	3dd0b461 	.word	0x3dd0b461
 800fa18:	1a600000 	.word	0x1a600000
 800fa1c:	3dd0b461 	.word	0x3dd0b461
 800fa20:	2e037073 	.word	0x2e037073
 800fa24:	3ba3198a 	.word	0x3ba3198a
 800fa28:	6dc9c883 	.word	0x6dc9c883
 800fa2c:	3fe45f30 	.word	0x3fe45f30
 800fa30:	2e000000 	.word	0x2e000000
 800fa34:	3ba3198a 	.word	0x3ba3198a
 800fa38:	252049c1 	.word	0x252049c1
 800fa3c:	397b839a 	.word	0x397b839a
 800fa40:	00000000 	.word	0x00000000
 800fa44:	41700000 	.word	0x41700000
 800fa48:	3fe921fb 	.word	0x3fe921fb
 800fa4c:	4002d97b 	.word	0x4002d97b
 800fa50:	413921fb 	.word	0x413921fb
 800fa54:	08010734 	.word	0x08010734
 800fa58:	7fefffff 	.word	0x7fefffff
 800fa5c:	080107b4 	.word	0x080107b4

0800fa60 <__kernel_cos>:
 800fa60:	ee10 1a90 	vmov	r1, s1
 800fa64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fa68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fa6c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800fa70:	da05      	bge.n	800fa7e <__kernel_cos+0x1e>
 800fa72:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fa76:	ee17 3a90 	vmov	r3, s15
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d03d      	beq.n	800fafa <__kernel_cos+0x9a>
 800fa7e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800fa82:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800fb00 <__kernel_cos+0xa0>
 800fa86:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800fb08 <__kernel_cos+0xa8>
 800fa8a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800fa8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fb10 <__kernel_cos+0xb0>
 800fa92:	eea6 7b03 	vfma.f64	d7, d6, d3
 800fa96:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800fb18 <__kernel_cos+0xb8>
 800fa9a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800fa9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fb20 <__kernel_cos+0xc0>
 800faa2:	4b23      	ldr	r3, [pc, #140]	; (800fb30 <__kernel_cos+0xd0>)
 800faa4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800faa8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800fb28 <__kernel_cos+0xc8>
 800faac:	4299      	cmp	r1, r3
 800faae:	eea7 6b03 	vfma.f64	d6, d7, d3
 800fab2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fab6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800faba:	ee23 7b07 	vmul.f64	d7, d3, d7
 800fabe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800fac2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800fac6:	dc04      	bgt.n	800fad2 <__kernel_cos+0x72>
 800fac8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800facc:	ee34 0b46 	vsub.f64	d0, d4, d6
 800fad0:	4770      	bx	lr
 800fad2:	4b18      	ldr	r3, [pc, #96]	; (800fb34 <__kernel_cos+0xd4>)
 800fad4:	4299      	cmp	r1, r3
 800fad6:	dc0d      	bgt.n	800faf4 <__kernel_cos+0x94>
 800fad8:	2200      	movs	r2, #0
 800fada:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800fade:	ec43 2b15 	vmov	d5, r2, r3
 800fae2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800fae6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800faea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800faee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800faf2:	4770      	bx	lr
 800faf4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800faf8:	e7f3      	b.n	800fae2 <__kernel_cos+0x82>
 800fafa:	eeb0 0b44 	vmov.f64	d0, d4
 800fafe:	4770      	bx	lr
 800fb00:	be8838d4 	.word	0xbe8838d4
 800fb04:	bda8fae9 	.word	0xbda8fae9
 800fb08:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb0c:	3e21ee9e 	.word	0x3e21ee9e
 800fb10:	809c52ad 	.word	0x809c52ad
 800fb14:	be927e4f 	.word	0xbe927e4f
 800fb18:	19cb1590 	.word	0x19cb1590
 800fb1c:	3efa01a0 	.word	0x3efa01a0
 800fb20:	16c15177 	.word	0x16c15177
 800fb24:	bf56c16c 	.word	0xbf56c16c
 800fb28:	5555554c 	.word	0x5555554c
 800fb2c:	3fa55555 	.word	0x3fa55555
 800fb30:	3fd33332 	.word	0x3fd33332
 800fb34:	3fe90000 	.word	0x3fe90000

0800fb38 <__kernel_rem_pio2>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	ed2d 8b06 	vpush	{d8-d10}
 800fb40:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800fb44:	469b      	mov	fp, r3
 800fb46:	460f      	mov	r7, r1
 800fb48:	4bcf      	ldr	r3, [pc, #828]	; (800fe88 <__kernel_rem_pio2+0x350>)
 800fb4a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800fb4c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800fb50:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800fb54:	9000      	str	r0, [sp, #0]
 800fb56:	f112 0f14 	cmn.w	r2, #20
 800fb5a:	bfa8      	it	ge
 800fb5c:	2318      	movge	r3, #24
 800fb5e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800fb62:	bfb8      	it	lt
 800fb64:	2300      	movlt	r3, #0
 800fb66:	f06f 0417 	mvn.w	r4, #23
 800fb6a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800fe70 <__kernel_rem_pio2+0x338>
 800fb6e:	bfa4      	itt	ge
 800fb70:	f1a2 0a03 	subge.w	sl, r2, #3
 800fb74:	fb9a f3f3 	sdivge	r3, sl, r3
 800fb78:	fb03 4404 	mla	r4, r3, r4, r4
 800fb7c:	1a5d      	subs	r5, r3, r1
 800fb7e:	4414      	add	r4, r2
 800fb80:	eb09 0601 	add.w	r6, r9, r1
 800fb84:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800fb88:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	42b2      	cmp	r2, r6
 800fb90:	dd12      	ble.n	800fbb8 <__kernel_rem_pio2+0x80>
 800fb92:	aa18      	add	r2, sp, #96	; 0x60
 800fb94:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800fb98:	460e      	mov	r6, r1
 800fb9a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800fb9e:	f1cb 0a01 	rsb	sl, fp, #1
 800fba2:	eb0a 0006 	add.w	r0, sl, r6
 800fba6:	4581      	cmp	r9, r0
 800fba8:	db25      	blt.n	800fbf6 <__kernel_rem_pio2+0xbe>
 800fbaa:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800fe70 <__kernel_rem_pio2+0x338>
 800fbae:	f8dd e000 	ldr.w	lr, [sp]
 800fbb2:	4615      	mov	r5, r2
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	e015      	b.n	800fbe4 <__kernel_rem_pio2+0xac>
 800fbb8:	42d5      	cmn	r5, r2
 800fbba:	d409      	bmi.n	800fbd0 <__kernel_rem_pio2+0x98>
 800fbbc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800fbc0:	ee07 0a90 	vmov	s15, r0
 800fbc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fbc8:	eca8 7b02 	vstmia	r8!, {d7}
 800fbcc:	3201      	adds	r2, #1
 800fbce:	e7de      	b.n	800fb8e <__kernel_rem_pio2+0x56>
 800fbd0:	eeb0 7b46 	vmov.f64	d7, d6
 800fbd4:	e7f8      	b.n	800fbc8 <__kernel_rem_pio2+0x90>
 800fbd6:	ecbe 5b02 	vldmia	lr!, {d5}
 800fbda:	ed95 6b00 	vldr	d6, [r5]
 800fbde:	3001      	adds	r0, #1
 800fbe0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fbe4:	4288      	cmp	r0, r1
 800fbe6:	f1a5 0508 	sub.w	r5, r5, #8
 800fbea:	ddf4      	ble.n	800fbd6 <__kernel_rem_pio2+0x9e>
 800fbec:	eca8 7b02 	vstmia	r8!, {d7}
 800fbf0:	3208      	adds	r2, #8
 800fbf2:	3601      	adds	r6, #1
 800fbf4:	e7d5      	b.n	800fba2 <__kernel_rem_pio2+0x6a>
 800fbf6:	aa04      	add	r2, sp, #16
 800fbf8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800fe78 <__kernel_rem_pio2+0x340>
 800fbfc:	ed9f aba0 	vldr	d10, [pc, #640]	; 800fe80 <__kernel_rem_pio2+0x348>
 800fc00:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800fc04:	9201      	str	r2, [sp, #4]
 800fc06:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800fc0a:	464e      	mov	r6, r9
 800fc0c:	ab90      	add	r3, sp, #576	; 0x240
 800fc0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc12:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800fc16:	ab04      	add	r3, sp, #16
 800fc18:	4618      	mov	r0, r3
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	2a00      	cmp	r2, #0
 800fc1e:	dc4e      	bgt.n	800fcbe <__kernel_rem_pio2+0x186>
 800fc20:	4620      	mov	r0, r4
 800fc22:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800fc26:	f000 fad3 	bl	80101d0 <scalbn>
 800fc2a:	eeb0 8b40 	vmov.f64	d8, d0
 800fc2e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800fc32:	ee28 0b00 	vmul.f64	d0, d8, d0
 800fc36:	f000 fa57 	bl	80100e8 <floor>
 800fc3a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800fc3e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800fc42:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800fc46:	2c00      	cmp	r4, #0
 800fc48:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800fc4c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800fc50:	ee38 8b40 	vsub.f64	d8, d8, d0
 800fc54:	ee17 8a90 	vmov	r8, s15
 800fc58:	dd46      	ble.n	800fce8 <__kernel_rem_pio2+0x1b0>
 800fc5a:	1e70      	subs	r0, r6, #1
 800fc5c:	aa04      	add	r2, sp, #16
 800fc5e:	f1c4 0c18 	rsb	ip, r4, #24
 800fc62:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800fc66:	fa45 f20c 	asr.w	r2, r5, ip
 800fc6a:	4490      	add	r8, r2
 800fc6c:	fa02 f20c 	lsl.w	r2, r2, ip
 800fc70:	1aad      	subs	r5, r5, r2
 800fc72:	aa04      	add	r2, sp, #16
 800fc74:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800fc78:	f1c4 0217 	rsb	r2, r4, #23
 800fc7c:	4115      	asrs	r5, r2
 800fc7e:	2d00      	cmp	r5, #0
 800fc80:	dd41      	ble.n	800fd06 <__kernel_rem_pio2+0x1ce>
 800fc82:	f04f 0c00 	mov.w	ip, #0
 800fc86:	f108 0801 	add.w	r8, r8, #1
 800fc8a:	4660      	mov	r0, ip
 800fc8c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800fc90:	4566      	cmp	r6, ip
 800fc92:	dc69      	bgt.n	800fd68 <__kernel_rem_pio2+0x230>
 800fc94:	2c00      	cmp	r4, #0
 800fc96:	dd03      	ble.n	800fca0 <__kernel_rem_pio2+0x168>
 800fc98:	2c01      	cmp	r4, #1
 800fc9a:	d076      	beq.n	800fd8a <__kernel_rem_pio2+0x252>
 800fc9c:	2c02      	cmp	r4, #2
 800fc9e:	d07f      	beq.n	800fda0 <__kernel_rem_pio2+0x268>
 800fca0:	2d02      	cmp	r5, #2
 800fca2:	d130      	bne.n	800fd06 <__kernel_rem_pio2+0x1ce>
 800fca4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fca8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800fcac:	b358      	cbz	r0, 800fd06 <__kernel_rem_pio2+0x1ce>
 800fcae:	4620      	mov	r0, r4
 800fcb0:	9102      	str	r1, [sp, #8]
 800fcb2:	f000 fa8d 	bl	80101d0 <scalbn>
 800fcb6:	9902      	ldr	r1, [sp, #8]
 800fcb8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800fcbc:	e023      	b.n	800fd06 <__kernel_rem_pio2+0x1ce>
 800fcbe:	ee20 7b09 	vmul.f64	d7, d0, d9
 800fcc2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fcc6:	3a01      	subs	r2, #1
 800fcc8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800fccc:	ad68      	add	r5, sp, #416	; 0x1a0
 800fcce:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800fcd2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fcd6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800fcda:	eca0 0a01 	vstmia	r0!, {s0}
 800fcde:	ed95 0b00 	vldr	d0, [r5]
 800fce2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fce6:	e799      	b.n	800fc1c <__kernel_rem_pio2+0xe4>
 800fce8:	d105      	bne.n	800fcf6 <__kernel_rem_pio2+0x1be>
 800fcea:	1e72      	subs	r2, r6, #1
 800fcec:	a804      	add	r0, sp, #16
 800fcee:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800fcf2:	15ed      	asrs	r5, r5, #23
 800fcf4:	e7c3      	b.n	800fc7e <__kernel_rem_pio2+0x146>
 800fcf6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fcfa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	da2f      	bge.n	800fd64 <__kernel_rem_pio2+0x22c>
 800fd04:	2500      	movs	r5, #0
 800fd06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0e:	f040 8087 	bne.w	800fe20 <__kernel_rem_pio2+0x2e8>
 800fd12:	1e73      	subs	r3, r6, #1
 800fd14:	4618      	mov	r0, r3
 800fd16:	f04f 0c00 	mov.w	ip, #0
 800fd1a:	4548      	cmp	r0, r9
 800fd1c:	da47      	bge.n	800fdae <__kernel_rem_pio2+0x276>
 800fd1e:	f1bc 0f00 	cmp.w	ip, #0
 800fd22:	d070      	beq.n	800fe06 <__kernel_rem_pio2+0x2ce>
 800fd24:	aa04      	add	r2, sp, #16
 800fd26:	3c18      	subs	r4, #24
 800fd28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd2c:	2a00      	cmp	r2, #0
 800fd2e:	d075      	beq.n	800fe1c <__kernel_rem_pio2+0x2e4>
 800fd30:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fd34:	4620      	mov	r0, r4
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	f000 fa4a 	bl	80101d0 <scalbn>
 800fd3c:	9b00      	ldr	r3, [sp, #0]
 800fd3e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800fe78 <__kernel_rem_pio2+0x340>
 800fd42:	461a      	mov	r2, r3
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	f280 80ac 	bge.w	800fea2 <__kernel_rem_pio2+0x36a>
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	2900      	cmp	r1, #0
 800fd50:	f2c0 80cd 	blt.w	800feee <__kernel_rem_pio2+0x3b6>
 800fd54:	aa68      	add	r2, sp, #416	; 0x1a0
 800fd56:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800fd5a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800fe70 <__kernel_rem_pio2+0x338>
 800fd5e:	4e4b      	ldr	r6, [pc, #300]	; (800fe8c <__kernel_rem_pio2+0x354>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	e0b8      	b.n	800fed6 <__kernel_rem_pio2+0x39e>
 800fd64:	2502      	movs	r5, #2
 800fd66:	e78c      	b.n	800fc82 <__kernel_rem_pio2+0x14a>
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	b948      	cbnz	r0, 800fd80 <__kernel_rem_pio2+0x248>
 800fd6c:	b11a      	cbz	r2, 800fd76 <__kernel_rem_pio2+0x23e>
 800fd6e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	2201      	movs	r2, #1
 800fd76:	f10c 0c01 	add.w	ip, ip, #1
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	e787      	b.n	800fc90 <__kernel_rem_pio2+0x158>
 800fd80:	ebae 0202 	sub.w	r2, lr, r2
 800fd84:	601a      	str	r2, [r3, #0]
 800fd86:	4602      	mov	r2, r0
 800fd88:	e7f5      	b.n	800fd76 <__kernel_rem_pio2+0x23e>
 800fd8a:	1e72      	subs	r2, r6, #1
 800fd8c:	ab04      	add	r3, sp, #16
 800fd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd92:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fd96:	f10d 0c10 	add.w	ip, sp, #16
 800fd9a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800fd9e:	e77f      	b.n	800fca0 <__kernel_rem_pio2+0x168>
 800fda0:	1e72      	subs	r2, r6, #1
 800fda2:	ab04      	add	r3, sp, #16
 800fda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fdac:	e7f3      	b.n	800fd96 <__kernel_rem_pio2+0x25e>
 800fdae:	aa04      	add	r2, sp, #16
 800fdb0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800fdb4:	3801      	subs	r0, #1
 800fdb6:	ea4c 0c02 	orr.w	ip, ip, r2
 800fdba:	e7ae      	b.n	800fd1a <__kernel_rem_pio2+0x1e2>
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fdc2:	2a00      	cmp	r2, #0
 800fdc4:	d0fa      	beq.n	800fdbc <__kernel_rem_pio2+0x284>
 800fdc6:	eb06 020b 	add.w	r2, r6, fp
 800fdca:	ad18      	add	r5, sp, #96	; 0x60
 800fdcc:	1c73      	adds	r3, r6, #1
 800fdce:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800fdd2:	4406      	add	r6, r0
 800fdd4:	429e      	cmp	r6, r3
 800fdd6:	f6ff af19 	blt.w	800fc0c <__kernel_rem_pio2+0xd4>
 800fdda:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800fdde:	9d00      	ldr	r5, [sp, #0]
 800fde0:	ee07 0a90 	vmov	s15, r0
 800fde4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fde8:	2000      	movs	r0, #0
 800fdea:	eca2 7b02 	vstmia	r2!, {d7}
 800fdee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fe70 <__kernel_rem_pio2+0x338>
 800fdf2:	4694      	mov	ip, r2
 800fdf4:	4288      	cmp	r0, r1
 800fdf6:	dd09      	ble.n	800fe0c <__kernel_rem_pio2+0x2d4>
 800fdf8:	a868      	add	r0, sp, #416	; 0x1a0
 800fdfa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800fdfe:	ed80 7b00 	vstr	d7, [r0]
 800fe02:	3301      	adds	r3, #1
 800fe04:	e7e6      	b.n	800fdd4 <__kernel_rem_pio2+0x29c>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	2001      	movs	r0, #1
 800fe0a:	e7d8      	b.n	800fdbe <__kernel_rem_pio2+0x286>
 800fe0c:	ecb5 5b02 	vldmia	r5!, {d5}
 800fe10:	ed3c 6b02 	vldmdb	ip!, {d6}
 800fe14:	3001      	adds	r0, #1
 800fe16:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fe1a:	e7eb      	b.n	800fdf4 <__kernel_rem_pio2+0x2bc>
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	e781      	b.n	800fd24 <__kernel_rem_pio2+0x1ec>
 800fe20:	4260      	negs	r0, r4
 800fe22:	eeb0 0b48 	vmov.f64	d0, d8
 800fe26:	f000 f9d3 	bl	80101d0 <scalbn>
 800fe2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800fe80 <__kernel_rem_pio2+0x348>
 800fe2e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800fe32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe36:	db2b      	blt.n	800fe90 <__kernel_rem_pio2+0x358>
 800fe38:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800fe78 <__kernel_rem_pio2+0x340>
 800fe3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fe40:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fe44:	aa04      	add	r2, sp, #16
 800fe46:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800fe4a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800fe4e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fe52:	a904      	add	r1, sp, #16
 800fe54:	ee10 3a10 	vmov	r3, s0
 800fe58:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fe5c:	ee17 2a10 	vmov	r2, s14
 800fe60:	1c73      	adds	r3, r6, #1
 800fe62:	3418      	adds	r4, #24
 800fe64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fe68:	e762      	b.n	800fd30 <__kernel_rem_pio2+0x1f8>
 800fe6a:	bf00      	nop
 800fe6c:	f3af 8000 	nop.w
	...
 800fe7c:	3e700000 	.word	0x3e700000
 800fe80:	00000000 	.word	0x00000000
 800fe84:	41700000 	.word	0x41700000
 800fe88:	08010900 	.word	0x08010900
 800fe8c:	080108c0 	.word	0x080108c0
 800fe90:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fe94:	aa04      	add	r2, sp, #16
 800fe96:	ee10 3a10 	vmov	r3, s0
 800fe9a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fe9e:	4633      	mov	r3, r6
 800fea0:	e746      	b.n	800fd30 <__kernel_rem_pio2+0x1f8>
 800fea2:	a804      	add	r0, sp, #16
 800fea4:	a968      	add	r1, sp, #416	; 0x1a0
 800fea6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800feaa:	9000      	str	r0, [sp, #0]
 800feac:	ee07 0a90 	vmov	s15, r0
 800feb0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800feb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800feb8:	3a01      	subs	r2, #1
 800feba:	ee27 7b00 	vmul.f64	d7, d7, d0
 800febe:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fec2:	ed81 7b00 	vstr	d7, [r1]
 800fec6:	e73d      	b.n	800fd44 <__kernel_rem_pio2+0x20c>
 800fec8:	ecb6 5b02 	vldmia	r6!, {d5}
 800fecc:	ecb4 6b02 	vldmia	r4!, {d6}
 800fed0:	3201      	adds	r2, #1
 800fed2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fed6:	454a      	cmp	r2, r9
 800fed8:	dc01      	bgt.n	800fede <__kernel_rem_pio2+0x3a6>
 800feda:	4290      	cmp	r0, r2
 800fedc:	daf4      	bge.n	800fec8 <__kernel_rem_pio2+0x390>
 800fede:	aa40      	add	r2, sp, #256	; 0x100
 800fee0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fee4:	ed82 7b00 	vstr	d7, [r2]
 800fee8:	3901      	subs	r1, #1
 800feea:	3001      	adds	r0, #1
 800feec:	e72f      	b.n	800fd4e <__kernel_rem_pio2+0x216>
 800feee:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800fef0:	2a02      	cmp	r2, #2
 800fef2:	dc0a      	bgt.n	800ff0a <__kernel_rem_pio2+0x3d2>
 800fef4:	2a00      	cmp	r2, #0
 800fef6:	dc5a      	bgt.n	800ffae <__kernel_rem_pio2+0x476>
 800fef8:	d039      	beq.n	800ff6e <__kernel_rem_pio2+0x436>
 800fefa:	f008 0007 	and.w	r0, r8, #7
 800fefe:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ff02:	ecbd 8b06 	vpop	{d8-d10}
 800ff06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ff0c:	2a03      	cmp	r2, #3
 800ff0e:	d1f4      	bne.n	800fefa <__kernel_rem_pio2+0x3c2>
 800ff10:	aa40      	add	r2, sp, #256	; 0x100
 800ff12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ff16:	4611      	mov	r1, r2
 800ff18:	4618      	mov	r0, r3
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	f1a1 0108 	sub.w	r1, r1, #8
 800ff20:	dc52      	bgt.n	800ffc8 <__kernel_rem_pio2+0x490>
 800ff22:	4619      	mov	r1, r3
 800ff24:	2901      	cmp	r1, #1
 800ff26:	f1a2 0208 	sub.w	r2, r2, #8
 800ff2a:	dc5d      	bgt.n	800ffe8 <__kernel_rem_pio2+0x4b0>
 800ff2c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010030 <__kernel_rem_pio2+0x4f8>
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	dc69      	bgt.n	8010008 <__kernel_rem_pio2+0x4d0>
 800ff34:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800ff38:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800ff3c:	2d00      	cmp	r5, #0
 800ff3e:	d16c      	bne.n	801001a <__kernel_rem_pio2+0x4e2>
 800ff40:	ed87 5b00 	vstr	d5, [r7]
 800ff44:	ed87 6b02 	vstr	d6, [r7, #8]
 800ff48:	ed87 7b04 	vstr	d7, [r7, #16]
 800ff4c:	e7d5      	b.n	800fefa <__kernel_rem_pio2+0x3c2>
 800ff4e:	aa40      	add	r2, sp, #256	; 0x100
 800ff50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ff54:	ed92 6b00 	vldr	d6, [r2]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	daf5      	bge.n	800ff4e <__kernel_rem_pio2+0x416>
 800ff62:	b10d      	cbz	r5, 800ff68 <__kernel_rem_pio2+0x430>
 800ff64:	eeb1 7b47 	vneg.f64	d7, d7
 800ff68:	ed87 7b00 	vstr	d7, [r7]
 800ff6c:	e7c5      	b.n	800fefa <__kernel_rem_pio2+0x3c2>
 800ff6e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010030 <__kernel_rem_pio2+0x4f8>
 800ff72:	e7f4      	b.n	800ff5e <__kernel_rem_pio2+0x426>
 800ff74:	a940      	add	r1, sp, #256	; 0x100
 800ff76:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ff7a:	ed91 7b00 	vldr	d7, [r1]
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ff84:	2a00      	cmp	r2, #0
 800ff86:	daf5      	bge.n	800ff74 <__kernel_rem_pio2+0x43c>
 800ff88:	b1ad      	cbz	r5, 800ffb6 <__kernel_rem_pio2+0x47e>
 800ff8a:	eeb1 7b46 	vneg.f64	d7, d6
 800ff8e:	ed87 7b00 	vstr	d7, [r7]
 800ff92:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ff96:	a942      	add	r1, sp, #264	; 0x108
 800ff98:	2201      	movs	r2, #1
 800ff9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	da0c      	bge.n	800ffbc <__kernel_rem_pio2+0x484>
 800ffa2:	b10d      	cbz	r5, 800ffa8 <__kernel_rem_pio2+0x470>
 800ffa4:	eeb1 7b47 	vneg.f64	d7, d7
 800ffa8:	ed87 7b02 	vstr	d7, [r7, #8]
 800ffac:	e7a5      	b.n	800fefa <__kernel_rem_pio2+0x3c2>
 800ffae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010030 <__kernel_rem_pio2+0x4f8>
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	e7e6      	b.n	800ff84 <__kernel_rem_pio2+0x44c>
 800ffb6:	eeb0 7b46 	vmov.f64	d7, d6
 800ffba:	e7e8      	b.n	800ff8e <__kernel_rem_pio2+0x456>
 800ffbc:	ecb1 6b02 	vldmia	r1!, {d6}
 800ffc0:	3201      	adds	r2, #1
 800ffc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ffc6:	e7ea      	b.n	800ff9e <__kernel_rem_pio2+0x466>
 800ffc8:	ed91 7b00 	vldr	d7, [r1]
 800ffcc:	ed91 5b02 	vldr	d5, [r1, #8]
 800ffd0:	3801      	subs	r0, #1
 800ffd2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ffd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ffda:	ed81 6b00 	vstr	d6, [r1]
 800ffde:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ffe2:	ed81 7b02 	vstr	d7, [r1, #8]
 800ffe6:	e798      	b.n	800ff1a <__kernel_rem_pio2+0x3e2>
 800ffe8:	ed92 7b00 	vldr	d7, [r2]
 800ffec:	ed92 5b02 	vldr	d5, [r2, #8]
 800fff0:	3901      	subs	r1, #1
 800fff2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fff6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fffa:	ed82 6b00 	vstr	d6, [r2]
 800fffe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010002:	ed82 7b02 	vstr	d7, [r2, #8]
 8010006:	e78d      	b.n	800ff24 <__kernel_rem_pio2+0x3ec>
 8010008:	aa40      	add	r2, sp, #256	; 0x100
 801000a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801000e:	ed92 6b00 	vldr	d6, [r2]
 8010012:	3b01      	subs	r3, #1
 8010014:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010018:	e78a      	b.n	800ff30 <__kernel_rem_pio2+0x3f8>
 801001a:	eeb1 5b45 	vneg.f64	d5, d5
 801001e:	eeb1 6b46 	vneg.f64	d6, d6
 8010022:	ed87 5b00 	vstr	d5, [r7]
 8010026:	eeb1 7b47 	vneg.f64	d7, d7
 801002a:	ed87 6b02 	vstr	d6, [r7, #8]
 801002e:	e78b      	b.n	800ff48 <__kernel_rem_pio2+0x410>
	...

08010038 <__kernel_sin>:
 8010038:	ee10 3a90 	vmov	r3, s1
 801003c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010040:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010044:	da04      	bge.n	8010050 <__kernel_sin+0x18>
 8010046:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801004a:	ee17 3a90 	vmov	r3, s15
 801004e:	b35b      	cbz	r3, 80100a8 <__kernel_sin+0x70>
 8010050:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010054:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010058:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80100b0 <__kernel_sin+0x78>
 801005c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80100b8 <__kernel_sin+0x80>
 8010060:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010064:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80100c0 <__kernel_sin+0x88>
 8010068:	eea4 7b06 	vfma.f64	d7, d4, d6
 801006c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80100c8 <__kernel_sin+0x90>
 8010070:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010074:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80100d0 <__kernel_sin+0x98>
 8010078:	eea4 7b06 	vfma.f64	d7, d4, d6
 801007c:	b930      	cbnz	r0, 801008c <__kernel_sin+0x54>
 801007e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80100d8 <__kernel_sin+0xa0>
 8010082:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010086:	eea4 0b05 	vfma.f64	d0, d4, d5
 801008a:	4770      	bx	lr
 801008c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010090:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010094:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010098:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801009c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80100e0 <__kernel_sin+0xa8>
 80100a0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80100a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	f3af 8000 	nop.w
 80100b0:	5acfd57c 	.word	0x5acfd57c
 80100b4:	3de5d93a 	.word	0x3de5d93a
 80100b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80100bc:	be5ae5e6 	.word	0xbe5ae5e6
 80100c0:	57b1fe7d 	.word	0x57b1fe7d
 80100c4:	3ec71de3 	.word	0x3ec71de3
 80100c8:	19c161d5 	.word	0x19c161d5
 80100cc:	bf2a01a0 	.word	0xbf2a01a0
 80100d0:	1110f8a6 	.word	0x1110f8a6
 80100d4:	3f811111 	.word	0x3f811111
 80100d8:	55555549 	.word	0x55555549
 80100dc:	bfc55555 	.word	0xbfc55555
 80100e0:	55555549 	.word	0x55555549
 80100e4:	3fc55555 	.word	0x3fc55555

080100e8 <floor>:
 80100e8:	ee10 1a90 	vmov	r1, s1
 80100ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80100f4:	2b13      	cmp	r3, #19
 80100f6:	b530      	push	{r4, r5, lr}
 80100f8:	ee10 0a10 	vmov	r0, s0
 80100fc:	ee10 5a10 	vmov	r5, s0
 8010100:	dc31      	bgt.n	8010166 <floor+0x7e>
 8010102:	2b00      	cmp	r3, #0
 8010104:	da15      	bge.n	8010132 <floor+0x4a>
 8010106:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80101c0 <floor+0xd8>
 801010a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801010e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010116:	dd07      	ble.n	8010128 <floor+0x40>
 8010118:	2900      	cmp	r1, #0
 801011a:	da4e      	bge.n	80101ba <floor+0xd2>
 801011c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010120:	4318      	orrs	r0, r3
 8010122:	d001      	beq.n	8010128 <floor+0x40>
 8010124:	4928      	ldr	r1, [pc, #160]	; (80101c8 <floor+0xe0>)
 8010126:	2000      	movs	r0, #0
 8010128:	460b      	mov	r3, r1
 801012a:	4602      	mov	r2, r0
 801012c:	ec43 2b10 	vmov	d0, r2, r3
 8010130:	e020      	b.n	8010174 <floor+0x8c>
 8010132:	4a26      	ldr	r2, [pc, #152]	; (80101cc <floor+0xe4>)
 8010134:	411a      	asrs	r2, r3
 8010136:	ea01 0402 	and.w	r4, r1, r2
 801013a:	4304      	orrs	r4, r0
 801013c:	d01a      	beq.n	8010174 <floor+0x8c>
 801013e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80101c0 <floor+0xd8>
 8010142:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010146:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801014a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014e:	ddeb      	ble.n	8010128 <floor+0x40>
 8010150:	2900      	cmp	r1, #0
 8010152:	bfbe      	ittt	lt
 8010154:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010158:	fa40 f303 	asrlt.w	r3, r0, r3
 801015c:	18c9      	addlt	r1, r1, r3
 801015e:	ea21 0102 	bic.w	r1, r1, r2
 8010162:	2000      	movs	r0, #0
 8010164:	e7e0      	b.n	8010128 <floor+0x40>
 8010166:	2b33      	cmp	r3, #51	; 0x33
 8010168:	dd05      	ble.n	8010176 <floor+0x8e>
 801016a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801016e:	d101      	bne.n	8010174 <floor+0x8c>
 8010170:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010174:	bd30      	pop	{r4, r5, pc}
 8010176:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801017a:	f04f 32ff 	mov.w	r2, #4294967295
 801017e:	40e2      	lsrs	r2, r4
 8010180:	4202      	tst	r2, r0
 8010182:	d0f7      	beq.n	8010174 <floor+0x8c>
 8010184:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80101c0 <floor+0xd8>
 8010188:	ee30 0b07 	vadd.f64	d0, d0, d7
 801018c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010194:	ddc8      	ble.n	8010128 <floor+0x40>
 8010196:	2900      	cmp	r1, #0
 8010198:	da02      	bge.n	80101a0 <floor+0xb8>
 801019a:	2b14      	cmp	r3, #20
 801019c:	d103      	bne.n	80101a6 <floor+0xbe>
 801019e:	3101      	adds	r1, #1
 80101a0:	ea20 0002 	bic.w	r0, r0, r2
 80101a4:	e7c0      	b.n	8010128 <floor+0x40>
 80101a6:	2401      	movs	r4, #1
 80101a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80101ac:	fa04 f303 	lsl.w	r3, r4, r3
 80101b0:	4418      	add	r0, r3
 80101b2:	42a8      	cmp	r0, r5
 80101b4:	bf38      	it	cc
 80101b6:	1909      	addcc	r1, r1, r4
 80101b8:	e7f2      	b.n	80101a0 <floor+0xb8>
 80101ba:	2000      	movs	r0, #0
 80101bc:	4601      	mov	r1, r0
 80101be:	e7b3      	b.n	8010128 <floor+0x40>
 80101c0:	8800759c 	.word	0x8800759c
 80101c4:	7e37e43c 	.word	0x7e37e43c
 80101c8:	bff00000 	.word	0xbff00000
 80101cc:	000fffff 	.word	0x000fffff

080101d0 <scalbn>:
 80101d0:	b082      	sub	sp, #8
 80101d2:	ed8d 0b00 	vstr	d0, [sp]
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80101dc:	b9a2      	cbnz	r2, 8010208 <scalbn+0x38>
 80101de:	9a00      	ldr	r2, [sp, #0]
 80101e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101e4:	4313      	orrs	r3, r2
 80101e6:	d03a      	beq.n	801025e <scalbn+0x8e>
 80101e8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80102c0 <scalbn+0xf0>
 80101ec:	4b40      	ldr	r3, [pc, #256]	; (80102f0 <scalbn+0x120>)
 80101ee:	ee20 7b07 	vmul.f64	d7, d0, d7
 80101f2:	4298      	cmp	r0, r3
 80101f4:	ed8d 7b00 	vstr	d7, [sp]
 80101f8:	da11      	bge.n	801021e <scalbn+0x4e>
 80101fa:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80102c8 <scalbn+0xf8>
 80101fe:	ed9d 6b00 	vldr	d6, [sp]
 8010202:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010206:	e007      	b.n	8010218 <scalbn+0x48>
 8010208:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801020c:	428a      	cmp	r2, r1
 801020e:	d10a      	bne.n	8010226 <scalbn+0x56>
 8010210:	ed9d 7b00 	vldr	d7, [sp]
 8010214:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010218:	ed8d 7b00 	vstr	d7, [sp]
 801021c:	e01f      	b.n	801025e <scalbn+0x8e>
 801021e:	9b01      	ldr	r3, [sp, #4]
 8010220:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010224:	3a36      	subs	r2, #54	; 0x36
 8010226:	4402      	add	r2, r0
 8010228:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801022c:	428a      	cmp	r2, r1
 801022e:	dd0a      	ble.n	8010246 <scalbn+0x76>
 8010230:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80102d0 <scalbn+0x100>
 8010234:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80102d8 <scalbn+0x108>
 8010238:	eeb0 6b47 	vmov.f64	d6, d7
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010244:	e7dd      	b.n	8010202 <scalbn+0x32>
 8010246:	2a00      	cmp	r2, #0
 8010248:	dd0d      	ble.n	8010266 <scalbn+0x96>
 801024a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801024e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010252:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010256:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801025a:	e9cd 0100 	strd	r0, r1, [sp]
 801025e:	ed9d 0b00 	vldr	d0, [sp]
 8010262:	b002      	add	sp, #8
 8010264:	4770      	bx	lr
 8010266:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801026a:	da18      	bge.n	801029e <scalbn+0xce>
 801026c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010270:	4298      	cmp	r0, r3
 8010272:	9b01      	ldr	r3, [sp, #4]
 8010274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010278:	dd09      	ble.n	801028e <scalbn+0xbe>
 801027a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80102d0 <scalbn+0x100>
 801027e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80102d8 <scalbn+0x108>
 8010282:	eeb0 6b47 	vmov.f64	d6, d7
 8010286:	2b00      	cmp	r3, #0
 8010288:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801028c:	e7b9      	b.n	8010202 <scalbn+0x32>
 801028e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80102c8 <scalbn+0xf8>
 8010292:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80102e0 <scalbn+0x110>
 8010296:	eeb0 6b47 	vmov.f64	d6, d7
 801029a:	2b00      	cmp	r3, #0
 801029c:	e7f4      	b.n	8010288 <scalbn+0xb8>
 801029e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80102a6:	3236      	adds	r2, #54	; 0x36
 80102a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80102ac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80102b0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80102e8 <scalbn+0x118>
 80102b4:	ec41 0b17 	vmov	d7, r0, r1
 80102b8:	e7a3      	b.n	8010202 <scalbn+0x32>
 80102ba:	bf00      	nop
 80102bc:	f3af 8000 	nop.w
 80102c0:	00000000 	.word	0x00000000
 80102c4:	43500000 	.word	0x43500000
 80102c8:	c2f8f359 	.word	0xc2f8f359
 80102cc:	01a56e1f 	.word	0x01a56e1f
 80102d0:	8800759c 	.word	0x8800759c
 80102d4:	7e37e43c 	.word	0x7e37e43c
 80102d8:	8800759c 	.word	0x8800759c
 80102dc:	fe37e43c 	.word	0xfe37e43c
 80102e0:	c2f8f359 	.word	0xc2f8f359
 80102e4:	81a56e1f 	.word	0x81a56e1f
 80102e8:	00000000 	.word	0x00000000
 80102ec:	3c900000 	.word	0x3c900000
 80102f0:	ffff3cb0 	.word	0xffff3cb0

080102f4 <_init>:
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	bf00      	nop
 80102f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102fa:	bc08      	pop	{r3}
 80102fc:	469e      	mov	lr, r3
 80102fe:	4770      	bx	lr

08010300 <_fini>:
 8010300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010302:	bf00      	nop
 8010304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010306:	bc08      	pop	{r3}
 8010308:	469e      	mov	lr, r3
 801030a:	4770      	bx	lr

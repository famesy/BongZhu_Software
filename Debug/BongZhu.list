
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f11c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800f3f0  0800f3f0  0001f3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f844  0800f844  0001f844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f84c  0800f84c  0001f84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f850  0800f850  0001f850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800f854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  240001e0  0800fa34  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a58  0800fa34  00020a58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034b27  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e05  00000000  00000000  00054d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001908  00000000  00000000  00059b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001770  00000000  00000000  0005b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038971  00000000  00000000  0005cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002344f  00000000  00000000  00095529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cb4b  00000000  00000000  000b8978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002254c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078f4  00000000  00000000  00225518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f3d4 	.word	0x0800f3d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800f3d4 	.word	0x0800f3d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->k0 = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	741a      	strb	r2, [r3, #16]
	dev->k1 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	745a      	strb	r2, [r3, #17]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	891b      	ldrh	r3, [r3, #8]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f006 f93c 	bl	8006994 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f103 010a 	add.w	r1, r3, #10
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2201      	movs	r2, #1
 800072a:	f00a fed3 	bl	800b4d4 <HAL_UART_Transmit>
			sizeof(dev->address), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f006 f92b 	bl	8006994 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 010c 	add.w	r1, r3, #12
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	2202      	movs	r2, #2
 800074c:	f00a ff58 	bl	800b600 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x400) == 0x400;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	899b      	ldrh	r3, [r3, #12]
 8000754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	741a      	strb	r2, [r3, #16]
	dev->k1 = (dev->uart_buf & 0x800) == 0x800;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	745a      	strb	r2, [r3, #17]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = ((dev->uart_buf >> 14) & 0x0001);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	0b9b      	lsrs	r3, r3, #14
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 15);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	899b      	ldrh	r3, [r3, #12]
 80007ae:	0bdb      	lsrs	r3, r3, #15
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	737b      	strb	r3, [r7, #13]
 80007b8:	e020      	b.n	80007fc <AMT21_check_value+0x74>
		dev->uart_buf = dev->uart_buf >> 2;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	899b      	ldrh	r3, [r3, #12]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4053      	eors	r3, r2
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	899b      	ldrh	r3, [r3, #12]
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f0:	4053      	eors	r3, r2
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f6:	7b7b      	ldrb	r3, [r7, #13]
 80007f8:	3301      	adds	r3, #1
 80007fa:	737b      	strb	r3, [r7, #13]
 80007fc:	7b7b      	ldrb	r3, [r7, #13]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d9db      	bls.n	80007ba <AMT21_check_value+0x32>
	}
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7c1b      	ldrb	r3, [r3, #16]
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	429a      	cmp	r2, r3
 800080a:	d109      	bne.n	8000820 <AMT21_check_value+0x98>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7c5b      	ldrb	r3, [r3, #17]
 8000810:	7bba      	ldrb	r2, [r7, #14]
 8000812:	429a      	cmp	r2, r3
 8000814:	d104      	bne.n	8000820 <AMT21_check_value+0x98>
		dev->position = position_temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	897a      	ldrh	r2, [r7, #10]
 800081a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	e003      	b.n	8000828 <AMT21_check_value+0xa0>
	} else {
		dev->position = 0;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
	}
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2224      	movs	r2, #36	; 0x24
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f00c f8f9 	bl	800ca44 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000854:	4a31      	ldr	r2, [pc, #196]	; (800091c <MX_ADC1_Init+0xe8>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_ADC1_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_ADC1_Init+0xe4>)
 800086c:	2204      	movs	r2, #4
 800086e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_ADC1_Init+0xe4>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_ADC1_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ADC1_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b0:	4819      	ldr	r0, [pc, #100]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008b2:	f002 fd45 	bl	8003340 <HAL_ADC_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 fc22 	bl	8001104 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008cc:	f004 f808 	bl	80048e0 <HAL_ADCEx_MultiModeConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008d6:	f000 fc15 	bl	8001104 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ADC1_Init+0xec>)
 80008dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008de:	2306      	movs	r3, #6
 80008e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ec:	2304      	movs	r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000900:	f003 f97e 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800090a:	f000 fbfb 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2400020c 	.word	0x2400020c
 800091c:	40022000 	.word	0x40022000
 8000920:	2a000400 	.word	0x2a000400

08000924 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2224      	movs	r2, #36	; 0x24
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00c f887 	bl	800ca44 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000938:	4a30      	ldr	r2, [pc, #192]	; (80009fc <MX_ADC3_Init+0xd8>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000950:	2204      	movs	r2, #4
 8000952:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000956:	2200      	movs	r2, #0
 8000958:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800095c:	2201      	movs	r2, #1
 800095e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000962:	2201      	movs	r2, #1
 8000964:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000984:	2200      	movs	r2, #0
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000990:	2200      	movs	r2, #0
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC3_Init+0xd4>)
 8000996:	2200      	movs	r2, #0
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_ADC3_Init+0xd4>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <MX_ADC3_Init+0xd4>)
 80009a4:	f002 fccc 	bl	8003340 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80009ae:	f000 fba9 	bl	8001104 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_ADC3_Init+0xdc>)
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b6:	2306      	movs	r3, #6
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 80009ba:	2302      	movs	r3, #2
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c4:	2304      	movs	r3, #4
 80009c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_ADC3_Init+0xd4>)
 80009e2:	f003 f90d 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80009ec:	f000 fb8a 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400027c 	.word	0x2400027c
 80009fc:	58026000 	.word	0x58026000
 8000a00:	c7520000 	.word	0xc7520000

08000a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <HAL_ADC_MspInit+0xb8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12a      	bne.n	8000a7c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a2c:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3c:	f003 0320 	and.w	r3, r3, #32
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <HAL_ADC_MspInit+0xc0>)
 8000a76:	f005 fde5 	bl	8006644 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a7a:	e01b      	b.n	8000ab4 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <HAL_ADC_MspInit+0xc4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d116      	bne.n	8000ab4 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_ADC_MspInit+0xbc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	207f      	movs	r0, #127	; 0x7f
 8000aaa:	f004 f8d6 	bl	8004c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000aae:	207f      	movs	r0, #127	; 0x7f
 8000ab0:	f004 f8ed 	bl	8004c8e <HAL_NVIC_EnableIRQ>
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58020800 	.word	0x58020800
 8000ac8:	58026000 	.word	0x58026000

08000acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_DMA_Init+0x3c>)
 8000ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <MX_DMA_Init+0x3c>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_DMA_Init+0x3c>)
 8000ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	200b      	movs	r0, #11
 8000af6:	f004 f8b0 	bl	8004c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000afa:	200b      	movs	r0, #11
 8000afc:	f004 f8c7 	bl	8004c8e <HAL_NVIC_EnableIRQ>

}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024400 	.word	0x58024400

08000b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	4b69      	ldr	r3, [pc, #420]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a67      	ldr	r2, [pc, #412]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	4b61      	ldr	r3, [pc, #388]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b50:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	4b5a      	ldr	r3, [pc, #360]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a58      	ldr	r2, [pc, #352]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b4e      	ldr	r3, [pc, #312]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8000bdc:	483b      	ldr	r0, [pc, #236]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000bde:	f005 fed9 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 8000be2:	2200      	movs	r2, #0
 8000be4:	f24c 3120 	movw	r1, #49952	; 0xc320
 8000be8:	4839      	ldr	r0, [pc, #228]	; (8000cd0 <MX_GPIO_Init+0x1c4>)
 8000bea:	f005 fed3 	bl	8006994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 8000bee:	2200      	movs	r2, #0
 8000bf0:	21f7      	movs	r1, #247	; 0xf7
 8000bf2:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <MX_GPIO_Init+0x1c8>)
 8000bf4:	f005 fece 	bl	8006994 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f640 7111 	movw	r1, #3857	; 0xf11
 8000bfe:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x1cc>)
 8000c00:	f005 fec8 	bl	8006994 <HAL_GPIO_WritePin>
                          |SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000c0a:	4834      	ldr	r0, [pc, #208]	; (8000cdc <MX_GPIO_Init+0x1d0>)
 8000c0c:	f005 fec2 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_SS1_Pin|SPI4_SS2_Pin|DIR5_Pin|OE_Pin;
 8000c10:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4828      	ldr	r0, [pc, #160]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000c2a:	f005 fd0b 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_SS3_Pin;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI4_SS3_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <MX_GPIO_Init+0x1c4>)
 8000c44:	f005 fcfe 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = SPI4_SS4_Pin|SPI4_SS5_Pin|DIR1_Pin|GPIO_PIN_8
 8000c48:	f24c 3320 	movw	r3, #49952	; 0xc320
 8000c4c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <MX_GPIO_Init+0x1c4>)
 8000c62:	f005 fcef 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR3_Pin|DIR4_Pin|LED4_Pin
 8000c66:	23f7      	movs	r3, #247	; 0xf7
 8000c68:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <MX_GPIO_Init+0x1c8>)
 8000c7e:	f005 fce1 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c82:	f640 7311 	movw	r3, #3857	; 0xf11
 8000c86:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <MX_GPIO_Init+0x1cc>)
 8000c9c:	f005 fcd2 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000ca0:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_GPIO_Init+0x1d0>)
 8000cba:	f005 fcc3 	bl	8006644 <HAL_GPIO_Init>

}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58021000 	.word	0x58021000
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58020c00 	.word	0x58020c00
 8000cdc:	58020000 	.word	0x58020000

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b0c8      	sub	sp, #288	; 0x120
 8000ce4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f001 ffed 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f93b 	bl	8000f64 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cee:	f000 f9b3 	bl	8001058 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f7ff ff0b 	bl	8000b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf6:	f7ff fee9 	bl	8000acc <MX_DMA_Init>
  MX_ADC1_Init();
 8000cfa:	f7ff fd9b 	bl	8000834 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000cfe:	f7ff fe11 	bl	8000924 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000d02:	f000 fac5 	bl	8001290 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000d06:	f000 fb19 	bl	800133c <MX_SPI4_Init>
  MX_TIM1_Init();
 8000d0a:	f000 fdc1 	bl	8001890 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d0e:	f000 fe19 	bl	8001944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d12:	f000 fe6b 	bl	80019ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d16:	f000 febf 	bl	8001a98 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000d1a:	f000 ff13 	bl	8001b44 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000d1e:	f000 ff75 	bl	8001c0c <MX_TIM13_Init>
  MX_TIM14_Init();
 8000d22:	f000 ffc3 	bl	8001cac <MX_TIM14_Init>
  MX_TIM15_Init();
 8000d26:	f001 f811 	bl	8001d4c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000d2a:	f001 f897 	bl	8001e5c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000d2e:	f001 f911 	bl	8001f54 <MX_TIM17_Init>
  MX_UART4_Init();
 8000d32:	f001 fcf3 	bl	800271c <MX_UART4_Init>
  MX_UART5_Init();
 8000d36:	f001 fd3d 	bl	80027b4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000d3a:	f001 fd87 	bl	800284c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d3e:	f001 fdd1 	bl	80028e4 <MX_USART3_UART_Init>
  MX_TIM24_Init();
 8000d42:	f001 f9d3 	bl	80020ec <MX_TIM24_Init>
  MX_TIM23_Init();
 8000d46:	f001 f981 	bl	800204c <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  /*
   * Initialise Struct
   */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1); //Enable Level-Shifter IC
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4874      	ldr	r0, [pc, #464]	; (8000f24 <main+0x244>)
 8000d52:	f005 fe1f 	bl	8006994 <HAL_GPIO_WritePin>
  Stepper_Motor stepper_2;
  Stepper_Motor stepper_3;
  Stepper_Motor stepper_4;
  Stepper_Motor stepper_5;
  Servo_Motor servo_gripper;
  stepper_initialise(&stepper_1, &htim12, DIR1_GPIO_Port, DIR1_Pin);
 8000d56:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <main+0x248>)
 8000d5e:	4973      	ldr	r1, [pc, #460]	; (8000f2c <main+0x24c>)
 8000d60:	f000 f9d6 	bl	8001110 <stepper_initialise>
  stepper_initialise(&stepper_2, &htim13, DIR2_GPIO_Port, DIR2_Pin);
 8000d64:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4a71      	ldr	r2, [pc, #452]	; (8000f30 <main+0x250>)
 8000d6c:	4971      	ldr	r1, [pc, #452]	; (8000f34 <main+0x254>)
 8000d6e:	f000 f9cf 	bl	8001110 <stepper_initialise>
  stepper_initialise(&stepper_3, &htim14, DIR3_GPIO_Port, DIR3_Pin);
 8000d72:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8000d76:	2302      	movs	r3, #2
 8000d78:	4a6d      	ldr	r2, [pc, #436]	; (8000f30 <main+0x250>)
 8000d7a:	496f      	ldr	r1, [pc, #444]	; (8000f38 <main+0x258>)
 8000d7c:	f000 f9c8 	bl	8001110 <stepper_initialise>
  stepper_initialise(&stepper_4, &htim15, DIR4_GPIO_Port, DIR4_Pin);
 8000d80:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8000d84:	2304      	movs	r3, #4
 8000d86:	4a6a      	ldr	r2, [pc, #424]	; (8000f30 <main+0x250>)
 8000d88:	496c      	ldr	r1, [pc, #432]	; (8000f3c <main+0x25c>)
 8000d8a:	f000 f9c1 	bl	8001110 <stepper_initialise>
  stepper_initialise(&stepper_5, &htim16, DIR5_GPIO_Port, DIR5_Pin);
 8000d8e:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <main+0x244>)
 8000d96:	496a      	ldr	r1, [pc, #424]	; (8000f40 <main+0x260>)
 8000d98:	f000 f9ba 	bl	8001110 <stepper_initialise>
  AMT21 encoder_1;
  AMT21 encoder_2;
  AMT21 encoder_3;
  AMT21 encoder_4;
  AMT21 encoder_5;
  AMT21 encoders[5] = {encoder_1, encoder_2, encoder_3, encoder_4, encoder_5};
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	461d      	mov	r5, r3
 8000da2:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8000da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	602b      	str	r3, [r5, #0]
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	f103 0414 	add.w	r4, r3, #20
 8000db6:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000dca:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000dde:	f107 0580 	add.w	r5, r7, #128	; 0x80
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000df2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	682b      	ldr	r3, [r5, #0]
 8000dfc:	6023      	str	r3, [r4, #0]
  AMT21_initialise(&encoder_1, &huart2, 0xDC , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000dfe:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000e02:	2310      	movs	r3, #16
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <main+0x264>)
 8000e08:	22dc      	movs	r2, #220	; 0xdc
 8000e0a:	494f      	ldr	r1, [pc, #316]	; (8000f48 <main+0x268>)
 8000e0c:	f7ff fc54 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_2, &huart2, 0x70 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000e10:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8000e14:	2310      	movs	r3, #16
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <main+0x264>)
 8000e1a:	2270      	movs	r2, #112	; 0x70
 8000e1c:	494a      	ldr	r1, [pc, #296]	; (8000f48 <main+0x268>)
 8000e1e:	f7ff fc4b 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_3, &huart2, 0x54 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000e22:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000e26:	2310      	movs	r3, #16
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <main+0x264>)
 8000e2c:	2254      	movs	r2, #84	; 0x54
 8000e2e:	4946      	ldr	r1, [pc, #280]	; (8000f48 <main+0x268>)
 8000e30:	f7ff fc42 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_4, &huart2, 0xE8 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000e34:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000e38:	2310      	movs	r3, #16
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <main+0x264>)
 8000e3e:	22e8      	movs	r2, #232	; 0xe8
 8000e40:	4941      	ldr	r1, [pc, #260]	; (8000f48 <main+0x268>)
 8000e42:	f7ff fc39 	bl	80006b8 <AMT21_initialise>
  AMT21_initialise(&encoder_5, &huart2, 0xB4 , USART2_DE_GPIO_Port, USART2_DE_Pin);
 8000e46:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <main+0x264>)
 8000e50:	22b4      	movs	r2, #180	; 0xb4
 8000e52:	493d      	ldr	r1, [pc, #244]	; (8000f48 <main+0x268>)
 8000e54:	f7ff fc30 	bl	80006b8 <AMT21_initialise>
  servo_initialise(&servo_gripper, &htim17);
 8000e58:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e5c:	493b      	ldr	r1, [pc, #236]	; (8000f4c <main+0x26c>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f986 	bl	8001170 <servo_initialise>
  servo_set_degree(&servo_gripper, 90);
 8000e64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e68:	215a      	movs	r1, #90	; 0x5a
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f9d8 	bl	8001220 <servo_set_degree>
  /*
   * HAL Start Timer
   */
  HAL_TIM_Base_Start_IT(&htim24);
 8000e70:	4837      	ldr	r0, [pc, #220]	; (8000f50 <main+0x270>)
 8000e72:	f008 ff51 	bl	8009d18 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	482d      	ldr	r0, [pc, #180]	; (8000f30 <main+0x250>)
 8000e7c:	f005 fd8a 	bl	8006994 <HAL_GPIO_WritePin>
  printf("Test\n");
 8000e80:	4834      	ldr	r0, [pc, #208]	; (8000f54 <main+0x274>)
 8000e82:	f00c fab1 	bl	800d3e8 <puts>
  uint8_t enc_addr[5] = {0xDC, 0x70, 0x54, 0xE8, 0xB4};
 8000e86:	463b      	mov	r3, r7
 8000e88:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <main+0x278>)
 8000e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8e:	6018      	str	r0, [r3, #0]
 8000e90:	3304      	adds	r3, #4
 8000e92:	7019      	strb	r1, [r3, #0]
  uint16_t abs_position = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
//		HAL_Delay(500);
//	  }
//	  /*
//	   * TEST ENCODER
//	   */
	  for (int i = 0; i<5; i++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000ea0:	e03b      	b.n	8000f1a <main+0x23a>
//			  AMT21_check_value(&(encoders[i]));
//		  }
		  /*
		   * TEST CASE
		   */
		  AMT21_read_value(&(encoders[i]));
 8000ea2:	f107 0108 	add.w	r1, r7, #8
 8000ea6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc25 	bl	8000704 <AMT21_read_value>
		  HAL_StatusTypeDef status = AMT21_check_value(&(encoders[i]));
 8000eba:	f107 0108 	add.w	r1, r7, #8
 8000ebe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc5b 	bl	8000788 <AMT21_check_value>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		  if (status == HAL_OK){
 8000ed8:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d111      	bne.n	8000f04 <main+0x224>
			  printf("encoder no.%d = %d\n", i, encoders[i].uart_buf);
 8000ee0:	f107 0108 	add.w	r1, r7, #8
 8000ee4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	330c      	adds	r3, #12
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <main+0x27c>)
 8000efe:	f00c f9ed 	bl	800d2dc <iprintf>
 8000f02:	e002      	b.n	8000f0a <main+0x22a>
		  }
		  else {
			  printf("check sum fail!\n");
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <main+0x280>)
 8000f06:	f00c fa6f 	bl	800d3e8 <puts>
		  }
		  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f001 ff6c 	bl	8002de8 <HAL_Delay>
	  for (int i = 0; i<5; i++){
 8000f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	ddbf      	ble.n	8000ea2 <main+0x1c2>
 8000f22:	e7ba      	b.n	8000e9a <main+0x1ba>
 8000f24:	58021000 	.word	0x58021000
 8000f28:	58020800 	.word	0x58020800
 8000f2c:	240006f4 	.word	0x240006f4
 8000f30:	58020400 	.word	0x58020400
 8000f34:	24000578 	.word	0x24000578
 8000f38:	240006a8 	.word	0x240006a8
 8000f3c:	24000494 	.word	0x24000494
 8000f40:	24000740 	.word	0x24000740
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	240009b4 	.word	0x240009b4
 8000f4c:	240004e0 	.word	0x240004e0
 8000f50:	240003fc 	.word	0x240003fc
 8000f54:	0800f3f0 	.word	0x0800f3f0
 8000f58:	0800f41c 	.word	0x0800f41c
 8000f5c:	0800f3f8 	.word	0x0800f3f8
 8000f60:	0800f40c 	.word	0x0800f40c

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09c      	sub	sp, #112	; 0x70
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	224c      	movs	r2, #76	; 0x4c
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00b fd66 	bl	800ca44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00b fd60 	bl	800ca44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f84:	2002      	movs	r0, #2
 8000f86:	f005 fd1f 	bl	80069c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <SystemClock_Config+0xec>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <SystemClock_Config+0xec>)
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <SystemClock_Config+0xec>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa6:	bf00      	nop
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <SystemClock_Config+0xec>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb4:	d1f8      	bne.n	8000fa8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <SystemClock_Config+0xf0>)
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <SystemClock_Config+0xf0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000fdc:	232c      	movs	r3, #44	; 0x2c
 8000fde:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fec:	230c      	movs	r3, #12
 8000fee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fd1d 	bl	8006a3c <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001008:	f000 f87c 	bl	8001104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	233f      	movs	r3, #63	; 0x3f
 800100e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2303      	movs	r3, #3
 8001012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001018:	2308      	movs	r3, #8
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2103      	movs	r1, #3
 8001032:	4618      	mov	r0, r3
 8001034:	f006 f8ae 	bl	8007194 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800103e:	f000 f861 	bl	8001104 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001042:	f006 fa5d 	bl	8007500 <HAL_RCC_EnableCSS>
}
 8001046:	bf00      	nop
 8001048:	3770      	adds	r7, #112	; 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024800 	.word	0x58024800
 8001054:	58024400 	.word	0x58024400

08001058 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ae      	sub	sp, #184	; 0xb8
 800105c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	22b4      	movs	r2, #180	; 0xb4
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00b fced 	bl	800ca44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800106a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800106e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001084:	23c0      	movs	r3, #192	; 0xc0
 8001086:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800108c:	f640 3386 	movw	r3, #2950	; 0xb86
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f006 fc32 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80010a6:	f000 f82d 	bl	8001104 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	37b8      	adds	r7, #184	; 0xb8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 1);
 80010bc:	1d39      	adds	r1, r7, #4
 80010be:	2301      	movs	r3, #1
 80010c0:	2201      	movs	r2, #1
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <__io_putchar+0x20>)
 80010c4:	f00a fa06 	bl	800b4d4 <HAL_UART_Transmit>

  return ch;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000804 	.word	0x24000804

080010d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (htim == &htim24)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d102      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		control_en = 1;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	}
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	240003fc 	.word	0x240003fc
 8001100:	240001fc 	.word	0x240001fc

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		GPIO_TypeDef *dir_port, uint16_t dir_pin) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	807b      	strh	r3, [r7, #2]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	601a      	str	r2, [r3, #0]
	dev->dir_port = dir_port;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
	dev->dir_pin = dir_pin;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6858      	ldr	r0, [r3, #4]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	891b      	ldrh	r3, [r3, #8]
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	f005 fc2a 	bl	8006994 <HAL_GPIO_WritePin>
	if (timHandle->Instance == TIM15) {
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <stepper_initialise+0x5c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d106      	bne.n	8001158 <stepper_initialise+0x48>
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_2);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2104      	movs	r1, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f008 febf 	bl	8009ed4 <HAL_TIM_PWM_Start>
	} else {
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
	}
}
 8001156:	e005      	b.n	8001164 <stepper_initialise+0x54>
		HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f008 feb8 	bl	8009ed4 <HAL_TIM_PWM_Start>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40014000 	.word	0x40014000

08001170 <servo_initialise>:

void servo_initialise(Servo_Motor *dev, TIM_HandleTypeDef *timHandle) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->timHandle = timHandle;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(dev->timHandle, TIM_CHANNEL_1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f008 fea4 	bl	8009ed4 <HAL_TIM_PWM_Start>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0000      	movs	r0, r0
	...

08001198 <set_pwm>:

void set_pwm(TIM_HandleTypeDef *TIM_pwm, double freq, float duty_cycle) {
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	ed87 0b00 	vstr	d0, [r7]
 80011a4:	ed87 1a02 	vstr	s2, [r7, #8]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	uint16_t ARR_value = 1000000 / freq; //1000000 come from 275MHz/275
 80011a8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001210 <set_pwm+0x78>
 80011ac:	ed97 6b00 	vldr	d6, [r7]
 80011b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	82fb      	strh	r3, [r7, #22]
	uint16_t CCRx_value = ARR_value * duty_cycle;
 80011be:	8afb      	ldrh	r3, [r7, #22]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	82bb      	strh	r3, [r7, #20]
	TIM_pwm->Instance->ARR = ARR_value;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	8afa      	ldrh	r2, [r7, #22]
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (TIM_pwm->Instance == TIM15) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <set_pwm+0x80>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d104      	bne.n	80011f6 <set_pwm+0x5e>
		TIM_pwm->Instance->CCR2 = CCRx_value;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	8aba      	ldrh	r2, [r7, #20]
 80011f2:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		TIM_pwm->Instance->CCR1 = CCRx_value;
	}
}
 80011f4:	e003      	b.n	80011fe <set_pwm+0x66>
		TIM_pwm->Instance->CCR1 = CCRx_value;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	8aba      	ldrh	r2, [r7, #20]
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	412e8480 	.word	0x412e8480
 8001218:	40014000 	.word	0x40014000
 800121c:	00000000 	.word	0x00000000

08001220 <servo_set_degree>:

void servo_set_degree(Servo_Motor *dev, uint8_t degree) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	 servo_set_degree does set your servo to your given value.

	 :param degree is degree of servo motor (0-180)
	 :return: None
	 */
	if (degree > 180) {
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2bb4      	cmp	r3, #180	; 0xb4
 8001230:	d901      	bls.n	8001236 <servo_set_degree+0x16>
		degree = 180;
 8001232:	23b4      	movs	r3, #180	; 0xb4
 8001234:	70fb      	strb	r3, [r7, #3]
	}
	else if (degree < 0){
		degree = 0;
	}
	float cyc = (degree / 180.0) * 0.2;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001240:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001278 <servo_set_degree+0x58>
 8001244:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001248:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001280 <servo_set_degree+0x60>
 800124c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001250:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001254:	edc7 7a03 	vstr	s15, [r7, #12]
	set_pwm(dev->timHandle, 50, cyc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ed97 1a03 	vldr	s2, [r7, #12]
 8001260:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001288 <servo_set_degree+0x68>
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff97 	bl	8001198 <set_pwm>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	00000000 	.word	0x00000000
 800127c:	40668000 	.word	0x40668000
 8001280:	9999999a 	.word	0x9999999a
 8001284:	3fc99999 	.word	0x3fc99999
 8001288:	00000000 	.word	0x00000000
 800128c:	40490000 	.word	0x40490000

08001290 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <MX_SPI3_Init+0xa4>)
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <MX_SPI3_Init+0xa8>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MX_SPI3_Init+0xa4>)
 800129c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012aa:	2203      	movs	r2, #3
 80012ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_SPI3_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_SPI3_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_SPI3_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_SPI3_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_SPI3_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_SPI3_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_SPI3_Init+0xa4>)
 8001320:	f008 fb82 	bl	8009a28 <HAL_SPI_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800132a:	f7ff feeb 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	240002ec 	.word	0x240002ec
 8001338:	40003c00 	.word	0x40003c00

0800133c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001342:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <MX_SPI4_Init+0xa8>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001348:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800134c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001356:	2203      	movs	r2, #3
 8001358:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_SPI4_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001368:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800136c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_SPI4_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI4_Init+0xa4>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_SPI4_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI4_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_SPI4_Init+0xa4>)
 80013cc:	f008 fb2c 	bl	8009a28 <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80013d6:	f7ff fe95 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000374 	.word	0x24000374
 80013e4:	40013400 	.word	0x40013400

080013e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b8      	sub	sp, #224	; 0xe0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	22b4      	movs	r2, #180	; 0xb4
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00b fb1b 	bl	800ca44 <memset>
  if(spiHandle->Instance==SPI3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_SPI_MspInit+0x150>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d143      	bne.n	80014a0 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800141e:	2300      	movs	r3, #0
 8001420:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fa6c 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001432:	f7ff fe67 	bl	8001104 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_SPI_MspInit+0x154>)
 8001438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143c:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_SPI_MspInit+0x154>)
 800143e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001442:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_SPI_MspInit+0x154>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_SPI_MspInit+0x154>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_SPI_MspInit+0x154>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <HAL_SPI_MspInit+0x154>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001472:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001476:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800148c:	2306      	movs	r3, #6
 800148e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001496:	4619      	mov	r1, r3
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <HAL_SPI_MspInit+0x158>)
 800149a:	f005 f8d3 	bl	8006644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800149e:	e047      	b.n	8001530 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_SPI_MspInit+0x15c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d142      	bne.n	8001530 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fa23 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_SPI_MspInit+0xe0>
      Error_Handler();
 80014c4:	f7ff fe1e 	bl	8001104 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ce:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_SPI_MspInit+0x154>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_14;
 8001504:	f244 0324 	movw	r3, #16420	; 0x4024
 8001508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800151e:	2305      	movs	r3, #5
 8001520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001528:	4619      	mov	r1, r3
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <HAL_SPI_MspInit+0x160>)
 800152c:	f005 f88a 	bl	8006644 <HAL_GPIO_Init>
}
 8001530:	bf00      	nop
 8001532:	37e0      	adds	r7, #224	; 0xe0
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40003c00 	.word	0x40003c00
 800153c:	58024400 	.word	0x58024400
 8001540:	58020800 	.word	0x58020800
 8001544:	40013400 	.word	0x40013400
 8001548:	58021000 	.word	0x58021000

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_MspInit+0x30>)
 8001554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x30>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x30>)
 8001564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58024400 	.word	0x58024400

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001584:	f006 f9a2 	bl	80078cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x8>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f001 fbea 	bl	8002da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream0_IRQHandler+0x10>)
 80015de:	f003 fecb 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2400078c 	.word	0x2400078c

080015ec <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <ADC3_IRQHandler+0x10>)
 80015f2:	f002 f8ad 	bl	8003750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400027c 	.word	0x2400027c

08001600 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM24_IRQHandler+0x10>)
 8001606:	f008 fe27 	bl	800a258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	240003fc 	.word	0x240003fc

08001614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	return 1;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_kill>:

int _kill(int pid, int sig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162e:	f00b f9d1 	bl	800c9d4 <__errno>
 8001632:	4603      	mov	r3, r0
 8001634:	2216      	movs	r2, #22
 8001636:	601a      	str	r2, [r3, #0]
	return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe7 	bl	8001624 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001656:	e7fe      	b.n	8001656 <_exit+0x12>

08001658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
	}

return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fd01 	bl	80010b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
	}
	return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f2:	605a      	str	r2, [r3, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f00b f936 	bl	800c9d4 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24050000 	.word	0x24050000
 8001794:	00000400 	.word	0x00000400
 8001798:	24000200 	.word	0x24000200
 800179c:	24000a58 	.word	0x24000a58

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <SystemInit+0xd0>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <SystemInit+0xd0>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <SystemInit+0xd4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d807      	bhi.n	80017d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <SystemInit+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <SystemInit+0xd4>)
 80017ca:	f043 0307 	orr.w	r3, r3, #7
 80017ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <SystemInit+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <SystemInit+0xd8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <SystemInit+0xd8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <SystemInit+0xd8>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4924      	ldr	r1, [pc, #144]	; (8001878 <SystemInit+0xd8>)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <SystemInit+0xdc>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <SystemInit+0xd4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <SystemInit+0xd4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 030f 	bic.w	r3, r3, #15
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <SystemInit+0xd4>)
 8001804:	f043 0307 	orr.w	r3, r3, #7
 8001808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <SystemInit+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <SystemInit+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <SystemInit+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <SystemInit+0xd8>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <SystemInit+0xe0>)
 8001820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <SystemInit+0xd8>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <SystemInit+0xe4>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <SystemInit+0xd8>)
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <SystemInit+0xe8>)
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <SystemInit+0xd8>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <SystemInit+0xd8>)
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <SystemInit+0xe8>)
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <SystemInit+0xd8>)
 800183c:	2200      	movs	r2, #0
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <SystemInit+0xd8>)
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <SystemInit+0xe8>)
 8001844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <SystemInit+0xd8>)
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <SystemInit+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <SystemInit+0xd8>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <SystemInit+0xd8>)
 800185a:	2200      	movs	r2, #0
 800185c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <SystemInit+0xec>)
 8001860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001864:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
 800187c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001880:	02020200 	.word	0x02020200
 8001884:	01ff0000 	.word	0x01ff0000
 8001888:	01010280 	.word	0x01010280
 800188c:	52004000 	.word	0x52004000

08001890 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2224      	movs	r2, #36	; 0x24
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f00b f8d0 	bl	800ca44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_TIM1_Init+0xac>)
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <MX_TIM1_Init+0xb0>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_TIM1_Init+0xac>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_TIM1_Init+0xac>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_TIM1_Init+0xac>)
 80018c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_TIM1_Init+0xac>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_TIM1_Init+0xac>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_TIM1_Init+0xac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4619      	mov	r1, r3
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM1_Init+0xac>)
 8001906:	f008 fc01 	bl	800a10c <HAL_TIM_Encoder_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001910:	f7ff fbf8 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_TIM1_Init+0xac>)
 8001926:	f009 fc2b 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001930:	f7ff fbe8 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	240005c4 	.word	0x240005c4
 8001940:	40010000 	.word	0x40010000

08001944 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2224      	movs	r2, #36	; 0x24
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f00b f876 	bl	800ca44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_TIM2_Init+0xa4>)
 8001964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_TIM2_Init+0xa4>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM2_Init+0xa4>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM2_Init+0xa4>)
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM2_Init+0xa4>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_TIM2_Init+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800198a:	2301      	movs	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019a2:	2301      	movs	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <MX_TIM2_Init+0xa4>)
 80019b6:	f008 fba9 	bl	800a10c <HAL_TIM_Encoder_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019c0:	f7ff fba0 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_TIM2_Init+0xa4>)
 80019d2:	f009 fbd5 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80019dc:	f7ff fb92 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24000610 	.word	0x24000610

080019ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2224      	movs	r2, #36	; 0x24
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00b f822 	bl	800ca44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_TIM3_Init+0xa8>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a5c:	f008 fb56 	bl	800a10c <HAL_TIM_Encoder_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a66:	f7ff fb4d 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_TIM3_Init+0xa4>)
 8001a78:	f009 fb82 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a82:	f7ff fb3f 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3730      	adds	r7, #48	; 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2400052c 	.word	0x2400052c
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00a ffcc 	bl	800ca44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <MX_TIM4_Init+0xa8>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001b08:	f008 fb00 	bl	800a10c <HAL_TIM_Encoder_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b12:	f7ff faf7 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_TIM4_Init+0xa4>)
 8001b24:	f009 fb2c 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b2e:	f7ff fae9 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	; 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24000448 	.word	0x24000448
 8001b40:	40000800 	.word	0x40000800

08001b44 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <MX_TIM12_Init+0xc4>)
 8001b6e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 275-1;
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b72:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001b76:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b84:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b92:	481c      	ldr	r0, [pc, #112]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001b94:	f008 f869 	bl	8009c6a <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001b9e:	f7ff fab1 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4619      	mov	r1, r3
 8001bae:	4815      	ldr	r0, [pc, #84]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001bb0:	f008 fd86 	bl	800a6c0 <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001bba:	f7ff faa3 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001bc0:	f008 f930 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001bca:	f7ff fa9b 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	; 0x60
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8001bd2:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001be8:	f008 fc56 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8001bf2:	f7ff fa87 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM12_Init+0xc0>)
 8001bf8:	f000 fc8e 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001bfc:	bf00      	nop
 8001bfe:	3730      	adds	r7, #48	; 0x30
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	240006f4 	.word	0x240006f4
 8001c08:	40001800 	.word	0x40001800

08001c0c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MX_TIM13_Init+0x9c>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c2c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001c30:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c3e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001c4c:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c4e:	f008 f80c 	bl	8009c6a <HAL_TIM_Base_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8001c58:	f7ff fa54 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c5c:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c5e:	f008 f8e1 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001c68:	f7ff fa4c 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6c:	2360      	movs	r3, #96	; 0x60
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001c70:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c86:	f008 fc07 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001c90:	f7ff fa38 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_TIM13_Init+0x98>)
 8001c96:	f000 fc3f 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001c9a:	bf00      	nop
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24000578 	.word	0x24000578
 8001ca8:	40001c00 	.word	0x40001c00

08001cac <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	615a      	str	r2, [r3, #20]
 8001cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <MX_TIM14_Init+0x9c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001ccc:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001cd0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cde:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001cee:	f007 ffbc 	bl	8009c6a <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8001cf8:	f7ff fa04 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001cfc:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001cfe:	f008 f891 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8001d08:	f7ff f9fc 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	; 0x60
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001d10:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001d26:	f008 fbb7 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8001d30:	f7ff f9e8 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM14_Init+0x98>)
 8001d36:	f000 fbef 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	240006a8 	.word	0x240006a8
 8001d48:	40002000 	.word	0x40002000

08001d4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b098      	sub	sp, #96	; 0x60
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2234      	movs	r2, #52	; 0x34
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00a fe63 	bl	800ca44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001d80:	4a35      	ldr	r2, [pc, #212]	; (8001e58 <MX_TIM15_Init+0x10c>)
 8001d82:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8001d84:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001d86:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001d8a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001dac:	4829      	ldr	r0, [pc, #164]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001dae:	f008 f839 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001db8:	f7ff f9a4 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4822      	ldr	r0, [pc, #136]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001dcc:	f009 f9d8 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001dd6:	f7ff f995 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	2360      	movs	r3, #96	; 0x60
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8001dde:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001e02:	f008 fb49 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8001e0c:	f7ff f97a 	bl	8001104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001e38:	f009 fa3e 	bl	800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001e42:	f7ff f95f 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_TIM15_Init+0x108>)
 8001e48:	f000 fb66 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001e4c:	bf00      	nop
 8001e4e:	3760      	adds	r7, #96	; 0x60
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	24000494 	.word	0x24000494
 8001e58:	40014000 	.word	0x40014000

08001e5c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b094      	sub	sp, #80	; 0x50
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e76:	463b      	mov	r3, r7
 8001e78:	2234      	movs	r2, #52	; 0x34
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00a fde1 	bl	800ca44 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001e84:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <MX_TIM16_Init+0xf4>)
 8001e86:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001e8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001e8e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001e98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e9c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001eb0:	4826      	ldr	r0, [pc, #152]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001eb2:	f007 feda 	bl	8009c6a <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001ebc:	f7ff f922 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ec0:	4822      	ldr	r0, [pc, #136]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001ec2:	f007 ffaf 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001ecc:	f7ff f91a 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed0:	2360      	movs	r3, #96	; 0x60
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001ed4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4815      	ldr	r0, [pc, #84]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001ef8:	f008 face 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8001f02:	f7ff f8ff 	bl	8001104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001f2e:	f009 f9c3 	bl	800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8001f38:	f7ff f8e4 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <MX_TIM16_Init+0xf0>)
 8001f3e:	f000 faeb 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001f42:	bf00      	nop
 8001f44:	3750      	adds	r7, #80	; 0x50
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	24000740 	.word	0x24000740
 8001f50:	40014400 	.word	0x40014400

08001f54 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	; 0x50
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	615a      	str	r2, [r3, #20]
 8001f6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2234      	movs	r2, #52	; 0x34
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a fd65 	bl	800ca44 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <MX_TIM17_Init+0xf4>)
 8001f7e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f82:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001f86:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001fa8:	4826      	ldr	r0, [pc, #152]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001faa:	f007 fe5e 	bl	8009c6a <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001fb4:	f7ff f8a6 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001fb8:	4822      	ldr	r0, [pc, #136]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001fba:	f007 ff33 	bl	8009e24 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001fc4:	f7ff f89e 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc8:	2360      	movs	r3, #96	; 0x60
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001fcc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4815      	ldr	r0, [pc, #84]	; (8002044 <MX_TIM17_Init+0xf0>)
 8001ff0:	f008 fa52 	bl	800a498 <HAL_TIM_PWM_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8001ffa:	f7ff f883 	bl	8001104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <MX_TIM17_Init+0xf0>)
 8002026:	f009 f947 	bl	800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002030:	f7ff f868 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM17_Init+0xf0>)
 8002036:	f000 fa6f 	bl	8002518 <HAL_TIM_MspPostInit>

}
 800203a:	bf00      	nop
 800203c:	3750      	adds	r7, #80	; 0x50
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	240004e0 	.word	0x240004e0
 8002048:	40014800 	.word	0x40014800

0800204c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <MX_TIM23_Init+0x98>)
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <MX_TIM23_Init+0x9c>)
 800206e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_TIM23_Init+0x98>)
 8002072:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002076:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_TIM23_Init+0x98>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_TIM23_Init+0x98>)
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_TIM23_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_TIM23_Init+0x98>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_TIM23_Init+0x98>)
 8002094:	f007 fde9 	bl	8009c6a <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800209e:	f7ff f831 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_TIM23_Init+0x98>)
 80020b0:	f008 fb06 	bl	800a6c0 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80020ba:	f7ff f823 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_TIM23_Init+0x98>)
 80020cc:	f009 f858 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80020d6:	f7ff f815 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2400065c 	.word	0x2400065c
 80020e8:	4000e000 	.word	0x4000e000

080020ec <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_TIM24_Init+0x98>)
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <MX_TIM24_Init+0x9c>)
 800210e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <MX_TIM24_Init+0x98>)
 8002112:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002116:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_TIM24_Init+0x98>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MX_TIM24_Init+0x98>)
 8002120:	f242 720f 	movw	r2, #9999	; 0x270f
 8002124:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <MX_TIM24_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_TIM24_Init+0x98>)
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002132:	4814      	ldr	r0, [pc, #80]	; (8002184 <MX_TIM24_Init+0x98>)
 8002134:	f007 fd99 	bl	8009c6a <HAL_TIM_Base_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 800213e:	f7fe ffe1 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002146:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_TIM24_Init+0x98>)
 8002150:	f008 fab6 	bl	800a6c0 <HAL_TIM_ConfigClockSource>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800215a:	f7fe ffd3 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <MX_TIM24_Init+0x98>)
 800216c:	f009 f808 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002176:	f7fe ffc5 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	240003fc 	.word	0x240003fc
 8002188:	4000e400 	.word	0x4000e400

0800218c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b090      	sub	sp, #64	; 0x40
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12f      	bne.n	800220e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ae:	4b69      	ldr	r3, [pc, #420]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b4:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021be:	4b65      	ldr	r3, [pc, #404]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a60      	ldr	r2, [pc, #384]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021ea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	4854      	ldr	r0, [pc, #336]	; (8002358 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002208:	f004 fa1c 	bl	8006644 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800220c:	e09b      	b.n	8002346 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d12e      	bne.n	8002276 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002218:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800221a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221e:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002228:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800222a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002254:	2303      	movs	r3, #3
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002264:	2301      	movs	r3, #1
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	483b      	ldr	r0, [pc, #236]	; (800235c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002270:	f004 f9e8 	bl	8006644 <HAL_GPIO_Init>
}
 8002274:	e067      	b.n	8002346 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d12e      	bne.n	80022de <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	4a2b      	ldr	r2, [pc, #172]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022cc:	2302      	movs	r3, #2
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d4:	4619      	mov	r1, r3
 80022d6:	4823      	ldr	r0, [pc, #140]	; (8002364 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022d8:	f004 f9b4 	bl	8006644 <HAL_GPIO_Init>
}
 80022dc:	e033      	b.n	8002346 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d12e      	bne.n	8002346 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ee:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80022fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002324:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002336:	2302      	movs	r3, #2
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	480a      	ldr	r0, [pc, #40]	; (800236c <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002342:	f004 f97f 	bl	8006644 <HAL_GPIO_Init>
}
 8002346:	bf00      	nop
 8002348:	3740      	adds	r7, #64	; 0x40
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	58024400 	.word	0x58024400
 8002358:	58021000 	.word	0x58021000
 800235c:	58020000 	.word	0x58020000
 8002360:	40000400 	.word	0x40000400
 8002364:	58020800 	.word	0x58020800
 8002368:	40000800 	.word	0x40000800
 800236c:	58020c00 	.word	0x58020c00

08002370 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_TIM_Base_MspInit+0x144>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10f      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002382:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 800238a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80023a0:	e084      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM13)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a45      	ldr	r2, [pc, #276]	; (80024bc <HAL_TIM_Base_MspInit+0x14c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10f      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b2:	4a41      	ldr	r2, [pc, #260]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023bc:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	6a3b      	ldr	r3, [r7, #32]
}
 80023ca:	e06f      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM14)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_TIM_Base_MspInit+0x150>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10f      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023dc:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	69fb      	ldr	r3, [r7, #28]
}
 80023f4:	e05a      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM16)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_TIM_Base_MspInit+0x154>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002406:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
}
 800241e:	e045      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM17)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_TIM_Base_MspInit+0x158>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10f      	bne.n	800244a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 800242c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002436:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 800243c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
}
 8002448:	e030      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM23)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <HAL_TIM_Base_MspInit+0x15c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002456:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 800245c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002460:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002466:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800246a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
}
 8002472:	e01b      	b.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM24)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_TIM_Base_MspInit+0x160>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d116      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002480:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002484:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_TIM_Base_MspInit+0x148>)
 8002490:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	20a2      	movs	r0, #162	; 0xa2
 80024a2:	f002 fbda 	bl	8004c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80024a6:	20a2      	movs	r0, #162	; 0xa2
 80024a8:	f002 fbf1 	bl	8004c8e <HAL_NVIC_EnableIRQ>
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40001800 	.word	0x40001800
 80024b8:	58024400 	.word	0x58024400
 80024bc:	40001c00 	.word	0x40001c00
 80024c0:	40002000 	.word	0x40002000
 80024c4:	40014400 	.word	0x40014400
 80024c8:	40014800 	.word	0x40014800
 80024cc:	4000e000 	.word	0x4000e000
 80024d0:	4000e400 	.word	0x4000e400

080024d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_TIM_PWM_MspInit+0x3c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_TIM_PWM_MspInit+0x40>)
 80024e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_TIM_PWM_MspInit+0x40>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_TIM_PWM_MspInit+0x40>)
 80024f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40014000 	.word	0x40014000
 8002514:	58024400 	.word	0x58024400

08002518 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	; 0x38
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a70      	ldr	r2, [pc, #448]	; (80026f8 <HAL_TIM_MspPostInit+0x1e0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d120      	bne.n	800257c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800256a:	2302      	movs	r3, #2
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4862      	ldr	r0, [pc, #392]	; (8002700 <HAL_TIM_MspPostInit+0x1e8>)
 8002576:	f004 f865 	bl	8006644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800257a:	e0b9      	b.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM13)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a60      	ldr	r2, [pc, #384]	; (8002704 <HAL_TIM_MspPostInit+0x1ec>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11f      	bne.n	80025c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258c:	4a5b      	ldr	r2, [pc, #364]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002596:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80025b4:	2309      	movs	r3, #9
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	4852      	ldr	r0, [pc, #328]	; (8002708 <HAL_TIM_MspPostInit+0x1f0>)
 80025c0:	f004 f840 	bl	8006644 <HAL_GPIO_Init>
}
 80025c4:	e094      	b.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM14)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_TIM_MspPostInit+0x1f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d11f      	bne.n	8002610 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d6:	4a49      	ldr	r2, [pc, #292]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80025e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80025fe:	2309      	movs	r3, #9
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	483f      	ldr	r0, [pc, #252]	; (8002708 <HAL_TIM_MspPostInit+0x1f0>)
 800260a:	f004 f81b 	bl	8006644 <HAL_GPIO_Init>
}
 800260e:	e06f      	b.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM15)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_TIM_MspPostInit+0x1f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11f      	bne.n	800265a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002620:	4a36      	ldr	r2, [pc, #216]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002638:	2308      	movs	r3, #8
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002648:	2304      	movs	r3, #4
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002650:	4619      	mov	r1, r3
 8002652:	482d      	ldr	r0, [pc, #180]	; (8002708 <HAL_TIM_MspPostInit+0x1f0>)
 8002654:	f003 fff6 	bl	8006644 <HAL_GPIO_Init>
}
 8002658:	e04a      	b.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM16)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_TIM_MspPostInit+0x1fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d120      	bne.n	80026a6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002694:	2301      	movs	r3, #1
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	4818      	ldr	r0, [pc, #96]	; (8002700 <HAL_TIM_MspPostInit+0x1e8>)
 80026a0:	f003 ffd0 	bl	8006644 <HAL_GPIO_Init>
}
 80026a4:	e024      	b.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM17)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_TIM_MspPostInit+0x200>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d11f      	bne.n	80026f0 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_TIM_MspPostInit+0x1e4>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80026e0:	2301      	movs	r3, #1
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_TIM_MspPostInit+0x1e8>)
 80026ec:	f003 ffaa 	bl	8006644 <HAL_GPIO_Init>
}
 80026f0:	bf00      	nop
 80026f2:	3738      	adds	r7, #56	; 0x38
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40001800 	.word	0x40001800
 80026fc:	58024400 	.word	0x58024400
 8002700:	58020400 	.word	0x58020400
 8002704:	40001c00 	.word	0x40001c00
 8002708:	58020000 	.word	0x58020000
 800270c:	40002000 	.word	0x40002000
 8002710:	40014000 	.word	0x40014000
 8002714:	40014400 	.word	0x40014400
 8002718:	40014800 	.word	0x40014800

0800271c <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <MX_UART4_Init+0x90>)
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <MX_UART4_Init+0x94>)
 8002724:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <MX_UART4_Init+0x90>)
 8002728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800272c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <MX_UART4_Init+0x90>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <MX_UART4_Init+0x90>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <MX_UART4_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <MX_UART4_Init+0x90>)
 8002742:	220c      	movs	r2, #12
 8002744:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <MX_UART4_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <MX_UART4_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <MX_UART4_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <MX_UART4_Init+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <MX_UART4_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002764:	4811      	ldr	r0, [pc, #68]	; (80027ac <MX_UART4_Init+0x90>)
 8002766:	f008 fe65 	bl	800b434 <HAL_UART_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002770:	f7fe fcc8 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <MX_UART4_Init+0x90>)
 8002778:	f00a f862 	bl	800c840 <HAL_UARTEx_SetTxFifoThreshold>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002782:	f7fe fcbf 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <MX_UART4_Init+0x90>)
 800278a:	f00a f897 	bl	800c8bc <HAL_UARTEx_SetRxFifoThreshold>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002794:	f7fe fcb6 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <MX_UART4_Init+0x90>)
 800279a:	f00a f818 	bl	800c7ce <HAL_UARTEx_DisableFifoMode>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80027a4:	f7fe fcae 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	24000924 	.word	0x24000924
 80027b0:	40004c00 	.word	0x40004c00

080027b4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <MX_UART5_Init+0x90>)
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <MX_UART5_Init+0x94>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <MX_UART5_Init+0x90>)
 80027c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <MX_UART5_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_UART5_Init+0x90>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <MX_UART5_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_UART5_Init+0x90>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <MX_UART5_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_UART5_Init+0x90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_UART5_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_UART5_Init+0x90>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_UART5_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027fc:	4811      	ldr	r0, [pc, #68]	; (8002844 <MX_UART5_Init+0x90>)
 80027fe:	f008 fe19 	bl	800b434 <HAL_UART_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002808:	f7fe fc7c 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	480d      	ldr	r0, [pc, #52]	; (8002844 <MX_UART5_Init+0x90>)
 8002810:	f00a f816 	bl	800c840 <HAL_UARTEx_SetTxFifoThreshold>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800281a:	f7fe fc73 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281e:	2100      	movs	r1, #0
 8002820:	4808      	ldr	r0, [pc, #32]	; (8002844 <MX_UART5_Init+0x90>)
 8002822:	f00a f84b 	bl	800c8bc <HAL_UARTEx_SetRxFifoThreshold>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800282c:	f7fe fc6a 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_UART5_Init+0x90>)
 8002832:	f009 ffcc 	bl	800c7ce <HAL_UARTEx_DisableFifoMode>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800283c:	f7fe fc62 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	24000894 	.word	0x24000894
 8002848:	40005000 	.word	0x40005000

0800284c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <MX_USART2_UART_Init+0x94>)
 8002854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_USART2_UART_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_USART2_UART_Init+0x90>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_USART2_UART_Init+0x90>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002894:	4811      	ldr	r0, [pc, #68]	; (80028dc <MX_USART2_UART_Init+0x90>)
 8002896:	f008 fdcd 	bl	800b434 <HAL_UART_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028a0:	f7fe fc30 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a4:	2100      	movs	r1, #0
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <MX_USART2_UART_Init+0x90>)
 80028a8:	f009 ffca 	bl	800c840 <HAL_UARTEx_SetTxFifoThreshold>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028b2:	f7fe fc27 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b6:	2100      	movs	r1, #0
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <MX_USART2_UART_Init+0x90>)
 80028ba:	f009 ffff 	bl	800c8bc <HAL_UARTEx_SetRxFifoThreshold>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028c4:	f7fe fc1e 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_USART2_UART_Init+0x90>)
 80028ca:	f009 ff80 	bl	800c7ce <HAL_UARTEx_DisableFifoMode>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028d4:	f7fe fc16 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	240009b4 	.word	0x240009b4
 80028e0:	40004400 	.word	0x40004400

080028e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <MX_USART3_UART_Init+0x94>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292c:	4811      	ldr	r0, [pc, #68]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800292e:	f008 fd81 	bl	800b434 <HAL_UART_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002938:	f7fe fbe4 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293c:	2100      	movs	r1, #0
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002940:	f009 ff7e 	bl	800c840 <HAL_UARTEx_SetTxFifoThreshold>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800294a:	f7fe fbdb 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294e:	2100      	movs	r1, #0
 8002950:	4808      	ldr	r0, [pc, #32]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002952:	f009 ffb3 	bl	800c8bc <HAL_UARTEx_SetRxFifoThreshold>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800295c:	f7fe fbd2 	bl	8001104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002962:	f009 ff34 	bl	800c7ce <HAL_UARTEx_DisableFifoMode>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800296c:	f7fe fbca 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24000804 	.word	0x24000804
 8002978:	40004800 	.word	0x40004800

0800297c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0bc      	sub	sp, #240	; 0xf0
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002998:	22b4      	movs	r2, #180	; 0xb4
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f00a f851 	bl	800ca44 <memset>
  if(uartHandle->Instance==UART4)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4aa8      	ldr	r2, [pc, #672]	; (8002c48 <HAL_UART_MspInit+0x2cc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d143      	bne.n	8002a34 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029ac:	2302      	movs	r3, #2
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ba:	4618      	mov	r0, r3
 80029bc:	f004 ffa2 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029c6:	f7fe fb9d 	bl	8001104 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029ca:	4ba0      	ldr	r3, [pc, #640]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	4a9e      	ldr	r2, [pc, #632]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029da:	4b9c      	ldr	r3, [pc, #624]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b98      	ldr	r3, [pc, #608]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	4a97      	ldr	r2, [pc, #604]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f8:	4b94      	ldr	r3, [pc, #592]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002a20:	2306      	movs	r3, #6
 8002a22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4888      	ldr	r0, [pc, #544]	; (8002c50 <HAL_UART_MspInit+0x2d4>)
 8002a2e:	f003 fe09 	bl	8006644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a32:	e105      	b.n	8002c40 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==UART5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a86      	ldr	r2, [pc, #536]	; (8002c54 <HAL_UART_MspInit+0x2d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d143      	bne.n	8002ac6 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 ff59 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002a58:	f7fe fb54 	bl	8001104 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a5c:	4b7b      	ldr	r3, [pc, #492]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a62:	4a7a      	ldr	r2, [pc, #488]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a6c:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	4a72      	ldr	r2, [pc, #456]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8a:	4b70      	ldr	r3, [pc, #448]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002ab2:	230e      	movs	r3, #14
 8002ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002abc:	4619      	mov	r1, r3
 8002abe:	4866      	ldr	r0, [pc, #408]	; (8002c58 <HAL_UART_MspInit+0x2dc>)
 8002ac0:	f003 fdc0 	bl	8006644 <HAL_GPIO_Init>
}
 8002ac4:	e0bc      	b.n	8002c40 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a64      	ldr	r2, [pc, #400]	; (8002c5c <HAL_UART_MspInit+0x2e0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d16f      	bne.n	8002bb0 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 ff10 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002aea:	f7fe fb0b 	bl	8001104 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aee:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af4:	4a55      	ldr	r2, [pc, #340]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002afe:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b2a:	2360      	movs	r3, #96	; 0x60
 8002b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b42:	2307      	movs	r3, #7
 8002b44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4844      	ldr	r0, [pc, #272]	; (8002c60 <HAL_UART_MspInit+0x2e4>)
 8002b50:	f003 fd78 	bl	8006644 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b56:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_UART_MspInit+0x2ec>)
 8002b58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002b5a:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b5c:	222b      	movs	r2, #43	; 0x2b
 8002b5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b92:	4834      	ldr	r0, [pc, #208]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002b94:	f002 f896 	bl	8004cc4 <HAL_DMA_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002b9e:	f7fe fab1 	bl	8001104 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_UART_MspInit+0x2e8>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bae:	e047      	b.n	8002c40 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_UART_MspInit+0x2f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d142      	bne.n	8002c40 <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fe9b 	bl	8007904 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002bd4:	f7fe fa96 	bl	8001104 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bde:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_UART_MspInit+0x2d0>)
 8002c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <HAL_UART_MspInit+0x2dc>)
 8002c3c:	f003 fd02 	bl	8006644 <HAL_GPIO_Init>
}
 8002c40:	bf00      	nop
 8002c42:	37f0      	adds	r7, #240	; 0xf0
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40004c00 	.word	0x40004c00
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	58020000 	.word	0x58020000
 8002c54:	40005000 	.word	0x40005000
 8002c58:	58020400 	.word	0x58020400
 8002c5c:	40004400 	.word	0x40004400
 8002c60:	58020c00 	.word	0x58020c00
 8002c64:	2400078c 	.word	0x2400078c
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40004800 	.word	0x40004800

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c74:	f7fe fd94 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c7a:	490d      	ldr	r1, [pc, #52]	; (8002cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c80:	e002      	b.n	8002c88 <LoopCopyDataInit>

08002c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c86:	3304      	adds	r3, #4

08002c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c8c:	d3f9      	bcc.n	8002c82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c94:	e001      	b.n	8002c9a <LoopFillZerobss>

08002c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c98:	3204      	adds	r2, #4

08002c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c9c:	d3fb      	bcc.n	8002c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f009 fe9f 	bl	800c9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fe f81d 	bl	8000ce0 <main>
  bx  lr
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002cac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cb0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002cb4:	0800f854 	.word	0x0800f854
  ldr r2, =_sbss
 8002cb8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002cbc:	24000a58 	.word	0x24000a58

08002cc0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cca:	2003      	movs	r0, #3
 8002ccc:	f001 ffba 	bl	8004c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd0:	f004 fc26 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_Init+0x68>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	4913      	ldr	r1, [pc, #76]	; (8002d30 <HAL_Init+0x6c>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_Init+0x68>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_Init+0x6c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_Init+0x70>)
 8002d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_Init+0x74>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f000 f814 	bl	8002d3c <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e002      	b.n	8002d24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1e:	f7fe fc15 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	0800f424 	.word	0x0800f424
 8002d34:	24000004 	.word	0x24000004
 8002d38:	24000000 	.word	0x24000000

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_InitTick+0x60>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e021      	b.n	8002d94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_InitTick+0x64>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_InitTick+0x60>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 ff9f 	bl	8004caa <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00e      	b.n	8002d94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d80a      	bhi.n	8002d92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f001 ff69 	bl	8004c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d88:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_InitTick+0x68>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2400000c 	.word	0x2400000c
 8002da0:	24000000 	.word	0x24000000
 8002da4:	24000008 	.word	0x24000008

08002da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x20>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x24>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_IncTick+0x24>)
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	2400000c 	.word	0x2400000c
 8002dcc:	24000a44 	.word	0x24000a44

08002dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_GetTick+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	24000a44 	.word	0x24000a44

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff ffee 	bl	8002dd0 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d005      	beq.n	8002e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_Delay+0x44>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0e:	bf00      	nop
 8002e10:	f7ff ffde 	bl	8002dd0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f7      	bhi.n	8002e10 <HAL_Delay+0x28>
  {
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2400000c 	.word	0x2400000c

08002e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <LL_ADC_SetOffset+0x60>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10b      	bne.n	8002ed4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ed2:	e00b      	b.n	8002eec <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	58026000 	.word	0x58026000

08002efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3360      	adds	r3, #96	; 0x60
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	601a      	str	r2, [r3, #0]
  }
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	58026000 	.word	0x58026000

08002fa0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10e      	bne.n	8002fd2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	58026000 	.word	0x58026000

08002fe4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <LL_ADC_SetOffsetSign+0x40>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d10e      	bne.n	8003016 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3360      	adds	r3, #96	; 0x60
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	58026000 	.word	0x58026000

08003028 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <LL_ADC_SetOffsetState+0x50>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	431a      	orrs	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800305a:	e007      	b.n	800306c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58026000 	.word	0x58026000

0800307c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3330      	adds	r3, #48	; 0x30
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	4413      	add	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	211f      	movs	r1, #31
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 011f 	and.w	r1, r3, #31
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	431a      	orrs	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3314      	adds	r3, #20
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	0e5b      	lsrs	r3, r3, #25
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	4413      	add	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0d1b      	lsrs	r3, r3, #20
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2107      	movs	r1, #7
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	401a      	ands	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	0d1b      	lsrs	r3, r3, #20
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d115      	bne.n	80031b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0318 	and.w	r3, r3, #24
 80031a2:	4914      	ldr	r1, [pc, #80]	; (80031f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031a4:	40d9      	lsrs	r1, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	400b      	ands	r3, r1
 80031aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80031b6:	e014      	b.n	80031e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 0318 	and.w	r3, r3, #24
 80031ce:	4909      	ldr	r1, [pc, #36]	; (80031f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031d0:	40d9      	lsrs	r1, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	400b      	ands	r3, r1
 80031d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	58026000 	.word	0x58026000
 80031f4:	000fffff 	.word	0x000fffff

080031f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 031f 	and.w	r3, r3, #31
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <LL_ADC_DisableDeepPowerDown+0x20>)
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6093      	str	r3, [r2, #8]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	5fffffc0 	.word	0x5fffffc0

08003254 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003268:	d101      	bne.n	800326e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800328a:	4013      	ands	r3, r2
 800328c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	6fffffc0 	.word	0x6fffffc0

080032a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032b8:	d101      	bne.n	80032be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <LL_ADC_IsEnabled+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_ADC_IsEnabled+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d101      	bne.n	800330a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d101      	bne.n	8003330 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1ee      	b.n	8003738 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fd fb4b 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff67 	bl	8003254 <LL_ADC_IsDeepPowerDownEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff4d 	bl	8003230 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff82 	bl	80032a4 <LL_ADC_IsInternalRegulatorEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d114      	bne.n	80033d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff66 	bl	800327c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033b0:	4b8e      	ldr	r3, [pc, #568]	; (80035ec <HAL_ADC_Init+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	4a8e      	ldr	r2, [pc, #568]	; (80035f0 <HAL_ADC_Init+0x2b0>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	3301      	adds	r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033c2:	e002      	b.n	80033ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff65 	bl	80032a4 <LL_ADC_IsInternalRegulatorEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff76 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 8003406:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8188 	bne.w	8003726 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8184 	bne.w	8003726 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff4a 	bl	80032cc <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d136      	bne.n	80034ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a6c      	ldr	r2, [pc, #432]	; (80035f4 <HAL_ADC_Init+0x2b4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_ADC_Init+0x112>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_ADC_Init+0x2b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10e      	bne.n	8003470 <HAL_ADC_Init+0x130>
 8003452:	4868      	ldr	r0, [pc, #416]	; (80035f4 <HAL_ADC_Init+0x2b4>)
 8003454:	f7ff ff3a 	bl	80032cc <LL_ADC_IsEnabled>
 8003458:	4604      	mov	r4, r0
 800345a:	4867      	ldr	r0, [pc, #412]	; (80035f8 <HAL_ADC_Init+0x2b8>)
 800345c:	f7ff ff36 	bl	80032cc <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e008      	b.n	8003482 <HAL_ADC_Init+0x142>
 8003470:	4862      	ldr	r0, [pc, #392]	; (80035fc <HAL_ADC_Init+0x2bc>)
 8003472:	f7ff ff2b 	bl	80032cc <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5a      	ldr	r2, [pc, #360]	; (80035f4 <HAL_ADC_Init+0x2b4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_ADC_Init+0x15a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_ADC_Init+0x2b8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_ADC_Init+0x15e>
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <HAL_ADC_Init+0x2c0>)
 800349c:	e000      	b.n	80034a0 <HAL_ADC_Init+0x160>
 800349e:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_ADC_Init+0x2c4>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f7ff fcc2 	bl	8002e30 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_ADC_Init+0x2bc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d129      	bne.n	800350a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7e5b      	ldrb	r3, [r3, #25]
 80034ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034c0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80034c6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d013      	beq.n	80034f8 <HAL_ADC_Init+0x1b8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d00d      	beq.n	80034f4 <HAL_ADC_Init+0x1b4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b1c      	cmp	r3, #28
 80034de:	d007      	beq.n	80034f0 <HAL_ADC_Init+0x1b0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b18      	cmp	r3, #24
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_Init+0x1ac>
 80034e8:	2318      	movs	r3, #24
 80034ea:	e006      	b.n	80034fa <HAL_ADC_Init+0x1ba>
 80034ec:	2300      	movs	r3, #0
 80034ee:	e004      	b.n	80034fa <HAL_ADC_Init+0x1ba>
 80034f0:	2310      	movs	r3, #16
 80034f2:	e002      	b.n	80034fa <HAL_ADC_Init+0x1ba>
 80034f4:	2308      	movs	r3, #8
 80034f6:	e000      	b.n	80034fa <HAL_ADC_Init+0x1ba>
 80034f8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80034fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	e00e      	b.n	8003528 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7e5b      	ldrb	r3, [r3, #25]
 800350e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003514:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800351a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003522:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d106      	bne.n	8003540 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	3b01      	subs	r3, #1
 8003538:	045b      	lsls	r3, r3, #17
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_ADC_Init+0x2bc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d115      	bne.n	8003592 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_ADC_Init+0x2c8>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	430b      	orrs	r3, r1
 8003578:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	611a      	str	r2, [r3, #16]
 8003590:	e009      	b.n	80035a6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_ADC_Init+0x2cc>)
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fea1 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff feae 	bl	8003318 <LL_ADC_INJ_IsConversionOngoing>
 80035bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 808e 	bne.w	80036e2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 808a 	bne.w	80036e2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_ADC_Init+0x2bc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11b      	bne.n	8003610 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e018      	b.n	800361e <HAL_ADC_Init+0x2de>
 80035ec:	24000000 	.word	0x24000000
 80035f0:	053e2d63 	.word	0x053e2d63
 80035f4:	40022000 	.word	0x40022000
 80035f8:	40022100 	.word	0x40022100
 80035fc:	58026000 	.word	0x58026000
 8003600:	40022300 	.word	0x40022300
 8003604:	58026300 	.word	0x58026300
 8003608:	fff04007 	.word	0xfff04007
 800360c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7e1b      	ldrb	r3, [r3, #24]
 8003614:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b46      	ldr	r3, [pc, #280]	; (8003740 <HAL_ADC_Init+0x400>)
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	430b      	orrs	r3, r1
 8003630:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003638:	2b01      	cmp	r3, #1
 800363a:	d137      	bne.n	80036ac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a3f      	ldr	r2, [pc, #252]	; (8003744 <HAL_ADC_Init+0x404>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d116      	bne.n	800367a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_ADC_Init+0x408>)
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800366a:	430a      	orrs	r2, r1
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	e020      	b.n	80036bc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b32      	ldr	r3, [pc, #200]	; (800374c <HAL_ADC_Init+0x40c>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003688:	3a01      	subs	r2, #1
 800368a:	0411      	lsls	r1, r2, #16
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800369c:	430a      	orrs	r2, r1
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	e007      	b.n	80036bc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_ADC_Init+0x404>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d002      	beq.n	80036e2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 ffbb 	bl	8004658 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10c      	bne.n	8003704 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f023 010f 	bic.w	r1, r3, #15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
 8003702:	e007      	b.n	8003714 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 020f 	bic.w	r2, r2, #15
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	f023 0303 	bic.w	r3, r3, #3
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	661a      	str	r2, [r3, #96]	; 0x60
 8003724:	e007      	b.n	8003736 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003736:	7ffb      	ldrb	r3, [r7, #31]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3724      	adds	r7, #36	; 0x24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	ffffbffc 	.word	0xffffbffc
 8003744:	58026000 	.word	0x58026000
 8003748:	fc00f81f 	.word	0xfc00f81f
 800374c:	fc00f81e 	.word	0xfc00f81e

08003750 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a87      	ldr	r2, [pc, #540]	; (8003990 <HAL_ADC_IRQHandler+0x240>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_ADC_IRQHandler+0x30>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a86      	ldr	r2, [pc, #536]	; (8003994 <HAL_ADC_IRQHandler+0x244>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_ADC_IRQHandler+0x34>
 8003780:	4b85      	ldr	r3, [pc, #532]	; (8003998 <HAL_ADC_IRQHandler+0x248>)
 8003782:	e000      	b.n	8003786 <HAL_ADC_IRQHandler+0x36>
 8003784:	4b85      	ldr	r3, [pc, #532]	; (800399c <HAL_ADC_IRQHandler+0x24c>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fd36 	bl	80031f8 <LL_ADC_GetMultimode>
 800378c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d017      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x78>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f001 f886 	bl	80048cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2202      	movs	r2, #2
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_ADC_IRQHandler+0x8c>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8083 	beq.w	80038ee <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07d      	beq.n	80038ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fc34 	bl	800307c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d062      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_ADC_IRQHandler+0x244>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d002      	beq.n	800382a <HAL_ADC_IRQHandler+0xda>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	e000      	b.n	800382c <HAL_ADC_IRQHandler+0xdc>
 800382a:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_ADC_IRQHandler+0x240>)
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	4293      	cmp	r3, r2
 8003832:	d008      	beq.n	8003846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d002      	beq.n	8003846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b09      	cmp	r3, #9
 8003844:	d104      	bne.n	8003850 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	e00c      	b.n	800386a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_ADC_IRQHandler+0x244>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d002      	beq.n	8003860 <HAL_ADC_IRQHandler+0x110>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e000      	b.n	8003862 <HAL_ADC_IRQHandler+0x112>
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_ADC_IRQHandler+0x240>)
 8003862:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d135      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d12e      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fd33 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11a      	bne.n	80038c8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 020c 	bic.w	r2, r2, #12
 80038a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d112      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60
 80038c6:	e00b      	b.n	80038e0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f96f 	bl	8003bc4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	220c      	movs	r2, #12
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_IRQHandler+0x1b2>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a0 	beq.w	8003a4e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 809a 	beq.w	8003a4e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fbdf 	bl	80030fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800393c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fb9a 	bl	800307c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003948:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_ADC_IRQHandler+0x244>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d002      	beq.n	800395a <HAL_ADC_IRQHandler+0x20a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	e000      	b.n	800395c <HAL_ADC_IRQHandler+0x20c>
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_ADC_IRQHandler+0x240>)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	4293      	cmp	r3, r2
 8003962:	d008      	beq.n	8003976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d002      	beq.n	8003976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b07      	cmp	r3, #7
 8003974:	d104      	bne.n	8003980 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	e014      	b.n	80039aa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a03      	ldr	r2, [pc, #12]	; (8003994 <HAL_ADC_IRQHandler+0x244>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00a      	beq.n	80039a0 <HAL_ADC_IRQHandler+0x250>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	e008      	b.n	80039a2 <HAL_ADC_IRQHandler+0x252>
 8003990:	40022000 	.word	0x40022000
 8003994:	40022100 	.word	0x40022100
 8003998:	40022300 	.word	0x40022300
 800399c:	58026300 	.word	0x58026300
 80039a0:	4b84      	ldr	r3, [pc, #528]	; (8003bb4 <HAL_ADC_IRQHandler+0x464>)
 80039a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d047      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_ADC_IRQHandler+0x27a>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d03f      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d13a      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d133      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d12e      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fc96 	bl	8003318 <LL_ADC_INJ_IsConversionOngoing>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11a      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a00:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d112      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60
 8003a26:	e00b      	b.n	8003a40 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 ff1b 	bl	800487c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2260      	movs	r2, #96	; 0x60
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <HAL_ADC_IRQHandler+0x32c>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8b2 	bl	8003bd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_ADC_IRQHandler+0x35c>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 ff01 	bl	80048a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d012      	beq.n	8003adc <HAL_ADC_IRQHandler+0x38c>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fef3 	bl	80048b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d043      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x41e>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d03e      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003af8:	2301      	movs	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e021      	b.n	8003b42 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <HAL_ADC_IRQHandler+0x464>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_IRQHandler+0x3c8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <HAL_ADC_IRQHandler+0x468>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_IRQHandler+0x3cc>
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_ADC_IRQHandler+0x46c>)
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_IRQHandler+0x3ce>
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_ADC_IRQHandler+0x470>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fb78 	bl	8003214 <LL_ADC_GetMultiDMATransfer>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e008      	b.n	8003b42 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10e      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	f043 0202 	orr.w	r2, r3, #2
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f843 	bl	8003bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d018      	beq.n	8003baa <HAL_ADC_IRQHandler+0x45a>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d013      	beq.n	8003baa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b92:	f043 0208 	orr.w	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fe73 	bl	8004890 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003baa:	bf00      	nop
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40022100 	.word	0x40022100
 8003bbc:	40022300 	.word	0x40022300
 8003bc0:	58026300 	.word	0x58026300

08003bc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b0b9      	sub	sp, #228	; 0xe4
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c1a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4ab3      	ldr	r2, [pc, #716]	; (8003ef0 <HAL_ADC_ConfigChannel+0x2f0>)
 8003c22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x34>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f000 bcfa 	b.w	8004628 <HAL_ADC_ConfigChannel+0xa28>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb56 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 84de 	bne.w	800460a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4aa8      	ldr	r2, [pc, #672]	; (8003ef4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d033      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x76>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2201      	movs	r2, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	e01d      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0xb2>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e004      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2201      	movs	r2, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	69d1      	ldr	r1, [r2, #28]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f7ff f9e8 	bl	80030a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fb0b 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 8003cdc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fb17 	bl	8003318 <LL_ADC_INJ_IsConversionOngoing>
 8003cea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 8270 	bne.w	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 826b 	bne.w	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7ff fa06 	bl	8003120 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a76      	ldr	r2, [pc, #472]	; (8003ef4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10d      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d38:	e032      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <HAL_ADC_ConfigChannel+0x2f8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d46:	d10b      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x160>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	e01d      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x19c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x186>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	e00a      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x19c>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d048      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6919      	ldr	r1, [r3, #16]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003db8:	f7ff f86e 	bl	8002e98 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4c      	ldr	r2, [pc, #304]	; (8003ef4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d119      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7ff f906 	bl	8002fe4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6919      	ldr	r1, [r3, #16]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x1f0>
 8003dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dee:	e000      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x1f2>
 8003df0:	2300      	movs	r3, #0
 8003df2:	461a      	mov	r2, r3
 8003df4:	f7ff f8d4 	bl	8002fa0 <LL_ADC_SetOffsetSaturation>
 8003df8:	e1ee      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d102      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x212>
 8003e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e10:	e000      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x214>
 8003e12:	2300      	movs	r3, #0
 8003e14:	461a      	mov	r2, r3
 8003e16:	f7ff f8a1 	bl	8002f5c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6919      	ldr	r1, [r3, #16]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x230>
 8003e2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e2e:	e000      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x232>
 8003e30:	2300      	movs	r3, #0
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7ff f878 	bl	8002f28 <LL_ADC_SetDataRightShift>
 8003e38:	e1ce      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ef4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f040 8181 	bne.w	8004148 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff f855 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x272>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff f84a 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	e01e      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x2b0>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f83f 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e004      	b.n	8003eae <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003ea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x2c8>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	e01e      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x306>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e00a      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x306>
 8003ef0:	47ff0000 	.word	0x47ff0000
 8003ef4:	58026000 	.word	0x58026000
 8003ef8:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003efc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f888 	bl	8003028 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe ffec 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x344>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe ffe1 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	e01e      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x382>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe ffd6 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e004      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x39a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	e018      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x3cc>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	e004      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d106      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f825 	bl	8003028 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe ff89 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_ADC_ConfigChannel+0x40a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff7e 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	e01e      	b.n	8004048 <HAL_ADC_ConfigChannel+0x448>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe ff73 	bl	8002efc <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004038:	2320      	movs	r3, #32
 800403a:	e004      	b.n	8004046 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x460>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	e014      	b.n	800408a <HAL_ADC_ConfigChannel+0x48a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e004      	b.n	800408a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	429a      	cmp	r2, r3
 800408c:	d106      	bne.n	800409c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ffc6 	bl	8003028 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2103      	movs	r1, #3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe ff2a 	bl	8002efc <LL_ADC_GetOffsetChannel>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x4c8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2103      	movs	r1, #3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe ff1f 	bl	8002efc <LL_ADC_GetOffsetChannel>
 80040be:	4603      	mov	r3, r0
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	f003 021f 	and.w	r2, r3, #31
 80040c6:	e017      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x4f8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2103      	movs	r1, #3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe ff14 	bl	8002efc <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80040ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x510>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	e011      	b.n	8004134 <HAL_ADC_ConfigChannel+0x534>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800411e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004120:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e003      	b.n	8004134 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	429a      	cmp	r2, r3
 8004136:	d14f      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	2103      	movs	r1, #3
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe ff71 	bl	8003028 <LL_ADC_SetOffsetState>
 8004146:	e047      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800416a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800418e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	069b      	lsls	r3, r3, #26
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041b2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	069b      	lsls	r3, r3, #26
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d107      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff f875 	bl	80032cc <LL_ADC_IsEnabled>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 8219 	bne.w	800461c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fe ffbe 	bl	8003178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4aa1      	ldr	r2, [pc, #644]	; (8004488 <HAL_ADC_ConfigChannel+0x888>)
 8004202:	4293      	cmp	r3, r2
 8004204:	f040 812e 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x630>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	3301      	adds	r3, #1
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2b09      	cmp	r3, #9
 8004226:	bf94      	ite	ls
 8004228:	2301      	movls	r3, #1
 800422a:	2300      	movhi	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e019      	b.n	8004264 <HAL_ADC_ConfigChannel+0x664>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800423e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004240:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e003      	b.n	8004254 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800424c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3301      	adds	r3, #1
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2b09      	cmp	r3, #9
 800425c:	bf94      	ite	ls
 800425e:	2301      	movls	r3, #1
 8004260:	2300      	movhi	r3, #0
 8004262:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004264:	2b00      	cmp	r3, #0
 8004266:	d079      	beq.n	800435c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x684>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	069b      	lsls	r3, r3, #26
 800427e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004282:	e015      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x6b0>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004294:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800429c:	2320      	movs	r3, #32
 800429e:	e003      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80042a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	069b      	lsls	r3, r3, #26
 80042ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x6d0>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	3301      	adds	r3, #1
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	e017      	b.n	8004300 <HAL_ADC_ConfigChannel+0x700>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80042e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80042ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	ea42 0103 	orr.w	r1, r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x726>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	3301      	adds	r3, #1
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	051b      	lsls	r3, r3, #20
 8004324:	e018      	b.n	8004358 <HAL_ADC_ConfigChannel+0x758>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800433e:	2320      	movs	r3, #32
 8004340:	e003      	b.n	800434a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004358:	430b      	orrs	r3, r1
 800435a:	e07e      	b.n	800445a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x778>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	069b      	lsls	r3, r3, #26
 8004372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004376:	e015      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x7a4>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e003      	b.n	800439c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	069b      	lsls	r3, r3, #26
 80043a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x7c4>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	3301      	adds	r3, #1
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	e017      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x7f4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	61bb      	str	r3, [r7, #24]
  return result;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e003      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x820>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	3301      	adds	r3, #1
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	3b1e      	subs	r3, #30
 8004418:	051b      	lsls	r3, r3, #20
 800441a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800441e:	e01b      	b.n	8004458 <HAL_ADC_ConfigChannel+0x858>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	60fb      	str	r3, [r7, #12]
  return result;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004438:	2320      	movs	r3, #32
 800443a:	e003      	b.n	8004444 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 021f 	and.w	r2, r3, #31
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	3b1e      	subs	r3, #30
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004458:	430b      	orrs	r3, r1
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	4619      	mov	r1, r3
 8004460:	f7fe fe5e 	bl	8003120 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f280 80d7 	bge.w	800461c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a06      	ldr	r2, [pc, #24]	; (800448c <HAL_ADC_ConfigChannel+0x88c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_ADC_ConfigChannel+0x882>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_ADC_ConfigChannel+0x890>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10a      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x898>
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <HAL_ADC_ConfigChannel+0x894>)
 8004484:	e009      	b.n	800449a <HAL_ADC_ConfigChannel+0x89a>
 8004486:	bf00      	nop
 8004488:	47ff0000 	.word	0x47ff0000
 800448c:	40022000 	.word	0x40022000
 8004490:	40022100 	.word	0x40022100
 8004494:	40022300 	.word	0x40022300
 8004498:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_ADC_ConfigChannel+0xa30>)
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fcee 	bl	8002e7c <LL_ADC_GetCommonPathInternalCh>
 80044a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a62      	ldr	r2, [pc, #392]	; (8004634 <HAL_ADC_ConfigChannel+0xa34>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_ADC_ConfigChannel+0x8b8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a61      	ldr	r2, [pc, #388]	; (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10e      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x8d6>
 80044b8:	485e      	ldr	r0, [pc, #376]	; (8004634 <HAL_ADC_ConfigChannel+0xa34>)
 80044ba:	f7fe ff07 	bl	80032cc <LL_ADC_IsEnabled>
 80044be:	4604      	mov	r4, r0
 80044c0:	485d      	ldr	r0, [pc, #372]	; (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80044c2:	f7fe ff03 	bl	80032cc <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4323      	orrs	r3, r4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e008      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x8e8>
 80044d6:	4859      	ldr	r0, [pc, #356]	; (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 80044d8:	f7fe fef8 	bl	80032cc <LL_ADC_IsEnabled>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8084 	beq.w	80045f6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a53      	ldr	r2, [pc, #332]	; (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d132      	bne.n	800455e <HAL_ADC_ConfigChannel+0x95e>
 80044f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d12c      	bne.n	800455e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a4c      	ldr	r2, [pc, #304]	; (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	f040 8086 	bne.w	800461c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a47      	ldr	r2, [pc, #284]	; (8004634 <HAL_ADC_ConfigChannel+0xa34>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x924>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a46      	ldr	r2, [pc, #280]	; (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x928>
 8004524:	4a47      	ldr	r2, [pc, #284]	; (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 8004526:	e000      	b.n	800452a <HAL_ADC_ConfigChannel+0x92a>
 8004528:	4a41      	ldr	r2, [pc, #260]	; (8004630 <HAL_ADC_ConfigChannel+0xa30>)
 800452a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800452e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7fe fc8e 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800453a:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_ADC_ConfigChannel+0xa48>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_ADC_ConfigChannel+0xa4c>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	3301      	adds	r3, #1
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800454e:	e002      	b.n	8004556 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3b01      	subs	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f9      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800455c:	e05e      	b.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <HAL_ADC_ConfigChannel+0xa50>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d120      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x9aa>
 8004568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11a      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a30      	ldr	r2, [pc, #192]	; (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d14e      	bne.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <HAL_ADC_ConfigChannel+0xa34>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_ADC_ConfigChannel+0x992>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x996>
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 8004594:	e000      	b.n	8004598 <HAL_ADC_ConfigChannel+0x998>
 8004596:	4a26      	ldr	r2, [pc, #152]	; (8004630 <HAL_ADC_ConfigChannel+0xa30>)
 8004598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800459c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fe fc57 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a8:	e038      	b.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <HAL_ADC_ConfigChannel+0xa54>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d133      	bne.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
 80045b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d12d      	bne.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d128      	bne.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_ADC_ConfigChannel+0xa34>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_ADC_ConfigChannel+0x9de>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a17      	ldr	r2, [pc, #92]	; (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x9e2>
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x9e4>
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <HAL_ADC_ConfigChannel+0xa30>)
 80045e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fe fc31 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
 80045f4:	e012      	b.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004608:	e008      	b.n	800461c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004624:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004628:	4618      	mov	r0, r3
 800462a:	37e4      	adds	r7, #228	; 0xe4
 800462c:	46bd      	mov	sp, r7
 800462e:	bd90      	pop	{r4, r7, pc}
 8004630:	58026300 	.word	0x58026300
 8004634:	40022000 	.word	0x40022000
 8004638:	40022100 	.word	0x40022100
 800463c:	58026000 	.word	0x58026000
 8004640:	c7520000 	.word	0xc7520000
 8004644:	40022300 	.word	0x40022300
 8004648:	24000000 	.word	0x24000000
 800464c:	053e2d63 	.word	0x053e2d63
 8004650:	c3210000 	.word	0xc3210000
 8004654:	cb840000 	.word	0xcb840000

08004658 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6b      	ldr	r2, [pc, #428]	; (8004814 <ADC_ConfigureBoostMode+0x1bc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <ADC_ConfigureBoostMode+0x1c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <ADC_ConfigureBoostMode+0x1c0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <ADC_ConfigureBoostMode+0x30>
 8004674:	4b69      	ldr	r3, [pc, #420]	; (800481c <ADC_ConfigureBoostMode+0x1c4>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e008      	b.n	800469a <ADC_ConfigureBoostMode+0x42>
 8004688:	4b65      	ldr	r3, [pc, #404]	; (8004820 <ADC_ConfigureBoostMode+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01c      	beq.n	80046d8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800469e:	f003 f8b9 	bl	8007814 <HAL_RCC_GetHCLKFreq>
 80046a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046ac:	d010      	beq.n	80046d0 <ADC_ConfigureBoostMode+0x78>
 80046ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b2:	d871      	bhi.n	8004798 <ADC_ConfigureBoostMode+0x140>
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d002      	beq.n	80046c0 <ADC_ConfigureBoostMode+0x68>
 80046ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046be:	d16b      	bne.n	8004798 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	60fb      	str	r3, [r7, #12]
        break;
 80046ce:	e066      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	60fb      	str	r3, [r7, #12]
        break;
 80046d6:	e062      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80046dc:	f004 f80c 	bl	80086f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80046e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80046ea:	d051      	beq.n	8004790 <ADC_ConfigureBoostMode+0x138>
 80046ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80046f0:	d854      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 80046f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80046f6:	d047      	beq.n	8004788 <ADC_ConfigureBoostMode+0x130>
 80046f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80046fc:	d84e      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 80046fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004702:	d03d      	beq.n	8004780 <ADC_ConfigureBoostMode+0x128>
 8004704:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004708:	d848      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 800470a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800470e:	d033      	beq.n	8004778 <ADC_ConfigureBoostMode+0x120>
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004714:	d842      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 8004716:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800471a:	d029      	beq.n	8004770 <ADC_ConfigureBoostMode+0x118>
 800471c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004720:	d83c      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 8004722:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004726:	d01a      	beq.n	800475e <ADC_ConfigureBoostMode+0x106>
 8004728:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800472c:	d836      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 800472e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004732:	d014      	beq.n	800475e <ADC_ConfigureBoostMode+0x106>
 8004734:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004738:	d830      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d00e      	beq.n	800475e <ADC_ConfigureBoostMode+0x106>
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004744:	d82a      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 8004746:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800474a:	d008      	beq.n	800475e <ADC_ConfigureBoostMode+0x106>
 800474c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004750:	d824      	bhi.n	800479c <ADC_ConfigureBoostMode+0x144>
 8004752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004756:	d002      	beq.n	800475e <ADC_ConfigureBoostMode+0x106>
 8004758:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800475c:	d11e      	bne.n	800479c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	60fb      	str	r3, [r7, #12]
        break;
 800476e:	e016      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	60fb      	str	r3, [r7, #12]
        break;
 8004776:	e012      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	60fb      	str	r3, [r7, #12]
        break;
 800477e:	e00e      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	60fb      	str	r3, [r7, #12]
        break;
 8004786:	e00a      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	09db      	lsrs	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]
        break;
 800478e:	e006      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	60fb      	str	r3, [r7, #12]
        break;
 8004796:	e002      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
        break;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800479c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <ADC_ConfigureBoostMode+0x1cc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d808      	bhi.n	80047be <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047bc:	e025      	b.n	800480a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <ADC_ConfigureBoostMode+0x1d0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d80a      	bhi.n	80047dc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d8:	609a      	str	r2, [r3, #8]
}
 80047da:	e016      	b.n	800480a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <ADC_ConfigureBoostMode+0x1d4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d80a      	bhi.n	80047fa <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	e007      	b.n	800480a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004808:	609a      	str	r2, [r3, #8]
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40022000 	.word	0x40022000
 8004818:	40022100 	.word	0x40022100
 800481c:	40022300 	.word	0x40022300
 8004820:	58026300 	.word	0x58026300
 8004824:	005f5e10 	.word	0x005f5e10
 8004828:	00bebc20 	.word	0x00bebc20
 800482c:	017d7840 	.word	0x017d7840

08004830 <LL_ADC_IsEnabled>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <LL_ADC_IsEnabled+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_ADC_IsEnabled+0x1a>
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_ADC_REG_IsConversionOngoing>:
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d101      	bne.n	800486e <LL_ADC_REG_IsConversionOngoing+0x18>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b0a3      	sub	sp, #140	; 0x8c
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0c1      	b.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800490a:	2300      	movs	r3, #0
 800490c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5e      	ldr	r2, [pc, #376]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d102      	bne.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004918:	4b5d      	ldr	r3, [pc, #372]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e001      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0a0      	b.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff87 	bl	8004856 <LL_ADC_REG_IsConversionOngoing>
 8004948:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff80 	bl	8004856 <LL_ADC_REG_IsConversionOngoing>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 8081 	bne.w	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800495e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d17c      	bne.n	8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a48      	ldr	r2, [pc, #288]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a46      	ldr	r2, [pc, #280]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800497a:	4b46      	ldr	r3, [pc, #280]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800497c:	e000      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800497e:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004980:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d039      	beq.n	80049fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800498a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3a      	ldr	r2, [pc, #232]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10e      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80049b0:	4836      	ldr	r0, [pc, #216]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049b2:	f7ff ff3d 	bl	8004830 <LL_ADC_IsEnabled>
 80049b6:	4604      	mov	r4, r0
 80049b8:	4835      	ldr	r0, [pc, #212]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ba:	f7ff ff39 	bl	8004830 <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	4323      	orrs	r3, r4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e008      	b.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80049ce:	4833      	ldr	r0, [pc, #204]	; (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049d0:	f7ff ff2e 	bl	8004830 <LL_ADC_IsEnabled>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d047      	beq.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	4b2d      	ldr	r3, [pc, #180]	; (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	6811      	ldr	r1, [r2, #0]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	6892      	ldr	r2, [r2, #8]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049fc:	e03a      	b.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10e      	bne.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004a1e:	481b      	ldr	r0, [pc, #108]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a20:	f7ff ff06 	bl	8004830 <LL_ADC_IsEnabled>
 8004a24:	4604      	mov	r4, r0
 8004a26:	481a      	ldr	r0, [pc, #104]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a28:	f7ff ff02 	bl	8004830 <LL_ADC_IsEnabled>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e008      	b.n	8004a4e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004a3c:	4817      	ldr	r0, [pc, #92]	; (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a3e:	f7ff fef7 	bl	8004830 <LL_ADC_IsEnabled>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5e:	e009      	b.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004a72:	e000      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	378c      	adds	r7, #140	; 0x8c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000
 8004a90:	40022100 	.word	0x40022100
 8004a94:	40022300 	.word	0x40022300
 8004a98:	58026300 	.word	0x58026300
 8004a9c:	58026000 	.word	0x58026000
 8004aa0:	fffff0e0 	.word	0xfffff0e0

08004aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad2:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	60d3      	str	r3, [r2, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00
 8004ae8:	05fa0000 	.word	0x05fa0000

08004aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <__NVIC_GetPriorityGrouping+0x18>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 0307 	and.w	r3, r3, #7
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db0b      	blt.n	8004b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4907      	ldr	r1, [pc, #28]	; (8004b40 <__NVIC_EnableIRQ+0x38>)
 8004b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2001      	movs	r0, #1
 8004b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	db0a      	blt.n	8004b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	490c      	ldr	r1, [pc, #48]	; (8004b90 <__NVIC_SetPriority+0x4c>)
 8004b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b62:	0112      	lsls	r2, r2, #4
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	440b      	add	r3, r1
 8004b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b6c:	e00a      	b.n	8004b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4908      	ldr	r1, [pc, #32]	; (8004b94 <__NVIC_SetPriority+0x50>)
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	3b04      	subs	r3, #4
 8004b7c:	0112      	lsls	r2, r2, #4
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	440b      	add	r3, r1
 8004b82:	761a      	strb	r2, [r3, #24]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000e100 	.word	0xe000e100
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f1c3 0307 	rsb	r3, r3, #7
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	bf28      	it	cs
 8004bb6:	2304      	movcs	r3, #4
 8004bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d902      	bls.n	8004bc8 <NVIC_EncodePriority+0x30>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3b03      	subs	r3, #3
 8004bc6:	e000      	b.n	8004bca <NVIC_EncodePriority+0x32>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	401a      	ands	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be0:	f04f 31ff 	mov.w	r1, #4294967295
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	43d9      	mvns	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	4313      	orrs	r3, r2
         );
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3724      	adds	r7, #36	; 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c10:	d301      	bcc.n	8004c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c12:	2301      	movs	r3, #1
 8004c14:	e00f      	b.n	8004c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <SysTick_Config+0x40>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c1e:	210f      	movs	r1, #15
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	f7ff ff8e 	bl	8004b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <SysTick_Config+0x40>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <SysTick_Config+0x40>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	e000e010 	.word	0xe000e010

08004c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff29 	bl	8004aa4 <__NVIC_SetPriorityGrouping>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b086      	sub	sp, #24
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c68:	f7ff ff40 	bl	8004aec <__NVIC_GetPriorityGrouping>
 8004c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6978      	ldr	r0, [r7, #20]
 8004c74:	f7ff ff90 	bl	8004b98 <NVIC_EncodePriority>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff5f 	bl	8004b44 <__NVIC_SetPriority>
}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	4603      	mov	r3, r0
 8004c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff33 	bl	8004b08 <__NVIC_EnableIRQ>
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ffa4 	bl	8004c00 <SysTick_Config>
 8004cb8:	4603      	mov	r3, r0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ccc:	f7fe f880 	bl	8002dd0 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e314      	b.n	8005306 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a66      	ldr	r2, [pc, #408]	; (8004e7c <HAL_DMA_Init+0x1b8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04a      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a65      	ldr	r2, [pc, #404]	; (8004e80 <HAL_DMA_Init+0x1bc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d045      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a63      	ldr	r2, [pc, #396]	; (8004e84 <HAL_DMA_Init+0x1c0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d040      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a62      	ldr	r2, [pc, #392]	; (8004e88 <HAL_DMA_Init+0x1c4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d03b      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a60      	ldr	r2, [pc, #384]	; (8004e8c <HAL_DMA_Init+0x1c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5f      	ldr	r2, [pc, #380]	; (8004e90 <HAL_DMA_Init+0x1cc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d031      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <HAL_DMA_Init+0x1d0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02c      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_DMA_Init+0x1d4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d027      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5a      	ldr	r2, [pc, #360]	; (8004e9c <HAL_DMA_Init+0x1d8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d022      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a59      	ldr	r2, [pc, #356]	; (8004ea0 <HAL_DMA_Init+0x1dc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01d      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a57      	ldr	r2, [pc, #348]	; (8004ea4 <HAL_DMA_Init+0x1e0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a56      	ldr	r2, [pc, #344]	; (8004ea8 <HAL_DMA_Init+0x1e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a54      	ldr	r2, [pc, #336]	; (8004eac <HAL_DMA_Init+0x1e8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a53      	ldr	r2, [pc, #332]	; (8004eb0 <HAL_DMA_Init+0x1ec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a51      	ldr	r2, [pc, #324]	; (8004eb4 <HAL_DMA_Init+0x1f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_DMA_Init+0xb8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a50      	ldr	r2, [pc, #320]	; (8004eb8 <HAL_DMA_Init+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <HAL_DMA_Init+0xbc>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_DMA_Init+0xbe>
 8004d80:	2300      	movs	r3, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 813c 	beq.w	8005000 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_DMA_Init+0x1b8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04a      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a36      	ldr	r2, [pc, #216]	; (8004e80 <HAL_DMA_Init+0x1bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d045      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <HAL_DMA_Init+0x1c0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a33      	ldr	r2, [pc, #204]	; (8004e88 <HAL_DMA_Init+0x1c4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d03b      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <HAL_DMA_Init+0x1c8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d036      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <HAL_DMA_Init+0x1cc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d031      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	; (8004e94 <HAL_DMA_Init+0x1d0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02c      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <HAL_DMA_Init+0x1d4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d027      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_DMA_Init+0x1d8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <HAL_DMA_Init+0x1dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01d      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <HAL_DMA_Init+0x1e0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <HAL_DMA_Init+0x1e4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <HAL_DMA_Init+0x1e8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <HAL_DMA_Init+0x1ec>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_DMA_Init+0x1f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_DMA_Init+0x174>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_DMA_Init+0x1f4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <HAL_DMA_Init+0x186>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <HAL_DMA_Init+0x196>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e5a:	e02f      	b.n	8004ebc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5c:	f7fd ffb8 	bl	8002dd0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d928      	bls.n	8004ebc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2203      	movs	r2, #3
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e244      	b.n	8005306 <HAL_DMA_Init+0x642>
 8004e7c:	40020010 	.word	0x40020010
 8004e80:	40020028 	.word	0x40020028
 8004e84:	40020040 	.word	0x40020040
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	40020070 	.word	0x40020070
 8004e90:	40020088 	.word	0x40020088
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400200b8 	.word	0x400200b8
 8004e9c:	40020410 	.word	0x40020410
 8004ea0:	40020428 	.word	0x40020428
 8004ea4:	40020440 	.word	0x40020440
 8004ea8:	40020458 	.word	0x40020458
 8004eac:	40020470 	.word	0x40020470
 8004eb0:	40020488 	.word	0x40020488
 8004eb4:	400204a0 	.word	0x400204a0
 8004eb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1c8      	bne.n	8004e5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_DMA_Init+0x424>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d107      	bne.n	8004f20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b28      	cmp	r3, #40	; 0x28
 8004f26:	d903      	bls.n	8004f30 <HAL_DMA_Init+0x26c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f2e:	d91f      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b3e      	cmp	r3, #62	; 0x3e
 8004f36:	d903      	bls.n	8004f40 <HAL_DMA_Init+0x27c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b42      	cmp	r3, #66	; 0x42
 8004f3e:	d917      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b46      	cmp	r3, #70	; 0x46
 8004f46:	d903      	bls.n	8004f50 <HAL_DMA_Init+0x28c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b48      	cmp	r3, #72	; 0x48
 8004f4e:	d90f      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b4e      	cmp	r3, #78	; 0x4e
 8004f56:	d903      	bls.n	8004f60 <HAL_DMA_Init+0x29c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b52      	cmp	r3, #82	; 0x52
 8004f5e:	d907      	bls.n	8004f70 <HAL_DMA_Init+0x2ac>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b73      	cmp	r3, #115	; 0x73
 8004f66:	d905      	bls.n	8004f74 <HAL_DMA_Init+0x2b0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b77      	cmp	r3, #119	; 0x77
 8004f6e:	d801      	bhi.n	8004f74 <HAL_DMA_Init+0x2b0>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_DMA_Init+0x2b2>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0307 	bic.w	r3, r3, #7
 8004f98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d117      	bne.n	8004fdc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 f9b6 	bl	8006330 <DMA_CheckFifoParam>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2240      	movs	r2, #64	; 0x40
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e194      	b.n	8005306 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 f8f1 	bl	80061cc <DMA_CalcBaseAndBitshift>
 8004fea:	4603      	mov	r3, r0
 8004fec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	223f      	movs	r2, #63	; 0x3f
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	e0ca      	b.n	8005196 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a39      	ldr	r2, [pc, #228]	; (80050ec <HAL_DMA_Init+0x428>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_DMA_Init+0x42c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a36      	ldr	r2, [pc, #216]	; (80050f4 <HAL_DMA_Init+0x430>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a35      	ldr	r2, [pc, #212]	; (80050f8 <HAL_DMA_Init+0x434>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a33      	ldr	r2, [pc, #204]	; (80050fc <HAL_DMA_Init+0x438>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a32      	ldr	r2, [pc, #200]	; (8005100 <HAL_DMA_Init+0x43c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	; (8005104 <HAL_DMA_Init+0x440>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMA_Init+0x38c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <HAL_DMA_Init+0x444>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_DMA_Init+0x390>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_DMA_Init+0x392>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8094 	beq.w	8005184 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <HAL_DMA_Init+0x428>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d021      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a21      	ldr	r2, [pc, #132]	; (80050f0 <HAL_DMA_Init+0x42c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01c      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <HAL_DMA_Init+0x430>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d017      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_DMA_Init+0x434>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d012      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_DMA_Init+0x438>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00d      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_DMA_Init+0x43c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d008      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a19      	ldr	r2, [pc, #100]	; (8005104 <HAL_DMA_Init+0x440>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <HAL_DMA_Init+0x3e6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_DMA_Init+0x444>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_DMA_Init+0x448>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d01d      	beq.n	8005110 <HAL_DMA_Init+0x44c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d102      	bne.n	80050e2 <HAL_DMA_Init+0x41e>
 80050dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050e0:	e017      	b.n	8005112 <HAL_DMA_Init+0x44e>
 80050e2:	2300      	movs	r3, #0
 80050e4:	e015      	b.n	8005112 <HAL_DMA_Init+0x44e>
 80050e6:	bf00      	nop
 80050e8:	fe10803f 	.word	0xfe10803f
 80050ec:	58025408 	.word	0x58025408
 80050f0:	5802541c 	.word	0x5802541c
 80050f4:	58025430 	.word	0x58025430
 80050f8:	58025444 	.word	0x58025444
 80050fc:	58025458 	.word	0x58025458
 8005100:	5802546c 	.word	0x5802546c
 8005104:	58025480 	.word	0x58025480
 8005108:	58025494 	.word	0x58025494
 800510c:	fffe000f 	.word	0xfffe000f
 8005110:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68d2      	ldr	r2, [r2, #12]
 8005116:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005140:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	4b6e      	ldr	r3, [pc, #440]	; (8005310 <HAL_DMA_Init+0x64c>)
 8005158:	4413      	add	r3, r2
 800515a:	4a6e      	ldr	r2, [pc, #440]	; (8005314 <HAL_DMA_Init+0x650>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	009a      	lsls	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 f82f 	bl	80061cc <DMA_CalcBaseAndBitshift>
 800516e:	4603      	mov	r3, r0
 8005170:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2201      	movs	r2, #1
 800517c:	409a      	lsls	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e008      	b.n	8005196 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0b7      	b.n	8005306 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5f      	ldr	r2, [pc, #380]	; (8005318 <HAL_DMA_Init+0x654>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d072      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5d      	ldr	r2, [pc, #372]	; (800531c <HAL_DMA_Init+0x658>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d06d      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_DMA_Init+0x65c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d068      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5a      	ldr	r2, [pc, #360]	; (8005324 <HAL_DMA_Init+0x660>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d063      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a59      	ldr	r2, [pc, #356]	; (8005328 <HAL_DMA_Init+0x664>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d05e      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a57      	ldr	r2, [pc, #348]	; (800532c <HAL_DMA_Init+0x668>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d059      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a56      	ldr	r2, [pc, #344]	; (8005330 <HAL_DMA_Init+0x66c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d054      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a54      	ldr	r2, [pc, #336]	; (8005334 <HAL_DMA_Init+0x670>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04f      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a53      	ldr	r2, [pc, #332]	; (8005338 <HAL_DMA_Init+0x674>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04a      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a51      	ldr	r2, [pc, #324]	; (800533c <HAL_DMA_Init+0x678>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d045      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a50      	ldr	r2, [pc, #320]	; (8005340 <HAL_DMA_Init+0x67c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d040      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a4e      	ldr	r2, [pc, #312]	; (8005344 <HAL_DMA_Init+0x680>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d03b      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4d      	ldr	r2, [pc, #308]	; (8005348 <HAL_DMA_Init+0x684>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d036      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a4b      	ldr	r2, [pc, #300]	; (800534c <HAL_DMA_Init+0x688>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d031      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <HAL_DMA_Init+0x68c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d02c      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a48      	ldr	r2, [pc, #288]	; (8005354 <HAL_DMA_Init+0x690>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d027      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a47      	ldr	r2, [pc, #284]	; (8005358 <HAL_DMA_Init+0x694>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_DMA_Init+0x698>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a44      	ldr	r2, [pc, #272]	; (8005360 <HAL_DMA_Init+0x69c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a42      	ldr	r2, [pc, #264]	; (8005364 <HAL_DMA_Init+0x6a0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a41      	ldr	r2, [pc, #260]	; (8005368 <HAL_DMA_Init+0x6a4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a3f      	ldr	r2, [pc, #252]	; (800536c <HAL_DMA_Init+0x6a8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a3e      	ldr	r2, [pc, #248]	; (8005370 <HAL_DMA_Init+0x6ac>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_DMA_Init+0x5c2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <HAL_DMA_Init+0x6b0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <HAL_DMA_Init+0x5c6>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_DMA_Init+0x5c8>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d032      	beq.n	80052f6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 f8c9 	bl	8006428 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d102      	bne.n	80052a4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_DMA_Init+0x620>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d80c      	bhi.n	80052e4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 f946 	bl	800655c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	e008      	b.n	80052f6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	a7fdabf8 	.word	0xa7fdabf8
 8005314:	cccccccd 	.word	0xcccccccd
 8005318:	40020010 	.word	0x40020010
 800531c:	40020028 	.word	0x40020028
 8005320:	40020040 	.word	0x40020040
 8005324:	40020058 	.word	0x40020058
 8005328:	40020070 	.word	0x40020070
 800532c:	40020088 	.word	0x40020088
 8005330:	400200a0 	.word	0x400200a0
 8005334:	400200b8 	.word	0x400200b8
 8005338:	40020410 	.word	0x40020410
 800533c:	40020428 	.word	0x40020428
 8005340:	40020440 	.word	0x40020440
 8005344:	40020458 	.word	0x40020458
 8005348:	40020470 	.word	0x40020470
 800534c:	40020488 	.word	0x40020488
 8005350:	400204a0 	.word	0x400204a0
 8005354:	400204b8 	.word	0x400204b8
 8005358:	58025408 	.word	0x58025408
 800535c:	5802541c 	.word	0x5802541c
 8005360:	58025430 	.word	0x58025430
 8005364:	58025444 	.word	0x58025444
 8005368:	58025458 	.word	0x58025458
 800536c:	5802546c 	.word	0x5802546c
 8005370:	58025480 	.word	0x58025480
 8005374:	58025494 	.word	0x58025494

08005378 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005384:	4b67      	ldr	r3, [pc, #412]	; (8005524 <HAL_DMA_IRQHandler+0x1ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a67      	ldr	r2, [pc, #412]	; (8005528 <HAL_DMA_IRQHandler+0x1b0>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a9b      	lsrs	r3, r3, #10
 8005390:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5f      	ldr	r2, [pc, #380]	; (800552c <HAL_DMA_IRQHandler+0x1b4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5d      	ldr	r2, [pc, #372]	; (8005530 <HAL_DMA_IRQHandler+0x1b8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5c      	ldr	r2, [pc, #368]	; (8005534 <HAL_DMA_IRQHandler+0x1bc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a5a      	ldr	r2, [pc, #360]	; (8005538 <HAL_DMA_IRQHandler+0x1c0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a59      	ldr	r2, [pc, #356]	; (800553c <HAL_DMA_IRQHandler+0x1c4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <HAL_DMA_IRQHandler+0x1c8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a56      	ldr	r2, [pc, #344]	; (8005544 <HAL_DMA_IRQHandler+0x1cc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a54      	ldr	r2, [pc, #336]	; (8005548 <HAL_DMA_IRQHandler+0x1d0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a53      	ldr	r2, [pc, #332]	; (800554c <HAL_DMA_IRQHandler+0x1d4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a51      	ldr	r2, [pc, #324]	; (8005550 <HAL_DMA_IRQHandler+0x1d8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a50      	ldr	r2, [pc, #320]	; (8005554 <HAL_DMA_IRQHandler+0x1dc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4e      	ldr	r2, [pc, #312]	; (8005558 <HAL_DMA_IRQHandler+0x1e0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4d      	ldr	r2, [pc, #308]	; (800555c <HAL_DMA_IRQHandler+0x1e4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a4b      	ldr	r2, [pc, #300]	; (8005560 <HAL_DMA_IRQHandler+0x1e8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a4a      	ldr	r2, [pc, #296]	; (8005564 <HAL_DMA_IRQHandler+0x1ec>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a48      	ldr	r2, [pc, #288]	; (8005568 <HAL_DMA_IRQHandler+0x1f0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_DMA_IRQHandler+0xd6>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_DMA_IRQHandler+0xd8>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 842b 	beq.w	8005cac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2208      	movs	r2, #8
 8005460:	409a      	lsls	r2, r3
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80a2 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2e      	ldr	r2, [pc, #184]	; (800552c <HAL_DMA_IRQHandler+0x1b4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04a      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2d      	ldr	r2, [pc, #180]	; (8005530 <HAL_DMA_IRQHandler+0x1b8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d045      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <HAL_DMA_IRQHandler+0x1bc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d040      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <HAL_DMA_IRQHandler+0x1c0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d03b      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a28      	ldr	r2, [pc, #160]	; (800553c <HAL_DMA_IRQHandler+0x1c4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d036      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a27      	ldr	r2, [pc, #156]	; (8005540 <HAL_DMA_IRQHandler+0x1c8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a25      	ldr	r2, [pc, #148]	; (8005544 <HAL_DMA_IRQHandler+0x1cc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	; (8005548 <HAL_DMA_IRQHandler+0x1d0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_DMA_IRQHandler+0x1d4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <HAL_DMA_IRQHandler+0x1d8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_DMA_IRQHandler+0x1dc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_DMA_IRQHandler+0x1e0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_DMA_IRQHandler+0x1e4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <HAL_DMA_IRQHandler+0x1e8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a19      	ldr	r2, [pc, #100]	; (8005564 <HAL_DMA_IRQHandler+0x1ec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <HAL_DMA_IRQHandler+0x1f0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d12f      	bne.n	800556c <HAL_DMA_IRQHandler+0x1f4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e02e      	b.n	8005580 <HAL_DMA_IRQHandler+0x208>
 8005522:	bf00      	nop
 8005524:	24000000 	.word	0x24000000
 8005528:	1b4e81b5 	.word	0x1b4e81b5
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	40020058 	.word	0x40020058
 800553c:	40020070 	.word	0x40020070
 8005540:	40020088 	.word	0x40020088
 8005544:	400200a0 	.word	0x400200a0
 8005548:	400200b8 	.word	0x400200b8
 800554c:	40020410 	.word	0x40020410
 8005550:	40020428 	.word	0x40020428
 8005554:	40020440 	.word	0x40020440
 8005558:	40020458 	.word	0x40020458
 800555c:	40020470 	.word	0x40020470
 8005560:	40020488 	.word	0x40020488
 8005564:	400204a0 	.word	0x400204a0
 8005568:	400204b8 	.word	0x400204b8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0204 	bic.w	r2, r2, #4
 8005592:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2208      	movs	r2, #8
 800559e:	409a      	lsls	r2, r3
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06e      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a69      	ldr	r2, [pc, #420]	; (8005770 <HAL_DMA_IRQHandler+0x3f8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a67      	ldr	r2, [pc, #412]	; (8005774 <HAL_DMA_IRQHandler+0x3fc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a66      	ldr	r2, [pc, #408]	; (8005778 <HAL_DMA_IRQHandler+0x400>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a64      	ldr	r2, [pc, #400]	; (800577c <HAL_DMA_IRQHandler+0x404>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a63      	ldr	r2, [pc, #396]	; (8005780 <HAL_DMA_IRQHandler+0x408>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a61      	ldr	r2, [pc, #388]	; (8005784 <HAL_DMA_IRQHandler+0x40c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a60      	ldr	r2, [pc, #384]	; (8005788 <HAL_DMA_IRQHandler+0x410>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5e      	ldr	r2, [pc, #376]	; (800578c <HAL_DMA_IRQHandler+0x414>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5d      	ldr	r2, [pc, #372]	; (8005790 <HAL_DMA_IRQHandler+0x418>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5b      	ldr	r2, [pc, #364]	; (8005794 <HAL_DMA_IRQHandler+0x41c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5a      	ldr	r2, [pc, #360]	; (8005798 <HAL_DMA_IRQHandler+0x420>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a58      	ldr	r2, [pc, #352]	; (800579c <HAL_DMA_IRQHandler+0x424>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a57      	ldr	r2, [pc, #348]	; (80057a0 <HAL_DMA_IRQHandler+0x428>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a55      	ldr	r2, [pc, #340]	; (80057a4 <HAL_DMA_IRQHandler+0x42c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a54      	ldr	r2, [pc, #336]	; (80057a8 <HAL_DMA_IRQHandler+0x430>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a52      	ldr	r2, [pc, #328]	; (80057ac <HAL_DMA_IRQHandler+0x434>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10a      	bne.n	800567c <HAL_DMA_IRQHandler+0x304>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e003      	b.n	8005684 <HAL_DMA_IRQHandler+0x30c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2201      	movs	r2, #1
 8005692:	409a      	lsls	r2, r3
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2204      	movs	r2, #4
 80056ae:	409a      	lsls	r2, r3
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 808f 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2c      	ldr	r2, [pc, #176]	; (8005770 <HAL_DMA_IRQHandler+0x3f8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d04a      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <HAL_DMA_IRQHandler+0x3fc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d045      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a29      	ldr	r2, [pc, #164]	; (8005778 <HAL_DMA_IRQHandler+0x400>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d040      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a27      	ldr	r2, [pc, #156]	; (800577c <HAL_DMA_IRQHandler+0x404>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d03b      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a26      	ldr	r2, [pc, #152]	; (8005780 <HAL_DMA_IRQHandler+0x408>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d036      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a24      	ldr	r2, [pc, #144]	; (8005784 <HAL_DMA_IRQHandler+0x40c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a23      	ldr	r2, [pc, #140]	; (8005788 <HAL_DMA_IRQHandler+0x410>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d02c      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_DMA_IRQHandler+0x414>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d027      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a20      	ldr	r2, [pc, #128]	; (8005790 <HAL_DMA_IRQHandler+0x418>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_DMA_IRQHandler+0x41c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01d      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <HAL_DMA_IRQHandler+0x420>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_DMA_IRQHandler+0x424>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_DMA_IRQHandler+0x428>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_DMA_IRQHandler+0x42c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <HAL_DMA_IRQHandler+0x430>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <HAL_DMA_IRQHandler+0x434>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d12a      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x438>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e023      	b.n	80057b8 <HAL_DMA_IRQHandler+0x440>
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2204      	movs	r2, #4
 80057c6:	409a      	lsls	r2, r3
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2210      	movs	r2, #16
 80057e2:	409a      	lsls	r2, r3
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80a6 	beq.w	800593a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a85      	ldr	r2, [pc, #532]	; (8005a08 <HAL_DMA_IRQHandler+0x690>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d04a      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a83      	ldr	r2, [pc, #524]	; (8005a0c <HAL_DMA_IRQHandler+0x694>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d045      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a82      	ldr	r2, [pc, #520]	; (8005a10 <HAL_DMA_IRQHandler+0x698>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d040      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a80      	ldr	r2, [pc, #512]	; (8005a14 <HAL_DMA_IRQHandler+0x69c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d03b      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7f      	ldr	r2, [pc, #508]	; (8005a18 <HAL_DMA_IRQHandler+0x6a0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d036      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7d      	ldr	r2, [pc, #500]	; (8005a1c <HAL_DMA_IRQHandler+0x6a4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d031      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a7c      	ldr	r2, [pc, #496]	; (8005a20 <HAL_DMA_IRQHandler+0x6a8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d02c      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a7a      	ldr	r2, [pc, #488]	; (8005a24 <HAL_DMA_IRQHandler+0x6ac>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d027      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a79      	ldr	r2, [pc, #484]	; (8005a28 <HAL_DMA_IRQHandler+0x6b0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a77      	ldr	r2, [pc, #476]	; (8005a2c <HAL_DMA_IRQHandler+0x6b4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a76      	ldr	r2, [pc, #472]	; (8005a30 <HAL_DMA_IRQHandler+0x6b8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a74      	ldr	r2, [pc, #464]	; (8005a34 <HAL_DMA_IRQHandler+0x6bc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a73      	ldr	r2, [pc, #460]	; (8005a38 <HAL_DMA_IRQHandler+0x6c0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a71      	ldr	r2, [pc, #452]	; (8005a3c <HAL_DMA_IRQHandler+0x6c4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a70      	ldr	r2, [pc, #448]	; (8005a40 <HAL_DMA_IRQHandler+0x6c8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a6e      	ldr	r2, [pc, #440]	; (8005a44 <HAL_DMA_IRQHandler+0x6cc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10a      	bne.n	80058a4 <HAL_DMA_IRQHandler+0x52c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e009      	b.n	80058b8 <HAL_DMA_IRQHandler+0x540>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d03e      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2210      	movs	r2, #16
 80058c6:	409a      	lsls	r2, r3
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d024      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
 80058f8:	e01f      	b.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01b      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
 800590a:	e016      	b.n	800593a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0208 	bic.w	r2, r2, #8
 8005928:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2220      	movs	r2, #32
 8005944:	409a      	lsls	r2, r3
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8110 	beq.w	8005b70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <HAL_DMA_IRQHandler+0x690>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d04a      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <HAL_DMA_IRQHandler+0x694>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d045      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <HAL_DMA_IRQHandler+0x698>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d040      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <HAL_DMA_IRQHandler+0x69c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d03b      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <HAL_DMA_IRQHandler+0x6a0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d036      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <HAL_DMA_IRQHandler+0x6a4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d031      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a23      	ldr	r2, [pc, #140]	; (8005a20 <HAL_DMA_IRQHandler+0x6a8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02c      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a22      	ldr	r2, [pc, #136]	; (8005a24 <HAL_DMA_IRQHandler+0x6ac>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d027      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <HAL_DMA_IRQHandler+0x6b0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <HAL_DMA_IRQHandler+0x6b4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <HAL_DMA_IRQHandler+0x6b8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <HAL_DMA_IRQHandler+0x6bc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <HAL_DMA_IRQHandler+0x6c0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <HAL_DMA_IRQHandler+0x6c4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <HAL_DMA_IRQHandler+0x6c8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <HAL_DMA_IRQHandler+0x6cc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d12b      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x6d0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e02a      	b.n	8005a5c <HAL_DMA_IRQHandler+0x6e4>
 8005a06:	bf00      	nop
 8005a08:	40020010 	.word	0x40020010
 8005a0c:	40020028 	.word	0x40020028
 8005a10:	40020040 	.word	0x40020040
 8005a14:	40020058 	.word	0x40020058
 8005a18:	40020070 	.word	0x40020070
 8005a1c:	40020088 	.word	0x40020088
 8005a20:	400200a0 	.word	0x400200a0
 8005a24:	400200b8 	.word	0x400200b8
 8005a28:	40020410 	.word	0x40020410
 8005a2c:	40020428 	.word	0x40020428
 8005a30:	40020440 	.word	0x40020440
 8005a34:	40020458 	.word	0x40020458
 8005a38:	40020470 	.word	0x40020470
 8005a3c:	40020488 	.word	0x40020488
 8005a40:	400204a0 	.word	0x400204a0
 8005a44:	400204b8 	.word	0x400204b8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8087 	beq.w	8005b70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d139      	bne.n	8005af2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0216 	bic.w	r2, r2, #22
 8005a8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_DMA_IRQHandler+0x736>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0208 	bic.w	r2, r2, #8
 8005abc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	223f      	movs	r2, #63	; 0x3f
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 834a 	beq.w	800617c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
          }
          return;
 8005af0:	e344      	b.n	800617c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d02c      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4798      	blx	r3
 8005b1e:	e027      	b.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d023      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
 8005b30:	e01e      	b.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0210 	bic.w	r2, r2, #16
 8005b4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8306 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8088 	beq.w	8005c98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7a      	ldr	r2, [pc, #488]	; (8005d80 <HAL_DMA_IRQHandler+0xa08>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d04a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a79      	ldr	r2, [pc, #484]	; (8005d84 <HAL_DMA_IRQHandler+0xa0c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d045      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a77      	ldr	r2, [pc, #476]	; (8005d88 <HAL_DMA_IRQHandler+0xa10>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d040      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a76      	ldr	r2, [pc, #472]	; (8005d8c <HAL_DMA_IRQHandler+0xa14>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d03b      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a74      	ldr	r2, [pc, #464]	; (8005d90 <HAL_DMA_IRQHandler+0xa18>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d036      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a73      	ldr	r2, [pc, #460]	; (8005d94 <HAL_DMA_IRQHandler+0xa1c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a71      	ldr	r2, [pc, #452]	; (8005d98 <HAL_DMA_IRQHandler+0xa20>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02c      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a70      	ldr	r2, [pc, #448]	; (8005d9c <HAL_DMA_IRQHandler+0xa24>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d027      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a6e      	ldr	r2, [pc, #440]	; (8005da0 <HAL_DMA_IRQHandler+0xa28>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d022      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a6d      	ldr	r2, [pc, #436]	; (8005da4 <HAL_DMA_IRQHandler+0xa2c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d01d      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a6b      	ldr	r2, [pc, #428]	; (8005da8 <HAL_DMA_IRQHandler+0xa30>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a6a      	ldr	r2, [pc, #424]	; (8005dac <HAL_DMA_IRQHandler+0xa34>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a68      	ldr	r2, [pc, #416]	; (8005db0 <HAL_DMA_IRQHandler+0xa38>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00e      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a67      	ldr	r2, [pc, #412]	; (8005db4 <HAL_DMA_IRQHandler+0xa3c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a65      	ldr	r2, [pc, #404]	; (8005db8 <HAL_DMA_IRQHandler+0xa40>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a64      	ldr	r2, [pc, #400]	; (8005dbc <HAL_DMA_IRQHandler+0xa44>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x8ca>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e007      	b.n	8005c52 <HAL_DMA_IRQHandler+0x8da>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d307      	bcc.n	8005c6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f2      	bne.n	8005c52 <HAL_DMA_IRQHandler+0x8da>
 8005c6c:	e000      	b.n	8005c70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2203      	movs	r2, #3
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c86:	e003      	b.n	8005c90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8272 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
 8005caa:	e26c      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a43      	ldr	r2, [pc, #268]	; (8005dc0 <HAL_DMA_IRQHandler+0xa48>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d022      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a42      	ldr	r2, [pc, #264]	; (8005dc4 <HAL_DMA_IRQHandler+0xa4c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d01d      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a40      	ldr	r2, [pc, #256]	; (8005dc8 <HAL_DMA_IRQHandler+0xa50>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d018      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3f      	ldr	r2, [pc, #252]	; (8005dcc <HAL_DMA_IRQHandler+0xa54>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	; (8005dd0 <HAL_DMA_IRQHandler+0xa58>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00e      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d009      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3a      	ldr	r2, [pc, #232]	; (8005dd8 <HAL_DMA_IRQHandler+0xa60>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a39      	ldr	r2, [pc, #228]	; (8005ddc <HAL_DMA_IRQHandler+0xa64>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d101      	bne.n	8005d00 <HAL_DMA_IRQHandler+0x988>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_DMA_IRQHandler+0x98a>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 823f 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2204      	movs	r2, #4
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80cd 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xb48>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80c7 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d049      	beq.n	8005de0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8210 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d68:	e20a      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8206 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7c:	e200      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
 8005d7e:	bf00      	nop
 8005d80:	40020010 	.word	0x40020010
 8005d84:	40020028 	.word	0x40020028
 8005d88:	40020040 	.word	0x40020040
 8005d8c:	40020058 	.word	0x40020058
 8005d90:	40020070 	.word	0x40020070
 8005d94:	40020088 	.word	0x40020088
 8005d98:	400200a0 	.word	0x400200a0
 8005d9c:	400200b8 	.word	0x400200b8
 8005da0:	40020410 	.word	0x40020410
 8005da4:	40020428 	.word	0x40020428
 8005da8:	40020440 	.word	0x40020440
 8005dac:	40020458 	.word	0x40020458
 8005db0:	40020470 	.word	0x40020470
 8005db4:	40020488 	.word	0x40020488
 8005db8:	400204a0 	.word	0x400204a0
 8005dbc:	400204b8 	.word	0x400204b8
 8005dc0:	58025408 	.word	0x58025408
 8005dc4:	5802541c 	.word	0x5802541c
 8005dc8:	58025430 	.word	0x58025430
 8005dcc:	58025444 	.word	0x58025444
 8005dd0:	58025458 	.word	0x58025458
 8005dd4:	5802546c 	.word	0x5802546c
 8005dd8:	58025480 	.word	0x58025480
 8005ddc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d160      	bne.n	8005eac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a8c      	ldr	r2, [pc, #560]	; (8006020 <HAL_DMA_IRQHandler+0xca8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a8a      	ldr	r2, [pc, #552]	; (8006024 <HAL_DMA_IRQHandler+0xcac>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a89      	ldr	r2, [pc, #548]	; (8006028 <HAL_DMA_IRQHandler+0xcb0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a87      	ldr	r2, [pc, #540]	; (800602c <HAL_DMA_IRQHandler+0xcb4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a86      	ldr	r2, [pc, #536]	; (8006030 <HAL_DMA_IRQHandler+0xcb8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a84      	ldr	r2, [pc, #528]	; (8006034 <HAL_DMA_IRQHandler+0xcbc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a83      	ldr	r2, [pc, #524]	; (8006038 <HAL_DMA_IRQHandler+0xcc0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a81      	ldr	r2, [pc, #516]	; (800603c <HAL_DMA_IRQHandler+0xcc4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a80      	ldr	r2, [pc, #512]	; (8006040 <HAL_DMA_IRQHandler+0xcc8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7e      	ldr	r2, [pc, #504]	; (8006044 <HAL_DMA_IRQHandler+0xccc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7d      	ldr	r2, [pc, #500]	; (8006048 <HAL_DMA_IRQHandler+0xcd0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7b      	ldr	r2, [pc, #492]	; (800604c <HAL_DMA_IRQHandler+0xcd4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <HAL_DMA_IRQHandler+0xcd8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a78      	ldr	r2, [pc, #480]	; (8006054 <HAL_DMA_IRQHandler+0xcdc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a77      	ldr	r2, [pc, #476]	; (8006058 <HAL_DMA_IRQHandler+0xce0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a75      	ldr	r2, [pc, #468]	; (800605c <HAL_DMA_IRQHandler+0xce4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_IRQHandler+0xb24>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0208 	bic.w	r2, r2, #8
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <HAL_DMA_IRQHandler+0xb34>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8165 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ebe:	e15f      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2202      	movs	r2, #2
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80c5 	beq.w	8006060 <HAL_DMA_IRQHandler+0xce8>
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80bf 	beq.w	8006060 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2202      	movs	r2, #2
 8005eec:	409a      	lsls	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d018      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 813a 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f18:	e134      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8130 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2c:	e12a      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d168      	bne.n	800600a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a38      	ldr	r2, [pc, #224]	; (8006020 <HAL_DMA_IRQHandler+0xca8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d04a      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a37      	ldr	r2, [pc, #220]	; (8006024 <HAL_DMA_IRQHandler+0xcac>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d045      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a35      	ldr	r2, [pc, #212]	; (8006028 <HAL_DMA_IRQHandler+0xcb0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d040      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a34      	ldr	r2, [pc, #208]	; (800602c <HAL_DMA_IRQHandler+0xcb4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d03b      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a32      	ldr	r2, [pc, #200]	; (8006030 <HAL_DMA_IRQHandler+0xcb8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d036      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a31      	ldr	r2, [pc, #196]	; (8006034 <HAL_DMA_IRQHandler+0xcbc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d031      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2f      	ldr	r2, [pc, #188]	; (8006038 <HAL_DMA_IRQHandler+0xcc0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d02c      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2e      	ldr	r2, [pc, #184]	; (800603c <HAL_DMA_IRQHandler+0xcc4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d027      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2c      	ldr	r2, [pc, #176]	; (8006040 <HAL_DMA_IRQHandler+0xcc8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d022      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2b      	ldr	r2, [pc, #172]	; (8006044 <HAL_DMA_IRQHandler+0xccc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01d      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <HAL_DMA_IRQHandler+0xcd0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d018      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a28      	ldr	r2, [pc, #160]	; (800604c <HAL_DMA_IRQHandler+0xcd4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a26      	ldr	r2, [pc, #152]	; (8006050 <HAL_DMA_IRQHandler+0xcd8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a25      	ldr	r2, [pc, #148]	; (8006054 <HAL_DMA_IRQHandler+0xcdc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a23      	ldr	r2, [pc, #140]	; (8006058 <HAL_DMA_IRQHandler+0xce0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xc60>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a22      	ldr	r2, [pc, #136]	; (800605c <HAL_DMA_IRQHandler+0xce4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d108      	bne.n	8005fea <HAL_DMA_IRQHandler+0xc72>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0214 	bic.w	r2, r2, #20
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e007      	b.n	8005ffa <HAL_DMA_IRQHandler+0xc82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 020a 	bic.w	r2, r2, #10
 8005ff8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80b8 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800601c:	e0b2      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
 800601e:	bf00      	nop
 8006020:	40020010 	.word	0x40020010
 8006024:	40020028 	.word	0x40020028
 8006028:	40020040 	.word	0x40020040
 800602c:	40020058 	.word	0x40020058
 8006030:	40020070 	.word	0x40020070
 8006034:	40020088 	.word	0x40020088
 8006038:	400200a0 	.word	0x400200a0
 800603c:	400200b8 	.word	0x400200b8
 8006040:	40020410 	.word	0x40020410
 8006044:	40020428 	.word	0x40020428
 8006048:	40020440 	.word	0x40020440
 800604c:	40020458 	.word	0x40020458
 8006050:	40020470 	.word	0x40020470
 8006054:	40020488 	.word	0x40020488
 8006058:	400204a0 	.word	0x400204a0
 800605c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2208      	movs	r2, #8
 800606a:	409a      	lsls	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4013      	ands	r3, r2
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8088 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8082 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a41      	ldr	r2, [pc, #260]	; (800618c <HAL_DMA_IRQHandler+0xe14>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d04a      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3f      	ldr	r2, [pc, #252]	; (8006190 <HAL_DMA_IRQHandler+0xe18>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d045      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3e      	ldr	r2, [pc, #248]	; (8006194 <HAL_DMA_IRQHandler+0xe1c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d040      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3c      	ldr	r2, [pc, #240]	; (8006198 <HAL_DMA_IRQHandler+0xe20>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d03b      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3b      	ldr	r2, [pc, #236]	; (800619c <HAL_DMA_IRQHandler+0xe24>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d036      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a39      	ldr	r2, [pc, #228]	; (80061a0 <HAL_DMA_IRQHandler+0xe28>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d031      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a38      	ldr	r2, [pc, #224]	; (80061a4 <HAL_DMA_IRQHandler+0xe2c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d02c      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a36      	ldr	r2, [pc, #216]	; (80061a8 <HAL_DMA_IRQHandler+0xe30>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d027      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a35      	ldr	r2, [pc, #212]	; (80061ac <HAL_DMA_IRQHandler+0xe34>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a33      	ldr	r2, [pc, #204]	; (80061b0 <HAL_DMA_IRQHandler+0xe38>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a32      	ldr	r2, [pc, #200]	; (80061b4 <HAL_DMA_IRQHandler+0xe3c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a30      	ldr	r2, [pc, #192]	; (80061b8 <HAL_DMA_IRQHandler+0xe40>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <HAL_DMA_IRQHandler+0xe44>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	; (80061c0 <HAL_DMA_IRQHandler+0xe48>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <HAL_DMA_IRQHandler+0xe4c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2a      	ldr	r2, [pc, #168]	; (80061c8 <HAL_DMA_IRQHandler+0xe50>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <HAL_DMA_IRQHandler+0xdbc>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 021c 	bic.w	r2, r2, #28
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e007      	b.n	8006144 <HAL_DMA_IRQHandler+0xdcc>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 020e 	bic.w	r2, r2, #14
 8006142:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	409a      	lsls	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
 800617a:	e004      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006184:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006186:	3728      	adds	r7, #40	; 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8

080061cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <DMA_CalcBaseAndBitshift+0x118>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04a      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a41      	ldr	r2, [pc, #260]	; (80062e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d045      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	; (80062ec <DMA_CalcBaseAndBitshift+0x120>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d040      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a3e      	ldr	r2, [pc, #248]	; (80062f0 <DMA_CalcBaseAndBitshift+0x124>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d03b      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3c      	ldr	r2, [pc, #240]	; (80062f4 <DMA_CalcBaseAndBitshift+0x128>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d036      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d031      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a39      	ldr	r2, [pc, #228]	; (80062fc <DMA_CalcBaseAndBitshift+0x130>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02c      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a38      	ldr	r2, [pc, #224]	; (8006300 <DMA_CalcBaseAndBitshift+0x134>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d027      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a36      	ldr	r2, [pc, #216]	; (8006304 <DMA_CalcBaseAndBitshift+0x138>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d022      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a35      	ldr	r2, [pc, #212]	; (8006308 <DMA_CalcBaseAndBitshift+0x13c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d01d      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	; (800630c <DMA_CalcBaseAndBitshift+0x140>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a32      	ldr	r2, [pc, #200]	; (8006310 <DMA_CalcBaseAndBitshift+0x144>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a30      	ldr	r2, [pc, #192]	; (8006314 <DMA_CalcBaseAndBitshift+0x148>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <DMA_CalcBaseAndBitshift+0x14c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2d      	ldr	r2, [pc, #180]	; (800631c <DMA_CalcBaseAndBitshift+0x150>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <DMA_CalcBaseAndBitshift+0x154>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <DMA_CalcBaseAndBitshift+0xac>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <DMA_CalcBaseAndBitshift+0xae>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d024      	beq.n	80062c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	3b10      	subs	r3, #16
 8006286:	4a27      	ldr	r2, [pc, #156]	; (8006324 <DMA_CalcBaseAndBitshift+0x158>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	4a24      	ldr	r2, [pc, #144]	; (8006328 <DMA_CalcBaseAndBitshift+0x15c>)
 8006298:	5cd3      	ldrb	r3, [r2, r3]
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d908      	bls.n	80062b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b1f      	ldr	r3, [pc, #124]	; (800632c <DMA_CalcBaseAndBitshift+0x160>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	; 0x58
 80062b6:	e00d      	b.n	80062d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <DMA_CalcBaseAndBitshift+0x160>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6593      	str	r3, [r2, #88]	; 0x58
 80062c6:	e005      	b.n	80062d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
 8006324:	aaaaaaab 	.word	0xaaaaaaab
 8006328:	0800f434 	.word	0x0800f434
 800632c:	fffffc00 	.word	0xfffffc00

08006330 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d120      	bne.n	8006386 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	2b03      	cmp	r3, #3
 800634a:	d858      	bhi.n	80063fe <DMA_CheckFifoParam+0xce>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <DMA_CheckFifoParam+0x24>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	08006377 	.word	0x08006377
 800635c:	08006365 	.word	0x08006365
 8006360:	080063ff 	.word	0x080063ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d048      	beq.n	8006402 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006374:	e045      	b.n	8006402 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800637e:	d142      	bne.n	8006406 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006384:	e03f      	b.n	8006406 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	d123      	bne.n	80063d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	2b03      	cmp	r3, #3
 8006396:	d838      	bhi.n	800640a <DMA_CheckFifoParam+0xda>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <DMA_CheckFifoParam+0x70>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b7 	.word	0x080063b7
 80063a8:	080063b1 	.word	0x080063b1
 80063ac:	080063c9 	.word	0x080063c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
        break;
 80063b4:	e030      	b.n	8006418 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d025      	beq.n	800640e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063c6:	e022      	b.n	800640e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063d0:	d11f      	bne.n	8006412 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063d6:	e01c      	b.n	8006412 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d902      	bls.n	80063e6 <DMA_CheckFifoParam+0xb6>
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d003      	beq.n	80063ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063e4:	e018      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ea:	e015      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
    break;
 80063fc:	e00b      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
        break;
 80063fe:	bf00      	nop
 8006400:	e00a      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006402:	bf00      	nop
 8006404:	e008      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006406:	bf00      	nop
 8006408:	e006      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 800640a:	bf00      	nop
 800640c:	e004      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
    break;
 8006416:	bf00      	nop
    }
  }

  return status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop

08006428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a38      	ldr	r2, [pc, #224]	; (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a36      	ldr	r2, [pc, #216]	; (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a35      	ldr	r2, [pc, #212]	; (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d018      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a33      	ldr	r2, [pc, #204]	; (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3b08      	subs	r3, #8
 8006498:	4a28      	ldr	r2, [pc, #160]	; (800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	091b      	lsrs	r3, r3, #4
 80064a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4b26      	ldr	r3, [pc, #152]	; (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a24      	ldr	r2, [pc, #144]	; (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064c4:	e024      	b.n	8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	3b10      	subs	r3, #16
 80064ce:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d806      	bhi.n	80064ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d902      	bls.n	80064ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3308      	adds	r3, #8
 80064ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4b18      	ldr	r3, [pc, #96]	; (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a16      	ldr	r2, [pc, #88]	; (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006500:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2201      	movs	r2, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	58025408 	.word	0x58025408
 8006520:	5802541c 	.word	0x5802541c
 8006524:	58025430 	.word	0x58025430
 8006528:	58025444 	.word	0x58025444
 800652c:	58025458 	.word	0x58025458
 8006530:	5802546c 	.word	0x5802546c
 8006534:	58025480 	.word	0x58025480
 8006538:	58025494 	.word	0x58025494
 800653c:	cccccccd 	.word	0xcccccccd
 8006540:	16009600 	.word	0x16009600
 8006544:	58025880 	.word	0x58025880
 8006548:	aaaaaaab 	.word	0xaaaaaaab
 800654c:	400204b8 	.word	0x400204b8
 8006550:	4002040f 	.word	0x4002040f
 8006554:	10008200 	.word	0x10008200
 8006558:	40020880 	.word	0x40020880

0800655c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04a      	beq.n	8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d847      	bhi.n	8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	; (8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4b17      	ldr	r3, [pc, #92]	; (8006634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	461a      	mov	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065e4:	671a      	str	r2, [r3, #112]	; 0x70
 80065e6:	e009      	b.n	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4b14      	ldr	r3, [pc, #80]	; (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a11      	ldr	r2, [pc, #68]	; (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b01      	subs	r3, #1
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494
 8006634:	1600963f 	.word	0x1600963f
 8006638:	58025940 	.word	0x58025940
 800663c:	1000823f 	.word	0x1000823f
 8006640:	40020940 	.word	0x40020940

08006644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006644:	b480      	push	{r7}
 8006646:	b089      	sub	sp, #36	; 0x24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006652:	4b86      	ldr	r3, [pc, #536]	; (800686c <HAL_GPIO_Init+0x228>)
 8006654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006656:	e18c      	b.n	8006972 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 817e 	beq.w	800696c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d005      	beq.n	8006688 <HAL_GPIO_Init+0x44>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d130      	bne.n	80066ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	2203      	movs	r2, #3
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066be:	2201      	movs	r2, #1
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	f003 0201 	and.w	r2, r3, #1
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d017      	beq.n	8006726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	2203      	movs	r2, #3
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4013      	ands	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d123      	bne.n	800677a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	08da      	lsrs	r2, r3, #3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3208      	adds	r2, #8
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	220f      	movs	r2, #15
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	08da      	lsrs	r2, r3, #3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3208      	adds	r2, #8
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	2203      	movs	r2, #3
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4013      	ands	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f003 0203 	and.w	r2, r3, #3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80d8 	beq.w	800696c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067bc:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <HAL_GPIO_Init+0x22c>)
 80067be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067c2:	4a2b      	ldr	r2, [pc, #172]	; (8006870 <HAL_GPIO_Init+0x22c>)
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067cc:	4b28      	ldr	r3, [pc, #160]	; (8006870 <HAL_GPIO_Init+0x22c>)
 80067ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067da:	4a26      	ldr	r2, [pc, #152]	; (8006874 <HAL_GPIO_Init+0x230>)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	3302      	adds	r3, #2
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	220f      	movs	r2, #15
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43db      	mvns	r3, r3
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4013      	ands	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_GPIO_Init+0x234>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d04a      	beq.n	800689c <HAL_GPIO_Init+0x258>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_GPIO_Init+0x238>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d02b      	beq.n	8006866 <HAL_GPIO_Init+0x222>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_GPIO_Init+0x23c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d025      	beq.n	8006862 <HAL_GPIO_Init+0x21e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <HAL_GPIO_Init+0x240>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01f      	beq.n	800685e <HAL_GPIO_Init+0x21a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a19      	ldr	r2, [pc, #100]	; (8006888 <HAL_GPIO_Init+0x244>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d019      	beq.n	800685a <HAL_GPIO_Init+0x216>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a18      	ldr	r2, [pc, #96]	; (800688c <HAL_GPIO_Init+0x248>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_GPIO_Init+0x212>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <HAL_GPIO_Init+0x24c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00d      	beq.n	8006852 <HAL_GPIO_Init+0x20e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a16      	ldr	r2, [pc, #88]	; (8006894 <HAL_GPIO_Init+0x250>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <HAL_GPIO_Init+0x20a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_GPIO_Init+0x254>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_GPIO_Init+0x206>
 8006846:	2309      	movs	r3, #9
 8006848:	e029      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800684a:	230a      	movs	r3, #10
 800684c:	e027      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800684e:	2307      	movs	r3, #7
 8006850:	e025      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006852:	2306      	movs	r3, #6
 8006854:	e023      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006856:	2305      	movs	r3, #5
 8006858:	e021      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800685a:	2304      	movs	r3, #4
 800685c:	e01f      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800685e:	2303      	movs	r3, #3
 8006860:	e01d      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006862:	2302      	movs	r3, #2
 8006864:	e01b      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006866:	2301      	movs	r3, #1
 8006868:	e019      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800686a:	bf00      	nop
 800686c:	58000080 	.word	0x58000080
 8006870:	58024400 	.word	0x58024400
 8006874:	58000400 	.word	0x58000400
 8006878:	58020000 	.word	0x58020000
 800687c:	58020400 	.word	0x58020400
 8006880:	58020800 	.word	0x58020800
 8006884:	58020c00 	.word	0x58020c00
 8006888:	58021000 	.word	0x58021000
 800688c:	58021400 	.word	0x58021400
 8006890:	58021800 	.word	0x58021800
 8006894:	58021c00 	.word	0x58021c00
 8006898:	58022400 	.word	0x58022400
 800689c:	2300      	movs	r3, #0
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ae:	4938      	ldr	r1, [pc, #224]	; (8006990 <HAL_GPIO_Init+0x34c>)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4013      	ands	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	3301      	adds	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f ae6b 	bne.w	8006658 <HAL_GPIO_Init+0x14>
  }
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	3724      	adds	r7, #36	; 0x24
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58000400 	.word	0x58000400

08006994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	807b      	strh	r3, [r7, #2]
 80069a0:	4613      	mov	r3, r2
 80069a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069a4:	787b      	ldrb	r3, [r7, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069aa:	887a      	ldrh	r2, [r7, #2]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069b0:	e003      	b.n	80069ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	041a      	lsls	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	619a      	str	r2, [r3, #24]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069d0:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <HAL_PWREx_ConfigSupply+0x70>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d00a      	beq.n	80069f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069dc:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <HAL_PWREx_ConfigSupply+0x70>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d001      	beq.n	80069ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e01f      	b.n	8006a2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e01d      	b.n	8006a2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069f2:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <HAL_PWREx_ConfigSupply+0x70>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f023 0207 	bic.w	r2, r3, #7
 80069fa:	490f      	ldr	r1, [pc, #60]	; (8006a38 <HAL_PWREx_ConfigSupply+0x70>)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a02:	f7fc f9e5 	bl	8002dd0 <HAL_GetTick>
 8006a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a08:	e009      	b.n	8006a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a0a:	f7fc f9e1 	bl	8002dd0 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a18:	d901      	bls.n	8006a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e007      	b.n	8006a2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <HAL_PWREx_ConfigSupply+0x70>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2a:	d1ee      	bne.n	8006a0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	58024800 	.word	0x58024800

08006a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e397      	b.n	800717e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8087 	beq.w	8006b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a5c:	4b9e      	ldr	r3, [pc, #632]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a66:	4b9c      	ldr	r3, [pc, #624]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d007      	beq.n	8006a82 <HAL_RCC_OscConfig+0x46>
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	2b18      	cmp	r3, #24
 8006a76:	d110      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d10b      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a82:	4b95      	ldr	r3, [pc, #596]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d06c      	beq.n	8006b68 <HAL_RCC_OscConfig+0x12c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d168      	bne.n	8006b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e371      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x76>
 8006aa4:	4b8c      	ldr	r3, [pc, #560]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a8b      	ldr	r2, [pc, #556]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e02e      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x98>
 8006aba:	4b87      	ldr	r3, [pc, #540]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a86      	ldr	r2, [pc, #536]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b84      	ldr	r3, [pc, #528]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a83      	ldr	r2, [pc, #524]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e01d      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0xbc>
 8006ade:	4b7e      	ldr	r3, [pc, #504]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a7d      	ldr	r2, [pc, #500]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7a      	ldr	r2, [pc, #488]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006af8:	4b77      	ldr	r3, [pc, #476]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a76      	ldr	r2, [pc, #472]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	4b74      	ldr	r3, [pc, #464]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a73      	ldr	r2, [pc, #460]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d013      	beq.n	8006b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fc f95a 	bl	8002dd0 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fc f956 	bl	8002dd0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b64      	cmp	r3, #100	; 0x64
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e325      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b32:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0xe4>
 8006b3e:	e014      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fc f946 	bl	8002dd0 <HAL_GetTick>
 8006b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b48:	f7fc f942 	bl	8002dd0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b64      	cmp	r3, #100	; 0x64
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e311      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b5a:	4b5f      	ldr	r3, [pc, #380]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x10c>
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 808a 	beq.w	8006c8c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b78:	4b57      	ldr	r3, [pc, #348]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b82:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <HAL_RCC_OscConfig+0x162>
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	2b18      	cmp	r3, #24
 8006b92:	d137      	bne.n	8006c04 <HAL_RCC_OscConfig+0x1c8>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d132      	bne.n	8006c04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b9e:	4b4e      	ldr	r3, [pc, #312]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x17a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e2e3      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bb6:	4b48      	ldr	r3, [pc, #288]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0219 	bic.w	r2, r3, #25
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	4945      	ldr	r1, [pc, #276]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bc8:	f7fc f902 	bl	8002dd0 <HAL_GetTick>
 8006bcc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fc f8fe 	bl	8002dd0 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e2cd      	b.n	800717e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006be2:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	4936      	ldr	r1, [pc, #216]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c02:	e043      	b.n	8006c8c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d026      	beq.n	8006c5a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c0c:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 0219 	bic.w	r2, r3, #25
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	492f      	ldr	r1, [pc, #188]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1e:	f7fc f8d7 	bl	8002dd0 <HAL_GetTick>
 8006c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c26:	f7fc f8d3 	bl	8002dd0 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e2a2      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c38:	4b27      	ldr	r3, [pc, #156]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c44:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	4921      	ldr	r1, [pc, #132]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	604b      	str	r3, [r1, #4]
 8006c58:	e018      	b.n	8006c8c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fc f8b3 	bl	8002dd0 <HAL_GetTick>
 8006c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c6e:	f7fc f8af 	bl	8002dd0 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e27e      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c80:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f0      	bne.n	8006c6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d06d      	beq.n	8006d74 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d007      	beq.n	8006cbe <HAL_RCC_OscConfig+0x282>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b18      	cmp	r3, #24
 8006cb2:	d11e      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x2b6>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d119      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <HAL_RCC_OscConfig+0x29c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_RCC_OscConfig+0x2a0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e253      	b.n	800717e <HAL_RCC_OscConfig+0x742>
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cdc:	4ba3      	ldr	r3, [pc, #652]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	061b      	lsls	r3, r3, #24
 8006cea:	49a0      	ldr	r1, [pc, #640]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cf0:	e040      	b.n	8006d74 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d023      	beq.n	8006d42 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cfa:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a9b      	ldr	r2, [pc, #620]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7fc f863 	bl	8002dd0 <HAL_GetTick>
 8006d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d0e:	f7fc f85f 	bl	8002dd0 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e22e      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d20:	4b92      	ldr	r3, [pc, #584]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d2c:	4b8f      	ldr	r3, [pc, #572]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	061b      	lsls	r3, r3, #24
 8006d3a:	498c      	ldr	r1, [pc, #560]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60cb      	str	r3, [r1, #12]
 8006d40:	e018      	b.n	8006d74 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d42:	4b8a      	ldr	r3, [pc, #552]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a89      	ldr	r2, [pc, #548]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fc f83f 	bl	8002dd0 <HAL_GetTick>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d56:	f7fc f83b 	bl	8002dd0 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e20a      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d68:	4b80      	ldr	r3, [pc, #512]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d036      	beq.n	8006dee <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d019      	beq.n	8006dbc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d88:	4b78      	ldr	r3, [pc, #480]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8c:	4a77      	ldr	r2, [pc, #476]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fc f81c 	bl	8002dd0 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9c:	f7fc f818 	bl	8002dd0 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e1e7      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dae:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x360>
 8006dba:	e018      	b.n	8006dee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc0:	4a6a      	ldr	r2, [pc, #424]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fc f802 	bl	8002dd0 <HAL_GetTick>
 8006dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd0:	f7fb fffe 	bl	8002dd0 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e1cd      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006de2:	4b62      	ldr	r3, [pc, #392]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d036      	beq.n	8006e68 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d019      	beq.n	8006e36 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e02:	4b5a      	ldr	r3, [pc, #360]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a59      	ldr	r2, [pc, #356]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e0e:	f7fb ffdf 	bl	8002dd0 <HAL_GetTick>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e16:	f7fb ffdb 	bl	8002dd0 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e1aa      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e28:	4b50      	ldr	r3, [pc, #320]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x3da>
 8006e34:	e018      	b.n	8006e68 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e36:	4b4d      	ldr	r3, [pc, #308]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a4c      	ldr	r2, [pc, #304]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e42:	f7fb ffc5 	bl	8002dd0 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e4a:	f7fb ffc1 	bl	8002dd0 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e190      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e5c:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f0      	bne.n	8006e4a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8085 	beq.w	8006f80 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e76:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <HAL_RCC_OscConfig+0x534>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a3d      	ldr	r2, [pc, #244]	; (8006f70 <HAL_RCC_OscConfig+0x534>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e82:	f7fb ffa5 	bl	8002dd0 <HAL_GetTick>
 8006e86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e8a:	f7fb ffa1 	bl	8002dd0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b64      	cmp	r3, #100	; 0x64
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e170      	b.n	800717e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e9c:	4b34      	ldr	r3, [pc, #208]	; (8006f70 <HAL_RCC_OscConfig+0x534>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d106      	bne.n	8006ebe <HAL_RCC_OscConfig+0x482>
 8006eb0:	4b2e      	ldr	r3, [pc, #184]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebc:	e02d      	b.n	8006f1a <HAL_RCC_OscConfig+0x4de>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x4a4>
 8006ec6:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006ed8:	f023 0304 	bic.w	r3, r3, #4
 8006edc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ede:	e01c      	b.n	8006f1a <HAL_RCC_OscConfig+0x4de>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d10c      	bne.n	8006f02 <HAL_RCC_OscConfig+0x4c6>
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	4a1c      	ldr	r2, [pc, #112]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6713      	str	r3, [r2, #112]	; 0x70
 8006f00:	e00b      	b.n	8006f1a <HAL_RCC_OscConfig+0x4de>
 8006f02:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f0e:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	4a16      	ldr	r2, [pc, #88]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d015      	beq.n	8006f4e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f22:	f7fb ff55 	bl	8002dd0 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7fb ff51 	bl	8002dd0 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e11e      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <HAL_RCC_OscConfig+0x530>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0ee      	beq.n	8006f2a <HAL_RCC_OscConfig+0x4ee>
 8006f4c:	e018      	b.n	8006f80 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f4e:	f7fb ff3f 	bl	8002dd0 <HAL_GetTick>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f54:	e00e      	b.n	8006f74 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7fb ff3b 	bl	8002dd0 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d905      	bls.n	8006f74 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e108      	b.n	800717e <HAL_RCC_OscConfig+0x742>
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ea      	bne.n	8006f56 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80f9 	beq.w	800717c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f92:	2b18      	cmp	r3, #24
 8006f94:	f000 80b4 	beq.w	8007100 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f040 8095 	bne.w	80070cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa2:	4b79      	ldr	r3, [pc, #484]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a78      	ldr	r2, [pc, #480]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fae:	f7fb ff0f 	bl	8002dd0 <HAL_GetTick>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fb ff0b 	bl	8002dd0 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e0da      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fd4:	4b6c      	ldr	r3, [pc, #432]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd8:	4b6c      	ldr	r3, [pc, #432]	; (800718c <HAL_RCC_OscConfig+0x750>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fe4:	0112      	lsls	r2, r2, #4
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	4967      	ldr	r1, [pc, #412]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	628b      	str	r3, [r1, #40]	; 0x28
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	025b      	lsls	r3, r3, #9
 8007000:	b29b      	uxth	r3, r3
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	3b01      	subs	r3, #1
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007016:	3b01      	subs	r3, #1
 8007018:	061b      	lsls	r3, r3, #24
 800701a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800701e:	495a      	ldr	r1, [pc, #360]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007024:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a57      	ldr	r2, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007030:	4b55      	ldr	r3, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	4b56      	ldr	r3, [pc, #344]	; (8007190 <HAL_RCC_OscConfig+0x754>)
 8007036:	4013      	ands	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800703c:	00d2      	lsls	r2, r2, #3
 800703e:	4952      	ldr	r1, [pc, #328]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007040:	4313      	orrs	r3, r2
 8007042:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f023 020c 	bic.w	r2, r3, #12
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	494d      	ldr	r1, [pc, #308]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007056:	4b4c      	ldr	r3, [pc, #304]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	f023 0202 	bic.w	r2, r3, #2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	4949      	ldr	r1, [pc, #292]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007064:	4313      	orrs	r3, r2
 8007066:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007068:	4b47      	ldr	r3, [pc, #284]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a46      	ldr	r2, [pc, #280]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800706e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007074:	4b44      	ldr	r3, [pc, #272]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	4a43      	ldr	r2, [pc, #268]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800707a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007080:	4b41      	ldr	r3, [pc, #260]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	4a40      	ldr	r2, [pc, #256]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007098:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3a      	ldr	r2, [pc, #232]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800709e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a4:	f7fb fe94 	bl	8002dd0 <HAL_GetTick>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ac:	f7fb fe90 	bl	8002dd0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e05f      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070be:	4b32      	ldr	r3, [pc, #200]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0f0      	beq.n	80070ac <HAL_RCC_OscConfig+0x670>
 80070ca:	e057      	b.n	800717c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070cc:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d8:	f7fb fe7a 	bl	8002dd0 <HAL_GetTick>
 80070dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e0:	f7fb fe76 	bl	8002dd0 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e045      	b.n	800717e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070f2:	4b25      	ldr	r3, [pc, #148]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x6a4>
 80070fe:	e03d      	b.n	800717c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007100:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007106:	4b20      	ldr	r3, [pc, #128]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b01      	cmp	r3, #1
 8007112:	d031      	beq.n	8007178 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0203 	and.w	r2, r3, #3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800711e:	429a      	cmp	r2, r3
 8007120:	d12a      	bne.n	8007178 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d122      	bne.n	8007178 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d11a      	bne.n	8007178 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007150:	429a      	cmp	r2, r3
 8007152:	d111      	bne.n	8007178 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007162:	429a      	cmp	r2, r3
 8007164:	d108      	bne.n	8007178 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	0e1b      	lsrs	r3, r3, #24
 800716a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400
 800718c:	fffffc0c 	.word	0xfffffc0c
 8007190:	ffff0007 	.word	0xffff0007

08007194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e19c      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071a8:	4b8a      	ldr	r3, [pc, #552]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d910      	bls.n	80071d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b6:	4b87      	ldr	r3, [pc, #540]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 020f 	bic.w	r2, r3, #15
 80071be:	4985      	ldr	r1, [pc, #532]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b83      	ldr	r3, [pc, #524]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e184      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	4b7b      	ldr	r3, [pc, #492]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d908      	bls.n	8007206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071f4:	4b78      	ldr	r3, [pc, #480]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	4975      	ldr	r1, [pc, #468]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007202:	4313      	orrs	r3, r2
 8007204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	4b70      	ldr	r3, [pc, #448]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800721e:	429a      	cmp	r2, r3
 8007220:	d908      	bls.n	8007234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007222:	4b6d      	ldr	r3, [pc, #436]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	496a      	ldr	r1, [pc, #424]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007230:	4313      	orrs	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d010      	beq.n	8007262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	4b64      	ldr	r3, [pc, #400]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800724c:	429a      	cmp	r2, r3
 800724e:	d908      	bls.n	8007262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007250:	4b61      	ldr	r3, [pc, #388]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	495e      	ldr	r1, [pc, #376]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 800725e:	4313      	orrs	r3, r2
 8007260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	4b59      	ldr	r3, [pc, #356]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727a:	429a      	cmp	r2, r3
 800727c:	d908      	bls.n	8007290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800727e:	4b56      	ldr	r3, [pc, #344]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	4953      	ldr	r1, [pc, #332]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 800728c:	4313      	orrs	r3, r2
 800728e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	4b4d      	ldr	r3, [pc, #308]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d908      	bls.n	80072be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ac:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f023 020f 	bic.w	r2, r3, #15
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4947      	ldr	r1, [pc, #284]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d055      	beq.n	8007376 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	4940      	ldr	r1, [pc, #256]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072e4:	4b3c      	ldr	r3, [pc, #240]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d121      	bne.n	8007334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e0f6      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d107      	bne.n	800730c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072fc:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0ea      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d107      	bne.n	8007324 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007314:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0de      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007324:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0d6      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007334:	4b28      	ldr	r3, [pc, #160]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f023 0207 	bic.w	r2, r3, #7
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4925      	ldr	r1, [pc, #148]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007342:	4313      	orrs	r3, r2
 8007344:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007346:	f7fb fd43 	bl	8002dd0 <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734c:	e00a      	b.n	8007364 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800734e:	f7fb fd3f 	bl	8002dd0 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f241 3288 	movw	r2, #5000	; 0x1388
 800735c:	4293      	cmp	r3, r2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e0be      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007364:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	429a      	cmp	r2, r3
 8007374:	d1eb      	bne.n	800734e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	429a      	cmp	r2, r3
 8007390:	d208      	bcs.n	80073a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007392:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f023 020f 	bic.w	r2, r3, #15
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	490e      	ldr	r1, [pc, #56]	; (80073d8 <HAL_RCC_ClockConfig+0x244>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d214      	bcs.n	80073dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 020f 	bic.w	r2, r3, #15
 80073ba:	4906      	ldr	r1, [pc, #24]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <HAL_RCC_ClockConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d005      	beq.n	80073dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e086      	b.n	80074e2 <HAL_RCC_ClockConfig+0x34e>
 80073d4:	52002000 	.word	0x52002000
 80073d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d010      	beq.n	800740a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	4b3f      	ldr	r3, [pc, #252]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d208      	bcs.n	800740a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073f8:	4b3c      	ldr	r3, [pc, #240]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	4939      	ldr	r1, [pc, #228]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007406:	4313      	orrs	r3, r2
 8007408:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	4b34      	ldr	r3, [pc, #208]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007422:	429a      	cmp	r2, r3
 8007424:	d208      	bcs.n	8007438 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007426:	4b31      	ldr	r3, [pc, #196]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	492e      	ldr	r1, [pc, #184]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007434:	4313      	orrs	r3, r2
 8007436:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	d010      	beq.n	8007466 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699a      	ldr	r2, [r3, #24]
 8007448:	4b28      	ldr	r3, [pc, #160]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007450:	429a      	cmp	r2, r3
 8007452:	d208      	bcs.n	8007466 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4922      	ldr	r1, [pc, #136]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007462:	4313      	orrs	r3, r2
 8007464:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d010      	beq.n	8007494 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800747e:	429a      	cmp	r2, r3
 8007480:	d208      	bcs.n	8007494 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007482:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	4917      	ldr	r1, [pc, #92]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 8007490:	4313      	orrs	r3, r2
 8007492:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007494:	f000 f844 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 8007498:	4602      	mov	r2, r0
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	4912      	ldr	r1, [pc, #72]	; (80074f0 <HAL_RCC_ClockConfig+0x35c>)
 80074a6:	5ccb      	ldrb	r3, [r1, r3]
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <HAL_RCC_ClockConfig+0x358>)
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <HAL_RCC_ClockConfig+0x35c>)
 80074bc:	5cd3      	ldrb	r3, [r2, r3]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	4a0a      	ldr	r2, [pc, #40]	; (80074f4 <HAL_RCC_ClockConfig+0x360>)
 80074ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <HAL_RCC_ClockConfig+0x364>)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80074d2:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <HAL_RCC_ClockConfig+0x368>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fb fc30 	bl	8002d3c <HAL_InitTick>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
 80074f0:	0800f424 	.word	0x0800f424
 80074f4:	24000004 	.word	0x24000004
 80074f8:	24000000 	.word	0x24000000
 80074fc:	24000008 	.word	0x24000008

08007500 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <HAL_RCC_EnableCSS+0x1c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a04      	ldr	r2, [pc, #16]	; (800751c <HAL_RCC_EnableCSS+0x1c>)
 800750a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750e:	6013      	str	r3, [r2, #0]
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400

08007520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007520:	b480      	push	{r7}
 8007522:	b089      	sub	sp, #36	; 0x24
 8007524:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007526:	4bb3      	ldr	r3, [pc, #716]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800752e:	2b18      	cmp	r3, #24
 8007530:	f200 8155 	bhi.w	80077de <HAL_RCC_GetSysClockFreq+0x2be>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	080075a1 	.word	0x080075a1
 8007540:	080077df 	.word	0x080077df
 8007544:	080077df 	.word	0x080077df
 8007548:	080077df 	.word	0x080077df
 800754c:	080077df 	.word	0x080077df
 8007550:	080077df 	.word	0x080077df
 8007554:	080077df 	.word	0x080077df
 8007558:	080077df 	.word	0x080077df
 800755c:	080075c7 	.word	0x080075c7
 8007560:	080077df 	.word	0x080077df
 8007564:	080077df 	.word	0x080077df
 8007568:	080077df 	.word	0x080077df
 800756c:	080077df 	.word	0x080077df
 8007570:	080077df 	.word	0x080077df
 8007574:	080077df 	.word	0x080077df
 8007578:	080077df 	.word	0x080077df
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080077df 	.word	0x080077df
 8007584:	080077df 	.word	0x080077df
 8007588:	080077df 	.word	0x080077df
 800758c:	080077df 	.word	0x080077df
 8007590:	080077df 	.word	0x080077df
 8007594:	080077df 	.word	0x080077df
 8007598:	080077df 	.word	0x080077df
 800759c:	080075d3 	.word	0x080075d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a0:	4b94      	ldr	r3, [pc, #592]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075ac:	4b91      	ldr	r3, [pc, #580]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	08db      	lsrs	r3, r3, #3
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	4a90      	ldr	r2, [pc, #576]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80075be:	e111      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075c0:	4b8d      	ldr	r3, [pc, #564]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075c2:	61bb      	str	r3, [r7, #24]
    break;
 80075c4:	e10e      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80075c6:	4b8d      	ldr	r3, [pc, #564]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075c8:	61bb      	str	r3, [r7, #24]
    break;
 80075ca:	e10b      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80075cc:	4b8c      	ldr	r3, [pc, #560]	; (8007800 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075ce:	61bb      	str	r3, [r7, #24]
    break;
 80075d0:	e108      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d2:	4b88      	ldr	r3, [pc, #544]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80075dc:	4b85      	ldr	r3, [pc, #532]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075e8:	4b82      	ldr	r3, [pc, #520]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80075f2:	4b80      	ldr	r3, [pc, #512]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80e1 	beq.w	80077d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f000 8083 	beq.w	8007724 <HAL_RCC_GetSysClockFreq+0x204>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b02      	cmp	r3, #2
 8007622:	f200 80a1 	bhi.w	8007768 <HAL_RCC_GetSysClockFreq+0x248>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x114>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d056      	beq.n	80076e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007632:	e099      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007634:	4b6f      	ldr	r3, [pc, #444]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02d      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007640:	4b6c      	ldr	r3, [pc, #432]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	08db      	lsrs	r3, r3, #3
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	4a6b      	ldr	r2, [pc, #428]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b62      	ldr	r3, [pc, #392]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a02 	vldr	s12, [r7, #8]
 800767e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800769a:	e087      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007808 <HAL_RCC_GetSysClockFreq+0x2e8>
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b51      	ldr	r3, [pc, #324]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076de:	e065      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800780c <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b40      	ldr	r3, [pc, #256]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a02 	vldr	s12, [r7, #8]
 8007706:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007722:	e043      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007810 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b2f      	ldr	r3, [pc, #188]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a02 	vldr	s12, [r7, #8]
 800774a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007766:	e021      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a26 	vldr	s13, [pc, #152]	; 800780c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a02 	vldr	s12, [r7, #8]
 800778e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b6:	3301      	adds	r3, #1
 80077b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d0:	ee17 3a90 	vmov	r3, s15
 80077d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80077d6:	e005      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
    break;
 80077dc:	e002      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077e0:	61bb      	str	r3, [r7, #24]
    break;
 80077e2:	bf00      	nop
  }

  return sysclockfreq;
 80077e4:	69bb      	ldr	r3, [r7, #24]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3724      	adds	r7, #36	; 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
 80077f8:	03d09000 	.word	0x03d09000
 80077fc:	003d0900 	.word	0x003d0900
 8007800:	017d7840 	.word	0x017d7840
 8007804:	46000000 	.word	0x46000000
 8007808:	4c742400 	.word	0x4c742400
 800780c:	4a742400 	.word	0x4a742400
 8007810:	4bbebc20 	.word	0x4bbebc20

08007814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800781a:	f7ff fe81 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 800781e:	4602      	mov	r2, r0
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <HAL_RCC_GetHCLKFreq+0x50>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	0a1b      	lsrs	r3, r3, #8
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	490f      	ldr	r1, [pc, #60]	; (8007868 <HAL_RCC_GetHCLKFreq+0x54>)
 800782c:	5ccb      	ldrb	r3, [r1, r3]
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	fa22 f303 	lsr.w	r3, r2, r3
 8007836:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <HAL_RCC_GetHCLKFreq+0x50>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	4a09      	ldr	r2, [pc, #36]	; (8007868 <HAL_RCC_GetHCLKFreq+0x54>)
 8007842:	5cd3      	ldrb	r3, [r2, r3]
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	fa22 f303 	lsr.w	r3, r2, r3
 800784e:	4a07      	ldr	r2, [pc, #28]	; (800786c <HAL_RCC_GetHCLKFreq+0x58>)
 8007850:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007852:	4a07      	ldr	r2, [pc, #28]	; (8007870 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <HAL_RCC_GetHCLKFreq+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	58024400 	.word	0x58024400
 8007868:	0800f424 	.word	0x0800f424
 800786c:	24000004 	.word	0x24000004
 8007870:	24000000 	.word	0x24000000

08007874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007878:	f7ff ffcc 	bl	8007814 <HAL_RCC_GetHCLKFreq>
 800787c:	4602      	mov	r2, r0
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	4904      	ldr	r1, [pc, #16]	; (800789c <HAL_RCC_GetPCLK1Freq+0x28>)
 800788a:	5ccb      	ldrb	r3, [r1, r3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	58024400 	.word	0x58024400
 800789c:	0800f424 	.word	0x0800f424

080078a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078a4:	f7ff ffb6 	bl	8007814 <HAL_RCC_GetHCLKFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	0a1b      	lsrs	r3, r3, #8
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	4904      	ldr	r1, [pc, #16]	; (80078c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078b6:	5ccb      	ldrb	r3, [r1, r3]
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	58024400 	.word	0x58024400
 80078c8:	0800f424 	.word	0x0800f424

080078cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80078d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078dc:	d105      	bne.n	80078ea <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80078de:	f000 f809 	bl	80078f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80078e2:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80078e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078e8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80078ea:	bf00      	nop
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	58024400 	.word	0x58024400

080078f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800790c:	2300      	movs	r3, #0
 800790e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007910:	2300      	movs	r3, #0
 8007912:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03f      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007928:	d02a      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800792a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800792e:	d824      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007934:	d018      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800793a:	d81e      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007944:	d007      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007946:	e018      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4bab      	ldr	r3, [pc, #684]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4aaa      	ldr	r2, [pc, #680]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007954:	e015      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3304      	adds	r3, #4
 800795a:	2102      	movs	r1, #2
 800795c:	4618      	mov	r0, r3
 800795e:	f001 feff 	bl	8009760 <RCCEx_PLL2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007966:	e00c      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3324      	adds	r3, #36	; 0x24
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f001 ffa8 	bl	80098c4 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
      break;
 800797e:	e000      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007988:	4b9b      	ldr	r3, [pc, #620]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800798a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007994:	4998      	ldr	r1, [pc, #608]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007996:	4313      	orrs	r3, r2
 8007998:	650b      	str	r3, [r1, #80]	; 0x50
 800799a:	e001      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d03d      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d826      	bhi.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	08007a09 	.word	0x08007a09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b89      	ldr	r3, [pc, #548]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a88      	ldr	r2, [pc, #544]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079dc:	e015      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 febb 	bl	8009760 <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079ee:	e00c      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 ff64 	bl	80098c4 <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
      break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a10:	4b79      	ldr	r3, [pc, #484]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f023 0207 	bic.w	r2, r3, #7
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	4976      	ldr	r1, [pc, #472]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	650b      	str	r3, [r1, #80]	; 0x50
 8007a22:	e001      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d051      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a3a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007a3e:	d036      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a40:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007a44:	d830      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a4a:	d032      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a50:	d82a      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007a52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a56:	d02e      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007a58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a5c:	d824      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a62:	d018      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a68:	d81e      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a72:	d007      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007a74:	e018      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a76:	4b60      	ldr	r3, [pc, #384]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4a5f      	ldr	r2, [pc, #380]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a82:	e019      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fe68 	bl	8009760 <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a94:	e010      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 ff11 	bl	80098c4 <RCCEx_PLL3_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aa6:	e007      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	e004      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007abe:	4b4e      	ldr	r3, [pc, #312]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007acc:	494a      	ldr	r1, [pc, #296]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ad2:	e001      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d051      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007aea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007aee:	d036      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007af0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007af4:	d830      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007afa:	d032      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b00:	d82a      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b06:	d02e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b0c:	d824      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b12:	d018      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b18:	d81e      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b22:	d007      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007b24:	e018      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b26:	4b34      	ldr	r3, [pc, #208]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b32:	e019      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 fe10 	bl	8009760 <RCCEx_PLL2_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b44:	e010      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3324      	adds	r3, #36	; 0x24
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 feb9 	bl	80098c4 <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b56:	e007      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5c:	e004      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b6e:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b7c:	491e      	ldr	r1, [pc, #120]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	658b      	str	r3, [r1, #88]	; 0x58
 8007b82:	e001      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d035      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d01c      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d817      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d00c      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d813      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d016      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d10f      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a10      	ldr	r2, [pc, #64]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007bbc:	e00e      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fdcb 	bl	8009760 <RCCEx_PLL2_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007bce:	e005      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd4:	e002      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10c      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bee:	4902      	ldr	r1, [pc, #8]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bf4:	e004      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d047      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c14:	d030      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c1a:	d82a      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c20:	d02c      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c26:	d824      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2c:	d018      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c32:	d81e      	bhi.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d007      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c3e:	e018      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c40:	4bac      	ldr	r3, [pc, #688]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	4aab      	ldr	r2, [pc, #684]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c4c:	e017      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3304      	adds	r3, #4
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fd83 	bl	8009760 <RCCEx_PLL2_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c5e:	e00e      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fe2c 	bl	80098c4 <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c70:	e005      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
      break;
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c84:	4b9b      	ldr	r3, [pc, #620]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	4998      	ldr	r1, [pc, #608]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	650b      	str	r3, [r1, #80]	; 0x50
 8007c96:	e001      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d049      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb0:	d02e      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb6:	d828      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cbc:	d02a      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cc2:	d822      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cc8:	d026      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cce:	d81c      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd4:	d010      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cda:	d816      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01d      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce4:	d111      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	2101      	movs	r1, #1
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 fd37 	bl	8009760 <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007cf6:	e012      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fde0 	bl	80098c4 <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d08:	e009      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0e:	e006      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007d10:	bf00      	nop
 8007d12:	e004      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007d14:	bf00      	nop
 8007d16:	e002      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d24:	4b73      	ldr	r3, [pc, #460]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	4970      	ldr	r1, [pc, #448]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	650b      	str	r3, [r1, #80]	; 0x50
 8007d36:	e001      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d04b      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d52:	d02e      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d58:	d828      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5e:	d02a      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d64:	d822      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d6a:	d026      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007d6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d70:	d81c      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d76:	d010      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7c:	d816      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01d      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d86:	d111      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 fce6 	bl	8009760 <RCCEx_PLL2_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d98:	e012      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3324      	adds	r3, #36	; 0x24
 8007d9e:	2101      	movs	r1, #1
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fd8f 	bl	80098c4 <RCCEx_PLL3_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007daa:	e009      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
      break;
 8007db0:	e006      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007db2:	bf00      	nop
 8007db4:	e004      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007db6:	bf00      	nop
 8007db8:	e002      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007dc6:	4b4b      	ldr	r3, [pc, #300]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007dd4:	4947      	ldr	r1, [pc, #284]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8007dda:	e001      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02f      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df4:	d00e      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfa:	d814      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d015      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e04:	d10f      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e06:	4b3b      	ldr	r3, [pc, #236]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	4a3a      	ldr	r2, [pc, #232]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e12:	e00c      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	2101      	movs	r1, #1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fca0 	bl	8009760 <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e24:	e003      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e34:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e40:	492c      	ldr	r1, [pc, #176]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	650b      	str	r3, [r1, #80]	; 0x50
 8007e46:	e001      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d032      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d81b      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e9f 	.word	0x08007e9f
 8007e6c:	08007e79 	.word	0x08007e79
 8007e70:	08007e87 	.word	0x08007e87
 8007e74:	08007e9f 	.word	0x08007e9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e84:	e00c      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 fc67 	bl	8009760 <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e96:	e003      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9c:	e000      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	f023 0203 	bic.w	r2, r3, #3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	4910      	ldr	r1, [pc, #64]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007eb8:	e001      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 808a 	beq.w	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ed8:	f7fa ff7a 	bl	8002dd0 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ede:	e00d      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ee0:	f7fa ff76 	bl	8002dd0 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	; 0x64
 8007eec:	d906      	bls.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ef2:	e009      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007efc:	4bb9      	ldr	r3, [pc, #740]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0eb      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d166      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f0e:	4bb6      	ldr	r3, [pc, #728]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f18:	4053      	eors	r3, r2
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d013      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f22:	4bb1      	ldr	r3, [pc, #708]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f2c:	4bae      	ldr	r3, [pc, #696]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	4aad      	ldr	r2, [pc, #692]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f38:	4bab      	ldr	r3, [pc, #684]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3c:	4aaa      	ldr	r2, [pc, #680]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f44:	4aa8      	ldr	r2, [pc, #672]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f54:	d115      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f56:	f7fa ff3b 	bl	8002dd0 <HAL_GetTick>
 8007f5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f5c:	e00b      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f5e:	f7fa ff37 	bl	8002dd0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d902      	bls.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	75fb      	strb	r3, [r7, #23]
            break;
 8007f74:	e005      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f76:	4b9c      	ldr	r3, [pc, #624]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0ed      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d126      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f96:	d10d      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007f98:	4b93      	ldr	r3, [pc, #588]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fa6:	0919      	lsrs	r1, r3, #4
 8007fa8:	4b90      	ldr	r3, [pc, #576]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007faa:	400b      	ands	r3, r1
 8007fac:	498e      	ldr	r1, [pc, #568]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	610b      	str	r3, [r1, #16]
 8007fb2:	e005      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007fb4:	4b8c      	ldr	r3, [pc, #560]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	4a8b      	ldr	r2, [pc, #556]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007fbe:	6113      	str	r3, [r2, #16]
 8007fc0:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fce:	4986      	ldr	r1, [pc, #536]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	670b      	str	r3, [r1, #112]	; 0x70
 8007fd4:	e004      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	75bb      	strb	r3, [r7, #22]
 8007fda:	e001      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d07e      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff0:	2b28      	cmp	r3, #40	; 0x28
 8007ff2:	d867      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	080080cb 	.word	0x080080cb
 8008000:	080080c5 	.word	0x080080c5
 8008004:	080080c5 	.word	0x080080c5
 8008008:	080080c5 	.word	0x080080c5
 800800c:	080080c5 	.word	0x080080c5
 8008010:	080080c5 	.word	0x080080c5
 8008014:	080080c5 	.word	0x080080c5
 8008018:	080080c5 	.word	0x080080c5
 800801c:	080080a1 	.word	0x080080a1
 8008020:	080080c5 	.word	0x080080c5
 8008024:	080080c5 	.word	0x080080c5
 8008028:	080080c5 	.word	0x080080c5
 800802c:	080080c5 	.word	0x080080c5
 8008030:	080080c5 	.word	0x080080c5
 8008034:	080080c5 	.word	0x080080c5
 8008038:	080080c5 	.word	0x080080c5
 800803c:	080080b3 	.word	0x080080b3
 8008040:	080080c5 	.word	0x080080c5
 8008044:	080080c5 	.word	0x080080c5
 8008048:	080080c5 	.word	0x080080c5
 800804c:	080080c5 	.word	0x080080c5
 8008050:	080080c5 	.word	0x080080c5
 8008054:	080080c5 	.word	0x080080c5
 8008058:	080080c5 	.word	0x080080c5
 800805c:	080080cb 	.word	0x080080cb
 8008060:	080080c5 	.word	0x080080c5
 8008064:	080080c5 	.word	0x080080c5
 8008068:	080080c5 	.word	0x080080c5
 800806c:	080080c5 	.word	0x080080c5
 8008070:	080080c5 	.word	0x080080c5
 8008074:	080080c5 	.word	0x080080c5
 8008078:	080080c5 	.word	0x080080c5
 800807c:	080080cb 	.word	0x080080cb
 8008080:	080080c5 	.word	0x080080c5
 8008084:	080080c5 	.word	0x080080c5
 8008088:	080080c5 	.word	0x080080c5
 800808c:	080080c5 	.word	0x080080c5
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080c5 	.word	0x080080c5
 8008098:	080080c5 	.word	0x080080c5
 800809c:	080080cb 	.word	0x080080cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	2101      	movs	r1, #1
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 fb5a 	bl	8009760 <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80080b0:	e00c      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3324      	adds	r3, #36	; 0x24
 80080b6:	2101      	movs	r1, #1
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fc03 	bl	80098c4 <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80080c2:	e003      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
      break;
 80080c8:	e000      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80080ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80080d2:	4b45      	ldr	r3, [pc, #276]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080de:	4942      	ldr	r1, [pc, #264]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	654b      	str	r3, [r1, #84]	; 0x54
 80080e4:	e001      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d037      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d820      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008147 	.word	0x08008147
 8008108:	0800811d 	.word	0x0800811d
 800810c:	0800812f 	.word	0x0800812f
 8008110:	08008147 	.word	0x08008147
 8008114:	08008147 	.word	0x08008147
 8008118:	08008147 	.word	0x08008147
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	2101      	movs	r1, #1
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fb1c 	bl	8009760 <RCCEx_PLL2_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800812c:	e00c      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3324      	adds	r3, #36	; 0x24
 8008132:	2101      	movs	r1, #1
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fbc5 	bl	80098c4 <RCCEx_PLL3_Config>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800813e:	e003      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]
      break;
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800814e:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f023 0207 	bic.w	r2, r3, #7
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	4923      	ldr	r1, [pc, #140]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800815c:	4313      	orrs	r3, r2
 800815e:	654b      	str	r3, [r1, #84]	; 0x54
 8008160:	e001      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d040      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008178:	2b05      	cmp	r3, #5
 800817a:	d821      	bhi.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	080081c7 	.word	0x080081c7
 8008188:	0800819d 	.word	0x0800819d
 800818c:	080081af 	.word	0x080081af
 8008190:	080081c7 	.word	0x080081c7
 8008194:	080081c7 	.word	0x080081c7
 8008198:	080081c7 	.word	0x080081c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	2101      	movs	r1, #1
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 fadc 	bl	8009760 <RCCEx_PLL2_Config>
 80081a8:	4603      	mov	r3, r0
 80081aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80081ac:	e00c      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3324      	adds	r3, #36	; 0x24
 80081b2:	2101      	movs	r1, #1
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fb85 	bl	80098c4 <RCCEx_PLL3_Config>
 80081ba:	4603      	mov	r3, r0
 80081bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80081c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d110      	bne.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	f023 0207 	bic.w	r2, r3, #7
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081dc:	4902      	ldr	r1, [pc, #8]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	658b      	str	r3, [r1, #88]	; 0x58
 80081e2:	e007      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80081e4:	58024800 	.word	0x58024800
 80081e8:	58024400 	.word	0x58024400
 80081ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d04b      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800820a:	d02e      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800820c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008210:	d828      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008216:	d02a      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d822      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800821e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008222:	d026      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008228:	d81c      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800822a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800822e:	d010      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008234:	d816      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01d      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800823a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800823e:	d111      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f001 fa8a 	bl	8009760 <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008250:	e012      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	2102      	movs	r1, #2
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fb33 	bl	80098c4 <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008262:	e009      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
      break;
 8008268:	e006      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800826a:	bf00      	nop
 800826c:	e004      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800827e:	4bb2      	ldr	r3, [pc, #712]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828c:	49ae      	ldr	r1, [pc, #696]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800828e:	4313      	orrs	r3, r2
 8008290:	654b      	str	r3, [r1, #84]	; 0x54
 8008292:	e001      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d04b      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80082ae:	d02e      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80082b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80082b4:	d828      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ba:	d02a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c0:	d822      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80082c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082c6:	d026      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80082c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082cc:	d81c      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80082ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d2:	d010      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80082d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d8:	d816      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01d      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80082de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e2:	d111      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3304      	adds	r3, #4
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fa38 	bl	8009760 <RCCEx_PLL2_Config>
 80082f0:	4603      	mov	r3, r0
 80082f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082f4:	e012      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3324      	adds	r3, #36	; 0x24
 80082fa:	2102      	movs	r1, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fae1 	bl	80098c4 <RCCEx_PLL3_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008306:	e009      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
      break;
 800830c:	e006      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800830e:	bf00      	nop
 8008310:	e004      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008312:	bf00      	nop
 8008314:	e002      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008316:	bf00      	nop
 8008318:	e000      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800831a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008322:	4b89      	ldr	r3, [pc, #548]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008330:	4985      	ldr	r1, [pc, #532]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008332:	4313      	orrs	r3, r2
 8008334:	658b      	str	r3, [r1, #88]	; 0x58
 8008336:	e001      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008344:	2b00      	cmp	r3, #0
 8008346:	d04b      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800834e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008352:	d02e      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008354:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008358:	d828      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d02a      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008364:	d822      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008366:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800836a:	d026      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800836c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008370:	d81c      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008376:	d010      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800837c:	d816      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01d      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	d111      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	2100      	movs	r1, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f9e6 	bl	8009760 <RCCEx_PLL2_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008398:	e012      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	2102      	movs	r1, #2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fa8f 	bl	80098c4 <RCCEx_PLL3_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80083aa:	e009      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	e006      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80083b2:	bf00      	nop
 80083b4:	e004      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80083be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083c6:	4b60      	ldr	r3, [pc, #384]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d4:	495c      	ldr	r1, [pc, #368]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	658b      	str	r3, [r1, #88]	; 0x58
 80083da:	e001      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d018      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3324      	adds	r3, #36	; 0x24
 80083fa:	2102      	movs	r1, #2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fa61 	bl	80098c4 <RCCEx_PLL3_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800840c:	4b4e      	ldr	r3, [pc, #312]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008418:	494b      	ldr	r1, [pc, #300]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800841a:	4313      	orrs	r3, r2
 800841c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01a      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008434:	d10a      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3324      	adds	r3, #36	; 0x24
 800843a:	2102      	movs	r1, #2
 800843c:	4618      	mov	r0, r3
 800843e:	f001 fa41 	bl	80098c4 <RCCEx_PLL3_Config>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800844c:	4b3e      	ldr	r3, [pc, #248]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800844e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845a:	493b      	ldr	r1, [pc, #236]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800845c:	4313      	orrs	r3, r2
 800845e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d034      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008476:	d01d      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800847c:	d817      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008486:	d009      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008488:	e011      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f001 f965 	bl	8009760 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800849a:	e00c      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fa0e 	bl	80098c4 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80084ac:	e003      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
      break;
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80084b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084bc:	4b22      	ldr	r3, [pc, #136]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084ca:	491f      	ldr	r1, [pc, #124]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	658b      	str	r3, [r1, #88]	; 0x58
 80084d0:	e001      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d036      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ec:	d01c      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80084ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084f2:	d816      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80084f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f8:	d003      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80084fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084fe:	d007      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008500:	e00f      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	4a10      	ldr	r2, [pc, #64]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800850e:	e00c      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3324      	adds	r3, #36	; 0x24
 8008514:	2101      	movs	r1, #1
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f9d4 	bl	80098c4 <RCCEx_PLL3_Config>
 800851c:	4603      	mov	r3, r0
 800851e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008520:	e003      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	75fb      	strb	r3, [r7, #23]
      break;
 8008526:	e000      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10d      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853e:	4902      	ldr	r1, [pc, #8]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008540:	4313      	orrs	r3, r2
 8008542:	654b      	str	r3, [r1, #84]	; 0x54
 8008544:	e004      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d029      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008568:	d007      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800856a:	e00f      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800856c:	4b61      	ldr	r3, [pc, #388]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a60      	ldr	r2, [pc, #384]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008578:	e00b      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3304      	adds	r3, #4
 800857e:	2102      	movs	r1, #2
 8008580:	4618      	mov	r0, r3
 8008582:	f001 f8ed 	bl	8009760 <RCCEx_PLL2_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800858a:	e002      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
      break;
 8008590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d109      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008598:	4b56      	ldr	r3, [pc, #344]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800859a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a4:	4953      	ldr	r1, [pc, #332]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085aa:	e001      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	2102      	movs	r1, #2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 f97e 	bl	80098c4 <RCCEx_PLL3_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d030      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e6:	d017      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80085e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ec:	d811      	bhi.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80085ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f2:	d013      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f8:	d80b      	bhi.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d010      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008602:	d106      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008604:	4b3b      	ldr	r3, [pc, #236]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a3a      	ldr	r2, [pc, #232]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800860a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008610:	e007      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	75fb      	strb	r3, [r7, #23]
      break;
 8008616:	e004      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008618:	bf00      	nop
 800861a:	e002      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800861c:	bf00      	nop
 800861e:	e000      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008628:	4b32      	ldr	r3, [pc, #200]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800862a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008634:	492f      	ldr	r1, [pc, #188]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008636:	4313      	orrs	r3, r2
 8008638:	654b      	str	r3, [r1, #84]	; 0x54
 800863a:	e001      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800864c:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800864e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008658:	4926      	ldr	r1, [pc, #152]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800865a:	4313      	orrs	r3, r2
 800865c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d008      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800866a:	4b22      	ldr	r3, [pc, #136]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008676:	491f      	ldr	r1, [pc, #124]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008678:	4313      	orrs	r3, r2
 800867a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	4a19      	ldr	r2, [pc, #100]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800868e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008692:	6113      	str	r3, [r2, #16]
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800869e:	4915      	ldr	r1, [pc, #84]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da08      	bge.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b8:	490e      	ldr	r1, [pc, #56]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d8:	4906      	ldr	r1, [pc, #24]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80086de:	7dbb      	ldrb	r3, [r7, #22]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e000      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	58024400 	.word	0x58024400

080086f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b090      	sub	sp, #64	; 0x40
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008706:	f040 8089 	bne.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800870a:	4b95      	ldr	r3, [pc, #596]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800870c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2b04      	cmp	r3, #4
 8008718:	d87d      	bhi.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008735 	.word	0x08008735
 8008724:	08008759 	.word	0x08008759
 8008728:	0800877d 	.word	0x0800877d
 800872c:	08008811 	.word	0x08008811
 8008730:	080087a1 	.word	0x080087a1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008734:	4b8a      	ldr	r3, [pc, #552]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008740:	d107      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 feb8 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008750:	e3ed      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008756:	e3ea      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008758:	4b81      	ldr	r3, [pc, #516]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008766:	f107 0318 	add.w	r3, r7, #24
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fbfe 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008774:	e3db      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800877a:	e3d8      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800877c:	4b78      	ldr	r3, [pc, #480]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008788:	d107      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fd40 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008798:	e3c9      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800879e:	e3c6      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087a0:	4b6f      	ldr	r3, [pc, #444]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087aa:	4b6d      	ldr	r3, [pc, #436]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087bc:	4b68      	ldr	r3, [pc, #416]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a67      	ldr	r2, [pc, #412]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ce:	e01e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087d0:	4b63      	ldr	r3, [pc, #396]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087dc:	d106      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80087de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e4:	d102      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087e6:	4b60      	ldr	r3, [pc, #384]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ea:	e010      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ec:	4b5c      	ldr	r3, [pc, #368]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f8:	d106      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008800:	d102      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008802:	4b5a      	ldr	r3, [pc, #360]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008806:	e002      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800880c:	e38f      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800880e:	e38e      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008810:	4b57      	ldr	r3, [pc, #348]	; (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008814:	e38b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800881a:	e388      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008822:	f040 80a7 	bne.w	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008826:	4b4e      	ldr	r3, [pc, #312]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800882e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008836:	d054      	beq.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800883e:	f200 808b 	bhi.w	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008848:	f000 8083 	beq.w	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008852:	f200 8081 	bhi.w	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800885c:	d02f      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008864:	d878      	bhi.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008872:	d012      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008874:	e070      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008876:	4b3a      	ldr	r3, [pc, #232]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008882:	d107      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fe17 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008892:	e34c      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008898:	e349      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800889a:	4b31      	ldr	r3, [pc, #196]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a6:	d107      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fb5d 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088b6:	e33a      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088bc:	e337      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088be:	4b28      	ldr	r3, [pc, #160]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ca:	d107      	bne.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088cc:	f107 030c 	add.w	r3, r7, #12
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fc9f 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088da:	e328      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e0:	e325      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088e2:	4b1f      	ldr	r3, [pc, #124]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088ec:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d10c      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d109      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088fe:	4b18      	ldr	r3, [pc, #96]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	08db      	lsrs	r3, r3, #3
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	4a16      	ldr	r2, [pc, #88]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800890a:	fa22 f303 	lsr.w	r3, r2, r3
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008910:	e01e      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	d106      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008926:	d102      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008928:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800892c:	e010      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800892e:	4b0c      	ldr	r3, [pc, #48]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893a:	d106      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800894e:	e2ee      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008950:	e2ed      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008956:	e2ea      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800895c:	e2e7      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800895e:	bf00      	nop
 8008960:	58024400 	.word	0x58024400
 8008964:	03d09000 	.word	0x03d09000
 8008968:	003d0900 	.word	0x003d0900
 800896c:	017d7840 	.word	0x017d7840
 8008970:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897a:	f040 809c 	bne.w	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800897e:	4b9e      	ldr	r3, [pc, #632]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008982:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008986:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800898e:	d054      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008996:	f200 808b 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089a0:	f000 8083 	beq.w	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089aa:	f200 8081 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089b4:	d02f      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089bc:	d878      	bhi.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089ca:	d012      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80089cc:	e070      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089ce:	4b8a      	ldr	r3, [pc, #552]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089da:	d107      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fd6b 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ea:	e2a0      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f0:	e29d      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f2:	4b81      	ldr	r3, [pc, #516]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fe:	d107      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a00:	f107 0318 	add.w	r3, r7, #24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fab1 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008a0e:	e28e      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a14:	e28b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a16:	4b78      	ldr	r3, [pc, #480]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a22:	d107      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fbf3 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a32:	e27c      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a38:	e279      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a3a:	4b6f      	ldr	r3, [pc, #444]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a44:	4b6c      	ldr	r3, [pc, #432]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d10c      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a56:	4b68      	ldr	r3, [pc, #416]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	08db      	lsrs	r3, r3, #3
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	4a66      	ldr	r2, [pc, #408]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a68:	e01e      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a6a:	4b63      	ldr	r3, [pc, #396]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a76:	d106      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a7e:	d102      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a80:	4b5f      	ldr	r3, [pc, #380]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a84:	e010      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a86:	4b5c      	ldr	r3, [pc, #368]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a92:	d106      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a9c:	4b59      	ldr	r3, [pc, #356]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa0:	e002      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008aa6:	e242      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008aa8:	e241      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008aaa:	4b57      	ldr	r3, [pc, #348]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aae:	e23e      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab4:	e23b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008abc:	f040 80a6 	bne.w	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008ac0:	4b4d      	ldr	r3, [pc, #308]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad0:	d054      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad8:	f200 808b 	bhi.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ae2:	f000 8083 	beq.w	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aec:	f200 8081 	bhi.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af6:	d02f      	beq.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008afe:	d878      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0c:	d012      	beq.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008b0e:	e070      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b10:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b1c:	d107      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fcca 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b2c:	e1ff      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b32:	e1fc      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b34:	4b30      	ldr	r3, [pc, #192]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b40:	d107      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b42:	f107 0318 	add.w	r3, r7, #24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fa10 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b50:	e1ed      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b56:	e1ea      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b58:	4b27      	ldr	r3, [pc, #156]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b64:	d107      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b66:	f107 030c 	add.w	r3, r7, #12
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fb52 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b74:	e1db      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7a:	e1d8      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b7c:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b86:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d10c      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	e01e      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bac:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc6:	e010      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bd4:	d106      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bdc:	d102      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be2:	e002      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008be8:	e1a1      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008bea:	e1a0      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf0:	e19d      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf6:	e19a      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	03d09000 	.word	0x03d09000
 8008c00:	003d0900 	.word	0x003d0900
 8008c04:	017d7840 	.word	0x017d7840
 8008c08:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c12:	d173      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008c14:	4b9a      	ldr	r3, [pc, #616]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c24:	d02f      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c2c:	d863      	bhi.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3a:	d012      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008c3c:	e05b      	b.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c3e:	4b90      	ldr	r3, [pc, #576]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c4a:	d107      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c4c:	f107 0318 	add.w	r3, r7, #24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f98b 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c5a:	e168      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c60:	e165      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c62:	4b87      	ldr	r3, [pc, #540]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 facd 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c7e:	e156      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c84:	e153      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c86:	4b7e      	ldr	r3, [pc, #504]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c8e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c90:	4b7b      	ldr	r3, [pc, #492]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d10c      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ca2:	4b77      	ldr	r3, [pc, #476]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	08db      	lsrs	r3, r3, #3
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	4a75      	ldr	r2, [pc, #468]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	e01e      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cb6:	4b72      	ldr	r3, [pc, #456]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc2:	d106      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cca:	d102      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ccc:	4b6e      	ldr	r3, [pc, #440]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd0:	e010      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cd2:	4b6b      	ldr	r3, [pc, #428]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cde:	d106      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ce6:	d102      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ce8:	4b68      	ldr	r3, [pc, #416]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cec:	e002      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008cf2:	e11c      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cf4:	e11b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cfa:	e118      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d02:	d133      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008d04:	4b5e      	ldr	r3, [pc, #376]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d012      	beq.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008d1c:	e023      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d1e:	4b58      	ldr	r3, [pc, #352]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fbc3 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d3a:	e0f8      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d40:	e0f5      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d42:	4b4f      	ldr	r3, [pc, #316]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d50:	f107 0318 	add.w	r3, r7, #24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f909 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d5e:	e0e6      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d64:	e0e3      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6a:	e0e0      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d72:	f040 808d 	bne.w	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008d76:	4b42      	ldr	r3, [pc, #264]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d86:	d06b      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8e:	d874      	bhi.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d96:	d056      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9e:	d86c      	bhi.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008da6:	d03b      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dae:	d864      	bhi.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db6:	d021      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbe:	d85c      	bhi.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dcc:	d004      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008dce:	e054      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008dd0:	f000 f8b6 	bl	8008f40 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008dd6:	e0aa      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dd8:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de4:	d107      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de6:	f107 0318 	add.w	r3, r7, #24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f8be 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008df4:	e09b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfa:	e098      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dfc:	4b20      	ldr	r3, [pc, #128]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e08:	d107      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0a:	f107 030c 	add.w	r3, r7, #12
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fa00 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e18:	e089      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e086      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e20:	4b17      	ldr	r3, [pc, #92]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d109      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e2c:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	08db      	lsrs	r3, r3, #3
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e3e:	e076      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e44:	e073      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e52:	d102      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e58:	e069      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5e:	e066      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e6c:	d102      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e72:	e05c      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e78:	e059      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7e:	e056      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008e80:	58024400 	.word	0x58024400
 8008e84:	03d09000 	.word	0x03d09000
 8008e88:	003d0900 	.word	0x003d0900
 8008e8c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e96:	d148      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008e98:	4b27      	ldr	r3, [pc, #156]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea8:	d02a      	beq.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eb0:	d838      	bhi.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ebe:	d00d      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008ec0:	e030      	b.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ece:	d102      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ed4:	e02b      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eda:	e028      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008edc:	4b16      	ldr	r3, [pc, #88]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee8:	d107      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fae4 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ef8:	e019      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efe:	e016      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f0c:	d107      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f0e:	f107 0318 	add.w	r3, r7, #24
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f82a 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f1c:	e007      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f22:	e004      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f28:	e001      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3740      	adds	r7, #64	; 0x40
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	017d7840 	.word	0x017d7840

08008f40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f44:	f7fe fc66 	bl	8007814 <HAL_RCC_GetHCLKFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	091b      	lsrs	r3, r3, #4
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	4904      	ldr	r1, [pc, #16]	; (8008f68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	f003 031f 	and.w	r3, r3, #31
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	58024400 	.word	0x58024400
 8008f68:	0800f424 	.word	0x0800f424

08008f6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b089      	sub	sp, #36	; 0x24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f74:	4ba1      	ldr	r3, [pc, #644]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f7e:	4b9f      	ldr	r3, [pc, #636]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	0b1b      	lsrs	r3, r3, #12
 8008f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f8a:	4b9c      	ldr	r3, [pc, #624]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f96:	4b99      	ldr	r3, [pc, #612]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8111 	beq.w	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	f000 8083 	beq.w	80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	f200 80a1 	bhi.w	800910c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d056      	beq.n	8009084 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008fd6:	e099      	b.n	800910c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd8:	4b88      	ldr	r3, [pc, #544]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02d      	beq.n	8009040 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fe4:	4b85      	ldr	r3, [pc, #532]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	4a84      	ldr	r2, [pc, #528]	; (8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900e:	4b7b      	ldr	r3, [pc, #492]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009022:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800903e:	e087      	b.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b6a      	ldr	r3, [pc, #424]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009062:	ed97 6a03 	vldr	s12, [r7, #12]
 8009066:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009082:	e065      	b.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800920c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b59      	ldr	r3, [pc, #356]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090c6:	e043      	b.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b48      	ldr	r3, [pc, #288]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800910a:	e021      	b.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800920c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b37      	ldr	r3, [pc, #220]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009132:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800914e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009150:	4b2a      	ldr	r3, [pc, #168]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	0a5b      	lsrs	r3, r3, #9
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916a:	edd7 6a07 	vldr	s13, [r7, #28]
 800916e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009176:	ee17 2a90 	vmov	r2, s15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800917e:	4b1f      	ldr	r3, [pc, #124]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	0c1b      	lsrs	r3, r3, #16
 8009184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009198:	edd7 6a07 	vldr	s13, [r7, #28]
 800919c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a4:	ee17 2a90 	vmov	r2, s15
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	0e1b      	lsrs	r3, r3, #24
 80091b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d2:	ee17 2a90 	vmov	r2, s15
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80091da:	e008      	b.n	80091ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	609a      	str	r2, [r3, #8]
}
 80091ee:	bf00      	nop
 80091f0:	3724      	adds	r7, #36	; 0x24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	58024400 	.word	0x58024400
 8009200:	03d09000 	.word	0x03d09000
 8009204:	46000000 	.word	0x46000000
 8009208:	4c742400 	.word	0x4c742400
 800920c:	4a742400 	.word	0x4a742400
 8009210:	4bbebc20 	.word	0x4bbebc20

08009214 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009214:	b480      	push	{r7}
 8009216:	b089      	sub	sp, #36	; 0x24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800921c:	4ba1      	ldr	r3, [pc, #644]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009226:	4b9f      	ldr	r3, [pc, #636]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	0d1b      	lsrs	r3, r3, #20
 800922c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009230:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009232:	4b9c      	ldr	r3, [pc, #624]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800923e:	4b99      	ldr	r3, [pc, #612]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009242:	08db      	lsrs	r3, r3, #3
 8009244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	fb02 f303 	mul.w	r3, r2, r3
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8111 	beq.w	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b02      	cmp	r3, #2
 8009266:	f000 8083 	beq.w	8009370 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f200 80a1 	bhi.w	80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d056      	beq.n	800932c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800927e:	e099      	b.n	80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009280:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d02d      	beq.n	80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800928c:	4b85      	ldr	r3, [pc, #532]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	08db      	lsrs	r3, r3, #3
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	4a84      	ldr	r2, [pc, #528]	; (80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
 800929c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b6:	4b7b      	ldr	r3, [pc, #492]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092e6:	e087      	b.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b6a      	ldr	r3, [pc, #424]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a03 	vldr	s12, [r7, #12]
 800930e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800932a:	e065      	b.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b59      	ldr	r3, [pc, #356]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009352:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936e:	e043      	b.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b48      	ldr	r3, [pc, #288]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a03 	vldr	s12, [r7, #12]
 8009396:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b2:	e021      	b.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fc:	0a5b      	lsrs	r3, r3, #9
 80093fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009412:	edd7 6a07 	vldr	s13, [r7, #28]
 8009416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941e:	ee17 2a90 	vmov	r2, s15
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009426:	4b1f      	ldr	r3, [pc, #124]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800943c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009440:	edd7 6a07 	vldr	s13, [r7, #28]
 8009444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944c:	ee17 2a90 	vmov	r2, s15
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009454:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	0e1b      	lsrs	r3, r3, #24
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947a:	ee17 2a90 	vmov	r2, s15
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009482:	e008      	b.n	8009496 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	609a      	str	r2, [r3, #8]
}
 8009496:	bf00      	nop
 8009498:	3724      	adds	r7, #36	; 0x24
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	58024400 	.word	0x58024400
 80094a8:	03d09000 	.word	0x03d09000
 80094ac:	46000000 	.word	0x46000000
 80094b0:	4c742400 	.word	0x4c742400
 80094b4:	4a742400 	.word	0x4a742400
 80094b8:	4bbebc20 	.word	0x4bbebc20

080094bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80094bc:	b480      	push	{r7}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c4:	4ba0      	ldr	r3, [pc, #640]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80094ce:	4b9e      	ldr	r3, [pc, #632]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	091b      	lsrs	r3, r3, #4
 80094d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80094da:	4b9b      	ldr	r3, [pc, #620]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80094e4:	4b98      	ldr	r3, [pc, #608]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	08db      	lsrs	r3, r3, #3
 80094ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	fb02 f303 	mul.w	r3, r2, r3
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8111 	beq.w	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	2b02      	cmp	r3, #2
 800950c:	f000 8083 	beq.w	8009616 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	2b02      	cmp	r3, #2
 8009514:	f200 80a1 	bhi.w	800965a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d056      	beq.n	80095d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009524:	e099      	b.n	800965a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009526:	4b88      	ldr	r3, [pc, #544]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	d02d      	beq.n	800958e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009532:	4b85      	ldr	r3, [pc, #532]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	08db      	lsrs	r3, r3, #3
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	4a83      	ldr	r2, [pc, #524]	; (800974c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800953e:	fa22 f303 	lsr.w	r3, r2, r3
 8009542:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	ee07 3a90 	vmov	s15, r3
 8009554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955c:	4b7a      	ldr	r3, [pc, #488]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009570:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009588:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800958c:	e087      	b.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009598:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009754 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800959c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a0:	4b69      	ldr	r3, [pc, #420]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095d0:	e065      	b.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009758 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80095e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e4:	4b58      	ldr	r3, [pc, #352]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009614:	e043      	b.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800975c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009628:	4b47      	ldr	r3, [pc, #284]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009638:	ed97 6a03 	vldr	s12, [r7, #12]
 800963c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800964c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009658:	e021      	b.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009664:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009754 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966c:	4b36      	ldr	r3, [pc, #216]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009680:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800969c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800969e:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a2:	0a5b      	lsrs	r3, r3, #9
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c4:	ee17 2a90 	vmov	r2, s15
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80096cc:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f2:	ee17 2a90 	vmov	r2, s15
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	0e1b      	lsrs	r3, r3, #24
 8009700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009704:	ee07 3a90 	vmov	s15, r3
 8009708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009714:	edd7 6a07 	vldr	s13, [r7, #28]
 8009718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800971c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009720:	ee17 2a90 	vmov	r2, s15
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009728:	e008      	b.n	800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	609a      	str	r2, [r3, #8]
}
 800973c:	bf00      	nop
 800973e:	3724      	adds	r7, #36	; 0x24
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	58024400 	.word	0x58024400
 800974c:	03d09000 	.word	0x03d09000
 8009750:	46000000 	.word	0x46000000
 8009754:	4c742400 	.word	0x4c742400
 8009758:	4a742400 	.word	0x4a742400
 800975c:	4bbebc20 	.word	0x4bbebc20

08009760 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800976e:	4b53      	ldr	r3, [pc, #332]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b03      	cmp	r3, #3
 8009778:	d101      	bne.n	800977e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e099      	b.n	80098b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800977e:	4b4f      	ldr	r3, [pc, #316]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a4e      	ldr	r2, [pc, #312]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009784:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800978a:	f7f9 fb21 	bl	8002dd0 <HAL_GetTick>
 800978e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009790:	e008      	b.n	80097a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009792:	f7f9 fb1d 	bl	8002dd0 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	d901      	bls.n	80097a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e086      	b.n	80098b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097a4:	4b45      	ldr	r3, [pc, #276]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1f0      	bne.n	8009792 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097b0:	4b42      	ldr	r3, [pc, #264]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	031b      	lsls	r3, r3, #12
 80097be:	493f      	ldr	r1, [pc, #252]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	628b      	str	r3, [r1, #40]	; 0x28
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	025b      	lsls	r3, r3, #9
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	3b01      	subs	r3, #1
 80097e0:	041b      	lsls	r3, r3, #16
 80097e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097e6:	431a      	orrs	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	061b      	lsls	r3, r3, #24
 80097f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097f4:	4931      	ldr	r1, [pc, #196]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097fa:	4b30      	ldr	r3, [pc, #192]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	492d      	ldr	r1, [pc, #180]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009808:	4313      	orrs	r3, r2
 800980a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800980c:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	f023 0220 	bic.w	r2, r3, #32
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	4928      	ldr	r1, [pc, #160]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 800981a:	4313      	orrs	r3, r2
 800981c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800981e:	4b27      	ldr	r3, [pc, #156]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009822:	4a26      	ldr	r2, [pc, #152]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009824:	f023 0310 	bic.w	r3, r3, #16
 8009828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800982a:	4b24      	ldr	r3, [pc, #144]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 800982c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <RCCEx_PLL2_Config+0x160>)
 8009830:	4013      	ands	r3, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	69d2      	ldr	r2, [r2, #28]
 8009836:	00d2      	lsls	r2, r2, #3
 8009838:	4920      	ldr	r1, [pc, #128]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 800983a:	4313      	orrs	r3, r2
 800983c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800983e:	4b1f      	ldr	r3, [pc, #124]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	4a1e      	ldr	r2, [pc, #120]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009844:	f043 0310 	orr.w	r3, r3, #16
 8009848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009850:	4b1a      	ldr	r3, [pc, #104]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a19      	ldr	r2, [pc, #100]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800985c:	e00f      	b.n	800987e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d106      	bne.n	8009872 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009864:	4b15      	ldr	r3, [pc, #84]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	4a14      	ldr	r2, [pc, #80]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 800986a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800986e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009870:	e005      	b.n	800987e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	4a11      	ldr	r2, [pc, #68]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800987c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a0e      	ldr	r2, [pc, #56]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 8009884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988a:	f7f9 faa1 	bl	8002dd0 <HAL_GetTick>
 800988e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009890:	e008      	b.n	80098a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009892:	f7f9 fa9d 	bl	8002dd0 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d901      	bls.n	80098a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e006      	b.n	80098b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098a4:	4b05      	ldr	r3, [pc, #20]	; (80098bc <RCCEx_PLL2_Config+0x15c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0f0      	beq.n	8009892 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	58024400 	.word	0x58024400
 80098c0:	ffff0007 	.word	0xffff0007

080098c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098d2:	4b53      	ldr	r3, [pc, #332]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d101      	bne.n	80098e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e099      	b.n	8009a16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098e2:	4b4f      	ldr	r3, [pc, #316]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a4e      	ldr	r2, [pc, #312]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80098e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ee:	f7f9 fa6f 	bl	8002dd0 <HAL_GetTick>
 80098f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098f4:	e008      	b.n	8009908 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80098f6:	f7f9 fa6b 	bl	8002dd0 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b02      	cmp	r3, #2
 8009902:	d901      	bls.n	8009908 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e086      	b.n	8009a16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009908:	4b45      	ldr	r3, [pc, #276]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f0      	bne.n	80098f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009914:	4b42      	ldr	r3, [pc, #264]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	051b      	lsls	r3, r3, #20
 8009922:	493f      	ldr	r1, [pc, #252]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	628b      	str	r3, [r1, #40]	; 0x28
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	3b01      	subs	r3, #1
 800992e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	3b01      	subs	r3, #1
 8009938:	025b      	lsls	r3, r3, #9
 800993a:	b29b      	uxth	r3, r3
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	3b01      	subs	r3, #1
 8009944:	041b      	lsls	r3, r3, #16
 8009946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	3b01      	subs	r3, #1
 8009952:	061b      	lsls	r3, r3, #24
 8009954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009958:	4931      	ldr	r1, [pc, #196]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 800995a:	4313      	orrs	r3, r2
 800995c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800995e:	4b30      	ldr	r3, [pc, #192]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	492d      	ldr	r1, [pc, #180]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 800996c:	4313      	orrs	r3, r2
 800996e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009970:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	4928      	ldr	r1, [pc, #160]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 800997e:	4313      	orrs	r3, r2
 8009980:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009982:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	4a26      	ldr	r2, [pc, #152]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800998c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800998e:	4b24      	ldr	r3, [pc, #144]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009992:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <RCCEx_PLL3_Config+0x160>)
 8009994:	4013      	ands	r3, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	69d2      	ldr	r2, [r2, #28]
 800999a:	00d2      	lsls	r2, r2, #3
 800999c:	4920      	ldr	r1, [pc, #128]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099a2:	4b1f      	ldr	r3, [pc, #124]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	4a1e      	ldr	r2, [pc, #120]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	4a19      	ldr	r2, [pc, #100]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099c0:	e00f      	b.n	80099e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d106      	bne.n	80099d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099c8:	4b15      	ldr	r3, [pc, #84]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	4a14      	ldr	r2, [pc, #80]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099d4:	e005      	b.n	80099e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099d6:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	4a11      	ldr	r2, [pc, #68]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099e2:	4b0f      	ldr	r3, [pc, #60]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a0e      	ldr	r2, [pc, #56]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ee:	f7f9 f9ef 	bl	8002dd0 <HAL_GetTick>
 80099f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099f4:	e008      	b.n	8009a08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099f6:	f7f9 f9eb 	bl	8002dd0 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d901      	bls.n	8009a08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e006      	b.n	8009a16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a08:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <RCCEx_PLL3_Config+0x15c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0f0      	beq.n	80099f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	58024400 	.word	0x58024400
 8009a24:	ffff0007 	.word	0xffff0007

08009a28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e0f1      	b.n	8009c1e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a78      	ldr	r2, [pc, #480]	; (8009c28 <HAL_SPI_Init+0x200>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d00f      	beq.n	8009a6a <HAL_SPI_Init+0x42>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a77      	ldr	r2, [pc, #476]	; (8009c2c <HAL_SPI_Init+0x204>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d00a      	beq.n	8009a6a <HAL_SPI_Init+0x42>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <HAL_SPI_Init+0x208>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d005      	beq.n	8009a6a <HAL_SPI_Init+0x42>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	2b0f      	cmp	r3, #15
 8009a64:	d901      	bls.n	8009a6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e0d9      	b.n	8009c1e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8e2 	bl	8009c34 <SPI_GetPacketSize>
 8009a70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a6c      	ldr	r2, [pc, #432]	; (8009c28 <HAL_SPI_Init+0x200>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00c      	beq.n	8009a96 <HAL_SPI_Init+0x6e>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a6a      	ldr	r2, [pc, #424]	; (8009c2c <HAL_SPI_Init+0x204>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d007      	beq.n	8009a96 <HAL_SPI_Init+0x6e>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a69      	ldr	r2, [pc, #420]	; (8009c30 <HAL_SPI_Init+0x208>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d002      	beq.n	8009a96 <HAL_SPI_Init+0x6e>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b08      	cmp	r3, #8
 8009a94:	d811      	bhi.n	8009aba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a9a:	4a63      	ldr	r2, [pc, #396]	; (8009c28 <HAL_SPI_Init+0x200>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d009      	beq.n	8009ab4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a61      	ldr	r2, [pc, #388]	; (8009c2c <HAL_SPI_Init+0x204>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_SPI_Init+0x8c>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a60      	ldr	r2, [pc, #384]	; (8009c30 <HAL_SPI_Init+0x208>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d104      	bne.n	8009abe <HAL_SPI_Init+0x96>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d901      	bls.n	8009abe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e0af      	b.n	8009c1e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7f7 fc88 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009afa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b04:	d119      	bne.n	8009b3a <HAL_SPI_Init+0x112>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b0e:	d103      	bne.n	8009b18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b28:	d107      	bne.n	8009b3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69da      	ldr	r2, [r3, #28]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	431a      	orrs	r2, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4c:	ea42 0103 	orr.w	r1, r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	431a      	orrs	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b9a:	ea42 0103 	orr.w	r1, r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d113      	bne.n	8009bda <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bc4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bd8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	40013000 	.word	0x40013000
 8009c2c:	40003800 	.word	0x40003800
 8009c30:	40003c00 	.word	0x40003c00

08009c34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c40:	095b      	lsrs	r3, r3, #5
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	3307      	adds	r3, #7
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e049      	b.n	8009d10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7f8 fb6d 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f000 fe29 	bl	800a900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d001      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e05e      	b.n	8009dee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a2b      	ldr	r2, [pc, #172]	; (8009dfc <HAL_TIM_Base_Start_IT+0xe4>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d02c      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5a:	d027      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a27      	ldr	r2, [pc, #156]	; (8009e00 <HAL_TIM_Base_Start_IT+0xe8>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d022      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a26      	ldr	r2, [pc, #152]	; (8009e04 <HAL_TIM_Base_Start_IT+0xec>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d01d      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <HAL_TIM_Base_Start_IT+0xf0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d018      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a23      	ldr	r2, [pc, #140]	; (8009e0c <HAL_TIM_Base_Start_IT+0xf4>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d013      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a21      	ldr	r2, [pc, #132]	; (8009e10 <HAL_TIM_Base_Start_IT+0xf8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d00e      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a20      	ldr	r2, [pc, #128]	; (8009e14 <HAL_TIM_Base_Start_IT+0xfc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d009      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a1e      	ldr	r2, [pc, #120]	; (8009e18 <HAL_TIM_Base_Start_IT+0x100>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <HAL_TIM_Base_Start_IT+0x94>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a1d      	ldr	r2, [pc, #116]	; (8009e1c <HAL_TIM_Base_Start_IT+0x104>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d115      	bne.n	8009dd8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <HAL_TIM_Base_Start_IT+0x108>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b06      	cmp	r3, #6
 8009dbc:	d015      	beq.n	8009dea <HAL_TIM_Base_Start_IT+0xd2>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc4:	d011      	beq.n	8009dea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0201 	orr.w	r2, r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd6:	e008      	b.n	8009dea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0201 	orr.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	e000      	b.n	8009dec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	40010000 	.word	0x40010000
 8009e00:	40000400 	.word	0x40000400
 8009e04:	40000800 	.word	0x40000800
 8009e08:	40000c00 	.word	0x40000c00
 8009e0c:	40010400 	.word	0x40010400
 8009e10:	40001800 	.word	0x40001800
 8009e14:	40014000 	.word	0x40014000
 8009e18:	4000e000 	.word	0x4000e000
 8009e1c:	4000e400 	.word	0x4000e400
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e049      	b.n	8009eca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f8 fb42 	bl	80024d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f000 fd4c 	bl	800a900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <HAL_TIM_PWM_Start+0x24>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	e03c      	b.n	8009f72 <HAL_TIM_PWM_Start+0x9e>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d109      	bne.n	8009f12 <HAL_TIM_PWM_Start+0x3e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	bf14      	ite	ne
 8009f0a:	2301      	movne	r3, #1
 8009f0c:	2300      	moveq	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	e02f      	b.n	8009f72 <HAL_TIM_PWM_Start+0x9e>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d109      	bne.n	8009f2c <HAL_TIM_PWM_Start+0x58>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	e022      	b.n	8009f72 <HAL_TIM_PWM_Start+0x9e>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b0c      	cmp	r3, #12
 8009f30:	d109      	bne.n	8009f46 <HAL_TIM_PWM_Start+0x72>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	bf14      	ite	ne
 8009f3e:	2301      	movne	r3, #1
 8009f40:	2300      	moveq	r3, #0
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	e015      	b.n	8009f72 <HAL_TIM_PWM_Start+0x9e>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d109      	bne.n	8009f60 <HAL_TIM_PWM_Start+0x8c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	bf14      	ite	ne
 8009f58:	2301      	movne	r3, #1
 8009f5a:	2300      	moveq	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	e008      	b.n	8009f72 <HAL_TIM_PWM_Start+0x9e>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	bf14      	ite	ne
 8009f6c:	2301      	movne	r3, #1
 8009f6e:	2300      	moveq	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e0ab      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d104      	bne.n	8009f8a <HAL_TIM_PWM_Start+0xb6>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f88:	e023      	b.n	8009fd2 <HAL_TIM_PWM_Start+0xfe>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d104      	bne.n	8009f9a <HAL_TIM_PWM_Start+0xc6>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f98:	e01b      	b.n	8009fd2 <HAL_TIM_PWM_Start+0xfe>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d104      	bne.n	8009faa <HAL_TIM_PWM_Start+0xd6>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fa8:	e013      	b.n	8009fd2 <HAL_TIM_PWM_Start+0xfe>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b0c      	cmp	r3, #12
 8009fae:	d104      	bne.n	8009fba <HAL_TIM_PWM_Start+0xe6>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fb8:	e00b      	b.n	8009fd2 <HAL_TIM_PWM_Start+0xfe>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b10      	cmp	r3, #16
 8009fbe:	d104      	bne.n	8009fca <HAL_TIM_PWM_Start+0xf6>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fc8:	e003      	b.n	8009fd2 <HAL_TIM_PWM_Start+0xfe>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f8aa 	bl	800b134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a3d      	ldr	r2, [pc, #244]	; (800a0dc <HAL_TIM_PWM_Start+0x208>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d013      	beq.n	800a012 <HAL_TIM_PWM_Start+0x13e>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a3c      	ldr	r2, [pc, #240]	; (800a0e0 <HAL_TIM_PWM_Start+0x20c>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00e      	beq.n	800a012 <HAL_TIM_PWM_Start+0x13e>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a3a      	ldr	r2, [pc, #232]	; (800a0e4 <HAL_TIM_PWM_Start+0x210>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d009      	beq.n	800a012 <HAL_TIM_PWM_Start+0x13e>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a39      	ldr	r2, [pc, #228]	; (800a0e8 <HAL_TIM_PWM_Start+0x214>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d004      	beq.n	800a012 <HAL_TIM_PWM_Start+0x13e>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a37      	ldr	r2, [pc, #220]	; (800a0ec <HAL_TIM_PWM_Start+0x218>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d101      	bne.n	800a016 <HAL_TIM_PWM_Start+0x142>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <HAL_TIM_PWM_Start+0x144>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d007      	beq.n	800a02c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a2a      	ldr	r2, [pc, #168]	; (800a0dc <HAL_TIM_PWM_Start+0x208>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d02c      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d027      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a2a      	ldr	r2, [pc, #168]	; (800a0f0 <HAL_TIM_PWM_Start+0x21c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d022      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a29      	ldr	r2, [pc, #164]	; (800a0f4 <HAL_TIM_PWM_Start+0x220>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d01d      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a27      	ldr	r2, [pc, #156]	; (800a0f8 <HAL_TIM_PWM_Start+0x224>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d018      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1f      	ldr	r2, [pc, #124]	; (800a0e0 <HAL_TIM_PWM_Start+0x20c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d013      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a23      	ldr	r2, [pc, #140]	; (800a0fc <HAL_TIM_PWM_Start+0x228>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00e      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_TIM_PWM_Start+0x210>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d009      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a1f      	ldr	r2, [pc, #124]	; (800a100 <HAL_TIM_PWM_Start+0x22c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d004      	beq.n	800a090 <HAL_TIM_PWM_Start+0x1bc>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1e      	ldr	r2, [pc, #120]	; (800a104 <HAL_TIM_PWM_Start+0x230>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d115      	bne.n	800a0bc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <HAL_TIM_PWM_Start+0x234>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d015      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x1fa>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a8:	d011      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e008      	b.n	800a0ce <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40010400 	.word	0x40010400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40001800 	.word	0x40001800
 800a100:	4000e000 	.word	0x4000e000
 800a104:	4000e400 	.word	0x4000e400
 800a108:	00010007 	.word	0x00010007

0800a10c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e08f      	b.n	800a240 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7f8 f829 	bl	800218c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6899      	ldr	r1, [r3, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	4b3e      	ldr	r3, [pc, #248]	; (800a248 <HAL_TIM_Encoder_Init+0x13c>)
 800a14e:	400b      	ands	r3, r1
 800a150:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3304      	adds	r3, #4
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f000 fbcf 	bl	800a900 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4b31      	ldr	r3, [pc, #196]	; (800a24c <HAL_TIM_Encoder_Init+0x140>)
 800a188:	4013      	ands	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	4313      	orrs	r3, r2
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4b2b      	ldr	r3, [pc, #172]	; (800a250 <HAL_TIM_Encoder_Init+0x144>)
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4b2a      	ldr	r3, [pc, #168]	; (800a254 <HAL_TIM_Encoder_Init+0x148>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	021b      	lsls	r3, r3, #8
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	011a      	lsls	r2, r3, #4
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	031b      	lsls	r3, r3, #12
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a1da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a1e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	011b      	lsls	r3, r3, #4
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	fffebff8 	.word	0xfffebff8
 800a24c:	fffffcfc 	.word	0xfffffcfc
 800a250:	fffff3f3 	.word	0xfffff3f3
 800a254:	ffff0f0f 	.word	0xffff0f0f

0800a258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d122      	bne.n	800a2b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d11b      	bne.n	800a2b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0202 	mvn.w	r2, #2
 800a284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fb12 	bl	800a8c4 <HAL_TIM_IC_CaptureCallback>
 800a2a0:	e005      	b.n	800a2ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fb04 	bl	800a8b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fb15 	bl	800a8d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	f003 0304 	and.w	r3, r3, #4
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d122      	bne.n	800a308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d11b      	bne.n	800a308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f06f 0204 	mvn.w	r2, #4
 800a2d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fae8 	bl	800a8c4 <HAL_TIM_IC_CaptureCallback>
 800a2f4:	e005      	b.n	800a302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fada 	bl	800a8b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 faeb 	bl	800a8d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f003 0308 	and.w	r3, r3, #8
 800a312:	2b08      	cmp	r3, #8
 800a314:	d122      	bne.n	800a35c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f003 0308 	and.w	r3, r3, #8
 800a320:	2b08      	cmp	r3, #8
 800a322:	d11b      	bne.n	800a35c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0208 	mvn.w	r2, #8
 800a32c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2204      	movs	r2, #4
 800a332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fabe 	bl	800a8c4 <HAL_TIM_IC_CaptureCallback>
 800a348:	e005      	b.n	800a356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fab0 	bl	800a8b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fac1 	bl	800a8d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0310 	and.w	r3, r3, #16
 800a366:	2b10      	cmp	r3, #16
 800a368:	d122      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b10      	cmp	r3, #16
 800a376:	d11b      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f06f 0210 	mvn.w	r2, #16
 800a380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2208      	movs	r2, #8
 800a386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa94 	bl	800a8c4 <HAL_TIM_IC_CaptureCallback>
 800a39c:	e005      	b.n	800a3aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa86 	bl	800a8b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa97 	bl	800a8d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d10e      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d107      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0201 	mvn.w	r2, #1
 800a3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7f6 fe7e 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b80      	cmp	r3, #128	; 0x80
 800a3e8:	d10e      	bne.n	800a408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f4:	2b80      	cmp	r3, #128	; 0x80
 800a3f6:	d107      	bne.n	800a408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 f802 	bl	800b40c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a416:	d10e      	bne.n	800a436 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a422:	2b80      	cmp	r3, #128	; 0x80
 800a424:	d107      	bne.n	800a436 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fff5 	bl	800b420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d10e      	bne.n	800a462 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44e:	2b40      	cmp	r3, #64	; 0x40
 800a450:	d107      	bne.n	800a462 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a45a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fa45 	bl	800a8ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d10e      	bne.n	800a48e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f003 0320 	and.w	r3, r3, #32
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d107      	bne.n	800a48e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f06f 0220 	mvn.w	r2, #32
 800a486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 ffb5 	bl	800b3f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e0ff      	b.n	800a6b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b14      	cmp	r3, #20
 800a4c2:	f200 80f0 	bhi.w	800a6a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a521 	.word	0x0800a521
 800a4d0:	0800a6a7 	.word	0x0800a6a7
 800a4d4:	0800a6a7 	.word	0x0800a6a7
 800a4d8:	0800a6a7 	.word	0x0800a6a7
 800a4dc:	0800a561 	.word	0x0800a561
 800a4e0:	0800a6a7 	.word	0x0800a6a7
 800a4e4:	0800a6a7 	.word	0x0800a6a7
 800a4e8:	0800a6a7 	.word	0x0800a6a7
 800a4ec:	0800a5a3 	.word	0x0800a5a3
 800a4f0:	0800a6a7 	.word	0x0800a6a7
 800a4f4:	0800a6a7 	.word	0x0800a6a7
 800a4f8:	0800a6a7 	.word	0x0800a6a7
 800a4fc:	0800a5e3 	.word	0x0800a5e3
 800a500:	0800a6a7 	.word	0x0800a6a7
 800a504:	0800a6a7 	.word	0x0800a6a7
 800a508:	0800a6a7 	.word	0x0800a6a7
 800a50c:	0800a625 	.word	0x0800a625
 800a510:	0800a6a7 	.word	0x0800a6a7
 800a514:	0800a6a7 	.word	0x0800a6a7
 800a518:	0800a6a7 	.word	0x0800a6a7
 800a51c:	0800a665 	.word	0x0800a665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fa90 	bl	800aa4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0204 	bic.w	r2, r2, #4
 800a54a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6999      	ldr	r1, [r3, #24]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691a      	ldr	r2, [r3, #16]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	619a      	str	r2, [r3, #24]
      break;
 800a55e:	e0a5      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fb00 	bl	800ab6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a57a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	699a      	ldr	r2, [r3, #24]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a58a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6999      	ldr	r1, [r3, #24]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	021a      	lsls	r2, r3, #8
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	619a      	str	r2, [r3, #24]
      break;
 800a5a0:	e084      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fb69 	bl	800ac80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69da      	ldr	r2, [r3, #28]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0208 	orr.w	r2, r2, #8
 800a5bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69da      	ldr	r2, [r3, #28]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0204 	bic.w	r2, r2, #4
 800a5cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69d9      	ldr	r1, [r3, #28]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	691a      	ldr	r2, [r3, #16]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	61da      	str	r2, [r3, #28]
      break;
 800a5e0:	e064      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fbd1 	bl	800ad90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69da      	ldr	r2, [r3, #28]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69da      	ldr	r2, [r3, #28]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a60c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69d9      	ldr	r1, [r3, #28]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	021a      	lsls	r2, r3, #8
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	61da      	str	r2, [r3, #28]
      break;
 800a622:	e043      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fc1a 	bl	800ae64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f042 0208 	orr.w	r2, r2, #8
 800a63e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 0204 	bic.w	r2, r2, #4
 800a64e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a662:	e023      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 fc5e 	bl	800af2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a67e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	021a      	lsls	r2, r3, #8
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6a4:	e002      	b.n	800a6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop

0800a6c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d101      	bne.n	800a6dc <HAL_TIM_ConfigClockSource+0x1c>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e0dc      	b.n	800a896 <HAL_TIM_ConfigClockSource+0x1d6>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	4b6a      	ldr	r3, [pc, #424]	; (800a8a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a64      	ldr	r2, [pc, #400]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f000 80a9 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a718:	4a62      	ldr	r2, [pc, #392]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f200 80ae 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a720:	4a61      	ldr	r2, [pc, #388]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a722:	4293      	cmp	r3, r2
 800a724:	f000 80a1 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a728:	4a5f      	ldr	r2, [pc, #380]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	f200 80a6 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a730:	4a5e      	ldr	r2, [pc, #376]	; (800a8ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a732:	4293      	cmp	r3, r2
 800a734:	f000 8099 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a738:	4a5c      	ldr	r2, [pc, #368]	; (800a8ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	f200 809e 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a740:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a744:	f000 8091 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a748:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a74c:	f200 8096 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a754:	f000 8089 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75c:	f200 808e 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a764:	d03e      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x124>
 800a766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76a:	f200 8087 	bhi.w	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a772:	f000 8086 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x1c2>
 800a776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77a:	d87f      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a77c:	2b70      	cmp	r3, #112	; 0x70
 800a77e:	d01a      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0xf6>
 800a780:	2b70      	cmp	r3, #112	; 0x70
 800a782:	d87b      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a784:	2b60      	cmp	r3, #96	; 0x60
 800a786:	d050      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x16a>
 800a788:	2b60      	cmp	r3, #96	; 0x60
 800a78a:	d877      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a78c:	2b50      	cmp	r3, #80	; 0x50
 800a78e:	d03c      	beq.n	800a80a <HAL_TIM_ConfigClockSource+0x14a>
 800a790:	2b50      	cmp	r3, #80	; 0x50
 800a792:	d873      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d058      	beq.n	800a84a <HAL_TIM_ConfigClockSource+0x18a>
 800a798:	2b40      	cmp	r3, #64	; 0x40
 800a79a:	d86f      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a79c:	2b30      	cmp	r3, #48	; 0x30
 800a79e:	d064      	beq.n	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a0:	2b30      	cmp	r3, #48	; 0x30
 800a7a2:	d86b      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	d060      	beq.n	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7a8:	2b20      	cmp	r3, #32
 800a7aa:	d867      	bhi.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d05c      	beq.n	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d05a      	beq.n	800a86a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7b4:	e062      	b.n	800a87c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6899      	ldr	r1, [r3, #8]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f000 fc95 	bl	800b0f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	609a      	str	r2, [r3, #8]
      break;
 800a7e2:	e04f      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	6899      	ldr	r1, [r3, #8]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f000 fc7e 	bl	800b0f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a806:	609a      	str	r2, [r3, #8]
      break;
 800a808:	e03c      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	6859      	ldr	r1, [r3, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	461a      	mov	r2, r3
 800a818:	f000 fbee 	bl	800aff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2150      	movs	r1, #80	; 0x50
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fc48 	bl	800b0b8 <TIM_ITRx_SetConfig>
      break;
 800a828:	e02c      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	6859      	ldr	r1, [r3, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	461a      	mov	r2, r3
 800a838:	f000 fc0d 	bl	800b056 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2160      	movs	r1, #96	; 0x60
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fc38 	bl	800b0b8 <TIM_ITRx_SetConfig>
      break;
 800a848:	e01c      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6859      	ldr	r1, [r3, #4]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	461a      	mov	r2, r3
 800a858:	f000 fbce 	bl	800aff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2140      	movs	r1, #64	; 0x40
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fc28 	bl	800b0b8 <TIM_ITRx_SetConfig>
      break;
 800a868:	e00c      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f000 fc1f 	bl	800b0b8 <TIM_ITRx_SetConfig>
      break;
 800a87a:	e003      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	73fb      	strb	r3, [r7, #15]
      break;
 800a880:	e000      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	ffceff88 	.word	0xffceff88
 800a8a4:	00100040 	.word	0x00100040
 800a8a8:	00100030 	.word	0x00100030
 800a8ac:	00100020 	.word	0x00100020

0800a8b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a44      	ldr	r2, [pc, #272]	; (800aa24 <TIM_Base_SetConfig+0x124>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d013      	beq.n	800a940 <TIM_Base_SetConfig+0x40>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91e:	d00f      	beq.n	800a940 <TIM_Base_SetConfig+0x40>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a41      	ldr	r2, [pc, #260]	; (800aa28 <TIM_Base_SetConfig+0x128>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00b      	beq.n	800a940 <TIM_Base_SetConfig+0x40>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a40      	ldr	r2, [pc, #256]	; (800aa2c <TIM_Base_SetConfig+0x12c>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d007      	beq.n	800a940 <TIM_Base_SetConfig+0x40>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a3f      	ldr	r2, [pc, #252]	; (800aa30 <TIM_Base_SetConfig+0x130>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d003      	beq.n	800a940 <TIM_Base_SetConfig+0x40>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a3e      	ldr	r2, [pc, #248]	; (800aa34 <TIM_Base_SetConfig+0x134>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d108      	bne.n	800a952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a33      	ldr	r2, [pc, #204]	; (800aa24 <TIM_Base_SetConfig+0x124>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d027      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a960:	d023      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a30      	ldr	r2, [pc, #192]	; (800aa28 <TIM_Base_SetConfig+0x128>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d01f      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a2f      	ldr	r2, [pc, #188]	; (800aa2c <TIM_Base_SetConfig+0x12c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d01b      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a2e      	ldr	r2, [pc, #184]	; (800aa30 <TIM_Base_SetConfig+0x130>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d017      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a2d      	ldr	r2, [pc, #180]	; (800aa34 <TIM_Base_SetConfig+0x134>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d013      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a2c      	ldr	r2, [pc, #176]	; (800aa38 <TIM_Base_SetConfig+0x138>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00f      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a2b      	ldr	r2, [pc, #172]	; (800aa3c <TIM_Base_SetConfig+0x13c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d00b      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a2a      	ldr	r2, [pc, #168]	; (800aa40 <TIM_Base_SetConfig+0x140>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d007      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a29      	ldr	r2, [pc, #164]	; (800aa44 <TIM_Base_SetConfig+0x144>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d003      	beq.n	800a9aa <TIM_Base_SetConfig+0xaa>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a28      	ldr	r2, [pc, #160]	; (800aa48 <TIM_Base_SetConfig+0x148>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d108      	bne.n	800a9bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a10      	ldr	r2, [pc, #64]	; (800aa24 <TIM_Base_SetConfig+0x124>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d00f      	beq.n	800aa08 <TIM_Base_SetConfig+0x108>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a12      	ldr	r2, [pc, #72]	; (800aa34 <TIM_Base_SetConfig+0x134>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d00b      	beq.n	800aa08 <TIM_Base_SetConfig+0x108>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a11      	ldr	r2, [pc, #68]	; (800aa38 <TIM_Base_SetConfig+0x138>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d007      	beq.n	800aa08 <TIM_Base_SetConfig+0x108>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <TIM_Base_SetConfig+0x13c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d003      	beq.n	800aa08 <TIM_Base_SetConfig+0x108>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a0f      	ldr	r2, [pc, #60]	; (800aa40 <TIM_Base_SetConfig+0x140>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d103      	bne.n	800aa10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691a      	ldr	r2, [r3, #16]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	615a      	str	r2, [r3, #20]
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	40010000 	.word	0x40010000
 800aa28:	40000400 	.word	0x40000400
 800aa2c:	40000800 	.word	0x40000800
 800aa30:	40000c00 	.word	0x40000c00
 800aa34:	40010400 	.word	0x40010400
 800aa38:	40014000 	.word	0x40014000
 800aa3c:	40014400 	.word	0x40014400
 800aa40:	40014800 	.word	0x40014800
 800aa44:	4000e000 	.word	0x4000e000
 800aa48:	4000e400 	.word	0x4000e400

0800aa4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f023 0201 	bic.w	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4b37      	ldr	r3, [pc, #220]	; (800ab54 <TIM_OC1_SetConfig+0x108>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0303 	bic.w	r3, r3, #3
 800aa82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f023 0302 	bic.w	r3, r3, #2
 800aa94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a2d      	ldr	r2, [pc, #180]	; (800ab58 <TIM_OC1_SetConfig+0x10c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00f      	beq.n	800aac8 <TIM_OC1_SetConfig+0x7c>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a2c      	ldr	r2, [pc, #176]	; (800ab5c <TIM_OC1_SetConfig+0x110>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d00b      	beq.n	800aac8 <TIM_OC1_SetConfig+0x7c>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a2b      	ldr	r2, [pc, #172]	; (800ab60 <TIM_OC1_SetConfig+0x114>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d007      	beq.n	800aac8 <TIM_OC1_SetConfig+0x7c>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a2a      	ldr	r2, [pc, #168]	; (800ab64 <TIM_OC1_SetConfig+0x118>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_OC1_SetConfig+0x7c>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a29      	ldr	r2, [pc, #164]	; (800ab68 <TIM_OC1_SetConfig+0x11c>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d10c      	bne.n	800aae2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 0308 	bic.w	r3, r3, #8
 800aace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f023 0304 	bic.w	r3, r3, #4
 800aae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a1c      	ldr	r2, [pc, #112]	; (800ab58 <TIM_OC1_SetConfig+0x10c>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d00f      	beq.n	800ab0a <TIM_OC1_SetConfig+0xbe>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a1b      	ldr	r2, [pc, #108]	; (800ab5c <TIM_OC1_SetConfig+0x110>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00b      	beq.n	800ab0a <TIM_OC1_SetConfig+0xbe>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a1a      	ldr	r2, [pc, #104]	; (800ab60 <TIM_OC1_SetConfig+0x114>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d007      	beq.n	800ab0a <TIM_OC1_SetConfig+0xbe>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <TIM_OC1_SetConfig+0x118>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d003      	beq.n	800ab0a <TIM_OC1_SetConfig+0xbe>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a18      	ldr	r2, [pc, #96]	; (800ab68 <TIM_OC1_SetConfig+0x11c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d111      	bne.n	800ab2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	693a      	ldr	r2, [r7, #16]
 800ab32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	621a      	str	r2, [r3, #32]
}
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	fffeff8f 	.word	0xfffeff8f
 800ab58:	40010000 	.word	0x40010000
 800ab5c:	40010400 	.word	0x40010400
 800ab60:	40014000 	.word	0x40014000
 800ab64:	40014400 	.word	0x40014400
 800ab68:	40014800 	.word	0x40014800

0800ab6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	f023 0210 	bic.w	r2, r3, #16
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4b34      	ldr	r3, [pc, #208]	; (800ac68 <TIM_OC2_SetConfig+0xfc>)
 800ab98:	4013      	ands	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4313      	orrs	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f023 0320 	bic.w	r3, r3, #32
 800abb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a29      	ldr	r2, [pc, #164]	; (800ac6c <TIM_OC2_SetConfig+0x100>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_OC2_SetConfig+0x68>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <TIM_OC2_SetConfig+0x104>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d10d      	bne.n	800abf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a1e      	ldr	r2, [pc, #120]	; (800ac6c <TIM_OC2_SetConfig+0x100>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d00f      	beq.n	800ac18 <TIM_OC2_SetConfig+0xac>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a1d      	ldr	r2, [pc, #116]	; (800ac70 <TIM_OC2_SetConfig+0x104>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d00b      	beq.n	800ac18 <TIM_OC2_SetConfig+0xac>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a1c      	ldr	r2, [pc, #112]	; (800ac74 <TIM_OC2_SetConfig+0x108>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d007      	beq.n	800ac18 <TIM_OC2_SetConfig+0xac>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a1b      	ldr	r2, [pc, #108]	; (800ac78 <TIM_OC2_SetConfig+0x10c>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d003      	beq.n	800ac18 <TIM_OC2_SetConfig+0xac>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a1a      	ldr	r2, [pc, #104]	; (800ac7c <TIM_OC2_SetConfig+0x110>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d113      	bne.n	800ac40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	621a      	str	r2, [r3, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	feff8fff 	.word	0xfeff8fff
 800ac6c:	40010000 	.word	0x40010000
 800ac70:	40010400 	.word	0x40010400
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4b33      	ldr	r3, [pc, #204]	; (800ad78 <TIM_OC3_SetConfig+0xf8>)
 800acac:	4013      	ands	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0303 	bic.w	r3, r3, #3
 800acb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a28      	ldr	r2, [pc, #160]	; (800ad7c <TIM_OC3_SetConfig+0xfc>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d003      	beq.n	800ace6 <TIM_OC3_SetConfig+0x66>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a27      	ldr	r2, [pc, #156]	; (800ad80 <TIM_OC3_SetConfig+0x100>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d10d      	bne.n	800ad02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a1d      	ldr	r2, [pc, #116]	; (800ad7c <TIM_OC3_SetConfig+0xfc>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00f      	beq.n	800ad2a <TIM_OC3_SetConfig+0xaa>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a1c      	ldr	r2, [pc, #112]	; (800ad80 <TIM_OC3_SetConfig+0x100>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00b      	beq.n	800ad2a <TIM_OC3_SetConfig+0xaa>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a1b      	ldr	r2, [pc, #108]	; (800ad84 <TIM_OC3_SetConfig+0x104>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d007      	beq.n	800ad2a <TIM_OC3_SetConfig+0xaa>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a1a      	ldr	r2, [pc, #104]	; (800ad88 <TIM_OC3_SetConfig+0x108>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_OC3_SetConfig+0xaa>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a19      	ldr	r2, [pc, #100]	; (800ad8c <TIM_OC3_SetConfig+0x10c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d113      	bne.n	800ad52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	011b      	lsls	r3, r3, #4
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	621a      	str	r2, [r3, #32]
}
 800ad6c:	bf00      	nop
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	fffeff8f 	.word	0xfffeff8f
 800ad7c:	40010000 	.word	0x40010000
 800ad80:	40010400 	.word	0x40010400
 800ad84:	40014000 	.word	0x40014000
 800ad88:	40014400 	.word	0x40014400
 800ad8c:	40014800 	.word	0x40014800

0800ad90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <TIM_OC4_SetConfig+0xbc>)
 800adbc:	4013      	ands	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	021b      	lsls	r3, r3, #8
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4313      	orrs	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	031b      	lsls	r3, r3, #12
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a19      	ldr	r2, [pc, #100]	; (800ae50 <TIM_OC4_SetConfig+0xc0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00f      	beq.n	800ae10 <TIM_OC4_SetConfig+0x80>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a18      	ldr	r2, [pc, #96]	; (800ae54 <TIM_OC4_SetConfig+0xc4>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <TIM_OC4_SetConfig+0x80>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a17      	ldr	r2, [pc, #92]	; (800ae58 <TIM_OC4_SetConfig+0xc8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d007      	beq.n	800ae10 <TIM_OC4_SetConfig+0x80>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a16      	ldr	r2, [pc, #88]	; (800ae5c <TIM_OC4_SetConfig+0xcc>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d003      	beq.n	800ae10 <TIM_OC4_SetConfig+0x80>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a15      	ldr	r2, [pc, #84]	; (800ae60 <TIM_OC4_SetConfig+0xd0>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d109      	bne.n	800ae24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	019b      	lsls	r3, r3, #6
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	feff8fff 	.word	0xfeff8fff
 800ae50:	40010000 	.word	0x40010000
 800ae54:	40010400 	.word	0x40010400
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800

0800ae64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4b21      	ldr	r3, [pc, #132]	; (800af14 <TIM_OC5_SetConfig+0xb0>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	041b      	lsls	r3, r3, #16
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a18      	ldr	r2, [pc, #96]	; (800af18 <TIM_OC5_SetConfig+0xb4>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00f      	beq.n	800aeda <TIM_OC5_SetConfig+0x76>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a17      	ldr	r2, [pc, #92]	; (800af1c <TIM_OC5_SetConfig+0xb8>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00b      	beq.n	800aeda <TIM_OC5_SetConfig+0x76>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a16      	ldr	r2, [pc, #88]	; (800af20 <TIM_OC5_SetConfig+0xbc>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d007      	beq.n	800aeda <TIM_OC5_SetConfig+0x76>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a15      	ldr	r2, [pc, #84]	; (800af24 <TIM_OC5_SetConfig+0xc0>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d003      	beq.n	800aeda <TIM_OC5_SetConfig+0x76>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a14      	ldr	r2, [pc, #80]	; (800af28 <TIM_OC5_SetConfig+0xc4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d109      	bne.n	800aeee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aee0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	021b      	lsls	r3, r3, #8
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	621a      	str	r2, [r3, #32]
}
 800af08:	bf00      	nop
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	fffeff8f 	.word	0xfffeff8f
 800af18:	40010000 	.word	0x40010000
 800af1c:	40010400 	.word	0x40010400
 800af20:	40014000 	.word	0x40014000
 800af24:	40014400 	.word	0x40014400
 800af28:	40014800 	.word	0x40014800

0800af2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <TIM_OC6_SetConfig+0xb4>)
 800af58:	4013      	ands	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	051b      	lsls	r3, r3, #20
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	4313      	orrs	r3, r2
 800af7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a19      	ldr	r2, [pc, #100]	; (800afe4 <TIM_OC6_SetConfig+0xb8>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00f      	beq.n	800afa4 <TIM_OC6_SetConfig+0x78>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a18      	ldr	r2, [pc, #96]	; (800afe8 <TIM_OC6_SetConfig+0xbc>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00b      	beq.n	800afa4 <TIM_OC6_SetConfig+0x78>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a17      	ldr	r2, [pc, #92]	; (800afec <TIM_OC6_SetConfig+0xc0>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d007      	beq.n	800afa4 <TIM_OC6_SetConfig+0x78>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a16      	ldr	r2, [pc, #88]	; (800aff0 <TIM_OC6_SetConfig+0xc4>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_OC6_SetConfig+0x78>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a15      	ldr	r2, [pc, #84]	; (800aff4 <TIM_OC6_SetConfig+0xc8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d109      	bne.n	800afb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	621a      	str	r2, [r3, #32]
}
 800afd2:	bf00      	nop
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	feff8fff 	.word	0xfeff8fff
 800afe4:	40010000 	.word	0x40010000
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800

0800aff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f023 0201 	bic.w	r2, r3, #1
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f023 030a 	bic.w	r3, r3, #10
 800b034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	621a      	str	r2, [r3, #32]
}
 800b04a:	bf00      	nop
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b056:	b480      	push	{r7}
 800b058:	b087      	sub	sp, #28
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	f023 0210 	bic.w	r2, r3, #16
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	031b      	lsls	r3, r3, #12
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4313      	orrs	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	621a      	str	r2, [r3, #32]
}
 800b0aa:	bf00      	nop
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <TIM_ITRx_SetConfig+0x38>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	f043 0307 	orr.w	r3, r3, #7
 800b0da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	609a      	str	r2, [r3, #8]
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	ffcfff8f 	.word	0xffcfff8f

0800b0f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b10e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	021a      	lsls	r2, r3, #8
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	431a      	orrs	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f003 031f 	and.w	r3, r3, #31
 800b146:	2201      	movs	r2, #1
 800b148:	fa02 f303 	lsl.w	r3, r2, r3
 800b14c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a1a      	ldr	r2, [r3, #32]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	43db      	mvns	r3, r3
 800b156:	401a      	ands	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f003 031f 	and.w	r3, r3, #31
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	fa01 f303 	lsl.w	r3, r1, r3
 800b16c:	431a      	orrs	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	621a      	str	r2, [r3, #32]
}
 800b172:	bf00      	nop
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d101      	bne.n	800b198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b194:	2302      	movs	r3, #2
 800b196:	e077      	b.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a35      	ldr	r2, [pc, #212]	; (800b294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d004      	beq.n	800b1cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a34      	ldr	r2, [pc, #208]	; (800b298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d108      	bne.n	800b1de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b1d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a25      	ldr	r2, [pc, #148]	; (800b294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d02c      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20a:	d027      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a22      	ldr	r2, [pc, #136]	; (800b29c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d022      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a21      	ldr	r2, [pc, #132]	; (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d01d      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a1f      	ldr	r2, [pc, #124]	; (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d018      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a1a      	ldr	r2, [pc, #104]	; (800b298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d013      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a1b      	ldr	r2, [pc, #108]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d00e      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a1a      	ldr	r2, [pc, #104]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d009      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a18      	ldr	r2, [pc, #96]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d004      	beq.n	800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a17      	ldr	r2, [pc, #92]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d10c      	bne.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	40010000 	.word	0x40010000
 800b298:	40010400 	.word	0x40010400
 800b29c:	40000400 	.word	0x40000400
 800b2a0:	40000800 	.word	0x40000800
 800b2a4:	40000c00 	.word	0x40000c00
 800b2a8:	40001800 	.word	0x40001800
 800b2ac:	40014000 	.word	0x40014000
 800b2b0:	4000e000 	.word	0x4000e000
 800b2b4:	4000e400 	.word	0x4000e400

0800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d101      	bne.n	800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e087      	b.n	800b3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4313      	orrs	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a27      	ldr	r2, [pc, #156]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d004      	beq.n	800b362 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a25      	ldr	r2, [pc, #148]	; (800b3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d106      	bne.n	800b370 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d004      	beq.n	800b384 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a1d      	ldr	r2, [pc, #116]	; (800b3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d126      	bne.n	800b3d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	051b      	lsls	r3, r3, #20
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a0e      	ldr	r2, [pc, #56]	; (800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a0d      	ldr	r2, [pc, #52]	; (800b3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d106      	bne.n	800b3d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40010400 	.word	0x40010400

0800b3f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e042      	b.n	800b4cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7f7 fa8f 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2224      	movs	r2, #36	; 0x24
 800b462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f022 0201 	bic.w	r2, r2, #1
 800b474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f996 	bl	800b7a8 <UART_SetConfig>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d101      	bne.n	800b486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e022      	b.n	800b4cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 ffe8 	bl	800c464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689a      	ldr	r2, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f042 0201 	orr.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f001 f86f 	bl	800c5a8 <UART_CheckIdleState>
 800b4ca:	4603      	mov	r3, r0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af02      	add	r7, sp, #8
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	603b      	str	r3, [r7, #0]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	f040 8083 	bne.w	800b5f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <HAL_UART_Transmit+0x28>
 800b4f6:	88fb      	ldrh	r3, [r7, #6]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e07b      	b.n	800b5f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <HAL_UART_Transmit+0x3a>
 800b50a:	2302      	movs	r3, #2
 800b50c:	e074      	b.n	800b5f8 <HAL_UART_Transmit+0x124>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2221      	movs	r2, #33	; 0x21
 800b522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b526:	f7f7 fc53 	bl	8002dd0 <HAL_GetTick>
 800b52a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	88fa      	ldrh	r2, [r7, #6]
 800b530:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88fa      	ldrh	r2, [r7, #6]
 800b538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b544:	d108      	bne.n	800b558 <HAL_UART_Transmit+0x84>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	e003      	b.n	800b560 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b568:	e02c      	b.n	800b5c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2200      	movs	r2, #0
 800b572:	2180      	movs	r1, #128	; 0x80
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f001 f862 	bl	800c63e <UART_WaitOnFlagUntilTimeout>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e039      	b.n	800b5f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10b      	bne.n	800b5a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b598:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	3302      	adds	r3, #2
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	e007      	b.n	800b5b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1cc      	bne.n	800b56a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2140      	movs	r1, #64	; 0x40
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f001 f82f 	bl	800c63e <UART_WaitOnFlagUntilTimeout>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e006      	b.n	800b5f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e000      	b.n	800b5f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b5f6:	2302      	movs	r3, #2
  }
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3720      	adds	r7, #32
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af02      	add	r7, sp, #8
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	603b      	str	r3, [r7, #0]
 800b60c:	4613      	mov	r3, r2
 800b60e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b616:	2b20      	cmp	r3, #32
 800b618:	f040 80c0 	bne.w	800b79c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_UART_Receive+0x28>
 800b622:	88fb      	ldrh	r3, [r7, #6]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e0b8      	b.n	800b79e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b632:	2b01      	cmp	r3, #1
 800b634:	d101      	bne.n	800b63a <HAL_UART_Receive+0x3a>
 800b636:	2302      	movs	r3, #2
 800b638:	e0b1      	b.n	800b79e <HAL_UART_Receive+0x19e>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2222      	movs	r2, #34	; 0x22
 800b64e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b658:	f7f7 fbba 	bl	8002dd0 <HAL_GetTick>
 800b65c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	88fa      	ldrh	r2, [r7, #6]
 800b662:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b676:	d10e      	bne.n	800b696 <HAL_UART_Receive+0x96>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <HAL_UART_Receive+0x8c>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b68a:	e02d      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b694:	e028      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10d      	bne.n	800b6ba <HAL_UART_Receive+0xba>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <HAL_UART_Receive+0xb0>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	22ff      	movs	r2, #255	; 0xff
 800b6aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6ae:	e01b      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	227f      	movs	r2, #127	; 0x7f
 800b6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6b8:	e016      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6c2:	d10d      	bne.n	800b6e0 <HAL_UART_Receive+0xe0>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <HAL_UART_Receive+0xd6>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	227f      	movs	r2, #127	; 0x7f
 800b6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6d4:	e008      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	223f      	movs	r2, #63	; 0x3f
 800b6da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6de:	e003      	b.n	800b6e8 <HAL_UART_Receive+0xe8>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f8:	d108      	bne.n	800b70c <HAL_UART_Receive+0x10c>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d104      	bne.n	800b70c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	61bb      	str	r3, [r7, #24]
 800b70a:	e003      	b.n	800b714 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b710:	2300      	movs	r3, #0
 800b712:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b71c:	e032      	b.n	800b784 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2200      	movs	r2, #0
 800b726:	2120      	movs	r1, #32
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 ff88 	bl	800c63e <UART_WaitOnFlagUntilTimeout>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e032      	b.n	800b79e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10c      	bne.n	800b758 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	b29a      	uxth	r2, r3
 800b746:	8a7b      	ldrh	r3, [r7, #18]
 800b748:	4013      	ands	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	3302      	adds	r3, #2
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	e00c      	b.n	800b772 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	8a7b      	ldrh	r3, [r7, #18]
 800b762:	b2db      	uxtb	r3, r3
 800b764:	4013      	ands	r3, r2
 800b766:	b2da      	uxtb	r2, r3
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	3301      	adds	r3, #1
 800b770:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1c6      	bne.n	800b71e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2220      	movs	r2, #32
 800b794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	e000      	b.n	800b79e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800b79c:	2302      	movs	r3, #2
  }
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7a8:	b5b0      	push	{r4, r5, r7, lr}
 800b7aa:	b08e      	sub	sp, #56	; 0x38
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689a      	ldr	r2, [r3, #8]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	4bbf      	ldr	r3, [pc, #764]	; (800bad4 <UART_SetConfig+0x32c>)
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	6812      	ldr	r2, [r2, #0]
 800b7dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4ab5      	ldr	r2, [pc, #724]	; (800bad8 <UART_SetConfig+0x330>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d004      	beq.n	800b812 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b80e:	4313      	orrs	r3, r2
 800b810:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	4bb0      	ldr	r3, [pc, #704]	; (800badc <UART_SetConfig+0x334>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b822:	430b      	orrs	r3, r1
 800b824:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	f023 010f 	bic.w	r1, r3, #15
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4aa7      	ldr	r2, [pc, #668]	; (800bae0 <UART_SetConfig+0x338>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d176      	bne.n	800b934 <UART_SetConfig+0x18c>
 800b846:	4ba7      	ldr	r3, [pc, #668]	; (800bae4 <UART_SetConfig+0x33c>)
 800b848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b84e:	2b28      	cmp	r3, #40	; 0x28
 800b850:	d86c      	bhi.n	800b92c <UART_SetConfig+0x184>
 800b852:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <UART_SetConfig+0xb0>)
 800b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b858:	0800b8fd 	.word	0x0800b8fd
 800b85c:	0800b92d 	.word	0x0800b92d
 800b860:	0800b92d 	.word	0x0800b92d
 800b864:	0800b92d 	.word	0x0800b92d
 800b868:	0800b92d 	.word	0x0800b92d
 800b86c:	0800b92d 	.word	0x0800b92d
 800b870:	0800b92d 	.word	0x0800b92d
 800b874:	0800b92d 	.word	0x0800b92d
 800b878:	0800b905 	.word	0x0800b905
 800b87c:	0800b92d 	.word	0x0800b92d
 800b880:	0800b92d 	.word	0x0800b92d
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b92d 	.word	0x0800b92d
 800b88c:	0800b92d 	.word	0x0800b92d
 800b890:	0800b92d 	.word	0x0800b92d
 800b894:	0800b92d 	.word	0x0800b92d
 800b898:	0800b90d 	.word	0x0800b90d
 800b89c:	0800b92d 	.word	0x0800b92d
 800b8a0:	0800b92d 	.word	0x0800b92d
 800b8a4:	0800b92d 	.word	0x0800b92d
 800b8a8:	0800b92d 	.word	0x0800b92d
 800b8ac:	0800b92d 	.word	0x0800b92d
 800b8b0:	0800b92d 	.word	0x0800b92d
 800b8b4:	0800b92d 	.word	0x0800b92d
 800b8b8:	0800b915 	.word	0x0800b915
 800b8bc:	0800b92d 	.word	0x0800b92d
 800b8c0:	0800b92d 	.word	0x0800b92d
 800b8c4:	0800b92d 	.word	0x0800b92d
 800b8c8:	0800b92d 	.word	0x0800b92d
 800b8cc:	0800b92d 	.word	0x0800b92d
 800b8d0:	0800b92d 	.word	0x0800b92d
 800b8d4:	0800b92d 	.word	0x0800b92d
 800b8d8:	0800b91d 	.word	0x0800b91d
 800b8dc:	0800b92d 	.word	0x0800b92d
 800b8e0:	0800b92d 	.word	0x0800b92d
 800b8e4:	0800b92d 	.word	0x0800b92d
 800b8e8:	0800b92d 	.word	0x0800b92d
 800b8ec:	0800b92d 	.word	0x0800b92d
 800b8f0:	0800b92d 	.word	0x0800b92d
 800b8f4:	0800b92d 	.word	0x0800b92d
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b902:	e326      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b904:	2304      	movs	r3, #4
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b90a:	e322      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b912:	e31e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b914:	2310      	movs	r3, #16
 800b916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b91a:	e31a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b91c:	2320      	movs	r3, #32
 800b91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b922:	e316      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b924:	2340      	movs	r3, #64	; 0x40
 800b926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b92a:	e312      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b92c:	2380      	movs	r3, #128	; 0x80
 800b92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b932:	e30e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a6b      	ldr	r2, [pc, #428]	; (800bae8 <UART_SetConfig+0x340>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d130      	bne.n	800b9a0 <UART_SetConfig+0x1f8>
 800b93e:	4b69      	ldr	r3, [pc, #420]	; (800bae4 <UART_SetConfig+0x33c>)
 800b940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b05      	cmp	r3, #5
 800b948:	d826      	bhi.n	800b998 <UART_SetConfig+0x1f0>
 800b94a:	a201      	add	r2, pc, #4	; (adr r2, 800b950 <UART_SetConfig+0x1a8>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b969 	.word	0x0800b969
 800b954:	0800b971 	.word	0x0800b971
 800b958:	0800b979 	.word	0x0800b979
 800b95c:	0800b981 	.word	0x0800b981
 800b960:	0800b989 	.word	0x0800b989
 800b964:	0800b991 	.word	0x0800b991
 800b968:	2300      	movs	r3, #0
 800b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96e:	e2f0      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b970:	2304      	movs	r3, #4
 800b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b976:	e2ec      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b978:	2308      	movs	r3, #8
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97e:	e2e8      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b980:	2310      	movs	r3, #16
 800b982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b986:	e2e4      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b988:	2320      	movs	r3, #32
 800b98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98e:	e2e0      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b990:	2340      	movs	r3, #64	; 0x40
 800b992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b996:	e2dc      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b998:	2380      	movs	r3, #128	; 0x80
 800b99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b99e:	e2d8      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a51      	ldr	r2, [pc, #324]	; (800baec <UART_SetConfig+0x344>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d130      	bne.n	800ba0c <UART_SetConfig+0x264>
 800b9aa:	4b4e      	ldr	r3, [pc, #312]	; (800bae4 <UART_SetConfig+0x33c>)
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d826      	bhi.n	800ba04 <UART_SetConfig+0x25c>
 800b9b6:	a201      	add	r2, pc, #4	; (adr r2, 800b9bc <UART_SetConfig+0x214>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800b9d5 	.word	0x0800b9d5
 800b9c0:	0800b9dd 	.word	0x0800b9dd
 800b9c4:	0800b9e5 	.word	0x0800b9e5
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9f5 	.word	0x0800b9f5
 800b9d0:	0800b9fd 	.word	0x0800b9fd
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9da:	e2ba      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9dc:	2304      	movs	r3, #4
 800b9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e2:	e2b6      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9e4:	2308      	movs	r3, #8
 800b9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ea:	e2b2      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f2:	e2ae      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fa:	e2aa      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800b9fc:	2340      	movs	r3, #64	; 0x40
 800b9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba02:	e2a6      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba0a:	e2a2      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <UART_SetConfig+0x348>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d130      	bne.n	800ba78 <UART_SetConfig+0x2d0>
 800ba16:	4b33      	ldr	r3, [pc, #204]	; (800bae4 <UART_SetConfig+0x33c>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1a:	f003 0307 	and.w	r3, r3, #7
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	d826      	bhi.n	800ba70 <UART_SetConfig+0x2c8>
 800ba22:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <UART_SetConfig+0x280>)
 800ba24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba28:	0800ba41 	.word	0x0800ba41
 800ba2c:	0800ba49 	.word	0x0800ba49
 800ba30:	0800ba51 	.word	0x0800ba51
 800ba34:	0800ba59 	.word	0x0800ba59
 800ba38:	0800ba61 	.word	0x0800ba61
 800ba3c:	0800ba69 	.word	0x0800ba69
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e284      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba48:	2304      	movs	r3, #4
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4e:	e280      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba50:	2308      	movs	r3, #8
 800ba52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba56:	e27c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba58:	2310      	movs	r3, #16
 800ba5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5e:	e278      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba60:	2320      	movs	r3, #32
 800ba62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba66:	e274      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba68:	2340      	movs	r3, #64	; 0x40
 800ba6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6e:	e270      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba70:	2380      	movs	r3, #128	; 0x80
 800ba72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba76:	e26c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a1d      	ldr	r2, [pc, #116]	; (800baf4 <UART_SetConfig+0x34c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d142      	bne.n	800bb08 <UART_SetConfig+0x360>
 800ba82:	4b18      	ldr	r3, [pc, #96]	; (800bae4 <UART_SetConfig+0x33c>)
 800ba84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	d838      	bhi.n	800bb00 <UART_SetConfig+0x358>
 800ba8e:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <UART_SetConfig+0x2ec>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800baad 	.word	0x0800baad
 800ba98:	0800bab5 	.word	0x0800bab5
 800ba9c:	0800babd 	.word	0x0800babd
 800baa0:	0800bac5 	.word	0x0800bac5
 800baa4:	0800bacd 	.word	0x0800bacd
 800baa8:	0800baf9 	.word	0x0800baf9
 800baac:	2300      	movs	r3, #0
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e24e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bab4:	2304      	movs	r3, #4
 800bab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baba:	e24a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800babc:	2308      	movs	r3, #8
 800babe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac2:	e246      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bac4:	2310      	movs	r3, #16
 800bac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baca:	e242      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bacc:	2320      	movs	r3, #32
 800bace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad2:	e23e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bad4:	cfff69f3 	.word	0xcfff69f3
 800bad8:	58000c00 	.word	0x58000c00
 800badc:	11fff4ff 	.word	0x11fff4ff
 800bae0:	40011000 	.word	0x40011000
 800bae4:	58024400 	.word	0x58024400
 800bae8:	40004400 	.word	0x40004400
 800baec:	40004800 	.word	0x40004800
 800baf0:	40004c00 	.word	0x40004c00
 800baf4:	40005000 	.word	0x40005000
 800baf8:	2340      	movs	r3, #64	; 0x40
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e228      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bb00:	2380      	movs	r3, #128	; 0x80
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e224      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4ab1      	ldr	r2, [pc, #708]	; (800bdd4 <UART_SetConfig+0x62c>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d176      	bne.n	800bc00 <UART_SetConfig+0x458>
 800bb12:	4bb1      	ldr	r3, [pc, #708]	; (800bdd8 <UART_SetConfig+0x630>)
 800bb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb1a:	2b28      	cmp	r3, #40	; 0x28
 800bb1c:	d86c      	bhi.n	800bbf8 <UART_SetConfig+0x450>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <UART_SetConfig+0x37c>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bbc9 	.word	0x0800bbc9
 800bb28:	0800bbf9 	.word	0x0800bbf9
 800bb2c:	0800bbf9 	.word	0x0800bbf9
 800bb30:	0800bbf9 	.word	0x0800bbf9
 800bb34:	0800bbf9 	.word	0x0800bbf9
 800bb38:	0800bbf9 	.word	0x0800bbf9
 800bb3c:	0800bbf9 	.word	0x0800bbf9
 800bb40:	0800bbf9 	.word	0x0800bbf9
 800bb44:	0800bbd1 	.word	0x0800bbd1
 800bb48:	0800bbf9 	.word	0x0800bbf9
 800bb4c:	0800bbf9 	.word	0x0800bbf9
 800bb50:	0800bbf9 	.word	0x0800bbf9
 800bb54:	0800bbf9 	.word	0x0800bbf9
 800bb58:	0800bbf9 	.word	0x0800bbf9
 800bb5c:	0800bbf9 	.word	0x0800bbf9
 800bb60:	0800bbf9 	.word	0x0800bbf9
 800bb64:	0800bbd9 	.word	0x0800bbd9
 800bb68:	0800bbf9 	.word	0x0800bbf9
 800bb6c:	0800bbf9 	.word	0x0800bbf9
 800bb70:	0800bbf9 	.word	0x0800bbf9
 800bb74:	0800bbf9 	.word	0x0800bbf9
 800bb78:	0800bbf9 	.word	0x0800bbf9
 800bb7c:	0800bbf9 	.word	0x0800bbf9
 800bb80:	0800bbf9 	.word	0x0800bbf9
 800bb84:	0800bbe1 	.word	0x0800bbe1
 800bb88:	0800bbf9 	.word	0x0800bbf9
 800bb8c:	0800bbf9 	.word	0x0800bbf9
 800bb90:	0800bbf9 	.word	0x0800bbf9
 800bb94:	0800bbf9 	.word	0x0800bbf9
 800bb98:	0800bbf9 	.word	0x0800bbf9
 800bb9c:	0800bbf9 	.word	0x0800bbf9
 800bba0:	0800bbf9 	.word	0x0800bbf9
 800bba4:	0800bbe9 	.word	0x0800bbe9
 800bba8:	0800bbf9 	.word	0x0800bbf9
 800bbac:	0800bbf9 	.word	0x0800bbf9
 800bbb0:	0800bbf9 	.word	0x0800bbf9
 800bbb4:	0800bbf9 	.word	0x0800bbf9
 800bbb8:	0800bbf9 	.word	0x0800bbf9
 800bbbc:	0800bbf9 	.word	0x0800bbf9
 800bbc0:	0800bbf9 	.word	0x0800bbf9
 800bbc4:	0800bbf1 	.word	0x0800bbf1
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbce:	e1c0      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbd0:	2304      	movs	r3, #4
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd6:	e1bc      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbd8:	2308      	movs	r3, #8
 800bbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbde:	e1b8      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbe0:	2310      	movs	r3, #16
 800bbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe6:	e1b4      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbe8:	2320      	movs	r3, #32
 800bbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbee:	e1b0      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbf0:	2340      	movs	r3, #64	; 0x40
 800bbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf6:	e1ac      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bbf8:	2380      	movs	r3, #128	; 0x80
 800bbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbfe:	e1a8      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a75      	ldr	r2, [pc, #468]	; (800bddc <UART_SetConfig+0x634>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d130      	bne.n	800bc6c <UART_SetConfig+0x4c4>
 800bc0a:	4b73      	ldr	r3, [pc, #460]	; (800bdd8 <UART_SetConfig+0x630>)
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0e:	f003 0307 	and.w	r3, r3, #7
 800bc12:	2b05      	cmp	r3, #5
 800bc14:	d826      	bhi.n	800bc64 <UART_SetConfig+0x4bc>
 800bc16:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <UART_SetConfig+0x474>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bc35 	.word	0x0800bc35
 800bc20:	0800bc3d 	.word	0x0800bc3d
 800bc24:	0800bc45 	.word	0x0800bc45
 800bc28:	0800bc4d 	.word	0x0800bc4d
 800bc2c:	0800bc55 	.word	0x0800bc55
 800bc30:	0800bc5d 	.word	0x0800bc5d
 800bc34:	2300      	movs	r3, #0
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e18a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc42:	e186      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc44:	2308      	movs	r3, #8
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4a:	e182      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc52:	e17e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc54:	2320      	movs	r3, #32
 800bc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc5a:	e17a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc62:	e176      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc64:	2380      	movs	r3, #128	; 0x80
 800bc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc6a:	e172      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a5b      	ldr	r2, [pc, #364]	; (800bde0 <UART_SetConfig+0x638>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d130      	bne.n	800bcd8 <UART_SetConfig+0x530>
 800bc76:	4b58      	ldr	r3, [pc, #352]	; (800bdd8 <UART_SetConfig+0x630>)
 800bc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7a:	f003 0307 	and.w	r3, r3, #7
 800bc7e:	2b05      	cmp	r3, #5
 800bc80:	d826      	bhi.n	800bcd0 <UART_SetConfig+0x528>
 800bc82:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <UART_SetConfig+0x4e0>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bca1 	.word	0x0800bca1
 800bc8c:	0800bca9 	.word	0x0800bca9
 800bc90:	0800bcb1 	.word	0x0800bcb1
 800bc94:	0800bcb9 	.word	0x0800bcb9
 800bc98:	0800bcc1 	.word	0x0800bcc1
 800bc9c:	0800bcc9 	.word	0x0800bcc9
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e154      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e150      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb6:	e14c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcbe:	e148      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcc0:	2320      	movs	r3, #32
 800bcc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc6:	e144      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcc8:	2340      	movs	r3, #64	; 0x40
 800bcca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcce:	e140      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcd0:	2380      	movs	r3, #128	; 0x80
 800bcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd6:	e13c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a41      	ldr	r2, [pc, #260]	; (800bde4 <UART_SetConfig+0x63c>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f040 8082 	bne.w	800bde8 <UART_SetConfig+0x640>
 800bce4:	4b3c      	ldr	r3, [pc, #240]	; (800bdd8 <UART_SetConfig+0x630>)
 800bce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcec:	2b28      	cmp	r3, #40	; 0x28
 800bcee:	d86d      	bhi.n	800bdcc <UART_SetConfig+0x624>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <UART_SetConfig+0x550>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd9d 	.word	0x0800bd9d
 800bcfc:	0800bdcd 	.word	0x0800bdcd
 800bd00:	0800bdcd 	.word	0x0800bdcd
 800bd04:	0800bdcd 	.word	0x0800bdcd
 800bd08:	0800bdcd 	.word	0x0800bdcd
 800bd0c:	0800bdcd 	.word	0x0800bdcd
 800bd10:	0800bdcd 	.word	0x0800bdcd
 800bd14:	0800bdcd 	.word	0x0800bdcd
 800bd18:	0800bda5 	.word	0x0800bda5
 800bd1c:	0800bdcd 	.word	0x0800bdcd
 800bd20:	0800bdcd 	.word	0x0800bdcd
 800bd24:	0800bdcd 	.word	0x0800bdcd
 800bd28:	0800bdcd 	.word	0x0800bdcd
 800bd2c:	0800bdcd 	.word	0x0800bdcd
 800bd30:	0800bdcd 	.word	0x0800bdcd
 800bd34:	0800bdcd 	.word	0x0800bdcd
 800bd38:	0800bdad 	.word	0x0800bdad
 800bd3c:	0800bdcd 	.word	0x0800bdcd
 800bd40:	0800bdcd 	.word	0x0800bdcd
 800bd44:	0800bdcd 	.word	0x0800bdcd
 800bd48:	0800bdcd 	.word	0x0800bdcd
 800bd4c:	0800bdcd 	.word	0x0800bdcd
 800bd50:	0800bdcd 	.word	0x0800bdcd
 800bd54:	0800bdcd 	.word	0x0800bdcd
 800bd58:	0800bdb5 	.word	0x0800bdb5
 800bd5c:	0800bdcd 	.word	0x0800bdcd
 800bd60:	0800bdcd 	.word	0x0800bdcd
 800bd64:	0800bdcd 	.word	0x0800bdcd
 800bd68:	0800bdcd 	.word	0x0800bdcd
 800bd6c:	0800bdcd 	.word	0x0800bdcd
 800bd70:	0800bdcd 	.word	0x0800bdcd
 800bd74:	0800bdcd 	.word	0x0800bdcd
 800bd78:	0800bdbd 	.word	0x0800bdbd
 800bd7c:	0800bdcd 	.word	0x0800bdcd
 800bd80:	0800bdcd 	.word	0x0800bdcd
 800bd84:	0800bdcd 	.word	0x0800bdcd
 800bd88:	0800bdcd 	.word	0x0800bdcd
 800bd8c:	0800bdcd 	.word	0x0800bdcd
 800bd90:	0800bdcd 	.word	0x0800bdcd
 800bd94:	0800bdcd 	.word	0x0800bdcd
 800bd98:	0800bdc5 	.word	0x0800bdc5
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e0d6      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bda4:	2304      	movs	r3, #4
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdaa:	e0d2      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdac:	2308      	movs	r3, #8
 800bdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb2:	e0ce      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdba:	e0ca      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	e0c6      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e0c2      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdcc:	2380      	movs	r3, #128	; 0x80
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e0be      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bdd4:	40011400 	.word	0x40011400
 800bdd8:	58024400 	.word	0x58024400
 800bddc:	40007800 	.word	0x40007800
 800bde0:	40007c00 	.word	0x40007c00
 800bde4:	40011800 	.word	0x40011800
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4aad      	ldr	r2, [pc, #692]	; (800c0a4 <UART_SetConfig+0x8fc>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d176      	bne.n	800bee0 <UART_SetConfig+0x738>
 800bdf2:	4bad      	ldr	r3, [pc, #692]	; (800c0a8 <UART_SetConfig+0x900>)
 800bdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdfa:	2b28      	cmp	r3, #40	; 0x28
 800bdfc:	d86c      	bhi.n	800bed8 <UART_SetConfig+0x730>
 800bdfe:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <UART_SetConfig+0x65c>)
 800be00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be04:	0800bea9 	.word	0x0800bea9
 800be08:	0800bed9 	.word	0x0800bed9
 800be0c:	0800bed9 	.word	0x0800bed9
 800be10:	0800bed9 	.word	0x0800bed9
 800be14:	0800bed9 	.word	0x0800bed9
 800be18:	0800bed9 	.word	0x0800bed9
 800be1c:	0800bed9 	.word	0x0800bed9
 800be20:	0800bed9 	.word	0x0800bed9
 800be24:	0800beb1 	.word	0x0800beb1
 800be28:	0800bed9 	.word	0x0800bed9
 800be2c:	0800bed9 	.word	0x0800bed9
 800be30:	0800bed9 	.word	0x0800bed9
 800be34:	0800bed9 	.word	0x0800bed9
 800be38:	0800bed9 	.word	0x0800bed9
 800be3c:	0800bed9 	.word	0x0800bed9
 800be40:	0800bed9 	.word	0x0800bed9
 800be44:	0800beb9 	.word	0x0800beb9
 800be48:	0800bed9 	.word	0x0800bed9
 800be4c:	0800bed9 	.word	0x0800bed9
 800be50:	0800bed9 	.word	0x0800bed9
 800be54:	0800bed9 	.word	0x0800bed9
 800be58:	0800bed9 	.word	0x0800bed9
 800be5c:	0800bed9 	.word	0x0800bed9
 800be60:	0800bed9 	.word	0x0800bed9
 800be64:	0800bec1 	.word	0x0800bec1
 800be68:	0800bed9 	.word	0x0800bed9
 800be6c:	0800bed9 	.word	0x0800bed9
 800be70:	0800bed9 	.word	0x0800bed9
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800bed9 	.word	0x0800bed9
 800be7c:	0800bed9 	.word	0x0800bed9
 800be80:	0800bed9 	.word	0x0800bed9
 800be84:	0800bec9 	.word	0x0800bec9
 800be88:	0800bed9 	.word	0x0800bed9
 800be8c:	0800bed9 	.word	0x0800bed9
 800be90:	0800bed9 	.word	0x0800bed9
 800be94:	0800bed9 	.word	0x0800bed9
 800be98:	0800bed9 	.word	0x0800bed9
 800be9c:	0800bed9 	.word	0x0800bed9
 800bea0:	0800bed9 	.word	0x0800bed9
 800bea4:	0800bed1 	.word	0x0800bed1
 800bea8:	2301      	movs	r3, #1
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e050      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800beb0:	2304      	movs	r3, #4
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e04c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800beb8:	2308      	movs	r3, #8
 800beba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bebe:	e048      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bec0:	2310      	movs	r3, #16
 800bec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec6:	e044      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bec8:	2320      	movs	r3, #32
 800beca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bece:	e040      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bed0:	2340      	movs	r3, #64	; 0x40
 800bed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bed6:	e03c      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bed8:	2380      	movs	r3, #128	; 0x80
 800beda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bede:	e038      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a71      	ldr	r2, [pc, #452]	; (800c0ac <UART_SetConfig+0x904>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d130      	bne.n	800bf4c <UART_SetConfig+0x7a4>
 800beea:	4b6f      	ldr	r3, [pc, #444]	; (800c0a8 <UART_SetConfig+0x900>)
 800beec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beee:	f003 0307 	and.w	r3, r3, #7
 800bef2:	2b05      	cmp	r3, #5
 800bef4:	d826      	bhi.n	800bf44 <UART_SetConfig+0x79c>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <UART_SetConfig+0x754>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf15 	.word	0x0800bf15
 800bf00:	0800bf1d 	.word	0x0800bf1d
 800bf04:	0800bf25 	.word	0x0800bf25
 800bf08:	0800bf2d 	.word	0x0800bf2d
 800bf0c:	0800bf35 	.word	0x0800bf35
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	2302      	movs	r3, #2
 800bf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1a:	e01a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf22:	e016      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf24:	2308      	movs	r3, #8
 800bf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf2a:	e012      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf32:	e00e      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf34:	2320      	movs	r3, #32
 800bf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf3a:	e00a      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf42:	e006      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf44:	2380      	movs	r3, #128	; 0x80
 800bf46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf4a:	e002      	b.n	800bf52 <UART_SetConfig+0x7aa>
 800bf4c:	2380      	movs	r3, #128	; 0x80
 800bf4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a55      	ldr	r2, [pc, #340]	; (800c0ac <UART_SetConfig+0x904>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	f040 80f0 	bne.w	800c13e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	dc46      	bgt.n	800bff4 <UART_SetConfig+0x84c>
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	db75      	blt.n	800c056 <UART_SetConfig+0x8ae>
 800bf6a:	3b02      	subs	r3, #2
 800bf6c:	2b1e      	cmp	r3, #30
 800bf6e:	d872      	bhi.n	800c056 <UART_SetConfig+0x8ae>
 800bf70:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0x7d0>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bffb 	.word	0x0800bffb
 800bf7c:	0800c057 	.word	0x0800c057
 800bf80:	0800c003 	.word	0x0800c003
 800bf84:	0800c057 	.word	0x0800c057
 800bf88:	0800c057 	.word	0x0800c057
 800bf8c:	0800c057 	.word	0x0800c057
 800bf90:	0800c013 	.word	0x0800c013
 800bf94:	0800c057 	.word	0x0800c057
 800bf98:	0800c057 	.word	0x0800c057
 800bf9c:	0800c057 	.word	0x0800c057
 800bfa0:	0800c057 	.word	0x0800c057
 800bfa4:	0800c057 	.word	0x0800c057
 800bfa8:	0800c057 	.word	0x0800c057
 800bfac:	0800c057 	.word	0x0800c057
 800bfb0:	0800c023 	.word	0x0800c023
 800bfb4:	0800c057 	.word	0x0800c057
 800bfb8:	0800c057 	.word	0x0800c057
 800bfbc:	0800c057 	.word	0x0800c057
 800bfc0:	0800c057 	.word	0x0800c057
 800bfc4:	0800c057 	.word	0x0800c057
 800bfc8:	0800c057 	.word	0x0800c057
 800bfcc:	0800c057 	.word	0x0800c057
 800bfd0:	0800c057 	.word	0x0800c057
 800bfd4:	0800c057 	.word	0x0800c057
 800bfd8:	0800c057 	.word	0x0800c057
 800bfdc:	0800c057 	.word	0x0800c057
 800bfe0:	0800c057 	.word	0x0800c057
 800bfe4:	0800c057 	.word	0x0800c057
 800bfe8:	0800c057 	.word	0x0800c057
 800bfec:	0800c057 	.word	0x0800c057
 800bff0:	0800c049 	.word	0x0800c049
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	d02a      	beq.n	800c04e <UART_SetConfig+0x8a6>
 800bff8:	e02d      	b.n	800c056 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bffa:	f7fc ffa1 	bl	8008f40 <HAL_RCCEx_GetD3PCLK1Freq>
 800bffe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c000:	e02f      	b.n	800c062 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c002:	f107 0314 	add.w	r3, r7, #20
 800c006:	4618      	mov	r0, r3
 800c008:	f7fc ffb0 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c010:	e027      	b.n	800c062 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c012:	f107 0308 	add.w	r3, r7, #8
 800c016:	4618      	mov	r0, r3
 800c018:	f7fd f8fc 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c020:	e01f      	b.n	800c062 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c022:	4b21      	ldr	r3, [pc, #132]	; (800c0a8 <UART_SetConfig+0x900>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0320 	and.w	r3, r3, #32
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c02e:	4b1e      	ldr	r3, [pc, #120]	; (800c0a8 <UART_SetConfig+0x900>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	08db      	lsrs	r3, r3, #3
 800c034:	f003 0303 	and.w	r3, r3, #3
 800c038:	4a1d      	ldr	r2, [pc, #116]	; (800c0b0 <UART_SetConfig+0x908>)
 800c03a:	fa22 f303 	lsr.w	r3, r2, r3
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c040:	e00f      	b.n	800c062 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c042:	4b1b      	ldr	r3, [pc, #108]	; (800c0b0 <UART_SetConfig+0x908>)
 800c044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c046:	e00c      	b.n	800c062 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <UART_SetConfig+0x90c>)
 800c04a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c04c:	e009      	b.n	800c062 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c054:	e005      	b.n	800c062 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 81e6 	beq.w	800c436 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	4a12      	ldr	r2, [pc, #72]	; (800c0b8 <UART_SetConfig+0x910>)
 800c070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c074:	461a      	mov	r2, r3
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	fbb3 f3f2 	udiv	r3, r3, r2
 800c07c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	4413      	add	r3, r2
 800c088:	6a3a      	ldr	r2, [r7, #32]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d305      	bcc.n	800c09a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c094:	6a3a      	ldr	r2, [r7, #32]
 800c096:	429a      	cmp	r2, r3
 800c098:	d910      	bls.n	800c0bc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0a0:	e1c9      	b.n	800c436 <UART_SetConfig+0xc8e>
 800c0a2:	bf00      	nop
 800c0a4:	40011c00 	.word	0x40011c00
 800c0a8:	58024400 	.word	0x58024400
 800c0ac:	58000c00 	.word	0x58000c00
 800c0b0:	03d09000 	.word	0x03d09000
 800c0b4:	003d0900 	.word	0x003d0900
 800c0b8:	0800f43c 	.word	0x0800f43c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f04f 0100 	mov.w	r1, #0
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	4ac1      	ldr	r2, [pc, #772]	; (800c3d0 <UART_SetConfig+0xc28>)
 800c0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	f7f4 f974 	bl	80003c0 <__aeabi_uldivmod>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	f04f 0200 	mov.w	r2, #0
 800c0e4:	f04f 0300 	mov.w	r3, #0
 800c0e8:	020b      	lsls	r3, r1, #8
 800c0ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c0ee:	0202      	lsls	r2, r0, #8
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	6849      	ldr	r1, [r1, #4]
 800c0f4:	0849      	lsrs	r1, r1, #1
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	f04f 0100 	mov.w	r1, #0
 800c0fc:	1814      	adds	r4, r2, r0
 800c0fe:	eb43 0501 	adc.w	r5, r3, r1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	461a      	mov	r2, r3
 800c108:	f04f 0300 	mov.w	r3, #0
 800c10c:	4620      	mov	r0, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 f956 	bl	80003c0 <__aeabi_uldivmod>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4613      	mov	r3, r2
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c122:	d308      	bcc.n	800c136 <UART_SetConfig+0x98e>
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c12a:	d204      	bcs.n	800c136 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c132:	60da      	str	r2, [r3, #12]
 800c134:	e17f      	b.n	800c436 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c13c:	e17b      	b.n	800c436 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c146:	f040 80bd 	bne.w	800c2c4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c14a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c14e:	2b20      	cmp	r3, #32
 800c150:	dc48      	bgt.n	800c1e4 <UART_SetConfig+0xa3c>
 800c152:	2b00      	cmp	r3, #0
 800c154:	db7b      	blt.n	800c24e <UART_SetConfig+0xaa6>
 800c156:	2b20      	cmp	r3, #32
 800c158:	d879      	bhi.n	800c24e <UART_SetConfig+0xaa6>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <UART_SetConfig+0x9b8>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c1eb 	.word	0x0800c1eb
 800c164:	0800c1f3 	.word	0x0800c1f3
 800c168:	0800c24f 	.word	0x0800c24f
 800c16c:	0800c24f 	.word	0x0800c24f
 800c170:	0800c1fb 	.word	0x0800c1fb
 800c174:	0800c24f 	.word	0x0800c24f
 800c178:	0800c24f 	.word	0x0800c24f
 800c17c:	0800c24f 	.word	0x0800c24f
 800c180:	0800c20b 	.word	0x0800c20b
 800c184:	0800c24f 	.word	0x0800c24f
 800c188:	0800c24f 	.word	0x0800c24f
 800c18c:	0800c24f 	.word	0x0800c24f
 800c190:	0800c24f 	.word	0x0800c24f
 800c194:	0800c24f 	.word	0x0800c24f
 800c198:	0800c24f 	.word	0x0800c24f
 800c19c:	0800c24f 	.word	0x0800c24f
 800c1a0:	0800c21b 	.word	0x0800c21b
 800c1a4:	0800c24f 	.word	0x0800c24f
 800c1a8:	0800c24f 	.word	0x0800c24f
 800c1ac:	0800c24f 	.word	0x0800c24f
 800c1b0:	0800c24f 	.word	0x0800c24f
 800c1b4:	0800c24f 	.word	0x0800c24f
 800c1b8:	0800c24f 	.word	0x0800c24f
 800c1bc:	0800c24f 	.word	0x0800c24f
 800c1c0:	0800c24f 	.word	0x0800c24f
 800c1c4:	0800c24f 	.word	0x0800c24f
 800c1c8:	0800c24f 	.word	0x0800c24f
 800c1cc:	0800c24f 	.word	0x0800c24f
 800c1d0:	0800c24f 	.word	0x0800c24f
 800c1d4:	0800c24f 	.word	0x0800c24f
 800c1d8:	0800c24f 	.word	0x0800c24f
 800c1dc:	0800c24f 	.word	0x0800c24f
 800c1e0:	0800c241 	.word	0x0800c241
 800c1e4:	2b40      	cmp	r3, #64	; 0x40
 800c1e6:	d02e      	beq.n	800c246 <UART_SetConfig+0xa9e>
 800c1e8:	e031      	b.n	800c24e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ea:	f7fb fb43 	bl	8007874 <HAL_RCC_GetPCLK1Freq>
 800c1ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1f0:	e033      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1f2:	f7fb fb55 	bl	80078a0 <HAL_RCC_GetPCLK2Freq>
 800c1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1f8:	e02f      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1fa:	f107 0314 	add.w	r3, r7, #20
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fc feb4 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c208:	e027      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fd f800 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c218:	e01f      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c21a:	4b6e      	ldr	r3, [pc, #440]	; (800c3d4 <UART_SetConfig+0xc2c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0320 	and.w	r3, r3, #32
 800c222:	2b00      	cmp	r3, #0
 800c224:	d009      	beq.n	800c23a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c226:	4b6b      	ldr	r3, [pc, #428]	; (800c3d4 <UART_SetConfig+0xc2c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	08db      	lsrs	r3, r3, #3
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	4a69      	ldr	r2, [pc, #420]	; (800c3d8 <UART_SetConfig+0xc30>)
 800c232:	fa22 f303 	lsr.w	r3, r2, r3
 800c236:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c238:	e00f      	b.n	800c25a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800c23a:	4b67      	ldr	r3, [pc, #412]	; (800c3d8 <UART_SetConfig+0xc30>)
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23e:	e00c      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c240:	4b66      	ldr	r3, [pc, #408]	; (800c3dc <UART_SetConfig+0xc34>)
 800c242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c244:	e009      	b.n	800c25a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c24c:	e005      	b.n	800c25a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 80ea 	beq.w	800c436 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c266:	4a5a      	ldr	r2, [pc, #360]	; (800c3d0 <UART_SetConfig+0xc28>)
 800c268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	fbb3 f3f2 	udiv	r3, r3, r2
 800c274:	005a      	lsls	r2, r3, #1
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	085b      	lsrs	r3, r3, #1
 800c27c:	441a      	add	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	fbb2 f3f3 	udiv	r3, r2, r3
 800c286:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	2b0f      	cmp	r3, #15
 800c28c:	d916      	bls.n	800c2bc <UART_SetConfig+0xb14>
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c294:	d212      	bcs.n	800c2bc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	b29b      	uxth	r3, r3
 800c29a:	f023 030f 	bic.w	r3, r3, #15
 800c29e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2b8:	60da      	str	r2, [r3, #12]
 800c2ba:	e0bc      	b.n	800c436 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c2c2:	e0b8      	b.n	800c436 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2c8:	2b20      	cmp	r3, #32
 800c2ca:	dc4b      	bgt.n	800c364 <UART_SetConfig+0xbbc>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f2c0 8087 	blt.w	800c3e0 <UART_SetConfig+0xc38>
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	f200 8084 	bhi.w	800c3e0 <UART_SetConfig+0xc38>
 800c2d8:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <UART_SetConfig+0xb38>)
 800c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2de:	bf00      	nop
 800c2e0:	0800c36b 	.word	0x0800c36b
 800c2e4:	0800c373 	.word	0x0800c373
 800c2e8:	0800c3e1 	.word	0x0800c3e1
 800c2ec:	0800c3e1 	.word	0x0800c3e1
 800c2f0:	0800c37b 	.word	0x0800c37b
 800c2f4:	0800c3e1 	.word	0x0800c3e1
 800c2f8:	0800c3e1 	.word	0x0800c3e1
 800c2fc:	0800c3e1 	.word	0x0800c3e1
 800c300:	0800c38b 	.word	0x0800c38b
 800c304:	0800c3e1 	.word	0x0800c3e1
 800c308:	0800c3e1 	.word	0x0800c3e1
 800c30c:	0800c3e1 	.word	0x0800c3e1
 800c310:	0800c3e1 	.word	0x0800c3e1
 800c314:	0800c3e1 	.word	0x0800c3e1
 800c318:	0800c3e1 	.word	0x0800c3e1
 800c31c:	0800c3e1 	.word	0x0800c3e1
 800c320:	0800c39b 	.word	0x0800c39b
 800c324:	0800c3e1 	.word	0x0800c3e1
 800c328:	0800c3e1 	.word	0x0800c3e1
 800c32c:	0800c3e1 	.word	0x0800c3e1
 800c330:	0800c3e1 	.word	0x0800c3e1
 800c334:	0800c3e1 	.word	0x0800c3e1
 800c338:	0800c3e1 	.word	0x0800c3e1
 800c33c:	0800c3e1 	.word	0x0800c3e1
 800c340:	0800c3e1 	.word	0x0800c3e1
 800c344:	0800c3e1 	.word	0x0800c3e1
 800c348:	0800c3e1 	.word	0x0800c3e1
 800c34c:	0800c3e1 	.word	0x0800c3e1
 800c350:	0800c3e1 	.word	0x0800c3e1
 800c354:	0800c3e1 	.word	0x0800c3e1
 800c358:	0800c3e1 	.word	0x0800c3e1
 800c35c:	0800c3e1 	.word	0x0800c3e1
 800c360:	0800c3c1 	.word	0x0800c3c1
 800c364:	2b40      	cmp	r3, #64	; 0x40
 800c366:	d02e      	beq.n	800c3c6 <UART_SetConfig+0xc1e>
 800c368:	e03a      	b.n	800c3e0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c36a:	f7fb fa83 	bl	8007874 <HAL_RCC_GetPCLK1Freq>
 800c36e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c370:	e03c      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c372:	f7fb fa95 	bl	80078a0 <HAL_RCC_GetPCLK2Freq>
 800c376:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c378:	e038      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c37a:	f107 0314 	add.w	r3, r7, #20
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fc fdf4 	bl	8008f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c388:	e030      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c38a:	f107 0308 	add.w	r3, r7, #8
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fc ff40 	bl	8009214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c398:	e028      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c39a:	4b0e      	ldr	r3, [pc, #56]	; (800c3d4 <UART_SetConfig+0xc2c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0320 	and.w	r3, r3, #32
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d009      	beq.n	800c3ba <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <UART_SetConfig+0xc2c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	08db      	lsrs	r3, r3, #3
 800c3ac:	f003 0303 	and.w	r3, r3, #3
 800c3b0:	4a09      	ldr	r2, [pc, #36]	; (800c3d8 <UART_SetConfig+0xc30>)
 800c3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3b8:	e018      	b.n	800c3ec <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <UART_SetConfig+0xc30>)
 800c3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3be:	e015      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <UART_SetConfig+0xc34>)
 800c3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3c4:	e012      	b.n	800c3ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3cc:	e00e      	b.n	800c3ec <UART_SetConfig+0xc44>
 800c3ce:	bf00      	nop
 800c3d0:	0800f43c 	.word	0x0800f43c
 800c3d4:	58024400 	.word	0x58024400
 800c3d8:	03d09000 	.word	0x03d09000
 800c3dc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c3ea:	bf00      	nop
    }

    if (pclk != 0U)
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d021      	beq.n	800c436 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f6:	4a1a      	ldr	r2, [pc, #104]	; (800c460 <UART_SetConfig+0xcb8>)
 800c3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	fbb3 f2f2 	udiv	r2, r3, r2
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	085b      	lsrs	r3, r3, #1
 800c40a:	441a      	add	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	fbb2 f3f3 	udiv	r3, r2, r3
 800c414:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	2b0f      	cmp	r3, #15
 800c41a:	d909      	bls.n	800c430 <UART_SetConfig+0xc88>
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c422:	d205      	bcs.n	800c430 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	60da      	str	r2, [r3, #12]
 800c42e:	e002      	b.n	800c436 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c452:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c456:	4618      	mov	r0, r3
 800c458:	3738      	adds	r7, #56	; 0x38
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bdb0      	pop	{r4, r5, r7, pc}
 800c45e:	bf00      	nop
 800c460:	0800f43c 	.word	0x0800f43c

0800c464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00a      	beq.n	800c48e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	430a      	orrs	r2, r1
 800c48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	f003 0302 	and.w	r3, r3, #2
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00a      	beq.n	800c4b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	430a      	orrs	r2, r1
 800c4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00a      	beq.n	800c4d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d6:	f003 0308 	and.w	r3, r3, #8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00a      	beq.n	800c4f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f8:	f003 0310 	and.w	r3, r3, #16
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00a      	beq.n	800c516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	430a      	orrs	r2, r1
 800c514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51a:	f003 0320 	and.w	r3, r3, #32
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00a      	beq.n	800c538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	430a      	orrs	r2, r1
 800c536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01a      	beq.n	800c57a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c562:	d10a      	bne.n	800c57a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00a      	beq.n	800c59c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	430a      	orrs	r2, r1
 800c59a:	605a      	str	r2, [r3, #4]
  }
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af02      	add	r7, sp, #8
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5b8:	f7f6 fc0a 	bl	8002dd0 <HAL_GetTick>
 800c5bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b08      	cmp	r3, #8
 800c5ca:	d10e      	bne.n	800c5ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f82f 	bl	800c63e <UART_WaitOnFlagUntilTimeout>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e025      	b.n	800c636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	2b04      	cmp	r3, #4
 800c5f6:	d10e      	bne.n	800c616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f819 	bl	800c63e <UART_WaitOnFlagUntilTimeout>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c612:	2303      	movs	r3, #3
 800c614:	e00f      	b.n	800c636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2220      	movs	r2, #32
 800c61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b09c      	sub	sp, #112	; 0x70
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	603b      	str	r3, [r7, #0]
 800c64a:	4613      	mov	r3, r2
 800c64c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c64e:	e0a9      	b.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c656:	f000 80a5 	beq.w	800c7a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c65a:	f7f6 fbb9 	bl	8002dd0 <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c666:	429a      	cmp	r2, r3
 800c668:	d302      	bcc.n	800c670 <UART_WaitOnFlagUntilTimeout+0x32>
 800c66a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d140      	bne.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c678:	e853 3f00 	ldrex	r3, [r3]
 800c67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c684:	667b      	str	r3, [r7, #100]	; 0x64
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	461a      	mov	r2, r3
 800c68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c690:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c696:	e841 2300 	strex	r3, r2, [r1]
 800c69a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1e6      	bne.n	800c670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ac:	e853 3f00 	ldrex	r3, [r3]
 800c6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b4:	f023 0301 	bic.w	r3, r3, #1
 800c6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3308      	adds	r3, #8
 800c6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6ca:	e841 2300 	strex	r3, r2, [r1]
 800c6ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1e5      	bne.n	800c6a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2220      	movs	r2, #32
 800c6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e069      	b.n	800c7c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d051      	beq.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c70e:	d149      	bne.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	e853 3f00 	ldrex	r3, [r3]
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	461a      	mov	r2, r3
 800c736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c738:	637b      	str	r3, [r7, #52]	; 0x34
 800c73a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c740:	e841 2300 	strex	r3, r2, [r1]
 800c744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1e6      	bne.n	800c71a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3308      	adds	r3, #8
 800c752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	e853 3f00 	ldrex	r3, [r3]
 800c75a:	613b      	str	r3, [r7, #16]
   return(result);
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f023 0301 	bic.w	r3, r3, #1
 800c762:	66bb      	str	r3, [r7, #104]	; 0x68
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3308      	adds	r3, #8
 800c76a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c76c:	623a      	str	r2, [r7, #32]
 800c76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c770:	69f9      	ldr	r1, [r7, #28]
 800c772:	6a3a      	ldr	r2, [r7, #32]
 800c774:	e841 2300 	strex	r3, r2, [r1]
 800c778:	61bb      	str	r3, [r7, #24]
   return(result);
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1e5      	bne.n	800c74c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2220      	movs	r2, #32
 800c784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2220      	movs	r2, #32
 800c78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2220      	movs	r2, #32
 800c794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e010      	b.n	800c7c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	69da      	ldr	r2, [r3, #28]
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	bf0c      	ite	eq
 800c7b4:	2301      	moveq	r3, #1
 800c7b6:	2300      	movne	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	f43f af46 	beq.w	800c650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3770      	adds	r7, #112	; 0x70
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d101      	bne.n	800c7e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7e0:	2302      	movs	r3, #2
 800c7e2:	e027      	b.n	800c834 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2224      	movs	r2, #36	; 0x24
 800c7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0201 	bic.w	r2, r2, #1
 800c80a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2220      	movs	r2, #32
 800c826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c850:	2b01      	cmp	r3, #1
 800c852:	d101      	bne.n	800c858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c854:	2302      	movs	r3, #2
 800c856:	e02d      	b.n	800c8b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2224      	movs	r2, #36	; 0x24
 800c864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f022 0201 	bic.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f84f 	bl	800c938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d101      	bne.n	800c8d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e02d      	b.n	800c930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2224      	movs	r2, #36	; 0x24
 800c8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f022 0201 	bic.w	r2, r2, #1
 800c8fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	430a      	orrs	r2, r1
 800c90e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f811 	bl	800c938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2220      	movs	r2, #32
 800c922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c944:	2b00      	cmp	r3, #0
 800c946:	d108      	bne.n	800c95a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c958:	e031      	b.n	800c9be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c95a:	2310      	movs	r3, #16
 800c95c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c95e:	2310      	movs	r3, #16
 800c960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	0e5b      	lsrs	r3, r3, #25
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	f003 0307 	and.w	r3, r3, #7
 800c970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	0f5b      	lsrs	r3, r3, #29
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	7b3a      	ldrb	r2, [r7, #12]
 800c986:	4911      	ldr	r1, [pc, #68]	; (800c9cc <UARTEx_SetNbDataToProcess+0x94>)
 800c988:	5c8a      	ldrb	r2, [r1, r2]
 800c98a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c98e:	7b3a      	ldrb	r2, [r7, #12]
 800c990:	490f      	ldr	r1, [pc, #60]	; (800c9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c994:	fb93 f3f2 	sdiv	r3, r3, r2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	7b7a      	ldrb	r2, [r7, #13]
 800c9a4:	4909      	ldr	r1, [pc, #36]	; (800c9cc <UARTEx_SetNbDataToProcess+0x94>)
 800c9a6:	5c8a      	ldrb	r2, [r1, r2]
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9ac:	7b7a      	ldrb	r2, [r7, #13]
 800c9ae:	4908      	ldr	r1, [pc, #32]	; (800c9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c9b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c9be:	bf00      	nop
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	0800f454 	.word	0x0800f454
 800c9d0:	0800f45c 	.word	0x0800f45c

0800c9d4 <__errno>:
 800c9d4:	4b01      	ldr	r3, [pc, #4]	; (800c9dc <__errno+0x8>)
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	24000010 	.word	0x24000010

0800c9e0 <__libc_init_array>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4d0d      	ldr	r5, [pc, #52]	; (800ca18 <__libc_init_array+0x38>)
 800c9e4:	4c0d      	ldr	r4, [pc, #52]	; (800ca1c <__libc_init_array+0x3c>)
 800c9e6:	1b64      	subs	r4, r4, r5
 800c9e8:	10a4      	asrs	r4, r4, #2
 800c9ea:	2600      	movs	r6, #0
 800c9ec:	42a6      	cmp	r6, r4
 800c9ee:	d109      	bne.n	800ca04 <__libc_init_array+0x24>
 800c9f0:	4d0b      	ldr	r5, [pc, #44]	; (800ca20 <__libc_init_array+0x40>)
 800c9f2:	4c0c      	ldr	r4, [pc, #48]	; (800ca24 <__libc_init_array+0x44>)
 800c9f4:	f002 fcee 	bl	800f3d4 <_init>
 800c9f8:	1b64      	subs	r4, r4, r5
 800c9fa:	10a4      	asrs	r4, r4, #2
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	42a6      	cmp	r6, r4
 800ca00:	d105      	bne.n	800ca0e <__libc_init_array+0x2e>
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca08:	4798      	blx	r3
 800ca0a:	3601      	adds	r6, #1
 800ca0c:	e7ee      	b.n	800c9ec <__libc_init_array+0xc>
 800ca0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca12:	4798      	blx	r3
 800ca14:	3601      	adds	r6, #1
 800ca16:	e7f2      	b.n	800c9fe <__libc_init_array+0x1e>
 800ca18:	0800f84c 	.word	0x0800f84c
 800ca1c:	0800f84c 	.word	0x0800f84c
 800ca20:	0800f84c 	.word	0x0800f84c
 800ca24:	0800f850 	.word	0x0800f850

0800ca28 <memcpy>:
 800ca28:	440a      	add	r2, r1
 800ca2a:	4291      	cmp	r1, r2
 800ca2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca30:	d100      	bne.n	800ca34 <memcpy+0xc>
 800ca32:	4770      	bx	lr
 800ca34:	b510      	push	{r4, lr}
 800ca36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca3e:	4291      	cmp	r1, r2
 800ca40:	d1f9      	bne.n	800ca36 <memcpy+0xe>
 800ca42:	bd10      	pop	{r4, pc}

0800ca44 <memset>:
 800ca44:	4402      	add	r2, r0
 800ca46:	4603      	mov	r3, r0
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d100      	bne.n	800ca4e <memset+0xa>
 800ca4c:	4770      	bx	lr
 800ca4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca52:	e7f9      	b.n	800ca48 <memset+0x4>

0800ca54 <__cvt>:
 800ca54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca56:	ed2d 8b02 	vpush	{d8}
 800ca5a:	eeb0 8b40 	vmov.f64	d8, d0
 800ca5e:	b085      	sub	sp, #20
 800ca60:	4617      	mov	r7, r2
 800ca62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ca64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ca66:	ee18 2a90 	vmov	r2, s17
 800ca6a:	f025 0520 	bic.w	r5, r5, #32
 800ca6e:	2a00      	cmp	r2, #0
 800ca70:	bfb6      	itet	lt
 800ca72:	222d      	movlt	r2, #45	; 0x2d
 800ca74:	2200      	movge	r2, #0
 800ca76:	eeb1 8b40 	vneglt.f64	d8, d0
 800ca7a:	2d46      	cmp	r5, #70	; 0x46
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	d004      	beq.n	800ca8c <__cvt+0x38>
 800ca82:	2d45      	cmp	r5, #69	; 0x45
 800ca84:	d100      	bne.n	800ca88 <__cvt+0x34>
 800ca86:	3401      	adds	r4, #1
 800ca88:	2102      	movs	r1, #2
 800ca8a:	e000      	b.n	800ca8e <__cvt+0x3a>
 800ca8c:	2103      	movs	r1, #3
 800ca8e:	ab03      	add	r3, sp, #12
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	ab02      	add	r3, sp, #8
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4622      	mov	r2, r4
 800ca98:	4633      	mov	r3, r6
 800ca9a:	eeb0 0b48 	vmov.f64	d0, d8
 800ca9e:	f000 fdf7 	bl	800d690 <_dtoa_r>
 800caa2:	2d47      	cmp	r5, #71	; 0x47
 800caa4:	d109      	bne.n	800caba <__cvt+0x66>
 800caa6:	07fb      	lsls	r3, r7, #31
 800caa8:	d407      	bmi.n	800caba <__cvt+0x66>
 800caaa:	9b03      	ldr	r3, [sp, #12]
 800caac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caae:	1a1b      	subs	r3, r3, r0
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	b005      	add	sp, #20
 800cab4:	ecbd 8b02 	vpop	{d8}
 800cab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caba:	2d46      	cmp	r5, #70	; 0x46
 800cabc:	eb00 0204 	add.w	r2, r0, r4
 800cac0:	d10c      	bne.n	800cadc <__cvt+0x88>
 800cac2:	7803      	ldrb	r3, [r0, #0]
 800cac4:	2b30      	cmp	r3, #48	; 0x30
 800cac6:	d107      	bne.n	800cad8 <__cvt+0x84>
 800cac8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	bf1c      	itt	ne
 800cad2:	f1c4 0401 	rsbne	r4, r4, #1
 800cad6:	6034      	strne	r4, [r6, #0]
 800cad8:	6833      	ldr	r3, [r6, #0]
 800cada:	441a      	add	r2, r3
 800cadc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae4:	bf08      	it	eq
 800cae6:	9203      	streq	r2, [sp, #12]
 800cae8:	2130      	movs	r1, #48	; 0x30
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	4293      	cmp	r3, r2
 800caee:	d2dc      	bcs.n	800caaa <__cvt+0x56>
 800caf0:	1c5c      	adds	r4, r3, #1
 800caf2:	9403      	str	r4, [sp, #12]
 800caf4:	7019      	strb	r1, [r3, #0]
 800caf6:	e7f8      	b.n	800caea <__cvt+0x96>

0800caf8 <__exponent>:
 800caf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafa:	4603      	mov	r3, r0
 800cafc:	2900      	cmp	r1, #0
 800cafe:	bfb8      	it	lt
 800cb00:	4249      	neglt	r1, r1
 800cb02:	f803 2b02 	strb.w	r2, [r3], #2
 800cb06:	bfb4      	ite	lt
 800cb08:	222d      	movlt	r2, #45	; 0x2d
 800cb0a:	222b      	movge	r2, #43	; 0x2b
 800cb0c:	2909      	cmp	r1, #9
 800cb0e:	7042      	strb	r2, [r0, #1]
 800cb10:	dd2a      	ble.n	800cb68 <__exponent+0x70>
 800cb12:	f10d 0407 	add.w	r4, sp, #7
 800cb16:	46a4      	mov	ip, r4
 800cb18:	270a      	movs	r7, #10
 800cb1a:	46a6      	mov	lr, r4
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb22:	fb07 1516 	mls	r5, r7, r6, r1
 800cb26:	3530      	adds	r5, #48	; 0x30
 800cb28:	2a63      	cmp	r2, #99	; 0x63
 800cb2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb32:	4631      	mov	r1, r6
 800cb34:	dcf1      	bgt.n	800cb1a <__exponent+0x22>
 800cb36:	3130      	adds	r1, #48	; 0x30
 800cb38:	f1ae 0502 	sub.w	r5, lr, #2
 800cb3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb40:	1c44      	adds	r4, r0, #1
 800cb42:	4629      	mov	r1, r5
 800cb44:	4561      	cmp	r1, ip
 800cb46:	d30a      	bcc.n	800cb5e <__exponent+0x66>
 800cb48:	f10d 0209 	add.w	r2, sp, #9
 800cb4c:	eba2 020e 	sub.w	r2, r2, lr
 800cb50:	4565      	cmp	r5, ip
 800cb52:	bf88      	it	hi
 800cb54:	2200      	movhi	r2, #0
 800cb56:	4413      	add	r3, r2
 800cb58:	1a18      	subs	r0, r3, r0
 800cb5a:	b003      	add	sp, #12
 800cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb66:	e7ed      	b.n	800cb44 <__exponent+0x4c>
 800cb68:	2330      	movs	r3, #48	; 0x30
 800cb6a:	3130      	adds	r1, #48	; 0x30
 800cb6c:	7083      	strb	r3, [r0, #2]
 800cb6e:	70c1      	strb	r1, [r0, #3]
 800cb70:	1d03      	adds	r3, r0, #4
 800cb72:	e7f1      	b.n	800cb58 <__exponent+0x60>
 800cb74:	0000      	movs	r0, r0
	...

0800cb78 <_printf_float>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	b08b      	sub	sp, #44	; 0x2c
 800cb7e:	460c      	mov	r4, r1
 800cb80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cb84:	4616      	mov	r6, r2
 800cb86:	461f      	mov	r7, r3
 800cb88:	4605      	mov	r5, r0
 800cb8a:	f001 fcbb 	bl	800e504 <_localeconv_r>
 800cb8e:	f8d0 b000 	ldr.w	fp, [r0]
 800cb92:	4658      	mov	r0, fp
 800cb94:	f7f3 fbbc 	bl	8000310 <strlen>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9308      	str	r3, [sp, #32]
 800cb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cba4:	6822      	ldr	r2, [r4, #0]
 800cba6:	3307      	adds	r3, #7
 800cba8:	f023 0307 	bic.w	r3, r3, #7
 800cbac:	f103 0108 	add.w	r1, r3, #8
 800cbb0:	f8c8 1000 	str.w	r1, [r8]
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cbbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ce20 <_printf_float+0x2a8>
 800cbc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cbc6:	eeb0 6bc0 	vabs.f64	d6, d0
 800cbca:	eeb4 6b47 	vcmp.f64	d6, d7
 800cbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd2:	dd24      	ble.n	800cc1e <_printf_float+0xa6>
 800cbd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbdc:	d502      	bpl.n	800cbe4 <_printf_float+0x6c>
 800cbde:	232d      	movs	r3, #45	; 0x2d
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe4:	4b90      	ldr	r3, [pc, #576]	; (800ce28 <_printf_float+0x2b0>)
 800cbe6:	4891      	ldr	r0, [pc, #580]	; (800ce2c <_printf_float+0x2b4>)
 800cbe8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cbec:	bf94      	ite	ls
 800cbee:	4698      	movls	r8, r3
 800cbf0:	4680      	movhi	r8, r0
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	f022 0204 	bic.w	r2, r2, #4
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6022      	str	r2, [r4, #0]
 800cbfe:	9304      	str	r3, [sp, #16]
 800cc00:	9700      	str	r7, [sp, #0]
 800cc02:	4633      	mov	r3, r6
 800cc04:	aa09      	add	r2, sp, #36	; 0x24
 800cc06:	4621      	mov	r1, r4
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f000 f9d3 	bl	800cfb4 <_printf_common>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	f040 808a 	bne.w	800cd28 <_printf_float+0x1b0>
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	b00b      	add	sp, #44	; 0x2c
 800cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc26:	d709      	bvc.n	800cc3c <_printf_float+0xc4>
 800cc28:	ee10 3a90 	vmov	r3, s1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfbc      	itt	lt
 800cc30:	232d      	movlt	r3, #45	; 0x2d
 800cc32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc36:	487e      	ldr	r0, [pc, #504]	; (800ce30 <_printf_float+0x2b8>)
 800cc38:	4b7e      	ldr	r3, [pc, #504]	; (800ce34 <_printf_float+0x2bc>)
 800cc3a:	e7d5      	b.n	800cbe8 <_printf_float+0x70>
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cc42:	9104      	str	r1, [sp, #16]
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	d13c      	bne.n	800ccc2 <_printf_float+0x14a>
 800cc48:	2306      	movs	r3, #6
 800cc4a:	6063      	str	r3, [r4, #4]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	ab08      	add	r3, sp, #32
 800cc52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cc56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc5a:	ab07      	add	r3, sp, #28
 800cc5c:	6861      	ldr	r1, [r4, #4]
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	6022      	str	r2, [r4, #0]
 800cc62:	f10d 031b 	add.w	r3, sp, #27
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7ff fef4 	bl	800ca54 <__cvt>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	9907      	ldr	r1, [sp, #28]
 800cc70:	2b47      	cmp	r3, #71	; 0x47
 800cc72:	4680      	mov	r8, r0
 800cc74:	d108      	bne.n	800cc88 <_printf_float+0x110>
 800cc76:	1cc8      	adds	r0, r1, #3
 800cc78:	db02      	blt.n	800cc80 <_printf_float+0x108>
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	dd41      	ble.n	800cd04 <_printf_float+0x18c>
 800cc80:	f1a9 0902 	sub.w	r9, r9, #2
 800cc84:	fa5f f989 	uxtb.w	r9, r9
 800cc88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc8c:	d820      	bhi.n	800ccd0 <_printf_float+0x158>
 800cc8e:	3901      	subs	r1, #1
 800cc90:	464a      	mov	r2, r9
 800cc92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc96:	9107      	str	r1, [sp, #28]
 800cc98:	f7ff ff2e 	bl	800caf8 <__exponent>
 800cc9c:	9a08      	ldr	r2, [sp, #32]
 800cc9e:	9004      	str	r0, [sp, #16]
 800cca0:	1813      	adds	r3, r2, r0
 800cca2:	2a01      	cmp	r2, #1
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	dc02      	bgt.n	800ccae <_printf_float+0x136>
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	07d2      	lsls	r2, r2, #31
 800ccac:	d501      	bpl.n	800ccb2 <_printf_float+0x13a>
 800ccae:	3301      	adds	r3, #1
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0a2      	beq.n	800cc00 <_printf_float+0x88>
 800ccba:	232d      	movs	r3, #45	; 0x2d
 800ccbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccc0:	e79e      	b.n	800cc00 <_printf_float+0x88>
 800ccc2:	9904      	ldr	r1, [sp, #16]
 800ccc4:	2947      	cmp	r1, #71	; 0x47
 800ccc6:	d1c1      	bne.n	800cc4c <_printf_float+0xd4>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1bf      	bne.n	800cc4c <_printf_float+0xd4>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7bc      	b.n	800cc4a <_printf_float+0xd2>
 800ccd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ccd4:	d118      	bne.n	800cd08 <_printf_float+0x190>
 800ccd6:	2900      	cmp	r1, #0
 800ccd8:	6863      	ldr	r3, [r4, #4]
 800ccda:	dd0b      	ble.n	800ccf4 <_printf_float+0x17c>
 800ccdc:	6121      	str	r1, [r4, #16]
 800ccde:	b913      	cbnz	r3, 800cce6 <_printf_float+0x16e>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	07d0      	lsls	r0, r2, #31
 800cce4:	d502      	bpl.n	800ccec <_printf_float+0x174>
 800cce6:	3301      	adds	r3, #1
 800cce8:	440b      	add	r3, r1
 800ccea:	6123      	str	r3, [r4, #16]
 800ccec:	2300      	movs	r3, #0
 800ccee:	65a1      	str	r1, [r4, #88]	; 0x58
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	e7de      	b.n	800ccb2 <_printf_float+0x13a>
 800ccf4:	b913      	cbnz	r3, 800ccfc <_printf_float+0x184>
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	07d2      	lsls	r2, r2, #31
 800ccfa:	d501      	bpl.n	800cd00 <_printf_float+0x188>
 800ccfc:	3302      	adds	r3, #2
 800ccfe:	e7f4      	b.n	800ccea <_printf_float+0x172>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e7f2      	b.n	800ccea <_printf_float+0x172>
 800cd04:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd08:	9b08      	ldr	r3, [sp, #32]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	db05      	blt.n	800cd1a <_printf_float+0x1a2>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	6121      	str	r1, [r4, #16]
 800cd12:	07d8      	lsls	r0, r3, #31
 800cd14:	d5ea      	bpl.n	800ccec <_printf_float+0x174>
 800cd16:	1c4b      	adds	r3, r1, #1
 800cd18:	e7e7      	b.n	800ccea <_printf_float+0x172>
 800cd1a:	2900      	cmp	r1, #0
 800cd1c:	bfd4      	ite	le
 800cd1e:	f1c1 0202 	rsble	r2, r1, #2
 800cd22:	2201      	movgt	r2, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	e7e0      	b.n	800ccea <_printf_float+0x172>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	055a      	lsls	r2, r3, #21
 800cd2c:	d407      	bmi.n	800cd3e <_printf_float+0x1c6>
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	4642      	mov	r2, r8
 800cd32:	4631      	mov	r1, r6
 800cd34:	4628      	mov	r0, r5
 800cd36:	47b8      	blx	r7
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d12a      	bne.n	800cd92 <_printf_float+0x21a>
 800cd3c:	e76a      	b.n	800cc14 <_printf_float+0x9c>
 800cd3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd42:	f240 80e2 	bls.w	800cf0a <_printf_float+0x392>
 800cd46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cd4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	d133      	bne.n	800cdbc <_printf_float+0x244>
 800cd54:	4a38      	ldr	r2, [pc, #224]	; (800ce38 <_printf_float+0x2c0>)
 800cd56:	2301      	movs	r3, #1
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f af58 	beq.w	800cc14 <_printf_float+0x9c>
 800cd64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	db02      	blt.n	800cd72 <_printf_float+0x1fa>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	07d8      	lsls	r0, r3, #31
 800cd70:	d50f      	bpl.n	800cd92 <_printf_float+0x21a>
 800cd72:	4653      	mov	r3, sl
 800cd74:	465a      	mov	r2, fp
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f43f af49 	beq.w	800cc14 <_printf_float+0x9c>
 800cd82:	f04f 0800 	mov.w	r8, #0
 800cd86:	f104 091a 	add.w	r9, r4, #26
 800cd8a:	9b08      	ldr	r3, [sp, #32]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	4543      	cmp	r3, r8
 800cd90:	dc09      	bgt.n	800cda6 <_printf_float+0x22e>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	079b      	lsls	r3, r3, #30
 800cd96:	f100 8108 	bmi.w	800cfaa <_printf_float+0x432>
 800cd9a:	68e0      	ldr	r0, [r4, #12]
 800cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9e:	4298      	cmp	r0, r3
 800cda0:	bfb8      	it	lt
 800cda2:	4618      	movlt	r0, r3
 800cda4:	e738      	b.n	800cc18 <_printf_float+0xa0>
 800cda6:	2301      	movs	r3, #1
 800cda8:	464a      	mov	r2, r9
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f af2f 	beq.w	800cc14 <_printf_float+0x9c>
 800cdb6:	f108 0801 	add.w	r8, r8, #1
 800cdba:	e7e6      	b.n	800cd8a <_printf_float+0x212>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc3c      	bgt.n	800ce3c <_printf_float+0x2c4>
 800cdc2:	4a1d      	ldr	r2, [pc, #116]	; (800ce38 <_printf_float+0x2c0>)
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f af21 	beq.w	800cc14 <_printf_float+0x9c>
 800cdd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	d102      	bne.n	800cde0 <_printf_float+0x268>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	07d9      	lsls	r1, r3, #31
 800cdde:	d5d8      	bpl.n	800cd92 <_printf_float+0x21a>
 800cde0:	4653      	mov	r3, sl
 800cde2:	465a      	mov	r2, fp
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f af12 	beq.w	800cc14 <_printf_float+0x9c>
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	f104 0a1a 	add.w	sl, r4, #26
 800cdf8:	9b07      	ldr	r3, [sp, #28]
 800cdfa:	425b      	negs	r3, r3
 800cdfc:	454b      	cmp	r3, r9
 800cdfe:	dc01      	bgt.n	800ce04 <_printf_float+0x28c>
 800ce00:	9b08      	ldr	r3, [sp, #32]
 800ce02:	e795      	b.n	800cd30 <_printf_float+0x1b8>
 800ce04:	2301      	movs	r3, #1
 800ce06:	4652      	mov	r2, sl
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af00 	beq.w	800cc14 <_printf_float+0x9c>
 800ce14:	f109 0901 	add.w	r9, r9, #1
 800ce18:	e7ee      	b.n	800cdf8 <_printf_float+0x280>
 800ce1a:	bf00      	nop
 800ce1c:	f3af 8000 	nop.w
 800ce20:	ffffffff 	.word	0xffffffff
 800ce24:	7fefffff 	.word	0x7fefffff
 800ce28:	0800f468 	.word	0x0800f468
 800ce2c:	0800f46c 	.word	0x0800f46c
 800ce30:	0800f474 	.word	0x0800f474
 800ce34:	0800f470 	.word	0x0800f470
 800ce38:	0800f478 	.word	0x0800f478
 800ce3c:	9a08      	ldr	r2, [sp, #32]
 800ce3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce40:	429a      	cmp	r2, r3
 800ce42:	bfa8      	it	ge
 800ce44:	461a      	movge	r2, r3
 800ce46:	2a00      	cmp	r2, #0
 800ce48:	4691      	mov	r9, r2
 800ce4a:	dc38      	bgt.n	800cebe <_printf_float+0x346>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9305      	str	r3, [sp, #20]
 800ce50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce54:	f104 021a 	add.w	r2, r4, #26
 800ce58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce5a:	9905      	ldr	r1, [sp, #20]
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	eba3 0309 	sub.w	r3, r3, r9
 800ce62:	428b      	cmp	r3, r1
 800ce64:	dc33      	bgt.n	800cece <_printf_float+0x356>
 800ce66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	db3c      	blt.n	800cee8 <_printf_float+0x370>
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	07da      	lsls	r2, r3, #31
 800ce72:	d439      	bmi.n	800cee8 <_printf_float+0x370>
 800ce74:	9a08      	ldr	r2, [sp, #32]
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	9907      	ldr	r1, [sp, #28]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	eba2 0901 	sub.w	r9, r2, r1
 800ce80:	4599      	cmp	r9, r3
 800ce82:	bfa8      	it	ge
 800ce84:	4699      	movge	r9, r3
 800ce86:	f1b9 0f00 	cmp.w	r9, #0
 800ce8a:	dc35      	bgt.n	800cef8 <_printf_float+0x380>
 800ce8c:	f04f 0800 	mov.w	r8, #0
 800ce90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce94:	f104 0a1a 	add.w	sl, r4, #26
 800ce98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce9c:	1a9b      	subs	r3, r3, r2
 800ce9e:	eba3 0309 	sub.w	r3, r3, r9
 800cea2:	4543      	cmp	r3, r8
 800cea4:	f77f af75 	ble.w	800cd92 <_printf_float+0x21a>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4652      	mov	r2, sl
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f43f aeae 	beq.w	800cc14 <_printf_float+0x9c>
 800ceb8:	f108 0801 	add.w	r8, r8, #1
 800cebc:	e7ec      	b.n	800ce98 <_printf_float+0x320>
 800cebe:	4613      	mov	r3, r2
 800cec0:	4631      	mov	r1, r6
 800cec2:	4642      	mov	r2, r8
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b8      	blx	r7
 800cec8:	3001      	adds	r0, #1
 800ceca:	d1bf      	bne.n	800ce4c <_printf_float+0x2d4>
 800cecc:	e6a2      	b.n	800cc14 <_printf_float+0x9c>
 800cece:	2301      	movs	r3, #1
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	9204      	str	r2, [sp, #16]
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	f43f ae9b 	beq.w	800cc14 <_printf_float+0x9c>
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	9a04      	ldr	r2, [sp, #16]
 800cee2:	3301      	adds	r3, #1
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	e7b7      	b.n	800ce58 <_printf_float+0x2e0>
 800cee8:	4653      	mov	r3, sl
 800ceea:	465a      	mov	r2, fp
 800ceec:	4631      	mov	r1, r6
 800ceee:	4628      	mov	r0, r5
 800cef0:	47b8      	blx	r7
 800cef2:	3001      	adds	r0, #1
 800cef4:	d1be      	bne.n	800ce74 <_printf_float+0x2fc>
 800cef6:	e68d      	b.n	800cc14 <_printf_float+0x9c>
 800cef8:	9a04      	ldr	r2, [sp, #16]
 800cefa:	464b      	mov	r3, r9
 800cefc:	4442      	add	r2, r8
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b8      	blx	r7
 800cf04:	3001      	adds	r0, #1
 800cf06:	d1c1      	bne.n	800ce8c <_printf_float+0x314>
 800cf08:	e684      	b.n	800cc14 <_printf_float+0x9c>
 800cf0a:	9a08      	ldr	r2, [sp, #32]
 800cf0c:	2a01      	cmp	r2, #1
 800cf0e:	dc01      	bgt.n	800cf14 <_printf_float+0x39c>
 800cf10:	07db      	lsls	r3, r3, #31
 800cf12:	d537      	bpl.n	800cf84 <_printf_float+0x40c>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4642      	mov	r2, r8
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f ae78 	beq.w	800cc14 <_printf_float+0x9c>
 800cf24:	4653      	mov	r3, sl
 800cf26:	465a      	mov	r2, fp
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f43f ae70 	beq.w	800cc14 <_printf_float+0x9c>
 800cf34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf40:	d01b      	beq.n	800cf7a <_printf_float+0x402>
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	f108 0201 	add.w	r2, r8, #1
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	d10e      	bne.n	800cf72 <_printf_float+0x3fa>
 800cf54:	e65e      	b.n	800cc14 <_printf_float+0x9c>
 800cf56:	2301      	movs	r3, #1
 800cf58:	464a      	mov	r2, r9
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b8      	blx	r7
 800cf60:	3001      	adds	r0, #1
 800cf62:	f43f ae57 	beq.w	800cc14 <_printf_float+0x9c>
 800cf66:	f108 0801 	add.w	r8, r8, #1
 800cf6a:	9b08      	ldr	r3, [sp, #32]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	4543      	cmp	r3, r8
 800cf70:	dcf1      	bgt.n	800cf56 <_printf_float+0x3de>
 800cf72:	9b04      	ldr	r3, [sp, #16]
 800cf74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf78:	e6db      	b.n	800cd32 <_printf_float+0x1ba>
 800cf7a:	f04f 0800 	mov.w	r8, #0
 800cf7e:	f104 091a 	add.w	r9, r4, #26
 800cf82:	e7f2      	b.n	800cf6a <_printf_float+0x3f2>
 800cf84:	2301      	movs	r3, #1
 800cf86:	4642      	mov	r2, r8
 800cf88:	e7df      	b.n	800cf4a <_printf_float+0x3d2>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	464a      	mov	r2, r9
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f ae3d 	beq.w	800cc14 <_printf_float+0x9c>
 800cf9a:	f108 0801 	add.w	r8, r8, #1
 800cf9e:	68e3      	ldr	r3, [r4, #12]
 800cfa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa2:	1a5b      	subs	r3, r3, r1
 800cfa4:	4543      	cmp	r3, r8
 800cfa6:	dcf0      	bgt.n	800cf8a <_printf_float+0x412>
 800cfa8:	e6f7      	b.n	800cd9a <_printf_float+0x222>
 800cfaa:	f04f 0800 	mov.w	r8, #0
 800cfae:	f104 0919 	add.w	r9, r4, #25
 800cfb2:	e7f4      	b.n	800cf9e <_printf_float+0x426>

0800cfb4 <_printf_common>:
 800cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	4616      	mov	r6, r2
 800cfba:	4699      	mov	r9, r3
 800cfbc:	688a      	ldr	r2, [r1, #8]
 800cfbe:	690b      	ldr	r3, [r1, #16]
 800cfc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	bfb8      	it	lt
 800cfc8:	4613      	movlt	r3, r2
 800cfca:	6033      	str	r3, [r6, #0]
 800cfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	b10a      	cbz	r2, 800cfda <_printf_common+0x26>
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	6033      	str	r3, [r6, #0]
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	0699      	lsls	r1, r3, #26
 800cfde:	bf42      	ittt	mi
 800cfe0:	6833      	ldrmi	r3, [r6, #0]
 800cfe2:	3302      	addmi	r3, #2
 800cfe4:	6033      	strmi	r3, [r6, #0]
 800cfe6:	6825      	ldr	r5, [r4, #0]
 800cfe8:	f015 0506 	ands.w	r5, r5, #6
 800cfec:	d106      	bne.n	800cffc <_printf_common+0x48>
 800cfee:	f104 0a19 	add.w	sl, r4, #25
 800cff2:	68e3      	ldr	r3, [r4, #12]
 800cff4:	6832      	ldr	r2, [r6, #0]
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dc26      	bgt.n	800d04a <_printf_common+0x96>
 800cffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d000:	1e13      	subs	r3, r2, #0
 800d002:	6822      	ldr	r2, [r4, #0]
 800d004:	bf18      	it	ne
 800d006:	2301      	movne	r3, #1
 800d008:	0692      	lsls	r2, r2, #26
 800d00a:	d42b      	bmi.n	800d064 <_printf_common+0xb0>
 800d00c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d010:	4649      	mov	r1, r9
 800d012:	4638      	mov	r0, r7
 800d014:	47c0      	blx	r8
 800d016:	3001      	adds	r0, #1
 800d018:	d01e      	beq.n	800d058 <_printf_common+0xa4>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	68e5      	ldr	r5, [r4, #12]
 800d01e:	6832      	ldr	r2, [r6, #0]
 800d020:	f003 0306 	and.w	r3, r3, #6
 800d024:	2b04      	cmp	r3, #4
 800d026:	bf08      	it	eq
 800d028:	1aad      	subeq	r5, r5, r2
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	bf0c      	ite	eq
 800d030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d034:	2500      	movne	r5, #0
 800d036:	4293      	cmp	r3, r2
 800d038:	bfc4      	itt	gt
 800d03a:	1a9b      	subgt	r3, r3, r2
 800d03c:	18ed      	addgt	r5, r5, r3
 800d03e:	2600      	movs	r6, #0
 800d040:	341a      	adds	r4, #26
 800d042:	42b5      	cmp	r5, r6
 800d044:	d11a      	bne.n	800d07c <_printf_common+0xc8>
 800d046:	2000      	movs	r0, #0
 800d048:	e008      	b.n	800d05c <_printf_common+0xa8>
 800d04a:	2301      	movs	r3, #1
 800d04c:	4652      	mov	r2, sl
 800d04e:	4649      	mov	r1, r9
 800d050:	4638      	mov	r0, r7
 800d052:	47c0      	blx	r8
 800d054:	3001      	adds	r0, #1
 800d056:	d103      	bne.n	800d060 <_printf_common+0xac>
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	3501      	adds	r5, #1
 800d062:	e7c6      	b.n	800cff2 <_printf_common+0x3e>
 800d064:	18e1      	adds	r1, r4, r3
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	2030      	movs	r0, #48	; 0x30
 800d06a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d06e:	4422      	add	r2, r4
 800d070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d078:	3302      	adds	r3, #2
 800d07a:	e7c7      	b.n	800d00c <_printf_common+0x58>
 800d07c:	2301      	movs	r3, #1
 800d07e:	4622      	mov	r2, r4
 800d080:	4649      	mov	r1, r9
 800d082:	4638      	mov	r0, r7
 800d084:	47c0      	blx	r8
 800d086:	3001      	adds	r0, #1
 800d088:	d0e6      	beq.n	800d058 <_printf_common+0xa4>
 800d08a:	3601      	adds	r6, #1
 800d08c:	e7d9      	b.n	800d042 <_printf_common+0x8e>
	...

0800d090 <_printf_i>:
 800d090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	460c      	mov	r4, r1
 800d096:	4691      	mov	r9, r2
 800d098:	7e27      	ldrb	r7, [r4, #24]
 800d09a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d09c:	2f78      	cmp	r7, #120	; 0x78
 800d09e:	4680      	mov	r8, r0
 800d0a0:	469a      	mov	sl, r3
 800d0a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a6:	d807      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0a8:	2f62      	cmp	r7, #98	; 0x62
 800d0aa:	d80a      	bhi.n	800d0c2 <_printf_i+0x32>
 800d0ac:	2f00      	cmp	r7, #0
 800d0ae:	f000 80d8 	beq.w	800d262 <_printf_i+0x1d2>
 800d0b2:	2f58      	cmp	r7, #88	; 0x58
 800d0b4:	f000 80a3 	beq.w	800d1fe <_printf_i+0x16e>
 800d0b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0c0:	e03a      	b.n	800d138 <_printf_i+0xa8>
 800d0c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0c6:	2b15      	cmp	r3, #21
 800d0c8:	d8f6      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0ca:	a001      	add	r0, pc, #4	; (adr r0, 800d0d0 <_printf_i+0x40>)
 800d0cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d0d0:	0800d129 	.word	0x0800d129
 800d0d4:	0800d13d 	.word	0x0800d13d
 800d0d8:	0800d0b9 	.word	0x0800d0b9
 800d0dc:	0800d0b9 	.word	0x0800d0b9
 800d0e0:	0800d0b9 	.word	0x0800d0b9
 800d0e4:	0800d0b9 	.word	0x0800d0b9
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d0b9 	.word	0x0800d0b9
 800d0f0:	0800d0b9 	.word	0x0800d0b9
 800d0f4:	0800d0b9 	.word	0x0800d0b9
 800d0f8:	0800d0b9 	.word	0x0800d0b9
 800d0fc:	0800d249 	.word	0x0800d249
 800d100:	0800d16d 	.word	0x0800d16d
 800d104:	0800d22b 	.word	0x0800d22b
 800d108:	0800d0b9 	.word	0x0800d0b9
 800d10c:	0800d0b9 	.word	0x0800d0b9
 800d110:	0800d26b 	.word	0x0800d26b
 800d114:	0800d0b9 	.word	0x0800d0b9
 800d118:	0800d16d 	.word	0x0800d16d
 800d11c:	0800d0b9 	.word	0x0800d0b9
 800d120:	0800d0b9 	.word	0x0800d0b9
 800d124:	0800d233 	.word	0x0800d233
 800d128:	680b      	ldr	r3, [r1, #0]
 800d12a:	1d1a      	adds	r2, r3, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	600a      	str	r2, [r1, #0]
 800d130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d138:	2301      	movs	r3, #1
 800d13a:	e0a3      	b.n	800d284 <_printf_i+0x1f4>
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	6808      	ldr	r0, [r1, #0]
 800d140:	062e      	lsls	r6, r5, #24
 800d142:	f100 0304 	add.w	r3, r0, #4
 800d146:	d50a      	bpl.n	800d15e <_printf_i+0xce>
 800d148:	6805      	ldr	r5, [r0, #0]
 800d14a:	600b      	str	r3, [r1, #0]
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	da03      	bge.n	800d158 <_printf_i+0xc8>
 800d150:	232d      	movs	r3, #45	; 0x2d
 800d152:	426d      	negs	r5, r5
 800d154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d158:	485e      	ldr	r0, [pc, #376]	; (800d2d4 <_printf_i+0x244>)
 800d15a:	230a      	movs	r3, #10
 800d15c:	e019      	b.n	800d192 <_printf_i+0x102>
 800d15e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d162:	6805      	ldr	r5, [r0, #0]
 800d164:	600b      	str	r3, [r1, #0]
 800d166:	bf18      	it	ne
 800d168:	b22d      	sxthne	r5, r5
 800d16a:	e7ef      	b.n	800d14c <_printf_i+0xbc>
 800d16c:	680b      	ldr	r3, [r1, #0]
 800d16e:	6825      	ldr	r5, [r4, #0]
 800d170:	1d18      	adds	r0, r3, #4
 800d172:	6008      	str	r0, [r1, #0]
 800d174:	0628      	lsls	r0, r5, #24
 800d176:	d501      	bpl.n	800d17c <_printf_i+0xec>
 800d178:	681d      	ldr	r5, [r3, #0]
 800d17a:	e002      	b.n	800d182 <_printf_i+0xf2>
 800d17c:	0669      	lsls	r1, r5, #25
 800d17e:	d5fb      	bpl.n	800d178 <_printf_i+0xe8>
 800d180:	881d      	ldrh	r5, [r3, #0]
 800d182:	4854      	ldr	r0, [pc, #336]	; (800d2d4 <_printf_i+0x244>)
 800d184:	2f6f      	cmp	r7, #111	; 0x6f
 800d186:	bf0c      	ite	eq
 800d188:	2308      	moveq	r3, #8
 800d18a:	230a      	movne	r3, #10
 800d18c:	2100      	movs	r1, #0
 800d18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d192:	6866      	ldr	r6, [r4, #4]
 800d194:	60a6      	str	r6, [r4, #8]
 800d196:	2e00      	cmp	r6, #0
 800d198:	bfa2      	ittt	ge
 800d19a:	6821      	ldrge	r1, [r4, #0]
 800d19c:	f021 0104 	bicge.w	r1, r1, #4
 800d1a0:	6021      	strge	r1, [r4, #0]
 800d1a2:	b90d      	cbnz	r5, 800d1a8 <_printf_i+0x118>
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	d04d      	beq.n	800d244 <_printf_i+0x1b4>
 800d1a8:	4616      	mov	r6, r2
 800d1aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1ae:	fb03 5711 	mls	r7, r3, r1, r5
 800d1b2:	5dc7      	ldrb	r7, [r0, r7]
 800d1b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1b8:	462f      	mov	r7, r5
 800d1ba:	42bb      	cmp	r3, r7
 800d1bc:	460d      	mov	r5, r1
 800d1be:	d9f4      	bls.n	800d1aa <_printf_i+0x11a>
 800d1c0:	2b08      	cmp	r3, #8
 800d1c2:	d10b      	bne.n	800d1dc <_printf_i+0x14c>
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	07df      	lsls	r7, r3, #31
 800d1c8:	d508      	bpl.n	800d1dc <_printf_i+0x14c>
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	6861      	ldr	r1, [r4, #4]
 800d1ce:	4299      	cmp	r1, r3
 800d1d0:	bfde      	ittt	le
 800d1d2:	2330      	movle	r3, #48	; 0x30
 800d1d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1dc:	1b92      	subs	r2, r2, r6
 800d1de:	6122      	str	r2, [r4, #16]
 800d1e0:	f8cd a000 	str.w	sl, [sp]
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	aa03      	add	r2, sp, #12
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	f7ff fee2 	bl	800cfb4 <_printf_common>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d14c      	bne.n	800d28e <_printf_i+0x1fe>
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f8:	b004      	add	sp, #16
 800d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fe:	4835      	ldr	r0, [pc, #212]	; (800d2d4 <_printf_i+0x244>)
 800d200:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	680e      	ldr	r6, [r1, #0]
 800d208:	061f      	lsls	r7, r3, #24
 800d20a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d20e:	600e      	str	r6, [r1, #0]
 800d210:	d514      	bpl.n	800d23c <_printf_i+0x1ac>
 800d212:	07d9      	lsls	r1, r3, #31
 800d214:	bf44      	itt	mi
 800d216:	f043 0320 	orrmi.w	r3, r3, #32
 800d21a:	6023      	strmi	r3, [r4, #0]
 800d21c:	b91d      	cbnz	r5, 800d226 <_printf_i+0x196>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	f023 0320 	bic.w	r3, r3, #32
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	2310      	movs	r3, #16
 800d228:	e7b0      	b.n	800d18c <_printf_i+0xfc>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	f043 0320 	orr.w	r3, r3, #32
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	2378      	movs	r3, #120	; 0x78
 800d234:	4828      	ldr	r0, [pc, #160]	; (800d2d8 <_printf_i+0x248>)
 800d236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d23a:	e7e3      	b.n	800d204 <_printf_i+0x174>
 800d23c:	065e      	lsls	r6, r3, #25
 800d23e:	bf48      	it	mi
 800d240:	b2ad      	uxthmi	r5, r5
 800d242:	e7e6      	b.n	800d212 <_printf_i+0x182>
 800d244:	4616      	mov	r6, r2
 800d246:	e7bb      	b.n	800d1c0 <_printf_i+0x130>
 800d248:	680b      	ldr	r3, [r1, #0]
 800d24a:	6826      	ldr	r6, [r4, #0]
 800d24c:	6960      	ldr	r0, [r4, #20]
 800d24e:	1d1d      	adds	r5, r3, #4
 800d250:	600d      	str	r5, [r1, #0]
 800d252:	0635      	lsls	r5, r6, #24
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	d501      	bpl.n	800d25c <_printf_i+0x1cc>
 800d258:	6018      	str	r0, [r3, #0]
 800d25a:	e002      	b.n	800d262 <_printf_i+0x1d2>
 800d25c:	0671      	lsls	r1, r6, #25
 800d25e:	d5fb      	bpl.n	800d258 <_printf_i+0x1c8>
 800d260:	8018      	strh	r0, [r3, #0]
 800d262:	2300      	movs	r3, #0
 800d264:	6123      	str	r3, [r4, #16]
 800d266:	4616      	mov	r6, r2
 800d268:	e7ba      	b.n	800d1e0 <_printf_i+0x150>
 800d26a:	680b      	ldr	r3, [r1, #0]
 800d26c:	1d1a      	adds	r2, r3, #4
 800d26e:	600a      	str	r2, [r1, #0]
 800d270:	681e      	ldr	r6, [r3, #0]
 800d272:	6862      	ldr	r2, [r4, #4]
 800d274:	2100      	movs	r1, #0
 800d276:	4630      	mov	r0, r6
 800d278:	f7f3 f852 	bl	8000320 <memchr>
 800d27c:	b108      	cbz	r0, 800d282 <_printf_i+0x1f2>
 800d27e:	1b80      	subs	r0, r0, r6
 800d280:	6060      	str	r0, [r4, #4]
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	6123      	str	r3, [r4, #16]
 800d286:	2300      	movs	r3, #0
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d28c:	e7a8      	b.n	800d1e0 <_printf_i+0x150>
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	4632      	mov	r2, r6
 800d292:	4649      	mov	r1, r9
 800d294:	4640      	mov	r0, r8
 800d296:	47d0      	blx	sl
 800d298:	3001      	adds	r0, #1
 800d29a:	d0ab      	beq.n	800d1f4 <_printf_i+0x164>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	079b      	lsls	r3, r3, #30
 800d2a0:	d413      	bmi.n	800d2ca <_printf_i+0x23a>
 800d2a2:	68e0      	ldr	r0, [r4, #12]
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	bfb8      	it	lt
 800d2aa:	4618      	movlt	r0, r3
 800d2ac:	e7a4      	b.n	800d1f8 <_printf_i+0x168>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	47d0      	blx	sl
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d09b      	beq.n	800d1f4 <_printf_i+0x164>
 800d2bc:	3501      	adds	r5, #1
 800d2be:	68e3      	ldr	r3, [r4, #12]
 800d2c0:	9903      	ldr	r1, [sp, #12]
 800d2c2:	1a5b      	subs	r3, r3, r1
 800d2c4:	42ab      	cmp	r3, r5
 800d2c6:	dcf2      	bgt.n	800d2ae <_printf_i+0x21e>
 800d2c8:	e7eb      	b.n	800d2a2 <_printf_i+0x212>
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	f104 0619 	add.w	r6, r4, #25
 800d2d0:	e7f5      	b.n	800d2be <_printf_i+0x22e>
 800d2d2:	bf00      	nop
 800d2d4:	0800f47a 	.word	0x0800f47a
 800d2d8:	0800f48b 	.word	0x0800f48b

0800d2dc <iprintf>:
 800d2dc:	b40f      	push	{r0, r1, r2, r3}
 800d2de:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <iprintf+0x2c>)
 800d2e0:	b513      	push	{r0, r1, r4, lr}
 800d2e2:	681c      	ldr	r4, [r3, #0]
 800d2e4:	b124      	cbz	r4, 800d2f0 <iprintf+0x14>
 800d2e6:	69a3      	ldr	r3, [r4, #24]
 800d2e8:	b913      	cbnz	r3, 800d2f0 <iprintf+0x14>
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f001 f86c 	bl	800e3c8 <__sinit>
 800d2f0:	ab05      	add	r3, sp, #20
 800d2f2:	9a04      	ldr	r2, [sp, #16]
 800d2f4:	68a1      	ldr	r1, [r4, #8]
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f001 fdd9 	bl	800eeb0 <_vfiprintf_r>
 800d2fe:	b002      	add	sp, #8
 800d300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d304:	b004      	add	sp, #16
 800d306:	4770      	bx	lr
 800d308:	24000010 	.word	0x24000010

0800d30c <_puts_r>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	460e      	mov	r6, r1
 800d310:	4605      	mov	r5, r0
 800d312:	b118      	cbz	r0, 800d31c <_puts_r+0x10>
 800d314:	6983      	ldr	r3, [r0, #24]
 800d316:	b90b      	cbnz	r3, 800d31c <_puts_r+0x10>
 800d318:	f001 f856 	bl	800e3c8 <__sinit>
 800d31c:	69ab      	ldr	r3, [r5, #24]
 800d31e:	68ac      	ldr	r4, [r5, #8]
 800d320:	b913      	cbnz	r3, 800d328 <_puts_r+0x1c>
 800d322:	4628      	mov	r0, r5
 800d324:	f001 f850 	bl	800e3c8 <__sinit>
 800d328:	4b2c      	ldr	r3, [pc, #176]	; (800d3dc <_puts_r+0xd0>)
 800d32a:	429c      	cmp	r4, r3
 800d32c:	d120      	bne.n	800d370 <_puts_r+0x64>
 800d32e:	686c      	ldr	r4, [r5, #4]
 800d330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d332:	07db      	lsls	r3, r3, #31
 800d334:	d405      	bmi.n	800d342 <_puts_r+0x36>
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	0598      	lsls	r0, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_puts_r+0x36>
 800d33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d33e:	f001 f8e6 	bl	800e50e <__retarget_lock_acquire_recursive>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	0719      	lsls	r1, r3, #28
 800d346:	d51d      	bpl.n	800d384 <_puts_r+0x78>
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	b1db      	cbz	r3, 800d384 <_puts_r+0x78>
 800d34c:	3e01      	subs	r6, #1
 800d34e:	68a3      	ldr	r3, [r4, #8]
 800d350:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d354:	3b01      	subs	r3, #1
 800d356:	60a3      	str	r3, [r4, #8]
 800d358:	bb39      	cbnz	r1, 800d3aa <_puts_r+0x9e>
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	da38      	bge.n	800d3d0 <_puts_r+0xc4>
 800d35e:	4622      	mov	r2, r4
 800d360:	210a      	movs	r1, #10
 800d362:	4628      	mov	r0, r5
 800d364:	f000 f848 	bl	800d3f8 <__swbuf_r>
 800d368:	3001      	adds	r0, #1
 800d36a:	d011      	beq.n	800d390 <_puts_r+0x84>
 800d36c:	250a      	movs	r5, #10
 800d36e:	e011      	b.n	800d394 <_puts_r+0x88>
 800d370:	4b1b      	ldr	r3, [pc, #108]	; (800d3e0 <_puts_r+0xd4>)
 800d372:	429c      	cmp	r4, r3
 800d374:	d101      	bne.n	800d37a <_puts_r+0x6e>
 800d376:	68ac      	ldr	r4, [r5, #8]
 800d378:	e7da      	b.n	800d330 <_puts_r+0x24>
 800d37a:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <_puts_r+0xd8>)
 800d37c:	429c      	cmp	r4, r3
 800d37e:	bf08      	it	eq
 800d380:	68ec      	ldreq	r4, [r5, #12]
 800d382:	e7d5      	b.n	800d330 <_puts_r+0x24>
 800d384:	4621      	mov	r1, r4
 800d386:	4628      	mov	r0, r5
 800d388:	f000 f888 	bl	800d49c <__swsetup_r>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d0dd      	beq.n	800d34c <_puts_r+0x40>
 800d390:	f04f 35ff 	mov.w	r5, #4294967295
 800d394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d396:	07da      	lsls	r2, r3, #31
 800d398:	d405      	bmi.n	800d3a6 <_puts_r+0x9a>
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	059b      	lsls	r3, r3, #22
 800d39e:	d402      	bmi.n	800d3a6 <_puts_r+0x9a>
 800d3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3a2:	f001 f8b5 	bl	800e510 <__retarget_lock_release_recursive>
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	da04      	bge.n	800d3b8 <_puts_r+0xac>
 800d3ae:	69a2      	ldr	r2, [r4, #24]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	dc06      	bgt.n	800d3c2 <_puts_r+0xb6>
 800d3b4:	290a      	cmp	r1, #10
 800d3b6:	d004      	beq.n	800d3c2 <_puts_r+0xb6>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	1c5a      	adds	r2, r3, #1
 800d3bc:	6022      	str	r2, [r4, #0]
 800d3be:	7019      	strb	r1, [r3, #0]
 800d3c0:	e7c5      	b.n	800d34e <_puts_r+0x42>
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f000 f817 	bl	800d3f8 <__swbuf_r>
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d1bf      	bne.n	800d34e <_puts_r+0x42>
 800d3ce:	e7df      	b.n	800d390 <_puts_r+0x84>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	250a      	movs	r5, #10
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	6022      	str	r2, [r4, #0]
 800d3d8:	701d      	strb	r5, [r3, #0]
 800d3da:	e7db      	b.n	800d394 <_puts_r+0x88>
 800d3dc:	0800f550 	.word	0x0800f550
 800d3e0:	0800f570 	.word	0x0800f570
 800d3e4:	0800f530 	.word	0x0800f530

0800d3e8 <puts>:
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <puts+0xc>)
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	f7ff bf8d 	b.w	800d30c <_puts_r>
 800d3f2:	bf00      	nop
 800d3f4:	24000010 	.word	0x24000010

0800d3f8 <__swbuf_r>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	460e      	mov	r6, r1
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	4605      	mov	r5, r0
 800d400:	b118      	cbz	r0, 800d40a <__swbuf_r+0x12>
 800d402:	6983      	ldr	r3, [r0, #24]
 800d404:	b90b      	cbnz	r3, 800d40a <__swbuf_r+0x12>
 800d406:	f000 ffdf 	bl	800e3c8 <__sinit>
 800d40a:	4b21      	ldr	r3, [pc, #132]	; (800d490 <__swbuf_r+0x98>)
 800d40c:	429c      	cmp	r4, r3
 800d40e:	d12b      	bne.n	800d468 <__swbuf_r+0x70>
 800d410:	686c      	ldr	r4, [r5, #4]
 800d412:	69a3      	ldr	r3, [r4, #24]
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	071a      	lsls	r2, r3, #28
 800d41a:	d52f      	bpl.n	800d47c <__swbuf_r+0x84>
 800d41c:	6923      	ldr	r3, [r4, #16]
 800d41e:	b36b      	cbz	r3, 800d47c <__swbuf_r+0x84>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	6820      	ldr	r0, [r4, #0]
 800d424:	1ac0      	subs	r0, r0, r3
 800d426:	6963      	ldr	r3, [r4, #20]
 800d428:	b2f6      	uxtb	r6, r6
 800d42a:	4283      	cmp	r3, r0
 800d42c:	4637      	mov	r7, r6
 800d42e:	dc04      	bgt.n	800d43a <__swbuf_r+0x42>
 800d430:	4621      	mov	r1, r4
 800d432:	4628      	mov	r0, r5
 800d434:	f000 ff34 	bl	800e2a0 <_fflush_r>
 800d438:	bb30      	cbnz	r0, 800d488 <__swbuf_r+0x90>
 800d43a:	68a3      	ldr	r3, [r4, #8]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	60a3      	str	r3, [r4, #8]
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	6022      	str	r2, [r4, #0]
 800d446:	701e      	strb	r6, [r3, #0]
 800d448:	6963      	ldr	r3, [r4, #20]
 800d44a:	3001      	adds	r0, #1
 800d44c:	4283      	cmp	r3, r0
 800d44e:	d004      	beq.n	800d45a <__swbuf_r+0x62>
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	07db      	lsls	r3, r3, #31
 800d454:	d506      	bpl.n	800d464 <__swbuf_r+0x6c>
 800d456:	2e0a      	cmp	r6, #10
 800d458:	d104      	bne.n	800d464 <__swbuf_r+0x6c>
 800d45a:	4621      	mov	r1, r4
 800d45c:	4628      	mov	r0, r5
 800d45e:	f000 ff1f 	bl	800e2a0 <_fflush_r>
 800d462:	b988      	cbnz	r0, 800d488 <__swbuf_r+0x90>
 800d464:	4638      	mov	r0, r7
 800d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d468:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <__swbuf_r+0x9c>)
 800d46a:	429c      	cmp	r4, r3
 800d46c:	d101      	bne.n	800d472 <__swbuf_r+0x7a>
 800d46e:	68ac      	ldr	r4, [r5, #8]
 800d470:	e7cf      	b.n	800d412 <__swbuf_r+0x1a>
 800d472:	4b09      	ldr	r3, [pc, #36]	; (800d498 <__swbuf_r+0xa0>)
 800d474:	429c      	cmp	r4, r3
 800d476:	bf08      	it	eq
 800d478:	68ec      	ldreq	r4, [r5, #12]
 800d47a:	e7ca      	b.n	800d412 <__swbuf_r+0x1a>
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f80c 	bl	800d49c <__swsetup_r>
 800d484:	2800      	cmp	r0, #0
 800d486:	d0cb      	beq.n	800d420 <__swbuf_r+0x28>
 800d488:	f04f 37ff 	mov.w	r7, #4294967295
 800d48c:	e7ea      	b.n	800d464 <__swbuf_r+0x6c>
 800d48e:	bf00      	nop
 800d490:	0800f550 	.word	0x0800f550
 800d494:	0800f570 	.word	0x0800f570
 800d498:	0800f530 	.word	0x0800f530

0800d49c <__swsetup_r>:
 800d49c:	4b32      	ldr	r3, [pc, #200]	; (800d568 <__swsetup_r+0xcc>)
 800d49e:	b570      	push	{r4, r5, r6, lr}
 800d4a0:	681d      	ldr	r5, [r3, #0]
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	b125      	cbz	r5, 800d4b2 <__swsetup_r+0x16>
 800d4a8:	69ab      	ldr	r3, [r5, #24]
 800d4aa:	b913      	cbnz	r3, 800d4b2 <__swsetup_r+0x16>
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f000 ff8b 	bl	800e3c8 <__sinit>
 800d4b2:	4b2e      	ldr	r3, [pc, #184]	; (800d56c <__swsetup_r+0xd0>)
 800d4b4:	429c      	cmp	r4, r3
 800d4b6:	d10f      	bne.n	800d4d8 <__swsetup_r+0x3c>
 800d4b8:	686c      	ldr	r4, [r5, #4]
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4c0:	0719      	lsls	r1, r3, #28
 800d4c2:	d42c      	bmi.n	800d51e <__swsetup_r+0x82>
 800d4c4:	06dd      	lsls	r5, r3, #27
 800d4c6:	d411      	bmi.n	800d4ec <__swsetup_r+0x50>
 800d4c8:	2309      	movs	r3, #9
 800d4ca:	6033      	str	r3, [r6, #0]
 800d4cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4d0:	81a3      	strh	r3, [r4, #12]
 800d4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d6:	e03e      	b.n	800d556 <__swsetup_r+0xba>
 800d4d8:	4b25      	ldr	r3, [pc, #148]	; (800d570 <__swsetup_r+0xd4>)
 800d4da:	429c      	cmp	r4, r3
 800d4dc:	d101      	bne.n	800d4e2 <__swsetup_r+0x46>
 800d4de:	68ac      	ldr	r4, [r5, #8]
 800d4e0:	e7eb      	b.n	800d4ba <__swsetup_r+0x1e>
 800d4e2:	4b24      	ldr	r3, [pc, #144]	; (800d574 <__swsetup_r+0xd8>)
 800d4e4:	429c      	cmp	r4, r3
 800d4e6:	bf08      	it	eq
 800d4e8:	68ec      	ldreq	r4, [r5, #12]
 800d4ea:	e7e6      	b.n	800d4ba <__swsetup_r+0x1e>
 800d4ec:	0758      	lsls	r0, r3, #29
 800d4ee:	d512      	bpl.n	800d516 <__swsetup_r+0x7a>
 800d4f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4f2:	b141      	cbz	r1, 800d506 <__swsetup_r+0x6a>
 800d4f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4f8:	4299      	cmp	r1, r3
 800d4fa:	d002      	beq.n	800d502 <__swsetup_r+0x66>
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f001 fc03 	bl	800ed08 <_free_r>
 800d502:	2300      	movs	r3, #0
 800d504:	6363      	str	r3, [r4, #52]	; 0x34
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d50c:	81a3      	strh	r3, [r4, #12]
 800d50e:	2300      	movs	r3, #0
 800d510:	6063      	str	r3, [r4, #4]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f043 0308 	orr.w	r3, r3, #8
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	b94b      	cbnz	r3, 800d536 <__swsetup_r+0x9a>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d52c:	d003      	beq.n	800d536 <__swsetup_r+0x9a>
 800d52e:	4621      	mov	r1, r4
 800d530:	4630      	mov	r0, r6
 800d532:	f001 f813 	bl	800e55c <__smakebuf_r>
 800d536:	89a0      	ldrh	r0, [r4, #12]
 800d538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d53c:	f010 0301 	ands.w	r3, r0, #1
 800d540:	d00a      	beq.n	800d558 <__swsetup_r+0xbc>
 800d542:	2300      	movs	r3, #0
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	6963      	ldr	r3, [r4, #20]
 800d548:	425b      	negs	r3, r3
 800d54a:	61a3      	str	r3, [r4, #24]
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	b943      	cbnz	r3, 800d562 <__swsetup_r+0xc6>
 800d550:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d554:	d1ba      	bne.n	800d4cc <__swsetup_r+0x30>
 800d556:	bd70      	pop	{r4, r5, r6, pc}
 800d558:	0781      	lsls	r1, r0, #30
 800d55a:	bf58      	it	pl
 800d55c:	6963      	ldrpl	r3, [r4, #20]
 800d55e:	60a3      	str	r3, [r4, #8]
 800d560:	e7f4      	b.n	800d54c <__swsetup_r+0xb0>
 800d562:	2000      	movs	r0, #0
 800d564:	e7f7      	b.n	800d556 <__swsetup_r+0xba>
 800d566:	bf00      	nop
 800d568:	24000010 	.word	0x24000010
 800d56c:	0800f550 	.word	0x0800f550
 800d570:	0800f570 	.word	0x0800f570
 800d574:	0800f530 	.word	0x0800f530

0800d578 <quorem>:
 800d578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	6903      	ldr	r3, [r0, #16]
 800d57e:	690c      	ldr	r4, [r1, #16]
 800d580:	42a3      	cmp	r3, r4
 800d582:	4607      	mov	r7, r0
 800d584:	f2c0 8081 	blt.w	800d68a <quorem+0x112>
 800d588:	3c01      	subs	r4, #1
 800d58a:	f101 0814 	add.w	r8, r1, #20
 800d58e:	f100 0514 	add.w	r5, r0, #20
 800d592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d59c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d5a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d5ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800d5b0:	d331      	bcc.n	800d616 <quorem+0x9e>
 800d5b2:	f04f 0e00 	mov.w	lr, #0
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	46ac      	mov	ip, r5
 800d5ba:	46f2      	mov	sl, lr
 800d5bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d5c0:	b293      	uxth	r3, r2
 800d5c2:	fb06 e303 	mla	r3, r6, r3, lr
 800d5c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d5d0:	0c12      	lsrs	r2, r2, #16
 800d5d2:	f8dc a000 	ldr.w	sl, [ip]
 800d5d6:	fb06 e202 	mla	r2, r6, r2, lr
 800d5da:	fa13 f38a 	uxtah	r3, r3, sl
 800d5de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5e2:	fa1f fa82 	uxth.w	sl, r2
 800d5e6:	f8dc 2000 	ldr.w	r2, [ip]
 800d5ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d5ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5f8:	4581      	cmp	r9, r0
 800d5fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d5fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d602:	d2db      	bcs.n	800d5bc <quorem+0x44>
 800d604:	f855 300b 	ldr.w	r3, [r5, fp]
 800d608:	b92b      	cbnz	r3, 800d616 <quorem+0x9e>
 800d60a:	9b01      	ldr	r3, [sp, #4]
 800d60c:	3b04      	subs	r3, #4
 800d60e:	429d      	cmp	r5, r3
 800d610:	461a      	mov	r2, r3
 800d612:	d32e      	bcc.n	800d672 <quorem+0xfa>
 800d614:	613c      	str	r4, [r7, #16]
 800d616:	4638      	mov	r0, r7
 800d618:	f001 fa66 	bl	800eae8 <__mcmp>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	db24      	blt.n	800d66a <quorem+0xf2>
 800d620:	3601      	adds	r6, #1
 800d622:	4628      	mov	r0, r5
 800d624:	f04f 0c00 	mov.w	ip, #0
 800d628:	f858 2b04 	ldr.w	r2, [r8], #4
 800d62c:	f8d0 e000 	ldr.w	lr, [r0]
 800d630:	b293      	uxth	r3, r2
 800d632:	ebac 0303 	sub.w	r3, ip, r3
 800d636:	0c12      	lsrs	r2, r2, #16
 800d638:	fa13 f38e 	uxtah	r3, r3, lr
 800d63c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d644:	b29b      	uxth	r3, r3
 800d646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d64a:	45c1      	cmp	r9, r8
 800d64c:	f840 3b04 	str.w	r3, [r0], #4
 800d650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d654:	d2e8      	bcs.n	800d628 <quorem+0xb0>
 800d656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d65e:	b922      	cbnz	r2, 800d66a <quorem+0xf2>
 800d660:	3b04      	subs	r3, #4
 800d662:	429d      	cmp	r5, r3
 800d664:	461a      	mov	r2, r3
 800d666:	d30a      	bcc.n	800d67e <quorem+0x106>
 800d668:	613c      	str	r4, [r7, #16]
 800d66a:	4630      	mov	r0, r6
 800d66c:	b003      	add	sp, #12
 800d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d672:	6812      	ldr	r2, [r2, #0]
 800d674:	3b04      	subs	r3, #4
 800d676:	2a00      	cmp	r2, #0
 800d678:	d1cc      	bne.n	800d614 <quorem+0x9c>
 800d67a:	3c01      	subs	r4, #1
 800d67c:	e7c7      	b.n	800d60e <quorem+0x96>
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	3b04      	subs	r3, #4
 800d682:	2a00      	cmp	r2, #0
 800d684:	d1f0      	bne.n	800d668 <quorem+0xf0>
 800d686:	3c01      	subs	r4, #1
 800d688:	e7eb      	b.n	800d662 <quorem+0xea>
 800d68a:	2000      	movs	r0, #0
 800d68c:	e7ee      	b.n	800d66c <quorem+0xf4>
	...

0800d690 <_dtoa_r>:
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	ec59 8b10 	vmov	r8, r9, d0
 800d698:	b095      	sub	sp, #84	; 0x54
 800d69a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d69c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d69e:	9107      	str	r1, [sp, #28]
 800d6a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d6a8:	9310      	str	r3, [sp, #64]	; 0x40
 800d6aa:	b975      	cbnz	r5, 800d6ca <_dtoa_r+0x3a>
 800d6ac:	2010      	movs	r0, #16
 800d6ae:	f000 ff95 	bl	800e5dc <malloc>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	6270      	str	r0, [r6, #36]	; 0x24
 800d6b6:	b920      	cbnz	r0, 800d6c2 <_dtoa_r+0x32>
 800d6b8:	4bab      	ldr	r3, [pc, #684]	; (800d968 <_dtoa_r+0x2d8>)
 800d6ba:	21ea      	movs	r1, #234	; 0xea
 800d6bc:	48ab      	ldr	r0, [pc, #684]	; (800d96c <_dtoa_r+0x2dc>)
 800d6be:	f001 fd8d 	bl	800f1dc <__assert_func>
 800d6c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6c6:	6005      	str	r5, [r0, #0]
 800d6c8:	60c5      	str	r5, [r0, #12]
 800d6ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6cc:	6819      	ldr	r1, [r3, #0]
 800d6ce:	b151      	cbz	r1, 800d6e6 <_dtoa_r+0x56>
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	604a      	str	r2, [r1, #4]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4093      	lsls	r3, r2
 800d6d8:	608b      	str	r3, [r1, #8]
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f000 ffc6 	bl	800e66c <_Bfree>
 800d6e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	f1b9 0300 	subs.w	r3, r9, #0
 800d6ea:	bfbb      	ittet	lt
 800d6ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6f0:	9303      	strlt	r3, [sp, #12]
 800d6f2:	2300      	movge	r3, #0
 800d6f4:	2201      	movlt	r2, #1
 800d6f6:	bfac      	ite	ge
 800d6f8:	6023      	strge	r3, [r4, #0]
 800d6fa:	6022      	strlt	r2, [r4, #0]
 800d6fc:	4b9c      	ldr	r3, [pc, #624]	; (800d970 <_dtoa_r+0x2e0>)
 800d6fe:	9c03      	ldr	r4, [sp, #12]
 800d700:	43a3      	bics	r3, r4
 800d702:	d11a      	bne.n	800d73a <_dtoa_r+0xaa>
 800d704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d706:	f242 730f 	movw	r3, #9999	; 0x270f
 800d70a:	6013      	str	r3, [r2, #0]
 800d70c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d710:	ea53 0308 	orrs.w	r3, r3, r8
 800d714:	f000 8512 	beq.w	800e13c <_dtoa_r+0xaac>
 800d718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d71a:	b953      	cbnz	r3, 800d732 <_dtoa_r+0xa2>
 800d71c:	4b95      	ldr	r3, [pc, #596]	; (800d974 <_dtoa_r+0x2e4>)
 800d71e:	e01f      	b.n	800d760 <_dtoa_r+0xd0>
 800d720:	4b95      	ldr	r3, [pc, #596]	; (800d978 <_dtoa_r+0x2e8>)
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	3308      	adds	r3, #8
 800d726:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	9800      	ldr	r0, [sp, #0]
 800d72c:	b015      	add	sp, #84	; 0x54
 800d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d732:	4b90      	ldr	r3, [pc, #576]	; (800d974 <_dtoa_r+0x2e4>)
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	3303      	adds	r3, #3
 800d738:	e7f5      	b.n	800d726 <_dtoa_r+0x96>
 800d73a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d73e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d746:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d74a:	d10b      	bne.n	800d764 <_dtoa_r+0xd4>
 800d74c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d74e:	2301      	movs	r3, #1
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 84ee 	beq.w	800e136 <_dtoa_r+0xaa6>
 800d75a:	4888      	ldr	r0, [pc, #544]	; (800d97c <_dtoa_r+0x2ec>)
 800d75c:	6018      	str	r0, [r3, #0]
 800d75e:	1e43      	subs	r3, r0, #1
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	e7e2      	b.n	800d72a <_dtoa_r+0x9a>
 800d764:	a913      	add	r1, sp, #76	; 0x4c
 800d766:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d76a:	aa12      	add	r2, sp, #72	; 0x48
 800d76c:	4630      	mov	r0, r6
 800d76e:	f001 fa5f 	bl	800ec30 <__d2b>
 800d772:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d776:	4605      	mov	r5, r0
 800d778:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d77a:	2900      	cmp	r1, #0
 800d77c:	d047      	beq.n	800d80e <_dtoa_r+0x17e>
 800d77e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d780:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d784:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d788:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d78c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d790:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d794:	2400      	movs	r4, #0
 800d796:	ec43 2b16 	vmov	d6, r2, r3
 800d79a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d79e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d950 <_dtoa_r+0x2c0>
 800d7a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d7a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d958 <_dtoa_r+0x2c8>
 800d7aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d7ae:	eeb0 7b46 	vmov.f64	d7, d6
 800d7b2:	ee06 1a90 	vmov	s13, r1
 800d7b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d7ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d960 <_dtoa_r+0x2d0>
 800d7be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d7c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d7c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	ee16 ba90 	vmov	fp, s13
 800d7d2:	9411      	str	r4, [sp, #68]	; 0x44
 800d7d4:	d508      	bpl.n	800d7e8 <_dtoa_r+0x158>
 800d7d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d7da:	eeb4 6b47 	vcmp.f64	d6, d7
 800d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e2:	bf18      	it	ne
 800d7e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d7e8:	f1bb 0f16 	cmp.w	fp, #22
 800d7ec:	d832      	bhi.n	800d854 <_dtoa_r+0x1c4>
 800d7ee:	4b64      	ldr	r3, [pc, #400]	; (800d980 <_dtoa_r+0x2f0>)
 800d7f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7f4:	ed93 7b00 	vldr	d7, [r3]
 800d7f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d7fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d804:	d501      	bpl.n	800d80a <_dtoa_r+0x17a>
 800d806:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d80a:	2300      	movs	r3, #0
 800d80c:	e023      	b.n	800d856 <_dtoa_r+0x1c6>
 800d80e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d810:	4401      	add	r1, r0
 800d812:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d816:	2b20      	cmp	r3, #32
 800d818:	bfc3      	ittte	gt
 800d81a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d81e:	fa04 f303 	lslgt.w	r3, r4, r3
 800d822:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d826:	f1c3 0320 	rsble	r3, r3, #32
 800d82a:	bfc6      	itte	gt
 800d82c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d830:	ea43 0308 	orrgt.w	r3, r3, r8
 800d834:	fa08 f303 	lslle.w	r3, r8, r3
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d840:	3901      	subs	r1, #1
 800d842:	ed8d 7b00 	vstr	d7, [sp]
 800d846:	9c01      	ldr	r4, [sp, #4]
 800d848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d84c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d850:	2401      	movs	r4, #1
 800d852:	e7a0      	b.n	800d796 <_dtoa_r+0x106>
 800d854:	2301      	movs	r3, #1
 800d856:	930f      	str	r3, [sp, #60]	; 0x3c
 800d858:	1a43      	subs	r3, r0, r1
 800d85a:	1e5a      	subs	r2, r3, #1
 800d85c:	bf45      	ittet	mi
 800d85e:	f1c3 0301 	rsbmi	r3, r3, #1
 800d862:	9305      	strmi	r3, [sp, #20]
 800d864:	2300      	movpl	r3, #0
 800d866:	2300      	movmi	r3, #0
 800d868:	9206      	str	r2, [sp, #24]
 800d86a:	bf54      	ite	pl
 800d86c:	9305      	strpl	r3, [sp, #20]
 800d86e:	9306      	strmi	r3, [sp, #24]
 800d870:	f1bb 0f00 	cmp.w	fp, #0
 800d874:	db18      	blt.n	800d8a8 <_dtoa_r+0x218>
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d87c:	445b      	add	r3, fp
 800d87e:	9306      	str	r3, [sp, #24]
 800d880:	2300      	movs	r3, #0
 800d882:	9a07      	ldr	r2, [sp, #28]
 800d884:	2a09      	cmp	r2, #9
 800d886:	d849      	bhi.n	800d91c <_dtoa_r+0x28c>
 800d888:	2a05      	cmp	r2, #5
 800d88a:	bfc4      	itt	gt
 800d88c:	3a04      	subgt	r2, #4
 800d88e:	9207      	strgt	r2, [sp, #28]
 800d890:	9a07      	ldr	r2, [sp, #28]
 800d892:	f1a2 0202 	sub.w	r2, r2, #2
 800d896:	bfcc      	ite	gt
 800d898:	2400      	movgt	r4, #0
 800d89a:	2401      	movle	r4, #1
 800d89c:	2a03      	cmp	r2, #3
 800d89e:	d848      	bhi.n	800d932 <_dtoa_r+0x2a2>
 800d8a0:	e8df f002 	tbb	[pc, r2]
 800d8a4:	3a2c2e0b 	.word	0x3a2c2e0b
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	eba3 030b 	sub.w	r3, r3, fp
 800d8b0:	9305      	str	r3, [sp, #20]
 800d8b2:	920e      	str	r2, [sp, #56]	; 0x38
 800d8b4:	f1cb 0300 	rsb	r3, fp, #0
 800d8b8:	e7e3      	b.n	800d882 <_dtoa_r+0x1f2>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	9208      	str	r2, [sp, #32]
 800d8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c0:	2a00      	cmp	r2, #0
 800d8c2:	dc39      	bgt.n	800d938 <_dtoa_r+0x2a8>
 800d8c4:	f04f 0a01 	mov.w	sl, #1
 800d8c8:	46d1      	mov	r9, sl
 800d8ca:	4652      	mov	r2, sl
 800d8cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d8d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6079      	str	r1, [r7, #4]
 800d8d6:	2004      	movs	r0, #4
 800d8d8:	f100 0c14 	add.w	ip, r0, #20
 800d8dc:	4594      	cmp	ip, r2
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	d92f      	bls.n	800d942 <_dtoa_r+0x2b2>
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	930c      	str	r3, [sp, #48]	; 0x30
 800d8e6:	f000 fe81 	bl	800e5ec <_Balloc>
 800d8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ec:	9000      	str	r0, [sp, #0]
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d149      	bne.n	800d988 <_dtoa_r+0x2f8>
 800d8f4:	4b23      	ldr	r3, [pc, #140]	; (800d984 <_dtoa_r+0x2f4>)
 800d8f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8fa:	e6df      	b.n	800d6bc <_dtoa_r+0x2c>
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	e7dd      	b.n	800d8bc <_dtoa_r+0x22c>
 800d900:	2200      	movs	r2, #0
 800d902:	9208      	str	r2, [sp, #32]
 800d904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d906:	eb0b 0a02 	add.w	sl, fp, r2
 800d90a:	f10a 0901 	add.w	r9, sl, #1
 800d90e:	464a      	mov	r2, r9
 800d910:	2a01      	cmp	r2, #1
 800d912:	bfb8      	it	lt
 800d914:	2201      	movlt	r2, #1
 800d916:	e7db      	b.n	800d8d0 <_dtoa_r+0x240>
 800d918:	2201      	movs	r2, #1
 800d91a:	e7f2      	b.n	800d902 <_dtoa_r+0x272>
 800d91c:	2401      	movs	r4, #1
 800d91e:	2200      	movs	r2, #0
 800d920:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d924:	f04f 3aff 	mov.w	sl, #4294967295
 800d928:	2100      	movs	r1, #0
 800d92a:	46d1      	mov	r9, sl
 800d92c:	2212      	movs	r2, #18
 800d92e:	9109      	str	r1, [sp, #36]	; 0x24
 800d930:	e7ce      	b.n	800d8d0 <_dtoa_r+0x240>
 800d932:	2201      	movs	r2, #1
 800d934:	9208      	str	r2, [sp, #32]
 800d936:	e7f5      	b.n	800d924 <_dtoa_r+0x294>
 800d938:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d93c:	46d1      	mov	r9, sl
 800d93e:	4652      	mov	r2, sl
 800d940:	e7c6      	b.n	800d8d0 <_dtoa_r+0x240>
 800d942:	3101      	adds	r1, #1
 800d944:	6079      	str	r1, [r7, #4]
 800d946:	0040      	lsls	r0, r0, #1
 800d948:	e7c6      	b.n	800d8d8 <_dtoa_r+0x248>
 800d94a:	bf00      	nop
 800d94c:	f3af 8000 	nop.w
 800d950:	636f4361 	.word	0x636f4361
 800d954:	3fd287a7 	.word	0x3fd287a7
 800d958:	8b60c8b3 	.word	0x8b60c8b3
 800d95c:	3fc68a28 	.word	0x3fc68a28
 800d960:	509f79fb 	.word	0x509f79fb
 800d964:	3fd34413 	.word	0x3fd34413
 800d968:	0800f4a9 	.word	0x0800f4a9
 800d96c:	0800f4c0 	.word	0x0800f4c0
 800d970:	7ff00000 	.word	0x7ff00000
 800d974:	0800f4a5 	.word	0x0800f4a5
 800d978:	0800f49c 	.word	0x0800f49c
 800d97c:	0800f479 	.word	0x0800f479
 800d980:	0800f618 	.word	0x0800f618
 800d984:	0800f51f 	.word	0x0800f51f
 800d988:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d98a:	9900      	ldr	r1, [sp, #0]
 800d98c:	6011      	str	r1, [r2, #0]
 800d98e:	f1b9 0f0e 	cmp.w	r9, #14
 800d992:	d872      	bhi.n	800da7a <_dtoa_r+0x3ea>
 800d994:	2c00      	cmp	r4, #0
 800d996:	d070      	beq.n	800da7a <_dtoa_r+0x3ea>
 800d998:	f1bb 0f00 	cmp.w	fp, #0
 800d99c:	f340 80a6 	ble.w	800daec <_dtoa_r+0x45c>
 800d9a0:	49ca      	ldr	r1, [pc, #808]	; (800dccc <_dtoa_r+0x63c>)
 800d9a2:	f00b 020f 	and.w	r2, fp, #15
 800d9a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d9aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d9ae:	ed92 7b00 	vldr	d7, [r2]
 800d9b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d9b6:	f000 808d 	beq.w	800dad4 <_dtoa_r+0x444>
 800d9ba:	4ac5      	ldr	r2, [pc, #788]	; (800dcd0 <_dtoa_r+0x640>)
 800d9bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d9c0:	ed92 6b08 	vldr	d6, [r2, #32]
 800d9c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d9c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d9cc:	f001 010f 	and.w	r1, r1, #15
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	48bf      	ldr	r0, [pc, #764]	; (800dcd0 <_dtoa_r+0x640>)
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	d17f      	bne.n	800dad8 <_dtoa_r+0x448>
 800d9d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d9dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	f000 80b2 	beq.w	800db50 <_dtoa_r+0x4c0>
 800d9ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d9f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fc:	f140 80a8 	bpl.w	800db50 <_dtoa_r+0x4c0>
 800da00:	f1b9 0f00 	cmp.w	r9, #0
 800da04:	f000 80a4 	beq.w	800db50 <_dtoa_r+0x4c0>
 800da08:	f1ba 0f00 	cmp.w	sl, #0
 800da0c:	dd31      	ble.n	800da72 <_dtoa_r+0x3e2>
 800da0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800da12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da16:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da1a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da1e:	3201      	adds	r2, #1
 800da20:	4650      	mov	r0, sl
 800da22:	ed9d 6b02 	vldr	d6, [sp, #8]
 800da26:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800da2a:	ee07 2a90 	vmov	s15, r2
 800da2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da32:	eea7 5b06 	vfma.f64	d5, d7, d6
 800da36:	ed8d 5b02 	vstr	d5, [sp, #8]
 800da3a:	9c03      	ldr	r4, [sp, #12]
 800da3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800da40:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800da44:	2800      	cmp	r0, #0
 800da46:	f040 8086 	bne.w	800db56 <_dtoa_r+0x4c6>
 800da4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800da4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800da52:	ec42 1b17 	vmov	d7, r1, r2
 800da56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	f300 8272 	bgt.w	800df46 <_dtoa_r+0x8b6>
 800da62:	eeb1 7b47 	vneg.f64	d7, d7
 800da66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6e:	f100 8267 	bmi.w	800df40 <_dtoa_r+0x8b0>
 800da72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800da76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800da7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da7c:	2a00      	cmp	r2, #0
 800da7e:	f2c0 8129 	blt.w	800dcd4 <_dtoa_r+0x644>
 800da82:	f1bb 0f0e 	cmp.w	fp, #14
 800da86:	f300 8125 	bgt.w	800dcd4 <_dtoa_r+0x644>
 800da8a:	4b90      	ldr	r3, [pc, #576]	; (800dccc <_dtoa_r+0x63c>)
 800da8c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da90:	ed93 6b00 	vldr	d6, [r3]
 800da94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da96:	2b00      	cmp	r3, #0
 800da98:	f280 80c3 	bge.w	800dc22 <_dtoa_r+0x592>
 800da9c:	f1b9 0f00 	cmp.w	r9, #0
 800daa0:	f300 80bf 	bgt.w	800dc22 <_dtoa_r+0x592>
 800daa4:	f040 824c 	bne.w	800df40 <_dtoa_r+0x8b0>
 800daa8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800daac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabc:	464c      	mov	r4, r9
 800dabe:	464f      	mov	r7, r9
 800dac0:	f280 8222 	bge.w	800df08 <_dtoa_r+0x878>
 800dac4:	f8dd 8000 	ldr.w	r8, [sp]
 800dac8:	2331      	movs	r3, #49	; 0x31
 800daca:	f808 3b01 	strb.w	r3, [r8], #1
 800dace:	f10b 0b01 	add.w	fp, fp, #1
 800dad2:	e21e      	b.n	800df12 <_dtoa_r+0x882>
 800dad4:	2202      	movs	r2, #2
 800dad6:	e77c      	b.n	800d9d2 <_dtoa_r+0x342>
 800dad8:	07cc      	lsls	r4, r1, #31
 800dada:	d504      	bpl.n	800dae6 <_dtoa_r+0x456>
 800dadc:	ed90 6b00 	vldr	d6, [r0]
 800dae0:	3201      	adds	r2, #1
 800dae2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dae6:	1049      	asrs	r1, r1, #1
 800dae8:	3008      	adds	r0, #8
 800daea:	e773      	b.n	800d9d4 <_dtoa_r+0x344>
 800daec:	d02e      	beq.n	800db4c <_dtoa_r+0x4bc>
 800daee:	f1cb 0100 	rsb	r1, fp, #0
 800daf2:	4a76      	ldr	r2, [pc, #472]	; (800dccc <_dtoa_r+0x63c>)
 800daf4:	f001 000f 	and.w	r0, r1, #15
 800daf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dafc:	ed92 7b00 	vldr	d7, [r2]
 800db00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800db04:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800db10:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800db14:	486e      	ldr	r0, [pc, #440]	; (800dcd0 <_dtoa_r+0x640>)
 800db16:	1109      	asrs	r1, r1, #4
 800db18:	2400      	movs	r4, #0
 800db1a:	2202      	movs	r2, #2
 800db1c:	b939      	cbnz	r1, 800db2e <_dtoa_r+0x49e>
 800db1e:	2c00      	cmp	r4, #0
 800db20:	f43f af60 	beq.w	800d9e4 <_dtoa_r+0x354>
 800db24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db2c:	e75a      	b.n	800d9e4 <_dtoa_r+0x354>
 800db2e:	07cf      	lsls	r7, r1, #31
 800db30:	d509      	bpl.n	800db46 <_dtoa_r+0x4b6>
 800db32:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800db36:	ed90 7b00 	vldr	d7, [r0]
 800db3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db42:	3201      	adds	r2, #1
 800db44:	2401      	movs	r4, #1
 800db46:	1049      	asrs	r1, r1, #1
 800db48:	3008      	adds	r0, #8
 800db4a:	e7e7      	b.n	800db1c <_dtoa_r+0x48c>
 800db4c:	2202      	movs	r2, #2
 800db4e:	e749      	b.n	800d9e4 <_dtoa_r+0x354>
 800db50:	465f      	mov	r7, fp
 800db52:	4648      	mov	r0, r9
 800db54:	e765      	b.n	800da22 <_dtoa_r+0x392>
 800db56:	ec42 1b17 	vmov	d7, r1, r2
 800db5a:	4a5c      	ldr	r2, [pc, #368]	; (800dccc <_dtoa_r+0x63c>)
 800db5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800db60:	ed12 4b02 	vldr	d4, [r2, #-8]
 800db64:	9a00      	ldr	r2, [sp, #0]
 800db66:	1814      	adds	r4, r2, r0
 800db68:	9a08      	ldr	r2, [sp, #32]
 800db6a:	b352      	cbz	r2, 800dbc2 <_dtoa_r+0x532>
 800db6c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800db70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800db74:	f8dd 8000 	ldr.w	r8, [sp]
 800db78:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800db7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800db80:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db88:	ee14 2a90 	vmov	r2, s9
 800db8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db90:	3230      	adds	r2, #48	; 0x30
 800db92:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	f808 2b01 	strb.w	r2, [r8], #1
 800dba2:	d439      	bmi.n	800dc18 <_dtoa_r+0x588>
 800dba4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dba8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb0:	d472      	bmi.n	800dc98 <_dtoa_r+0x608>
 800dbb2:	45a0      	cmp	r8, r4
 800dbb4:	f43f af5d 	beq.w	800da72 <_dtoa_r+0x3e2>
 800dbb8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dbbc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dbc0:	e7e0      	b.n	800db84 <_dtoa_r+0x4f4>
 800dbc2:	f8dd 8000 	ldr.w	r8, [sp]
 800dbc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dbca:	4621      	mov	r1, r4
 800dbcc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dbd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dbd4:	ee14 2a90 	vmov	r2, s9
 800dbd8:	3230      	adds	r2, #48	; 0x30
 800dbda:	f808 2b01 	strb.w	r2, [r8], #1
 800dbde:	45a0      	cmp	r8, r4
 800dbe0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dbe4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dbe8:	d118      	bne.n	800dc1c <_dtoa_r+0x58c>
 800dbea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dbee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dbf2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbfa:	dc4d      	bgt.n	800dc98 <_dtoa_r+0x608>
 800dbfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc08:	f57f af33 	bpl.w	800da72 <_dtoa_r+0x3e2>
 800dc0c:	4688      	mov	r8, r1
 800dc0e:	3901      	subs	r1, #1
 800dc10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dc14:	2b30      	cmp	r3, #48	; 0x30
 800dc16:	d0f9      	beq.n	800dc0c <_dtoa_r+0x57c>
 800dc18:	46bb      	mov	fp, r7
 800dc1a:	e02a      	b.n	800dc72 <_dtoa_r+0x5e2>
 800dc1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc20:	e7d6      	b.n	800dbd0 <_dtoa_r+0x540>
 800dc22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dc2a:	f8dd 8000 	ldr.w	r8, [sp]
 800dc2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dc32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dc36:	ee15 3a10 	vmov	r3, s10
 800dc3a:	3330      	adds	r3, #48	; 0x30
 800dc3c:	f808 3b01 	strb.w	r3, [r8], #1
 800dc40:	9b00      	ldr	r3, [sp, #0]
 800dc42:	eba8 0303 	sub.w	r3, r8, r3
 800dc46:	4599      	cmp	r9, r3
 800dc48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dc4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dc50:	d133      	bne.n	800dcba <_dtoa_r+0x62a>
 800dc52:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dc56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5e:	dc1a      	bgt.n	800dc96 <_dtoa_r+0x606>
 800dc60:	eeb4 7b46 	vcmp.f64	d7, d6
 800dc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc68:	d103      	bne.n	800dc72 <_dtoa_r+0x5e2>
 800dc6a:	ee15 3a10 	vmov	r3, s10
 800dc6e:	07d9      	lsls	r1, r3, #31
 800dc70:	d411      	bmi.n	800dc96 <_dtoa_r+0x606>
 800dc72:	4629      	mov	r1, r5
 800dc74:	4630      	mov	r0, r6
 800dc76:	f000 fcf9 	bl	800e66c <_Bfree>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc7e:	f888 3000 	strb.w	r3, [r8]
 800dc82:	f10b 0301 	add.w	r3, fp, #1
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f43f ad4d 	beq.w	800d72a <_dtoa_r+0x9a>
 800dc90:	f8c3 8000 	str.w	r8, [r3]
 800dc94:	e549      	b.n	800d72a <_dtoa_r+0x9a>
 800dc96:	465f      	mov	r7, fp
 800dc98:	4643      	mov	r3, r8
 800dc9a:	4698      	mov	r8, r3
 800dc9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dca0:	2a39      	cmp	r2, #57	; 0x39
 800dca2:	d106      	bne.n	800dcb2 <_dtoa_r+0x622>
 800dca4:	9a00      	ldr	r2, [sp, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d1f7      	bne.n	800dc9a <_dtoa_r+0x60a>
 800dcaa:	9900      	ldr	r1, [sp, #0]
 800dcac:	2230      	movs	r2, #48	; 0x30
 800dcae:	3701      	adds	r7, #1
 800dcb0:	700a      	strb	r2, [r1, #0]
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	e7ae      	b.n	800dc18 <_dtoa_r+0x588>
 800dcba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dcbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc6:	d1b2      	bne.n	800dc2e <_dtoa_r+0x59e>
 800dcc8:	e7d3      	b.n	800dc72 <_dtoa_r+0x5e2>
 800dcca:	bf00      	nop
 800dccc:	0800f618 	.word	0x0800f618
 800dcd0:	0800f5f0 	.word	0x0800f5f0
 800dcd4:	9908      	ldr	r1, [sp, #32]
 800dcd6:	2900      	cmp	r1, #0
 800dcd8:	f000 80d1 	beq.w	800de7e <_dtoa_r+0x7ee>
 800dcdc:	9907      	ldr	r1, [sp, #28]
 800dcde:	2901      	cmp	r1, #1
 800dce0:	f300 80b4 	bgt.w	800de4c <_dtoa_r+0x7bc>
 800dce4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dce6:	2900      	cmp	r1, #0
 800dce8:	f000 80ac 	beq.w	800de44 <_dtoa_r+0x7b4>
 800dcec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dcf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dcf4:	461c      	mov	r4, r3
 800dcf6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcf8:	9b05      	ldr	r3, [sp, #20]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	9b06      	ldr	r3, [sp, #24]
 800dd00:	2101      	movs	r1, #1
 800dd02:	4413      	add	r3, r2
 800dd04:	4630      	mov	r0, r6
 800dd06:	9306      	str	r3, [sp, #24]
 800dd08:	f000 fd6c 	bl	800e7e4 <__i2b>
 800dd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f1b8 0f00 	cmp.w	r8, #0
 800dd14:	dd0d      	ble.n	800dd32 <_dtoa_r+0x6a2>
 800dd16:	9a06      	ldr	r2, [sp, #24]
 800dd18:	2a00      	cmp	r2, #0
 800dd1a:	dd0a      	ble.n	800dd32 <_dtoa_r+0x6a2>
 800dd1c:	4542      	cmp	r2, r8
 800dd1e:	9905      	ldr	r1, [sp, #20]
 800dd20:	bfa8      	it	ge
 800dd22:	4642      	movge	r2, r8
 800dd24:	1a89      	subs	r1, r1, r2
 800dd26:	9105      	str	r1, [sp, #20]
 800dd28:	9906      	ldr	r1, [sp, #24]
 800dd2a:	eba8 0802 	sub.w	r8, r8, r2
 800dd2e:	1a8a      	subs	r2, r1, r2
 800dd30:	9206      	str	r2, [sp, #24]
 800dd32:	b303      	cbz	r3, 800dd76 <_dtoa_r+0x6e6>
 800dd34:	9a08      	ldr	r2, [sp, #32]
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	f000 80a6 	beq.w	800de88 <_dtoa_r+0x7f8>
 800dd3c:	2c00      	cmp	r4, #0
 800dd3e:	dd13      	ble.n	800dd68 <_dtoa_r+0x6d8>
 800dd40:	4639      	mov	r1, r7
 800dd42:	4622      	mov	r2, r4
 800dd44:	4630      	mov	r0, r6
 800dd46:	930c      	str	r3, [sp, #48]	; 0x30
 800dd48:	f000 fe08 	bl	800e95c <__pow5mult>
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	4601      	mov	r1, r0
 800dd50:	4607      	mov	r7, r0
 800dd52:	4630      	mov	r0, r6
 800dd54:	f000 fd5c 	bl	800e810 <__multiply>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	900a      	str	r0, [sp, #40]	; 0x28
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f000 fc85 	bl	800e66c <_Bfree>
 800dd62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd66:	4615      	mov	r5, r2
 800dd68:	1b1a      	subs	r2, r3, r4
 800dd6a:	d004      	beq.n	800dd76 <_dtoa_r+0x6e6>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f000 fdf4 	bl	800e95c <__pow5mult>
 800dd74:	4605      	mov	r5, r0
 800dd76:	2101      	movs	r1, #1
 800dd78:	4630      	mov	r0, r6
 800dd7a:	f000 fd33 	bl	800e7e4 <__i2b>
 800dd7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	f340 8082 	ble.w	800de8c <_dtoa_r+0x7fc>
 800dd88:	461a      	mov	r2, r3
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f000 fde5 	bl	800e95c <__pow5mult>
 800dd92:	9b07      	ldr	r3, [sp, #28]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	4604      	mov	r4, r0
 800dd98:	dd7b      	ble.n	800de92 <_dtoa_r+0x802>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd9e:	6922      	ldr	r2, [r4, #16]
 800dda0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dda4:	6910      	ldr	r0, [r2, #16]
 800dda6:	f000 fccd 	bl	800e744 <__hi0bits>
 800ddaa:	f1c0 0020 	rsb	r0, r0, #32
 800ddae:	9b06      	ldr	r3, [sp, #24]
 800ddb0:	4418      	add	r0, r3
 800ddb2:	f010 001f 	ands.w	r0, r0, #31
 800ddb6:	f000 808d 	beq.w	800ded4 <_dtoa_r+0x844>
 800ddba:	f1c0 0220 	rsb	r2, r0, #32
 800ddbe:	2a04      	cmp	r2, #4
 800ddc0:	f340 8086 	ble.w	800ded0 <_dtoa_r+0x840>
 800ddc4:	f1c0 001c 	rsb	r0, r0, #28
 800ddc8:	9b05      	ldr	r3, [sp, #20]
 800ddca:	4403      	add	r3, r0
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	9b06      	ldr	r3, [sp, #24]
 800ddd0:	4403      	add	r3, r0
 800ddd2:	4480      	add	r8, r0
 800ddd4:	9306      	str	r3, [sp, #24]
 800ddd6:	9b05      	ldr	r3, [sp, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dd05      	ble.n	800dde8 <_dtoa_r+0x758>
 800dddc:	4629      	mov	r1, r5
 800ddde:	461a      	mov	r2, r3
 800dde0:	4630      	mov	r0, r6
 800dde2:	f000 fe15 	bl	800ea10 <__lshift>
 800dde6:	4605      	mov	r5, r0
 800dde8:	9b06      	ldr	r3, [sp, #24]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	dd05      	ble.n	800ddfa <_dtoa_r+0x76a>
 800ddee:	4621      	mov	r1, r4
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f000 fe0c 	bl	800ea10 <__lshift>
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d06b      	beq.n	800ded8 <_dtoa_r+0x848>
 800de00:	4621      	mov	r1, r4
 800de02:	4628      	mov	r0, r5
 800de04:	f000 fe70 	bl	800eae8 <__mcmp>
 800de08:	2800      	cmp	r0, #0
 800de0a:	da65      	bge.n	800ded8 <_dtoa_r+0x848>
 800de0c:	2300      	movs	r3, #0
 800de0e:	4629      	mov	r1, r5
 800de10:	220a      	movs	r2, #10
 800de12:	4630      	mov	r0, r6
 800de14:	f000 fc4c 	bl	800e6b0 <__multadd>
 800de18:	9b08      	ldr	r3, [sp, #32]
 800de1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de1e:	4605      	mov	r5, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 8192 	beq.w	800e14a <_dtoa_r+0xaba>
 800de26:	4639      	mov	r1, r7
 800de28:	2300      	movs	r3, #0
 800de2a:	220a      	movs	r2, #10
 800de2c:	4630      	mov	r0, r6
 800de2e:	f000 fc3f 	bl	800e6b0 <__multadd>
 800de32:	f1ba 0f00 	cmp.w	sl, #0
 800de36:	4607      	mov	r7, r0
 800de38:	f300 808e 	bgt.w	800df58 <_dtoa_r+0x8c8>
 800de3c:	9b07      	ldr	r3, [sp, #28]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	dc51      	bgt.n	800dee6 <_dtoa_r+0x856>
 800de42:	e089      	b.n	800df58 <_dtoa_r+0x8c8>
 800de44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de4a:	e751      	b.n	800dcf0 <_dtoa_r+0x660>
 800de4c:	f109 34ff 	add.w	r4, r9, #4294967295
 800de50:	42a3      	cmp	r3, r4
 800de52:	bfbf      	itttt	lt
 800de54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800de56:	1ae3      	sublt	r3, r4, r3
 800de58:	18d2      	addlt	r2, r2, r3
 800de5a:	4613      	movlt	r3, r2
 800de5c:	bfb7      	itett	lt
 800de5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800de60:	1b1c      	subge	r4, r3, r4
 800de62:	4623      	movlt	r3, r4
 800de64:	2400      	movlt	r4, #0
 800de66:	f1b9 0f00 	cmp.w	r9, #0
 800de6a:	bfb5      	itete	lt
 800de6c:	9a05      	ldrlt	r2, [sp, #20]
 800de6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800de72:	eba2 0809 	sublt.w	r8, r2, r9
 800de76:	464a      	movge	r2, r9
 800de78:	bfb8      	it	lt
 800de7a:	2200      	movlt	r2, #0
 800de7c:	e73b      	b.n	800dcf6 <_dtoa_r+0x666>
 800de7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800de82:	9f08      	ldr	r7, [sp, #32]
 800de84:	461c      	mov	r4, r3
 800de86:	e743      	b.n	800dd10 <_dtoa_r+0x680>
 800de88:	461a      	mov	r2, r3
 800de8a:	e76f      	b.n	800dd6c <_dtoa_r+0x6dc>
 800de8c:	9b07      	ldr	r3, [sp, #28]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	dc18      	bgt.n	800dec4 <_dtoa_r+0x834>
 800de92:	9b02      	ldr	r3, [sp, #8]
 800de94:	b9b3      	cbnz	r3, 800dec4 <_dtoa_r+0x834>
 800de96:	9b03      	ldr	r3, [sp, #12]
 800de98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800de9c:	b9a2      	cbnz	r2, 800dec8 <_dtoa_r+0x838>
 800de9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dea2:	0d12      	lsrs	r2, r2, #20
 800dea4:	0512      	lsls	r2, r2, #20
 800dea6:	b18a      	cbz	r2, 800decc <_dtoa_r+0x83c>
 800dea8:	9b05      	ldr	r3, [sp, #20]
 800deaa:	3301      	adds	r3, #1
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	9b06      	ldr	r3, [sp, #24]
 800deb0:	3301      	adds	r3, #1
 800deb2:	9306      	str	r3, [sp, #24]
 800deb4:	2301      	movs	r3, #1
 800deb6:	930a      	str	r3, [sp, #40]	; 0x28
 800deb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800deba:	2b00      	cmp	r3, #0
 800debc:	f47f af6f 	bne.w	800dd9e <_dtoa_r+0x70e>
 800dec0:	2001      	movs	r0, #1
 800dec2:	e774      	b.n	800ddae <_dtoa_r+0x71e>
 800dec4:	2300      	movs	r3, #0
 800dec6:	e7f6      	b.n	800deb6 <_dtoa_r+0x826>
 800dec8:	9b02      	ldr	r3, [sp, #8]
 800deca:	e7f4      	b.n	800deb6 <_dtoa_r+0x826>
 800decc:	920a      	str	r2, [sp, #40]	; 0x28
 800dece:	e7f3      	b.n	800deb8 <_dtoa_r+0x828>
 800ded0:	d081      	beq.n	800ddd6 <_dtoa_r+0x746>
 800ded2:	4610      	mov	r0, r2
 800ded4:	301c      	adds	r0, #28
 800ded6:	e777      	b.n	800ddc8 <_dtoa_r+0x738>
 800ded8:	f1b9 0f00 	cmp.w	r9, #0
 800dedc:	dc37      	bgt.n	800df4e <_dtoa_r+0x8be>
 800dede:	9b07      	ldr	r3, [sp, #28]
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	dd34      	ble.n	800df4e <_dtoa_r+0x8be>
 800dee4:	46ca      	mov	sl, r9
 800dee6:	f1ba 0f00 	cmp.w	sl, #0
 800deea:	d10d      	bne.n	800df08 <_dtoa_r+0x878>
 800deec:	4621      	mov	r1, r4
 800deee:	4653      	mov	r3, sl
 800def0:	2205      	movs	r2, #5
 800def2:	4630      	mov	r0, r6
 800def4:	f000 fbdc 	bl	800e6b0 <__multadd>
 800def8:	4601      	mov	r1, r0
 800defa:	4604      	mov	r4, r0
 800defc:	4628      	mov	r0, r5
 800defe:	f000 fdf3 	bl	800eae8 <__mcmp>
 800df02:	2800      	cmp	r0, #0
 800df04:	f73f adde 	bgt.w	800dac4 <_dtoa_r+0x434>
 800df08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df0a:	f8dd 8000 	ldr.w	r8, [sp]
 800df0e:	ea6f 0b03 	mvn.w	fp, r3
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	4621      	mov	r1, r4
 800df18:	4630      	mov	r0, r6
 800df1a:	f000 fba7 	bl	800e66c <_Bfree>
 800df1e:	2f00      	cmp	r7, #0
 800df20:	f43f aea7 	beq.w	800dc72 <_dtoa_r+0x5e2>
 800df24:	f1b9 0f00 	cmp.w	r9, #0
 800df28:	d005      	beq.n	800df36 <_dtoa_r+0x8a6>
 800df2a:	45b9      	cmp	r9, r7
 800df2c:	d003      	beq.n	800df36 <_dtoa_r+0x8a6>
 800df2e:	4649      	mov	r1, r9
 800df30:	4630      	mov	r0, r6
 800df32:	f000 fb9b 	bl	800e66c <_Bfree>
 800df36:	4639      	mov	r1, r7
 800df38:	4630      	mov	r0, r6
 800df3a:	f000 fb97 	bl	800e66c <_Bfree>
 800df3e:	e698      	b.n	800dc72 <_dtoa_r+0x5e2>
 800df40:	2400      	movs	r4, #0
 800df42:	4627      	mov	r7, r4
 800df44:	e7e0      	b.n	800df08 <_dtoa_r+0x878>
 800df46:	46bb      	mov	fp, r7
 800df48:	4604      	mov	r4, r0
 800df4a:	4607      	mov	r7, r0
 800df4c:	e5ba      	b.n	800dac4 <_dtoa_r+0x434>
 800df4e:	9b08      	ldr	r3, [sp, #32]
 800df50:	46ca      	mov	sl, r9
 800df52:	2b00      	cmp	r3, #0
 800df54:	f000 8100 	beq.w	800e158 <_dtoa_r+0xac8>
 800df58:	f1b8 0f00 	cmp.w	r8, #0
 800df5c:	dd05      	ble.n	800df6a <_dtoa_r+0x8da>
 800df5e:	4639      	mov	r1, r7
 800df60:	4642      	mov	r2, r8
 800df62:	4630      	mov	r0, r6
 800df64:	f000 fd54 	bl	800ea10 <__lshift>
 800df68:	4607      	mov	r7, r0
 800df6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d05d      	beq.n	800e02c <_dtoa_r+0x99c>
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	4630      	mov	r0, r6
 800df74:	f000 fb3a 	bl	800e5ec <_Balloc>
 800df78:	4680      	mov	r8, r0
 800df7a:	b928      	cbnz	r0, 800df88 <_dtoa_r+0x8f8>
 800df7c:	4b82      	ldr	r3, [pc, #520]	; (800e188 <_dtoa_r+0xaf8>)
 800df7e:	4602      	mov	r2, r0
 800df80:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df84:	f7ff bb9a 	b.w	800d6bc <_dtoa_r+0x2c>
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	3202      	adds	r2, #2
 800df8c:	0092      	lsls	r2, r2, #2
 800df8e:	f107 010c 	add.w	r1, r7, #12
 800df92:	300c      	adds	r0, #12
 800df94:	f7fe fd48 	bl	800ca28 <memcpy>
 800df98:	2201      	movs	r2, #1
 800df9a:	4641      	mov	r1, r8
 800df9c:	4630      	mov	r0, r6
 800df9e:	f000 fd37 	bl	800ea10 <__lshift>
 800dfa2:	9b00      	ldr	r3, [sp, #0]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	9305      	str	r3, [sp, #20]
 800dfa8:	9b00      	ldr	r3, [sp, #0]
 800dfaa:	4453      	add	r3, sl
 800dfac:	9309      	str	r3, [sp, #36]	; 0x24
 800dfae:	9b02      	ldr	r3, [sp, #8]
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	46b9      	mov	r9, r7
 800dfb6:	9308      	str	r3, [sp, #32]
 800dfb8:	4607      	mov	r7, r0
 800dfba:	9b05      	ldr	r3, [sp, #20]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	f7ff fad8 	bl	800d578 <quorem>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	3330      	adds	r3, #48	; 0x30
 800dfcc:	9006      	str	r0, [sp, #24]
 800dfce:	4649      	mov	r1, r9
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	930a      	str	r3, [sp, #40]	; 0x28
 800dfd4:	f000 fd88 	bl	800eae8 <__mcmp>
 800dfd8:	463a      	mov	r2, r7
 800dfda:	4682      	mov	sl, r0
 800dfdc:	4621      	mov	r1, r4
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f000 fd9e 	bl	800eb20 <__mdiff>
 800dfe4:	68c2      	ldr	r2, [r0, #12]
 800dfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe8:	4680      	mov	r8, r0
 800dfea:	bb0a      	cbnz	r2, 800e030 <_dtoa_r+0x9a0>
 800dfec:	4601      	mov	r1, r0
 800dfee:	4628      	mov	r0, r5
 800dff0:	f000 fd7a 	bl	800eae8 <__mcmp>
 800dff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff6:	4602      	mov	r2, r0
 800dff8:	4641      	mov	r1, r8
 800dffa:	4630      	mov	r0, r6
 800dffc:	920e      	str	r2, [sp, #56]	; 0x38
 800dffe:	930a      	str	r3, [sp, #40]	; 0x28
 800e000:	f000 fb34 	bl	800e66c <_Bfree>
 800e004:	9b07      	ldr	r3, [sp, #28]
 800e006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e008:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e00c:	ea43 0102 	orr.w	r1, r3, r2
 800e010:	9b08      	ldr	r3, [sp, #32]
 800e012:	430b      	orrs	r3, r1
 800e014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e016:	d10d      	bne.n	800e034 <_dtoa_r+0x9a4>
 800e018:	2b39      	cmp	r3, #57	; 0x39
 800e01a:	d029      	beq.n	800e070 <_dtoa_r+0x9e0>
 800e01c:	f1ba 0f00 	cmp.w	sl, #0
 800e020:	dd01      	ble.n	800e026 <_dtoa_r+0x996>
 800e022:	9b06      	ldr	r3, [sp, #24]
 800e024:	3331      	adds	r3, #49	; 0x31
 800e026:	9a02      	ldr	r2, [sp, #8]
 800e028:	7013      	strb	r3, [r2, #0]
 800e02a:	e774      	b.n	800df16 <_dtoa_r+0x886>
 800e02c:	4638      	mov	r0, r7
 800e02e:	e7b8      	b.n	800dfa2 <_dtoa_r+0x912>
 800e030:	2201      	movs	r2, #1
 800e032:	e7e1      	b.n	800dff8 <_dtoa_r+0x968>
 800e034:	f1ba 0f00 	cmp.w	sl, #0
 800e038:	db06      	blt.n	800e048 <_dtoa_r+0x9b8>
 800e03a:	9907      	ldr	r1, [sp, #28]
 800e03c:	ea41 0a0a 	orr.w	sl, r1, sl
 800e040:	9908      	ldr	r1, [sp, #32]
 800e042:	ea5a 0101 	orrs.w	r1, sl, r1
 800e046:	d120      	bne.n	800e08a <_dtoa_r+0x9fa>
 800e048:	2a00      	cmp	r2, #0
 800e04a:	ddec      	ble.n	800e026 <_dtoa_r+0x996>
 800e04c:	4629      	mov	r1, r5
 800e04e:	2201      	movs	r2, #1
 800e050:	4630      	mov	r0, r6
 800e052:	9305      	str	r3, [sp, #20]
 800e054:	f000 fcdc 	bl	800ea10 <__lshift>
 800e058:	4621      	mov	r1, r4
 800e05a:	4605      	mov	r5, r0
 800e05c:	f000 fd44 	bl	800eae8 <__mcmp>
 800e060:	2800      	cmp	r0, #0
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	dc02      	bgt.n	800e06c <_dtoa_r+0x9dc>
 800e066:	d1de      	bne.n	800e026 <_dtoa_r+0x996>
 800e068:	07da      	lsls	r2, r3, #31
 800e06a:	d5dc      	bpl.n	800e026 <_dtoa_r+0x996>
 800e06c:	2b39      	cmp	r3, #57	; 0x39
 800e06e:	d1d8      	bne.n	800e022 <_dtoa_r+0x992>
 800e070:	9a02      	ldr	r2, [sp, #8]
 800e072:	2339      	movs	r3, #57	; 0x39
 800e074:	7013      	strb	r3, [r2, #0]
 800e076:	4643      	mov	r3, r8
 800e078:	4698      	mov	r8, r3
 800e07a:	3b01      	subs	r3, #1
 800e07c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e080:	2a39      	cmp	r2, #57	; 0x39
 800e082:	d051      	beq.n	800e128 <_dtoa_r+0xa98>
 800e084:	3201      	adds	r2, #1
 800e086:	701a      	strb	r2, [r3, #0]
 800e088:	e745      	b.n	800df16 <_dtoa_r+0x886>
 800e08a:	2a00      	cmp	r2, #0
 800e08c:	dd03      	ble.n	800e096 <_dtoa_r+0xa06>
 800e08e:	2b39      	cmp	r3, #57	; 0x39
 800e090:	d0ee      	beq.n	800e070 <_dtoa_r+0x9e0>
 800e092:	3301      	adds	r3, #1
 800e094:	e7c7      	b.n	800e026 <_dtoa_r+0x996>
 800e096:	9a05      	ldr	r2, [sp, #20]
 800e098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e09a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e09e:	428a      	cmp	r2, r1
 800e0a0:	d02b      	beq.n	800e0fa <_dtoa_r+0xa6a>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	220a      	movs	r2, #10
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f000 fb01 	bl	800e6b0 <__multadd>
 800e0ae:	45b9      	cmp	r9, r7
 800e0b0:	4605      	mov	r5, r0
 800e0b2:	f04f 0300 	mov.w	r3, #0
 800e0b6:	f04f 020a 	mov.w	r2, #10
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	4630      	mov	r0, r6
 800e0be:	d107      	bne.n	800e0d0 <_dtoa_r+0xa40>
 800e0c0:	f000 faf6 	bl	800e6b0 <__multadd>
 800e0c4:	4681      	mov	r9, r0
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	9b05      	ldr	r3, [sp, #20]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	9305      	str	r3, [sp, #20]
 800e0ce:	e774      	b.n	800dfba <_dtoa_r+0x92a>
 800e0d0:	f000 faee 	bl	800e6b0 <__multadd>
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	4681      	mov	r9, r0
 800e0d8:	2300      	movs	r3, #0
 800e0da:	220a      	movs	r2, #10
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f000 fae7 	bl	800e6b0 <__multadd>
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	e7f0      	b.n	800e0c8 <_dtoa_r+0xa38>
 800e0e6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ea:	9a00      	ldr	r2, [sp, #0]
 800e0ec:	bfcc      	ite	gt
 800e0ee:	46d0      	movgt	r8, sl
 800e0f0:	f04f 0801 	movle.w	r8, #1
 800e0f4:	4490      	add	r8, r2
 800e0f6:	f04f 0900 	mov.w	r9, #0
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	4630      	mov	r0, r6
 800e100:	9302      	str	r3, [sp, #8]
 800e102:	f000 fc85 	bl	800ea10 <__lshift>
 800e106:	4621      	mov	r1, r4
 800e108:	4605      	mov	r5, r0
 800e10a:	f000 fced 	bl	800eae8 <__mcmp>
 800e10e:	2800      	cmp	r0, #0
 800e110:	dcb1      	bgt.n	800e076 <_dtoa_r+0x9e6>
 800e112:	d102      	bne.n	800e11a <_dtoa_r+0xa8a>
 800e114:	9b02      	ldr	r3, [sp, #8]
 800e116:	07db      	lsls	r3, r3, #31
 800e118:	d4ad      	bmi.n	800e076 <_dtoa_r+0x9e6>
 800e11a:	4643      	mov	r3, r8
 800e11c:	4698      	mov	r8, r3
 800e11e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e122:	2a30      	cmp	r2, #48	; 0x30
 800e124:	d0fa      	beq.n	800e11c <_dtoa_r+0xa8c>
 800e126:	e6f6      	b.n	800df16 <_dtoa_r+0x886>
 800e128:	9a00      	ldr	r2, [sp, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d1a4      	bne.n	800e078 <_dtoa_r+0x9e8>
 800e12e:	f10b 0b01 	add.w	fp, fp, #1
 800e132:	2331      	movs	r3, #49	; 0x31
 800e134:	e778      	b.n	800e028 <_dtoa_r+0x998>
 800e136:	4b15      	ldr	r3, [pc, #84]	; (800e18c <_dtoa_r+0xafc>)
 800e138:	f7ff bb12 	b.w	800d760 <_dtoa_r+0xd0>
 800e13c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f47f aaee 	bne.w	800d720 <_dtoa_r+0x90>
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <_dtoa_r+0xb00>)
 800e146:	f7ff bb0b 	b.w	800d760 <_dtoa_r+0xd0>
 800e14a:	f1ba 0f00 	cmp.w	sl, #0
 800e14e:	dc03      	bgt.n	800e158 <_dtoa_r+0xac8>
 800e150:	9b07      	ldr	r3, [sp, #28]
 800e152:	2b02      	cmp	r3, #2
 800e154:	f73f aec7 	bgt.w	800dee6 <_dtoa_r+0x856>
 800e158:	f8dd 8000 	ldr.w	r8, [sp]
 800e15c:	4621      	mov	r1, r4
 800e15e:	4628      	mov	r0, r5
 800e160:	f7ff fa0a 	bl	800d578 <quorem>
 800e164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e168:	f808 3b01 	strb.w	r3, [r8], #1
 800e16c:	9a00      	ldr	r2, [sp, #0]
 800e16e:	eba8 0202 	sub.w	r2, r8, r2
 800e172:	4592      	cmp	sl, r2
 800e174:	ddb7      	ble.n	800e0e6 <_dtoa_r+0xa56>
 800e176:	4629      	mov	r1, r5
 800e178:	2300      	movs	r3, #0
 800e17a:	220a      	movs	r2, #10
 800e17c:	4630      	mov	r0, r6
 800e17e:	f000 fa97 	bl	800e6b0 <__multadd>
 800e182:	4605      	mov	r5, r0
 800e184:	e7ea      	b.n	800e15c <_dtoa_r+0xacc>
 800e186:	bf00      	nop
 800e188:	0800f51f 	.word	0x0800f51f
 800e18c:	0800f478 	.word	0x0800f478
 800e190:	0800f49c 	.word	0x0800f49c

0800e194 <__sflush_r>:
 800e194:	898a      	ldrh	r2, [r1, #12]
 800e196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19a:	4605      	mov	r5, r0
 800e19c:	0710      	lsls	r0, r2, #28
 800e19e:	460c      	mov	r4, r1
 800e1a0:	d458      	bmi.n	800e254 <__sflush_r+0xc0>
 800e1a2:	684b      	ldr	r3, [r1, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dc05      	bgt.n	800e1b4 <__sflush_r+0x20>
 800e1a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dc02      	bgt.n	800e1b4 <__sflush_r+0x20>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d0f9      	beq.n	800e1ae <__sflush_r+0x1a>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1c0:	682f      	ldr	r7, [r5, #0]
 800e1c2:	602b      	str	r3, [r5, #0]
 800e1c4:	d032      	beq.n	800e22c <__sflush_r+0x98>
 800e1c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1c8:	89a3      	ldrh	r3, [r4, #12]
 800e1ca:	075a      	lsls	r2, r3, #29
 800e1cc:	d505      	bpl.n	800e1da <__sflush_r+0x46>
 800e1ce:	6863      	ldr	r3, [r4, #4]
 800e1d0:	1ac0      	subs	r0, r0, r3
 800e1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1d4:	b10b      	cbz	r3, 800e1da <__sflush_r+0x46>
 800e1d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1d8:	1ac0      	subs	r0, r0, r3
 800e1da:	2300      	movs	r3, #0
 800e1dc:	4602      	mov	r2, r0
 800e1de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1e0:	6a21      	ldr	r1, [r4, #32]
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47b0      	blx	r6
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	d106      	bne.n	800e1fa <__sflush_r+0x66>
 800e1ec:	6829      	ldr	r1, [r5, #0]
 800e1ee:	291d      	cmp	r1, #29
 800e1f0:	d82c      	bhi.n	800e24c <__sflush_r+0xb8>
 800e1f2:	4a2a      	ldr	r2, [pc, #168]	; (800e29c <__sflush_r+0x108>)
 800e1f4:	40ca      	lsrs	r2, r1
 800e1f6:	07d6      	lsls	r6, r2, #31
 800e1f8:	d528      	bpl.n	800e24c <__sflush_r+0xb8>
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	6062      	str	r2, [r4, #4]
 800e1fe:	04d9      	lsls	r1, r3, #19
 800e200:	6922      	ldr	r2, [r4, #16]
 800e202:	6022      	str	r2, [r4, #0]
 800e204:	d504      	bpl.n	800e210 <__sflush_r+0x7c>
 800e206:	1c42      	adds	r2, r0, #1
 800e208:	d101      	bne.n	800e20e <__sflush_r+0x7a>
 800e20a:	682b      	ldr	r3, [r5, #0]
 800e20c:	b903      	cbnz	r3, 800e210 <__sflush_r+0x7c>
 800e20e:	6560      	str	r0, [r4, #84]	; 0x54
 800e210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e212:	602f      	str	r7, [r5, #0]
 800e214:	2900      	cmp	r1, #0
 800e216:	d0ca      	beq.n	800e1ae <__sflush_r+0x1a>
 800e218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e21c:	4299      	cmp	r1, r3
 800e21e:	d002      	beq.n	800e226 <__sflush_r+0x92>
 800e220:	4628      	mov	r0, r5
 800e222:	f000 fd71 	bl	800ed08 <_free_r>
 800e226:	2000      	movs	r0, #0
 800e228:	6360      	str	r0, [r4, #52]	; 0x34
 800e22a:	e7c1      	b.n	800e1b0 <__sflush_r+0x1c>
 800e22c:	6a21      	ldr	r1, [r4, #32]
 800e22e:	2301      	movs	r3, #1
 800e230:	4628      	mov	r0, r5
 800e232:	47b0      	blx	r6
 800e234:	1c41      	adds	r1, r0, #1
 800e236:	d1c7      	bne.n	800e1c8 <__sflush_r+0x34>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d0c4      	beq.n	800e1c8 <__sflush_r+0x34>
 800e23e:	2b1d      	cmp	r3, #29
 800e240:	d001      	beq.n	800e246 <__sflush_r+0xb2>
 800e242:	2b16      	cmp	r3, #22
 800e244:	d101      	bne.n	800e24a <__sflush_r+0xb6>
 800e246:	602f      	str	r7, [r5, #0]
 800e248:	e7b1      	b.n	800e1ae <__sflush_r+0x1a>
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e250:	81a3      	strh	r3, [r4, #12]
 800e252:	e7ad      	b.n	800e1b0 <__sflush_r+0x1c>
 800e254:	690f      	ldr	r7, [r1, #16]
 800e256:	2f00      	cmp	r7, #0
 800e258:	d0a9      	beq.n	800e1ae <__sflush_r+0x1a>
 800e25a:	0793      	lsls	r3, r2, #30
 800e25c:	680e      	ldr	r6, [r1, #0]
 800e25e:	bf08      	it	eq
 800e260:	694b      	ldreq	r3, [r1, #20]
 800e262:	600f      	str	r7, [r1, #0]
 800e264:	bf18      	it	ne
 800e266:	2300      	movne	r3, #0
 800e268:	eba6 0807 	sub.w	r8, r6, r7
 800e26c:	608b      	str	r3, [r1, #8]
 800e26e:	f1b8 0f00 	cmp.w	r8, #0
 800e272:	dd9c      	ble.n	800e1ae <__sflush_r+0x1a>
 800e274:	6a21      	ldr	r1, [r4, #32]
 800e276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e278:	4643      	mov	r3, r8
 800e27a:	463a      	mov	r2, r7
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b0      	blx	r6
 800e280:	2800      	cmp	r0, #0
 800e282:	dc06      	bgt.n	800e292 <__sflush_r+0xfe>
 800e284:	89a3      	ldrh	r3, [r4, #12]
 800e286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e28a:	81a3      	strh	r3, [r4, #12]
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	e78e      	b.n	800e1b0 <__sflush_r+0x1c>
 800e292:	4407      	add	r7, r0
 800e294:	eba8 0800 	sub.w	r8, r8, r0
 800e298:	e7e9      	b.n	800e26e <__sflush_r+0xda>
 800e29a:	bf00      	nop
 800e29c:	20400001 	.word	0x20400001

0800e2a0 <_fflush_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	690b      	ldr	r3, [r1, #16]
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	b913      	cbnz	r3, 800e2b0 <_fflush_r+0x10>
 800e2aa:	2500      	movs	r5, #0
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	b118      	cbz	r0, 800e2ba <_fflush_r+0x1a>
 800e2b2:	6983      	ldr	r3, [r0, #24]
 800e2b4:	b90b      	cbnz	r3, 800e2ba <_fflush_r+0x1a>
 800e2b6:	f000 f887 	bl	800e3c8 <__sinit>
 800e2ba:	4b14      	ldr	r3, [pc, #80]	; (800e30c <_fflush_r+0x6c>)
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d11b      	bne.n	800e2f8 <_fflush_r+0x58>
 800e2c0:	686c      	ldr	r4, [r5, #4]
 800e2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d0ef      	beq.n	800e2aa <_fflush_r+0xa>
 800e2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2cc:	07d0      	lsls	r0, r2, #31
 800e2ce:	d404      	bmi.n	800e2da <_fflush_r+0x3a>
 800e2d0:	0599      	lsls	r1, r3, #22
 800e2d2:	d402      	bmi.n	800e2da <_fflush_r+0x3a>
 800e2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2d6:	f000 f91a 	bl	800e50e <__retarget_lock_acquire_recursive>
 800e2da:	4628      	mov	r0, r5
 800e2dc:	4621      	mov	r1, r4
 800e2de:	f7ff ff59 	bl	800e194 <__sflush_r>
 800e2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2e4:	07da      	lsls	r2, r3, #31
 800e2e6:	4605      	mov	r5, r0
 800e2e8:	d4e0      	bmi.n	800e2ac <_fflush_r+0xc>
 800e2ea:	89a3      	ldrh	r3, [r4, #12]
 800e2ec:	059b      	lsls	r3, r3, #22
 800e2ee:	d4dd      	bmi.n	800e2ac <_fflush_r+0xc>
 800e2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2f2:	f000 f90d 	bl	800e510 <__retarget_lock_release_recursive>
 800e2f6:	e7d9      	b.n	800e2ac <_fflush_r+0xc>
 800e2f8:	4b05      	ldr	r3, [pc, #20]	; (800e310 <_fflush_r+0x70>)
 800e2fa:	429c      	cmp	r4, r3
 800e2fc:	d101      	bne.n	800e302 <_fflush_r+0x62>
 800e2fe:	68ac      	ldr	r4, [r5, #8]
 800e300:	e7df      	b.n	800e2c2 <_fflush_r+0x22>
 800e302:	4b04      	ldr	r3, [pc, #16]	; (800e314 <_fflush_r+0x74>)
 800e304:	429c      	cmp	r4, r3
 800e306:	bf08      	it	eq
 800e308:	68ec      	ldreq	r4, [r5, #12]
 800e30a:	e7da      	b.n	800e2c2 <_fflush_r+0x22>
 800e30c:	0800f550 	.word	0x0800f550
 800e310:	0800f570 	.word	0x0800f570
 800e314:	0800f530 	.word	0x0800f530

0800e318 <std>:
 800e318:	2300      	movs	r3, #0
 800e31a:	b510      	push	{r4, lr}
 800e31c:	4604      	mov	r4, r0
 800e31e:	e9c0 3300 	strd	r3, r3, [r0]
 800e322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e326:	6083      	str	r3, [r0, #8]
 800e328:	8181      	strh	r1, [r0, #12]
 800e32a:	6643      	str	r3, [r0, #100]	; 0x64
 800e32c:	81c2      	strh	r2, [r0, #14]
 800e32e:	6183      	str	r3, [r0, #24]
 800e330:	4619      	mov	r1, r3
 800e332:	2208      	movs	r2, #8
 800e334:	305c      	adds	r0, #92	; 0x5c
 800e336:	f7fe fb85 	bl	800ca44 <memset>
 800e33a:	4b05      	ldr	r3, [pc, #20]	; (800e350 <std+0x38>)
 800e33c:	6263      	str	r3, [r4, #36]	; 0x24
 800e33e:	4b05      	ldr	r3, [pc, #20]	; (800e354 <std+0x3c>)
 800e340:	62a3      	str	r3, [r4, #40]	; 0x28
 800e342:	4b05      	ldr	r3, [pc, #20]	; (800e358 <std+0x40>)
 800e344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <std+0x44>)
 800e348:	6224      	str	r4, [r4, #32]
 800e34a:	6323      	str	r3, [r4, #48]	; 0x30
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	0800f131 	.word	0x0800f131
 800e354:	0800f153 	.word	0x0800f153
 800e358:	0800f18b 	.word	0x0800f18b
 800e35c:	0800f1af 	.word	0x0800f1af

0800e360 <_cleanup_r>:
 800e360:	4901      	ldr	r1, [pc, #4]	; (800e368 <_cleanup_r+0x8>)
 800e362:	f000 b8af 	b.w	800e4c4 <_fwalk_reent>
 800e366:	bf00      	nop
 800e368:	0800e2a1 	.word	0x0800e2a1

0800e36c <__sfmoreglue>:
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	1e4a      	subs	r2, r1, #1
 800e370:	2568      	movs	r5, #104	; 0x68
 800e372:	4355      	muls	r5, r2
 800e374:	460e      	mov	r6, r1
 800e376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e37a:	f000 fd15 	bl	800eda8 <_malloc_r>
 800e37e:	4604      	mov	r4, r0
 800e380:	b140      	cbz	r0, 800e394 <__sfmoreglue+0x28>
 800e382:	2100      	movs	r1, #0
 800e384:	e9c0 1600 	strd	r1, r6, [r0]
 800e388:	300c      	adds	r0, #12
 800e38a:	60a0      	str	r0, [r4, #8]
 800e38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e390:	f7fe fb58 	bl	800ca44 <memset>
 800e394:	4620      	mov	r0, r4
 800e396:	bd70      	pop	{r4, r5, r6, pc}

0800e398 <__sfp_lock_acquire>:
 800e398:	4801      	ldr	r0, [pc, #4]	; (800e3a0 <__sfp_lock_acquire+0x8>)
 800e39a:	f000 b8b8 	b.w	800e50e <__retarget_lock_acquire_recursive>
 800e39e:	bf00      	nop
 800e3a0:	24000a50 	.word	0x24000a50

0800e3a4 <__sfp_lock_release>:
 800e3a4:	4801      	ldr	r0, [pc, #4]	; (800e3ac <__sfp_lock_release+0x8>)
 800e3a6:	f000 b8b3 	b.w	800e510 <__retarget_lock_release_recursive>
 800e3aa:	bf00      	nop
 800e3ac:	24000a50 	.word	0x24000a50

0800e3b0 <__sinit_lock_acquire>:
 800e3b0:	4801      	ldr	r0, [pc, #4]	; (800e3b8 <__sinit_lock_acquire+0x8>)
 800e3b2:	f000 b8ac 	b.w	800e50e <__retarget_lock_acquire_recursive>
 800e3b6:	bf00      	nop
 800e3b8:	24000a4b 	.word	0x24000a4b

0800e3bc <__sinit_lock_release>:
 800e3bc:	4801      	ldr	r0, [pc, #4]	; (800e3c4 <__sinit_lock_release+0x8>)
 800e3be:	f000 b8a7 	b.w	800e510 <__retarget_lock_release_recursive>
 800e3c2:	bf00      	nop
 800e3c4:	24000a4b 	.word	0x24000a4b

0800e3c8 <__sinit>:
 800e3c8:	b510      	push	{r4, lr}
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	f7ff fff0 	bl	800e3b0 <__sinit_lock_acquire>
 800e3d0:	69a3      	ldr	r3, [r4, #24]
 800e3d2:	b11b      	cbz	r3, 800e3dc <__sinit+0x14>
 800e3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3d8:	f7ff bff0 	b.w	800e3bc <__sinit_lock_release>
 800e3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e3e2:	4b13      	ldr	r3, [pc, #76]	; (800e430 <__sinit+0x68>)
 800e3e4:	4a13      	ldr	r2, [pc, #76]	; (800e434 <__sinit+0x6c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3ea:	42a3      	cmp	r3, r4
 800e3ec:	bf04      	itt	eq
 800e3ee:	2301      	moveq	r3, #1
 800e3f0:	61a3      	streq	r3, [r4, #24]
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f000 f820 	bl	800e438 <__sfp>
 800e3f8:	6060      	str	r0, [r4, #4]
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 f81c 	bl	800e438 <__sfp>
 800e400:	60a0      	str	r0, [r4, #8]
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f818 	bl	800e438 <__sfp>
 800e408:	2200      	movs	r2, #0
 800e40a:	60e0      	str	r0, [r4, #12]
 800e40c:	2104      	movs	r1, #4
 800e40e:	6860      	ldr	r0, [r4, #4]
 800e410:	f7ff ff82 	bl	800e318 <std>
 800e414:	68a0      	ldr	r0, [r4, #8]
 800e416:	2201      	movs	r2, #1
 800e418:	2109      	movs	r1, #9
 800e41a:	f7ff ff7d 	bl	800e318 <std>
 800e41e:	68e0      	ldr	r0, [r4, #12]
 800e420:	2202      	movs	r2, #2
 800e422:	2112      	movs	r1, #18
 800e424:	f7ff ff78 	bl	800e318 <std>
 800e428:	2301      	movs	r3, #1
 800e42a:	61a3      	str	r3, [r4, #24]
 800e42c:	e7d2      	b.n	800e3d4 <__sinit+0xc>
 800e42e:	bf00      	nop
 800e430:	0800f464 	.word	0x0800f464
 800e434:	0800e361 	.word	0x0800e361

0800e438 <__sfp>:
 800e438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e43a:	4607      	mov	r7, r0
 800e43c:	f7ff ffac 	bl	800e398 <__sfp_lock_acquire>
 800e440:	4b1e      	ldr	r3, [pc, #120]	; (800e4bc <__sfp+0x84>)
 800e442:	681e      	ldr	r6, [r3, #0]
 800e444:	69b3      	ldr	r3, [r6, #24]
 800e446:	b913      	cbnz	r3, 800e44e <__sfp+0x16>
 800e448:	4630      	mov	r0, r6
 800e44a:	f7ff ffbd 	bl	800e3c8 <__sinit>
 800e44e:	3648      	adds	r6, #72	; 0x48
 800e450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e454:	3b01      	subs	r3, #1
 800e456:	d503      	bpl.n	800e460 <__sfp+0x28>
 800e458:	6833      	ldr	r3, [r6, #0]
 800e45a:	b30b      	cbz	r3, 800e4a0 <__sfp+0x68>
 800e45c:	6836      	ldr	r6, [r6, #0]
 800e45e:	e7f7      	b.n	800e450 <__sfp+0x18>
 800e460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e464:	b9d5      	cbnz	r5, 800e49c <__sfp+0x64>
 800e466:	4b16      	ldr	r3, [pc, #88]	; (800e4c0 <__sfp+0x88>)
 800e468:	60e3      	str	r3, [r4, #12]
 800e46a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e46e:	6665      	str	r5, [r4, #100]	; 0x64
 800e470:	f000 f84c 	bl	800e50c <__retarget_lock_init_recursive>
 800e474:	f7ff ff96 	bl	800e3a4 <__sfp_lock_release>
 800e478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e47c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e480:	6025      	str	r5, [r4, #0]
 800e482:	61a5      	str	r5, [r4, #24]
 800e484:	2208      	movs	r2, #8
 800e486:	4629      	mov	r1, r5
 800e488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e48c:	f7fe fada 	bl	800ca44 <memset>
 800e490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e498:	4620      	mov	r0, r4
 800e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e49c:	3468      	adds	r4, #104	; 0x68
 800e49e:	e7d9      	b.n	800e454 <__sfp+0x1c>
 800e4a0:	2104      	movs	r1, #4
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	f7ff ff62 	bl	800e36c <__sfmoreglue>
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	6030      	str	r0, [r6, #0]
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1d5      	bne.n	800e45c <__sfp+0x24>
 800e4b0:	f7ff ff78 	bl	800e3a4 <__sfp_lock_release>
 800e4b4:	230c      	movs	r3, #12
 800e4b6:	603b      	str	r3, [r7, #0]
 800e4b8:	e7ee      	b.n	800e498 <__sfp+0x60>
 800e4ba:	bf00      	nop
 800e4bc:	0800f464 	.word	0x0800f464
 800e4c0:	ffff0001 	.word	0xffff0001

0800e4c4 <_fwalk_reent>:
 800e4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	4688      	mov	r8, r1
 800e4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4d0:	2700      	movs	r7, #0
 800e4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e4da:	d505      	bpl.n	800e4e8 <_fwalk_reent+0x24>
 800e4dc:	6824      	ldr	r4, [r4, #0]
 800e4de:	2c00      	cmp	r4, #0
 800e4e0:	d1f7      	bne.n	800e4d2 <_fwalk_reent+0xe>
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4e8:	89ab      	ldrh	r3, [r5, #12]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d907      	bls.n	800e4fe <_fwalk_reent+0x3a>
 800e4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	d003      	beq.n	800e4fe <_fwalk_reent+0x3a>
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	47c0      	blx	r8
 800e4fc:	4307      	orrs	r7, r0
 800e4fe:	3568      	adds	r5, #104	; 0x68
 800e500:	e7e9      	b.n	800e4d6 <_fwalk_reent+0x12>
	...

0800e504 <_localeconv_r>:
 800e504:	4800      	ldr	r0, [pc, #0]	; (800e508 <_localeconv_r+0x4>)
 800e506:	4770      	bx	lr
 800e508:	24000164 	.word	0x24000164

0800e50c <__retarget_lock_init_recursive>:
 800e50c:	4770      	bx	lr

0800e50e <__retarget_lock_acquire_recursive>:
 800e50e:	4770      	bx	lr

0800e510 <__retarget_lock_release_recursive>:
 800e510:	4770      	bx	lr

0800e512 <__swhatbuf_r>:
 800e512:	b570      	push	{r4, r5, r6, lr}
 800e514:	460e      	mov	r6, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	2900      	cmp	r1, #0
 800e51c:	b096      	sub	sp, #88	; 0x58
 800e51e:	4614      	mov	r4, r2
 800e520:	461d      	mov	r5, r3
 800e522:	da07      	bge.n	800e534 <__swhatbuf_r+0x22>
 800e524:	2300      	movs	r3, #0
 800e526:	602b      	str	r3, [r5, #0]
 800e528:	89b3      	ldrh	r3, [r6, #12]
 800e52a:	061a      	lsls	r2, r3, #24
 800e52c:	d410      	bmi.n	800e550 <__swhatbuf_r+0x3e>
 800e52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e532:	e00e      	b.n	800e552 <__swhatbuf_r+0x40>
 800e534:	466a      	mov	r2, sp
 800e536:	f000 fe91 	bl	800f25c <_fstat_r>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	dbf2      	blt.n	800e524 <__swhatbuf_r+0x12>
 800e53e:	9a01      	ldr	r2, [sp, #4]
 800e540:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e544:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e548:	425a      	negs	r2, r3
 800e54a:	415a      	adcs	r2, r3
 800e54c:	602a      	str	r2, [r5, #0]
 800e54e:	e7ee      	b.n	800e52e <__swhatbuf_r+0x1c>
 800e550:	2340      	movs	r3, #64	; 0x40
 800e552:	2000      	movs	r0, #0
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	b016      	add	sp, #88	; 0x58
 800e558:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e55c <__smakebuf_r>:
 800e55c:	898b      	ldrh	r3, [r1, #12]
 800e55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e560:	079d      	lsls	r5, r3, #30
 800e562:	4606      	mov	r6, r0
 800e564:	460c      	mov	r4, r1
 800e566:	d507      	bpl.n	800e578 <__smakebuf_r+0x1c>
 800e568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	2301      	movs	r3, #1
 800e572:	6163      	str	r3, [r4, #20]
 800e574:	b002      	add	sp, #8
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	ab01      	add	r3, sp, #4
 800e57a:	466a      	mov	r2, sp
 800e57c:	f7ff ffc9 	bl	800e512 <__swhatbuf_r>
 800e580:	9900      	ldr	r1, [sp, #0]
 800e582:	4605      	mov	r5, r0
 800e584:	4630      	mov	r0, r6
 800e586:	f000 fc0f 	bl	800eda8 <_malloc_r>
 800e58a:	b948      	cbnz	r0, 800e5a0 <__smakebuf_r+0x44>
 800e58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e590:	059a      	lsls	r2, r3, #22
 800e592:	d4ef      	bmi.n	800e574 <__smakebuf_r+0x18>
 800e594:	f023 0303 	bic.w	r3, r3, #3
 800e598:	f043 0302 	orr.w	r3, r3, #2
 800e59c:	81a3      	strh	r3, [r4, #12]
 800e59e:	e7e3      	b.n	800e568 <__smakebuf_r+0xc>
 800e5a0:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <__smakebuf_r+0x7c>)
 800e5a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	6020      	str	r0, [r4, #0]
 800e5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	9b00      	ldr	r3, [sp, #0]
 800e5b0:	6163      	str	r3, [r4, #20]
 800e5b2:	9b01      	ldr	r3, [sp, #4]
 800e5b4:	6120      	str	r0, [r4, #16]
 800e5b6:	b15b      	cbz	r3, 800e5d0 <__smakebuf_r+0x74>
 800e5b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 fe5f 	bl	800f280 <_isatty_r>
 800e5c2:	b128      	cbz	r0, 800e5d0 <__smakebuf_r+0x74>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f023 0303 	bic.w	r3, r3, #3
 800e5ca:	f043 0301 	orr.w	r3, r3, #1
 800e5ce:	81a3      	strh	r3, [r4, #12]
 800e5d0:	89a0      	ldrh	r0, [r4, #12]
 800e5d2:	4305      	orrs	r5, r0
 800e5d4:	81a5      	strh	r5, [r4, #12]
 800e5d6:	e7cd      	b.n	800e574 <__smakebuf_r+0x18>
 800e5d8:	0800e361 	.word	0x0800e361

0800e5dc <malloc>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	; (800e5e8 <malloc+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f000 bbe1 	b.w	800eda8 <_malloc_r>
 800e5e6:	bf00      	nop
 800e5e8:	24000010 	.word	0x24000010

0800e5ec <_Balloc>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	460d      	mov	r5, r1
 800e5f4:	b976      	cbnz	r6, 800e614 <_Balloc+0x28>
 800e5f6:	2010      	movs	r0, #16
 800e5f8:	f7ff fff0 	bl	800e5dc <malloc>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	6260      	str	r0, [r4, #36]	; 0x24
 800e600:	b920      	cbnz	r0, 800e60c <_Balloc+0x20>
 800e602:	4b18      	ldr	r3, [pc, #96]	; (800e664 <_Balloc+0x78>)
 800e604:	4818      	ldr	r0, [pc, #96]	; (800e668 <_Balloc+0x7c>)
 800e606:	2166      	movs	r1, #102	; 0x66
 800e608:	f000 fde8 	bl	800f1dc <__assert_func>
 800e60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e610:	6006      	str	r6, [r0, #0]
 800e612:	60c6      	str	r6, [r0, #12]
 800e614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e616:	68f3      	ldr	r3, [r6, #12]
 800e618:	b183      	cbz	r3, 800e63c <_Balloc+0x50>
 800e61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e622:	b9b8      	cbnz	r0, 800e654 <_Balloc+0x68>
 800e624:	2101      	movs	r1, #1
 800e626:	fa01 f605 	lsl.w	r6, r1, r5
 800e62a:	1d72      	adds	r2, r6, #5
 800e62c:	0092      	lsls	r2, r2, #2
 800e62e:	4620      	mov	r0, r4
 800e630:	f000 fb5a 	bl	800ece8 <_calloc_r>
 800e634:	b160      	cbz	r0, 800e650 <_Balloc+0x64>
 800e636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e63a:	e00e      	b.n	800e65a <_Balloc+0x6e>
 800e63c:	2221      	movs	r2, #33	; 0x21
 800e63e:	2104      	movs	r1, #4
 800e640:	4620      	mov	r0, r4
 800e642:	f000 fb51 	bl	800ece8 <_calloc_r>
 800e646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e648:	60f0      	str	r0, [r6, #12]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e4      	bne.n	800e61a <_Balloc+0x2e>
 800e650:	2000      	movs	r0, #0
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	6802      	ldr	r2, [r0, #0]
 800e656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e65a:	2300      	movs	r3, #0
 800e65c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e660:	e7f7      	b.n	800e652 <_Balloc+0x66>
 800e662:	bf00      	nop
 800e664:	0800f4a9 	.word	0x0800f4a9
 800e668:	0800f590 	.word	0x0800f590

0800e66c <_Bfree>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e670:	4605      	mov	r5, r0
 800e672:	460c      	mov	r4, r1
 800e674:	b976      	cbnz	r6, 800e694 <_Bfree+0x28>
 800e676:	2010      	movs	r0, #16
 800e678:	f7ff ffb0 	bl	800e5dc <malloc>
 800e67c:	4602      	mov	r2, r0
 800e67e:	6268      	str	r0, [r5, #36]	; 0x24
 800e680:	b920      	cbnz	r0, 800e68c <_Bfree+0x20>
 800e682:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <_Bfree+0x3c>)
 800e684:	4809      	ldr	r0, [pc, #36]	; (800e6ac <_Bfree+0x40>)
 800e686:	218a      	movs	r1, #138	; 0x8a
 800e688:	f000 fda8 	bl	800f1dc <__assert_func>
 800e68c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e690:	6006      	str	r6, [r0, #0]
 800e692:	60c6      	str	r6, [r0, #12]
 800e694:	b13c      	cbz	r4, 800e6a6 <_Bfree+0x3a>
 800e696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e698:	6862      	ldr	r2, [r4, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6a0:	6021      	str	r1, [r4, #0]
 800e6a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6a6:	bd70      	pop	{r4, r5, r6, pc}
 800e6a8:	0800f4a9 	.word	0x0800f4a9
 800e6ac:	0800f590 	.word	0x0800f590

0800e6b0 <__multadd>:
 800e6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b4:	690e      	ldr	r6, [r1, #16]
 800e6b6:	4607      	mov	r7, r0
 800e6b8:	4698      	mov	r8, r3
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	f101 0014 	add.w	r0, r1, #20
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	6805      	ldr	r5, [r0, #0]
 800e6c4:	b2a9      	uxth	r1, r5
 800e6c6:	fb02 8101 	mla	r1, r2, r1, r8
 800e6ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e6ce:	0c2d      	lsrs	r5, r5, #16
 800e6d0:	fb02 c505 	mla	r5, r2, r5, ip
 800e6d4:	b289      	uxth	r1, r1
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e6dc:	429e      	cmp	r6, r3
 800e6de:	f840 1b04 	str.w	r1, [r0], #4
 800e6e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e6e6:	dcec      	bgt.n	800e6c2 <__multadd+0x12>
 800e6e8:	f1b8 0f00 	cmp.w	r8, #0
 800e6ec:	d022      	beq.n	800e734 <__multadd+0x84>
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	42b3      	cmp	r3, r6
 800e6f2:	dc19      	bgt.n	800e728 <__multadd+0x78>
 800e6f4:	6861      	ldr	r1, [r4, #4]
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	3101      	adds	r1, #1
 800e6fa:	f7ff ff77 	bl	800e5ec <_Balloc>
 800e6fe:	4605      	mov	r5, r0
 800e700:	b928      	cbnz	r0, 800e70e <__multadd+0x5e>
 800e702:	4602      	mov	r2, r0
 800e704:	4b0d      	ldr	r3, [pc, #52]	; (800e73c <__multadd+0x8c>)
 800e706:	480e      	ldr	r0, [pc, #56]	; (800e740 <__multadd+0x90>)
 800e708:	21b5      	movs	r1, #181	; 0xb5
 800e70a:	f000 fd67 	bl	800f1dc <__assert_func>
 800e70e:	6922      	ldr	r2, [r4, #16]
 800e710:	3202      	adds	r2, #2
 800e712:	f104 010c 	add.w	r1, r4, #12
 800e716:	0092      	lsls	r2, r2, #2
 800e718:	300c      	adds	r0, #12
 800e71a:	f7fe f985 	bl	800ca28 <memcpy>
 800e71e:	4621      	mov	r1, r4
 800e720:	4638      	mov	r0, r7
 800e722:	f7ff ffa3 	bl	800e66c <_Bfree>
 800e726:	462c      	mov	r4, r5
 800e728:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e72c:	3601      	adds	r6, #1
 800e72e:	f8c3 8014 	str.w	r8, [r3, #20]
 800e732:	6126      	str	r6, [r4, #16]
 800e734:	4620      	mov	r0, r4
 800e736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73a:	bf00      	nop
 800e73c:	0800f51f 	.word	0x0800f51f
 800e740:	0800f590 	.word	0x0800f590

0800e744 <__hi0bits>:
 800e744:	0c03      	lsrs	r3, r0, #16
 800e746:	041b      	lsls	r3, r3, #16
 800e748:	b9d3      	cbnz	r3, 800e780 <__hi0bits+0x3c>
 800e74a:	0400      	lsls	r0, r0, #16
 800e74c:	2310      	movs	r3, #16
 800e74e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e752:	bf04      	itt	eq
 800e754:	0200      	lsleq	r0, r0, #8
 800e756:	3308      	addeq	r3, #8
 800e758:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e75c:	bf04      	itt	eq
 800e75e:	0100      	lsleq	r0, r0, #4
 800e760:	3304      	addeq	r3, #4
 800e762:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e766:	bf04      	itt	eq
 800e768:	0080      	lsleq	r0, r0, #2
 800e76a:	3302      	addeq	r3, #2
 800e76c:	2800      	cmp	r0, #0
 800e76e:	db05      	blt.n	800e77c <__hi0bits+0x38>
 800e770:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e774:	f103 0301 	add.w	r3, r3, #1
 800e778:	bf08      	it	eq
 800e77a:	2320      	moveq	r3, #32
 800e77c:	4618      	mov	r0, r3
 800e77e:	4770      	bx	lr
 800e780:	2300      	movs	r3, #0
 800e782:	e7e4      	b.n	800e74e <__hi0bits+0xa>

0800e784 <__lo0bits>:
 800e784:	6803      	ldr	r3, [r0, #0]
 800e786:	f013 0207 	ands.w	r2, r3, #7
 800e78a:	4601      	mov	r1, r0
 800e78c:	d00b      	beq.n	800e7a6 <__lo0bits+0x22>
 800e78e:	07da      	lsls	r2, r3, #31
 800e790:	d424      	bmi.n	800e7dc <__lo0bits+0x58>
 800e792:	0798      	lsls	r0, r3, #30
 800e794:	bf49      	itett	mi
 800e796:	085b      	lsrmi	r3, r3, #1
 800e798:	089b      	lsrpl	r3, r3, #2
 800e79a:	2001      	movmi	r0, #1
 800e79c:	600b      	strmi	r3, [r1, #0]
 800e79e:	bf5c      	itt	pl
 800e7a0:	600b      	strpl	r3, [r1, #0]
 800e7a2:	2002      	movpl	r0, #2
 800e7a4:	4770      	bx	lr
 800e7a6:	b298      	uxth	r0, r3
 800e7a8:	b9b0      	cbnz	r0, 800e7d8 <__lo0bits+0x54>
 800e7aa:	0c1b      	lsrs	r3, r3, #16
 800e7ac:	2010      	movs	r0, #16
 800e7ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e7b2:	bf04      	itt	eq
 800e7b4:	0a1b      	lsreq	r3, r3, #8
 800e7b6:	3008      	addeq	r0, #8
 800e7b8:	071a      	lsls	r2, r3, #28
 800e7ba:	bf04      	itt	eq
 800e7bc:	091b      	lsreq	r3, r3, #4
 800e7be:	3004      	addeq	r0, #4
 800e7c0:	079a      	lsls	r2, r3, #30
 800e7c2:	bf04      	itt	eq
 800e7c4:	089b      	lsreq	r3, r3, #2
 800e7c6:	3002      	addeq	r0, #2
 800e7c8:	07da      	lsls	r2, r3, #31
 800e7ca:	d403      	bmi.n	800e7d4 <__lo0bits+0x50>
 800e7cc:	085b      	lsrs	r3, r3, #1
 800e7ce:	f100 0001 	add.w	r0, r0, #1
 800e7d2:	d005      	beq.n	800e7e0 <__lo0bits+0x5c>
 800e7d4:	600b      	str	r3, [r1, #0]
 800e7d6:	4770      	bx	lr
 800e7d8:	4610      	mov	r0, r2
 800e7da:	e7e8      	b.n	800e7ae <__lo0bits+0x2a>
 800e7dc:	2000      	movs	r0, #0
 800e7de:	4770      	bx	lr
 800e7e0:	2020      	movs	r0, #32
 800e7e2:	4770      	bx	lr

0800e7e4 <__i2b>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	f7ff feff 	bl	800e5ec <_Balloc>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	b928      	cbnz	r0, 800e7fe <__i2b+0x1a>
 800e7f2:	4b05      	ldr	r3, [pc, #20]	; (800e808 <__i2b+0x24>)
 800e7f4:	4805      	ldr	r0, [pc, #20]	; (800e80c <__i2b+0x28>)
 800e7f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e7fa:	f000 fcef 	bl	800f1dc <__assert_func>
 800e7fe:	2301      	movs	r3, #1
 800e800:	6144      	str	r4, [r0, #20]
 800e802:	6103      	str	r3, [r0, #16]
 800e804:	bd10      	pop	{r4, pc}
 800e806:	bf00      	nop
 800e808:	0800f51f 	.word	0x0800f51f
 800e80c:	0800f590 	.word	0x0800f590

0800e810 <__multiply>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	4614      	mov	r4, r2
 800e816:	690a      	ldr	r2, [r1, #16]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	bfb8      	it	lt
 800e81e:	460b      	movlt	r3, r1
 800e820:	460d      	mov	r5, r1
 800e822:	bfbc      	itt	lt
 800e824:	4625      	movlt	r5, r4
 800e826:	461c      	movlt	r4, r3
 800e828:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e82c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e830:	68ab      	ldr	r3, [r5, #8]
 800e832:	6869      	ldr	r1, [r5, #4]
 800e834:	eb0a 0709 	add.w	r7, sl, r9
 800e838:	42bb      	cmp	r3, r7
 800e83a:	b085      	sub	sp, #20
 800e83c:	bfb8      	it	lt
 800e83e:	3101      	addlt	r1, #1
 800e840:	f7ff fed4 	bl	800e5ec <_Balloc>
 800e844:	b930      	cbnz	r0, 800e854 <__multiply+0x44>
 800e846:	4602      	mov	r2, r0
 800e848:	4b42      	ldr	r3, [pc, #264]	; (800e954 <__multiply+0x144>)
 800e84a:	4843      	ldr	r0, [pc, #268]	; (800e958 <__multiply+0x148>)
 800e84c:	f240 115d 	movw	r1, #349	; 0x15d
 800e850:	f000 fcc4 	bl	800f1dc <__assert_func>
 800e854:	f100 0614 	add.w	r6, r0, #20
 800e858:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e85c:	4633      	mov	r3, r6
 800e85e:	2200      	movs	r2, #0
 800e860:	4543      	cmp	r3, r8
 800e862:	d31e      	bcc.n	800e8a2 <__multiply+0x92>
 800e864:	f105 0c14 	add.w	ip, r5, #20
 800e868:	f104 0314 	add.w	r3, r4, #20
 800e86c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e870:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e874:	9202      	str	r2, [sp, #8]
 800e876:	ebac 0205 	sub.w	r2, ip, r5
 800e87a:	3a15      	subs	r2, #21
 800e87c:	f022 0203 	bic.w	r2, r2, #3
 800e880:	3204      	adds	r2, #4
 800e882:	f105 0115 	add.w	r1, r5, #21
 800e886:	458c      	cmp	ip, r1
 800e888:	bf38      	it	cc
 800e88a:	2204      	movcc	r2, #4
 800e88c:	9201      	str	r2, [sp, #4]
 800e88e:	9a02      	ldr	r2, [sp, #8]
 800e890:	9303      	str	r3, [sp, #12]
 800e892:	429a      	cmp	r2, r3
 800e894:	d808      	bhi.n	800e8a8 <__multiply+0x98>
 800e896:	2f00      	cmp	r7, #0
 800e898:	dc55      	bgt.n	800e946 <__multiply+0x136>
 800e89a:	6107      	str	r7, [r0, #16]
 800e89c:	b005      	add	sp, #20
 800e89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a2:	f843 2b04 	str.w	r2, [r3], #4
 800e8a6:	e7db      	b.n	800e860 <__multiply+0x50>
 800e8a8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8ac:	f1ba 0f00 	cmp.w	sl, #0
 800e8b0:	d020      	beq.n	800e8f4 <__multiply+0xe4>
 800e8b2:	f105 0e14 	add.w	lr, r5, #20
 800e8b6:	46b1      	mov	r9, r6
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e8be:	f8d9 b000 	ldr.w	fp, [r9]
 800e8c2:	b2a1      	uxth	r1, r4
 800e8c4:	fa1f fb8b 	uxth.w	fp, fp
 800e8c8:	fb0a b101 	mla	r1, sl, r1, fp
 800e8cc:	4411      	add	r1, r2
 800e8ce:	f8d9 2000 	ldr.w	r2, [r9]
 800e8d2:	0c24      	lsrs	r4, r4, #16
 800e8d4:	0c12      	lsrs	r2, r2, #16
 800e8d6:	fb0a 2404 	mla	r4, sl, r4, r2
 800e8da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e8de:	b289      	uxth	r1, r1
 800e8e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e8e4:	45f4      	cmp	ip, lr
 800e8e6:	f849 1b04 	str.w	r1, [r9], #4
 800e8ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e8ee:	d8e4      	bhi.n	800e8ba <__multiply+0xaa>
 800e8f0:	9901      	ldr	r1, [sp, #4]
 800e8f2:	5072      	str	r2, [r6, r1]
 800e8f4:	9a03      	ldr	r2, [sp, #12]
 800e8f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	f1b9 0f00 	cmp.w	r9, #0
 800e900:	d01f      	beq.n	800e942 <__multiply+0x132>
 800e902:	6834      	ldr	r4, [r6, #0]
 800e904:	f105 0114 	add.w	r1, r5, #20
 800e908:	46b6      	mov	lr, r6
 800e90a:	f04f 0a00 	mov.w	sl, #0
 800e90e:	880a      	ldrh	r2, [r1, #0]
 800e910:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e914:	fb09 b202 	mla	r2, r9, r2, fp
 800e918:	4492      	add	sl, r2
 800e91a:	b2a4      	uxth	r4, r4
 800e91c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e920:	f84e 4b04 	str.w	r4, [lr], #4
 800e924:	f851 4b04 	ldr.w	r4, [r1], #4
 800e928:	f8be 2000 	ldrh.w	r2, [lr]
 800e92c:	0c24      	lsrs	r4, r4, #16
 800e92e:	fb09 2404 	mla	r4, r9, r4, r2
 800e932:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e936:	458c      	cmp	ip, r1
 800e938:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e93c:	d8e7      	bhi.n	800e90e <__multiply+0xfe>
 800e93e:	9a01      	ldr	r2, [sp, #4]
 800e940:	50b4      	str	r4, [r6, r2]
 800e942:	3604      	adds	r6, #4
 800e944:	e7a3      	b.n	800e88e <__multiply+0x7e>
 800e946:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1a5      	bne.n	800e89a <__multiply+0x8a>
 800e94e:	3f01      	subs	r7, #1
 800e950:	e7a1      	b.n	800e896 <__multiply+0x86>
 800e952:	bf00      	nop
 800e954:	0800f51f 	.word	0x0800f51f
 800e958:	0800f590 	.word	0x0800f590

0800e95c <__pow5mult>:
 800e95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e960:	4615      	mov	r5, r2
 800e962:	f012 0203 	ands.w	r2, r2, #3
 800e966:	4606      	mov	r6, r0
 800e968:	460f      	mov	r7, r1
 800e96a:	d007      	beq.n	800e97c <__pow5mult+0x20>
 800e96c:	4c25      	ldr	r4, [pc, #148]	; (800ea04 <__pow5mult+0xa8>)
 800e96e:	3a01      	subs	r2, #1
 800e970:	2300      	movs	r3, #0
 800e972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e976:	f7ff fe9b 	bl	800e6b0 <__multadd>
 800e97a:	4607      	mov	r7, r0
 800e97c:	10ad      	asrs	r5, r5, #2
 800e97e:	d03d      	beq.n	800e9fc <__pow5mult+0xa0>
 800e980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e982:	b97c      	cbnz	r4, 800e9a4 <__pow5mult+0x48>
 800e984:	2010      	movs	r0, #16
 800e986:	f7ff fe29 	bl	800e5dc <malloc>
 800e98a:	4602      	mov	r2, r0
 800e98c:	6270      	str	r0, [r6, #36]	; 0x24
 800e98e:	b928      	cbnz	r0, 800e99c <__pow5mult+0x40>
 800e990:	4b1d      	ldr	r3, [pc, #116]	; (800ea08 <__pow5mult+0xac>)
 800e992:	481e      	ldr	r0, [pc, #120]	; (800ea0c <__pow5mult+0xb0>)
 800e994:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e998:	f000 fc20 	bl	800f1dc <__assert_func>
 800e99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9a0:	6004      	str	r4, [r0, #0]
 800e9a2:	60c4      	str	r4, [r0, #12]
 800e9a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9ac:	b94c      	cbnz	r4, 800e9c2 <__pow5mult+0x66>
 800e9ae:	f240 2171 	movw	r1, #625	; 0x271
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f7ff ff16 	bl	800e7e4 <__i2b>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9be:	4604      	mov	r4, r0
 800e9c0:	6003      	str	r3, [r0, #0]
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	07eb      	lsls	r3, r5, #31
 800e9c8:	d50a      	bpl.n	800e9e0 <__pow5mult+0x84>
 800e9ca:	4639      	mov	r1, r7
 800e9cc:	4622      	mov	r2, r4
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7ff ff1e 	bl	800e810 <__multiply>
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	4680      	mov	r8, r0
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f7ff fe47 	bl	800e66c <_Bfree>
 800e9de:	4647      	mov	r7, r8
 800e9e0:	106d      	asrs	r5, r5, #1
 800e9e2:	d00b      	beq.n	800e9fc <__pow5mult+0xa0>
 800e9e4:	6820      	ldr	r0, [r4, #0]
 800e9e6:	b938      	cbnz	r0, 800e9f8 <__pow5mult+0x9c>
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f7ff ff0f 	bl	800e810 <__multiply>
 800e9f2:	6020      	str	r0, [r4, #0]
 800e9f4:	f8c0 9000 	str.w	r9, [r0]
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	e7e4      	b.n	800e9c6 <__pow5mult+0x6a>
 800e9fc:	4638      	mov	r0, r7
 800e9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea02:	bf00      	nop
 800ea04:	0800f6e0 	.word	0x0800f6e0
 800ea08:	0800f4a9 	.word	0x0800f4a9
 800ea0c:	0800f590 	.word	0x0800f590

0800ea10 <__lshift>:
 800ea10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea14:	460c      	mov	r4, r1
 800ea16:	6849      	ldr	r1, [r1, #4]
 800ea18:	6923      	ldr	r3, [r4, #16]
 800ea1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea1e:	68a3      	ldr	r3, [r4, #8]
 800ea20:	4607      	mov	r7, r0
 800ea22:	4691      	mov	r9, r2
 800ea24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea28:	f108 0601 	add.w	r6, r8, #1
 800ea2c:	42b3      	cmp	r3, r6
 800ea2e:	db0b      	blt.n	800ea48 <__lshift+0x38>
 800ea30:	4638      	mov	r0, r7
 800ea32:	f7ff fddb 	bl	800e5ec <_Balloc>
 800ea36:	4605      	mov	r5, r0
 800ea38:	b948      	cbnz	r0, 800ea4e <__lshift+0x3e>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	4b28      	ldr	r3, [pc, #160]	; (800eae0 <__lshift+0xd0>)
 800ea3e:	4829      	ldr	r0, [pc, #164]	; (800eae4 <__lshift+0xd4>)
 800ea40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea44:	f000 fbca 	bl	800f1dc <__assert_func>
 800ea48:	3101      	adds	r1, #1
 800ea4a:	005b      	lsls	r3, r3, #1
 800ea4c:	e7ee      	b.n	800ea2c <__lshift+0x1c>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f100 0114 	add.w	r1, r0, #20
 800ea54:	f100 0210 	add.w	r2, r0, #16
 800ea58:	4618      	mov	r0, r3
 800ea5a:	4553      	cmp	r3, sl
 800ea5c:	db33      	blt.n	800eac6 <__lshift+0xb6>
 800ea5e:	6920      	ldr	r0, [r4, #16]
 800ea60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea64:	f104 0314 	add.w	r3, r4, #20
 800ea68:	f019 091f 	ands.w	r9, r9, #31
 800ea6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea74:	d02b      	beq.n	800eace <__lshift+0xbe>
 800ea76:	f1c9 0e20 	rsb	lr, r9, #32
 800ea7a:	468a      	mov	sl, r1
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	fa00 f009 	lsl.w	r0, r0, r9
 800ea84:	4302      	orrs	r2, r0
 800ea86:	f84a 2b04 	str.w	r2, [sl], #4
 800ea8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8e:	459c      	cmp	ip, r3
 800ea90:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea94:	d8f3      	bhi.n	800ea7e <__lshift+0x6e>
 800ea96:	ebac 0304 	sub.w	r3, ip, r4
 800ea9a:	3b15      	subs	r3, #21
 800ea9c:	f023 0303 	bic.w	r3, r3, #3
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	f104 0015 	add.w	r0, r4, #21
 800eaa6:	4584      	cmp	ip, r0
 800eaa8:	bf38      	it	cc
 800eaaa:	2304      	movcc	r3, #4
 800eaac:	50ca      	str	r2, [r1, r3]
 800eaae:	b10a      	cbz	r2, 800eab4 <__lshift+0xa4>
 800eab0:	f108 0602 	add.w	r6, r8, #2
 800eab4:	3e01      	subs	r6, #1
 800eab6:	4638      	mov	r0, r7
 800eab8:	612e      	str	r6, [r5, #16]
 800eaba:	4621      	mov	r1, r4
 800eabc:	f7ff fdd6 	bl	800e66c <_Bfree>
 800eac0:	4628      	mov	r0, r5
 800eac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaca:	3301      	adds	r3, #1
 800eacc:	e7c5      	b.n	800ea5a <__lshift+0x4a>
 800eace:	3904      	subs	r1, #4
 800ead0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ead8:	459c      	cmp	ip, r3
 800eada:	d8f9      	bhi.n	800ead0 <__lshift+0xc0>
 800eadc:	e7ea      	b.n	800eab4 <__lshift+0xa4>
 800eade:	bf00      	nop
 800eae0:	0800f51f 	.word	0x0800f51f
 800eae4:	0800f590 	.word	0x0800f590

0800eae8 <__mcmp>:
 800eae8:	b530      	push	{r4, r5, lr}
 800eaea:	6902      	ldr	r2, [r0, #16]
 800eaec:	690c      	ldr	r4, [r1, #16]
 800eaee:	1b12      	subs	r2, r2, r4
 800eaf0:	d10e      	bne.n	800eb10 <__mcmp+0x28>
 800eaf2:	f100 0314 	add.w	r3, r0, #20
 800eaf6:	3114      	adds	r1, #20
 800eaf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb08:	42a5      	cmp	r5, r4
 800eb0a:	d003      	beq.n	800eb14 <__mcmp+0x2c>
 800eb0c:	d305      	bcc.n	800eb1a <__mcmp+0x32>
 800eb0e:	2201      	movs	r2, #1
 800eb10:	4610      	mov	r0, r2
 800eb12:	bd30      	pop	{r4, r5, pc}
 800eb14:	4283      	cmp	r3, r0
 800eb16:	d3f3      	bcc.n	800eb00 <__mcmp+0x18>
 800eb18:	e7fa      	b.n	800eb10 <__mcmp+0x28>
 800eb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1e:	e7f7      	b.n	800eb10 <__mcmp+0x28>

0800eb20 <__mdiff>:
 800eb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	460c      	mov	r4, r1
 800eb26:	4606      	mov	r6, r0
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4617      	mov	r7, r2
 800eb2e:	f7ff ffdb 	bl	800eae8 <__mcmp>
 800eb32:	1e05      	subs	r5, r0, #0
 800eb34:	d110      	bne.n	800eb58 <__mdiff+0x38>
 800eb36:	4629      	mov	r1, r5
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fd57 	bl	800e5ec <_Balloc>
 800eb3e:	b930      	cbnz	r0, 800eb4e <__mdiff+0x2e>
 800eb40:	4b39      	ldr	r3, [pc, #228]	; (800ec28 <__mdiff+0x108>)
 800eb42:	4602      	mov	r2, r0
 800eb44:	f240 2132 	movw	r1, #562	; 0x232
 800eb48:	4838      	ldr	r0, [pc, #224]	; (800ec2c <__mdiff+0x10c>)
 800eb4a:	f000 fb47 	bl	800f1dc <__assert_func>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb58:	bfa4      	itt	ge
 800eb5a:	463b      	movge	r3, r7
 800eb5c:	4627      	movge	r7, r4
 800eb5e:	4630      	mov	r0, r6
 800eb60:	6879      	ldr	r1, [r7, #4]
 800eb62:	bfa6      	itte	ge
 800eb64:	461c      	movge	r4, r3
 800eb66:	2500      	movge	r5, #0
 800eb68:	2501      	movlt	r5, #1
 800eb6a:	f7ff fd3f 	bl	800e5ec <_Balloc>
 800eb6e:	b920      	cbnz	r0, 800eb7a <__mdiff+0x5a>
 800eb70:	4b2d      	ldr	r3, [pc, #180]	; (800ec28 <__mdiff+0x108>)
 800eb72:	4602      	mov	r2, r0
 800eb74:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb78:	e7e6      	b.n	800eb48 <__mdiff+0x28>
 800eb7a:	693e      	ldr	r6, [r7, #16]
 800eb7c:	60c5      	str	r5, [r0, #12]
 800eb7e:	6925      	ldr	r5, [r4, #16]
 800eb80:	f107 0114 	add.w	r1, r7, #20
 800eb84:	f104 0914 	add.w	r9, r4, #20
 800eb88:	f100 0e14 	add.w	lr, r0, #20
 800eb8c:	f107 0210 	add.w	r2, r7, #16
 800eb90:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800eb94:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eb98:	46f2      	mov	sl, lr
 800eb9a:	2700      	movs	r7, #0
 800eb9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800eba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eba4:	fa1f f883 	uxth.w	r8, r3
 800eba8:	fa17 f78b 	uxtah	r7, r7, fp
 800ebac:	0c1b      	lsrs	r3, r3, #16
 800ebae:	eba7 0808 	sub.w	r8, r7, r8
 800ebb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebba:	fa1f f888 	uxth.w	r8, r8
 800ebbe:	141f      	asrs	r7, r3, #16
 800ebc0:	454d      	cmp	r5, r9
 800ebc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebc6:	f84a 3b04 	str.w	r3, [sl], #4
 800ebca:	d8e7      	bhi.n	800eb9c <__mdiff+0x7c>
 800ebcc:	1b2b      	subs	r3, r5, r4
 800ebce:	3b15      	subs	r3, #21
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	3415      	adds	r4, #21
 800ebd8:	42a5      	cmp	r5, r4
 800ebda:	bf38      	it	cc
 800ebdc:	2304      	movcc	r3, #4
 800ebde:	4419      	add	r1, r3
 800ebe0:	4473      	add	r3, lr
 800ebe2:	469e      	mov	lr, r3
 800ebe4:	460d      	mov	r5, r1
 800ebe6:	4565      	cmp	r5, ip
 800ebe8:	d30e      	bcc.n	800ec08 <__mdiff+0xe8>
 800ebea:	f10c 0203 	add.w	r2, ip, #3
 800ebee:	1a52      	subs	r2, r2, r1
 800ebf0:	f022 0203 	bic.w	r2, r2, #3
 800ebf4:	3903      	subs	r1, #3
 800ebf6:	458c      	cmp	ip, r1
 800ebf8:	bf38      	it	cc
 800ebfa:	2200      	movcc	r2, #0
 800ebfc:	441a      	add	r2, r3
 800ebfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec02:	b17b      	cbz	r3, 800ec24 <__mdiff+0x104>
 800ec04:	6106      	str	r6, [r0, #16]
 800ec06:	e7a5      	b.n	800eb54 <__mdiff+0x34>
 800ec08:	f855 8b04 	ldr.w	r8, [r5], #4
 800ec0c:	fa17 f488 	uxtah	r4, r7, r8
 800ec10:	1422      	asrs	r2, r4, #16
 800ec12:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ec16:	b2a4      	uxth	r4, r4
 800ec18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ec1c:	f84e 4b04 	str.w	r4, [lr], #4
 800ec20:	1417      	asrs	r7, r2, #16
 800ec22:	e7e0      	b.n	800ebe6 <__mdiff+0xc6>
 800ec24:	3e01      	subs	r6, #1
 800ec26:	e7ea      	b.n	800ebfe <__mdiff+0xde>
 800ec28:	0800f51f 	.word	0x0800f51f
 800ec2c:	0800f590 	.word	0x0800f590

0800ec30 <__d2b>:
 800ec30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec34:	4689      	mov	r9, r1
 800ec36:	2101      	movs	r1, #1
 800ec38:	ec57 6b10 	vmov	r6, r7, d0
 800ec3c:	4690      	mov	r8, r2
 800ec3e:	f7ff fcd5 	bl	800e5ec <_Balloc>
 800ec42:	4604      	mov	r4, r0
 800ec44:	b930      	cbnz	r0, 800ec54 <__d2b+0x24>
 800ec46:	4602      	mov	r2, r0
 800ec48:	4b25      	ldr	r3, [pc, #148]	; (800ece0 <__d2b+0xb0>)
 800ec4a:	4826      	ldr	r0, [pc, #152]	; (800ece4 <__d2b+0xb4>)
 800ec4c:	f240 310a 	movw	r1, #778	; 0x30a
 800ec50:	f000 fac4 	bl	800f1dc <__assert_func>
 800ec54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec5c:	bb35      	cbnz	r5, 800ecac <__d2b+0x7c>
 800ec5e:	2e00      	cmp	r6, #0
 800ec60:	9301      	str	r3, [sp, #4]
 800ec62:	d028      	beq.n	800ecb6 <__d2b+0x86>
 800ec64:	4668      	mov	r0, sp
 800ec66:	9600      	str	r6, [sp, #0]
 800ec68:	f7ff fd8c 	bl	800e784 <__lo0bits>
 800ec6c:	9900      	ldr	r1, [sp, #0]
 800ec6e:	b300      	cbz	r0, 800ecb2 <__d2b+0x82>
 800ec70:	9a01      	ldr	r2, [sp, #4]
 800ec72:	f1c0 0320 	rsb	r3, r0, #32
 800ec76:	fa02 f303 	lsl.w	r3, r2, r3
 800ec7a:	430b      	orrs	r3, r1
 800ec7c:	40c2      	lsrs	r2, r0
 800ec7e:	6163      	str	r3, [r4, #20]
 800ec80:	9201      	str	r2, [sp, #4]
 800ec82:	9b01      	ldr	r3, [sp, #4]
 800ec84:	61a3      	str	r3, [r4, #24]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bf14      	ite	ne
 800ec8a:	2202      	movne	r2, #2
 800ec8c:	2201      	moveq	r2, #1
 800ec8e:	6122      	str	r2, [r4, #16]
 800ec90:	b1d5      	cbz	r5, 800ecc8 <__d2b+0x98>
 800ec92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec96:	4405      	add	r5, r0
 800ec98:	f8c9 5000 	str.w	r5, [r9]
 800ec9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eca0:	f8c8 0000 	str.w	r0, [r8]
 800eca4:	4620      	mov	r0, r4
 800eca6:	b003      	add	sp, #12
 800eca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecb0:	e7d5      	b.n	800ec5e <__d2b+0x2e>
 800ecb2:	6161      	str	r1, [r4, #20]
 800ecb4:	e7e5      	b.n	800ec82 <__d2b+0x52>
 800ecb6:	a801      	add	r0, sp, #4
 800ecb8:	f7ff fd64 	bl	800e784 <__lo0bits>
 800ecbc:	9b01      	ldr	r3, [sp, #4]
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	6122      	str	r2, [r4, #16]
 800ecc4:	3020      	adds	r0, #32
 800ecc6:	e7e3      	b.n	800ec90 <__d2b+0x60>
 800ecc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecd0:	f8c9 0000 	str.w	r0, [r9]
 800ecd4:	6918      	ldr	r0, [r3, #16]
 800ecd6:	f7ff fd35 	bl	800e744 <__hi0bits>
 800ecda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecde:	e7df      	b.n	800eca0 <__d2b+0x70>
 800ece0:	0800f51f 	.word	0x0800f51f
 800ece4:	0800f590 	.word	0x0800f590

0800ece8 <_calloc_r>:
 800ece8:	b513      	push	{r0, r1, r4, lr}
 800ecea:	434a      	muls	r2, r1
 800ecec:	4611      	mov	r1, r2
 800ecee:	9201      	str	r2, [sp, #4]
 800ecf0:	f000 f85a 	bl	800eda8 <_malloc_r>
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	b118      	cbz	r0, 800ed00 <_calloc_r+0x18>
 800ecf8:	9a01      	ldr	r2, [sp, #4]
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	f7fd fea2 	bl	800ca44 <memset>
 800ed00:	4620      	mov	r0, r4
 800ed02:	b002      	add	sp, #8
 800ed04:	bd10      	pop	{r4, pc}
	...

0800ed08 <_free_r>:
 800ed08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed0a:	2900      	cmp	r1, #0
 800ed0c:	d048      	beq.n	800eda0 <_free_r+0x98>
 800ed0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed12:	9001      	str	r0, [sp, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f1a1 0404 	sub.w	r4, r1, #4
 800ed1a:	bfb8      	it	lt
 800ed1c:	18e4      	addlt	r4, r4, r3
 800ed1e:	f000 fae3 	bl	800f2e8 <__malloc_lock>
 800ed22:	4a20      	ldr	r2, [pc, #128]	; (800eda4 <_free_r+0x9c>)
 800ed24:	9801      	ldr	r0, [sp, #4]
 800ed26:	6813      	ldr	r3, [r2, #0]
 800ed28:	4615      	mov	r5, r2
 800ed2a:	b933      	cbnz	r3, 800ed3a <_free_r+0x32>
 800ed2c:	6063      	str	r3, [r4, #4]
 800ed2e:	6014      	str	r4, [r2, #0]
 800ed30:	b003      	add	sp, #12
 800ed32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed36:	f000 badd 	b.w	800f2f4 <__malloc_unlock>
 800ed3a:	42a3      	cmp	r3, r4
 800ed3c:	d90b      	bls.n	800ed56 <_free_r+0x4e>
 800ed3e:	6821      	ldr	r1, [r4, #0]
 800ed40:	1862      	adds	r2, r4, r1
 800ed42:	4293      	cmp	r3, r2
 800ed44:	bf04      	itt	eq
 800ed46:	681a      	ldreq	r2, [r3, #0]
 800ed48:	685b      	ldreq	r3, [r3, #4]
 800ed4a:	6063      	str	r3, [r4, #4]
 800ed4c:	bf04      	itt	eq
 800ed4e:	1852      	addeq	r2, r2, r1
 800ed50:	6022      	streq	r2, [r4, #0]
 800ed52:	602c      	str	r4, [r5, #0]
 800ed54:	e7ec      	b.n	800ed30 <_free_r+0x28>
 800ed56:	461a      	mov	r2, r3
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	b10b      	cbz	r3, 800ed60 <_free_r+0x58>
 800ed5c:	42a3      	cmp	r3, r4
 800ed5e:	d9fa      	bls.n	800ed56 <_free_r+0x4e>
 800ed60:	6811      	ldr	r1, [r2, #0]
 800ed62:	1855      	adds	r5, r2, r1
 800ed64:	42a5      	cmp	r5, r4
 800ed66:	d10b      	bne.n	800ed80 <_free_r+0x78>
 800ed68:	6824      	ldr	r4, [r4, #0]
 800ed6a:	4421      	add	r1, r4
 800ed6c:	1854      	adds	r4, r2, r1
 800ed6e:	42a3      	cmp	r3, r4
 800ed70:	6011      	str	r1, [r2, #0]
 800ed72:	d1dd      	bne.n	800ed30 <_free_r+0x28>
 800ed74:	681c      	ldr	r4, [r3, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	6053      	str	r3, [r2, #4]
 800ed7a:	4421      	add	r1, r4
 800ed7c:	6011      	str	r1, [r2, #0]
 800ed7e:	e7d7      	b.n	800ed30 <_free_r+0x28>
 800ed80:	d902      	bls.n	800ed88 <_free_r+0x80>
 800ed82:	230c      	movs	r3, #12
 800ed84:	6003      	str	r3, [r0, #0]
 800ed86:	e7d3      	b.n	800ed30 <_free_r+0x28>
 800ed88:	6825      	ldr	r5, [r4, #0]
 800ed8a:	1961      	adds	r1, r4, r5
 800ed8c:	428b      	cmp	r3, r1
 800ed8e:	bf04      	itt	eq
 800ed90:	6819      	ldreq	r1, [r3, #0]
 800ed92:	685b      	ldreq	r3, [r3, #4]
 800ed94:	6063      	str	r3, [r4, #4]
 800ed96:	bf04      	itt	eq
 800ed98:	1949      	addeq	r1, r1, r5
 800ed9a:	6021      	streq	r1, [r4, #0]
 800ed9c:	6054      	str	r4, [r2, #4]
 800ed9e:	e7c7      	b.n	800ed30 <_free_r+0x28>
 800eda0:	b003      	add	sp, #12
 800eda2:	bd30      	pop	{r4, r5, pc}
 800eda4:	24000204 	.word	0x24000204

0800eda8 <_malloc_r>:
 800eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edaa:	1ccd      	adds	r5, r1, #3
 800edac:	f025 0503 	bic.w	r5, r5, #3
 800edb0:	3508      	adds	r5, #8
 800edb2:	2d0c      	cmp	r5, #12
 800edb4:	bf38      	it	cc
 800edb6:	250c      	movcc	r5, #12
 800edb8:	2d00      	cmp	r5, #0
 800edba:	4606      	mov	r6, r0
 800edbc:	db01      	blt.n	800edc2 <_malloc_r+0x1a>
 800edbe:	42a9      	cmp	r1, r5
 800edc0:	d903      	bls.n	800edca <_malloc_r+0x22>
 800edc2:	230c      	movs	r3, #12
 800edc4:	6033      	str	r3, [r6, #0]
 800edc6:	2000      	movs	r0, #0
 800edc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edca:	f000 fa8d 	bl	800f2e8 <__malloc_lock>
 800edce:	4921      	ldr	r1, [pc, #132]	; (800ee54 <_malloc_r+0xac>)
 800edd0:	680a      	ldr	r2, [r1, #0]
 800edd2:	4614      	mov	r4, r2
 800edd4:	b99c      	cbnz	r4, 800edfe <_malloc_r+0x56>
 800edd6:	4f20      	ldr	r7, [pc, #128]	; (800ee58 <_malloc_r+0xb0>)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	b923      	cbnz	r3, 800ede6 <_malloc_r+0x3e>
 800eddc:	4621      	mov	r1, r4
 800edde:	4630      	mov	r0, r6
 800ede0:	f000 f996 	bl	800f110 <_sbrk_r>
 800ede4:	6038      	str	r0, [r7, #0]
 800ede6:	4629      	mov	r1, r5
 800ede8:	4630      	mov	r0, r6
 800edea:	f000 f991 	bl	800f110 <_sbrk_r>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	d123      	bne.n	800ee3a <_malloc_r+0x92>
 800edf2:	230c      	movs	r3, #12
 800edf4:	6033      	str	r3, [r6, #0]
 800edf6:	4630      	mov	r0, r6
 800edf8:	f000 fa7c 	bl	800f2f4 <__malloc_unlock>
 800edfc:	e7e3      	b.n	800edc6 <_malloc_r+0x1e>
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	1b5b      	subs	r3, r3, r5
 800ee02:	d417      	bmi.n	800ee34 <_malloc_r+0x8c>
 800ee04:	2b0b      	cmp	r3, #11
 800ee06:	d903      	bls.n	800ee10 <_malloc_r+0x68>
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	441c      	add	r4, r3
 800ee0c:	6025      	str	r5, [r4, #0]
 800ee0e:	e004      	b.n	800ee1a <_malloc_r+0x72>
 800ee10:	6863      	ldr	r3, [r4, #4]
 800ee12:	42a2      	cmp	r2, r4
 800ee14:	bf0c      	ite	eq
 800ee16:	600b      	streq	r3, [r1, #0]
 800ee18:	6053      	strne	r3, [r2, #4]
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f000 fa6a 	bl	800f2f4 <__malloc_unlock>
 800ee20:	f104 000b 	add.w	r0, r4, #11
 800ee24:	1d23      	adds	r3, r4, #4
 800ee26:	f020 0007 	bic.w	r0, r0, #7
 800ee2a:	1ac2      	subs	r2, r0, r3
 800ee2c:	d0cc      	beq.n	800edc8 <_malloc_r+0x20>
 800ee2e:	1a1b      	subs	r3, r3, r0
 800ee30:	50a3      	str	r3, [r4, r2]
 800ee32:	e7c9      	b.n	800edc8 <_malloc_r+0x20>
 800ee34:	4622      	mov	r2, r4
 800ee36:	6864      	ldr	r4, [r4, #4]
 800ee38:	e7cc      	b.n	800edd4 <_malloc_r+0x2c>
 800ee3a:	1cc4      	adds	r4, r0, #3
 800ee3c:	f024 0403 	bic.w	r4, r4, #3
 800ee40:	42a0      	cmp	r0, r4
 800ee42:	d0e3      	beq.n	800ee0c <_malloc_r+0x64>
 800ee44:	1a21      	subs	r1, r4, r0
 800ee46:	4630      	mov	r0, r6
 800ee48:	f000 f962 	bl	800f110 <_sbrk_r>
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	d1dd      	bne.n	800ee0c <_malloc_r+0x64>
 800ee50:	e7cf      	b.n	800edf2 <_malloc_r+0x4a>
 800ee52:	bf00      	nop
 800ee54:	24000204 	.word	0x24000204
 800ee58:	24000208 	.word	0x24000208

0800ee5c <__sfputc_r>:
 800ee5c:	6893      	ldr	r3, [r2, #8]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	b410      	push	{r4}
 800ee64:	6093      	str	r3, [r2, #8]
 800ee66:	da08      	bge.n	800ee7a <__sfputc_r+0x1e>
 800ee68:	6994      	ldr	r4, [r2, #24]
 800ee6a:	42a3      	cmp	r3, r4
 800ee6c:	db01      	blt.n	800ee72 <__sfputc_r+0x16>
 800ee6e:	290a      	cmp	r1, #10
 800ee70:	d103      	bne.n	800ee7a <__sfputc_r+0x1e>
 800ee72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee76:	f7fe babf 	b.w	800d3f8 <__swbuf_r>
 800ee7a:	6813      	ldr	r3, [r2, #0]
 800ee7c:	1c58      	adds	r0, r3, #1
 800ee7e:	6010      	str	r0, [r2, #0]
 800ee80:	7019      	strb	r1, [r3, #0]
 800ee82:	4608      	mov	r0, r1
 800ee84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <__sfputs_r>:
 800ee8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	460f      	mov	r7, r1
 800ee90:	4614      	mov	r4, r2
 800ee92:	18d5      	adds	r5, r2, r3
 800ee94:	42ac      	cmp	r4, r5
 800ee96:	d101      	bne.n	800ee9c <__sfputs_r+0x12>
 800ee98:	2000      	movs	r0, #0
 800ee9a:	e007      	b.n	800eeac <__sfputs_r+0x22>
 800ee9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea0:	463a      	mov	r2, r7
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7ff ffda 	bl	800ee5c <__sfputc_r>
 800eea8:	1c43      	adds	r3, r0, #1
 800eeaa:	d1f3      	bne.n	800ee94 <__sfputs_r+0xa>
 800eeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eeb0 <_vfiprintf_r>:
 800eeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	b09d      	sub	sp, #116	; 0x74
 800eeb8:	4614      	mov	r4, r2
 800eeba:	4698      	mov	r8, r3
 800eebc:	4606      	mov	r6, r0
 800eebe:	b118      	cbz	r0, 800eec8 <_vfiprintf_r+0x18>
 800eec0:	6983      	ldr	r3, [r0, #24]
 800eec2:	b90b      	cbnz	r3, 800eec8 <_vfiprintf_r+0x18>
 800eec4:	f7ff fa80 	bl	800e3c8 <__sinit>
 800eec8:	4b89      	ldr	r3, [pc, #548]	; (800f0f0 <_vfiprintf_r+0x240>)
 800eeca:	429d      	cmp	r5, r3
 800eecc:	d11b      	bne.n	800ef06 <_vfiprintf_r+0x56>
 800eece:	6875      	ldr	r5, [r6, #4]
 800eed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eed2:	07d9      	lsls	r1, r3, #31
 800eed4:	d405      	bmi.n	800eee2 <_vfiprintf_r+0x32>
 800eed6:	89ab      	ldrh	r3, [r5, #12]
 800eed8:	059a      	lsls	r2, r3, #22
 800eeda:	d402      	bmi.n	800eee2 <_vfiprintf_r+0x32>
 800eedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eede:	f7ff fb16 	bl	800e50e <__retarget_lock_acquire_recursive>
 800eee2:	89ab      	ldrh	r3, [r5, #12]
 800eee4:	071b      	lsls	r3, r3, #28
 800eee6:	d501      	bpl.n	800eeec <_vfiprintf_r+0x3c>
 800eee8:	692b      	ldr	r3, [r5, #16]
 800eeea:	b9eb      	cbnz	r3, 800ef28 <_vfiprintf_r+0x78>
 800eeec:	4629      	mov	r1, r5
 800eeee:	4630      	mov	r0, r6
 800eef0:	f7fe fad4 	bl	800d49c <__swsetup_r>
 800eef4:	b1c0      	cbz	r0, 800ef28 <_vfiprintf_r+0x78>
 800eef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eef8:	07dc      	lsls	r4, r3, #31
 800eefa:	d50e      	bpl.n	800ef1a <_vfiprintf_r+0x6a>
 800eefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ef00:	b01d      	add	sp, #116	; 0x74
 800ef02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef06:	4b7b      	ldr	r3, [pc, #492]	; (800f0f4 <_vfiprintf_r+0x244>)
 800ef08:	429d      	cmp	r5, r3
 800ef0a:	d101      	bne.n	800ef10 <_vfiprintf_r+0x60>
 800ef0c:	68b5      	ldr	r5, [r6, #8]
 800ef0e:	e7df      	b.n	800eed0 <_vfiprintf_r+0x20>
 800ef10:	4b79      	ldr	r3, [pc, #484]	; (800f0f8 <_vfiprintf_r+0x248>)
 800ef12:	429d      	cmp	r5, r3
 800ef14:	bf08      	it	eq
 800ef16:	68f5      	ldreq	r5, [r6, #12]
 800ef18:	e7da      	b.n	800eed0 <_vfiprintf_r+0x20>
 800ef1a:	89ab      	ldrh	r3, [r5, #12]
 800ef1c:	0598      	lsls	r0, r3, #22
 800ef1e:	d4ed      	bmi.n	800eefc <_vfiprintf_r+0x4c>
 800ef20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef22:	f7ff faf5 	bl	800e510 <__retarget_lock_release_recursive>
 800ef26:	e7e9      	b.n	800eefc <_vfiprintf_r+0x4c>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2c:	2320      	movs	r3, #32
 800ef2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef36:	2330      	movs	r3, #48	; 0x30
 800ef38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f0fc <_vfiprintf_r+0x24c>
 800ef3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef40:	f04f 0901 	mov.w	r9, #1
 800ef44:	4623      	mov	r3, r4
 800ef46:	469a      	mov	sl, r3
 800ef48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4c:	b10a      	cbz	r2, 800ef52 <_vfiprintf_r+0xa2>
 800ef4e:	2a25      	cmp	r2, #37	; 0x25
 800ef50:	d1f9      	bne.n	800ef46 <_vfiprintf_r+0x96>
 800ef52:	ebba 0b04 	subs.w	fp, sl, r4
 800ef56:	d00b      	beq.n	800ef70 <_vfiprintf_r+0xc0>
 800ef58:	465b      	mov	r3, fp
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7ff ff93 	bl	800ee8a <__sfputs_r>
 800ef64:	3001      	adds	r0, #1
 800ef66:	f000 80aa 	beq.w	800f0be <_vfiprintf_r+0x20e>
 800ef6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef6c:	445a      	add	r2, fp
 800ef6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ef70:	f89a 3000 	ldrb.w	r3, [sl]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 80a2 	beq.w	800f0be <_vfiprintf_r+0x20e>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef84:	f10a 0a01 	add.w	sl, sl, #1
 800ef88:	9304      	str	r3, [sp, #16]
 800ef8a:	9307      	str	r3, [sp, #28]
 800ef8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef90:	931a      	str	r3, [sp, #104]	; 0x68
 800ef92:	4654      	mov	r4, sl
 800ef94:	2205      	movs	r2, #5
 800ef96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9a:	4858      	ldr	r0, [pc, #352]	; (800f0fc <_vfiprintf_r+0x24c>)
 800ef9c:	f7f1 f9c0 	bl	8000320 <memchr>
 800efa0:	9a04      	ldr	r2, [sp, #16]
 800efa2:	b9d8      	cbnz	r0, 800efdc <_vfiprintf_r+0x12c>
 800efa4:	06d1      	lsls	r1, r2, #27
 800efa6:	bf44      	itt	mi
 800efa8:	2320      	movmi	r3, #32
 800efaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efae:	0713      	lsls	r3, r2, #28
 800efb0:	bf44      	itt	mi
 800efb2:	232b      	movmi	r3, #43	; 0x2b
 800efb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efb8:	f89a 3000 	ldrb.w	r3, [sl]
 800efbc:	2b2a      	cmp	r3, #42	; 0x2a
 800efbe:	d015      	beq.n	800efec <_vfiprintf_r+0x13c>
 800efc0:	9a07      	ldr	r2, [sp, #28]
 800efc2:	4654      	mov	r4, sl
 800efc4:	2000      	movs	r0, #0
 800efc6:	f04f 0c0a 	mov.w	ip, #10
 800efca:	4621      	mov	r1, r4
 800efcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efd0:	3b30      	subs	r3, #48	; 0x30
 800efd2:	2b09      	cmp	r3, #9
 800efd4:	d94e      	bls.n	800f074 <_vfiprintf_r+0x1c4>
 800efd6:	b1b0      	cbz	r0, 800f006 <_vfiprintf_r+0x156>
 800efd8:	9207      	str	r2, [sp, #28]
 800efda:	e014      	b.n	800f006 <_vfiprintf_r+0x156>
 800efdc:	eba0 0308 	sub.w	r3, r0, r8
 800efe0:	fa09 f303 	lsl.w	r3, r9, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	46a2      	mov	sl, r4
 800efea:	e7d2      	b.n	800ef92 <_vfiprintf_r+0xe2>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1d19      	adds	r1, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	9103      	str	r1, [sp, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	bfbb      	ittet	lt
 800eff8:	425b      	neglt	r3, r3
 800effa:	f042 0202 	orrlt.w	r2, r2, #2
 800effe:	9307      	strge	r3, [sp, #28]
 800f000:	9307      	strlt	r3, [sp, #28]
 800f002:	bfb8      	it	lt
 800f004:	9204      	strlt	r2, [sp, #16]
 800f006:	7823      	ldrb	r3, [r4, #0]
 800f008:	2b2e      	cmp	r3, #46	; 0x2e
 800f00a:	d10c      	bne.n	800f026 <_vfiprintf_r+0x176>
 800f00c:	7863      	ldrb	r3, [r4, #1]
 800f00e:	2b2a      	cmp	r3, #42	; 0x2a
 800f010:	d135      	bne.n	800f07e <_vfiprintf_r+0x1ce>
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	9203      	str	r2, [sp, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfb8      	it	lt
 800f01e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f022:	3402      	adds	r4, #2
 800f024:	9305      	str	r3, [sp, #20]
 800f026:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f10c <_vfiprintf_r+0x25c>
 800f02a:	7821      	ldrb	r1, [r4, #0]
 800f02c:	2203      	movs	r2, #3
 800f02e:	4650      	mov	r0, sl
 800f030:	f7f1 f976 	bl	8000320 <memchr>
 800f034:	b140      	cbz	r0, 800f048 <_vfiprintf_r+0x198>
 800f036:	2340      	movs	r3, #64	; 0x40
 800f038:	eba0 000a 	sub.w	r0, r0, sl
 800f03c:	fa03 f000 	lsl.w	r0, r3, r0
 800f040:	9b04      	ldr	r3, [sp, #16]
 800f042:	4303      	orrs	r3, r0
 800f044:	3401      	adds	r4, #1
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f04c:	482c      	ldr	r0, [pc, #176]	; (800f100 <_vfiprintf_r+0x250>)
 800f04e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f052:	2206      	movs	r2, #6
 800f054:	f7f1 f964 	bl	8000320 <memchr>
 800f058:	2800      	cmp	r0, #0
 800f05a:	d03f      	beq.n	800f0dc <_vfiprintf_r+0x22c>
 800f05c:	4b29      	ldr	r3, [pc, #164]	; (800f104 <_vfiprintf_r+0x254>)
 800f05e:	bb1b      	cbnz	r3, 800f0a8 <_vfiprintf_r+0x1f8>
 800f060:	9b03      	ldr	r3, [sp, #12]
 800f062:	3307      	adds	r3, #7
 800f064:	f023 0307 	bic.w	r3, r3, #7
 800f068:	3308      	adds	r3, #8
 800f06a:	9303      	str	r3, [sp, #12]
 800f06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06e:	443b      	add	r3, r7
 800f070:	9309      	str	r3, [sp, #36]	; 0x24
 800f072:	e767      	b.n	800ef44 <_vfiprintf_r+0x94>
 800f074:	fb0c 3202 	mla	r2, ip, r2, r3
 800f078:	460c      	mov	r4, r1
 800f07a:	2001      	movs	r0, #1
 800f07c:	e7a5      	b.n	800efca <_vfiprintf_r+0x11a>
 800f07e:	2300      	movs	r3, #0
 800f080:	3401      	adds	r4, #1
 800f082:	9305      	str	r3, [sp, #20]
 800f084:	4619      	mov	r1, r3
 800f086:	f04f 0c0a 	mov.w	ip, #10
 800f08a:	4620      	mov	r0, r4
 800f08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f090:	3a30      	subs	r2, #48	; 0x30
 800f092:	2a09      	cmp	r2, #9
 800f094:	d903      	bls.n	800f09e <_vfiprintf_r+0x1ee>
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0c5      	beq.n	800f026 <_vfiprintf_r+0x176>
 800f09a:	9105      	str	r1, [sp, #20]
 800f09c:	e7c3      	b.n	800f026 <_vfiprintf_r+0x176>
 800f09e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e7f0      	b.n	800f08a <_vfiprintf_r+0x1da>
 800f0a8:	ab03      	add	r3, sp, #12
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	462a      	mov	r2, r5
 800f0ae:	4b16      	ldr	r3, [pc, #88]	; (800f108 <_vfiprintf_r+0x258>)
 800f0b0:	a904      	add	r1, sp, #16
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f7fd fd60 	bl	800cb78 <_printf_float>
 800f0b8:	4607      	mov	r7, r0
 800f0ba:	1c78      	adds	r0, r7, #1
 800f0bc:	d1d6      	bne.n	800f06c <_vfiprintf_r+0x1bc>
 800f0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0c0:	07d9      	lsls	r1, r3, #31
 800f0c2:	d405      	bmi.n	800f0d0 <_vfiprintf_r+0x220>
 800f0c4:	89ab      	ldrh	r3, [r5, #12]
 800f0c6:	059a      	lsls	r2, r3, #22
 800f0c8:	d402      	bmi.n	800f0d0 <_vfiprintf_r+0x220>
 800f0ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0cc:	f7ff fa20 	bl	800e510 <__retarget_lock_release_recursive>
 800f0d0:	89ab      	ldrh	r3, [r5, #12]
 800f0d2:	065b      	lsls	r3, r3, #25
 800f0d4:	f53f af12 	bmi.w	800eefc <_vfiprintf_r+0x4c>
 800f0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0da:	e711      	b.n	800ef00 <_vfiprintf_r+0x50>
 800f0dc:	ab03      	add	r3, sp, #12
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4b09      	ldr	r3, [pc, #36]	; (800f108 <_vfiprintf_r+0x258>)
 800f0e4:	a904      	add	r1, sp, #16
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7fd ffd2 	bl	800d090 <_printf_i>
 800f0ec:	e7e4      	b.n	800f0b8 <_vfiprintf_r+0x208>
 800f0ee:	bf00      	nop
 800f0f0:	0800f550 	.word	0x0800f550
 800f0f4:	0800f570 	.word	0x0800f570
 800f0f8:	0800f530 	.word	0x0800f530
 800f0fc:	0800f6ec 	.word	0x0800f6ec
 800f100:	0800f6f6 	.word	0x0800f6f6
 800f104:	0800cb79 	.word	0x0800cb79
 800f108:	0800ee8b 	.word	0x0800ee8b
 800f10c:	0800f6f2 	.word	0x0800f6f2

0800f110 <_sbrk_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4d06      	ldr	r5, [pc, #24]	; (800f12c <_sbrk_r+0x1c>)
 800f114:	2300      	movs	r3, #0
 800f116:	4604      	mov	r4, r0
 800f118:	4608      	mov	r0, r1
 800f11a:	602b      	str	r3, [r5, #0]
 800f11c:	f7f2 fb0a 	bl	8001734 <_sbrk>
 800f120:	1c43      	adds	r3, r0, #1
 800f122:	d102      	bne.n	800f12a <_sbrk_r+0x1a>
 800f124:	682b      	ldr	r3, [r5, #0]
 800f126:	b103      	cbz	r3, 800f12a <_sbrk_r+0x1a>
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	bd38      	pop	{r3, r4, r5, pc}
 800f12c:	24000a54 	.word	0x24000a54

0800f130 <__sread>:
 800f130:	b510      	push	{r4, lr}
 800f132:	460c      	mov	r4, r1
 800f134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f138:	f000 f8e2 	bl	800f300 <_read_r>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	bfab      	itete	ge
 800f140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f142:	89a3      	ldrhlt	r3, [r4, #12]
 800f144:	181b      	addge	r3, r3, r0
 800f146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f14a:	bfac      	ite	ge
 800f14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f14e:	81a3      	strhlt	r3, [r4, #12]
 800f150:	bd10      	pop	{r4, pc}

0800f152 <__swrite>:
 800f152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f156:	461f      	mov	r7, r3
 800f158:	898b      	ldrh	r3, [r1, #12]
 800f15a:	05db      	lsls	r3, r3, #23
 800f15c:	4605      	mov	r5, r0
 800f15e:	460c      	mov	r4, r1
 800f160:	4616      	mov	r6, r2
 800f162:	d505      	bpl.n	800f170 <__swrite+0x1e>
 800f164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f168:	2302      	movs	r3, #2
 800f16a:	2200      	movs	r2, #0
 800f16c:	f000 f898 	bl	800f2a0 <_lseek_r>
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f17a:	81a3      	strh	r3, [r4, #12]
 800f17c:	4632      	mov	r2, r6
 800f17e:	463b      	mov	r3, r7
 800f180:	4628      	mov	r0, r5
 800f182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f186:	f000 b817 	b.w	800f1b8 <_write_r>

0800f18a <__sseek>:
 800f18a:	b510      	push	{r4, lr}
 800f18c:	460c      	mov	r4, r1
 800f18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f192:	f000 f885 	bl	800f2a0 <_lseek_r>
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	bf15      	itete	ne
 800f19c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f19e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1a6:	81a3      	strheq	r3, [r4, #12]
 800f1a8:	bf18      	it	ne
 800f1aa:	81a3      	strhne	r3, [r4, #12]
 800f1ac:	bd10      	pop	{r4, pc}

0800f1ae <__sclose>:
 800f1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b2:	f000 b831 	b.w	800f218 <_close_r>
	...

0800f1b8 <_write_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d07      	ldr	r5, [pc, #28]	; (800f1d8 <_write_r+0x20>)
 800f1bc:	4604      	mov	r4, r0
 800f1be:	4608      	mov	r0, r1
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	602a      	str	r2, [r5, #0]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	f7f2 fa63 	bl	8001692 <_write>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d102      	bne.n	800f1d6 <_write_r+0x1e>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	b103      	cbz	r3, 800f1d6 <_write_r+0x1e>
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	24000a54 	.word	0x24000a54

0800f1dc <__assert_func>:
 800f1dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1de:	4614      	mov	r4, r2
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4b09      	ldr	r3, [pc, #36]	; (800f208 <__assert_func+0x2c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	68d8      	ldr	r0, [r3, #12]
 800f1ea:	b14c      	cbz	r4, 800f200 <__assert_func+0x24>
 800f1ec:	4b07      	ldr	r3, [pc, #28]	; (800f20c <__assert_func+0x30>)
 800f1ee:	9100      	str	r1, [sp, #0]
 800f1f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1f4:	4906      	ldr	r1, [pc, #24]	; (800f210 <__assert_func+0x34>)
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	f000 f81e 	bl	800f238 <fiprintf>
 800f1fc:	f000 f89f 	bl	800f33e <abort>
 800f200:	4b04      	ldr	r3, [pc, #16]	; (800f214 <__assert_func+0x38>)
 800f202:	461c      	mov	r4, r3
 800f204:	e7f3      	b.n	800f1ee <__assert_func+0x12>
 800f206:	bf00      	nop
 800f208:	24000010 	.word	0x24000010
 800f20c:	0800f6fd 	.word	0x0800f6fd
 800f210:	0800f70a 	.word	0x0800f70a
 800f214:	0800f738 	.word	0x0800f738

0800f218 <_close_r>:
 800f218:	b538      	push	{r3, r4, r5, lr}
 800f21a:	4d06      	ldr	r5, [pc, #24]	; (800f234 <_close_r+0x1c>)
 800f21c:	2300      	movs	r3, #0
 800f21e:	4604      	mov	r4, r0
 800f220:	4608      	mov	r0, r1
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	f7f2 fa51 	bl	80016ca <_close>
 800f228:	1c43      	adds	r3, r0, #1
 800f22a:	d102      	bne.n	800f232 <_close_r+0x1a>
 800f22c:	682b      	ldr	r3, [r5, #0]
 800f22e:	b103      	cbz	r3, 800f232 <_close_r+0x1a>
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	bd38      	pop	{r3, r4, r5, pc}
 800f234:	24000a54 	.word	0x24000a54

0800f238 <fiprintf>:
 800f238:	b40e      	push	{r1, r2, r3}
 800f23a:	b503      	push	{r0, r1, lr}
 800f23c:	4601      	mov	r1, r0
 800f23e:	ab03      	add	r3, sp, #12
 800f240:	4805      	ldr	r0, [pc, #20]	; (800f258 <fiprintf+0x20>)
 800f242:	f853 2b04 	ldr.w	r2, [r3], #4
 800f246:	6800      	ldr	r0, [r0, #0]
 800f248:	9301      	str	r3, [sp, #4]
 800f24a:	f7ff fe31 	bl	800eeb0 <_vfiprintf_r>
 800f24e:	b002      	add	sp, #8
 800f250:	f85d eb04 	ldr.w	lr, [sp], #4
 800f254:	b003      	add	sp, #12
 800f256:	4770      	bx	lr
 800f258:	24000010 	.word	0x24000010

0800f25c <_fstat_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d07      	ldr	r5, [pc, #28]	; (800f27c <_fstat_r+0x20>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	4611      	mov	r1, r2
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f7f2 fa3a 	bl	80016e2 <_fstat>
 800f26e:	1c43      	adds	r3, r0, #1
 800f270:	d102      	bne.n	800f278 <_fstat_r+0x1c>
 800f272:	682b      	ldr	r3, [r5, #0]
 800f274:	b103      	cbz	r3, 800f278 <_fstat_r+0x1c>
 800f276:	6023      	str	r3, [r4, #0]
 800f278:	bd38      	pop	{r3, r4, r5, pc}
 800f27a:	bf00      	nop
 800f27c:	24000a54 	.word	0x24000a54

0800f280 <_isatty_r>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	4d06      	ldr	r5, [pc, #24]	; (800f29c <_isatty_r+0x1c>)
 800f284:	2300      	movs	r3, #0
 800f286:	4604      	mov	r4, r0
 800f288:	4608      	mov	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f2 fa39 	bl	8001702 <_isatty>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_isatty_r+0x1a>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_isatty_r+0x1a>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	24000a54 	.word	0x24000a54

0800f2a0 <_lseek_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	; (800f2c0 <_lseek_r+0x20>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f7f2 fa32 	bl	8001718 <_lseek>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_lseek_r+0x1e>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_lseek_r+0x1e>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	24000a54 	.word	0x24000a54

0800f2c4 <__ascii_mbtowc>:
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	b901      	cbnz	r1, 800f2ca <__ascii_mbtowc+0x6>
 800f2c8:	a901      	add	r1, sp, #4
 800f2ca:	b142      	cbz	r2, 800f2de <__ascii_mbtowc+0x1a>
 800f2cc:	b14b      	cbz	r3, 800f2e2 <__ascii_mbtowc+0x1e>
 800f2ce:	7813      	ldrb	r3, [r2, #0]
 800f2d0:	600b      	str	r3, [r1, #0]
 800f2d2:	7812      	ldrb	r2, [r2, #0]
 800f2d4:	1e10      	subs	r0, r2, #0
 800f2d6:	bf18      	it	ne
 800f2d8:	2001      	movne	r0, #1
 800f2da:	b002      	add	sp, #8
 800f2dc:	4770      	bx	lr
 800f2de:	4610      	mov	r0, r2
 800f2e0:	e7fb      	b.n	800f2da <__ascii_mbtowc+0x16>
 800f2e2:	f06f 0001 	mvn.w	r0, #1
 800f2e6:	e7f8      	b.n	800f2da <__ascii_mbtowc+0x16>

0800f2e8 <__malloc_lock>:
 800f2e8:	4801      	ldr	r0, [pc, #4]	; (800f2f0 <__malloc_lock+0x8>)
 800f2ea:	f7ff b910 	b.w	800e50e <__retarget_lock_acquire_recursive>
 800f2ee:	bf00      	nop
 800f2f0:	24000a4c 	.word	0x24000a4c

0800f2f4 <__malloc_unlock>:
 800f2f4:	4801      	ldr	r0, [pc, #4]	; (800f2fc <__malloc_unlock+0x8>)
 800f2f6:	f7ff b90b 	b.w	800e510 <__retarget_lock_release_recursive>
 800f2fa:	bf00      	nop
 800f2fc:	24000a4c 	.word	0x24000a4c

0800f300 <_read_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_read_r+0x20>)
 800f304:	4604      	mov	r4, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f2 f9a2 	bl	8001658 <_read>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_read_r+0x1e>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_read_r+0x1e>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	24000a54 	.word	0x24000a54

0800f324 <__ascii_wctomb>:
 800f324:	b149      	cbz	r1, 800f33a <__ascii_wctomb+0x16>
 800f326:	2aff      	cmp	r2, #255	; 0xff
 800f328:	bf85      	ittet	hi
 800f32a:	238a      	movhi	r3, #138	; 0x8a
 800f32c:	6003      	strhi	r3, [r0, #0]
 800f32e:	700a      	strbls	r2, [r1, #0]
 800f330:	f04f 30ff 	movhi.w	r0, #4294967295
 800f334:	bf98      	it	ls
 800f336:	2001      	movls	r0, #1
 800f338:	4770      	bx	lr
 800f33a:	4608      	mov	r0, r1
 800f33c:	4770      	bx	lr

0800f33e <abort>:
 800f33e:	b508      	push	{r3, lr}
 800f340:	2006      	movs	r0, #6
 800f342:	f000 f82b 	bl	800f39c <raise>
 800f346:	2001      	movs	r0, #1
 800f348:	f7f2 f97c 	bl	8001644 <_exit>

0800f34c <_raise_r>:
 800f34c:	291f      	cmp	r1, #31
 800f34e:	b538      	push	{r3, r4, r5, lr}
 800f350:	4604      	mov	r4, r0
 800f352:	460d      	mov	r5, r1
 800f354:	d904      	bls.n	800f360 <_raise_r+0x14>
 800f356:	2316      	movs	r3, #22
 800f358:	6003      	str	r3, [r0, #0]
 800f35a:	f04f 30ff 	mov.w	r0, #4294967295
 800f35e:	bd38      	pop	{r3, r4, r5, pc}
 800f360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f362:	b112      	cbz	r2, 800f36a <_raise_r+0x1e>
 800f364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f368:	b94b      	cbnz	r3, 800f37e <_raise_r+0x32>
 800f36a:	4620      	mov	r0, r4
 800f36c:	f000 f830 	bl	800f3d0 <_getpid_r>
 800f370:	462a      	mov	r2, r5
 800f372:	4601      	mov	r1, r0
 800f374:	4620      	mov	r0, r4
 800f376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f37a:	f000 b817 	b.w	800f3ac <_kill_r>
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d00a      	beq.n	800f398 <_raise_r+0x4c>
 800f382:	1c59      	adds	r1, r3, #1
 800f384:	d103      	bne.n	800f38e <_raise_r+0x42>
 800f386:	2316      	movs	r3, #22
 800f388:	6003      	str	r3, [r0, #0]
 800f38a:	2001      	movs	r0, #1
 800f38c:	e7e7      	b.n	800f35e <_raise_r+0x12>
 800f38e:	2400      	movs	r4, #0
 800f390:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f394:	4628      	mov	r0, r5
 800f396:	4798      	blx	r3
 800f398:	2000      	movs	r0, #0
 800f39a:	e7e0      	b.n	800f35e <_raise_r+0x12>

0800f39c <raise>:
 800f39c:	4b02      	ldr	r3, [pc, #8]	; (800f3a8 <raise+0xc>)
 800f39e:	4601      	mov	r1, r0
 800f3a0:	6818      	ldr	r0, [r3, #0]
 800f3a2:	f7ff bfd3 	b.w	800f34c <_raise_r>
 800f3a6:	bf00      	nop
 800f3a8:	24000010 	.word	0x24000010

0800f3ac <_kill_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d07      	ldr	r5, [pc, #28]	; (800f3cc <_kill_r+0x20>)
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	4608      	mov	r0, r1
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	f7f2 f933 	bl	8001624 <_kill>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	d102      	bne.n	800f3c8 <_kill_r+0x1c>
 800f3c2:	682b      	ldr	r3, [r5, #0]
 800f3c4:	b103      	cbz	r3, 800f3c8 <_kill_r+0x1c>
 800f3c6:	6023      	str	r3, [r4, #0]
 800f3c8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ca:	bf00      	nop
 800f3cc:	24000a54 	.word	0x24000a54

0800f3d0 <_getpid_r>:
 800f3d0:	f7f2 b920 	b.w	8001614 <_getpid>

0800f3d4 <_init>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	bf00      	nop
 800f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3da:	bc08      	pop	{r3}
 800f3dc:	469e      	mov	lr, r3
 800f3de:	4770      	bx	lr

0800f3e0 <_fini>:
 800f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e2:	bf00      	nop
 800f3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e6:	bc08      	pop	{r3}
 800f3e8:	469e      	mov	lr, r3
 800f3ea:	4770      	bx	lr

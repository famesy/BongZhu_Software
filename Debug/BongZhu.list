
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f824  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800faf8  0800faf8  0001faf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ff1c  0800ff1c  0001ff1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ff24  0800ff24  0001ff24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ff28  0800ff28  0001ff28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800ff2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a5c  240001ec  08010118  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c48  08010118  00020c48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003505d  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f92  00000000  00000000  00055277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001940  00000000  00000000  0005a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001788  00000000  00000000  0005bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389b3  00000000  00000000  0005d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000239a6  00000000  00000000  00095c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cc12  00000000  00000000  000b9631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00226243  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000789c  00000000  00000000  00226298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001ec 	.word	0x240001ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fadc 	.word	0x0800fadc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f0 	.word	0x240001f0
 800030c:	0800fadc 	.word	0x0800fadc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f006 fe61 	bl	80073e4 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00b fae0 	bl	800bcf4 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f006 fe50 	bl	80073e4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00b fb65 	bl	800be20 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d10d      	bne.n	8000846 <AMT21_check_value+0xbe>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d108      	bne.n	8000846 <AMT21_check_value+0xbe>
		dev->prev_position = dev->position;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	89da      	ldrh	r2, [r3, #14]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	821a      	strh	r2, [r3, #16]
		dev->position = position_temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	897a      	ldrh	r2, [r7, #10]
 8000840:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <AMT21_check_value+0xc0>
	} else {
		return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
	}
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	db06      	blt.n	800087c <AMT21_unwrap+0x28>
		dPulse = -(16382 - ( pulse -  prev_pulse));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <AMT21_unwrap+0x5c>)
 8000876:	4413      	add	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e011      	b.n	80008a0 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000886:	dc07      	bgt.n	8000898 <AMT21_unwrap+0x44>
		dPulse = (16382 + ( pulse -  prev_pulse));
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	1ad2      	subs	r2, r2, r3
 800088e:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e003      	b.n	80008a0 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	ffffc002 	.word	0xffffc002

080008b4 <KalmanFilter_Init>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_Init(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008b4:	b480      	push	{r7}
 80008b6:	b08b      	sub	sp, #44	; 0x2c
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6278      	str	r0, [r7, #36]	; 0x24
 80008bc:	ed87 0a08 	vstr	s0, [r7, #32]
 80008c0:	edc7 0a07 	vstr	s1, [r7, #28]
 80008c4:	ed87 1a06 	vstr	s2, [r7, #24]
 80008c8:	edc7 1a05 	vstr	s3, [r7, #20]
 80008cc:	ed87 2a04 	vstr	s4, [r7, #16]
 80008d0:	edc7 2a03 	vstr	s5, [r7, #12]
 80008d4:	ed87 3a02 	vstr	s6, [r7, #8]
 80008d8:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	6a3a      	ldr	r2, [r7, #32]
 80008ec:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	61da      	str	r2, [r3, #28]
}
 800090c:	bf00      	nop
 800090e:	372c      	adds	r7, #44	; 0x2c
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,float theta_k) {
 8000918:	b480      	push	{r7}
 800091a:	b08d      	sub	sp, #52	; 0x34
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	ed87 0a00 	vstr	s0, [r7]
	float X1 = (dev->x1);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
	float X2 = (dev->x2);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
	float P11 = (dev->p11);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
	float P12 = (dev->p12);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	623b      	str	r3, [r7, #32]
	float P21 = (dev->p21);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	61fb      	str	r3, [r7, #28]
	float P22 = (dev->p22);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	61bb      	str	r3, [r7, #24]
	const float dt_pow2 = DT * DT;
 8000948:	4bf1      	ldr	r3, [pc, #964]	; (8000d10 <KalmanFilter_Update+0x3f8>)
 800094a:	617b      	str	r3, [r7, #20]
	float dt_pow3 = DT * DT * DT;
 800094c:	4bf1      	ldr	r3, [pc, #964]	; (8000d14 <KalmanFilter_Update+0x3fc>)
 800094e:	613b      	str	r3, [r7, #16]
	float dt_pow4 = DT * DT * DT * DT;
 8000950:	4bf1      	ldr	r3, [pc, #964]	; (8000d18 <KalmanFilter_Update+0x400>)
 8000952:	60fb      	str	r3, [r7, #12]
	dev->x1 = X1 + X2 * DT
 8000954:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000958:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000964:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096c:	ee36 6b07 	vadd.f64	d6, d6, d7
			- ((X1 - theta_k + X2 * DT)
 8000970:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000974:	edd7 7a00 	vldr	s15, [r7]
 8000978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800097c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000980:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000988:	ed9f 4bdf 	vldr	d4, [pc, #892]	; 8000d08 <KalmanFilter_Update+0x3f0>
 800098c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000990:	ee35 5b07 	vadd.f64	d5, d5, d7
					* (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000994:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000998:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800099c:	edd7 7a07 	vldr	s15, [r7, #28]
 80009a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a4:	ed9f 3bd8 	vldr	d3, [pc, #864]	; 8000d08 <KalmanFilter_Update+0x3f0>
 80009a8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009ac:	ee34 4b07 	vadd.f64	d4, d4, d7
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80009b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009be:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 80009c2:	eec7 7a23 	vdiv.f32	s15, s14, s7
 80009c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ca:	ee34 4b07 	vadd.f64	d4, d4, d7
							+ DT* (P12 + P22 * DT)))
 80009ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80009d2:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80009d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80009da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009de:	ed9f 2bca 	vldr	d2, [pc, #808]	; 8000d08 <KalmanFilter_Update+0x3f0>
 80009e2:	ee27 7b02 	vmul.f64	d7, d7, d2
 80009e6:	ee33 7b07 	vadd.f64	d7, d3, d7
 80009ea:	ed9f 3bc7 	vldr	d3, [pc, #796]	; 8000d08 <KalmanFilter_Update+0x3f0>
 80009ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 80009f2:	ee34 7b07 	vadd.f64	d7, d4, d7
					* (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4
 80009f6:	ee25 4b07 	vmul.f64	d4, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	ed93 7a00 	vldr	s14, [r3]
 8000a00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a08:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a14:	ed9f 3bbc 	vldr	d3, [pc, #752]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000a18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a1c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	ed93 7a01 	vldr	s14, [r3, #4]
 8000a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a2e:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000a32:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3a:	ee35 5b07 	vadd.f64	d5, d5, d7
							+ DT* (P12 + P22 * DT));
 8000a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a42:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000a46:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4e:	ed9f 2bae 	vldr	d2, [pc, #696]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000a52:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000a56:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000a5a:	ed9f 3bab 	vldr	d3, [pc, #684]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000a5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000a62:	ee35 5b07 	vadd.f64	d5, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000a66:	ee84 7b05 	vdiv.f64	d7, d4, d5
			- ((X1 - theta_k + X2 * DT)
 8000a6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->x1 = X1 + X2 * DT
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->x2 = X2
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P21) * (X1 - theta_k + X2 * DT))
 8000a78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000a7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	ed93 7a01 	vldr	s14, [r3, #4]
 8000a86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a8e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000a92:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000a96:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa2:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000aa6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000aaa:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ab2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000aba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000abe:	edd7 7a00 	vldr	s15, [r7]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000aca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad2:	ed9f 3b8d 	vldr	d3, [pc, #564]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000ad6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ada:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000ade:	ee25 4b07 	vmul.f64	d4, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	ed93 7a00 	vldr	s14, [r3]
 8000ae8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000afc:	ed9f 3b82 	vldr	d3, [pc, #520]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000b00:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000b04:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b16:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000b1a:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b22:	ee35 5b07 	vadd.f64	d5, d5, d7
							+ DT* (P12 + P22 * DT));
 8000b26:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b2a:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ed9f 2b74 	vldr	d2, [pc, #464]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000b3a:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000b3e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000b42:	ed9f 3b71 	vldr	d3, [pc, #452]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000b46:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000b4a:	ee35 5b07 	vadd.f64	d5, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000b4e:	ee84 7b05 	vdiv.f64	d7, d4, d5
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P21) * (X1 - theta_k + X2 * DT))
 8000b52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->x2 = X2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->p11 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000b60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b64:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b68:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b70:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000b74:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8a:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000b8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ba2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000baa:	ed9f 4b57 	vldr	d4, [pc, #348]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000bae:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000bb2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000bb6:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000bba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000bbe:	ee36 5b07 	vadd.f64	d5, d6, d7
			/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	ed93 7a00 	vldr	s14, [r3]
 8000bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bdc:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000be0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000be4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bf6:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000bfa:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c06:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c0a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c16:	ed9f 3b3c 	vldr	d3, [pc, #240]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000c1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c1e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c22:	ed9f 4b39 	vldr	d4, [pc, #228]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000c26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c2e:	ee85 7b06 	vdiv.f64	d7, d5, d6
			- 1) * (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT));
 8000c32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c36:	ee37 7b46 	vsub.f64	d7, d7, d6
	dev->p11 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000c3a:	eeb1 6b47 	vneg.f64	d6, d7
			- 1) * (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT));
 8000c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c42:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4e:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000c52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c56:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c68:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000c6c:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c74:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c78:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c7c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c88:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000c8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000c90:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000c94:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000c98:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000c9c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ca4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->p11 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->p12 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000cae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000cb2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cbe:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000cc2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000cc6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd8:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000cdc:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ce8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cec:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf8:	ed9f 4b03 	vldr	d4, [pc, #12]	; 8000d08 <KalmanFilter_Update+0x3f0>
 8000cfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d00:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d04:	e00a      	b.n	8000d1c <KalmanFilter_Update+0x404>
 8000d06:	bf00      	nop
 8000d08:	47ae147b 	.word	0x47ae147b
 8000d0c:	3f847ae1 	.word	0x3f847ae1
 8000d10:	38d1b717 	.word	0x38d1b717
 8000d14:	358637bd 	.word	0x358637bd
 8000d18:	322bcc77 	.word	0x322bcc77
 8000d1c:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 8001060 <KalmanFilter_Update+0x748>
 8000d20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d24:	ee36 5b07 	vadd.f64	d5, d6, d7
			/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	ed93 7a00 	vldr	s14, [r3]
 8000d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d42:	ed9f 4bc7 	vldr	d4, [pc, #796]	; 8001060 <KalmanFilter_Update+0x748>
 8000d46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d5c:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8000d60:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000d64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d68:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d70:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7c:	ed9f 3bb8 	vldr	d3, [pc, #736]	; 8001060 <KalmanFilter_Update+0x748>
 8000d80:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000d84:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000d88:	ed9f 4bb5 	vldr	d4, [pc, #724]	; 8001060 <KalmanFilter_Update+0x748>
 8000d8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d94:	ee85 7b06 	vdiv.f64	d7, d5, d6
			- 1) * ((dev->Q * dt_pow3) / 2 + P22 * DT+ P12);
 8000d98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d9c:	ee37 7b46 	vsub.f64	d7, d7, d6
	dev->p12 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000da0:	eeb1 6b47 	vneg.f64	d6, d7
			- 1) * ((dev->Q * dt_pow3) / 2 + P22 * DT+ P12);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000db6:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000dba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc6:	ed9f 4ba6 	vldr	d4, [pc, #664]	; 8001060 <KalmanFilter_Update+0x748>
 8000dca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000dce:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000dd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dda:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000dde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000de2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->p12 = -((P11 + P21 * DT+ (dev->Q * dt_pow4) / 4 + DT* (P12 + P22 * DT))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->p21 = P21 + P22 * DT+ (dev->Q * dt_pow3) / 2
 8000dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000df0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfc:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8001060 <KalmanFilter_Update+0x748>
 8000e00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000e1a:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e22:	ee36 6b07 	vadd.f64	d6, d6, d7
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P21)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e34:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000e38:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000e3c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e48:	ed9f 4b85 	vldr	d4, [pc, #532]	; 8001060 <KalmanFilter_Update+0x748>
 8000e4c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000e50:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e54:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	ee35 5b07 	vadd.f64	d5, d5, d7
					* (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000e60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e64:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e70:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8001060 <KalmanFilter_Update+0x748>
 8000e74:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000e78:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e8a:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000e8e:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e96:	ee34 4b07 	vadd.f64	d4, d4, d7
							+ DT* (P12 + P22 * DT)))
 8000e9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e9e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eaa:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8001060 <KalmanFilter_Update+0x748>
 8000eae:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000eb2:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000eb6:	ed9f 3b6a 	vldr	d3, [pc, #424]	; 8001060 <KalmanFilter_Update+0x748>
 8000eba:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ebe:	ee34 7b07 	vadd.f64	d7, d4, d7
					* (P11 + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000ec2:	ee25 4b07 	vmul.f64	d4, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	ed93 7a00 	vldr	s14, [r3]
 8000ecc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000edc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee0:	ed9f 3b5f 	vldr	d3, [pc, #380]	; 8001060 <KalmanFilter_Update+0x748>
 8000ee4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ee8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000efa:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 8000efe:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8000f02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f06:	ee35 5b07 	vadd.f64	d5, d5, d7
							+ DT* (P12 + P22 * DT));
 8000f0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f0e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8000f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f1a:	ed9f 2b51 	vldr	d2, [pc, #324]	; 8001060 <KalmanFilter_Update+0x748>
 8000f1e:	ee27 7b02 	vmul.f64	d7, d7, d2
 8000f22:	ee33 7b07 	vadd.f64	d7, d3, d7
 8000f26:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8001060 <KalmanFilter_Update+0x748>
 8000f2a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000f2e:	ee35 5b07 	vadd.f64	d5, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000f32:	ee84 7b05 	vdiv.f64	d7, d4, d5
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P21)
 8000f36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->p21 = P21 + P22 * DT+ (dev->Q * dt_pow3) / 2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->p22 = P22 + dev->Q * dt_pow2
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P12)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8000f70:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000f74:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f80:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001060 <KalmanFilter_Update+0x748>
 8000f84:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000f88:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f94:	ee35 5b07 	vadd.f64	d5, d5, d7
					* ((dev->Q * dt_pow3) / 2 + P22 * DT+ P21))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8000faa:	eec7 7a24 	vdiv.f32	s15, s14, s9
 8000fae:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fba:	ed9f 3b29 	vldr	d3, [pc, #164]	; 8001060 <KalmanFilter_Update+0x748>
 8000fbe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000fc2:	ee34 4b07 	vadd.f64	d4, d4, d7
 8000fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fce:	ee34 7b07 	vadd.f64	d7, d4, d7
 8000fd2:	ee25 4b07 	vmul.f64	d4, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff0:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8001060 <KalmanFilter_Update+0x748>
 8000ff4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8000ff8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001002:	edd7 7a03 	vldr	s15, [r7, #12]
 8001006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100a:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
 800100e:	eec7 7a23 	vdiv.f32	s15, s14, s7
 8001012:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001016:	ee35 5b07 	vadd.f64	d5, d5, d7
							+ DT* (P12 + P22 * DT));
 800101a:	edd7 7a08 	vldr	s15, [r7, #32]
 800101e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8001022:	edd7 7a06 	vldr	s15, [r7, #24]
 8001026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102a:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001060 <KalmanFilter_Update+0x748>
 800102e:	ee27 7b02 	vmul.f64	d7, d7, d2
 8001032:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001036:	ed9f 3b0a 	vldr	d3, [pc, #40]	; 8001060 <KalmanFilter_Update+0x748>
 800103a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800103e:	ee35 5b07 	vadd.f64	d5, d5, d7
					/ (P11 + dev->R + P21 * DT+ (dev->Q * dt_pow4) / 4
 8001042:	ee84 7b05 	vdiv.f64	d7, d4, d5
			- (((dev->Q * dt_pow3) / 2 + P22 * DT+ P12)
 8001046:	ee36 7b47 	vsub.f64	d7, d6, d7
 800104a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	dev->p22 = P22 + dev->Q * dt_pow2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001054:	bf00      	nop
 8001056:	3734      	adds	r7, #52	; 0x34
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	47ae147b 	.word	0x47ae147b
 8001064:	3f847ae1 	.word	0x3f847ae1

08001068 <PIDController_initialise>:
 */

#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd,
		float lim_min, float lim_max, float lim_int_min, float lim_int_max) {
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	61f8      	str	r0, [r7, #28]
 8001070:	ed87 0a06 	vstr	s0, [r7, #24]
 8001074:	edc7 0a05 	vstr	s1, [r7, #20]
 8001078:	ed87 1a04 	vstr	s2, [r7, #16]
 800107c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001080:	ed87 2a02 	vstr	s4, [r7, #8]
 8001084:	edc7 2a01 	vstr	s5, [r7, #4]
 8001088:	ed87 3a00 	vstr	s6, [r7]
	/* Set Struct Variable */
	pid->Kp = Kp;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	609a      	str	r2, [r3, #8]
	pid->lim_min = lim_min;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	60da      	str	r2, [r3, #12]
	pid->lim_min = lim_min;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	60da      	str	r2, [r3, #12]
	pid->lim_int_max = lim_int_max;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	615a      	str	r2, [r3, #20]
	pid->lim_int_min = lim_int_min;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]

	/* Clear controller variables */
	pid->proportional_term = 0.0;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
	pid->integrator = 0.0;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
	pid->integral_term = 0.0;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
	pid->derivative_term = 0.0;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = 0.0;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->out = 0.0;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80010fe:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 8001102:	ed97 7a02 	vldr	s14, [r7, #8]
 8001106:	edd7 7a01 	vldr	s15, [r7, #4]
 800110a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110e:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	edd7 7a05 	vldr	s15, [r7, #20]
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	ed93 7a08 	vldr	s14, [r3, #32]
 800112c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	edd3 7a08 	vldr	s15, [r3, #32]
 8001146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * Anti-wind-up
	 */
	if (pid->integral_term > pid->lim_int_max){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	edd3 7a05 	vldr	s15, [r3, #20]
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dd04      	ble.n	8001170 <PIDController_update+0x7e>
		pid->integral_term = pid->lim_int_max;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
 800116e:	e00e      	b.n	800118e <PIDController_update+0x9c>
	}
	else if (pid->integral_term < pid->lim_int_min){
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a06 	vldr	s15, [r3, #24]
 800117c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d503      	bpl.n	800118e <PIDController_update+0x9c>
		pid->integral_term = pid->lim_int_min;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (measurement - pid->prevMeasurement);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	ed93 7a02 	vldr	s14, [r3, #8]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800119a:	edd7 6a01 	vldr	s13, [r7, #4]
 800119e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevMeasurement = measurement;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return pid->out;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	ee07 3a90 	vmov	s15, r3
}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2224      	movs	r2, #36	; 0x24
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00c f82f 	bl	800d264 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_ADC1_Init+0xe8>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC1_Init+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC1_Init+0xe4>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001220:	2204      	movs	r2, #4
 8001222:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC1_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001232:	2201      	movs	r2, #1
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001246:	2200      	movs	r2, #0
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC1_Init+0xe4>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001258:	2200      	movs	r2, #0
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_ADC1_Init+0xe4>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001264:	4819      	ldr	r0, [pc, #100]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001266:	f002 fd93 	bl	8003d90 <HAL_ADC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001270:	f000 fbd8 	bl	8001a24 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_ADC1_Init+0xe4>)
 8001280:	f004 f856 	bl	8005330 <HAL_ADCEx_MultiModeConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800128a:	f000 fbcb 	bl	8001a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_ADC1_Init+0xec>)
 8001290:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	2306      	movs	r3, #6
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800129e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a0:	2304      	movs	r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_ADC1_Init+0xe4>)
 80012b4:	f003 f9cc 	bl	8004650 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80012be:	f000 fbb1 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2400022c 	.word	0x2400022c
 80012d0:	40022000 	.word	0x40022000
 80012d4:	2a000400 	.word	0x2a000400

080012d8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2224      	movs	r2, #36	; 0x24
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00b ffbd 	bl	800d264 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <MX_ADC3_Init+0xd4>)
 80012ec:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <MX_ADC3_Init+0xd8>)
 80012ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_ADC3_Init+0xd4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <MX_ADC3_Init+0xd4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_ADC3_Init+0xd4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001304:	2204      	movs	r2, #4
 8001306:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_ADC3_Init+0xd4>)
 800130a:	2200      	movs	r2, #0
 800130c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001310:	2201      	movs	r2, #1
 8001312:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001316:	2201      	movs	r2, #1
 8001318:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_ADC3_Init+0xd4>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_ADC3_Init+0xd4>)
 800132a:	2200      	movs	r2, #0
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_ADC3_Init+0xd4>)
 800133e:	2200      	movs	r2, #0
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_ADC3_Init+0xd4>)
 800134a:	2200      	movs	r2, #0
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001358:	f002 fd1a 	bl	8003d90 <HAL_ADC_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001362:	f000 fb5f 	bl	8001a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_ADC3_Init+0xdc>)
 8001368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136a:	2306      	movs	r3, #6
 800136c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 800136e:	2302      	movs	r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001372:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001376:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001378:	2304      	movs	r3, #4
 800137a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_ADC3_Init+0xd4>)
 8001396:	f003 f95b 	bl	8004650 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80013a0:	f000 fb40 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2400029c 	.word	0x2400029c
 80013b0:	58026000 	.word	0x58026000
 80013b4:	c7520000 	.word	0xc7520000

080013b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_ADC_MspInit+0xb8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12a      	bne.n	8001430 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 80013dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e0:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 800142a:	f005 fe33 	bl	8007094 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800142e:	e01b      	b.n	8001468 <HAL_ADC_MspInit+0xb0>
  else if(adcHandle->Instance==ADC3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d116      	bne.n	8001468 <HAL_ADC_MspInit+0xb0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	207f      	movs	r0, #127	; 0x7f
 800145e:	f004 f924 	bl	80056aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001462:	207f      	movs	r0, #127	; 0x7f
 8001464:	f004 f93b 	bl	80056de <HAL_NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40022000 	.word	0x40022000
 8001474:	58024400 	.word	0x58024400
 8001478:	58020800 	.word	0x58020800
 800147c:	58026000 	.word	0x58026000

08001480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_DMA_Init+0x3c>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <MX_DMA_Init+0x3c>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_DMA_Init+0x3c>)
 8001498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	200b      	movs	r0, #11
 80014aa:	f004 f8fe 	bl	80056aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014ae:	200b      	movs	r0, #11
 80014b0:	f004 f915 	bl	80056de <HAL_NVIC_EnableIRQ>

}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58024400 	.word	0x58024400

080014c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d6:	4b62      	ldr	r3, [pc, #392]	; (8001660 <MX_GPIO_Init+0x1a0>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	4a60      	ldr	r2, [pc, #384]	; (8001660 <MX_GPIO_Init+0x1a0>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <MX_GPIO_Init+0x1a0>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <MX_GPIO_Init+0x1a0>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	4a59      	ldr	r2, [pc, #356]	; (8001660 <MX_GPIO_Init+0x1a0>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001504:	4b56      	ldr	r3, [pc, #344]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	4a51      	ldr	r2, [pc, #324]	; (8001660 <MX_GPIO_Init+0x1a0>)
 800151a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <MX_GPIO_Init+0x1a0>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <MX_GPIO_Init+0x1a0>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b38      	ldr	r3, [pc, #224]	; (8001660 <MX_GPIO_Init+0x1a0>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001590:	4834      	ldr	r0, [pc, #208]	; (8001664 <MX_GPIO_Init+0x1a4>)
 8001592:	f005 ff27 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 800159c:	4832      	ldr	r0, [pc, #200]	; (8001668 <MX_GPIO_Init+0x1a8>)
 800159e:	f005 ff21 	bl	80073e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015a2:	2200      	movs	r2, #0
 80015a4:	f644 7111 	movw	r1, #20241	; 0x4f11
 80015a8:	4830      	ldr	r0, [pc, #192]	; (800166c <MX_GPIO_Init+0x1ac>)
 80015aa:	f005 ff1b 	bl	80073e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80015b4:	482e      	ldr	r0, [pc, #184]	; (8001670 <MX_GPIO_Init+0x1b0>)
 80015b6:	f005 ff15 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	21f0      	movs	r1, #240	; 0xf0
 80015be:	482d      	ldr	r0, [pc, #180]	; (8001674 <MX_GPIO_Init+0x1b4>)
 80015c0:	f005 ff10 	bl	80073e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 80015c4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <MX_GPIO_Init+0x1a4>)
 80015de:	f005 fd59 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 80015e2:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 80015e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	481b      	ldr	r0, [pc, #108]	; (8001668 <MX_GPIO_Init+0x1a8>)
 80015fc:	f005 fd4a 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001600:	f644 7311 	movw	r3, #20241	; 0x4f11
 8001604:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <MX_GPIO_Init+0x1ac>)
 800161a:	f005 fd3b 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 800161e:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <MX_GPIO_Init+0x1b0>)
 8001638:	f005 fd2c 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 800163c:	23f0      	movs	r3, #240	; 0xf0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <MX_GPIO_Init+0x1b4>)
 8001654:	f005 fd1e 	bl	8007094 <HAL_GPIO_Init>

}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	58024400 	.word	0x58024400
 8001664:	58021000 	.word	0x58021000
 8001668:	58020800 	.word	0x58020800
 800166c:	58020c00 	.word	0x58020c00
 8001670:	58020000 	.word	0x58020000
 8001674:	58020400 	.word	0x58020400

08001678 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800167e:	f002 f86d 	bl	800375c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001682:	f000 f915 	bl	80018b0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001686:	f000 f98d 	bl	80019a4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800168a:	f7ff ff19 	bl	80014c0 <MX_GPIO_Init>
	MX_DMA_Init();
 800168e:	f7ff fef7 	bl	8001480 <MX_DMA_Init>
	MX_ADC1_Init();
 8001692:	f7ff fda9 	bl	80011e8 <MX_ADC1_Init>
	MX_ADC3_Init();
 8001696:	f7ff fe1f 	bl	80012d8 <MX_ADC3_Init>
	MX_SPI3_Init();
 800169a:	f000 fae9 	bl	8001c70 <MX_SPI3_Init>
	MX_TIM1_Init();
 800169e:	f000 fd45 	bl	800212c <MX_TIM1_Init>
	MX_TIM2_Init();
 80016a2:	f000 fdf1 	bl	8002288 <MX_TIM2_Init>
	MX_TIM3_Init();
 80016a6:	f000 fe67 	bl	8002378 <MX_TIM3_Init>
	MX_TIM4_Init();
 80016aa:	f000 fedd 	bl	8002468 <MX_TIM4_Init>
	MX_TIM12_Init();
 80016ae:	f000 ff53 	bl	8002558 <MX_TIM12_Init>
	MX_TIM13_Init();
 80016b2:	f000 ffb5 	bl	8002620 <MX_TIM13_Init>
	MX_TIM14_Init();
 80016b6:	f001 f801 	bl	80026bc <MX_TIM14_Init>
	MX_TIM15_Init();
 80016ba:	f001 f84d 	bl	8002758 <MX_TIM15_Init>
	MX_TIM16_Init();
 80016be:	f001 f8ef 	bl	80028a0 <MX_TIM16_Init>
	MX_TIM17_Init();
 80016c2:	f001 f967 	bl	8002994 <MX_TIM17_Init>
	MX_UART4_Init();
 80016c6:	f001 fd75 	bl	80031b4 <MX_UART4_Init>
	MX_UART5_Init();
 80016ca:	f001 fdbf 	bl	800324c <MX_UART5_Init>
	MX_USART2_UART_Init();
 80016ce:	f001 fe09 	bl	80032e4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80016d2:	f001 fe53 	bl	800337c <MX_USART3_UART_Init>
	MX_TIM24_Init();
 80016d6:	f001 fa27 	bl	8002b28 <MX_TIM24_Init>
	MX_TIM23_Init();
 80016da:	f001 f9d5 	bl	8002a88 <MX_TIM23_Init>
	/* USER CODE BEGIN 2 */
	uint32_t timestamp = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port, USART2_DE_Pin);
 80016e2:	2310      	movs	r3, #16
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <main+0x1dc>)
 80016e8:	222c      	movs	r2, #44	; 0x2c
 80016ea:	495b      	ldr	r1, [pc, #364]	; (8001858 <main+0x1e0>)
 80016ec:	485b      	ldr	r0, [pc, #364]	; (800185c <main+0x1e4>)
 80016ee:	f7fe ffe3 	bl	80006b8 <AMT21_initialise>
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port, USART2_DE_Pin);
 80016f2:	2310      	movs	r3, #16
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <main+0x1dc>)
 80016f8:	2270      	movs	r2, #112	; 0x70
 80016fa:	4957      	ldr	r1, [pc, #348]	; (8001858 <main+0x1e0>)
 80016fc:	4858      	ldr	r0, [pc, #352]	; (8001860 <main+0x1e8>)
 80016fe:	f7fe ffdb 	bl	80006b8 <AMT21_initialise>
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port, USART2_DE_Pin);
 8001702:	2310      	movs	r3, #16
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <main+0x1dc>)
 8001708:	2254      	movs	r2, #84	; 0x54
 800170a:	4953      	ldr	r1, [pc, #332]	; (8001858 <main+0x1e0>)
 800170c:	4855      	ldr	r0, [pc, #340]	; (8001864 <main+0x1ec>)
 800170e:	f7fe ffd3 	bl	80006b8 <AMT21_initialise>
	AMT21_initialise(&encoders[3], &huart2, 0xE8, USART2_DE_GPIO_Port, USART2_DE_Pin);
 8001712:	2310      	movs	r3, #16
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <main+0x1dc>)
 8001718:	22e8      	movs	r2, #232	; 0xe8
 800171a:	494f      	ldr	r1, [pc, #316]	; (8001858 <main+0x1e0>)
 800171c:	4852      	ldr	r0, [pc, #328]	; (8001868 <main+0x1f0>)
 800171e:	f7fe ffcb 	bl	80006b8 <AMT21_initialise>
	AMT21_initialise(&encoders[4], &huart2, 0xB4, USART2_DE_GPIO_Port, USART2_DE_Pin);
 8001722:	2310      	movs	r3, #16
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <main+0x1dc>)
 8001728:	22b4      	movs	r2, #180	; 0xb4
 800172a:	494b      	ldr	r1, [pc, #300]	; (8001858 <main+0x1e0>)
 800172c:	484f      	ldr	r0, [pc, #316]	; (800186c <main+0x1f4>)
 800172e:	f7fe ffc3 	bl	80006b8 <AMT21_initialise>
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin);
 8001732:	2308      	movs	r3, #8
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <main+0x1f8>)
 8001738:	2200      	movs	r2, #0
 800173a:	494e      	ldr	r1, [pc, #312]	; (8001874 <main+0x1fc>)
 800173c:	484e      	ldr	r0, [pc, #312]	; (8001878 <main+0x200>)
 800173e:	f000 f977 	bl	8001a30 <stepper_initialise>
	KalmanFilter_Init(&kalman_filter[0], 0, 0, 1, 0, 0, 1, kalman_R, kalman_Q);
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <main+0x204>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <main+0x208>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	eef0 3a47 	vmov.f32	s7, s14
 8001752:	eeb0 3a67 	vmov.f32	s6, s15
 8001756:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800175a:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8001884 <main+0x20c>
 800175e:	eddf 1a49 	vldr	s3, [pc, #292]	; 8001884 <main+0x20c>
 8001762:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001766:	eddf 0a47 	vldr	s1, [pc, #284]	; 8001884 <main+0x20c>
 800176a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001884 <main+0x20c>
 800176e:	4846      	ldr	r0, [pc, #280]	; (8001888 <main+0x210>)
 8001770:	f7ff f8a0 	bl	80008b4 <KalmanFilter_Init>
	PIDController_initialise(&pid_controller[0], 0.001, 0, 0, -500, 500, -100, 100);
 8001774:	ed9f 3a45 	vldr	s6, [pc, #276]	; 800188c <main+0x214>
 8001778:	eddf 2a45 	vldr	s5, [pc, #276]	; 8001890 <main+0x218>
 800177c:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8001894 <main+0x21c>
 8001780:	eddf 1a45 	vldr	s3, [pc, #276]	; 8001898 <main+0x220>
 8001784:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001884 <main+0x20c>
 8001788:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001884 <main+0x20c>
 800178c:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800189c <main+0x224>
 8001790:	4843      	ldr	r0, [pc, #268]	; (80018a0 <main+0x228>)
 8001792:	f7ff fc69 	bl	8001068 <PIDController_initialise>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - timestamp > 9) { // 100 hz
 8001796:	f002 f867 	bl	8003868 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d9f8      	bls.n	8001796 <main+0x11e>
			AMT21_read_value(&(encoders[CURRENT_NUMBER]));
 80017a4:	482d      	ldr	r0, [pc, #180]	; (800185c <main+0x1e4>)
 80017a6:	f7fe ffb0 	bl	800070a <AMT21_read_value>
			HAL_StatusTypeDef rep = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
			while (rep == HAL_ERROR) {
 80017ae:	e007      	b.n	80017c0 <main+0x148>
				AMT21_read_value(&(encoders[CURRENT_NUMBER]));
 80017b0:	482a      	ldr	r0, [pc, #168]	; (800185c <main+0x1e4>)
 80017b2:	f7fe ffaa 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[CURRENT_NUMBER]));
 80017b6:	4829      	ldr	r0, [pc, #164]	; (800185c <main+0x1e4>)
 80017b8:	f7fe ffe6 	bl	8000788 <AMT21_check_value>
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
			while (rep == HAL_ERROR) {
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d0f4      	beq.n	80017b0 <main+0x138>
			}
			joint_state[CURRENT_NUMBER] = joint_state[CURRENT_NUMBER]
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <main+0x22c>)
 80017c8:	681c      	ldr	r4, [r3, #0]
					+ AMT21_unwrap((int32_t)encoders[CURRENT_NUMBER].position,
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <main+0x1e4>)
 80017cc:	89db      	ldrh	r3, [r3, #14]
 80017ce:	461a      	mov	r2, r3
							(int32_t)encoders[CURRENT_NUMBER].prev_position);
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <main+0x1e4>)
 80017d2:	8a1b      	ldrh	r3, [r3, #16]
					+ AMT21_unwrap((int32_t)encoders[CURRENT_NUMBER].position,
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff f83c 	bl	8000854 <AMT21_unwrap>
 80017dc:	4603      	mov	r3, r0
 80017de:	4423      	add	r3, r4
			joint_state[CURRENT_NUMBER] = joint_state[CURRENT_NUMBER]
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <main+0x22c>)
 80017e2:	6013      	str	r3, [r2, #0]
//			}
//			FreqOutput = sin(AngleInput) * 500;
			/*
			 * Step Wave Generator
			 */
			tim_cnt++;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <main+0x230>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <main+0x230>)
 80017ee:	801a      	strh	r2, [r3, #0]
			if (tim_cnt > 1500){
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <main+0x230>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d90a      	bls.n	8001812 <main+0x19a>
				desired_value = -1 * desired_value;
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <main+0x234>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eef1 7a67 	vneg.f32	s15, s15
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <main+0x234>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
				tim_cnt = 0;
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <main+0x230>)
 800180e:	2200      	movs	r2, #0
 8001810:	801a      	strh	r2, [r3, #0]
			}
			KalmanFilter_Update(&kalman_filter[0], joint_state[CURRENT_NUMBER]);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <main+0x22c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181e:	eeb0 0a67 	vmov.f32	s0, s15
 8001822:	4819      	ldr	r0, [pc, #100]	; (8001888 <main+0x210>)
 8001824:	f7ff f878 	bl	8000918 <KalmanFilter_Update>
			/*
			 * Speed Controller
			 */
			PIDController_update(&pid_controller[CURRENT_NUMBER], desired_value, kalman_filter[0].x2);
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <main+0x234>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <main+0x210>)
 8001830:	ed93 7a03 	vldr	s14, [r3, #12]
 8001834:	eef0 0a47 	vmov.f32	s1, s14
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <main+0x228>)
 800183e:	f7ff fc58 	bl	80010f2 <PIDController_update>
			stepper_set_speed(&steppers[CURRENT_NUMBER], pid_controller[CURRENT_NUMBER].out);
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <main+0x228>)
 8001844:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	480a      	ldr	r0, [pc, #40]	; (8001878 <main+0x200>)
 800184e:	f000 f9a3 	bl	8001b98 <stepper_set_speed>
		if (HAL_GetTick() - timestamp > 9) { // 100 hz
 8001852:	e7a0      	b.n	8001796 <main+0x11e>
 8001854:	58020c00 	.word	0x58020c00
 8001858:	24000ba4 	.word	0x24000ba4
 800185c:	2400035c 	.word	0x2400035c
 8001860:	24000370 	.word	0x24000370
 8001864:	24000384 	.word	0x24000384
 8001868:	24000398 	.word	0x24000398
 800186c:	240003ac 	.word	0x240003ac
 8001870:	58021000 	.word	0x58021000
 8001874:	240007b4 	.word	0x240007b4
 8001878:	2400030c 	.word	0x2400030c
 800187c:	24000000 	.word	0x24000000
 8001880:	24000004 	.word	0x24000004
 8001884:	00000000 	.word	0x00000000
 8001888:	240003c0 	.word	0x240003c0
 800188c:	42c80000 	.word	0x42c80000
 8001890:	c2c80000 	.word	0xc2c80000
 8001894:	43fa0000 	.word	0x43fa0000
 8001898:	c3fa0000 	.word	0xc3fa0000
 800189c:	3a83126f 	.word	0x3a83126f
 80018a0:	24000460 	.word	0x24000460
 80018a4:	24000208 	.word	0x24000208
 80018a8:	2400021c 	.word	0x2400021c
 80018ac:	24000008 	.word	0x24000008

080018b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09c      	sub	sp, #112	; 0x70
 80018b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	224c      	movs	r2, #76	; 0x4c
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f00b fcd0 	bl	800d264 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2220      	movs	r2, #32
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00b fcca 	bl	800d264 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018d0:	2002      	movs	r0, #2
 80018d2:	f005 fda1 	bl	8007418 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <SystemClock_Config+0xec>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <SystemClock_Config+0xec>)
 80018e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <SystemClock_Config+0xec>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80018f2:	bf00      	nop
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <SystemClock_Config+0xec>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001900:	d1f8      	bne.n	80018f4 <SystemClock_Config+0x44>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <SystemClock_Config+0xf0>)
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <SystemClock_Config+0xf0>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001912:	2301      	movs	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191c:	2302      	movs	r3, #2
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001920:	2302      	movs	r3, #2
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001928:	232c      	movs	r3, #44	; 0x2c
 800192a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001930:	2303      	movs	r3, #3
 8001932:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001934:	2302      	movs	r3, #2
 8001936:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001938:	230c      	movs	r3, #12
 800193a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800193c:	2300      	movs	r3, #0
 800193e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4618      	mov	r0, r3
 800194a:	f005 fd9f 	bl	800748c <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0xa8>
		Error_Handler();
 8001954:	f000 f866 	bl	8001a24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001958:	233f      	movs	r3, #63	; 0x3f
 800195a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2303      	movs	r3, #3
 800195e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001964:	2308      	movs	r3, #8
 8001966:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001968:	2340      	movs	r3, #64	; 0x40
 800196a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001974:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001976:	2340      	movs	r3, #64	; 0x40
 8001978:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2103      	movs	r1, #3
 800197e:	4618      	mov	r0, r3
 8001980:	f006 f930 	bl	8007be4 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0xde>
		Error_Handler();
 800198a:	f000 f84b 	bl	8001a24 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 800198e:	f006 fadf 	bl	8007f50 <HAL_RCC_EnableCSS>
}
 8001992:	bf00      	nop
 8001994:	3770      	adds	r7, #112	; 0x70
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	58024800 	.word	0x58024800
 80019a0:	58024400 	.word	0x58024400

080019a4 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ae      	sub	sp, #184	; 0xb8
 80019a8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	22b4      	movs	r2, #180	; 0xb4
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00b fc57 	bl	800d264 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019ba:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 80019bc:	2302      	movs	r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 15;
 80019c0:	230f      	movs	r3, #15
 80019c2:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80019d8:	f640 3386 	movw	r3, #2950	; 0xb86
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f006 fcb4 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <PeriphCommonClock_Config+0x52>
		Error_Handler();
 80019f2:	f000 f817 	bl	8001a24 <Error_Handler>
	}
}
 80019f6:	bf00      	nop
 80019f8:	37b8      	adds	r7, #184	; 0xb8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8001a08:	1d39      	adds	r1, r7, #4
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <__io_putchar+0x20>)
 8001a10:	f00a f970 	bl	800bcf4 <HAL_UART_Transmit>

	return ch;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	240009f4 	.word	0x240009f4

08001a24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8b3a      	ldrh	r2, [r7, #24]
 8001a54:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6898      	ldr	r0, [r3, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	899b      	ldrh	r3, [r3, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	f005 fcbf 	bl	80073e4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f008 fedb 	bl	800a82c <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	739a      	strb	r2, [r3, #14]
	stepper_set_speed(dev, 0);
 8001a7c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001a90 <stepper_initialise+0x60>
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f889 	bl	8001b98 <stepper_set_speed>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00000000 	.word	0x00000000

08001a94 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aa2:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq < MIN_FREQUENCY){
 8001aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aaa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d503      	bpl.n	8001ac0 <set_pwm+0x2c>
		freq = MIN_FREQUENCY;
 8001ab8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	e00a      	b.n	8001ad6 <set_pwm+0x42>
	}
	else if (freq > MAX_FREQUENCY){
 8001ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001b90 <set_pwm+0xfc>
 8001ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	dd01      	ble.n	8001ad6 <set_pwm+0x42>
		freq = MAX_FREQUENCY;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <set_pwm+0x100>)
 8001ad4:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 500000 / freq; //500000 come from 275MHz/550
 8001ad6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001b90 <set_pwm+0xfc>
 8001ada:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae6:	ee17 3a90 	vmov	r3, s15
 8001aea:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8001aec:	8abb      	ldrh	r3, [r7, #20]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	edd7 7a00 	vldr	s15, [r7]
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8001b08:	edd7 7a00 	vldr	s15, [r7]
 8001b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b10:	eef4 7a47 	vcmp.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d101      	bne.n	8001b1e <set_pwm+0x8a>
		CCRx_value = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	8aba      	ldrh	r2, [r7, #20]
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b26:	8aba      	ldrh	r2, [r7, #20]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d104      	bne.n	8001b3c <set_pwm+0xa8>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	8afa      	ldrh	r2, [r7, #22]
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b3a:	e023      	b.n	8001b84 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d104      	bne.n	8001b4c <set_pwm+0xb8>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	8afb      	ldrh	r3, [r7, #22]
 8001b48:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b4a:	e01b      	b.n	8001b84 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d104      	bne.n	8001b5c <set_pwm+0xc8>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	8afb      	ldrh	r3, [r7, #22]
 8001b58:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b5a:	e013      	b.n	8001b84 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d104      	bne.n	8001b6c <set_pwm+0xd8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	8afb      	ldrh	r3, [r7, #22]
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b6a:	e00b      	b.n	8001b84 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d104      	bne.n	8001b7c <set_pwm+0xe8>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	8afb      	ldrh	r3, [r7, #22]
 8001b78:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001b7a:	e003      	b.n	8001b84 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	48f42400 	.word	0x48f42400
 8001b94:	48f42400 	.word	0x48f42400

08001b98 <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	ed87 0a02 	vstr	s0, [r7, #8]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	7b9b      	ldrb	r3, [r3, #14]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bb4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d051      	beq.n	8001c62 <stepper_set_speed+0xca>
		if (freq > 0) {
 8001bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	dd14      	ble.n	8001bf6 <stepper_set_speed+0x5e>
			HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6898      	ldr	r0, [r3, #8]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	899b      	ldrh	r3, [r3, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f005 fc04 	bl	80073e4 <HAL_GPIO_WritePin>
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001be8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff ff50 	bl	8001a94 <set_pwm>
 8001bf4:	e02b      	b.n	8001c4e <stepper_set_speed+0xb6>
		} else if (freq < 0) {
 8001bf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d518      	bpl.n	8001c36 <stepper_set_speed+0x9e>
			HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	899b      	ldrh	r3, [r3, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f005 fbe8 	bl	80073e4 <HAL_GPIO_WritePin>
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c20:	eef1 7a67 	vneg.f32	s15, s15
 8001c24:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f7ff ff30 	bl	8001a94 <set_pwm>
 8001c34:	e00b      	b.n	8001c4e <stepper_set_speed+0xb6>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c42:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001c6c <stepper_set_speed+0xd4>
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f7ff ff23 	bl	8001a94 <set_pwm>
		}
		dev->freq = freq;
 8001c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c56:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c5a:	793b      	ldrb	r3, [r7, #4]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	739a      	strb	r2, [r3, #14]
	}
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	42c80000 	.word	0x42c80000

08001c70 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <MX_SPI3_Init+0xa8>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001c9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_SPI3_Init+0xa4>)
 8001d00:	f008 fbba 	bl	800a478 <HAL_SPI_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001d0a:	f7ff fe8b 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24000564 	.word	0x24000564
 8001d18:	40003c00 	.word	0x40003c00

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0b6      	sub	sp, #216	; 0xd8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	22b4      	movs	r2, #180	; 0xb4
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00b fa91 	bl	800d264 <memset>
  if(spiHandle->Instance==SPI3)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_SPI_MspInit+0xc0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d142      	bne.n	8001dd2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 fafa 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d66:	f7ff fe5d 	bl	8001a24 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_SPI_MspInit+0xc4>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001da6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_SPI_MspInit+0xc8>)
 8001dce:	f005 f961 	bl	8007094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	37d8      	adds	r7, #216	; 0xd8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40003c00 	.word	0x40003c00
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58020800 	.word	0x58020800

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_MspInit+0x30>)
 8001df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df4:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_MspInit+0x30>)
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_MspInit+0x30>)
 8001e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	58024400 	.word	0x58024400

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e20:	f006 fa7c 	bl	800831c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x8>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f001 fce8 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA1_Stream0_IRQHandler+0x10>)
 8001e7a:	f003 ffa5 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2400097c 	.word	0x2400097c

08001e88 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <ADC3_IRQHandler+0x10>)
 8001e8e:	f002 f987 	bl	80041a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2400029c 	.word	0x2400029c

08001e9c <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM24_IRQHandler+0x10>)
 8001ea2:	f008 fddf 	bl	800aa64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	240005ec 	.word	0x240005ec

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eca:	f00b f993 	bl	800d1f4 <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ef2:	e7fe      	b.n	8001ef2 <_exit+0x12>

08001ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
	}

return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e009      	b.n	8001f54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fd59 	bl	8001a00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf1      	blt.n	8001f40 <_write+0x12>
	}
	return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:

int _close(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f00b f8f8 	bl	800d1f4 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24050000 	.word	0x24050000
 8002030:	00000400 	.word	0x00000400
 8002034:	24000220 	.word	0x24000220
 8002038:	24000c48 	.word	0x24000c48

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <SystemInit+0xd0>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a31      	ldr	r2, [pc, #196]	; (800210c <SystemInit+0xd0>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <SystemInit+0xd4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b06      	cmp	r3, #6
 800205a:	d807      	bhi.n	800206c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <SystemInit+0xd4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 030f 	bic.w	r3, r3, #15
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <SystemInit+0xd4>)
 8002066:	f043 0307 	orr.w	r3, r3, #7
 800206a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <SystemInit+0xd8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <SystemInit+0xd8>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <SystemInit+0xd8>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <SystemInit+0xd8>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4924      	ldr	r1, [pc, #144]	; (8002114 <SystemInit+0xd8>)
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <SystemInit+0xdc>)
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <SystemInit+0xd4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <SystemInit+0xd4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 030f 	bic.w	r3, r3, #15
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <SystemInit+0xd4>)
 80020a0:	f043 0307 	orr.w	r3, r3, #7
 80020a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <SystemInit+0xd8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <SystemInit+0xd8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <SystemInit+0xd8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <SystemInit+0xd8>)
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <SystemInit+0xe0>)
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <SystemInit+0xd8>)
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <SystemInit+0xe4>)
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <SystemInit+0xd8>)
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <SystemInit+0xe8>)
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <SystemInit+0xd8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <SystemInit+0xd8>)
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <SystemInit+0xe8>)
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <SystemInit+0xd8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <SystemInit+0xd8>)
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <SystemInit+0xe8>)
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <SystemInit+0xd8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <SystemInit+0xd8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <SystemInit+0xd8>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <SystemInit+0xd8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <SystemInit+0xec>)
 80020fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002100:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	52002000 	.word	0x52002000
 8002114:	58024400 	.word	0x58024400
 8002118:	eaf6ed7f 	.word	0xeaf6ed7f
 800211c:	02020200 	.word	0x02020200
 8002120:	01ff0000 	.word	0x01ff0000
 8002124:	01010280 	.word	0x01010280
 8002128:	52004000 	.word	0x52004000

0800212c <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b09c      	sub	sp, #112	; 0x70
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2234      	movs	r2, #52	; 0x34
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f00b f87c 	bl	800d264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800216c:	4b44      	ldr	r3, [pc, #272]	; (8002280 <MX_TIM1_Init+0x154>)
 800216e:	4a45      	ldr	r2, [pc, #276]	; (8002284 <MX_TIM1_Init+0x158>)
 8002170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 550-1;
 8002172:	4b43      	ldr	r3, [pc, #268]	; (8002280 <MX_TIM1_Init+0x154>)
 8002174:	f240 2225 	movw	r2, #549	; 0x225
 8002178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <MX_TIM1_Init+0x154>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <MX_TIM1_Init+0x154>)
 8002182:	f242 7210 	movw	r2, #10000	; 0x2710
 8002186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <MX_TIM1_Init+0x154>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <MX_TIM1_Init+0x154>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MX_TIM1_Init+0x154>)
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800219a:	4839      	ldr	r0, [pc, #228]	; (8002280 <MX_TIM1_Init+0x154>)
 800219c:	f008 fa8d 	bl	800a6ba <HAL_TIM_Base_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80021a6:	f7ff fc3d 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021b4:	4619      	mov	r1, r3
 80021b6:	4832      	ldr	r0, [pc, #200]	; (8002280 <MX_TIM1_Init+0x154>)
 80021b8:	f008 fe88 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80021c2:	f7ff fc2f 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c6:	482e      	ldr	r0, [pc, #184]	; (8002280 <MX_TIM1_Init+0x154>)
 80021c8:	f008 face 	bl	800a768 <HAL_TIM_PWM_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80021d2:	f7ff fc27 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021e6:	4619      	mov	r1, r3
 80021e8:	4825      	ldr	r0, [pc, #148]	; (8002280 <MX_TIM1_Init+0x154>)
 80021ea:	f009 fbd9 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80021f4:	f7ff fc16 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f8:	2360      	movs	r3, #96	; 0x60
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002200:	2300      	movs	r3, #0
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	4818      	ldr	r0, [pc, #96]	; (8002280 <MX_TIM1_Init+0x154>)
 800221e:	f008 fd41 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002228:	f7ff fbfc 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800224e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4807      	ldr	r0, [pc, #28]	; (8002280 <MX_TIM1_Init+0x154>)
 8002262:	f009 fc39 	bl	800bad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800226c:	f7ff fbda 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <MX_TIM1_Init+0x154>)
 8002272:	f000 fdf5 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002276:	bf00      	nop
 8002278:	3770      	adds	r7, #112	; 0x70
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	240007b4 	.word	0x240007b4
 8002284:	40010000 	.word	0x40010000

08002288 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08e      	sub	sp, #56	; 0x38
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	615a      	str	r2, [r3, #20]
 80022b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <MX_TIM2_Init+0xec>)
 80022bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550 - 1;
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <MX_TIM2_Init+0xec>)
 80022c4:	f240 2225 	movw	r2, #549	; 0x225
 80022c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_TIM2_Init+0xec>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <MX_TIM2_Init+0xec>)
 80022d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_TIM2_Init+0xec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <MX_TIM2_Init+0xec>)
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e4:	4823      	ldr	r0, [pc, #140]	; (8002374 <MX_TIM2_Init+0xec>)
 80022e6:	f008 f9e8 	bl	800a6ba <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80022f0:	f7ff fb98 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fe:	4619      	mov	r1, r3
 8002300:	481c      	ldr	r0, [pc, #112]	; (8002374 <MX_TIM2_Init+0xec>)
 8002302:	f008 fde3 	bl	800aecc <HAL_TIM_ConfigClockSource>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800230c:	f7ff fb8a 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM2_Init+0xec>)
 8002312:	f008 fa29 	bl	800a768 <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800231c:	f7ff fb82 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_TIM2_Init+0xec>)
 8002330:	f009 fb36 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800233a:	f7ff fb73 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM2_Init+0xec>)
 8002356:	f008 fca5 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002360:	f7ff fb60 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM2_Init+0xec>)
 8002366:	f000 fd7b 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	; 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	24000800 	.word	0x24000800

08002378 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002398:	463b      	mov	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023ac:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <MX_TIM3_Init+0xec>)
 80023ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550 - 1;
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023b2:	f240 2225 	movw	r2, #549	; 0x225
 80023b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80023c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023d2:	4823      	ldr	r0, [pc, #140]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023d4:	f008 f971 	bl	800a6ba <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80023de:	f7ff fb21 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ec:	4619      	mov	r1, r3
 80023ee:	481c      	ldr	r0, [pc, #112]	; (8002460 <MX_TIM3_Init+0xe8>)
 80023f0:	f008 fd6c 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80023fa:	f7ff fb13 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023fe:	4818      	ldr	r0, [pc, #96]	; (8002460 <MX_TIM3_Init+0xe8>)
 8002400:	f008 f9b2 	bl	800a768 <HAL_TIM_PWM_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800240a:	f7ff fb0b 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	4810      	ldr	r0, [pc, #64]	; (8002460 <MX_TIM3_Init+0xe8>)
 800241e:	f009 fabf 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002428:	f7ff fafc 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242c:	2360      	movs	r3, #96	; 0x60
 800242e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <MX_TIM3_Init+0xe8>)
 8002444:	f008 fc2e 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800244e:	f7ff fae9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <MX_TIM3_Init+0xe8>)
 8002454:	f000 fd04 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002458:	bf00      	nop
 800245a:	3738      	adds	r7, #56	; 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2400071c 	.word	0x2400071c
 8002464:	40000400 	.word	0x40000400

08002468 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <MX_TIM4_Init+0xe8>)
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <MX_TIM4_Init+0xec>)
 800249e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 550-1;
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024a2:	f240 2225 	movw	r2, #549	; 0x225
 80024a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024c2:	4823      	ldr	r0, [pc, #140]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024c4:	f008 f8f9 	bl	800a6ba <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80024ce:	f7ff faa9 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024dc:	4619      	mov	r1, r3
 80024de:	481c      	ldr	r0, [pc, #112]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024e0:	f008 fcf4 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80024ea:	f7ff fa9b 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ee:	4818      	ldr	r0, [pc, #96]	; (8002550 <MX_TIM4_Init+0xe8>)
 80024f0:	f008 f93a 	bl	800a768 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80024fa:	f7ff fa93 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4810      	ldr	r0, [pc, #64]	; (8002550 <MX_TIM4_Init+0xe8>)
 800250e:	f009 fa47 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002518:	f7ff fa84 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	; 0x60
 800251e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <MX_TIM4_Init+0xe8>)
 8002534:	f008 fbb6 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800253e:	f7ff fa71 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <MX_TIM4_Init+0xe8>)
 8002544:	f000 fc8c 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002548:	bf00      	nop
 800254a:	3738      	adds	r7, #56	; 0x38
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	24000638 	.word	0x24000638
 8002554:	40000800 	.word	0x40000800

08002558 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	615a      	str	r2, [r3, #20]
 800257c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <MX_TIM12_Init+0xc0>)
 8002580:	4a26      	ldr	r2, [pc, #152]	; (800261c <MX_TIM12_Init+0xc4>)
 8002582:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <MX_TIM12_Init+0xc0>)
 8002586:	f240 2225 	movw	r2, #549	; 0x225
 800258a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_TIM12_Init+0xc0>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <MX_TIM12_Init+0xc0>)
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_TIM12_Init+0xc0>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <MX_TIM12_Init+0xc0>)
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80025a4:	481c      	ldr	r0, [pc, #112]	; (8002618 <MX_TIM12_Init+0xc0>)
 80025a6:	f008 f888 	bl	800a6ba <HAL_TIM_Base_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80025b0:	f7ff fa38 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80025ba:	f107 0320 	add.w	r3, r7, #32
 80025be:	4619      	mov	r1, r3
 80025c0:	4815      	ldr	r0, [pc, #84]	; (8002618 <MX_TIM12_Init+0xc0>)
 80025c2:	f008 fc83 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80025cc:	f7ff fa2a 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80025d0:	4811      	ldr	r0, [pc, #68]	; (8002618 <MX_TIM12_Init+0xc0>)
 80025d2:	f008 f8c9 	bl	800a768 <HAL_TIM_PWM_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80025dc:	f7ff fa22 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e0:	2360      	movs	r3, #96	; 0x60
 80025e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 80025e4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80025e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM12_Init+0xc0>)
 80025fa:	f008 fb53 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002604:	f7ff fa0e 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM12_Init+0xc0>)
 800260a:	f000 fc29 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3730      	adds	r7, #48	; 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	240008e4 	.word	0x240008e4
 800261c:	40001800 	.word	0x40001800

08002620 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <MX_TIM13_Init+0x94>)
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <MX_TIM13_Init+0x98>)
 800263c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002640:	f240 2225 	movw	r2, #549	; 0x225
 8002644:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_TIM13_Init+0x94>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_TIM13_Init+0x94>)
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800265e:	4815      	ldr	r0, [pc, #84]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002660:	f008 f82b 	bl	800a6ba <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800266a:	f7ff f9db 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800266e:	4811      	ldr	r0, [pc, #68]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002670:	f008 f87a 	bl	800a768 <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800267a:	f7ff f9d3 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800267e:	2360      	movs	r3, #96	; 0x60
 8002680:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002682:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <MX_TIM13_Init+0x94>)
 8002698:	f008 fb04 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80026a2:	f7ff f9bf 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80026a6:	4803      	ldr	r0, [pc, #12]	; (80026b4 <MX_TIM13_Init+0x94>)
 80026a8:	f000 fbda 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	24000768 	.word	0x24000768
 80026b8:	40001c00 	.word	0x40001c00

080026bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <MX_TIM14_Init+0x94>)
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <MX_TIM14_Init+0x98>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <MX_TIM14_Init+0x94>)
 80026dc:	f240 2225 	movw	r2, #549	; 0x225
 80026e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <MX_TIM14_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_TIM14_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <MX_TIM14_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <MX_TIM14_Init+0x94>)
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026fa:	4815      	ldr	r0, [pc, #84]	; (8002750 <MX_TIM14_Init+0x94>)
 80026fc:	f007 ffdd 	bl	800a6ba <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002706:	f7ff f98d 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800270a:	4811      	ldr	r0, [pc, #68]	; (8002750 <MX_TIM14_Init+0x94>)
 800270c:	f008 f82c 	bl	800a768 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002716:	f7ff f985 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271a:	2360      	movs	r3, #96	; 0x60
 800271c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800271e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM14_Init+0x94>)
 8002734:	f008 fab6 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800273e:	f7ff f971 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM14_Init+0x94>)
 8002744:	f000 fb8c 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	24000898 	.word	0x24000898
 8002754:	40002000 	.word	0x40002000

08002758 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09c      	sub	sp, #112	; 0x70
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2234      	movs	r2, #52	; 0x34
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f00a fd66 	bl	800d264 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <MX_TIM15_Init+0x140>)
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <MX_TIM15_Init+0x144>)
 800279c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <MX_TIM15_Init+0x140>)
 80027a0:	f240 2225 	movw	r2, #549	; 0x225
 80027a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <MX_TIM15_Init+0x140>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <MX_TIM15_Init+0x140>)
 80027ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80027b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	4b38      	ldr	r3, [pc, #224]	; (8002898 <MX_TIM15_Init+0x140>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <MX_TIM15_Init+0x140>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <MX_TIM15_Init+0x140>)
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027c6:	4834      	ldr	r0, [pc, #208]	; (8002898 <MX_TIM15_Init+0x140>)
 80027c8:	f007 ff77 	bl	800a6ba <HAL_TIM_Base_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80027d2:	f7ff f927 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027da:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80027dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027e0:	4619      	mov	r1, r3
 80027e2:	482d      	ldr	r0, [pc, #180]	; (8002898 <MX_TIM15_Init+0x140>)
 80027e4:	f008 fb72 	bl	800aecc <HAL_TIM_ConfigClockSource>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80027ee:	f7ff f919 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80027f2:	4829      	ldr	r0, [pc, #164]	; (8002898 <MX_TIM15_Init+0x140>)
 80027f4:	f007 ffb8 	bl	800a768 <HAL_TIM_PWM_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80027fe:	f7ff f911 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800280a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800280e:	4619      	mov	r1, r3
 8002810:	4821      	ldr	r0, [pc, #132]	; (8002898 <MX_TIM15_Init+0x140>)
 8002812:	f009 f8c5 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 800281c:	f7ff f902 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002820:	2360      	movs	r3, #96	; 0x60
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002828:	2300      	movs	r3, #0
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	4814      	ldr	r0, [pc, #80]	; (8002898 <MX_TIM15_Init+0x140>)
 8002846:	f008 fa2d 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002850:	f7ff f8e8 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4807      	ldr	r0, [pc, #28]	; (8002898 <MX_TIM15_Init+0x140>)
 800287c:	f009 f92c 	bl	800bad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002886:	f7ff f8cd 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800288a:	4803      	ldr	r0, [pc, #12]	; (8002898 <MX_TIM15_Init+0x140>)
 800288c:	f000 fae8 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002890:	bf00      	nop
 8002892:	3770      	adds	r7, #112	; 0x70
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	24000684 	.word	0x24000684
 800289c:	40014000 	.word	0x40014000

080028a0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	615a      	str	r2, [r3, #20]
 80028b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ba:	463b      	mov	r3, r7
 80028bc:	2234      	movs	r2, #52	; 0x34
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00a fccf 	bl	800d264 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <MX_TIM16_Init+0xec>)
 80028c8:	4a31      	ldr	r2, [pc, #196]	; (8002990 <MX_TIM16_Init+0xf0>)
 80028ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <MX_TIM16_Init+0xec>)
 80028ce:	f240 2225 	movw	r2, #549	; 0x225
 80028d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <MX_TIM16_Init+0xec>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <MX_TIM16_Init+0xec>)
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <MX_TIM16_Init+0xec>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <MX_TIM16_Init+0xec>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <MX_TIM16_Init+0xec>)
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80028f2:	4826      	ldr	r0, [pc, #152]	; (800298c <MX_TIM16_Init+0xec>)
 80028f4:	f007 fee1 	bl	800a6ba <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80028fe:	f7ff f891 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002902:	4822      	ldr	r0, [pc, #136]	; (800298c <MX_TIM16_Init+0xec>)
 8002904:	f007 ff30 	bl	800a768 <HAL_TIM_PWM_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800290e:	f7ff f889 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002912:	2360      	movs	r3, #96	; 0x60
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002916:	f240 13f3 	movw	r3, #499	; 0x1f3
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002920:	2300      	movs	r3, #0
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002934:	2200      	movs	r2, #0
 8002936:	4619      	mov	r1, r3
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <MX_TIM16_Init+0xec>)
 800293a:	f008 f9b3 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002944:	f7ff f86e 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800296a:	463b      	mov	r3, r7
 800296c:	4619      	mov	r1, r3
 800296e:	4807      	ldr	r0, [pc, #28]	; (800298c <MX_TIM16_Init+0xec>)
 8002970:	f009 f8b2 	bl	800bad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800297a:	f7ff f853 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800297e:	4803      	ldr	r0, [pc, #12]	; (800298c <MX_TIM16_Init+0xec>)
 8002980:	f000 fa6e 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002984:	bf00      	nop
 8002986:	3750      	adds	r7, #80	; 0x50
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	24000930 	.word	0x24000930
 8002990:	40014400 	.word	0x40014400

08002994 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b094      	sub	sp, #80	; 0x50
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800299a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ae:	463b      	mov	r3, r7
 80029b0:	2234      	movs	r2, #52	; 0x34
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00a fc55 	bl	800d264 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029bc:	4a31      	ldr	r2, [pc, #196]	; (8002a84 <MX_TIM17_Init+0xf0>)
 80029be:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029c2:	f240 2225 	movw	r2, #549	; 0x225
 80029c6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1-1;
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80029e6:	4826      	ldr	r0, [pc, #152]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029e8:	f007 fe67 	bl	800a6ba <HAL_TIM_Base_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80029f2:	f7ff f817 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80029f6:	4822      	ldr	r0, [pc, #136]	; (8002a80 <MX_TIM17_Init+0xec>)
 80029f8:	f007 feb6 	bl	800a768 <HAL_TIM_PWM_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002a02:	f7ff f80f 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a06:	2360      	movs	r3, #96	; 0x60
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002a0a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a14:	2300      	movs	r3, #0
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4814      	ldr	r0, [pc, #80]	; (8002a80 <MX_TIM17_Init+0xec>)
 8002a2e:	f008 f939 	bl	800aca4 <HAL_TIM_PWM_ConfigChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002a38:	f7fe fff4 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4619      	mov	r1, r3
 8002a62:	4807      	ldr	r0, [pc, #28]	; (8002a80 <MX_TIM17_Init+0xec>)
 8002a64:	f009 f838 	bl	800bad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002a6e:	f7fe ffd9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002a72:	4803      	ldr	r0, [pc, #12]	; (8002a80 <MX_TIM17_Init+0xec>)
 8002a74:	f000 f9f4 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002a78:	bf00      	nop
 8002a7a:	3750      	adds	r7, #80	; 0x50
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	240006d0 	.word	0x240006d0
 8002a84:	40014800 	.word	0x40014800

08002a88 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <MX_TIM23_Init+0x9c>)
 8002aaa:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002aae:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002ab2:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002ace:	4814      	ldr	r0, [pc, #80]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002ad0:	f007 fdf3 	bl	800a6ba <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8002ada:	f7fe ffa3 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480d      	ldr	r0, [pc, #52]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002aec:	f008 f9ee 	bl	800aecc <HAL_TIM_ConfigClockSource>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8002af6:	f7fe ff95 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <MX_TIM23_Init+0x98>)
 8002b08:	f008 ff4a 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002b12:	f7fe ff87 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2400084c 	.word	0x2400084c
 8002b24:	4000e000 	.word	0x4000e000

08002b28 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <MX_TIM24_Init+0x9c>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 27500 - 1;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b4e:	f646 326b 	movw	r2, #27499	; 0x6b6b
 8002b52:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 10000 - 1;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b60:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002b6e:	4814      	ldr	r0, [pc, #80]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b70:	f007 fda3 	bl	800a6ba <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002b7a:	f7fe ff53 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002b8c:	f008 f99e 	bl	800aecc <HAL_TIM_ConfigClockSource>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002b96:	f7fe ff45 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <MX_TIM24_Init+0x98>)
 8002ba8:	f008 fefa 	bl	800b9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002bb2:	f7fe ff37 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	240005ec 	.word	0x240005ec
 8002bc4:	4000e400 	.word	0x4000e400

08002bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b094      	sub	sp, #80	; 0x50
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a91      	ldr	r2, [pc, #580]	; (8002e2c <HAL_TIM_Base_MspInit+0x264>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10f      	bne.n	8002c0a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bea:	4b91      	ldr	r3, [pc, #580]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf0:	4a8f      	ldr	r2, [pc, #572]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002c08:	e10c      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d10f      	bne.n	8002c34 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c14:	4b86      	ldr	r3, [pc, #536]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c1a:	4a85      	ldr	r2, [pc, #532]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c24:	4b82      	ldr	r3, [pc, #520]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c32:	e0f7      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_TIM_Base_MspInit+0x26c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10f      	bne.n	8002c5e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c4e:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c5c:	e0e2      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_TIM_Base_MspInit+0x270>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c68:	4b71      	ldr	r3, [pc, #452]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c6e:	4a70      	ldr	r2, [pc, #448]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c78:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c86:	e0cd      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM12)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6b      	ldr	r2, [pc, #428]	; (8002e3c <HAL_TIM_Base_MspInit+0x274>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10f      	bne.n	8002cb2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c92:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cb0:	e0b8      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM13)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a62      	ldr	r2, [pc, #392]	; (8002e40 <HAL_TIM_Base_MspInit+0x278>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10f      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cda:	e0a3      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM14)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_TIM_Base_MspInit+0x27c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10f      	bne.n	8002d06 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ce6:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	6a3b      	ldr	r3, [r7, #32]
}
 8002d04:	e08e      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM15)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a4f      	ldr	r2, [pc, #316]	; (8002e48 <HAL_TIM_Base_MspInit+0x280>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d12e      	bne.n	8002d6e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d64:	4619      	mov	r1, r3
 8002d66:	4839      	ldr	r0, [pc, #228]	; (8002e4c <HAL_TIM_Base_MspInit+0x284>)
 8002d68:	f004 f994 	bl	8007094 <HAL_GPIO_Init>
}
 8002d6c:	e05a      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM16)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <HAL_TIM_Base_MspInit+0x288>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10f      	bne.n	8002d98 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
}
 8002d96:	e045      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM17)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <HAL_TIM_Base_MspInit+0x28c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10f      	bne.n	8002dc2 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
}
 8002dc0:	e030      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM23)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <HAL_TIM_Base_MspInit+0x290>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10f      	bne.n	8002dec <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002dce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002dde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	e01b      	b.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
  else if(tim_baseHandle->Instance==TIM24)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_TIM_Base_MspInit+0x294>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d116      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002df8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e02:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_TIM_Base_MspInit+0x268>)
 8002e08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	20a2      	movs	r0, #162	; 0xa2
 8002e1a:	f002 fc46 	bl	80056aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8002e1e:	20a2      	movs	r0, #162	; 0xa2
 8002e20:	f002 fc5d 	bl	80056de <HAL_NVIC_EnableIRQ>
}
 8002e24:	bf00      	nop
 8002e26:	3750      	adds	r7, #80	; 0x50
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	58024400 	.word	0x58024400
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40001800 	.word	0x40001800
 8002e40:	40001c00 	.word	0x40001c00
 8002e44:	40002000 	.word	0x40002000
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	58020000 	.word	0x58020000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	4000e000 	.word	0x4000e000
 8002e5c:	4000e400 	.word	0x4000e400

08002e60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b092      	sub	sp, #72	; 0x48
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4aa7      	ldr	r2, [pc, #668]	; (800311c <HAL_TIM_MspPostInit+0x2bc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d120      	bne.n	8002ec4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e82:	4ba7      	ldr	r3, [pc, #668]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	4aa5      	ldr	r2, [pc, #660]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e92:	4ba3      	ldr	r3, [pc, #652]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4899      	ldr	r0, [pc, #612]	; (8003124 <HAL_TIM_MspPostInit+0x2c4>)
 8002ebe:	f004 f8e9 	bl	8007094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002ec2:	e16c      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d11f      	bne.n	8002f0e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed4:	4a92      	ldr	r2, [pc, #584]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ede:	4b90      	ldr	r3, [pc, #576]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eec:	2301      	movs	r3, #1
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002efc:	2301      	movs	r3, #1
 8002efe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f04:	4619      	mov	r1, r3
 8002f06:	4888      	ldr	r0, [pc, #544]	; (8003128 <HAL_TIM_MspPostInit+0x2c8>)
 8002f08:	f004 f8c4 	bl	8007094 <HAL_GPIO_Init>
}
 8002f0c:	e147      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a86      	ldr	r2, [pc, #536]	; (800312c <HAL_TIM_MspPostInit+0x2cc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d11f      	bne.n	8002f58 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1e:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f28:	4b7d      	ldr	r3, [pc, #500]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f36:	2340      	movs	r3, #64	; 0x40
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f46:	2302      	movs	r3, #2
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4877      	ldr	r0, [pc, #476]	; (8003130 <HAL_TIM_MspPostInit+0x2d0>)
 8002f52:	f004 f89f 	bl	8007094 <HAL_GPIO_Init>
}
 8002f56:	e122      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a75      	ldr	r2, [pc, #468]	; (8003134 <HAL_TIM_MspPostInit+0x2d4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d120      	bne.n	8002fa4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f68:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f92:	2302      	movs	r3, #2
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4866      	ldr	r0, [pc, #408]	; (8003138 <HAL_TIM_MspPostInit+0x2d8>)
 8002f9e:	f004 f879 	bl	8007094 <HAL_GPIO_Init>
}
 8002fa2:	e0fc      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM12)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a64      	ldr	r2, [pc, #400]	; (800313c <HAL_TIM_MspPostInit+0x2dc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d120      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fbe:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4855      	ldr	r0, [pc, #340]	; (8003140 <HAL_TIM_MspPostInit+0x2e0>)
 8002fea:	f004 f853 	bl	8007094 <HAL_GPIO_Init>
}
 8002fee:	e0d6      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM13)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_TIM_MspPostInit+0x2e4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11f      	bne.n	800303a <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8002ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003000:	4a47      	ldr	r2, [pc, #284]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003028:	2309      	movs	r3, #9
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003030:	4619      	mov	r1, r3
 8003032:	483d      	ldr	r0, [pc, #244]	; (8003128 <HAL_TIM_MspPostInit+0x2c8>)
 8003034:	f004 f82e 	bl	8007094 <HAL_GPIO_Init>
}
 8003038:	e0b1      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM14)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a42      	ldr	r2, [pc, #264]	; (8003148 <HAL_TIM_MspPostInit+0x2e8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d11f      	bne.n	8003084 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8003046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304a:	4a35      	ldr	r2, [pc, #212]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8003056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003072:	2309      	movs	r3, #9
 8003074:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800307a:	4619      	mov	r1, r3
 800307c:	482a      	ldr	r0, [pc, #168]	; (8003128 <HAL_TIM_MspPostInit+0x2c8>)
 800307e:	f004 f809 	bl	8007094 <HAL_GPIO_Init>
}
 8003082:	e08c      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM15)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_TIM_MspPostInit+0x2ec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11f      	bne.n	80030ce <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8003090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 8003096:	f043 0310 	orr.w	r3, r3, #16
 800309a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030ac:	2320      	movs	r3, #32
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80030bc:	2304      	movs	r3, #4
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030c4:	4619      	mov	r1, r3
 80030c6:	4817      	ldr	r0, [pc, #92]	; (8003124 <HAL_TIM_MspPostInit+0x2c4>)
 80030c8:	f003 ffe4 	bl	8007094 <HAL_GPIO_Init>
}
 80030cc:	e067      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
  else if(timHandle->Instance==TIM16)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_TIM_MspPostInit+0x2f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d13d      	bne.n	8003154 <HAL_TIM_MspPostInit+0x2f4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 80030da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_TIM_MspPostInit+0x2c0>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003108:	2301      	movs	r3, #1
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003110:	4619      	mov	r1, r3
 8003112:	480b      	ldr	r0, [pc, #44]	; (8003140 <HAL_TIM_MspPostInit+0x2e0>)
 8003114:	f003 ffbe 	bl	8007094 <HAL_GPIO_Init>
}
 8003118:	e041      	b.n	800319e <HAL_TIM_MspPostInit+0x33e>
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	58024400 	.word	0x58024400
 8003124:	58021000 	.word	0x58021000
 8003128:	58020000 	.word	0x58020000
 800312c:	40000400 	.word	0x40000400
 8003130:	58020800 	.word	0x58020800
 8003134:	40000800 	.word	0x40000800
 8003138:	58020c00 	.word	0x58020c00
 800313c:	40001800 	.word	0x40001800
 8003140:	58020400 	.word	0x58020400
 8003144:	40001c00 	.word	0x40001c00
 8003148:	40002000 	.word	0x40002000
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
  else if(timHandle->Instance==TIM17)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_TIM_MspPostInit+0x348>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d11f      	bne.n	800319e <HAL_TIM_MspPostInit+0x33e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_TIM_MspPostInit+0x34c>)
 8003160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_TIM_MspPostInit+0x34c>)
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_TIM_MspPostInit+0x34c>)
 8003170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800317c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800318e:	2301      	movs	r3, #1
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <HAL_TIM_MspPostInit+0x350>)
 800319a:	f003 ff7b 	bl	8007094 <HAL_GPIO_Init>
}
 800319e:	bf00      	nop
 80031a0:	3748      	adds	r7, #72	; 0x48
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40014800 	.word	0x40014800
 80031ac:	58024400 	.word	0x58024400
 80031b0:	58020400 	.word	0x58020400

080031b4 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <MX_UART4_Init+0x90>)
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <MX_UART4_Init+0x94>)
 80031bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <MX_UART4_Init+0x90>)
 80031c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <MX_UART4_Init+0x90>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <MX_UART4_Init+0x90>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <MX_UART4_Init+0x90>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <MX_UART4_Init+0x90>)
 80031da:	220c      	movs	r2, #12
 80031dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <MX_UART4_Init+0x90>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <MX_UART4_Init+0x90>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <MX_UART4_Init+0x90>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <MX_UART4_Init+0x90>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <MX_UART4_Init+0x90>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80031fc:	4811      	ldr	r0, [pc, #68]	; (8003244 <MX_UART4_Init+0x90>)
 80031fe:	f008 fd29 	bl	800bc54 <HAL_UART_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003208:	f7fe fc0c 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320c:	2100      	movs	r1, #0
 800320e:	480d      	ldr	r0, [pc, #52]	; (8003244 <MX_UART4_Init+0x90>)
 8003210:	f009 ff26 	bl	800d060 <HAL_UARTEx_SetTxFifoThreshold>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800321a:	f7fe fc03 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800321e:	2100      	movs	r1, #0
 8003220:	4808      	ldr	r0, [pc, #32]	; (8003244 <MX_UART4_Init+0x90>)
 8003222:	f009 ff5b 	bl	800d0dc <HAL_UARTEx_SetRxFifoThreshold>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800322c:	f7fe fbfa 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003230:	4804      	ldr	r0, [pc, #16]	; (8003244 <MX_UART4_Init+0x90>)
 8003232:	f009 fedc 	bl	800cfee <HAL_UARTEx_DisableFifoMode>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800323c:	f7fe fbf2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	24000b14 	.word	0x24000b14
 8003248:	40004c00 	.word	0x40004c00

0800324c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <MX_UART5_Init+0x90>)
 8003252:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <MX_UART5_Init+0x94>)
 8003254:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <MX_UART5_Init+0x90>)
 8003258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800325c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800325e:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <MX_UART5_Init+0x90>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <MX_UART5_Init+0x90>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <MX_UART5_Init+0x90>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <MX_UART5_Init+0x90>)
 8003272:	220c      	movs	r2, #12
 8003274:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003276:	4b19      	ldr	r3, [pc, #100]	; (80032dc <MX_UART5_Init+0x90>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <MX_UART5_Init+0x90>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <MX_UART5_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <MX_UART5_Init+0x90>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <MX_UART5_Init+0x90>)
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003294:	4811      	ldr	r0, [pc, #68]	; (80032dc <MX_UART5_Init+0x90>)
 8003296:	f008 fcdd 	bl	800bc54 <HAL_UART_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80032a0:	f7fe fbc0 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a4:	2100      	movs	r1, #0
 80032a6:	480d      	ldr	r0, [pc, #52]	; (80032dc <MX_UART5_Init+0x90>)
 80032a8:	f009 feda 	bl	800d060 <HAL_UARTEx_SetTxFifoThreshold>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80032b2:	f7fe fbb7 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032b6:	2100      	movs	r1, #0
 80032b8:	4808      	ldr	r0, [pc, #32]	; (80032dc <MX_UART5_Init+0x90>)
 80032ba:	f009 ff0f 	bl	800d0dc <HAL_UARTEx_SetRxFifoThreshold>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80032c4:	f7fe fbae 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <MX_UART5_Init+0x90>)
 80032ca:	f009 fe90 	bl	800cfee <HAL_UARTEx_DisableFifoMode>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80032d4:	f7fe fba6 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	24000a84 	.word	0x24000a84
 80032e0:	40005000 	.word	0x40005000

080032e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <MX_USART2_UART_Init+0x90>)
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <MX_USART2_UART_Init+0x94>)
 80032ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <MX_USART2_UART_Init+0x90>)
 80032f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <MX_USART2_UART_Init+0x90>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <MX_USART2_UART_Init+0x90>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <MX_USART2_UART_Init+0x90>)
 800330a:	220c      	movs	r2, #12
 800330c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003316:	2200      	movs	r2, #0
 8003318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <MX_USART2_UART_Init+0x90>)
 800331c:	2200      	movs	r2, #0
 800331e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003322:	2200      	movs	r2, #0
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003328:	2200      	movs	r2, #0
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800332c:	4811      	ldr	r0, [pc, #68]	; (8003374 <MX_USART2_UART_Init+0x90>)
 800332e:	f008 fc91 	bl	800bc54 <HAL_UART_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003338:	f7fe fb74 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800333c:	2100      	movs	r1, #0
 800333e:	480d      	ldr	r0, [pc, #52]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003340:	f009 fe8e 	bl	800d060 <HAL_UARTEx_SetTxFifoThreshold>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800334a:	f7fe fb6b 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800334e:	2100      	movs	r1, #0
 8003350:	4808      	ldr	r0, [pc, #32]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003352:	f009 fec3 	bl	800d0dc <HAL_UARTEx_SetRxFifoThreshold>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800335c:	f7fe fb62 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003360:	4804      	ldr	r0, [pc, #16]	; (8003374 <MX_USART2_UART_Init+0x90>)
 8003362:	f009 fe44 	bl	800cfee <HAL_UARTEx_DisableFifoMode>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800336c:	f7fe fb5a 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	24000ba4 	.word	0x24000ba4
 8003378:	40004400 	.word	0x40004400

0800337c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <MX_USART3_UART_Init+0x90>)
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <MX_USART3_UART_Init+0x94>)
 8003384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <MX_USART3_UART_Init+0x90>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <MX_USART3_UART_Init+0x90>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <MX_USART3_UART_Init+0x90>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <MX_USART3_UART_Init+0x90>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c4:	4811      	ldr	r0, [pc, #68]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033c6:	f008 fc45 	bl	800bc54 <HAL_UART_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80033d0:	f7fe fb28 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033d4:	2100      	movs	r1, #0
 80033d6:	480d      	ldr	r0, [pc, #52]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033d8:	f009 fe42 	bl	800d060 <HAL_UARTEx_SetTxFifoThreshold>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80033e2:	f7fe fb1f 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e6:	2100      	movs	r1, #0
 80033e8:	4808      	ldr	r0, [pc, #32]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033ea:	f009 fe77 	bl	800d0dc <HAL_UARTEx_SetRxFifoThreshold>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80033f4:	f7fe fb16 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80033f8:	4804      	ldr	r0, [pc, #16]	; (800340c <MX_USART3_UART_Init+0x90>)
 80033fa:	f009 fdf8 	bl	800cfee <HAL_UARTEx_DisableFifoMode>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003404:	f7fe fb0e 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	240009f4 	.word	0x240009f4
 8003410:	40004800 	.word	0x40004800

08003414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b0bc      	sub	sp, #240	; 0xf0
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800342c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003430:	22b4      	movs	r2, #180	; 0xb4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f009 ff15 	bl	800d264 <memset>
  if(uartHandle->Instance==UART4)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4aa8      	ldr	r2, [pc, #672]	; (80036e0 <HAL_UART_MspInit+0x2cc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d143      	bne.n	80034cc <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003444:	2302      	movs	r3, #2
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800344e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003452:	4618      	mov	r0, r3
 8003454:	f004 ff7e 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800345e:	f7fe fae1 	bl	8001a24 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003462:	4ba0      	ldr	r3, [pc, #640]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003468:	4a9e      	ldr	r2, [pc, #632]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 800346a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800346e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003472:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003480:	4b98      	ldr	r3, [pc, #608]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003486:	4a97      	ldr	r2, [pc, #604]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003490:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800349e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80034b8:	2306      	movs	r3, #6
 80034ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034c2:	4619      	mov	r1, r3
 80034c4:	4888      	ldr	r0, [pc, #544]	; (80036e8 <HAL_UART_MspInit+0x2d4>)
 80034c6:	f003 fde5 	bl	8007094 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034ca:	e105      	b.n	80036d8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==UART5)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a86      	ldr	r2, [pc, #536]	; (80036ec <HAL_UART_MspInit+0x2d8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d143      	bne.n	800355e <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80034d6:	2302      	movs	r3, #2
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e4:	4618      	mov	r0, r3
 80034e6:	f004 ff35 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80034f0:	f7fe fa98 	bl	8001a24 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80034f4:	4b7b      	ldr	r3, [pc, #492]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80034f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fa:	4a7a      	ldr	r2, [pc, #488]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80034fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003500:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003504:	4b77      	ldr	r3, [pc, #476]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	4b74      	ldr	r3, [pc, #464]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003518:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003522:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003530:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800354a:	230e      	movs	r3, #14
 800354c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003554:	4619      	mov	r1, r3
 8003556:	4866      	ldr	r0, [pc, #408]	; (80036f0 <HAL_UART_MspInit+0x2dc>)
 8003558:	f003 fd9c 	bl	8007094 <HAL_GPIO_Init>
}
 800355c:	e0bc      	b.n	80036d8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a64      	ldr	r2, [pc, #400]	; (80036f4 <HAL_UART_MspInit+0x2e0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d16f      	bne.n	8003648 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003568:	2302      	movs	r3, #2
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003576:	4618      	mov	r0, r3
 8003578:	f004 feec 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8003582:	f7fe fa4f 	bl	8001a24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800358c:	4a55      	ldr	r2, [pc, #340]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003596:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a4:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80035a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035aa:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80035b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035c2:	2360      	movs	r3, #96	; 0x60
 80035c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035da:	2307      	movs	r3, #7
 80035dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035e4:	4619      	mov	r1, r3
 80035e6:	4844      	ldr	r0, [pc, #272]	; (80036f8 <HAL_UART_MspInit+0x2e4>)
 80035e8:	f003 fd54 	bl	8007094 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 80035ee:	4a44      	ldr	r2, [pc, #272]	; (8003700 <HAL_UART_MspInit+0x2ec>)
 80035f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80035f2:	4b42      	ldr	r3, [pc, #264]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 80035f4:	222b      	movs	r2, #43	; 0x2b
 80035f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800362a:	4834      	ldr	r0, [pc, #208]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 800362c:	f002 f872 	bl	8005714 <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003636:	f7fe f9f5 	bl	8001a24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 800363e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <HAL_UART_MspInit+0x2e8>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003646:	e047      	b.n	80036d8 <HAL_UART_MspInit+0x2c4>
  else if(uartHandle->Instance==USART3)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <HAL_UART_MspInit+0x2f0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d142      	bne.n	80036d8 <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003652:	2302      	movs	r3, #2
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003660:	4618      	mov	r0, r3
 8003662:	f004 fe77 	bl	8008354 <HAL_RCCEx_PeriphCLKConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 800366c:	f7fe f9da 	bl	8001a24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003670:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_UART_MspInit+0x2d0>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036c6:	2307      	movs	r3, #7
 80036c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036d0:	4619      	mov	r1, r3
 80036d2:	4807      	ldr	r0, [pc, #28]	; (80036f0 <HAL_UART_MspInit+0x2dc>)
 80036d4:	f003 fcde 	bl	8007094 <HAL_GPIO_Init>
}
 80036d8:	bf00      	nop
 80036da:	37f0      	adds	r7, #240	; 0xf0
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40004c00 	.word	0x40004c00
 80036e4:	58024400 	.word	0x58024400
 80036e8:	58020000 	.word	0x58020000
 80036ec:	40005000 	.word	0x40005000
 80036f0:	58020400 	.word	0x58020400
 80036f4:	40004400 	.word	0x40004400
 80036f8:	58020c00 	.word	0x58020c00
 80036fc:	2400097c 	.word	0x2400097c
 8003700:	40020010 	.word	0x40020010
 8003704:	40004800 	.word	0x40004800

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003740 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800370c:	f7fe fc96 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003712:	490d      	ldr	r1, [pc, #52]	; (8003748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003718:	e002      	b.n	8003720 <LoopCopyDataInit>

0800371a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800371a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800371c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371e:	3304      	adds	r3, #4

08003720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003724:	d3f9      	bcc.n	800371a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003728:	4c0a      	ldr	r4, [pc, #40]	; (8003754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800372a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800372c:	e001      	b.n	8003732 <LoopFillZerobss>

0800372e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003730:	3204      	adds	r2, #4

08003732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003734:	d3fb      	bcc.n	800372e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003736:	f009 fd63 	bl	800d200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373a:	f7fd ff9d 	bl	8001678 <main>
  bx  lr
 800373e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003740:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003744:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003748:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800374c:	0800ff2c 	.word	0x0800ff2c
  ldr r2, =_sbss
 8003750:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8003754:	24000c48 	.word	0x24000c48

08003758 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>
	...

0800375c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003762:	2003      	movs	r0, #3
 8003764:	f001 ff96 	bl	8005694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003768:	f004 fc02 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_Init+0x68>)
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	4913      	ldr	r1, [pc, #76]	; (80037c8 <HAL_Init+0x6c>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_Init+0x68>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_Init+0x6c>)
 8003790:	5cd3      	ldrb	r3, [r2, r3]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_Init+0x70>)
 800379e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <HAL_Init+0x74>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a6:	2000      	movs	r0, #0
 80037a8:	f000 f814 	bl	80037d4 <HAL_InitTick>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e002      	b.n	80037bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037b6:	f7fe fb17 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	58024400 	.word	0x58024400
 80037c8:	0800faf8 	.word	0x0800faf8
 80037cc:	24000010 	.word	0x24000010
 80037d0:	2400000c 	.word	0x2400000c

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <HAL_InitTick+0x60>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e021      	b.n	800382c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_InitTick+0x64>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_InitTick+0x60>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 ff7b 	bl	80056fa <HAL_SYSTICK_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00e      	b.n	800382c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d80a      	bhi.n	800382a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003814:	2200      	movs	r2, #0
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	f001 ff45 	bl	80056aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003820:	4a06      	ldr	r2, [pc, #24]	; (800383c <HAL_InitTick+0x68>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	24000018 	.word	0x24000018
 8003838:	2400000c 	.word	0x2400000c
 800383c:	24000014 	.word	0x24000014

08003840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	24000018 	.word	0x24000018
 8003864:	24000c34 	.word	0x24000c34

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	24000c34 	.word	0x24000c34

08003880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3360      	adds	r3, #96	; 0x60
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a10      	ldr	r2, [pc, #64]	; (8003948 <LL_ADC_SetOffset+0x60>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10b      	bne.n	8003924 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003922:	e00b      	b.n	800393c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	431a      	orrs	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	58026000 	.word	0x58026000

0800394c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3360      	adds	r3, #96	; 0x60
 800395a:	461a      	mov	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	611a      	str	r2, [r3, #16]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3360      	adds	r3, #96	; 0x60
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	601a      	str	r2, [r3, #0]
  }
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	58026000 	.word	0x58026000

080039f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <LL_ADC_SetOffsetSaturation+0x40>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10e      	bne.n	8003a22 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3360      	adds	r3, #96	; 0x60
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	58026000 	.word	0x58026000

08003a34 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <LL_ADC_SetOffsetSign+0x40>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10e      	bne.n	8003a66 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3360      	adds	r3, #96	; 0x60
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	58026000 	.word	0x58026000

08003a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3360      	adds	r3, #96	; 0x60
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <LL_ADC_SetOffsetState+0x50>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003aaa:	e007      	b.n	8003abc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58026000 	.word	0x58026000

08003acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3330      	adds	r3, #48	; 0x30
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	4413      	add	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	211f      	movs	r1, #31
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	f003 011f 	and.w	r1, r3, #31
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	4413      	add	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0d1b      	lsrs	r3, r3, #20
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2107      	movs	r1, #7
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	0d1b      	lsrs	r3, r3, #20
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d115      	bne.n	8003c08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	43db      	mvns	r3, r3
 8003bea:	401a      	ands	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0318 	and.w	r3, r3, #24
 8003bf2:	4914      	ldr	r1, [pc, #80]	; (8003c44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003bf4:	40d9      	lsrs	r1, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003c06:	e014      	b.n	8003c32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0318 	and.w	r3, r3, #24
 8003c1e:	4909      	ldr	r1, [pc, #36]	; (8003c44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c20:	40d9      	lsrs	r1, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	400b      	ands	r3, r1
 8003c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	58026000 	.word	0x58026000
 8003c44:	000fffff 	.word	0x000fffff

08003c48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 031f 	and.w	r3, r3, #31
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6093      	str	r3, [r2, #8]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	5fffffc0 	.word	0x5fffffc0

08003ca4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	6fffffc0 	.word	0x6fffffc0

08003cf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d08:	d101      	bne.n	8003d0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_IsEnabled+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_IsEnabled+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d101      	bne.n	8003d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d101      	bne.n	8003d80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1ee      	b.n	8004188 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd fafd 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff67 	bl	8003ca4 <LL_ADC_IsDeepPowerDownEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff4d 	bl	8003c80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff82 	bl	8003cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff66 	bl	8003ccc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e00:	4b8e      	ldr	r3, [pc, #568]	; (800403c <HAL_ADC_Init+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	4a8e      	ldr	r2, [pc, #568]	; (8004040 <HAL_ADC_Init+0x2b0>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff65 	bl	8003cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff76 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8003e56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8188 	bne.w	8004176 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 8184 	bne.w	8004176 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e76:	f043 0202 	orr.w	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff4a 	bl	8003d1c <LL_ADC_IsEnabled>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d136      	bne.n	8003efc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6c      	ldr	r2, [pc, #432]	; (8004044 <HAL_ADC_Init+0x2b4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADC_Init+0x112>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6a      	ldr	r2, [pc, #424]	; (8004048 <HAL_ADC_Init+0x2b8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_ADC_Init+0x130>
 8003ea2:	4868      	ldr	r0, [pc, #416]	; (8004044 <HAL_ADC_Init+0x2b4>)
 8003ea4:	f7ff ff3a 	bl	8003d1c <LL_ADC_IsEnabled>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4867      	ldr	r0, [pc, #412]	; (8004048 <HAL_ADC_Init+0x2b8>)
 8003eac:	f7ff ff36 	bl	8003d1c <LL_ADC_IsEnabled>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4323      	orrs	r3, r4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e008      	b.n	8003ed2 <HAL_ADC_Init+0x142>
 8003ec0:	4862      	ldr	r0, [pc, #392]	; (800404c <HAL_ADC_Init+0x2bc>)
 8003ec2:	f7ff ff2b 	bl	8003d1c <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5a      	ldr	r2, [pc, #360]	; (8004044 <HAL_ADC_Init+0x2b4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_ADC_Init+0x15a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_ADC_Init+0x2b8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_Init+0x15e>
 8003eea:	4a59      	ldr	r2, [pc, #356]	; (8004050 <HAL_ADC_Init+0x2c0>)
 8003eec:	e000      	b.n	8003ef0 <HAL_ADC_Init+0x160>
 8003eee:	4a59      	ldr	r2, [pc, #356]	; (8004054 <HAL_ADC_Init+0x2c4>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7ff fcc2 	bl	8003880 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_ADC_Init+0x2bc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d129      	bne.n	8003f5a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f10:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003f16:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d013      	beq.n	8003f48 <HAL_ADC_Init+0x1b8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d00d      	beq.n	8003f44 <HAL_ADC_Init+0x1b4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b1c      	cmp	r3, #28
 8003f2e:	d007      	beq.n	8003f40 <HAL_ADC_Init+0x1b0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b18      	cmp	r3, #24
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_Init+0x1ac>
 8003f38:	2318      	movs	r3, #24
 8003f3a:	e006      	b.n	8003f4a <HAL_ADC_Init+0x1ba>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e004      	b.n	8003f4a <HAL_ADC_Init+0x1ba>
 8003f40:	2310      	movs	r3, #16
 8003f42:	e002      	b.n	8003f4a <HAL_ADC_Init+0x1ba>
 8003f44:	2308      	movs	r3, #8
 8003f46:	e000      	b.n	8003f4a <HAL_ADC_Init+0x1ba>
 8003f48:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003f4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e00e      	b.n	8003f78 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7e5b      	ldrb	r3, [r3, #25]
 8003f5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f64:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d106      	bne.n	8003f90 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	3b01      	subs	r3, #1
 8003f88:	045b      	lsls	r3, r3, #17
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_ADC_Init+0x2bc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d115      	bne.n	8003fe2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_ADC_Init+0x2c8>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	611a      	str	r2, [r3, #16]
 8003fe0:	e009      	b.n	8003ff6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_ADC_Init+0x2cc>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fea1 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8004000:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff feae 	bl	8003d68 <LL_ADC_INJ_IsConversionOngoing>
 800400c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 808e 	bne.w	8004132 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 808a 	bne.w	8004132 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_ADC_Init+0x2bc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d11b      	bne.n	8004060 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7e1b      	ldrb	r3, [r3, #24]
 800402c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004034:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e018      	b.n	800406e <HAL_ADC_Init+0x2de>
 800403c:	2400000c 	.word	0x2400000c
 8004040:	053e2d63 	.word	0x053e2d63
 8004044:	40022000 	.word	0x40022000
 8004048:	40022100 	.word	0x40022100
 800404c:	58026000 	.word	0x58026000
 8004050:	40022300 	.word	0x40022300
 8004054:	58026300 	.word	0x58026300
 8004058:	fff04007 	.word	0xfff04007
 800405c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7e1b      	ldrb	r3, [r3, #24]
 8004064:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	4b46      	ldr	r3, [pc, #280]	; (8004190 <HAL_ADC_Init+0x400>)
 8004076:	4013      	ands	r3, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	69b9      	ldr	r1, [r7, #24]
 800407e:	430b      	orrs	r3, r1
 8004080:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004088:	2b01      	cmp	r3, #1
 800408a:	d137      	bne.n	80040fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <HAL_ADC_Init+0x404>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d116      	bne.n	80040ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_ADC_Init+0x408>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040ba:	430a      	orrs	r2, r1
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	611a      	str	r2, [r3, #16]
 80040c8:	e020      	b.n	800410c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_ADC_Init+0x40c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040d8:	3a01      	subs	r2, #1
 80040da:	0411      	lsls	r1, r2, #16
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040e6:	4311      	orrs	r1, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040ec:	430a      	orrs	r2, r1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	611a      	str	r2, [r3, #16]
 80040fa:	e007      	b.n	800410c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_ADC_Init+0x404>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d002      	beq.n	8004132 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 ffbb 	bl	80050a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10c      	bne.n	8004154 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f023 010f 	bic.w	r1, r3, #15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
 8004152:	e007      	b.n	8004164 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 020f 	bic.w	r2, r2, #15
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
 8004174:	e007      	b.n	8004186 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004186:	7ffb      	ldrb	r3, [r7, #31]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3724      	adds	r7, #36	; 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	ffffbffc 	.word	0xffffbffc
 8004194:	58026000 	.word	0x58026000
 8004198:	fc00f81f 	.word	0xfc00f81f
 800419c:	fc00f81e 	.word	0xfc00f81e

080041a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a87      	ldr	r2, [pc, #540]	; (80043e0 <HAL_ADC_IRQHandler+0x240>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_ADC_IRQHandler+0x30>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a86      	ldr	r2, [pc, #536]	; (80043e4 <HAL_ADC_IRQHandler+0x244>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_IRQHandler+0x34>
 80041d0:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_ADC_IRQHandler+0x248>)
 80041d2:	e000      	b.n	80041d6 <HAL_ADC_IRQHandler+0x36>
 80041d4:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_ADC_IRQHandler+0x24c>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fd36 	bl	8003c48 <LL_ADC_GetMultimode>
 80041dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <HAL_ADC_IRQHandler+0x78>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004202:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f001 f886 	bl	800531c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2202      	movs	r2, #2
 8004216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_ADC_IRQHandler+0x8c>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8083 	beq.w	800433e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d07d      	beq.n	800433e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fc34 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d062      	beq.n	8004330 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5d      	ldr	r2, [pc, #372]	; (80043e4 <HAL_ADC_IRQHandler+0x244>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d002      	beq.n	800427a <HAL_ADC_IRQHandler+0xda>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	e000      	b.n	800427c <HAL_ADC_IRQHandler+0xdc>
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_ADC_IRQHandler+0x240>)
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	4293      	cmp	r3, r2
 8004282:	d008      	beq.n	8004296 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b05      	cmp	r3, #5
 800428e:	d002      	beq.n	8004296 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b09      	cmp	r3, #9
 8004294:	d104      	bne.n	80042a0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	e00c      	b.n	80042ba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_ADC_IRQHandler+0x244>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d002      	beq.n	80042b0 <HAL_ADC_IRQHandler+0x110>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e000      	b.n	80042b2 <HAL_ADC_IRQHandler+0x112>
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_ADC_IRQHandler+0x240>)
 80042b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d135      	bne.n	8004330 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d12e      	bne.n	8004330 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fd33 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11a      	bne.n	8004318 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020c 	bic.w	r2, r2, #12
 80042f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d112      	bne.n	8004330 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	f043 0201 	orr.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
 8004316:	e00b      	b.n	8004330 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	f043 0210 	orr.w	r2, r3, #16
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f96f 	bl	8004614 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	220c      	movs	r2, #12
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_ADC_IRQHandler+0x1b2>
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a0 	beq.w	800449e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 809a 	beq.w	800449e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fbdf 	bl	8003b4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800438c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fb9a 	bl	8003acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004398:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <HAL_ADC_IRQHandler+0x244>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d002      	beq.n	80043aa <HAL_ADC_IRQHandler+0x20a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e000      	b.n	80043ac <HAL_ADC_IRQHandler+0x20c>
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_ADC_IRQHandler+0x240>)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d008      	beq.n	80043c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d002      	beq.n	80043c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b07      	cmp	r3, #7
 80043c4:	d104      	bne.n	80043d0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e014      	b.n	80043fa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a03      	ldr	r2, [pc, #12]	; (80043e4 <HAL_ADC_IRQHandler+0x244>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00a      	beq.n	80043f0 <HAL_ADC_IRQHandler+0x250>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e008      	b.n	80043f2 <HAL_ADC_IRQHandler+0x252>
 80043e0:	40022000 	.word	0x40022000
 80043e4:	40022100 	.word	0x40022100
 80043e8:	40022300 	.word	0x40022300
 80043ec:	58026300 	.word	0x58026300
 80043f0:	4b84      	ldr	r3, [pc, #528]	; (8004604 <HAL_ADC_IRQHandler+0x464>)
 80043f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d047      	beq.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_ADC_IRQHandler+0x27a>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d03f      	beq.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13a      	bne.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d133      	bne.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d12e      	bne.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fc96 	bl	8003d68 <LL_ADC_INJ_IsConversionOngoing>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004450:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d112      	bne.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	; 0x60
 8004476:	e00b      	b.n	8004490 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	f043 0210 	orr.w	r2, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 ff1b 	bl	80052cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2260      	movs	r2, #96	; 0x60
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d011      	beq.n	80044cc <HAL_ADC_IRQHandler+0x32c>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8b2 	bl	8004628 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_ADC_IRQHandler+0x35c>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 ff01 	bl	80052f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004502:	2b00      	cmp	r3, #0
 8004504:	d012      	beq.n	800452c <HAL_ADC_IRQHandler+0x38c>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fef3 	bl	8005308 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d043      	beq.n	80045be <HAL_ADC_IRQHandler+0x41e>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03e      	beq.n	80045be <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	e021      	b.n	8004592 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_ADC_IRQHandler+0x464>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_ADC_IRQHandler+0x3c8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a29      	ldr	r2, [pc, #164]	; (8004608 <HAL_ADC_IRQHandler+0x468>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_ADC_IRQHandler+0x3cc>
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <HAL_ADC_IRQHandler+0x46c>)
 800456a:	e000      	b.n	800456e <HAL_ADC_IRQHandler+0x3ce>
 800456c:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_ADC_IRQHandler+0x470>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fb78 	bl	8003c64 <LL_ADC_GetMultiDMATransfer>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800457a:	2301      	movs	r3, #1
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	e008      	b.n	8004592 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800458e:	2301      	movs	r3, #1
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10e      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a8:	f043 0202 	orr.w	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f843 	bl	800463c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2210      	movs	r2, #16
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d018      	beq.n	80045fa <HAL_ADC_IRQHandler+0x45a>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d013      	beq.n	80045fa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e2:	f043 0208 	orr.w	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fe73 	bl	80052e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80045fa:	bf00      	nop
 80045fc:	3728      	adds	r7, #40	; 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40022000 	.word	0x40022000
 8004608:	40022100 	.word	0x40022100
 800460c:	40022300 	.word	0x40022300
 8004610:	58026300 	.word	0x58026300

08004614 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b0b9      	sub	sp, #228	; 0xe4
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800466a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4ab3      	ldr	r2, [pc, #716]	; (8004940 <HAL_ADC_ConfigChannel+0x2f0>)
 8004672:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x34>
 800467e:	2302      	movs	r3, #2
 8004680:	f000 bcfa 	b.w	8005078 <HAL_ADC_ConfigChannel+0xa28>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fb56 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 84de 	bne.w	800505a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4aa8      	ldr	r2, [pc, #672]	; (8004944 <HAL_ADC_ConfigChannel+0x2f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d033      	beq.n	8004710 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x76>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0e9b      	lsrs	r3, r3, #26
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2201      	movs	r2, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	e01d      	b.n	8004702 <HAL_ADC_ConfigChannel+0xb2>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e004      	b.n	80046f8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80046ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2201      	movs	r2, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	69d1      	ldr	r1, [r2, #28]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	430b      	orrs	r3, r1
 800470e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	f7ff f9e8 	bl	8003af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fb0b 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 800472c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fb17 	bl	8003d68 <LL_ADC_INJ_IsConversionOngoing>
 800473a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800473e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 8270 	bne.w	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004748:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 826b 	bne.w	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	461a      	mov	r2, r3
 8004760:	f7ff fa06 	bl	8003b70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a76      	ldr	r2, [pc, #472]	; (8004944 <HAL_ADC_ConfigChannel+0x2f4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10d      	bne.n	800478a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004788:	e032      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800478a:	4b6f      	ldr	r3, [pc, #444]	; (8004948 <HAL_ADC_ConfigChannel+0x2f8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004796:	d10b      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x160>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	089b      	lsrs	r3, r3, #2
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	e01d      	b.n	80047ec <HAL_ADC_ConfigChannel+0x19c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x186>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	e00a      	b.n	80047ec <HAL_ADC_ConfigChannel+0x19c>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d048      	beq.n	800488a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004808:	f7ff f86e 	bl	80038e8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a4c      	ldr	r2, [pc, #304]	; (8004944 <HAL_ADC_ConfigChannel+0x2f4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d119      	bne.n	800484a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6919      	ldr	r1, [r3, #16]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	461a      	mov	r2, r3
 8004824:	f7ff f906 	bl	8003a34 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x1f0>
 800483a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483e:	e000      	b.n	8004842 <HAL_ADC_ConfigChannel+0x1f2>
 8004840:	2300      	movs	r3, #0
 8004842:	461a      	mov	r2, r3
 8004844:	f7ff f8d4 	bl	80039f0 <LL_ADC_SetOffsetSaturation>
 8004848:	e1ee      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004858:	2b01      	cmp	r3, #1
 800485a:	d102      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x212>
 800485c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004860:	e000      	b.n	8004864 <HAL_ADC_ConfigChannel+0x214>
 8004862:	2300      	movs	r3, #0
 8004864:	461a      	mov	r2, r3
 8004866:	f7ff f8a1 	bl	80039ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	7e1b      	ldrb	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d102      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x230>
 800487a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800487e:	e000      	b.n	8004882 <HAL_ADC_ConfigChannel+0x232>
 8004880:	2300      	movs	r3, #0
 8004882:	461a      	mov	r2, r3
 8004884:	f7ff f878 	bl	8003978 <LL_ADC_SetDataRightShift>
 8004888:	e1ce      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_ADC_ConfigChannel+0x2f4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	f040 8181 	bne.w	8004b98 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f855 	bl	800394c <LL_ADC_GetOffsetChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x272>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f84a 	bl	800394c <LL_ADC_GetOffsetChannel>
 80048b8:	4603      	mov	r3, r0
 80048ba:	0e9b      	lsrs	r3, r3, #26
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	e01e      	b.n	8004900 <HAL_ADC_ConfigChannel+0x2b0>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f83f 	bl	800394c <LL_ADC_GetOffsetChannel>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80048e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80048e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80048f0:	2320      	movs	r3, #32
 80048f2:	e004      	b.n	80048fe <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80048f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x2c8>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	e01e      	b.n	8004956 <HAL_ADC_ConfigChannel+0x306>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800492c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800493c:	2320      	movs	r3, #32
 800493e:	e00a      	b.n	8004956 <HAL_ADC_ConfigChannel+0x306>
 8004940:	47ff0000 	.word	0x47ff0000
 8004944:	58026000 	.word	0x58026000
 8004948:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 800494c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	429a      	cmp	r2, r3
 8004958:	d106      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f888 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe ffec 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004974:	4603      	mov	r3, r0
 8004976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x344>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe ffe1 	bl	800394c <LL_ADC_GetOffsetChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	0e9b      	lsrs	r3, r3, #26
 800498e:	f003 021f 	and.w	r2, r3, #31
 8004992:	e01e      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x382>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe ffd6 	bl	800394c <LL_ADC_GetOffsetChannel>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80049b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80049ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80049c2:	2320      	movs	r3, #32
 80049c4:	e004      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80049c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x39a>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	0e9b      	lsrs	r3, r3, #26
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	e018      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x3cc>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80049fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004a0e:	2320      	movs	r3, #32
 8004a10:	e004      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d106      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2101      	movs	r1, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff f825 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2102      	movs	r1, #2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ff89 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x40a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe ff7e 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	0e9b      	lsrs	r3, r3, #26
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	e01e      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x448>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ff73 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e004      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x460>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	e014      	b.n	8004ada <HAL_ADC_ConfigChannel+0x48a>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e004      	b.n	8004ada <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d106      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe ffc6 	bl	8003a78 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2103      	movs	r1, #3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe ff2a 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x4c8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2103      	movs	r1, #3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe ff1f 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	f003 021f 	and.w	r2, r3, #31
 8004b16:	e017      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x4f8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2103      	movs	r1, #3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe ff14 	bl	800394c <LL_ADC_GetOffsetChannel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b32:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e003      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x510>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0e9b      	lsrs	r3, r3, #26
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	e011      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x534>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b70:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	e003      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d14f      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2103      	movs	r1, #3
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe ff71 	bl	8003a78 <LL_ADC_SetOffsetState>
 8004b96:	e047      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	069b      	lsls	r3, r3, #26
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d107      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	069b      	lsls	r3, r3, #26
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bde:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	069b      	lsls	r3, r3, #26
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c02:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	069b      	lsls	r3, r3, #26
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff f875 	bl	8003d1c <LL_ADC_IsEnabled>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8219 	bne.w	800506c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fe ffbe 	bl	8003bc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4aa1      	ldr	r2, [pc, #644]	; (8004ed8 <HAL_ADC_ConfigChannel+0x888>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f040 812e 	bne.w	8004eb4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x630>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	0e9b      	lsrs	r3, r3, #26
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	bf94      	ite	ls
 8004c78:	2301      	movls	r3, #1
 8004c7a:	2300      	movhi	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e019      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0x664>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004c98:	2320      	movs	r3, #32
 8004c9a:	e003      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	bf94      	ite	ls
 8004cae:	2301      	movls	r3, #1
 8004cb0:	2300      	movhi	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d079      	beq.n	8004dac <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x684>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	0e9b      	lsrs	r3, r3, #26
 8004cca:	3301      	adds	r3, #1
 8004ccc:	069b      	lsls	r3, r3, #26
 8004cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd2:	e015      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x6b0>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004cec:	2320      	movs	r3, #32
 8004cee:	e003      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	069b      	lsls	r3, r3, #26
 8004cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x6d0>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0e9b      	lsrs	r3, r3, #26
 8004d12:	3301      	adds	r3, #1
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	e017      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x700>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e003      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	ea42 0103 	orr.w	r1, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x726>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0e9b      	lsrs	r3, r3, #26
 8004d66:	3301      	adds	r3, #1
 8004d68:	f003 021f 	and.w	r2, r3, #31
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	051b      	lsls	r3, r3, #20
 8004d74:	e018      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x758>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	e003      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f003 021f 	and.w	r2, r3, #31
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da8:	430b      	orrs	r3, r1
 8004daa:	e07e      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x778>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	0e9b      	lsrs	r3, r3, #26
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	069b      	lsls	r3, r3, #26
 8004dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc6:	e015      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x7a4>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	fa93 f3a3 	rbit	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004de0:	2320      	movs	r3, #32
 8004de2:	e003      	b.n	8004dec <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	fab3 f383 	clz	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	069b      	lsls	r3, r3, #26
 8004df0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x7c4>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	0e9b      	lsrs	r3, r3, #26
 8004e06:	3301      	adds	r3, #1
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	e017      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x7f4>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	61bb      	str	r3, [r7, #24]
  return result;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e003      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2101      	movs	r1, #1
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	ea42 0103 	orr.w	r1, r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10d      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x820>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0e9b      	lsrs	r3, r3, #26
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	3b1e      	subs	r3, #30
 8004e68:	051b      	lsls	r3, r3, #20
 8004e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	e01b      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x858>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	60fb      	str	r3, [r7, #12]
  return result;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004e88:	2320      	movs	r3, #32
 8004e8a:	e003      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	f003 021f 	and.w	r2, r3, #31
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3b1e      	subs	r3, #30
 8004ea2:	051b      	lsls	r3, r3, #20
 8004ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f7fe fe5e 	bl	8003b70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f280 80d7 	bge.w	800506c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a06      	ldr	r2, [pc, #24]	; (8004edc <HAL_ADC_ConfigChannel+0x88c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_ADC_ConfigChannel+0x882>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_ADC_ConfigChannel+0x890>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x898>
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_ADC_ConfigChannel+0x894>)
 8004ed4:	e009      	b.n	8004eea <HAL_ADC_ConfigChannel+0x89a>
 8004ed6:	bf00      	nop
 8004ed8:	47ff0000 	.word	0x47ff0000
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40022100 	.word	0x40022100
 8004ee4:	40022300 	.word	0x40022300
 8004ee8:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_ADC_ConfigChannel+0xa30>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fcee 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 8004ef0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a62      	ldr	r2, [pc, #392]	; (8005084 <HAL_ADC_ConfigChannel+0xa34>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_ADC_ConfigChannel+0x8b8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_ADC_ConfigChannel+0xa38>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10e      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x8d6>
 8004f08:	485e      	ldr	r0, [pc, #376]	; (8005084 <HAL_ADC_ConfigChannel+0xa34>)
 8004f0a:	f7fe ff07 	bl	8003d1c <LL_ADC_IsEnabled>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	485d      	ldr	r0, [pc, #372]	; (8005088 <HAL_ADC_ConfigChannel+0xa38>)
 8004f12:	f7fe ff03 	bl	8003d1c <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4323      	orrs	r3, r4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e008      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x8e8>
 8004f26:	4859      	ldr	r0, [pc, #356]	; (800508c <HAL_ADC_ConfigChannel+0xa3c>)
 8004f28:	f7fe fef8 	bl	8003d1c <LL_ADC_IsEnabled>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8084 	beq.w	8005046 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a53      	ldr	r2, [pc, #332]	; (8005090 <HAL_ADC_ConfigChannel+0xa40>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d132      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x95e>
 8004f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12c      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a4c      	ldr	r2, [pc, #304]	; (800508c <HAL_ADC_ConfigChannel+0xa3c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	f040 8086 	bne.w	800506c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a47      	ldr	r2, [pc, #284]	; (8005084 <HAL_ADC_ConfigChannel+0xa34>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_ADC_ConfigChannel+0x924>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	; (8005088 <HAL_ADC_ConfigChannel+0xa38>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x928>
 8004f74:	4a47      	ldr	r2, [pc, #284]	; (8005094 <HAL_ADC_ConfigChannel+0xa44>)
 8004f76:	e000      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x92a>
 8004f78:	4a41      	ldr	r2, [pc, #260]	; (8005080 <HAL_ADC_ConfigChannel+0xa30>)
 8004f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f7fe fc8e 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f8a:	4b43      	ldr	r3, [pc, #268]	; (8005098 <HAL_ADC_ConfigChannel+0xa48>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	4a42      	ldr	r2, [pc, #264]	; (800509c <HAL_ADC_ConfigChannel+0xa4c>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	3301      	adds	r3, #1
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f9e:	e002      	b.n	8004fa6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f9      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fac:	e05e      	b.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <HAL_ADC_ConfigChannel+0xa50>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d120      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x9aa>
 8004fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11a      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a30      	ldr	r2, [pc, #192]	; (800508c <HAL_ADC_ConfigChannel+0xa3c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d14e      	bne.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_ADC_ConfigChannel+0xa34>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_ADC_ConfigChannel+0x992>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <HAL_ADC_ConfigChannel+0xa38>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x996>
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <HAL_ADC_ConfigChannel+0xa44>)
 8004fe4:	e000      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x998>
 8004fe6:	4a26      	ldr	r2, [pc, #152]	; (8005080 <HAL_ADC_ConfigChannel+0xa30>)
 8004fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fe fc57 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff8:	e038      	b.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <HAL_ADC_ConfigChannel+0xa54>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d133      	bne.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
 8005004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d12d      	bne.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_ADC_ConfigChannel+0xa3c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d128      	bne.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_ADC_ConfigChannel+0xa34>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_ADC_ConfigChannel+0x9de>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a17      	ldr	r2, [pc, #92]	; (8005088 <HAL_ADC_ConfigChannel+0xa38>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x9e2>
 800502e:	4a19      	ldr	r2, [pc, #100]	; (8005094 <HAL_ADC_ConfigChannel+0xa44>)
 8005030:	e000      	b.n	8005034 <HAL_ADC_ConfigChannel+0x9e4>
 8005032:	4a13      	ldr	r2, [pc, #76]	; (8005080 <HAL_ADC_ConfigChannel+0xa30>)
 8005034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7fe fc31 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
 8005044:	e012      	b.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005058:	e008      	b.n	800506c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505e:	f043 0220 	orr.w	r2, r3, #32
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005074:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005078:	4618      	mov	r0, r3
 800507a:	37e4      	adds	r7, #228	; 0xe4
 800507c:	46bd      	mov	sp, r7
 800507e:	bd90      	pop	{r4, r7, pc}
 8005080:	58026300 	.word	0x58026300
 8005084:	40022000 	.word	0x40022000
 8005088:	40022100 	.word	0x40022100
 800508c:	58026000 	.word	0x58026000
 8005090:	c7520000 	.word	0xc7520000
 8005094:	40022300 	.word	0x40022300
 8005098:	2400000c 	.word	0x2400000c
 800509c:	053e2d63 	.word	0x053e2d63
 80050a0:	c3210000 	.word	0xc3210000
 80050a4:	cb840000 	.word	0xcb840000

080050a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a6b      	ldr	r2, [pc, #428]	; (8005264 <ADC_ConfigureBoostMode+0x1bc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <ADC_ConfigureBoostMode+0x1c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6a      	ldr	r2, [pc, #424]	; (8005268 <ADC_ConfigureBoostMode+0x1c0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <ADC_ConfigureBoostMode+0x30>
 80050c4:	4b69      	ldr	r3, [pc, #420]	; (800526c <ADC_ConfigureBoostMode+0x1c4>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e008      	b.n	80050ea <ADC_ConfigureBoostMode+0x42>
 80050d8:	4b65      	ldr	r3, [pc, #404]	; (8005270 <ADC_ConfigureBoostMode+0x1c8>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01c      	beq.n	8005128 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80050ee:	f003 f8b9 	bl	8008264 <HAL_RCC_GetHCLKFreq>
 80050f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050fc:	d010      	beq.n	8005120 <ADC_ConfigureBoostMode+0x78>
 80050fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005102:	d871      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x140>
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d002      	beq.n	8005110 <ADC_ConfigureBoostMode+0x68>
 800510a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800510e:	d16b      	bne.n	80051e8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	60fb      	str	r3, [r7, #12]
        break;
 800511e:	e066      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	089b      	lsrs	r3, r3, #2
 8005124:	60fb      	str	r3, [r7, #12]
        break;
 8005126:	e062      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005128:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800512c:	f004 f80c 	bl	8009148 <HAL_RCCEx_GetPeriphCLKFreq>
 8005130:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800513a:	d051      	beq.n	80051e0 <ADC_ConfigureBoostMode+0x138>
 800513c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005140:	d854      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 8005142:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005146:	d047      	beq.n	80051d8 <ADC_ConfigureBoostMode+0x130>
 8005148:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800514c:	d84e      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 800514e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005152:	d03d      	beq.n	80051d0 <ADC_ConfigureBoostMode+0x128>
 8005154:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005158:	d848      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 800515a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515e:	d033      	beq.n	80051c8 <ADC_ConfigureBoostMode+0x120>
 8005160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005164:	d842      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 8005166:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800516a:	d029      	beq.n	80051c0 <ADC_ConfigureBoostMode+0x118>
 800516c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005170:	d83c      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 8005172:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005176:	d01a      	beq.n	80051ae <ADC_ConfigureBoostMode+0x106>
 8005178:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800517c:	d836      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 800517e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005182:	d014      	beq.n	80051ae <ADC_ConfigureBoostMode+0x106>
 8005184:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005188:	d830      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518e:	d00e      	beq.n	80051ae <ADC_ConfigureBoostMode+0x106>
 8005190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005194:	d82a      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 8005196:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800519a:	d008      	beq.n	80051ae <ADC_ConfigureBoostMode+0x106>
 800519c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051a0:	d824      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x144>
 80051a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051a6:	d002      	beq.n	80051ae <ADC_ConfigureBoostMode+0x106>
 80051a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051ac:	d11e      	bne.n	80051ec <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0c9b      	lsrs	r3, r3, #18
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	60fb      	str	r3, [r7, #12]
        break;
 80051be:	e016      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]
        break;
 80051c6:	e012      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	60fb      	str	r3, [r7, #12]
        break;
 80051ce:	e00e      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	099b      	lsrs	r3, r3, #6
 80051d4:	60fb      	str	r3, [r7, #12]
        break;
 80051d6:	e00a      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	09db      	lsrs	r3, r3, #7
 80051dc:	60fb      	str	r3, [r7, #12]
        break;
 80051de:	e006      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	60fb      	str	r3, [r7, #12]
        break;
 80051e6:	e002      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
        break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80051ec:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <ADC_ConfigureBoostMode+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d808      	bhi.n	800520e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800520a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800520c:	e025      	b.n	800525a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <ADC_ConfigureBoostMode+0x1d0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d80a      	bhi.n	800522c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	e016      	b.n	800525a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <ADC_ConfigureBoostMode+0x1d4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d80a      	bhi.n	800524a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005246:	609a      	str	r2, [r3, #8]
}
 8005248:	e007      	b.n	800525a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40022000 	.word	0x40022000
 8005268:	40022100 	.word	0x40022100
 800526c:	40022300 	.word	0x40022300
 8005270:	58026300 	.word	0x58026300
 8005274:	005f5e10 	.word	0x005f5e10
 8005278:	00bebc20 	.word	0x00bebc20
 800527c:	017d7840 	.word	0x017d7840

08005280 <LL_ADC_IsEnabled>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <LL_ADC_IsEnabled+0x18>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <LL_ADC_IsEnabled+0x1a>
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d101      	bne.n	80052be <LL_ADC_REG_IsConversionOngoing+0x18>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b0a3      	sub	sp, #140	; 0x8c
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800534a:	2302      	movs	r3, #2
 800534c:	e0c1      	b.n	80054d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005356:	2300      	movs	r3, #0
 8005358:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800535a:	2300      	movs	r3, #0
 800535c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a5e      	ldr	r2, [pc, #376]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d102      	bne.n	800536e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005368:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e001      	b.n	8005372 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0a0      	b.n	80054d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ff87 	bl	80052a6 <LL_ADC_REG_IsConversionOngoing>
 8005398:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ff80 	bl	80052a6 <LL_ADC_REG_IsConversionOngoing>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 8081 	bne.w	80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80053ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d17c      	bne.n	80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a48      	ldr	r2, [pc, #288]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a46      	ldr	r2, [pc, #280]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80053cc:	e000      	b.n	80053d0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80053ce:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80053d0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d039      	beq.n	800544e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80053da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3a      	ldr	r2, [pc, #232]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10e      	bne.n	800541e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005400:	4836      	ldr	r0, [pc, #216]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005402:	f7ff ff3d 	bl	8005280 <LL_ADC_IsEnabled>
 8005406:	4604      	mov	r4, r0
 8005408:	4835      	ldr	r0, [pc, #212]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800540a:	f7ff ff39 	bl	8005280 <LL_ADC_IsEnabled>
 800540e:	4603      	mov	r3, r0
 8005410:	4323      	orrs	r3, r4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e008      	b.n	8005430 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800541e:	4833      	ldr	r0, [pc, #204]	; (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005420:	f7ff ff2e 	bl	8005280 <LL_ADC_IsEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d047      	beq.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005434:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800543a:	4013      	ands	r3, r2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	6811      	ldr	r1, [r2, #0]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	430a      	orrs	r2, r1
 8005446:	431a      	orrs	r2, r3
 8005448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800544a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800544c:	e03a      	b.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800544e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005458:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10e      	bne.n	800548c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800546e:	481b      	ldr	r0, [pc, #108]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005470:	f7ff ff06 	bl	8005280 <LL_ADC_IsEnabled>
 8005474:	4604      	mov	r4, r0
 8005476:	481a      	ldr	r0, [pc, #104]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005478:	f7ff ff02 	bl	8005280 <LL_ADC_IsEnabled>
 800547c:	4603      	mov	r3, r0
 800547e:	4323      	orrs	r3, r4
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e008      	b.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800548c:	4817      	ldr	r0, [pc, #92]	; (80054ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800548e:	f7ff fef7 	bl	8005280 <LL_ADC_IsEnabled>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80054ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054ae:	e009      	b.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80054c2:	e000      	b.n	80054c6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80054ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	378c      	adds	r7, #140	; 0x8c
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	bf00      	nop
 80054dc:	40022000 	.word	0x40022000
 80054e0:	40022100 	.word	0x40022100
 80054e4:	40022300 	.word	0x40022300
 80054e8:	58026300 	.word	0x58026300
 80054ec:	58026000 	.word	0x58026000
 80054f0:	fffff0e0 	.word	0xfffff0e0

080054f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <__NVIC_SetPriorityGrouping+0x40>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 800551e:	4313      	orrs	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <__NVIC_SetPriorityGrouping+0x40>)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	60d3      	str	r3, [r2, #12]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	05fa0000 	.word	0x05fa0000

0800553c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__NVIC_GetPriorityGrouping+0x18>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 0307 	and.w	r3, r3, #7
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	db0b      	blt.n	8005582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	f003 021f 	and.w	r2, r3, #31
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <__NVIC_EnableIRQ+0x38>)
 8005572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2001      	movs	r0, #1
 800557a:	fa00 f202 	lsl.w	r2, r0, r2
 800557e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e100 	.word	0xe000e100

08005594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	6039      	str	r1, [r7, #0]
 800559e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db0a      	blt.n	80055be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	490c      	ldr	r1, [pc, #48]	; (80055e0 <__NVIC_SetPriority+0x4c>)
 80055ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b2:	0112      	lsls	r2, r2, #4
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	440b      	add	r3, r1
 80055b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055bc:	e00a      	b.n	80055d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4908      	ldr	r1, [pc, #32]	; (80055e4 <__NVIC_SetPriority+0x50>)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	3b04      	subs	r3, #4
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	761a      	strb	r2, [r3, #24]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000e100 	.word	0xe000e100
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f1c3 0307 	rsb	r3, r3, #7
 8005602:	2b04      	cmp	r3, #4
 8005604:	bf28      	it	cs
 8005606:	2304      	movcs	r3, #4
 8005608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3304      	adds	r3, #4
 800560e:	2b06      	cmp	r3, #6
 8005610:	d902      	bls.n	8005618 <NVIC_EncodePriority+0x30>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3b03      	subs	r3, #3
 8005616:	e000      	b.n	800561a <NVIC_EncodePriority+0x32>
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	401a      	ands	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005630:	f04f 31ff 	mov.w	r1, #4294967295
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	43d9      	mvns	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	4313      	orrs	r3, r2
         );
}
 8005642:	4618      	mov	r0, r3
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3b01      	subs	r3, #1
 800565c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005660:	d301      	bcc.n	8005666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005662:	2301      	movs	r3, #1
 8005664:	e00f      	b.n	8005686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <SysTick_Config+0x40>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800566e:	210f      	movs	r1, #15
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	f7ff ff8e 	bl	8005594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <SysTick_Config+0x40>)
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <SysTick_Config+0x40>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000e010 	.word	0xe000e010

08005694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff29 	bl	80054f4 <__NVIC_SetPriorityGrouping>
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056b8:	f7ff ff40 	bl	800553c <__NVIC_GetPriorityGrouping>
 80056bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7ff ff90 	bl	80055e8 <NVIC_EncodePriority>
 80056c8:	4602      	mov	r2, r0
 80056ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ce:	4611      	mov	r1, r2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ff5f 	bl	8005594 <__NVIC_SetPriority>
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ff33 	bl	8005558 <__NVIC_EnableIRQ>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ffa4 	bl	8005650 <SysTick_Config>
 8005708:	4603      	mov	r3, r0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7fe f8a4 	bl	8003868 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e314      	b.n	8005d56 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a66      	ldr	r2, [pc, #408]	; (80058cc <HAL_DMA_Init+0x1b8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d04a      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a65      	ldr	r2, [pc, #404]	; (80058d0 <HAL_DMA_Init+0x1bc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d045      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a63      	ldr	r2, [pc, #396]	; (80058d4 <HAL_DMA_Init+0x1c0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d040      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a62      	ldr	r2, [pc, #392]	; (80058d8 <HAL_DMA_Init+0x1c4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d03b      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a60      	ldr	r2, [pc, #384]	; (80058dc <HAL_DMA_Init+0x1c8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d036      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a5f      	ldr	r2, [pc, #380]	; (80058e0 <HAL_DMA_Init+0x1cc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d031      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a5d      	ldr	r2, [pc, #372]	; (80058e4 <HAL_DMA_Init+0x1d0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d02c      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a5c      	ldr	r2, [pc, #368]	; (80058e8 <HAL_DMA_Init+0x1d4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d027      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a5a      	ldr	r2, [pc, #360]	; (80058ec <HAL_DMA_Init+0x1d8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d022      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a59      	ldr	r2, [pc, #356]	; (80058f0 <HAL_DMA_Init+0x1dc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a57      	ldr	r2, [pc, #348]	; (80058f4 <HAL_DMA_Init+0x1e0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a56      	ldr	r2, [pc, #344]	; (80058f8 <HAL_DMA_Init+0x1e4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_DMA_Init+0x1e8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a53      	ldr	r2, [pc, #332]	; (8005900 <HAL_DMA_Init+0x1ec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a51      	ldr	r2, [pc, #324]	; (8005904 <HAL_DMA_Init+0x1f0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_DMA_Init+0xb8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a50      	ldr	r2, [pc, #320]	; (8005908 <HAL_DMA_Init+0x1f4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_DMA_Init+0xbc>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_DMA_Init+0xbe>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 813c 	beq.w	8005a50 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a37      	ldr	r2, [pc, #220]	; (80058cc <HAL_DMA_Init+0x1b8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04a      	beq.n	8005888 <HAL_DMA_Init+0x174>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <HAL_DMA_Init+0x1bc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d045      	beq.n	8005888 <HAL_DMA_Init+0x174>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <HAL_DMA_Init+0x1c0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d040      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a33      	ldr	r2, [pc, #204]	; (80058d8 <HAL_DMA_Init+0x1c4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d03b      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a31      	ldr	r2, [pc, #196]	; (80058dc <HAL_DMA_Init+0x1c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d036      	beq.n	8005888 <HAL_DMA_Init+0x174>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <HAL_DMA_Init+0x1cc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d031      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2e      	ldr	r2, [pc, #184]	; (80058e4 <HAL_DMA_Init+0x1d0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02c      	beq.n	8005888 <HAL_DMA_Init+0x174>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <HAL_DMA_Init+0x1d4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d027      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <HAL_DMA_Init+0x1d8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <HAL_DMA_Init+0x1dc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d01d      	beq.n	8005888 <HAL_DMA_Init+0x174>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <HAL_DMA_Init+0x1e0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <HAL_DMA_Init+0x1e4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <HAL_DMA_Init+0x1e8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_DMA_Init+0x174>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a24      	ldr	r2, [pc, #144]	; (8005900 <HAL_DMA_Init+0x1ec>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_DMA_Init+0x174>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_DMA_Init+0x1f0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_DMA_Init+0x174>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_DMA_Init+0x1f4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d108      	bne.n	800589a <HAL_DMA_Init+0x186>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e007      	b.n	80058aa <HAL_DMA_Init+0x196>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058aa:	e02f      	b.n	800590c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ac:	f7fd ffdc 	bl	8003868 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d928      	bls.n	800590c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2203      	movs	r2, #3
 80058c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e244      	b.n	8005d56 <HAL_DMA_Init+0x642>
 80058cc:	40020010 	.word	0x40020010
 80058d0:	40020028 	.word	0x40020028
 80058d4:	40020040 	.word	0x40020040
 80058d8:	40020058 	.word	0x40020058
 80058dc:	40020070 	.word	0x40020070
 80058e0:	40020088 	.word	0x40020088
 80058e4:	400200a0 	.word	0x400200a0
 80058e8:	400200b8 	.word	0x400200b8
 80058ec:	40020410 	.word	0x40020410
 80058f0:	40020428 	.word	0x40020428
 80058f4:	40020440 	.word	0x40020440
 80058f8:	40020458 	.word	0x40020458
 80058fc:	40020470 	.word	0x40020470
 8005900:	40020488 	.word	0x40020488
 8005904:	400204a0 	.word	0x400204a0
 8005908:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1c8      	bne.n	80058ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <HAL_DMA_Init+0x424>)
 8005926:	4013      	ands	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005932:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800593e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800594a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b04      	cmp	r3, #4
 800595e:	d107      	bne.n	8005970 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	4313      	orrs	r3, r2
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b28      	cmp	r3, #40	; 0x28
 8005976:	d903      	bls.n	8005980 <HAL_DMA_Init+0x26c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b2e      	cmp	r3, #46	; 0x2e
 800597e:	d91f      	bls.n	80059c0 <HAL_DMA_Init+0x2ac>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b3e      	cmp	r3, #62	; 0x3e
 8005986:	d903      	bls.n	8005990 <HAL_DMA_Init+0x27c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b42      	cmp	r3, #66	; 0x42
 800598e:	d917      	bls.n	80059c0 <HAL_DMA_Init+0x2ac>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b46      	cmp	r3, #70	; 0x46
 8005996:	d903      	bls.n	80059a0 <HAL_DMA_Init+0x28c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b48      	cmp	r3, #72	; 0x48
 800599e:	d90f      	bls.n	80059c0 <HAL_DMA_Init+0x2ac>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b4e      	cmp	r3, #78	; 0x4e
 80059a6:	d903      	bls.n	80059b0 <HAL_DMA_Init+0x29c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b52      	cmp	r3, #82	; 0x52
 80059ae:	d907      	bls.n	80059c0 <HAL_DMA_Init+0x2ac>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b73      	cmp	r3, #115	; 0x73
 80059b6:	d905      	bls.n	80059c4 <HAL_DMA_Init+0x2b0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b77      	cmp	r3, #119	; 0x77
 80059be:	d801      	bhi.n	80059c4 <HAL_DMA_Init+0x2b0>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <HAL_DMA_Init+0x2b2>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0307 	bic.w	r3, r3, #7
 80059e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d117      	bne.n	8005a2c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 f9b6 	bl	8006d80 <DMA_CheckFifoParam>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2240      	movs	r2, #64	; 0x40
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e194      	b.n	8005d56 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f8f1 	bl	8006c1c <DMA_CalcBaseAndBitshift>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	223f      	movs	r2, #63	; 0x3f
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	609a      	str	r2, [r3, #8]
 8005a4e:	e0ca      	b.n	8005be6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a39      	ldr	r2, [pc, #228]	; (8005b3c <HAL_DMA_Init+0x428>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a38      	ldr	r2, [pc, #224]	; (8005b40 <HAL_DMA_Init+0x42c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a36      	ldr	r2, [pc, #216]	; (8005b44 <HAL_DMA_Init+0x430>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a35      	ldr	r2, [pc, #212]	; (8005b48 <HAL_DMA_Init+0x434>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a33      	ldr	r2, [pc, #204]	; (8005b4c <HAL_DMA_Init+0x438>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a32      	ldr	r2, [pc, #200]	; (8005b50 <HAL_DMA_Init+0x43c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <HAL_DMA_Init+0x440>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_DMA_Init+0x38c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <HAL_DMA_Init+0x444>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DMA_Init+0x390>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_DMA_Init+0x392>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8094 	beq.w	8005bd4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <HAL_DMA_Init+0x428>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d021      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <HAL_DMA_Init+0x42c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d01c      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <HAL_DMA_Init+0x430>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d017      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_DMA_Init+0x434>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d012      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <HAL_DMA_Init+0x438>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00d      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <HAL_DMA_Init+0x43c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d008      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_DMA_Init+0x440>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <HAL_DMA_Init+0x3e6>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_DMA_Init+0x444>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <HAL_DMA_Init+0x448>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d01d      	beq.n	8005b60 <HAL_DMA_Init+0x44c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d102      	bne.n	8005b32 <HAL_DMA_Init+0x41e>
 8005b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b30:	e017      	b.n	8005b62 <HAL_DMA_Init+0x44e>
 8005b32:	2300      	movs	r3, #0
 8005b34:	e015      	b.n	8005b62 <HAL_DMA_Init+0x44e>
 8005b36:	bf00      	nop
 8005b38:	fe10803f 	.word	0xfe10803f
 8005b3c:	58025408 	.word	0x58025408
 8005b40:	5802541c 	.word	0x5802541c
 8005b44:	58025430 	.word	0x58025430
 8005b48:	58025444 	.word	0x58025444
 8005b4c:	58025458 	.word	0x58025458
 8005b50:	5802546c 	.word	0x5802546c
 8005b54:	58025480 	.word	0x58025480
 8005b58:	58025494 	.word	0x58025494
 8005b5c:	fffe000f 	.word	0xfffe000f
 8005b60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4b6e      	ldr	r3, [pc, #440]	; (8005d60 <HAL_DMA_Init+0x64c>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	4a6e      	ldr	r2, [pc, #440]	; (8005d64 <HAL_DMA_Init+0x650>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	009a      	lsls	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f82f 	bl	8006c1c <DMA_CalcBaseAndBitshift>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2201      	movs	r2, #1
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e008      	b.n	8005be6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0b7      	b.n	8005d56 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a5f      	ldr	r2, [pc, #380]	; (8005d68 <HAL_DMA_Init+0x654>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d072      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5d      	ldr	r2, [pc, #372]	; (8005d6c <HAL_DMA_Init+0x658>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d06d      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <HAL_DMA_Init+0x65c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d068      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5a      	ldr	r2, [pc, #360]	; (8005d74 <HAL_DMA_Init+0x660>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d063      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a59      	ldr	r2, [pc, #356]	; (8005d78 <HAL_DMA_Init+0x664>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d05e      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a57      	ldr	r2, [pc, #348]	; (8005d7c <HAL_DMA_Init+0x668>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d059      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a56      	ldr	r2, [pc, #344]	; (8005d80 <HAL_DMA_Init+0x66c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d054      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_DMA_Init+0x670>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d04f      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a53      	ldr	r2, [pc, #332]	; (8005d88 <HAL_DMA_Init+0x674>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d04a      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a51      	ldr	r2, [pc, #324]	; (8005d8c <HAL_DMA_Init+0x678>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d045      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a50      	ldr	r2, [pc, #320]	; (8005d90 <HAL_DMA_Init+0x67c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d040      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4e      	ldr	r2, [pc, #312]	; (8005d94 <HAL_DMA_Init+0x680>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d03b      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_DMA_Init+0x684>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d036      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a4b      	ldr	r2, [pc, #300]	; (8005d9c <HAL_DMA_Init+0x688>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d031      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4a      	ldr	r2, [pc, #296]	; (8005da0 <HAL_DMA_Init+0x68c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d02c      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a48      	ldr	r2, [pc, #288]	; (8005da4 <HAL_DMA_Init+0x690>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d027      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a47      	ldr	r2, [pc, #284]	; (8005da8 <HAL_DMA_Init+0x694>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d022      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a45      	ldr	r2, [pc, #276]	; (8005dac <HAL_DMA_Init+0x698>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01d      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a44      	ldr	r2, [pc, #272]	; (8005db0 <HAL_DMA_Init+0x69c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d018      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a42      	ldr	r2, [pc, #264]	; (8005db4 <HAL_DMA_Init+0x6a0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a41      	ldr	r2, [pc, #260]	; (8005db8 <HAL_DMA_Init+0x6a4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a3f      	ldr	r2, [pc, #252]	; (8005dbc <HAL_DMA_Init+0x6a8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3e      	ldr	r2, [pc, #248]	; (8005dc0 <HAL_DMA_Init+0x6ac>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <HAL_DMA_Init+0x5c2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a3c      	ldr	r2, [pc, #240]	; (8005dc4 <HAL_DMA_Init+0x6b0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d101      	bne.n	8005cda <HAL_DMA_Init+0x5c6>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_DMA_Init+0x5c8>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d032      	beq.n	8005d46 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f8c9 	bl	8006e78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d102      	bne.n	8005cf4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <HAL_DMA_Init+0x620>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d80c      	bhi.n	8005d34 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f946 	bl	8006fac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e008      	b.n	8005d46 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	a7fdabf8 	.word	0xa7fdabf8
 8005d64:	cccccccd 	.word	0xcccccccd
 8005d68:	40020010 	.word	0x40020010
 8005d6c:	40020028 	.word	0x40020028
 8005d70:	40020040 	.word	0x40020040
 8005d74:	40020058 	.word	0x40020058
 8005d78:	40020070 	.word	0x40020070
 8005d7c:	40020088 	.word	0x40020088
 8005d80:	400200a0 	.word	0x400200a0
 8005d84:	400200b8 	.word	0x400200b8
 8005d88:	40020410 	.word	0x40020410
 8005d8c:	40020428 	.word	0x40020428
 8005d90:	40020440 	.word	0x40020440
 8005d94:	40020458 	.word	0x40020458
 8005d98:	40020470 	.word	0x40020470
 8005d9c:	40020488 	.word	0x40020488
 8005da0:	400204a0 	.word	0x400204a0
 8005da4:	400204b8 	.word	0x400204b8
 8005da8:	58025408 	.word	0x58025408
 8005dac:	5802541c 	.word	0x5802541c
 8005db0:	58025430 	.word	0x58025430
 8005db4:	58025444 	.word	0x58025444
 8005db8:	58025458 	.word	0x58025458
 8005dbc:	5802546c 	.word	0x5802546c
 8005dc0:	58025480 	.word	0x58025480
 8005dc4:	58025494 	.word	0x58025494

08005dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dd4:	4b67      	ldr	r3, [pc, #412]	; (8005f74 <HAL_DMA_IRQHandler+0x1ac>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a67      	ldr	r2, [pc, #412]	; (8005f78 <HAL_DMA_IRQHandler+0x1b0>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5f      	ldr	r2, [pc, #380]	; (8005f7c <HAL_DMA_IRQHandler+0x1b4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d04a      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5d      	ldr	r2, [pc, #372]	; (8005f80 <HAL_DMA_IRQHandler+0x1b8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d045      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5c      	ldr	r2, [pc, #368]	; (8005f84 <HAL_DMA_IRQHandler+0x1bc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	; (8005f88 <HAL_DMA_IRQHandler+0x1c0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d03b      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a59      	ldr	r2, [pc, #356]	; (8005f8c <HAL_DMA_IRQHandler+0x1c4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d036      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a57      	ldr	r2, [pc, #348]	; (8005f90 <HAL_DMA_IRQHandler+0x1c8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d031      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a56      	ldr	r2, [pc, #344]	; (8005f94 <HAL_DMA_IRQHandler+0x1cc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d02c      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a54      	ldr	r2, [pc, #336]	; (8005f98 <HAL_DMA_IRQHandler+0x1d0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a53      	ldr	r2, [pc, #332]	; (8005f9c <HAL_DMA_IRQHandler+0x1d4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a51      	ldr	r2, [pc, #324]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a50      	ldr	r2, [pc, #320]	; (8005fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a4e      	ldr	r2, [pc, #312]	; (8005fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4d      	ldr	r2, [pc, #308]	; (8005fac <HAL_DMA_IRQHandler+0x1e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a4b      	ldr	r2, [pc, #300]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a48      	ldr	r2, [pc, #288]	; (8005fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_DMA_IRQHandler+0xd6>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 842b 	beq.w	80066fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2208      	movs	r2, #8
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a2 	beq.w	8006000 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2e      	ldr	r2, [pc, #184]	; (8005f7c <HAL_DMA_IRQHandler+0x1b4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d04a      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_DMA_IRQHandler+0x1b8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d045      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2b      	ldr	r2, [pc, #172]	; (8005f84 <HAL_DMA_IRQHandler+0x1bc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d040      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_DMA_IRQHandler+0x1c0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d03b      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	; (8005f8c <HAL_DMA_IRQHandler+0x1c4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d036      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a27      	ldr	r2, [pc, #156]	; (8005f90 <HAL_DMA_IRQHandler+0x1c8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d031      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <HAL_DMA_IRQHandler+0x1cc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02c      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_DMA_IRQHandler+0x1d0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d027      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_DMA_IRQHandler+0x1d4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d022      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01d      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_DMA_IRQHandler+0x1e4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d12f      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x1f4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf14      	ite	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	2300      	moveq	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	e02e      	b.n	8005fd0 <HAL_DMA_IRQHandler+0x208>
 8005f72:	bf00      	nop
 8005f74:	2400000c 	.word	0x2400000c
 8005f78:	1b4e81b5 	.word	0x1b4e81b5
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2208      	movs	r2, #8
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	f043 0201 	orr.w	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d06e      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <HAL_DMA_IRQHandler+0x3f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d04a      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d045      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a66      	ldr	r2, [pc, #408]	; (80061c8 <HAL_DMA_IRQHandler+0x400>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d040      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a64      	ldr	r2, [pc, #400]	; (80061cc <HAL_DMA_IRQHandler+0x404>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d03b      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a63      	ldr	r2, [pc, #396]	; (80061d0 <HAL_DMA_IRQHandler+0x408>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d036      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a61      	ldr	r2, [pc, #388]	; (80061d4 <HAL_DMA_IRQHandler+0x40c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d031      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a60      	ldr	r2, [pc, #384]	; (80061d8 <HAL_DMA_IRQHandler+0x410>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d02c      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5e      	ldr	r2, [pc, #376]	; (80061dc <HAL_DMA_IRQHandler+0x414>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d027      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a5d      	ldr	r2, [pc, #372]	; (80061e0 <HAL_DMA_IRQHandler+0x418>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a5b      	ldr	r2, [pc, #364]	; (80061e4 <HAL_DMA_IRQHandler+0x41c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01d      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a5a      	ldr	r2, [pc, #360]	; (80061e8 <HAL_DMA_IRQHandler+0x420>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a58      	ldr	r2, [pc, #352]	; (80061ec <HAL_DMA_IRQHandler+0x424>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <HAL_DMA_IRQHandler+0x428>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a55      	ldr	r2, [pc, #340]	; (80061f4 <HAL_DMA_IRQHandler+0x42c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a54      	ldr	r2, [pc, #336]	; (80061f8 <HAL_DMA_IRQHandler+0x430>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a52      	ldr	r2, [pc, #328]	; (80061fc <HAL_DMA_IRQHandler+0x434>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10a      	bne.n	80060cc <HAL_DMA_IRQHandler+0x304>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e003      	b.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2201      	movs	r2, #1
 80060e2:	409a      	lsls	r2, r3
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f043 0202 	orr.w	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	2204      	movs	r2, #4
 80060fe:	409a      	lsls	r2, r3
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 808f 	beq.w	8006228 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04a      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <HAL_DMA_IRQHandler+0x3fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <HAL_DMA_IRQHandler+0x400>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d040      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <HAL_DMA_IRQHandler+0x404>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03b      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <HAL_DMA_IRQHandler+0x408>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d036      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a24      	ldr	r2, [pc, #144]	; (80061d4 <HAL_DMA_IRQHandler+0x40c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d031      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <HAL_DMA_IRQHandler+0x410>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02c      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a21      	ldr	r2, [pc, #132]	; (80061dc <HAL_DMA_IRQHandler+0x414>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d027      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <HAL_DMA_IRQHandler+0x418>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_DMA_IRQHandler+0x41c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_DMA_IRQHandler+0x420>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_DMA_IRQHandler+0x424>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_DMA_IRQHandler+0x428>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_DMA_IRQHandler+0x42c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_DMA_IRQHandler+0x430>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a15      	ldr	r2, [pc, #84]	; (80061fc <HAL_DMA_IRQHandler+0x434>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d12a      	bne.n	8006200 <HAL_DMA_IRQHandler+0x438>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e023      	b.n	8006208 <HAL_DMA_IRQHandler+0x440>
 80061c0:	40020010 	.word	0x40020010
 80061c4:	40020028 	.word	0x40020028
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	40020070 	.word	0x40020070
 80061d4:	40020088 	.word	0x40020088
 80061d8:	400200a0 	.word	0x400200a0
 80061dc:	400200b8 	.word	0x400200b8
 80061e0:	40020410 	.word	0x40020410
 80061e4:	40020428 	.word	0x40020428
 80061e8:	40020440 	.word	0x40020440
 80061ec:	40020458 	.word	0x40020458
 80061f0:	40020470 	.word	0x40020470
 80061f4:	40020488 	.word	0x40020488
 80061f8:	400204a0 	.word	0x400204a0
 80061fc:	400204b8 	.word	0x400204b8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2204      	movs	r2, #4
 8006216:	409a      	lsls	r2, r3
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	f043 0204 	orr.w	r2, r3, #4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	2210      	movs	r2, #16
 8006232:	409a      	lsls	r2, r3
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a6 	beq.w	800638a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a85      	ldr	r2, [pc, #532]	; (8006458 <HAL_DMA_IRQHandler+0x690>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a83      	ldr	r2, [pc, #524]	; (800645c <HAL_DMA_IRQHandler+0x694>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a82      	ldr	r2, [pc, #520]	; (8006460 <HAL_DMA_IRQHandler+0x698>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a80      	ldr	r2, [pc, #512]	; (8006464 <HAL_DMA_IRQHandler+0x69c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a7f      	ldr	r2, [pc, #508]	; (8006468 <HAL_DMA_IRQHandler+0x6a0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a7d      	ldr	r2, [pc, #500]	; (800646c <HAL_DMA_IRQHandler+0x6a4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <HAL_DMA_IRQHandler+0x6a8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a7a      	ldr	r2, [pc, #488]	; (8006474 <HAL_DMA_IRQHandler+0x6ac>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a79      	ldr	r2, [pc, #484]	; (8006478 <HAL_DMA_IRQHandler+0x6b0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a77      	ldr	r2, [pc, #476]	; (800647c <HAL_DMA_IRQHandler+0x6b4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a76      	ldr	r2, [pc, #472]	; (8006480 <HAL_DMA_IRQHandler+0x6b8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a74      	ldr	r2, [pc, #464]	; (8006484 <HAL_DMA_IRQHandler+0x6bc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a73      	ldr	r2, [pc, #460]	; (8006488 <HAL_DMA_IRQHandler+0x6c0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a71      	ldr	r2, [pc, #452]	; (800648c <HAL_DMA_IRQHandler+0x6c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a70      	ldr	r2, [pc, #448]	; (8006490 <HAL_DMA_IRQHandler+0x6c8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6e      	ldr	r2, [pc, #440]	; (8006494 <HAL_DMA_IRQHandler+0x6cc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10a      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x52c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e009      	b.n	8006308 <HAL_DMA_IRQHandler+0x540>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d03e      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2210      	movs	r2, #16
 8006316:	409a      	lsls	r2, r3
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d108      	bne.n	800634a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d024      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
 8006348:	e01f      	b.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01b      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	e016      	b.n	800638a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d107      	bne.n	800637a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0208 	bic.w	r2, r2, #8
 8006378:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2220      	movs	r2, #32
 8006394:	409a      	lsls	r2, r3
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8110 	beq.w	80065c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <HAL_DMA_IRQHandler+0x690>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_IRQHandler+0x694>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a29      	ldr	r2, [pc, #164]	; (8006460 <HAL_DMA_IRQHandler+0x698>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_IRQHandler+0x69c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a26      	ldr	r2, [pc, #152]	; (8006468 <HAL_DMA_IRQHandler+0x6a0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_IRQHandler+0x6a4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a23      	ldr	r2, [pc, #140]	; (8006470 <HAL_DMA_IRQHandler+0x6a8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_IRQHandler+0x6ac>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_DMA_IRQHandler+0x6b0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_DMA_IRQHandler+0x6b4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <HAL_DMA_IRQHandler+0x6b8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_DMA_IRQHandler+0x6bc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1a      	ldr	r2, [pc, #104]	; (8006488 <HAL_DMA_IRQHandler+0x6c0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_DMA_IRQHandler+0x6c4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a17      	ldr	r2, [pc, #92]	; (8006490 <HAL_DMA_IRQHandler+0x6c8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <HAL_DMA_IRQHandler+0x6cc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d12b      	bne.n	8006498 <HAL_DMA_IRQHandler+0x6d0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e02a      	b.n	80064ac <HAL_DMA_IRQHandler+0x6e4>
 8006456:	bf00      	nop
 8006458:	40020010 	.word	0x40020010
 800645c:	40020028 	.word	0x40020028
 8006460:	40020040 	.word	0x40020040
 8006464:	40020058 	.word	0x40020058
 8006468:	40020070 	.word	0x40020070
 800646c:	40020088 	.word	0x40020088
 8006470:	400200a0 	.word	0x400200a0
 8006474:	400200b8 	.word	0x400200b8
 8006478:	40020410 	.word	0x40020410
 800647c:	40020428 	.word	0x40020428
 8006480:	40020440 	.word	0x40020440
 8006484:	40020458 	.word	0x40020458
 8006488:	40020470 	.word	0x40020470
 800648c:	40020488 	.word	0x40020488
 8006490:	400204a0 	.word	0x400204a0
 8006494:	400204b8 	.word	0x400204b8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8087 	beq.w	80065c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2220      	movs	r2, #32
 80064bc:	409a      	lsls	r2, r3
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d139      	bne.n	8006542 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0216 	bic.w	r2, r2, #22
 80064dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <HAL_DMA_IRQHandler+0x736>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0208 	bic.w	r2, r2, #8
 800650c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	223f      	movs	r2, #63	; 0x3f
 8006518:	409a      	lsls	r2, r3
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 834a 	beq.w	8006bcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
          }
          return;
 8006540:	e344      	b.n	8006bcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	2b00      	cmp	r3, #0
 8006564:	d02c      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	e027      	b.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d023      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
 8006580:	e01e      	b.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0210 	bic.w	r2, r2, #16
 800659e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8306 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8088 	beq.w	80066e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a7a      	ldr	r2, [pc, #488]	; (80067d0 <HAL_DMA_IRQHandler+0xa08>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d04a      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a79      	ldr	r2, [pc, #484]	; (80067d4 <HAL_DMA_IRQHandler+0xa0c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d045      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a77      	ldr	r2, [pc, #476]	; (80067d8 <HAL_DMA_IRQHandler+0xa10>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d040      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a76      	ldr	r2, [pc, #472]	; (80067dc <HAL_DMA_IRQHandler+0xa14>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d03b      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a74      	ldr	r2, [pc, #464]	; (80067e0 <HAL_DMA_IRQHandler+0xa18>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d036      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a73      	ldr	r2, [pc, #460]	; (80067e4 <HAL_DMA_IRQHandler+0xa1c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d031      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a71      	ldr	r2, [pc, #452]	; (80067e8 <HAL_DMA_IRQHandler+0xa20>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02c      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a70      	ldr	r2, [pc, #448]	; (80067ec <HAL_DMA_IRQHandler+0xa24>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_DMA_IRQHandler+0xa28>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_DMA_IRQHandler+0xa2c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_DMA_IRQHandler+0xa30>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_DMA_IRQHandler+0xa34>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a68      	ldr	r2, [pc, #416]	; (8006800 <HAL_DMA_IRQHandler+0xa38>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_DMA_IRQHandler+0xa3c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a65      	ldr	r2, [pc, #404]	; (8006808 <HAL_DMA_IRQHandler+0xa40>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a64      	ldr	r2, [pc, #400]	; (800680c <HAL_DMA_IRQHandler+0xa44>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <HAL_DMA_IRQHandler+0x8ca>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e007      	b.n	80066a2 <HAL_DMA_IRQHandler+0x8da>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d307      	bcc.n	80066be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f2      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x8da>
 80066bc:	e000      	b.n	80066c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2203      	movs	r2, #3
 80066d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066d6:	e003      	b.n	80066e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8272 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
 80066fa:	e26c      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a43      	ldr	r2, [pc, #268]	; (8006810 <HAL_DMA_IRQHandler+0xa48>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d022      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a42      	ldr	r2, [pc, #264]	; (8006814 <HAL_DMA_IRQHandler+0xa4c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d01d      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a40      	ldr	r2, [pc, #256]	; (8006818 <HAL_DMA_IRQHandler+0xa50>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3f      	ldr	r2, [pc, #252]	; (800681c <HAL_DMA_IRQHandler+0xa54>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <HAL_DMA_IRQHandler+0xa58>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <HAL_DMA_IRQHandler+0xa5c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3a      	ldr	r2, [pc, #232]	; (8006828 <HAL_DMA_IRQHandler+0xa60>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a39      	ldr	r2, [pc, #228]	; (800682c <HAL_DMA_IRQHandler+0xa64>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d101      	bne.n	8006750 <HAL_DMA_IRQHandler+0x988>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x98a>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 823f 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2204      	movs	r2, #4
 800676a:	409a      	lsls	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80cd 	beq.w	8006910 <HAL_DMA_IRQHandler+0xb48>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80c7 	beq.w	8006910 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2204      	movs	r2, #4
 800678c:	409a      	lsls	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d049      	beq.n	8006830 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8210 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b8:	e20a      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8206 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067cc:	e200      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
 80067ce:	bf00      	nop
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	58025408 	.word	0x58025408
 8006814:	5802541c 	.word	0x5802541c
 8006818:	58025430 	.word	0x58025430
 800681c:	58025444 	.word	0x58025444
 8006820:	58025458 	.word	0x58025458
 8006824:	5802546c 	.word	0x5802546c
 8006828:	58025480 	.word	0x58025480
 800682c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d160      	bne.n	80068fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a8c      	ldr	r2, [pc, #560]	; (8006a70 <HAL_DMA_IRQHandler+0xca8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a8a      	ldr	r2, [pc, #552]	; (8006a74 <HAL_DMA_IRQHandler+0xcac>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a89      	ldr	r2, [pc, #548]	; (8006a78 <HAL_DMA_IRQHandler+0xcb0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a87      	ldr	r2, [pc, #540]	; (8006a7c <HAL_DMA_IRQHandler+0xcb4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a86      	ldr	r2, [pc, #536]	; (8006a80 <HAL_DMA_IRQHandler+0xcb8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a84      	ldr	r2, [pc, #528]	; (8006a84 <HAL_DMA_IRQHandler+0xcbc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a83      	ldr	r2, [pc, #524]	; (8006a88 <HAL_DMA_IRQHandler+0xcc0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a81      	ldr	r2, [pc, #516]	; (8006a8c <HAL_DMA_IRQHandler+0xcc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a80      	ldr	r2, [pc, #512]	; (8006a90 <HAL_DMA_IRQHandler+0xcc8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7e      	ldr	r2, [pc, #504]	; (8006a94 <HAL_DMA_IRQHandler+0xccc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a7d      	ldr	r2, [pc, #500]	; (8006a98 <HAL_DMA_IRQHandler+0xcd0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a7b      	ldr	r2, [pc, #492]	; (8006a9c <HAL_DMA_IRQHandler+0xcd4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a7a      	ldr	r2, [pc, #488]	; (8006aa0 <HAL_DMA_IRQHandler+0xcd8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <HAL_DMA_IRQHandler+0xcdc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a77      	ldr	r2, [pc, #476]	; (8006aa8 <HAL_DMA_IRQHandler+0xce0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a75      	ldr	r2, [pc, #468]	; (8006aac <HAL_DMA_IRQHandler+0xce4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d108      	bne.n	80068ec <HAL_DMA_IRQHandler+0xb24>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0208 	bic.w	r2, r2, #8
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e007      	b.n	80068fc <HAL_DMA_IRQHandler+0xb34>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0204 	bic.w	r2, r2, #4
 80068fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8165 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800690e:	e15f      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2202      	movs	r2, #2
 800691a:	409a      	lsls	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80c5 	beq.w	8006ab0 <HAL_DMA_IRQHandler+0xce8>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80bf 	beq.w	8006ab0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2202      	movs	r2, #2
 800693c:	409a      	lsls	r2, r3
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d018      	beq.n	800697e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 813a 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006968:	e134      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8130 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800697c:	e12a      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d168      	bne.n	8006a5a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a38      	ldr	r2, [pc, #224]	; (8006a70 <HAL_DMA_IRQHandler+0xca8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d04a      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a37      	ldr	r2, [pc, #220]	; (8006a74 <HAL_DMA_IRQHandler+0xcac>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d045      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a35      	ldr	r2, [pc, #212]	; (8006a78 <HAL_DMA_IRQHandler+0xcb0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d040      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <HAL_DMA_IRQHandler+0xcb4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d03b      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <HAL_DMA_IRQHandler+0xcb8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d036      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_DMA_IRQHandler+0xcbc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d031      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2f      	ldr	r2, [pc, #188]	; (8006a88 <HAL_DMA_IRQHandler+0xcc0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d02c      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2e      	ldr	r2, [pc, #184]	; (8006a8c <HAL_DMA_IRQHandler+0xcc4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d027      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <HAL_DMA_IRQHandler+0xcc8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d022      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2b      	ldr	r2, [pc, #172]	; (8006a94 <HAL_DMA_IRQHandler+0xccc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d01d      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <HAL_DMA_IRQHandler+0xcd0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d018      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_DMA_IRQHandler+0xcd4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d013      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <HAL_DMA_IRQHandler+0xcd8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00e      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <HAL_DMA_IRQHandler+0xcdc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d009      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <HAL_DMA_IRQHandler+0xce0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_IRQHandler+0xc60>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_DMA_IRQHandler+0xce4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d108      	bne.n	8006a3a <HAL_DMA_IRQHandler+0xc72>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0214 	bic.w	r2, r2, #20
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e007      	b.n	8006a4a <HAL_DMA_IRQHandler+0xc82>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 020a 	bic.w	r2, r2, #10
 8006a48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80b8 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a6c:	e0b2      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
 8006a6e:	bf00      	nop
 8006a70:	40020010 	.word	0x40020010
 8006a74:	40020028 	.word	0x40020028
 8006a78:	40020040 	.word	0x40020040
 8006a7c:	40020058 	.word	0x40020058
 8006a80:	40020070 	.word	0x40020070
 8006a84:	40020088 	.word	0x40020088
 8006a88:	400200a0 	.word	0x400200a0
 8006a8c:	400200b8 	.word	0x400200b8
 8006a90:	40020410 	.word	0x40020410
 8006a94:	40020428 	.word	0x40020428
 8006a98:	40020440 	.word	0x40020440
 8006a9c:	40020458 	.word	0x40020458
 8006aa0:	40020470 	.word	0x40020470
 8006aa4:	40020488 	.word	0x40020488
 8006aa8:	400204a0 	.word	0x400204a0
 8006aac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2208      	movs	r2, #8
 8006aba:	409a      	lsls	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8088 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8082 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <HAL_DMA_IRQHandler+0xe14>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d04a      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a3f      	ldr	r2, [pc, #252]	; (8006be0 <HAL_DMA_IRQHandler+0xe18>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d045      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3e      	ldr	r2, [pc, #248]	; (8006be4 <HAL_DMA_IRQHandler+0xe1c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d040      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <HAL_DMA_IRQHandler+0xe20>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d03b      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a3b      	ldr	r2, [pc, #236]	; (8006bec <HAL_DMA_IRQHandler+0xe24>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d036      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a39      	ldr	r2, [pc, #228]	; (8006bf0 <HAL_DMA_IRQHandler+0xe28>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d031      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <HAL_DMA_IRQHandler+0xe2c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d02c      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a36      	ldr	r2, [pc, #216]	; (8006bf8 <HAL_DMA_IRQHandler+0xe30>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d027      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a35      	ldr	r2, [pc, #212]	; (8006bfc <HAL_DMA_IRQHandler+0xe34>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d022      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <HAL_DMA_IRQHandler+0xe38>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01d      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a32      	ldr	r2, [pc, #200]	; (8006c04 <HAL_DMA_IRQHandler+0xe3c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d018      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <HAL_DMA_IRQHandler+0xe40>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <HAL_DMA_IRQHandler+0xe44>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_DMA_IRQHandler+0xe48>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	; (8006c14 <HAL_DMA_IRQHandler+0xe4c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <HAL_DMA_IRQHandler+0xe50>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0xdbc>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 021c 	bic.w	r2, r2, #28
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e007      	b.n	8006b94 <HAL_DMA_IRQHandler+0xdcc>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 020e 	bic.w	r2, r2, #14
 8006b92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	e004      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bcc:	bf00      	nop
 8006bce:	e002      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40020010 	.word	0x40020010
 8006be0:	40020028 	.word	0x40020028
 8006be4:	40020040 	.word	0x40020040
 8006be8:	40020058 	.word	0x40020058
 8006bec:	40020070 	.word	0x40020070
 8006bf0:	40020088 	.word	0x40020088
 8006bf4:	400200a0 	.word	0x400200a0
 8006bf8:	400200b8 	.word	0x400200b8
 8006bfc:	40020410 	.word	0x40020410
 8006c00:	40020428 	.word	0x40020428
 8006c04:	40020440 	.word	0x40020440
 8006c08:	40020458 	.word	0x40020458
 8006c0c:	40020470 	.word	0x40020470
 8006c10:	40020488 	.word	0x40020488
 8006c14:	400204a0 	.word	0x400204a0
 8006c18:	400204b8 	.word	0x400204b8

08006c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a42      	ldr	r2, [pc, #264]	; (8006d34 <DMA_CalcBaseAndBitshift+0x118>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d04a      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a41      	ldr	r2, [pc, #260]	; (8006d38 <DMA_CalcBaseAndBitshift+0x11c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d045      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a3f      	ldr	r2, [pc, #252]	; (8006d3c <DMA_CalcBaseAndBitshift+0x120>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d040      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <DMA_CalcBaseAndBitshift+0x124>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d03b      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <DMA_CalcBaseAndBitshift+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d036      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <DMA_CalcBaseAndBitshift+0x12c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d031      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a39      	ldr	r2, [pc, #228]	; (8006d4c <DMA_CalcBaseAndBitshift+0x130>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d02c      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <DMA_CalcBaseAndBitshift+0x134>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d027      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a36      	ldr	r2, [pc, #216]	; (8006d54 <DMA_CalcBaseAndBitshift+0x138>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d022      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a35      	ldr	r2, [pc, #212]	; (8006d58 <DMA_CalcBaseAndBitshift+0x13c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d01d      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a33      	ldr	r2, [pc, #204]	; (8006d5c <DMA_CalcBaseAndBitshift+0x140>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d018      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a32      	ldr	r2, [pc, #200]	; (8006d60 <DMA_CalcBaseAndBitshift+0x144>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a30      	ldr	r2, [pc, #192]	; (8006d64 <DMA_CalcBaseAndBitshift+0x148>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00e      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2f      	ldr	r2, [pc, #188]	; (8006d68 <DMA_CalcBaseAndBitshift+0x14c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d009      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2d      	ldr	r2, [pc, #180]	; (8006d6c <DMA_CalcBaseAndBitshift+0x150>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <DMA_CalcBaseAndBitshift+0x154>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d101      	bne.n	8006cc8 <DMA_CalcBaseAndBitshift+0xac>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <DMA_CalcBaseAndBitshift+0xae>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d024      	beq.n	8006d18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	3b10      	subs	r3, #16
 8006cd6:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <DMA_CalcBaseAndBitshift+0x158>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <DMA_CalcBaseAndBitshift+0x15c>)
 8006ce8:	5cd3      	ldrb	r3, [r2, r3]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d908      	bls.n	8006d08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <DMA_CalcBaseAndBitshift+0x160>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	1d1a      	adds	r2, r3, #4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	659a      	str	r2, [r3, #88]	; 0x58
 8006d06:	e00d      	b.n	8006d24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <DMA_CalcBaseAndBitshift+0x160>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6593      	str	r3, [r2, #88]	; 0x58
 8006d16:	e005      	b.n	8006d24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40020010 	.word	0x40020010
 8006d38:	40020028 	.word	0x40020028
 8006d3c:	40020040 	.word	0x40020040
 8006d40:	40020058 	.word	0x40020058
 8006d44:	40020070 	.word	0x40020070
 8006d48:	40020088 	.word	0x40020088
 8006d4c:	400200a0 	.word	0x400200a0
 8006d50:	400200b8 	.word	0x400200b8
 8006d54:	40020410 	.word	0x40020410
 8006d58:	40020428 	.word	0x40020428
 8006d5c:	40020440 	.word	0x40020440
 8006d60:	40020458 	.word	0x40020458
 8006d64:	40020470 	.word	0x40020470
 8006d68:	40020488 	.word	0x40020488
 8006d6c:	400204a0 	.word	0x400204a0
 8006d70:	400204b8 	.word	0x400204b8
 8006d74:	aaaaaaab 	.word	0xaaaaaaab
 8006d78:	0800fb08 	.word	0x0800fb08
 8006d7c:	fffffc00 	.word	0xfffffc00

08006d80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d120      	bne.n	8006dd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d858      	bhi.n	8006e4e <DMA_CheckFifoParam+0xce>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <DMA_CheckFifoParam+0x24>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dc7 	.word	0x08006dc7
 8006dac:	08006db5 	.word	0x08006db5
 8006db0:	08006e4f 	.word	0x08006e4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d048      	beq.n	8006e52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006dc4:	e045      	b.n	8006e52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dce:	d142      	bne.n	8006e56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006dd4:	e03f      	b.n	8006e56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dde:	d123      	bne.n	8006e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d838      	bhi.n	8006e5a <DMA_CheckFifoParam+0xda>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <DMA_CheckFifoParam+0x70>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e07 	.word	0x08006e07
 8006df8:	08006e01 	.word	0x08006e01
 8006dfc:	08006e19 	.word	0x08006e19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
        break;
 8006e04:	e030      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d025      	beq.n	8006e5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e16:	e022      	b.n	8006e5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e20:	d11f      	bne.n	8006e62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e26:	e01c      	b.n	8006e62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d902      	bls.n	8006e36 <DMA_CheckFifoParam+0xb6>
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d003      	beq.n	8006e3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e34:	e018      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
        break;
 8006e3a:	e015      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00e      	beq.n	8006e66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4c:	e00b      	b.n	8006e66 <DMA_CheckFifoParam+0xe6>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e00a      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        break;
 8006e52:	bf00      	nop
 8006e54:	e008      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        break;
 8006e56:	bf00      	nop
 8006e58:	e006      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        break;
 8006e5a:	bf00      	nop
 8006e5c:	e004      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        break;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
        break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <DMA_CheckFifoParam+0xe8>
    break;
 8006e66:	bf00      	nop
    }
  }

  return status;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop

08006e78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a38      	ldr	r2, [pc, #224]	; (8006f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a36      	ldr	r2, [pc, #216]	; (8006f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a35      	ldr	r2, [pc, #212]	; (8006f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a33      	ldr	r2, [pc, #204]	; (8006f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a32      	ldr	r2, [pc, #200]	; (8006f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a30      	ldr	r2, [pc, #192]	; (8006f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	; (8006f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01a      	beq.n	8006f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	3b08      	subs	r3, #8
 8006ee8:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006eea:	fba2 2303 	umull	r2, r3, r2, r3
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f14:	e024      	b.n	8006f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3b10      	subs	r3, #16
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a1c      	ldr	r2, [pc, #112]	; (8006f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d806      	bhi.n	8006f3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d902      	bls.n	8006f3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006f50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	2201      	movs	r2, #1
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	58025408 	.word	0x58025408
 8006f70:	5802541c 	.word	0x5802541c
 8006f74:	58025430 	.word	0x58025430
 8006f78:	58025444 	.word	0x58025444
 8006f7c:	58025458 	.word	0x58025458
 8006f80:	5802546c 	.word	0x5802546c
 8006f84:	58025480 	.word	0x58025480
 8006f88:	58025494 	.word	0x58025494
 8006f8c:	cccccccd 	.word	0xcccccccd
 8006f90:	16009600 	.word	0x16009600
 8006f94:	58025880 	.word	0x58025880
 8006f98:	aaaaaaab 	.word	0xaaaaaaab
 8006f9c:	400204b8 	.word	0x400204b8
 8006fa0:	4002040f 	.word	0x4002040f
 8006fa4:	10008200 	.word	0x10008200
 8006fa8:	40020880 	.word	0x40020880

08006fac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04a      	beq.n	8007058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d847      	bhi.n	8007058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a25      	ldr	r2, [pc, #148]	; (8007064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d022      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a24      	ldr	r2, [pc, #144]	; (8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d01d      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a22      	ldr	r2, [pc, #136]	; (800706c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d018      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a21      	ldr	r2, [pc, #132]	; (8007070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d013      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00e      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d009      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	; (800707c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d101      	bne.n	800701c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800701c:	2300      	movs	r3, #0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007034:	671a      	str	r2, [r3, #112]	; 0x70
 8007036:	e009      	b.n	800704c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a11      	ldr	r2, [pc, #68]	; (8007090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800704a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3b01      	subs	r3, #1
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	58025408 	.word	0x58025408
 8007068:	5802541c 	.word	0x5802541c
 800706c:	58025430 	.word	0x58025430
 8007070:	58025444 	.word	0x58025444
 8007074:	58025458 	.word	0x58025458
 8007078:	5802546c 	.word	0x5802546c
 800707c:	58025480 	.word	0x58025480
 8007080:	58025494 	.word	0x58025494
 8007084:	1600963f 	.word	0x1600963f
 8007088:	58025940 	.word	0x58025940
 800708c:	1000823f 	.word	0x1000823f
 8007090:	40020940 	.word	0x40020940

08007094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070a2:	4b86      	ldr	r3, [pc, #536]	; (80072bc <HAL_GPIO_Init+0x228>)
 80070a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070a6:	e18c      	b.n	80073c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	2101      	movs	r1, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	fa01 f303 	lsl.w	r3, r1, r3
 80070b4:	4013      	ands	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 817e 	beq.w	80073bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d005      	beq.n	80070d8 <HAL_GPIO_Init+0x44>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d130      	bne.n	800713a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	2203      	movs	r2, #3
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800710e:	2201      	movs	r2, #1
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	fa02 f303 	lsl.w	r3, r2, r3
 8007116:	43db      	mvns	r3, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	4013      	ands	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	f003 0201 	and.w	r2, r3, #1
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d017      	beq.n	8007176 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	2203      	movs	r2, #3
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	43db      	mvns	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d123      	bne.n	80071ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	08da      	lsrs	r2, r3, #3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3208      	adds	r2, #8
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	220f      	movs	r2, #15
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43db      	mvns	r3, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4013      	ands	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	08da      	lsrs	r2, r3, #3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3208      	adds	r2, #8
 80071c4:	69b9      	ldr	r1, [r7, #24]
 80071c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	2203      	movs	r2, #3
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f003 0203 	and.w	r2, r3, #3
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80d8 	beq.w	80073bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <HAL_GPIO_Init+0x22c>)
 800720e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007212:	4a2b      	ldr	r2, [pc, #172]	; (80072c0 <HAL_GPIO_Init+0x22c>)
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800721c:	4b28      	ldr	r3, [pc, #160]	; (80072c0 <HAL_GPIO_Init+0x22c>)
 800721e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800722a:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <HAL_GPIO_Init+0x230>)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	089b      	lsrs	r3, r3, #2
 8007230:	3302      	adds	r3, #2
 8007232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	220f      	movs	r2, #15
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	43db      	mvns	r3, r3
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	4013      	ands	r3, r2
 800724c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <HAL_GPIO_Init+0x234>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d04a      	beq.n	80072ec <HAL_GPIO_Init+0x258>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <HAL_GPIO_Init+0x238>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d02b      	beq.n	80072b6 <HAL_GPIO_Init+0x222>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <HAL_GPIO_Init+0x23c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d025      	beq.n	80072b2 <HAL_GPIO_Init+0x21e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_GPIO_Init+0x240>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01f      	beq.n	80072ae <HAL_GPIO_Init+0x21a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_GPIO_Init+0x244>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d019      	beq.n	80072aa <HAL_GPIO_Init+0x216>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_GPIO_Init+0x248>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_GPIO_Init+0x212>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <HAL_GPIO_Init+0x24c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00d      	beq.n	80072a2 <HAL_GPIO_Init+0x20e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <HAL_GPIO_Init+0x250>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d007      	beq.n	800729e <HAL_GPIO_Init+0x20a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <HAL_GPIO_Init+0x254>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d101      	bne.n	800729a <HAL_GPIO_Init+0x206>
 8007296:	2309      	movs	r3, #9
 8007298:	e029      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 800729a:	230a      	movs	r3, #10
 800729c:	e027      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 800729e:	2307      	movs	r3, #7
 80072a0:	e025      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072a2:	2306      	movs	r3, #6
 80072a4:	e023      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072a6:	2305      	movs	r3, #5
 80072a8:	e021      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072aa:	2304      	movs	r3, #4
 80072ac:	e01f      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072ae:	2303      	movs	r3, #3
 80072b0:	e01d      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e01b      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e019      	b.n	80072ee <HAL_GPIO_Init+0x25a>
 80072ba:	bf00      	nop
 80072bc:	58000080 	.word	0x58000080
 80072c0:	58024400 	.word	0x58024400
 80072c4:	58000400 	.word	0x58000400
 80072c8:	58020000 	.word	0x58020000
 80072cc:	58020400 	.word	0x58020400
 80072d0:	58020800 	.word	0x58020800
 80072d4:	58020c00 	.word	0x58020c00
 80072d8:	58021000 	.word	0x58021000
 80072dc:	58021400 	.word	0x58021400
 80072e0:	58021800 	.word	0x58021800
 80072e4:	58021c00 	.word	0x58021c00
 80072e8:	58022400 	.word	0x58022400
 80072ec:	2300      	movs	r3, #0
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	f002 0203 	and.w	r2, r2, #3
 80072f4:	0092      	lsls	r2, r2, #2
 80072f6:	4093      	lsls	r3, r2
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072fe:	4938      	ldr	r1, [pc, #224]	; (80073e0 <HAL_GPIO_Init+0x34c>)
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	089b      	lsrs	r3, r3, #2
 8007304:	3302      	adds	r3, #2
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	43db      	mvns	r3, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4013      	ands	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800733a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	43db      	mvns	r3, r3
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	4013      	ands	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	43db      	mvns	r3, r3
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4013      	ands	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	43db      	mvns	r3, r3
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4013      	ands	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f47f ae6b 	bne.w	80070a8 <HAL_GPIO_Init+0x14>
  }
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	3724      	adds	r7, #36	; 0x24
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	58000400 	.word	0x58000400

080073e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
 80073f0:	4613      	mov	r3, r2
 80073f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073f4:	787b      	ldrb	r3, [r7, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007400:	e003      	b.n	800740a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007402:	887b      	ldrh	r3, [r7, #2]
 8007404:	041a      	lsls	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007420:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_PWREx_ConfigSupply+0x70>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b04      	cmp	r3, #4
 800742a:	d00a      	beq.n	8007442 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <HAL_PWREx_ConfigSupply+0x70>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d001      	beq.n	800743e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e01f      	b.n	800747e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e01d      	b.n	800747e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_PWREx_ConfigSupply+0x70>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f023 0207 	bic.w	r2, r3, #7
 800744a:	490f      	ldr	r1, [pc, #60]	; (8007488 <HAL_PWREx_ConfigSupply+0x70>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4313      	orrs	r3, r2
 8007450:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007452:	f7fc fa09 	bl	8003868 <HAL_GetTick>
 8007456:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007458:	e009      	b.n	800746e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800745a:	f7fc fa05 	bl	8003868 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007468:	d901      	bls.n	800746e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e007      	b.n	800747e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <HAL_PWREx_ConfigSupply+0x70>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747a:	d1ee      	bne.n	800745a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	58024800 	.word	0x58024800

0800748c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e397      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8087 	beq.w	80075ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ac:	4b9e      	ldr	r3, [pc, #632]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074b6:	4b9c      	ldr	r3, [pc, #624]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d007      	beq.n	80074d2 <HAL_RCC_OscConfig+0x46>
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	2b18      	cmp	r3, #24
 80074c6:	d110      	bne.n	80074ea <HAL_RCC_OscConfig+0x5e>
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d10b      	bne.n	80074ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d2:	4b95      	ldr	r3, [pc, #596]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d06c      	beq.n	80075b8 <HAL_RCC_OscConfig+0x12c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d168      	bne.n	80075b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e371      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f2:	d106      	bne.n	8007502 <HAL_RCC_OscConfig+0x76>
 80074f4:	4b8c      	ldr	r3, [pc, #560]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a8b      	ldr	r2, [pc, #556]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e02e      	b.n	8007560 <HAL_RCC_OscConfig+0xd4>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10c      	bne.n	8007524 <HAL_RCC_OscConfig+0x98>
 800750a:	4b87      	ldr	r3, [pc, #540]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a86      	ldr	r2, [pc, #536]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b84      	ldr	r3, [pc, #528]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a83      	ldr	r2, [pc, #524]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800751c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e01d      	b.n	8007560 <HAL_RCC_OscConfig+0xd4>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800752c:	d10c      	bne.n	8007548 <HAL_RCC_OscConfig+0xbc>
 800752e:	4b7e      	ldr	r3, [pc, #504]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4b7b      	ldr	r3, [pc, #492]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a7a      	ldr	r2, [pc, #488]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e00b      	b.n	8007560 <HAL_RCC_OscConfig+0xd4>
 8007548:	4b77      	ldr	r3, [pc, #476]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a76      	ldr	r2, [pc, #472]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800754e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	4b74      	ldr	r3, [pc, #464]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a73      	ldr	r2, [pc, #460]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800755a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d013      	beq.n	8007590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007568:	f7fc f97e 	bl	8003868 <HAL_GetTick>
 800756c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007570:	f7fc f97a 	bl	8003868 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	; 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e325      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007582:	4b69      	ldr	r3, [pc, #420]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCC_OscConfig+0xe4>
 800758e:	e014      	b.n	80075ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fc f96a 	bl	8003868 <HAL_GetTick>
 8007594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007598:	f7fc f966 	bl	8003868 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	; 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e311      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075aa:	4b5f      	ldr	r3, [pc, #380]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x10c>
 80075b6:	e000      	b.n	80075ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 808a 	beq.w	80076dc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075c8:	4b57      	ldr	r3, [pc, #348]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075d2:	4b55      	ldr	r3, [pc, #340]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_RCC_OscConfig+0x162>
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	2b18      	cmp	r3, #24
 80075e2:	d137      	bne.n	8007654 <HAL_RCC_OscConfig+0x1c8>
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d132      	bne.n	8007654 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ee:	4b4e      	ldr	r3, [pc, #312]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_RCC_OscConfig+0x17a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e2e3      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007606:	4b48      	ldr	r3, [pc, #288]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f023 0219 	bic.w	r2, r3, #25
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	4945      	ldr	r1, [pc, #276]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007618:	f7fc f926 	bl	8003868 <HAL_GetTick>
 800761c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007620:	f7fc f922 	bl	8003868 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e2cd      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007632:	4b3d      	ldr	r3, [pc, #244]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763e:	4b3a      	ldr	r3, [pc, #232]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	4936      	ldr	r1, [pc, #216]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007652:	e043      	b.n	80076dc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d026      	beq.n	80076aa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800765c:	4b32      	ldr	r3, [pc, #200]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f023 0219 	bic.w	r2, r3, #25
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	492f      	ldr	r1, [pc, #188]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800766a:	4313      	orrs	r3, r2
 800766c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766e:	f7fc f8fb 	bl	8003868 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007676:	f7fc f8f7 	bl	8003868 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e2a2      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	4921      	ldr	r1, [pc, #132]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	604b      	str	r3, [r1, #4]
 80076a8:	e018      	b.n	80076dc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076aa:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076b0:	f023 0301 	bic.w	r3, r3, #1
 80076b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b6:	f7fc f8d7 	bl	8003868 <HAL_GetTick>
 80076ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076be:	f7fc f8d3 	bl	8003868 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e27e      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076d0:	4b15      	ldr	r3, [pc, #84]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d06d      	beq.n	80077c4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d007      	beq.n	800770e <HAL_RCC_OscConfig+0x282>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b18      	cmp	r3, #24
 8007702:	d11e      	bne.n	8007742 <HAL_RCC_OscConfig+0x2b6>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d119      	bne.n	8007742 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_RCC_OscConfig+0x29c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_RCC_OscConfig+0x2a0>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	d004      	beq.n	800772c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e253      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
 8007726:	bf00      	nop
 8007728:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800772c:	4ba3      	ldr	r3, [pc, #652]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	49a0      	ldr	r1, [pc, #640]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800773c:	4313      	orrs	r3, r2
 800773e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007740:	e040      	b.n	80077c4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d023      	beq.n	8007792 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800774a:	4b9c      	ldr	r3, [pc, #624]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a9b      	ldr	r2, [pc, #620]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007756:	f7fc f887 	bl	8003868 <HAL_GetTick>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800775c:	e008      	b.n	8007770 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800775e:	f7fc f883 	bl	8003868 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e22e      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007770:	4b92      	ldr	r3, [pc, #584]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800777c:	4b8f      	ldr	r3, [pc, #572]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	498c      	ldr	r1, [pc, #560]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800778c:	4313      	orrs	r3, r2
 800778e:	60cb      	str	r3, [r1, #12]
 8007790:	e018      	b.n	80077c4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007792:	4b8a      	ldr	r3, [pc, #552]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a89      	ldr	r2, [pc, #548]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779e:	f7fc f863 	bl	8003868 <HAL_GetTick>
 80077a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077a6:	f7fc f85f 	bl	8003868 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e20a      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077b8:	4b80      	ldr	r3, [pc, #512]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d036      	beq.n	800783e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d019      	beq.n	800780c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077d8:	4b78      	ldr	r3, [pc, #480]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 80077da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077dc:	4a77      	ldr	r2, [pc, #476]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e4:	f7fc f840 	bl	8003868 <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ec:	f7fc f83c 	bl	8003868 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e1e7      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077fe:	4b6f      	ldr	r3, [pc, #444]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f0      	beq.n	80077ec <HAL_RCC_OscConfig+0x360>
 800780a:	e018      	b.n	800783e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800780c:	4b6b      	ldr	r3, [pc, #428]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800780e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007810:	4a6a      	ldr	r2, [pc, #424]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007812:	f023 0301 	bic.w	r3, r3, #1
 8007816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007818:	f7fc f826 	bl	8003868 <HAL_GetTick>
 800781c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007820:	f7fc f822 	bl	8003868 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e1cd      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007832:	4b62      	ldr	r3, [pc, #392]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d036      	beq.n	80078b8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d019      	beq.n	8007886 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007852:	4b5a      	ldr	r3, [pc, #360]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a59      	ldr	r2, [pc, #356]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800785c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800785e:	f7fc f803 	bl	8003868 <HAL_GetTick>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007866:	f7fb ffff 	bl	8003868 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e1aa      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007878:	4b50      	ldr	r3, [pc, #320]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCC_OscConfig+0x3da>
 8007884:	e018      	b.n	80078b8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007886:	4b4d      	ldr	r3, [pc, #308]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a4c      	ldr	r2, [pc, #304]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800788c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007892:	f7fb ffe9 	bl	8003868 <HAL_GetTick>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800789a:	f7fb ffe5 	bl	8003868 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e190      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ac:	4b43      	ldr	r3, [pc, #268]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f0      	bne.n	800789a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8085 	beq.w	80079d0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078c6:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <HAL_RCC_OscConfig+0x534>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a3d      	ldr	r2, [pc, #244]	; (80079c0 <HAL_RCC_OscConfig+0x534>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078d2:	f7fb ffc9 	bl	8003868 <HAL_GetTick>
 80078d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078da:	f7fb ffc5 	bl	8003868 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b64      	cmp	r3, #100	; 0x64
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e170      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078ec:	4b34      	ldr	r3, [pc, #208]	; (80079c0 <HAL_RCC_OscConfig+0x534>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d106      	bne.n	800790e <HAL_RCC_OscConfig+0x482>
 8007900:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	6713      	str	r3, [r2, #112]	; 0x70
 800790c:	e02d      	b.n	800796a <HAL_RCC_OscConfig+0x4de>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10c      	bne.n	8007930 <HAL_RCC_OscConfig+0x4a4>
 8007916:	4b29      	ldr	r3, [pc, #164]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	4a28      	ldr	r2, [pc, #160]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	6713      	str	r3, [r2, #112]	; 0x70
 8007922:	4b26      	ldr	r3, [pc, #152]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	4a25      	ldr	r2, [pc, #148]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007928:	f023 0304 	bic.w	r3, r3, #4
 800792c:	6713      	str	r3, [r2, #112]	; 0x70
 800792e:	e01c      	b.n	800796a <HAL_RCC_OscConfig+0x4de>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b05      	cmp	r3, #5
 8007936:	d10c      	bne.n	8007952 <HAL_RCC_OscConfig+0x4c6>
 8007938:	4b20      	ldr	r3, [pc, #128]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800793e:	f043 0304 	orr.w	r3, r3, #4
 8007942:	6713      	str	r3, [r2, #112]	; 0x70
 8007944:	4b1d      	ldr	r3, [pc, #116]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	4a1c      	ldr	r2, [pc, #112]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	6713      	str	r3, [r2, #112]	; 0x70
 8007950:	e00b      	b.n	800796a <HAL_RCC_OscConfig+0x4de>
 8007952:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007964:	f023 0304 	bic.w	r3, r3, #4
 8007968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007972:	f7fb ff79 	bl	8003868 <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007978:	e00a      	b.n	8007990 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800797a:	f7fb ff75 	bl	8003868 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	f241 3288 	movw	r2, #5000	; 0x1388
 8007988:	4293      	cmp	r3, r2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e11e      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <HAL_RCC_OscConfig+0x530>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0ee      	beq.n	800797a <HAL_RCC_OscConfig+0x4ee>
 800799c:	e018      	b.n	80079d0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799e:	f7fb ff63 	bl	8003868 <HAL_GetTick>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079a4:	e00e      	b.n	80079c4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a6:	f7fb ff5f 	bl	8003868 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d905      	bls.n	80079c4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e108      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
 80079bc:	58024400 	.word	0x58024400
 80079c0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079c4:	4b84      	ldr	r3, [pc, #528]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ea      	bne.n	80079a6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80f9 	beq.w	8007bcc <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079da:	4b7f      	ldr	r3, [pc, #508]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079e2:	2b18      	cmp	r3, #24
 80079e4:	f000 80b4 	beq.w	8007b50 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	f040 8095 	bne.w	8007b1c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f2:	4b79      	ldr	r3, [pc, #484]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a78      	ldr	r2, [pc, #480]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 80079f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fe:	f7fb ff33 	bl	8003868 <HAL_GetTick>
 8007a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a06:	f7fb ff2f 	bl	8003868 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e0da      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a18:	4b6f      	ldr	r3, [pc, #444]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1f0      	bne.n	8007a06 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a24:	4b6c      	ldr	r3, [pc, #432]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a28:	4b6c      	ldr	r3, [pc, #432]	; (8007bdc <HAL_RCC_OscConfig+0x750>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	430a      	orrs	r2, r1
 8007a38:	4967      	ldr	r1, [pc, #412]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	628b      	str	r3, [r1, #40]	; 0x28
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	025b      	lsls	r3, r3, #9
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	3b01      	subs	r3, #1
 8007a68:	061b      	lsls	r3, r3, #24
 8007a6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a6e:	495a      	ldr	r1, [pc, #360]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007a74:	4b58      	ldr	r3, [pc, #352]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	4a57      	ldr	r2, [pc, #348]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a7a:	f023 0301 	bic.w	r3, r3, #1
 8007a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a80:	4b55      	ldr	r3, [pc, #340]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a84:	4b56      	ldr	r3, [pc, #344]	; (8007be0 <HAL_RCC_OscConfig+0x754>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a8c:	00d2      	lsls	r2, r2, #3
 8007a8e:	4952      	ldr	r1, [pc, #328]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a94:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f023 020c 	bic.w	r2, r3, #12
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	494d      	ldr	r1, [pc, #308]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007aa6:	4b4c      	ldr	r3, [pc, #304]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	f023 0202 	bic.w	r2, r3, #2
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab2:	4949      	ldr	r1, [pc, #292]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ab8:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	4a46      	ldr	r2, [pc, #280]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac4:	4b44      	ldr	r3, [pc, #272]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	4a43      	ldr	r2, [pc, #268]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ad0:	4b41      	ldr	r3, [pc, #260]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	4a40      	ldr	r2, [pc, #256]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007adc:	4b3e      	ldr	r3, [pc, #248]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4a3d      	ldr	r2, [pc, #244]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ae8:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3a      	ldr	r2, [pc, #232]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af4:	f7fb feb8 	bl	8003868 <HAL_GetTick>
 8007af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007afc:	f7fb feb4 	bl	8003868 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e05f      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f0      	beq.n	8007afc <HAL_RCC_OscConfig+0x670>
 8007b1a:	e057      	b.n	8007bcc <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1c:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a2d      	ldr	r2, [pc, #180]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fb fe9e 	bl	8003868 <HAL_GetTick>
 8007b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b30:	f7fb fe9a 	bl	8003868 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e045      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b42:	4b25      	ldr	r3, [pc, #148]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f0      	bne.n	8007b30 <HAL_RCC_OscConfig+0x6a4>
 8007b4e:	e03d      	b.n	8007bcc <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b56:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <HAL_RCC_OscConfig+0x74c>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d031      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f003 0203 	and.w	r2, r3, #3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d12a      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	091b      	lsrs	r3, r3, #4
 8007b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d122      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d11a      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	0a5b      	lsrs	r3, r3, #9
 8007b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d111      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d108      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	0e1b      	lsrs	r3, r3, #24
 8007bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d001      	beq.n	8007bcc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3730      	adds	r7, #48	; 0x30
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	fffffc0c 	.word	0xfffffc0c
 8007be0:	ffff0007 	.word	0xffff0007

08007be4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e19c      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bf8:	4b8a      	ldr	r3, [pc, #552]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d910      	bls.n	8007c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c06:	4b87      	ldr	r3, [pc, #540]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f023 020f 	bic.w	r2, r3, #15
 8007c0e:	4985      	ldr	r1, [pc, #532]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c16:	4b83      	ldr	r3, [pc, #524]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e184      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d010      	beq.n	8007c56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	4b7b      	ldr	r3, [pc, #492]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d908      	bls.n	8007c56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c44:	4b78      	ldr	r3, [pc, #480]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	4975      	ldr	r1, [pc, #468]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d010      	beq.n	8007c84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	4b70      	ldr	r3, [pc, #448]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d908      	bls.n	8007c84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c72:	4b6d      	ldr	r3, [pc, #436]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	496a      	ldr	r1, [pc, #424]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d010      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	4b64      	ldr	r3, [pc, #400]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d908      	bls.n	8007cb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ca0:	4b61      	ldr	r3, [pc, #388]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	495e      	ldr	r1, [pc, #376]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69da      	ldr	r2, [r3, #28]
 8007cc2:	4b59      	ldr	r3, [pc, #356]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d908      	bls.n	8007ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007cce:	4b56      	ldr	r3, [pc, #344]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4953      	ldr	r1, [pc, #332]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	4b4d      	ldr	r3, [pc, #308]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d908      	bls.n	8007d0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cfc:	4b4a      	ldr	r3, [pc, #296]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f023 020f 	bic.w	r2, r3, #15
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4947      	ldr	r1, [pc, #284]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d055      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d1a:	4b43      	ldr	r3, [pc, #268]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	4940      	ldr	r1, [pc, #256]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d107      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d34:	4b3c      	ldr	r3, [pc, #240]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d121      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0f6      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d4c:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d115      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0ea      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d107      	bne.n	8007d74 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d64:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e0de      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d74:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0d6      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f023 0207 	bic.w	r2, r3, #7
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4925      	ldr	r1, [pc, #148]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fb fd67 	bl	8003868 <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9c:	e00a      	b.n	8007db4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d9e:	f7fb fd63 	bl	8003868 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e0be      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db4:	4b1c      	ldr	r3, [pc, #112]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d1eb      	bne.n	8007d9e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d010      	beq.n	8007df4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d208      	bcs.n	8007df4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de2:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f023 020f 	bic.w	r2, r3, #15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	490e      	ldr	r1, [pc, #56]	; (8007e28 <HAL_RCC_ClockConfig+0x244>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d214      	bcs.n	8007e2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f023 020f 	bic.w	r2, r3, #15
 8007e0a:	4906      	ldr	r1, [pc, #24]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e12:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <HAL_RCC_ClockConfig+0x240>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d005      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e086      	b.n	8007f32 <HAL_RCC_ClockConfig+0x34e>
 8007e24:	52002000 	.word	0x52002000
 8007e28:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	4b3f      	ldr	r3, [pc, #252]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d208      	bcs.n	8007e5a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e48:	4b3c      	ldr	r3, [pc, #240]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	4939      	ldr	r1, [pc, #228]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695a      	ldr	r2, [r3, #20]
 8007e6a:	4b34      	ldr	r3, [pc, #208]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d208      	bcs.n	8007e88 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e76:	4b31      	ldr	r3, [pc, #196]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	492e      	ldr	r1, [pc, #184]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d010      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	4b28      	ldr	r3, [pc, #160]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d208      	bcs.n	8007eb6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	4922      	ldr	r1, [pc, #136]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d010      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69da      	ldr	r2, [r3, #28]
 8007ec6:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d208      	bcs.n	8007ee4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ed2:	4b1a      	ldr	r3, [pc, #104]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	4917      	ldr	r1, [pc, #92]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ee4:	f000 f844 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	0a1b      	lsrs	r3, r3, #8
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	4912      	ldr	r1, [pc, #72]	; (8007f40 <HAL_RCC_ClockConfig+0x35c>)
 8007ef6:	5ccb      	ldrb	r3, [r1, r3]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
 8007f00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <HAL_RCC_ClockConfig+0x358>)
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <HAL_RCC_ClockConfig+0x35c>)
 8007f0c:	5cd3      	ldrb	r3, [r2, r3]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
 8007f18:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <HAL_RCC_ClockConfig+0x360>)
 8007f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f1c:	4a0a      	ldr	r2, [pc, #40]	; (8007f48 <HAL_RCC_ClockConfig+0x364>)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <HAL_RCC_ClockConfig+0x368>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fb fc54 	bl	80037d4 <HAL_InitTick>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	0800faf8 	.word	0x0800faf8
 8007f44:	24000010 	.word	0x24000010
 8007f48:	2400000c 	.word	0x2400000c
 8007f4c:	24000014 	.word	0x24000014

08007f50 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <HAL_RCC_EnableCSS+0x1c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a04      	ldr	r2, [pc, #16]	; (8007f6c <HAL_RCC_EnableCSS+0x1c>)
 8007f5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400

08007f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	; 0x24
 8007f74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f76:	4bb3      	ldr	r3, [pc, #716]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f7e:	2b18      	cmp	r3, #24
 8007f80:	f200 8155 	bhi.w	800822e <HAL_RCC_GetSysClockFreq+0x2be>
 8007f84:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007ff1 	.word	0x08007ff1
 8007f90:	0800822f 	.word	0x0800822f
 8007f94:	0800822f 	.word	0x0800822f
 8007f98:	0800822f 	.word	0x0800822f
 8007f9c:	0800822f 	.word	0x0800822f
 8007fa0:	0800822f 	.word	0x0800822f
 8007fa4:	0800822f 	.word	0x0800822f
 8007fa8:	0800822f 	.word	0x0800822f
 8007fac:	08008017 	.word	0x08008017
 8007fb0:	0800822f 	.word	0x0800822f
 8007fb4:	0800822f 	.word	0x0800822f
 8007fb8:	0800822f 	.word	0x0800822f
 8007fbc:	0800822f 	.word	0x0800822f
 8007fc0:	0800822f 	.word	0x0800822f
 8007fc4:	0800822f 	.word	0x0800822f
 8007fc8:	0800822f 	.word	0x0800822f
 8007fcc:	0800801d 	.word	0x0800801d
 8007fd0:	0800822f 	.word	0x0800822f
 8007fd4:	0800822f 	.word	0x0800822f
 8007fd8:	0800822f 	.word	0x0800822f
 8007fdc:	0800822f 	.word	0x0800822f
 8007fe0:	0800822f 	.word	0x0800822f
 8007fe4:	0800822f 	.word	0x0800822f
 8007fe8:	0800822f 	.word	0x0800822f
 8007fec:	08008023 	.word	0x08008023
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ff0:	4b94      	ldr	r3, [pc, #592]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ffc:	4b91      	ldr	r3, [pc, #580]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	08db      	lsrs	r3, r3, #3
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	4a90      	ldr	r2, [pc, #576]	; (8008248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
 800800c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800800e:	e111      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008010:	4b8d      	ldr	r3, [pc, #564]	; (8008248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008012:	61bb      	str	r3, [r7, #24]
    break;
 8008014:	e10e      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008016:	4b8d      	ldr	r3, [pc, #564]	; (800824c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008018:	61bb      	str	r3, [r7, #24]
    break;
 800801a:	e10b      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800801c:	4b8c      	ldr	r3, [pc, #560]	; (8008250 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800801e:	61bb      	str	r3, [r7, #24]
    break;
 8008020:	e108      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008022:	4b88      	ldr	r3, [pc, #544]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800802c:	4b85      	ldr	r3, [pc, #532]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	091b      	lsrs	r3, r3, #4
 8008032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008036:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008038:	4b82      	ldr	r3, [pc, #520]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008042:	4b80      	ldr	r3, [pc, #512]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	08db      	lsrs	r3, r3, #3
 8008048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	fb02 f303 	mul.w	r3, r2, r3
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80e1 	beq.w	8008228 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b02      	cmp	r3, #2
 800806a:	f000 8083 	beq.w	8008174 <HAL_RCC_GetSysClockFreq+0x204>
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f200 80a1 	bhi.w	80081b8 <HAL_RCC_GetSysClockFreq+0x248>
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_RCC_GetSysClockFreq+0x114>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d056      	beq.n	8008130 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008082:	e099      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008084:	4b6f      	ldr	r3, [pc, #444]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d02d      	beq.n	80080ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008090:	4b6c      	ldr	r3, [pc, #432]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	08db      	lsrs	r3, r3, #3
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	4a6b      	ldr	r2, [pc, #428]	; (8008248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b62      	ldr	r3, [pc, #392]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80080ea:	e087      	b.n	80081fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008258 <HAL_RCC_GetSysClockFreq+0x2e8>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b51      	ldr	r3, [pc, #324]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008112:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008254 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800812e:	e065      	b.n	80081fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800825c <HAL_RCC_GetSysClockFreq+0x2ec>
 800813e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008142:	4b40      	ldr	r3, [pc, #256]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed97 6a02 	vldr	s12, [r7, #8]
 8008156:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800815a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008172:	e043      	b.n	80081fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008260 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008186:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008196:	ed97 6a02 	vldr	s12, [r7, #8]
 800819a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800819e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081b6:	e021      	b.n	80081fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800825c <HAL_RCC_GetSysClockFreq+0x2ec>
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	ed97 6a02 	vldr	s12, [r7, #8]
 80081de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	0a5b      	lsrs	r3, r3, #9
 8008202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008206:	3301      	adds	r3, #1
 8008208:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008214:	edd7 6a07 	vldr	s13, [r7, #28]
 8008218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800821c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008220:	ee17 3a90 	vmov	r3, s15
 8008224:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008226:	e005      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
    break;
 800822c:	e002      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008230:	61bb      	str	r3, [r7, #24]
    break;
 8008232:	bf00      	nop
  }

  return sysclockfreq;
 8008234:	69bb      	ldr	r3, [r7, #24]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3724      	adds	r7, #36	; 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	003d0900 	.word	0x003d0900
 8008250:	017d7840 	.word	0x017d7840
 8008254:	46000000 	.word	0x46000000
 8008258:	4c742400 	.word	0x4c742400
 800825c:	4a742400 	.word	0x4a742400
 8008260:	4bbebc20 	.word	0x4bbebc20

08008264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800826a:	f7ff fe81 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800826e:	4602      	mov	r2, r0
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	0a1b      	lsrs	r3, r3, #8
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	490f      	ldr	r1, [pc, #60]	; (80082b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800827c:	5ccb      	ldrb	r3, [r1, r3]
 800827e:	f003 031f 	and.w	r3, r3, #31
 8008282:	fa22 f303 	lsr.w	r3, r2, r3
 8008286:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008292:	5cd3      	ldrb	r3, [r2, r3]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	fa22 f303 	lsr.w	r3, r2, r3
 800829e:	4a07      	ldr	r2, [pc, #28]	; (80082bc <HAL_RCC_GetHCLKFreq+0x58>)
 80082a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082a2:	4a07      	ldr	r2, [pc, #28]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <HAL_RCC_GetHCLKFreq+0x58>)
 80082aa:	681b      	ldr	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	58024400 	.word	0x58024400
 80082b8:	0800faf8 	.word	0x0800faf8
 80082bc:	24000010 	.word	0x24000010
 80082c0:	2400000c 	.word	0x2400000c

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80082c8:	f7ff ffcc 	bl	8008264 <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	091b      	lsrs	r3, r3, #4
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4904      	ldr	r1, [pc, #16]	; (80082ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	58024400 	.word	0x58024400
 80082ec:	0800faf8 	.word	0x0800faf8

080082f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80082f4:	f7ff ffb6 	bl	8008264 <HAL_RCC_GetHCLKFreq>
 80082f8:	4602      	mov	r2, r0
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	4904      	ldr	r1, [pc, #16]	; (8008318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008306:	5ccb      	ldrb	r3, [r1, r3]
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	58024400 	.word	0x58024400
 8008318:	0800faf8 	.word	0x0800faf8

0800831c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832c:	d105      	bne.n	800833a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800832e:	f000 f809 	bl	8008344 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008338:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400

08008344 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008360:	2300      	movs	r3, #0
 8008362:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d03f      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008374:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008378:	d02a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800837a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800837e:	d824      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008384:	d018      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800838a:	d81e      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008394:	d007      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008396:	e018      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4bab      	ldr	r3, [pc, #684]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4aaa      	ldr	r2, [pc, #680]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083a4:	e015      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	2102      	movs	r1, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 feff 	bl	800a1b0 <RCCEx_PLL2_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083b6:	e00c      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	2102      	movs	r1, #2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 ffa8 	bl	800a314 <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083c8:	e003      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
      break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083d8:	4b9b      	ldr	r3, [pc, #620]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e4:	4998      	ldr	r1, [pc, #608]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	650b      	str	r3, [r1, #80]	; 0x50
 80083ea:	e001      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d03d      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008400:	2b04      	cmp	r3, #4
 8008402:	d826      	bhi.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008404:	a201      	add	r2, pc, #4	; (adr r2, 800840c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008421 	.word	0x08008421
 8008410:	0800842f 	.word	0x0800842f
 8008414:	08008441 	.word	0x08008441
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008420:	4b89      	ldr	r3, [pc, #548]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4a88      	ldr	r2, [pc, #544]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800842c:	e015      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f001 febb 	bl	800a1b0 <RCCEx_PLL2_Config>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800843e:	e00c      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3324      	adds	r3, #36	; 0x24
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f001 ff64 	bl	800a314 <RCCEx_PLL3_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008450:	e003      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
      break;
 8008456:	e000      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008460:	4b79      	ldr	r3, [pc, #484]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	f023 0207 	bic.w	r2, r3, #7
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846c:	4976      	ldr	r1, [pc, #472]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800846e:	4313      	orrs	r3, r2
 8008470:	650b      	str	r3, [r1, #80]	; 0x50
 8008472:	e001      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008480:	2b00      	cmp	r3, #0
 8008482:	d051      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800848a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800848e:	d036      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008490:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008494:	d830      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849a:	d032      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800849c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a0:	d82a      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084a6:	d02e      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80084a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084ac:	d824      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b2:	d018      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80084b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b8:	d81e      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80084be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c2:	d007      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80084c4:	e018      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c6:	4b60      	ldr	r3, [pc, #384]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	4a5f      	ldr	r2, [pc, #380]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084d2:	e019      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fe68 	bl	800a1b0 <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084e4:	e010      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3324      	adds	r3, #36	; 0x24
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 ff11 	bl	800a314 <RCCEx_PLL3_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084f6:	e007      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	75fb      	strb	r3, [r7, #23]
      break;
 80084fc:	e004      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80084fe:	bf00      	nop
 8008500:	e002      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008502:	bf00      	nop
 8008504:	e000      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800850e:	4b4e      	ldr	r3, [pc, #312]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800851c:	494a      	ldr	r1, [pc, #296]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800851e:	4313      	orrs	r3, r2
 8008520:	658b      	str	r3, [r1, #88]	; 0x58
 8008522:	e001      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008530:	2b00      	cmp	r3, #0
 8008532:	d051      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800853a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800853e:	d036      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008540:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008544:	d830      	bhi.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800854a:	d032      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800854c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008550:	d82a      	bhi.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008556:	d02e      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800855c:	d824      	bhi.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800855e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008562:	d018      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008568:	d81e      	bhi.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800856e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008572:	d007      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008574:	e018      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008576:	4b34      	ldr	r3, [pc, #208]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	4a33      	ldr	r2, [pc, #204]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800857c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008582:	e019      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f001 fe10 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008594:	e010      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3324      	adds	r3, #36	; 0x24
 800859a:	2100      	movs	r1, #0
 800859c:	4618      	mov	r0, r3
 800859e:	f001 feb9 	bl	800a314 <RCCEx_PLL3_Config>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085a6:	e007      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
      break;
 80085ac:	e004      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085ae:	bf00      	nop
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085b2:	bf00      	nop
 80085b4:	e000      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085cc:	491e      	ldr	r1, [pc, #120]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	658b      	str	r3, [r1, #88]	; 0x58
 80085d2:	e001      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d035      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	d01c      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80085ec:	2b30      	cmp	r3, #48	; 0x30
 80085ee:	d817      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d00c      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d813      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d016      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d10f      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a10      	ldr	r2, [pc, #64]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800860c:	e00e      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	2102      	movs	r1, #2
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fdcb 	bl	800a1b0 <RCCEx_PLL2_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800861e:	e005      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
      break;
 8008624:	e002      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800862a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10c      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	4902      	ldr	r1, [pc, #8]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008640:	4313      	orrs	r3, r2
 8008642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008644:	e004      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d047      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008664:	d030      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800866a:	d82a      	bhi.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800866c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008670:	d02c      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008676:	d824      	bhi.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800867c:	d018      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800867e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008682:	d81e      	bhi.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868c:	d007      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800868e:	e018      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008690:	4bac      	ldr	r3, [pc, #688]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	4aab      	ldr	r2, [pc, #684]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800869c:	e017      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fd83 	bl	800a1b0 <RCCEx_PLL2_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086ae:	e00e      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fe2c 	bl	800a314 <RCCEx_PLL3_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086c0:	e005      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	75fb      	strb	r3, [r7, #23]
      break;
 80086c6:	e002      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086c8:	bf00      	nop
 80086ca:	e000      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086d4:	4b9b      	ldr	r3, [pc, #620]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e0:	4998      	ldr	r1, [pc, #608]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	650b      	str	r3, [r1, #80]	; 0x50
 80086e6:	e001      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d049      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008700:	d02e      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008706:	d828      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800870c:	d02a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800870e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008712:	d822      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008718:	d026      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800871a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800871e:	d81c      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008724:	d010      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872a:	d816      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01d      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008734:	d111      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3304      	adds	r3, #4
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fd37 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008746:	e012      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	2101      	movs	r1, #1
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fde0 	bl	800a314 <RCCEx_PLL3_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008758:	e009      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
      break;
 800875e:	e006      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800876c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008774:	4b73      	ldr	r3, [pc, #460]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008778:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	4970      	ldr	r1, [pc, #448]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008782:	4313      	orrs	r3, r2
 8008784:	650b      	str	r3, [r1, #80]	; 0x50
 8008786:	e001      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d04b      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800879e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a2:	d02e      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80087a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a8:	d828      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ae:	d02a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80087b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b4:	d822      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ba:	d026      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80087bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087c0:	d81c      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d010      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x496>
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d816      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01d      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d6:	d111      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	2101      	movs	r1, #1
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fce6 	bl	800a1b0 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087e8:	e012      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3324      	adds	r3, #36	; 0x24
 80087ee:	2101      	movs	r1, #1
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 fd8f 	bl	800a314 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087fa:	e009      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008800:	e006      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008802:	bf00      	nop
 8008804:	e004      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008806:	bf00      	nop
 8008808:	e002      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800880e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008816:	4b4b      	ldr	r3, [pc, #300]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008824:	4947      	ldr	r1, [pc, #284]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008826:	4313      	orrs	r3, r2
 8008828:	658b      	str	r3, [r1, #88]	; 0x58
 800882a:	e001      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d02f      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008844:	d00e      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884a:	d814      	bhi.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d015      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008854:	d10f      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008856:	4b3b      	ldr	r3, [pc, #236]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885a:	4a3a      	ldr	r2, [pc, #232]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800885c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008862:	e00c      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	2101      	movs	r1, #1
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fca0 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008874:	e003      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]
      break;
 800887a:	e000      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800887c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008884:	4b2f      	ldr	r3, [pc, #188]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008888:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008890:	492c      	ldr	r1, [pc, #176]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008892:	4313      	orrs	r3, r2
 8008894:	650b      	str	r3, [r1, #80]	; 0x50
 8008896:	e001      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d032      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d81b      	bhi.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088ef 	.word	0x080088ef
 80088bc:	080088c9 	.word	0x080088c9
 80088c0:	080088d7 	.word	0x080088d7
 80088c4:	080088ef 	.word	0x080088ef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088d4:	e00c      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3304      	adds	r3, #4
 80088da:	2102      	movs	r1, #2
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fc67 	bl	800a1b0 <RCCEx_PLL2_Config>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
      break;
 80088ec:	e000      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80088ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d109      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fa:	f023 0203 	bic.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	4910      	ldr	r1, [pc, #64]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008908:	e001      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 808a 	beq.w	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a09      	ldr	r2, [pc, #36]	; (8008948 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008928:	f7fa ff9e 	bl	8003868 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800892e:	e00d      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008930:	f7fa ff9a 	bl	8003868 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b64      	cmp	r3, #100	; 0x64
 800893c:	d906      	bls.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	75fb      	strb	r3, [r7, #23]
        break;
 8008942:	e009      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008944:	58024400 	.word	0x58024400
 8008948:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894c:	4bb9      	ldr	r3, [pc, #740]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0eb      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d166      	bne.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800895e:	4bb6      	ldr	r3, [pc, #728]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008968:	4053      	eors	r3, r2
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d013      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008972:	4bb1      	ldr	r3, [pc, #708]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800897a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800897c:	4bae      	ldr	r3, [pc, #696]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	4aad      	ldr	r2, [pc, #692]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008986:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008988:	4bab      	ldr	r3, [pc, #684]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	4aaa      	ldr	r2, [pc, #680]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800898e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008992:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008994:	4aa8      	ldr	r2, [pc, #672]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a4:	d115      	bne.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a6:	f7fa ff5f 	bl	8003868 <HAL_GetTick>
 80089aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ac:	e00b      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ae:	f7fa ff5b 	bl	8003868 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089bc:	4293      	cmp	r3, r2
 80089be:	d902      	bls.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	75fb      	strb	r3, [r7, #23]
            break;
 80089c4:	e005      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c6:	4b9c      	ldr	r3, [pc, #624]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0ed      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d126      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e6:	d10d      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80089e8:	4b93      	ldr	r3, [pc, #588]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089f6:	0919      	lsrs	r1, r3, #4
 80089f8:	4b90      	ldr	r3, [pc, #576]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80089fa:	400b      	ands	r3, r1
 80089fc:	498e      	ldr	r1, [pc, #568]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	610b      	str	r3, [r1, #16]
 8008a02:	e005      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008a04:	4b8c      	ldr	r3, [pc, #560]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	4a8b      	ldr	r2, [pc, #556]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a0e:	6113      	str	r3, [r2, #16]
 8008a10:	4b89      	ldr	r3, [pc, #548]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1e:	4986      	ldr	r1, [pc, #536]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	670b      	str	r3, [r1, #112]	; 0x70
 8008a24:	e004      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	75bb      	strb	r3, [r7, #22]
 8008a2a:	e001      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d07e      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a40:	2b28      	cmp	r3, #40	; 0x28
 8008a42:	d867      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008b1b 	.word	0x08008b1b
 8008a50:	08008b15 	.word	0x08008b15
 8008a54:	08008b15 	.word	0x08008b15
 8008a58:	08008b15 	.word	0x08008b15
 8008a5c:	08008b15 	.word	0x08008b15
 8008a60:	08008b15 	.word	0x08008b15
 8008a64:	08008b15 	.word	0x08008b15
 8008a68:	08008b15 	.word	0x08008b15
 8008a6c:	08008af1 	.word	0x08008af1
 8008a70:	08008b15 	.word	0x08008b15
 8008a74:	08008b15 	.word	0x08008b15
 8008a78:	08008b15 	.word	0x08008b15
 8008a7c:	08008b15 	.word	0x08008b15
 8008a80:	08008b15 	.word	0x08008b15
 8008a84:	08008b15 	.word	0x08008b15
 8008a88:	08008b15 	.word	0x08008b15
 8008a8c:	08008b03 	.word	0x08008b03
 8008a90:	08008b15 	.word	0x08008b15
 8008a94:	08008b15 	.word	0x08008b15
 8008a98:	08008b15 	.word	0x08008b15
 8008a9c:	08008b15 	.word	0x08008b15
 8008aa0:	08008b15 	.word	0x08008b15
 8008aa4:	08008b15 	.word	0x08008b15
 8008aa8:	08008b15 	.word	0x08008b15
 8008aac:	08008b1b 	.word	0x08008b1b
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b15 	.word	0x08008b15
 8008ab8:	08008b15 	.word	0x08008b15
 8008abc:	08008b15 	.word	0x08008b15
 8008ac0:	08008b15 	.word	0x08008b15
 8008ac4:	08008b15 	.word	0x08008b15
 8008ac8:	08008b15 	.word	0x08008b15
 8008acc:	08008b1b 	.word	0x08008b1b
 8008ad0:	08008b15 	.word	0x08008b15
 8008ad4:	08008b15 	.word	0x08008b15
 8008ad8:	08008b15 	.word	0x08008b15
 8008adc:	08008b15 	.word	0x08008b15
 8008ae0:	08008b15 	.word	0x08008b15
 8008ae4:	08008b15 	.word	0x08008b15
 8008ae8:	08008b15 	.word	0x08008b15
 8008aec:	08008b1b 	.word	0x08008b1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	2101      	movs	r1, #1
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fb5a 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b00:	e00c      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3324      	adds	r3, #36	; 0x24
 8008b06:	2101      	movs	r1, #1
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 fc03 	bl	800a314 <RCCEx_PLL3_Config>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b12:	e003      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
      break;
 8008b18:	e000      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b22:	4b45      	ldr	r3, [pc, #276]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2e:	4942      	ldr	r1, [pc, #264]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	654b      	str	r3, [r1, #84]	; 0x54
 8008b34:	e001      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d037      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d820      	bhi.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008b4e:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b97 	.word	0x08008b97
 8008b58:	08008b6d 	.word	0x08008b6d
 8008b5c:	08008b7f 	.word	0x08008b7f
 8008b60:	08008b97 	.word	0x08008b97
 8008b64:	08008b97 	.word	0x08008b97
 8008b68:	08008b97 	.word	0x08008b97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	2101      	movs	r1, #1
 8008b72:	4618      	mov	r0, r3
 8008b74:	f001 fb1c 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b7c:	e00c      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3324      	adds	r3, #36	; 0x24
 8008b82:	2101      	movs	r1, #1
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 fbc5 	bl	800a314 <RCCEx_PLL3_Config>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b8e:	e003      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]
      break;
 8008b94:	e000      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba2:	f023 0207 	bic.w	r2, r3, #7
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	4923      	ldr	r1, [pc, #140]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	654b      	str	r3, [r1, #84]	; 0x54
 8008bb0:	e001      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d040      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	d821      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008c17 	.word	0x08008c17
 8008bd8:	08008bed 	.word	0x08008bed
 8008bdc:	08008bff 	.word	0x08008bff
 8008be0:	08008c17 	.word	0x08008c17
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fadc 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bfc:	e00c      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3324      	adds	r3, #36	; 0x24
 8008c02:	2101      	movs	r1, #1
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fb85 	bl	800a314 <RCCEx_PLL3_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c0e:	e003      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
      break;
 8008c14:	e000      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d110      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c22:	f023 0207 	bic.w	r2, r3, #7
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c2c:	4902      	ldr	r1, [pc, #8]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	658b      	str	r3, [r1, #88]	; 0x58
 8008c32:	e007      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008c34:	58024800 	.word	0x58024800
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d04b      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c5a:	d02e      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c60:	d828      	bhi.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c66:	d02a      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6c:	d822      	bhi.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c72:	d026      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c78:	d81c      	bhi.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c7e:	d010      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c84:	d816      	bhi.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01d      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c8e:	d111      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fa8a 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ca0:	e012      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fb33 	bl	800a314 <RCCEx_PLL3_Config>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cb2:	e009      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cba:	bf00      	nop
 8008cbc:	e004      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cbe:	bf00      	nop
 8008cc0:	e002      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e000      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cce:	4bb2      	ldr	r3, [pc, #712]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cdc:	49ae      	ldr	r1, [pc, #696]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	654b      	str	r3, [r1, #84]	; 0x54
 8008ce2:	e001      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d04b      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008cfe:	d02e      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008d00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d04:	d828      	bhi.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0a:	d02a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d10:	d822      	bhi.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d16:	d026      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d1c:	d81c      	bhi.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d22:	d010      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d28:	d816      	bhi.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01d      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d32:	d111      	bne.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3304      	adds	r3, #4
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 fa38 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d44:	e012      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3324      	adds	r3, #36	; 0x24
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 fae1 	bl	800a314 <RCCEx_PLL3_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d56:	e009      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d5e:	bf00      	nop
 8008d60:	e004      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d62:	bf00      	nop
 8008d64:	e002      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d66:	bf00      	nop
 8008d68:	e000      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d72:	4b89      	ldr	r3, [pc, #548]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d80:	4985      	ldr	r1, [pc, #532]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	658b      	str	r3, [r1, #88]	; 0x58
 8008d86:	e001      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d04b      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008da2:	d02e      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008da4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008da8:	d828      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dae:	d02a      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db4:	d822      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008db6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dba:	d026      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008dbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dc0:	d81c      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc6:	d010      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dcc:	d816      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01d      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd6:	d111      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 f9e6 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008de8:	e012      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3324      	adds	r3, #36	; 0x24
 8008dee:	2102      	movs	r1, #2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fa8f 	bl	800a314 <RCCEx_PLL3_Config>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dfa:	e009      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008e00:	e006      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e02:	bf00      	nop
 8008e04:	e004      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e06:	bf00      	nop
 8008e08:	e002      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e16:	4b60      	ldr	r3, [pc, #384]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e24:	495c      	ldr	r1, [pc, #368]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	658b      	str	r3, [r1, #88]	; 0x58
 8008e2a:	e001      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d018      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e44:	d10a      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3324      	adds	r3, #36	; 0x24
 8008e4a:	2102      	movs	r1, #2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 fa61 	bl	800a314 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008e5c:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e68:	494b      	ldr	r1, [pc, #300]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01a      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e84:	d10a      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3324      	adds	r3, #36	; 0x24
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 fa41 	bl	800a314 <RCCEx_PLL3_Config>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e9c:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eaa:	493b      	ldr	r1, [pc, #236]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d034      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec6:	d01d      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ecc:	d817      	bhi.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed6:	d009      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ed8:	e011      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3304      	adds	r3, #4
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 f965 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008eea:	e00c      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3324      	adds	r3, #36	; 0x24
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 fa0e 	bl	800a314 <RCCEx_PLL3_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
      break;
 8008f02:	e000      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f0c:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f1a:	491f      	ldr	r1, [pc, #124]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8008f20:	e001      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d036      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f3c:	d01c      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f42:	d816      	bhi.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f48:	d003      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f4e:	d007      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008f50:	e00f      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f52:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	4a10      	ldr	r2, [pc, #64]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f5e:	e00c      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3324      	adds	r3, #36	; 0x24
 8008f64:	2101      	movs	r1, #1
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 f9d4 	bl	800a314 <RCCEx_PLL3_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f70:	e003      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
      break;
 8008f76:	e000      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10d      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8e:	4902      	ldr	r1, [pc, #8]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	654b      	str	r3, [r1, #84]	; 0x54
 8008f94:	e004      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d029      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d007      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008fba:	e00f      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fbc:	4b61      	ldr	r3, [pc, #388]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	4a60      	ldr	r2, [pc, #384]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fc8:	e00b      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 f8ed 	bl	800a1b0 <RCCEx_PLL2_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fda:	e002      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fe8:	4b56      	ldr	r3, [pc, #344]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff4:	4953      	ldr	r1, [pc, #332]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ffa:	e001      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3324      	adds	r3, #36	; 0x24
 8009010:	2102      	movs	r1, #2
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f97e 	bl	800a314 <RCCEx_PLL3_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d030      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009036:	d017      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800903c:	d811      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800903e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009042:	d013      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009048:	d80b      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d010      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800904e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009052:	d106      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009054:	4b3b      	ldr	r3, [pc, #236]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	4a3a      	ldr	r2, [pc, #232]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800905a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009060:	e007      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	75fb      	strb	r3, [r7, #23]
      break;
 8009066:	e004      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009068:	bf00      	nop
 800906a:	e002      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800906c:	bf00      	nop
 800906e:	e000      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009078:	4b32      	ldr	r3, [pc, #200]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009084:	492f      	ldr	r1, [pc, #188]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009086:	4313      	orrs	r3, r2
 8009088:	654b      	str	r3, [r1, #84]	; 0x54
 800908a:	e001      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d008      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800909c:	4b29      	ldr	r3, [pc, #164]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a8:	4926      	ldr	r1, [pc, #152]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d008      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090ba:	4b22      	ldr	r3, [pc, #136]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c6:	491f      	ldr	r1, [pc, #124]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00d      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090d8:	4b1a      	ldr	r3, [pc, #104]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	4a19      	ldr	r2, [pc, #100]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090e2:	6113      	str	r3, [r2, #16]
 80090e4:	4b17      	ldr	r3, [pc, #92]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090ee:	4915      	ldr	r1, [pc, #84]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da08      	bge.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009100:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	490e      	ldr	r1, [pc, #56]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800910a:	4313      	orrs	r3, r2
 800910c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800911a:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009128:	4906      	ldr	r1, [pc, #24]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800912a:	4313      	orrs	r3, r2
 800912c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800912e:	7dbb      	ldrb	r3, [r7, #22]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	58024400 	.word	0x58024400

08009148 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b090      	sub	sp, #64	; 0x40
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009156:	f040 8089 	bne.w	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800915a:	4b95      	ldr	r3, [pc, #596]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800915c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	633b      	str	r3, [r7, #48]	; 0x30
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	2b04      	cmp	r3, #4
 8009168:	d87d      	bhi.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	08009185 	.word	0x08009185
 8009174:	080091a9 	.word	0x080091a9
 8009178:	080091cd 	.word	0x080091cd
 800917c:	08009261 	.word	0x08009261
 8009180:	080091f1 	.word	0x080091f1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009184:	4b8a      	ldr	r3, [pc, #552]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009190:	d107      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009196:	4618      	mov	r0, r3
 8009198:	f000 feb8 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a0:	e3ed      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a6:	e3ea      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091a8:	4b81      	ldr	r3, [pc, #516]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091b4:	d107      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b6:	f107 0318 	add.w	r3, r7, #24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fbfe 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091c4:	e3db      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ca:	e3d8      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091cc:	4b78      	ldr	r3, [pc, #480]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d8:	d107      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fd40 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091e8:	e3c9      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ee:	e3c6      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091f0:	4b6f      	ldr	r3, [pc, #444]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091fa:	4b6d      	ldr	r3, [pc, #436]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b04      	cmp	r3, #4
 8009204:	d10c      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	2b00      	cmp	r3, #0
 800920a:	d109      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800920c:	4b68      	ldr	r3, [pc, #416]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	08db      	lsrs	r3, r3, #3
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	4a67      	ldr	r2, [pc, #412]	; (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921e:	e01e      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009220:	4b63      	ldr	r3, [pc, #396]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009236:	4b60      	ldr	r3, [pc, #384]	; (80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923a:	e010      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800923c:	4b5c      	ldr	r3, [pc, #368]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009248:	d106      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009250:	d102      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009252:	4b5a      	ldr	r3, [pc, #360]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009256:	e002      	b.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800925c:	e38f      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800925e:	e38e      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009260:	4b57      	ldr	r3, [pc, #348]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009264:	e38b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800926a:	e388      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009272:	f040 80a7 	bne.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009276:	4b4e      	ldr	r3, [pc, #312]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800927e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009286:	d054      	beq.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800928e:	f200 808b 	bhi.w	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009298:	f000 8083 	beq.w	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092a2:	f200 8081 	bhi.w	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ac:	d02f      	beq.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092b4:	d878      	bhi.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092c2:	d012      	beq.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80092c4:	e070      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092c6:	4b3a      	ldr	r3, [pc, #232]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d2:	d107      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fe17 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092e2:	e34c      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e8:	e349      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092ea:	4b31      	ldr	r3, [pc, #196]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092f6:	d107      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f8:	f107 0318 	add.w	r3, r7, #24
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fb5d 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009306:	e33a      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930c:	e337      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800930e:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800931a:	d107      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fc9f 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800932a:	e328      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009330:	e325      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009332:	4b1f      	ldr	r3, [pc, #124]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800933a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b04      	cmp	r3, #4
 8009346:	d10c      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800934e:	4b18      	ldr	r3, [pc, #96]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	08db      	lsrs	r3, r3, #3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	4a16      	ldr	r2, [pc, #88]	; (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800935a:	fa22 f303 	lsr.w	r3, r2, r3
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	e01e      	b.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009362:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800936e:	d106      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009376:	d102      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800937c:	e010      	b.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800937e:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800938a:	d106      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009392:	d102      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009394:	4b09      	ldr	r3, [pc, #36]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800939e:	e2ee      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80093a0:	e2ed      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093a2:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a6:	e2ea      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ac:	e2e7      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	03d09000 	.word	0x03d09000
 80093b8:	003d0900 	.word	0x003d0900
 80093bc:	017d7840 	.word	0x017d7840
 80093c0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ca:	f040 809c 	bne.w	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80093ce:	4b9e      	ldr	r3, [pc, #632]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093de:	d054      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093e6:	f200 808b 	bhi.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093f0:	f000 8083 	beq.w	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093fa:	f200 8081 	bhi.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009404:	d02f      	beq.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800940c:	d878      	bhi.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800941a:	d012      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800941c:	e070      	b.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800941e:	4b8a      	ldr	r3, [pc, #552]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800942a:	d107      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800942c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009430:	4618      	mov	r0, r3
 8009432:	f000 fd6b 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800943a:	e2a0      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009440:	e29d      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009442:	4b81      	ldr	r3, [pc, #516]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800944a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800944e:	d107      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009450:	f107 0318 	add.w	r3, r7, #24
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fab1 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800945e:	e28e      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009464:	e28b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009466:	4b78      	ldr	r3, [pc, #480]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800946e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009472:	d107      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fbf3 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009482:	e27c      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009488:	e279      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800948a:	4b6f      	ldr	r3, [pc, #444]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800948c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009492:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009494:	4b6c      	ldr	r3, [pc, #432]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b04      	cmp	r3, #4
 800949e:	d10c      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094a6:	4b68      	ldr	r3, [pc, #416]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	08db      	lsrs	r3, r3, #3
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	4a66      	ldr	r2, [pc, #408]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80094b2:	fa22 f303 	lsr.w	r3, r2, r3
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b8:	e01e      	b.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094ba:	4b63      	ldr	r3, [pc, #396]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c6:	d106      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ce:	d102      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094d0:	4b5f      	ldr	r3, [pc, #380]	; (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d4:	e010      	b.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094d6:	4b5c      	ldr	r3, [pc, #368]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e2:	d106      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ea:	d102      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094ec:	4b59      	ldr	r3, [pc, #356]	; (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f0:	e002      	b.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094f6:	e242      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80094f8:	e241      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094fa:	4b57      	ldr	r3, [pc, #348]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094fe:	e23e      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009504:	e23b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950c:	f040 80a6 	bne.w	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009510:	4b4d      	ldr	r3, [pc, #308]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009514:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009518:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009520:	d054      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009528:	f200 808b 	bhi.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009532:	f000 8083 	beq.w	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800953c:	f200 8081 	bhi.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009546:	d02f      	beq.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954e:	d878      	bhi.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955c:	d012      	beq.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800955e:	e070      	b.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009560:	4b39      	ldr	r3, [pc, #228]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956c:	d107      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800956e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fcca 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800957c:	e1ff      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009582:	e1fc      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009584:	4b30      	ldr	r3, [pc, #192]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800958c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009590:	d107      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009592:	f107 0318 	add.w	r3, r7, #24
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fa10 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095a0:	e1ed      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a6:	e1ea      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095a8:	4b27      	ldr	r3, [pc, #156]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b4:	d107      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b6:	f107 030c 	add.w	r3, r7, #12
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fb52 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095c4:	e1db      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ca:	e1d8      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095cc:	4b1e      	ldr	r3, [pc, #120]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095d6:	4b1c      	ldr	r3, [pc, #112]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d10c      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095e8:	4b17      	ldr	r3, [pc, #92]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	4a16      	ldr	r2, [pc, #88]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80095f4:	fa22 f303 	lsr.w	r3, r2, r3
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095fa:	e01e      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095fc:	4b12      	ldr	r3, [pc, #72]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009608:	d106      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009610:	d102      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009616:	e010      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009624:	d106      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800962c:	d102      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009632:	e002      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009638:	e1a1      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800963a:	e1a0      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009640:	e19d      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009646:	e19a      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009648:	58024400 	.word	0x58024400
 800964c:	03d09000 	.word	0x03d09000
 8009650:	003d0900 	.word	0x003d0900
 8009654:	017d7840 	.word	0x017d7840
 8009658:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009662:	d173      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009664:	4b9a      	ldr	r3, [pc, #616]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800966c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009674:	d02f      	beq.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800967c:	d863      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968a:	d012      	beq.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800968c:	e05b      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800968e:	4b90      	ldr	r3, [pc, #576]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800969a:	d107      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800969c:	f107 0318 	add.w	r3, r7, #24
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f98b 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096aa:	e168      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b0:	e165      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096b2:	4b87      	ldr	r3, [pc, #540]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096be:	d107      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c0:	f107 030c 	add.w	r3, r7, #12
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 facd 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096ce:	e156      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d4:	e153      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096d6:	4b7e      	ldr	r3, [pc, #504]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096e0:	4b7b      	ldr	r3, [pc, #492]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d10c      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80096ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096f2:	4b77      	ldr	r3, [pc, #476]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	08db      	lsrs	r3, r3, #3
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	4a75      	ldr	r2, [pc, #468]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80096fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009704:	e01e      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009706:	4b72      	ldr	r3, [pc, #456]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009712:	d106      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800971c:	4b6e      	ldr	r3, [pc, #440]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e010      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009722:	4b6b      	ldr	r3, [pc, #428]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800972e:	d106      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009736:	d102      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009738:	4b68      	ldr	r3, [pc, #416]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973c:	e002      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009742:	e11c      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009744:	e11b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974a:	e118      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009752:	d133      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009754:	4b5e      	ldr	r3, [pc, #376]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800975c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800976a:	d012      	beq.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800976c:	e023      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800976e:	4b58      	ldr	r3, [pc, #352]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800977a:	d107      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800977c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fbc3 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800978a:	e0f8      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009790:	e0f5      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009792:	4b4f      	ldr	r3, [pc, #316]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800979a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800979e:	d107      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097a0:	f107 0318 	add.w	r3, r7, #24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f909 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097ae:	e0e6      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097b4:	e0e3      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ba:	e0e0      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097c2:	f040 808d 	bne.w	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80097c6:	4b42      	ldr	r3, [pc, #264]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d6:	d06b      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097de:	d874      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e6:	d056      	beq.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ee:	d86c      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097f6:	d03b      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097fe:	d864      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009806:	d021      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980e:	d85c      	bhi.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800981c:	d004      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800981e:	e054      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009820:	f000 f8b6 	bl	8009990 <HAL_RCCEx_GetD3PCLK1Freq>
 8009824:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009826:	e0aa      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009828:	4b29      	ldr	r3, [pc, #164]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f8be 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009844:	e09b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984a:	e098      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009858:	d107      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fa00 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009868:	e089      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800986e:	e086      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b04      	cmp	r3, #4
 800987a:	d109      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	4a13      	ldr	r2, [pc, #76]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800988e:	e076      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009894:	e073      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009896:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a2:	d102      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098a8:	e069      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ae:	e066      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098bc:	d102      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098c2:	e05c      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c8:	e059      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ce:	e056      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80098d0:	58024400 	.word	0x58024400
 80098d4:	03d09000 	.word	0x03d09000
 80098d8:	003d0900 	.word	0x003d0900
 80098dc:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e6:	d148      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80098e8:	4b27      	ldr	r3, [pc, #156]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f8:	d02a      	beq.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009900:	d838      	bhi.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990e:	d00d      	beq.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8009910:	e030      	b.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009912:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800991e:	d102      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009922:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009924:	e02b      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800992a:	e028      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800992c:	4b16      	ldr	r3, [pc, #88]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009938:	d107      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800993a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fae4 	bl	8009f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009948:	e019      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800994e:	e016      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009950:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800995c:	d107      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995e:	f107 0318 	add.w	r3, r7, #24
 8009962:	4618      	mov	r0, r3
 8009964:	f000 f82a 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800996c:	e007      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009972:	e004      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009978:	e001      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009980:	4618      	mov	r0, r3
 8009982:	3740      	adds	r7, #64	; 0x40
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	58024400 	.word	0x58024400
 800998c:	017d7840 	.word	0x017d7840

08009990 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009994:	f7fe fc66 	bl	8008264 <HAL_RCC_GetHCLKFreq>
 8009998:	4602      	mov	r2, r0
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	091b      	lsrs	r3, r3, #4
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	4904      	ldr	r1, [pc, #16]	; (80099b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099a6:	5ccb      	ldrb	r3, [r1, r3]
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	58024400 	.word	0x58024400
 80099b8:	0800faf8 	.word	0x0800faf8

080099bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099bc:	b480      	push	{r7}
 80099be:	b089      	sub	sp, #36	; 0x24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099c4:	4ba1      	ldr	r3, [pc, #644]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099ce:	4b9f      	ldr	r3, [pc, #636]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	0b1b      	lsrs	r3, r3, #12
 80099d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099da:	4b9c      	ldr	r3, [pc, #624]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	091b      	lsrs	r3, r3, #4
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099e6:	4b99      	ldr	r3, [pc, #612]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	08db      	lsrs	r3, r3, #3
 80099ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	fb02 f303 	mul.w	r3, r2, r3
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8111 	beq.w	8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	f000 8083 	beq.w	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	f200 80a1 	bhi.w	8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d056      	beq.n	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a26:	e099      	b.n	8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a28:	4b88      	ldr	r3, [pc, #544]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d02d      	beq.n	8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a34:	4b85      	ldr	r3, [pc, #532]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	08db      	lsrs	r3, r3, #3
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	4a84      	ldr	r2, [pc, #528]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a40:	fa22 f303 	lsr.w	r3, r2, r3
 8009a44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	ee07 3a90 	vmov	s15, r3
 8009a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	4b7b      	ldr	r3, [pc, #492]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a8e:	e087      	b.n	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa2:	4b6a      	ldr	r3, [pc, #424]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ad2:	e065      	b.n	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b59      	ldr	r3, [pc, #356]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b16:	e043      	b.n	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b48      	ldr	r3, [pc, #288]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b5a:	e021      	b.n	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b37      	ldr	r3, [pc, #220]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009ba0:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	0a5b      	lsrs	r3, r3, #9
 8009ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc6:	ee17 2a90 	vmov	r2, s15
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bce:	4b1f      	ldr	r3, [pc, #124]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf4:	ee17 2a90 	vmov	r2, s15
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009bfc:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	0e1b      	lsrs	r3, r3, #24
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c22:	ee17 2a90 	vmov	r2, s15
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c2a:	e008      	b.n	8009c3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	609a      	str	r2, [r3, #8]
}
 8009c3e:	bf00      	nop
 8009c40:	3724      	adds	r7, #36	; 0x24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	03d09000 	.word	0x03d09000
 8009c54:	46000000 	.word	0x46000000
 8009c58:	4c742400 	.word	0x4c742400
 8009c5c:	4a742400 	.word	0x4a742400
 8009c60:	4bbebc20 	.word	0x4bbebc20

08009c64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b089      	sub	sp, #36	; 0x24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c6c:	4ba1      	ldr	r3, [pc, #644]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	f003 0303 	and.w	r3, r3, #3
 8009c74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c76:	4b9f      	ldr	r3, [pc, #636]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7a:	0d1b      	lsrs	r3, r3, #20
 8009c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c82:	4b9c      	ldr	r3, [pc, #624]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c86:	0a1b      	lsrs	r3, r3, #8
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c8e:	4b99      	ldr	r3, [pc, #612]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	08db      	lsrs	r3, r3, #3
 8009c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8111 	beq.w	8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	f000 8083 	beq.w	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	f200 80a1 	bhi.w	8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d056      	beq.n	8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cce:	e099      	b.n	8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cd0:	4b88      	ldr	r3, [pc, #544]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d02d      	beq.n	8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cdc:	4b85      	ldr	r3, [pc, #532]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	4a84      	ldr	r2, [pc, #528]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d06:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d36:	e087      	b.n	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4a:	4b6a      	ldr	r3, [pc, #424]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d7a:	e065      	b.n	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b59      	ldr	r3, [pc, #356]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dbe:	e043      	b.n	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b48      	ldr	r3, [pc, #288]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e02:	e021      	b.n	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b37      	ldr	r3, [pc, #220]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e48:	4b2a      	ldr	r3, [pc, #168]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	0a5b      	lsrs	r3, r3, #9
 8009e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e6e:	ee17 2a90 	vmov	r2, s15
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e76:	4b1f      	ldr	r3, [pc, #124]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e9c:	ee17 2a90 	vmov	r2, s15
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ea4:	4b13      	ldr	r3, [pc, #76]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	0e1b      	lsrs	r3, r3, #24
 8009eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eca:	ee17 2a90 	vmov	r2, s15
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	609a      	str	r2, [r3, #8]
}
 8009ee6:	bf00      	nop
 8009ee8:	3724      	adds	r7, #36	; 0x24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	58024400 	.word	0x58024400
 8009ef8:	03d09000 	.word	0x03d09000
 8009efc:	46000000 	.word	0x46000000
 8009f00:	4c742400 	.word	0x4c742400
 8009f04:	4a742400 	.word	0x4a742400
 8009f08:	4bbebc20 	.word	0x4bbebc20

08009f0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b089      	sub	sp, #36	; 0x24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f14:	4ba0      	ldr	r3, [pc, #640]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009f1e:	4b9e      	ldr	r3, [pc, #632]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	091b      	lsrs	r3, r3, #4
 8009f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f2a:	4b9b      	ldr	r3, [pc, #620]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f34:	4b98      	ldr	r3, [pc, #608]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	fb02 f303 	mul.w	r3, r2, r3
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8111 	beq.w	800a17a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	f000 8083 	beq.w	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	f200 80a1 	bhi.w	800a0aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d056      	beq.n	800a022 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f74:	e099      	b.n	800a0aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f76:	4b88      	ldr	r3, [pc, #544]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d02d      	beq.n	8009fde <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f82:	4b85      	ldr	r3, [pc, #532]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	08db      	lsrs	r3, r3, #3
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	4a83      	ldr	r2, [pc, #524]	; (800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f92:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fac:	4b7a      	ldr	r3, [pc, #488]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	ee07 3a90 	vmov	s15, r3
 8009fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fdc:	e087      	b.n	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff0:	4b69      	ldr	r3, [pc, #420]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a000:	ed97 6a03 	vldr	s12, [r7, #12]
 800a004:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a020:	e065      	b.n	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	ee07 3a90 	vmov	s15, r3
 800a028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a034:	4b58      	ldr	r3, [pc, #352]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03c:	ee07 3a90 	vmov	s15, r3
 800a040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a044:	ed97 6a03 	vldr	s12, [r7, #12]
 800a048:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a064:	e043      	b.n	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	ee07 3a90 	vmov	s15, r3
 800a06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a070:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a078:	4b47      	ldr	r3, [pc, #284]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a088:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0a8:	e021      	b.n	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	ee07 3a90 	vmov	s15, r3
 800a0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0bc:	4b36      	ldr	r3, [pc, #216]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f2:	0a5b      	lsrs	r3, r3, #9
 800a0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a104:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a108:	edd7 6a07 	vldr	s13, [r7, #28]
 800a10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a114:	ee17 2a90 	vmov	r2, s15
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a11c:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a126:	ee07 3a90 	vmov	s15, r3
 800a12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a132:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a136:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a142:	ee17 2a90 	vmov	r2, s15
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a14a:	4b13      	ldr	r3, [pc, #76]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	0e1b      	lsrs	r3, r3, #24
 800a150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a160:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a164:	edd7 6a07 	vldr	s13, [r7, #28]
 800a168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a170:	ee17 2a90 	vmov	r2, s15
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a178:	e008      	b.n	800a18c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	609a      	str	r2, [r3, #8]
}
 800a18c:	bf00      	nop
 800a18e:	3724      	adds	r7, #36	; 0x24
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	58024400 	.word	0x58024400
 800a19c:	03d09000 	.word	0x03d09000
 800a1a0:	46000000 	.word	0x46000000
 800a1a4:	4c742400 	.word	0x4c742400
 800a1a8:	4a742400 	.word	0x4a742400
 800a1ac:	4bbebc20 	.word	0x4bbebc20

0800a1b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1be:	4b53      	ldr	r3, [pc, #332]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d101      	bne.n	800a1ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e099      	b.n	800a302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1ce:	4b4f      	ldr	r3, [pc, #316]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a4e      	ldr	r2, [pc, #312]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a1d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1da:	f7f9 fb45 	bl	8003868 <HAL_GetTick>
 800a1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1e0:	e008      	b.n	800a1f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1e2:	f7f9 fb41 	bl	8003868 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d901      	bls.n	800a1f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e086      	b.n	800a302 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1f4:	4b45      	ldr	r3, [pc, #276]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1f0      	bne.n	800a1e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a200:	4b42      	ldr	r3, [pc, #264]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	031b      	lsls	r3, r3, #12
 800a20e:	493f      	ldr	r1, [pc, #252]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a210:	4313      	orrs	r3, r2
 800a212:	628b      	str	r3, [r1, #40]	; 0x28
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	3b01      	subs	r3, #1
 800a21a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	3b01      	subs	r3, #1
 800a224:	025b      	lsls	r3, r3, #9
 800a226:	b29b      	uxth	r3, r3
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	3b01      	subs	r3, #1
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	061b      	lsls	r3, r3, #24
 800a240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a244:	4931      	ldr	r1, [pc, #196]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a246:	4313      	orrs	r3, r2
 800a248:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a24a:	4b30      	ldr	r3, [pc, #192]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	492d      	ldr	r1, [pc, #180]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a25c:	4b2b      	ldr	r3, [pc, #172]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	f023 0220 	bic.w	r2, r3, #32
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	4928      	ldr	r1, [pc, #160]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a26e:	4b27      	ldr	r3, [pc, #156]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	4a26      	ldr	r2, [pc, #152]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a274:	f023 0310 	bic.w	r3, r3, #16
 800a278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a27a:	4b24      	ldr	r3, [pc, #144]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a27c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a27e:	4b24      	ldr	r3, [pc, #144]	; (800a310 <RCCEx_PLL2_Config+0x160>)
 800a280:	4013      	ands	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	69d2      	ldr	r2, [r2, #28]
 800a286:	00d2      	lsls	r2, r2, #3
 800a288:	4920      	ldr	r1, [pc, #128]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a28e:	4b1f      	ldr	r3, [pc, #124]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	4a1e      	ldr	r2, [pc, #120]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a294:	f043 0310 	orr.w	r3, r3, #16
 800a298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2a0:	4b1a      	ldr	r3, [pc, #104]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	4a19      	ldr	r2, [pc, #100]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2ac:	e00f      	b.n	800a2ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d106      	bne.n	800a2c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2b4:	4b15      	ldr	r3, [pc, #84]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	4a14      	ldr	r2, [pc, #80]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2c0:	e005      	b.n	800a2ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	4a11      	ldr	r2, [pc, #68]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a0e      	ldr	r2, [pc, #56]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2da:	f7f9 fac5 	bl	8003868 <HAL_GetTick>
 800a2de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2e0:	e008      	b.n	800a2f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2e2:	f7f9 fac1 	bl	8003868 <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d901      	bls.n	800a2f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e006      	b.n	800a302 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2f4:	4b05      	ldr	r3, [pc, #20]	; (800a30c <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0f0      	beq.n	800a2e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	58024400 	.word	0x58024400
 800a310:	ffff0007 	.word	0xffff0007

0800a314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a322:	4b53      	ldr	r3, [pc, #332]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d101      	bne.n	800a332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e099      	b.n	800a466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a332:	4b4f      	ldr	r3, [pc, #316]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a4e      	ldr	r2, [pc, #312]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33e:	f7f9 fa93 	bl	8003868 <HAL_GetTick>
 800a342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a344:	e008      	b.n	800a358 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a346:	f7f9 fa8f 	bl	8003868 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	2b02      	cmp	r3, #2
 800a352:	d901      	bls.n	800a358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e086      	b.n	800a466 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a358:	4b45      	ldr	r3, [pc, #276]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1f0      	bne.n	800a346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a364:	4b42      	ldr	r3, [pc, #264]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a368:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	051b      	lsls	r3, r3, #20
 800a372:	493f      	ldr	r1, [pc, #252]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a374:	4313      	orrs	r3, r2
 800a376:	628b      	str	r3, [r1, #40]	; 0x28
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	025b      	lsls	r3, r3, #9
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	3b01      	subs	r3, #1
 800a394:	041b      	lsls	r3, r3, #16
 800a396:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a39a:	431a      	orrs	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	061b      	lsls	r3, r3, #24
 800a3a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3a8:	4931      	ldr	r1, [pc, #196]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3ae:	4b30      	ldr	r3, [pc, #192]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	492d      	ldr	r1, [pc, #180]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3c0:	4b2b      	ldr	r3, [pc, #172]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	4928      	ldr	r1, [pc, #160]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3d2:	4b27      	ldr	r3, [pc, #156]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d6:	4a26      	ldr	r2, [pc, #152]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3de:	4b24      	ldr	r3, [pc, #144]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3e2:	4b24      	ldr	r3, [pc, #144]	; (800a474 <RCCEx_PLL3_Config+0x160>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	69d2      	ldr	r2, [r2, #28]
 800a3ea:	00d2      	lsls	r2, r2, #3
 800a3ec:	4920      	ldr	r1, [pc, #128]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f6:	4a1e      	ldr	r2, [pc, #120]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a404:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a19      	ldr	r2, [pc, #100]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a40a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a40e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a410:	e00f      	b.n	800a432 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d106      	bne.n	800a426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a418:	4b15      	ldr	r3, [pc, #84]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	4a14      	ldr	r2, [pc, #80]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a41e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a422:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a424:	e005      	b.n	800a432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a426:	4b12      	ldr	r3, [pc, #72]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42a:	4a11      	ldr	r2, [pc, #68]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a430:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a432:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a0e      	ldr	r2, [pc, #56]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a43e:	f7f9 fa13 	bl	8003868 <HAL_GetTick>
 800a442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a444:	e008      	b.n	800a458 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a446:	f7f9 fa0f 	bl	8003868 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d901      	bls.n	800a458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e006      	b.n	800a466 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <RCCEx_PLL3_Config+0x15c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0f0      	beq.n	800a446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a464:	7bfb      	ldrb	r3, [r7, #15]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
 800a474:	ffff0007 	.word	0xffff0007

0800a478 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e0f1      	b.n	800a66e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a78      	ldr	r2, [pc, #480]	; (800a678 <HAL_SPI_Init+0x200>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d00f      	beq.n	800a4ba <HAL_SPI_Init+0x42>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a77      	ldr	r2, [pc, #476]	; (800a67c <HAL_SPI_Init+0x204>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d00a      	beq.n	800a4ba <HAL_SPI_Init+0x42>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a75      	ldr	r2, [pc, #468]	; (800a680 <HAL_SPI_Init+0x208>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d005      	beq.n	800a4ba <HAL_SPI_Init+0x42>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	2b0f      	cmp	r3, #15
 800a4b4:	d901      	bls.n	800a4ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e0d9      	b.n	800a66e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f8e2 	bl	800a684 <SPI_GetPacketSize>
 800a4c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a6c      	ldr	r2, [pc, #432]	; (800a678 <HAL_SPI_Init+0x200>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00c      	beq.n	800a4e6 <HAL_SPI_Init+0x6e>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a6a      	ldr	r2, [pc, #424]	; (800a67c <HAL_SPI_Init+0x204>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d007      	beq.n	800a4e6 <HAL_SPI_Init+0x6e>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a69      	ldr	r2, [pc, #420]	; (800a680 <HAL_SPI_Init+0x208>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d002      	beq.n	800a4e6 <HAL_SPI_Init+0x6e>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b08      	cmp	r3, #8
 800a4e4:	d811      	bhi.n	800a50a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4ea:	4a63      	ldr	r2, [pc, #396]	; (800a678 <HAL_SPI_Init+0x200>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d009      	beq.n	800a504 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a61      	ldr	r2, [pc, #388]	; (800a67c <HAL_SPI_Init+0x204>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d004      	beq.n	800a504 <HAL_SPI_Init+0x8c>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a60      	ldr	r2, [pc, #384]	; (800a680 <HAL_SPI_Init+0x208>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d104      	bne.n	800a50e <HAL_SPI_Init+0x96>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b10      	cmp	r3, #16
 800a508:	d901      	bls.n	800a50e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e0af      	b.n	800a66e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7f7 fbfa 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a54a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a554:	d119      	bne.n	800a58a <HAL_SPI_Init+0x112>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a55e:	d103      	bne.n	800a568 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a564:	2b00      	cmp	r3, #0
 800a566:	d008      	beq.n	800a57a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10c      	bne.n	800a58a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a578:	d107      	bne.n	800a58a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a588:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	69da      	ldr	r2, [r3, #28]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a592:	431a      	orrs	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59c:	ea42 0103 	orr.w	r1, r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	431a      	orrs	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ea:	ea42 0103 	orr.w	r1, r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d113      	bne.n	800a62a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a614:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a628:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0201 	bic.w	r2, r2, #1
 800a638:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	40013000 	.word	0x40013000
 800a67c:	40003800 	.word	0x40003800
 800a680:	40003c00 	.word	0x40003c00

0800a684 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a690:	095b      	lsrs	r3, r3, #5
 800a692:	3301      	adds	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	3307      	adds	r3, #7
 800a6a2:	08db      	lsrs	r3, r3, #3
 800a6a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e049      	b.n	800a760 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7f8 fa71 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f000 fd11 	bl	800b120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e049      	b.n	800a80e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f841 	bl	800a816 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f000 fcba 	bl	800b120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <HAL_TIM_PWM_Start+0x24>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b01      	cmp	r3, #1
 800a846:	bf14      	ite	ne
 800a848:	2301      	movne	r3, #1
 800a84a:	2300      	moveq	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	e03c      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b04      	cmp	r3, #4
 800a854:	d109      	bne.n	800a86a <HAL_TIM_PWM_Start+0x3e>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	bf14      	ite	ne
 800a862:	2301      	movne	r3, #1
 800a864:	2300      	moveq	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	e02f      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d109      	bne.n	800a884 <HAL_TIM_PWM_Start+0x58>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	e022      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b0c      	cmp	r3, #12
 800a888:	d109      	bne.n	800a89e <HAL_TIM_PWM_Start+0x72>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b01      	cmp	r3, #1
 800a894:	bf14      	ite	ne
 800a896:	2301      	movne	r3, #1
 800a898:	2300      	moveq	r3, #0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	e015      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b10      	cmp	r3, #16
 800a8a2:	d109      	bne.n	800a8b8 <HAL_TIM_PWM_Start+0x8c>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	bf14      	ite	ne
 800a8b0:	2301      	movne	r3, #1
 800a8b2:	2300      	moveq	r3, #0
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	e008      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	bf14      	ite	ne
 800a8c4:	2301      	movne	r3, #1
 800a8c6:	2300      	moveq	r3, #0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e0ab      	b.n	800aa2a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <HAL_TIM_PWM_Start+0xb6>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8e0:	e023      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d104      	bne.n	800a8f2 <HAL_TIM_PWM_Start+0xc6>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8f0:	e01b      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b08      	cmp	r3, #8
 800a8f6:	d104      	bne.n	800a902 <HAL_TIM_PWM_Start+0xd6>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a900:	e013      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b0c      	cmp	r3, #12
 800a906:	d104      	bne.n	800a912 <HAL_TIM_PWM_Start+0xe6>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a910:	e00b      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b10      	cmp	r3, #16
 800a916:	d104      	bne.n	800a922 <HAL_TIM_PWM_Start+0xf6>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a920:	e003      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2202      	movs	r2, #2
 800a926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2201      	movs	r2, #1
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f80e 	bl	800b954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a3d      	ldr	r2, [pc, #244]	; (800aa34 <HAL_TIM_PWM_Start+0x208>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a3c      	ldr	r2, [pc, #240]	; (800aa38 <HAL_TIM_PWM_Start+0x20c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a3a      	ldr	r2, [pc, #232]	; (800aa3c <HAL_TIM_PWM_Start+0x210>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a39      	ldr	r2, [pc, #228]	; (800aa40 <HAL_TIM_PWM_Start+0x214>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a37      	ldr	r2, [pc, #220]	; (800aa44 <HAL_TIM_PWM_Start+0x218>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d101      	bne.n	800a96e <HAL_TIM_PWM_Start+0x142>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <HAL_TIM_PWM_Start+0x144>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d007      	beq.n	800a984 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a982:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a2a      	ldr	r2, [pc, #168]	; (800aa34 <HAL_TIM_PWM_Start+0x208>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d02c      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a996:	d027      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a2a      	ldr	r2, [pc, #168]	; (800aa48 <HAL_TIM_PWM_Start+0x21c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d022      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a29      	ldr	r2, [pc, #164]	; (800aa4c <HAL_TIM_PWM_Start+0x220>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d01d      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a27      	ldr	r2, [pc, #156]	; (800aa50 <HAL_TIM_PWM_Start+0x224>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d018      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a1f      	ldr	r2, [pc, #124]	; (800aa38 <HAL_TIM_PWM_Start+0x20c>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d013      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a23      	ldr	r2, [pc, #140]	; (800aa54 <HAL_TIM_PWM_Start+0x228>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d00e      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a1b      	ldr	r2, [pc, #108]	; (800aa3c <HAL_TIM_PWM_Start+0x210>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d009      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a1f      	ldr	r2, [pc, #124]	; (800aa58 <HAL_TIM_PWM_Start+0x22c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d004      	beq.n	800a9e8 <HAL_TIM_PWM_Start+0x1bc>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <HAL_TIM_PWM_Start+0x230>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d115      	bne.n	800aa14 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	4b1c      	ldr	r3, [pc, #112]	; (800aa60 <HAL_TIM_PWM_Start+0x234>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b06      	cmp	r3, #6
 800a9f8:	d015      	beq.n	800aa26 <HAL_TIM_PWM_Start+0x1fa>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa00:	d011      	beq.n	800aa26 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f042 0201 	orr.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa12:	e008      	b.n	800aa26 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0201 	orr.w	r2, r2, #1
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e000      	b.n	800aa28 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	40010000 	.word	0x40010000
 800aa38:	40010400 	.word	0x40010400
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	40014400 	.word	0x40014400
 800aa44:	40014800 	.word	0x40014800
 800aa48:	40000400 	.word	0x40000400
 800aa4c:	40000800 	.word	0x40000800
 800aa50:	40000c00 	.word	0x40000c00
 800aa54:	40001800 	.word	0x40001800
 800aa58:	4000e000 	.word	0x4000e000
 800aa5c:	4000e400 	.word	0x4000e400
 800aa60:	00010007 	.word	0x00010007

0800aa64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d122      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d11b      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0202 	mvn.w	r2, #2
 800aa90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fb1c 	bl	800b0e4 <HAL_TIM_IC_CaptureCallback>
 800aaac:	e005      	b.n	800aaba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fb0e 	bl	800b0d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb1f 	bl	800b0f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d122      	bne.n	800ab14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d11b      	bne.n	800ab14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0204 	mvn.w	r2, #4
 800aae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 faf2 	bl	800b0e4 <HAL_TIM_IC_CaptureCallback>
 800ab00:	e005      	b.n	800ab0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fae4 	bl	800b0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 faf5 	bl	800b0f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d122      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d11b      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0208 	mvn.w	r2, #8
 800ab38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fac8 	bl	800b0e4 <HAL_TIM_IC_CaptureCallback>
 800ab54:	e005      	b.n	800ab62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 faba 	bl	800b0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 facb 	bl	800b0f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d122      	bne.n	800abbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d11b      	bne.n	800abbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f06f 0210 	mvn.w	r2, #16
 800ab8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2208      	movs	r2, #8
 800ab92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa9e 	bl	800b0e4 <HAL_TIM_IC_CaptureCallback>
 800aba8:	e005      	b.n	800abb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa90 	bl	800b0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 faa1 	bl	800b0f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d10e      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d107      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0201 	mvn.w	r2, #1
 800abe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa6a 	bl	800b0bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d10e      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac00:	2b80      	cmp	r3, #128	; 0x80
 800ac02:	d107      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f001 f80c 	bl	800bc2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac22:	d10e      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2e:	2b80      	cmp	r3, #128	; 0x80
 800ac30:	d107      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 ffff 	bl	800bc40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d10e      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	d107      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa4f 	bl	800b10c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f003 0320 	and.w	r3, r3, #32
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d10e      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d107      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f06f 0220 	mvn.w	r2, #32
 800ac92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 ffbf 	bl	800bc18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e0ff      	b.n	800aec2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b14      	cmp	r3, #20
 800acce:	f200 80f0 	bhi.w	800aeb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acd2:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800ad2d 	.word	0x0800ad2d
 800acdc:	0800aeb3 	.word	0x0800aeb3
 800ace0:	0800aeb3 	.word	0x0800aeb3
 800ace4:	0800aeb3 	.word	0x0800aeb3
 800ace8:	0800ad6d 	.word	0x0800ad6d
 800acec:	0800aeb3 	.word	0x0800aeb3
 800acf0:	0800aeb3 	.word	0x0800aeb3
 800acf4:	0800aeb3 	.word	0x0800aeb3
 800acf8:	0800adaf 	.word	0x0800adaf
 800acfc:	0800aeb3 	.word	0x0800aeb3
 800ad00:	0800aeb3 	.word	0x0800aeb3
 800ad04:	0800aeb3 	.word	0x0800aeb3
 800ad08:	0800adef 	.word	0x0800adef
 800ad0c:	0800aeb3 	.word	0x0800aeb3
 800ad10:	0800aeb3 	.word	0x0800aeb3
 800ad14:	0800aeb3 	.word	0x0800aeb3
 800ad18:	0800ae31 	.word	0x0800ae31
 800ad1c:	0800aeb3 	.word	0x0800aeb3
 800ad20:	0800aeb3 	.word	0x0800aeb3
 800ad24:	0800aeb3 	.word	0x0800aeb3
 800ad28:	0800ae71 	.word	0x0800ae71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 fa9a 	bl	800b26c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	699a      	ldr	r2, [r3, #24]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f042 0208 	orr.w	r2, r2, #8
 800ad46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f022 0204 	bic.w	r2, r2, #4
 800ad56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6999      	ldr	r1, [r3, #24]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	691a      	ldr	r2, [r3, #16]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	619a      	str	r2, [r3, #24]
      break;
 800ad6a:	e0a5      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68b9      	ldr	r1, [r7, #8]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 fb0a 	bl	800b38c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699a      	ldr	r2, [r3, #24]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6999      	ldr	r1, [r3, #24]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	021a      	lsls	r2, r3, #8
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	619a      	str	r2, [r3, #24]
      break;
 800adac:	e084      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 fb73 	bl	800b4a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	69da      	ldr	r2, [r3, #28]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f042 0208 	orr.w	r2, r2, #8
 800adc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69da      	ldr	r2, [r3, #28]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0204 	bic.w	r2, r2, #4
 800add8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69d9      	ldr	r1, [r3, #28]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	430a      	orrs	r2, r1
 800adea:	61da      	str	r2, [r3, #28]
      break;
 800adec:	e064      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fbdb 	bl	800b5b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69da      	ldr	r2, [r3, #28]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69da      	ldr	r2, [r3, #28]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69d9      	ldr	r1, [r3, #28]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	021a      	lsls	r2, r3, #8
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	61da      	str	r2, [r3, #28]
      break;
 800ae2e:	e043      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68b9      	ldr	r1, [r7, #8]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fc24 	bl	800b684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0208 	orr.w	r2, r2, #8
 800ae4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0204 	bic.w	r2, r2, #4
 800ae5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	691a      	ldr	r2, [r3, #16]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae6e:	e023      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fc68 	bl	800b74c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	021a      	lsls	r2, r3, #8
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	430a      	orrs	r2, r1
 800aeae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aeb0:	e002      	b.n	800aeb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop

0800aecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_TIM_ConfigClockSource+0x1c>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e0dc      	b.n	800b0a2 <HAL_TIM_ConfigClockSource+0x1d6>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	4b6a      	ldr	r3, [pc, #424]	; (800b0ac <HAL_TIM_ConfigClockSource+0x1e0>)
 800af04:	4013      	ands	r3, r2
 800af06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a64      	ldr	r2, [pc, #400]	; (800b0b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	f000 80a9 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800af24:	4a62      	ldr	r2, [pc, #392]	; (800b0b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af26:	4293      	cmp	r3, r2
 800af28:	f200 80ae 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af2c:	4a61      	ldr	r2, [pc, #388]	; (800b0b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	f000 80a1 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800af34:	4a5f      	ldr	r2, [pc, #380]	; (800b0b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	f200 80a6 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af3c:	4a5e      	ldr	r2, [pc, #376]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	f000 8099 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800af44:	4a5c      	ldr	r2, [pc, #368]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af46:	4293      	cmp	r3, r2
 800af48:	f200 809e 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af50:	f000 8091 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800af54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af58:	f200 8096 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af60:	f000 8089 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800af64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af68:	f200 808e 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af70:	d03e      	beq.n	800aff0 <HAL_TIM_ConfigClockSource+0x124>
 800af72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af76:	f200 8087 	bhi.w	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af7e:	f000 8086 	beq.w	800b08e <HAL_TIM_ConfigClockSource+0x1c2>
 800af82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af86:	d87f      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af88:	2b70      	cmp	r3, #112	; 0x70
 800af8a:	d01a      	beq.n	800afc2 <HAL_TIM_ConfigClockSource+0xf6>
 800af8c:	2b70      	cmp	r3, #112	; 0x70
 800af8e:	d87b      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af90:	2b60      	cmp	r3, #96	; 0x60
 800af92:	d050      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x16a>
 800af94:	2b60      	cmp	r3, #96	; 0x60
 800af96:	d877      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800af98:	2b50      	cmp	r3, #80	; 0x50
 800af9a:	d03c      	beq.n	800b016 <HAL_TIM_ConfigClockSource+0x14a>
 800af9c:	2b50      	cmp	r3, #80	; 0x50
 800af9e:	d873      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa0:	2b40      	cmp	r3, #64	; 0x40
 800afa2:	d058      	beq.n	800b056 <HAL_TIM_ConfigClockSource+0x18a>
 800afa4:	2b40      	cmp	r3, #64	; 0x40
 800afa6:	d86f      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa8:	2b30      	cmp	r3, #48	; 0x30
 800afaa:	d064      	beq.n	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800afac:	2b30      	cmp	r3, #48	; 0x30
 800afae:	d86b      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d060      	beq.n	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d867      	bhi.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d05c      	beq.n	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d05a      	beq.n	800b076 <HAL_TIM_ConfigClockSource+0x1aa>
 800afc0:	e062      	b.n	800b088 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	6899      	ldr	r1, [r3, #8]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f000 fc9f 	bl	800b914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	609a      	str	r2, [r3, #8]
      break;
 800afee:	e04f      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	6899      	ldr	r1, [r3, #8]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f000 fc88 	bl	800b914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b012:	609a      	str	r2, [r3, #8]
      break;
 800b014:	e03c      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6859      	ldr	r1, [r3, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	461a      	mov	r2, r3
 800b024:	f000 fbf8 	bl	800b818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2150      	movs	r1, #80	; 0x50
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fc52 	bl	800b8d8 <TIM_ITRx_SetConfig>
      break;
 800b034:	e02c      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	6859      	ldr	r1, [r3, #4]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	461a      	mov	r2, r3
 800b044:	f000 fc17 	bl	800b876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2160      	movs	r1, #96	; 0x60
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fc42 	bl	800b8d8 <TIM_ITRx_SetConfig>
      break;
 800b054:	e01c      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6818      	ldr	r0, [r3, #0]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	6859      	ldr	r1, [r3, #4]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	461a      	mov	r2, r3
 800b064:	f000 fbd8 	bl	800b818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2140      	movs	r1, #64	; 0x40
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fc32 	bl	800b8d8 <TIM_ITRx_SetConfig>
      break;
 800b074:	e00c      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f000 fc29 	bl	800b8d8 <TIM_ITRx_SetConfig>
      break;
 800b086:	e003      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
      break;
 800b08c:	e000      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b08e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	ffceff88 	.word	0xffceff88
 800b0b0:	00100040 	.word	0x00100040
 800b0b4:	00100030 	.word	0x00100030
 800b0b8:	00100020 	.word	0x00100020

0800b0bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a44      	ldr	r2, [pc, #272]	; (800b244 <TIM_Base_SetConfig+0x124>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d013      	beq.n	800b160 <TIM_Base_SetConfig+0x40>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13e:	d00f      	beq.n	800b160 <TIM_Base_SetConfig+0x40>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a41      	ldr	r2, [pc, #260]	; (800b248 <TIM_Base_SetConfig+0x128>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d00b      	beq.n	800b160 <TIM_Base_SetConfig+0x40>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a40      	ldr	r2, [pc, #256]	; (800b24c <TIM_Base_SetConfig+0x12c>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d007      	beq.n	800b160 <TIM_Base_SetConfig+0x40>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a3f      	ldr	r2, [pc, #252]	; (800b250 <TIM_Base_SetConfig+0x130>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d003      	beq.n	800b160 <TIM_Base_SetConfig+0x40>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a3e      	ldr	r2, [pc, #248]	; (800b254 <TIM_Base_SetConfig+0x134>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d108      	bne.n	800b172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a33      	ldr	r2, [pc, #204]	; (800b244 <TIM_Base_SetConfig+0x124>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d027      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b180:	d023      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a30      	ldr	r2, [pc, #192]	; (800b248 <TIM_Base_SetConfig+0x128>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d01f      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a2f      	ldr	r2, [pc, #188]	; (800b24c <TIM_Base_SetConfig+0x12c>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d01b      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a2e      	ldr	r2, [pc, #184]	; (800b250 <TIM_Base_SetConfig+0x130>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d017      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a2d      	ldr	r2, [pc, #180]	; (800b254 <TIM_Base_SetConfig+0x134>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d013      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <TIM_Base_SetConfig+0x138>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00f      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a2b      	ldr	r2, [pc, #172]	; (800b25c <TIM_Base_SetConfig+0x13c>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d00b      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <TIM_Base_SetConfig+0x140>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d007      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a29      	ldr	r2, [pc, #164]	; (800b264 <TIM_Base_SetConfig+0x144>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d003      	beq.n	800b1ca <TIM_Base_SetConfig+0xaa>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a28      	ldr	r2, [pc, #160]	; (800b268 <TIM_Base_SetConfig+0x148>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d108      	bne.n	800b1dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a10      	ldr	r2, [pc, #64]	; (800b244 <TIM_Base_SetConfig+0x124>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d00f      	beq.n	800b228 <TIM_Base_SetConfig+0x108>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a12      	ldr	r2, [pc, #72]	; (800b254 <TIM_Base_SetConfig+0x134>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d00b      	beq.n	800b228 <TIM_Base_SetConfig+0x108>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a11      	ldr	r2, [pc, #68]	; (800b258 <TIM_Base_SetConfig+0x138>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d007      	beq.n	800b228 <TIM_Base_SetConfig+0x108>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a10      	ldr	r2, [pc, #64]	; (800b25c <TIM_Base_SetConfig+0x13c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d003      	beq.n	800b228 <TIM_Base_SetConfig+0x108>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a0f      	ldr	r2, [pc, #60]	; (800b260 <TIM_Base_SetConfig+0x140>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d103      	bne.n	800b230 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	691a      	ldr	r2, [r3, #16]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	615a      	str	r2, [r3, #20]
}
 800b236:	bf00      	nop
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40010000 	.word	0x40010000
 800b248:	40000400 	.word	0x40000400
 800b24c:	40000800 	.word	0x40000800
 800b250:	40000c00 	.word	0x40000c00
 800b254:	40010400 	.word	0x40010400
 800b258:	40014000 	.word	0x40014000
 800b25c:	40014400 	.word	0x40014400
 800b260:	40014800 	.word	0x40014800
 800b264:	4000e000 	.word	0x4000e000
 800b268:	4000e400 	.word	0x4000e400

0800b26c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	f023 0201 	bic.w	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	4b37      	ldr	r3, [pc, #220]	; (800b374 <TIM_OC1_SetConfig+0x108>)
 800b298:	4013      	ands	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f023 0302 	bic.w	r3, r3, #2
 800b2b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a2d      	ldr	r2, [pc, #180]	; (800b378 <TIM_OC1_SetConfig+0x10c>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d00f      	beq.n	800b2e8 <TIM_OC1_SetConfig+0x7c>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a2c      	ldr	r2, [pc, #176]	; (800b37c <TIM_OC1_SetConfig+0x110>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d00b      	beq.n	800b2e8 <TIM_OC1_SetConfig+0x7c>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a2b      	ldr	r2, [pc, #172]	; (800b380 <TIM_OC1_SetConfig+0x114>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d007      	beq.n	800b2e8 <TIM_OC1_SetConfig+0x7c>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a2a      	ldr	r2, [pc, #168]	; (800b384 <TIM_OC1_SetConfig+0x118>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d003      	beq.n	800b2e8 <TIM_OC1_SetConfig+0x7c>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a29      	ldr	r2, [pc, #164]	; (800b388 <TIM_OC1_SetConfig+0x11c>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d10c      	bne.n	800b302 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f023 0308 	bic.w	r3, r3, #8
 800b2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f023 0304 	bic.w	r3, r3, #4
 800b300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a1c      	ldr	r2, [pc, #112]	; (800b378 <TIM_OC1_SetConfig+0x10c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00f      	beq.n	800b32a <TIM_OC1_SetConfig+0xbe>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a1b      	ldr	r2, [pc, #108]	; (800b37c <TIM_OC1_SetConfig+0x110>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00b      	beq.n	800b32a <TIM_OC1_SetConfig+0xbe>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a1a      	ldr	r2, [pc, #104]	; (800b380 <TIM_OC1_SetConfig+0x114>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d007      	beq.n	800b32a <TIM_OC1_SetConfig+0xbe>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a19      	ldr	r2, [pc, #100]	; (800b384 <TIM_OC1_SetConfig+0x118>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <TIM_OC1_SetConfig+0xbe>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a18      	ldr	r2, [pc, #96]	; (800b388 <TIM_OC1_SetConfig+0x11c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d111      	bne.n	800b34e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	621a      	str	r2, [r3, #32]
}
 800b368:	bf00      	nop
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	fffeff8f 	.word	0xfffeff8f
 800b378:	40010000 	.word	0x40010000
 800b37c:	40010400 	.word	0x40010400
 800b380:	40014000 	.word	0x40014000
 800b384:	40014400 	.word	0x40014400
 800b388:	40014800 	.word	0x40014800

0800b38c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	f023 0210 	bic.w	r2, r3, #16
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4b34      	ldr	r3, [pc, #208]	; (800b488 <TIM_OC2_SetConfig+0xfc>)
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f023 0320 	bic.w	r3, r3, #32
 800b3d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a29      	ldr	r2, [pc, #164]	; (800b48c <TIM_OC2_SetConfig+0x100>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d003      	beq.n	800b3f4 <TIM_OC2_SetConfig+0x68>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a28      	ldr	r2, [pc, #160]	; (800b490 <TIM_OC2_SetConfig+0x104>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d10d      	bne.n	800b410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	011b      	lsls	r3, r3, #4
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b40e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <TIM_OC2_SetConfig+0x100>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d00f      	beq.n	800b438 <TIM_OC2_SetConfig+0xac>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <TIM_OC2_SetConfig+0x104>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d00b      	beq.n	800b438 <TIM_OC2_SetConfig+0xac>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a1c      	ldr	r2, [pc, #112]	; (800b494 <TIM_OC2_SetConfig+0x108>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d007      	beq.n	800b438 <TIM_OC2_SetConfig+0xac>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a1b      	ldr	r2, [pc, #108]	; (800b498 <TIM_OC2_SetConfig+0x10c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d003      	beq.n	800b438 <TIM_OC2_SetConfig+0xac>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a1a      	ldr	r2, [pc, #104]	; (800b49c <TIM_OC2_SetConfig+0x110>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d113      	bne.n	800b460 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b43e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	621a      	str	r2, [r3, #32]
}
 800b47a:	bf00      	nop
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	feff8fff 	.word	0xfeff8fff
 800b48c:	40010000 	.word	0x40010000
 800b490:	40010400 	.word	0x40010400
 800b494:	40014000 	.word	0x40014000
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800

0800b4a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4b33      	ldr	r3, [pc, #204]	; (800b598 <TIM_OC3_SetConfig+0xf8>)
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a28      	ldr	r2, [pc, #160]	; (800b59c <TIM_OC3_SetConfig+0xfc>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_OC3_SetConfig+0x66>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a27      	ldr	r2, [pc, #156]	; (800b5a0 <TIM_OC3_SetConfig+0x100>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d10d      	bne.n	800b522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b50c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a1d      	ldr	r2, [pc, #116]	; (800b59c <TIM_OC3_SetConfig+0xfc>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d00f      	beq.n	800b54a <TIM_OC3_SetConfig+0xaa>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a1c      	ldr	r2, [pc, #112]	; (800b5a0 <TIM_OC3_SetConfig+0x100>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d00b      	beq.n	800b54a <TIM_OC3_SetConfig+0xaa>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a1b      	ldr	r2, [pc, #108]	; (800b5a4 <TIM_OC3_SetConfig+0x104>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d007      	beq.n	800b54a <TIM_OC3_SetConfig+0xaa>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a1a      	ldr	r2, [pc, #104]	; (800b5a8 <TIM_OC3_SetConfig+0x108>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d003      	beq.n	800b54a <TIM_OC3_SetConfig+0xaa>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a19      	ldr	r2, [pc, #100]	; (800b5ac <TIM_OC3_SetConfig+0x10c>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d113      	bne.n	800b572 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	011b      	lsls	r3, r3, #4
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	4313      	orrs	r3, r2
 800b570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	621a      	str	r2, [r3, #32]
}
 800b58c:	bf00      	nop
 800b58e:	371c      	adds	r7, #28
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	fffeff8f 	.word	0xfffeff8f
 800b59c:	40010000 	.word	0x40010000
 800b5a0:	40010400 	.word	0x40010400
 800b5a4:	40014000 	.word	0x40014000
 800b5a8:	40014400 	.word	0x40014400
 800b5ac:	40014800 	.word	0x40014800

0800b5b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4b24      	ldr	r3, [pc, #144]	; (800b66c <TIM_OC4_SetConfig+0xbc>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	021b      	lsls	r3, r3, #8
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	031b      	lsls	r3, r3, #12
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	4313      	orrs	r3, r2
 800b606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a19      	ldr	r2, [pc, #100]	; (800b670 <TIM_OC4_SetConfig+0xc0>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00f      	beq.n	800b630 <TIM_OC4_SetConfig+0x80>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a18      	ldr	r2, [pc, #96]	; (800b674 <TIM_OC4_SetConfig+0xc4>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d00b      	beq.n	800b630 <TIM_OC4_SetConfig+0x80>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a17      	ldr	r2, [pc, #92]	; (800b678 <TIM_OC4_SetConfig+0xc8>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d007      	beq.n	800b630 <TIM_OC4_SetConfig+0x80>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a16      	ldr	r2, [pc, #88]	; (800b67c <TIM_OC4_SetConfig+0xcc>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d003      	beq.n	800b630 <TIM_OC4_SetConfig+0x80>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a15      	ldr	r2, [pc, #84]	; (800b680 <TIM_OC4_SetConfig+0xd0>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d109      	bne.n	800b644 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	019b      	lsls	r3, r3, #6
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	621a      	str	r2, [r3, #32]
}
 800b65e:	bf00      	nop
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	feff8fff 	.word	0xfeff8fff
 800b670:	40010000 	.word	0x40010000
 800b674:	40010400 	.word	0x40010400
 800b678:	40014000 	.word	0x40014000
 800b67c:	40014400 	.word	0x40014400
 800b680:	40014800 	.word	0x40014800

0800b684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <TIM_OC5_SetConfig+0xb0>)
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	041b      	lsls	r3, r3, #16
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a18      	ldr	r2, [pc, #96]	; (800b738 <TIM_OC5_SetConfig+0xb4>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00f      	beq.n	800b6fa <TIM_OC5_SetConfig+0x76>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a17      	ldr	r2, [pc, #92]	; (800b73c <TIM_OC5_SetConfig+0xb8>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00b      	beq.n	800b6fa <TIM_OC5_SetConfig+0x76>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a16      	ldr	r2, [pc, #88]	; (800b740 <TIM_OC5_SetConfig+0xbc>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d007      	beq.n	800b6fa <TIM_OC5_SetConfig+0x76>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a15      	ldr	r2, [pc, #84]	; (800b744 <TIM_OC5_SetConfig+0xc0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d003      	beq.n	800b6fa <TIM_OC5_SetConfig+0x76>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a14      	ldr	r2, [pc, #80]	; (800b748 <TIM_OC5_SetConfig+0xc4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d109      	bne.n	800b70e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	621a      	str	r2, [r3, #32]
}
 800b728:	bf00      	nop
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	fffeff8f 	.word	0xfffeff8f
 800b738:	40010000 	.word	0x40010000
 800b73c:	40010400 	.word	0x40010400
 800b740:	40014000 	.word	0x40014000
 800b744:	40014400 	.word	0x40014400
 800b748:	40014800 	.word	0x40014800

0800b74c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	4b22      	ldr	r3, [pc, #136]	; (800b800 <TIM_OC6_SetConfig+0xb4>)
 800b778:	4013      	ands	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a19      	ldr	r2, [pc, #100]	; (800b804 <TIM_OC6_SetConfig+0xb8>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d00f      	beq.n	800b7c4 <TIM_OC6_SetConfig+0x78>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <TIM_OC6_SetConfig+0xbc>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d00b      	beq.n	800b7c4 <TIM_OC6_SetConfig+0x78>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a17      	ldr	r2, [pc, #92]	; (800b80c <TIM_OC6_SetConfig+0xc0>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d007      	beq.n	800b7c4 <TIM_OC6_SetConfig+0x78>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a16      	ldr	r2, [pc, #88]	; (800b810 <TIM_OC6_SetConfig+0xc4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d003      	beq.n	800b7c4 <TIM_OC6_SetConfig+0x78>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a15      	ldr	r2, [pc, #84]	; (800b814 <TIM_OC6_SetConfig+0xc8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d109      	bne.n	800b7d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	029b      	lsls	r3, r3, #10
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685a      	ldr	r2, [r3, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	feff8fff 	.word	0xfeff8fff
 800b804:	40010000 	.word	0x40010000
 800b808:	40010400 	.word	0x40010400
 800b80c:	40014000 	.word	0x40014000
 800b810:	40014400 	.word	0x40014400
 800b814:	40014800 	.word	0x40014800

0800b818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	f023 0201 	bic.w	r2, r3, #1
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f023 030a 	bic.w	r3, r3, #10
 800b854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	621a      	str	r2, [r3, #32]
}
 800b86a:	bf00      	nop
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b876:	b480      	push	{r7}
 800b878:	b087      	sub	sp, #28
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	f023 0210 	bic.w	r2, r3, #16
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	031b      	lsls	r3, r3, #12
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	621a      	str	r2, [r3, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	4b09      	ldr	r3, [pc, #36]	; (800b910 <TIM_ITRx_SetConfig+0x38>)
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	f043 0307 	orr.w	r3, r3, #7
 800b8fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	609a      	str	r2, [r3, #8]
}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	ffcfff8f 	.word	0xffcfff8f

0800b914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b914:	b480      	push	{r7}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b92e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	021a      	lsls	r2, r3, #8
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	431a      	orrs	r2, r3
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	4313      	orrs	r3, r2
 800b940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	609a      	str	r2, [r3, #8]
}
 800b948:	bf00      	nop
 800b94a:	371c      	adds	r7, #28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f003 031f 	and.w	r3, r3, #31
 800b966:	2201      	movs	r2, #1
 800b968:	fa02 f303 	lsl.w	r3, r2, r3
 800b96c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6a1a      	ldr	r2, [r3, #32]
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	43db      	mvns	r3, r3
 800b976:	401a      	ands	r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a1a      	ldr	r2, [r3, #32]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	f003 031f 	and.w	r3, r3, #31
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	fa01 f303 	lsl.w	r3, r1, r3
 800b98c:	431a      	orrs	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
	...

0800b9a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e077      	b.n	800baa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a35      	ldr	r2, [pc, #212]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d004      	beq.n	800b9ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a34      	ldr	r2, [pc, #208]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d108      	bne.n	800b9fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a25      	ldr	r2, [pc, #148]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d02c      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2a:	d027      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a22      	ldr	r2, [pc, #136]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d022      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a21      	ldr	r2, [pc, #132]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d01d      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a1f      	ldr	r2, [pc, #124]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d018      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d013      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a1b      	ldr	r2, [pc, #108]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00e      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a1a      	ldr	r2, [pc, #104]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d009      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d004      	beq.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d10c      	bne.n	800ba96 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40010400 	.word	0x40010400
 800babc:	40000400 	.word	0x40000400
 800bac0:	40000800 	.word	0x40000800
 800bac4:	40000c00 	.word	0x40000c00
 800bac8:	40001800 	.word	0x40001800
 800bacc:	40014000 	.word	0x40014000
 800bad0:	4000e000 	.word	0x4000e000
 800bad4:	4000e400 	.word	0x4000e400

0800bad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d101      	bne.n	800baf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baf0:	2302      	movs	r3, #2
 800baf2:	e087      	b.n	800bc04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	041b      	lsls	r3, r3, #16
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a27      	ldr	r2, [pc, #156]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d004      	beq.n	800bb82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a25      	ldr	r2, [pc, #148]	; (800bc14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d106      	bne.n	800bb90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	69db      	ldr	r3, [r3, #28]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a1e      	ldr	r2, [pc, #120]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d004      	beq.n	800bba4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a1d      	ldr	r2, [pc, #116]	; (800bc14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d126      	bne.n	800bbf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	051b      	lsls	r3, r3, #20
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a0e      	ldr	r2, [pc, #56]	; (800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d004      	beq.n	800bbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a0d      	ldr	r2, [pc, #52]	; (800bc14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d106      	bne.n	800bbf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	40010000 	.word	0x40010000
 800bc14:	40010400 	.word	0x40010400

0800bc18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e042      	b.n	800bcec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7f7 fbcb 	bl	8003414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2224      	movs	r2, #36	; 0x24
 800bc82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0201 	bic.w	r2, r2, #1
 800bc94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f996 	bl	800bfc8 <UART_SetConfig>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d101      	bne.n	800bca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e022      	b.n	800bcec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 ffe8 	bl	800cc84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f042 0201 	orr.w	r2, r2, #1
 800bce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 f86f 	bl	800cdc8 <UART_CheckIdleState>
 800bcea:	4603      	mov	r3, r0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	; 0x28
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	4613      	mov	r3, r2
 800bd02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	f040 8083 	bne.w	800be16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <HAL_UART_Transmit+0x28>
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e07b      	b.n	800be18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d101      	bne.n	800bd2e <HAL_UART_Transmit+0x3a>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e074      	b.n	800be18 <HAL_UART_Transmit+0x124>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2221      	movs	r2, #33	; 0x21
 800bd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd46:	f7f7 fd8f 	bl	8003868 <HAL_GetTick>
 800bd4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	88fa      	ldrh	r2, [r7, #6]
 800bd58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd64:	d108      	bne.n	800bd78 <HAL_UART_Transmit+0x84>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d104      	bne.n	800bd78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	61bb      	str	r3, [r7, #24]
 800bd76:	e003      	b.n	800bd80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bd88:	e02c      	b.n	800bde4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2200      	movs	r2, #0
 800bd92:	2180      	movs	r1, #128	; 0x80
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f001 f862 	bl	800ce5e <UART_WaitOnFlagUntilTimeout>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e039      	b.n	800be18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10b      	bne.n	800bdc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	61bb      	str	r3, [r7, #24]
 800bdc0:	e007      	b.n	800bdd2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1cc      	bne.n	800bd8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2140      	movs	r1, #64	; 0x40
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f001 f82f 	bl	800ce5e <UART_WaitOnFlagUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e006      	b.n	800be18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	e000      	b.n	800be18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be16:	2302      	movs	r3, #2
  }
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08a      	sub	sp, #40	; 0x28
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	4613      	mov	r3, r2
 800be2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be36:	2b20      	cmp	r3, #32
 800be38:	f040 80c0 	bne.w	800bfbc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <HAL_UART_Receive+0x28>
 800be42:	88fb      	ldrh	r3, [r7, #6]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e0b8      	b.n	800bfbe <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be52:	2b01      	cmp	r3, #1
 800be54:	d101      	bne.n	800be5a <HAL_UART_Receive+0x3a>
 800be56:	2302      	movs	r3, #2
 800be58:	e0b1      	b.n	800bfbe <HAL_UART_Receive+0x19e>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2222      	movs	r2, #34	; 0x22
 800be6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be78:	f7f7 fcf6 	bl	8003868 <HAL_GetTick>
 800be7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	88fa      	ldrh	r2, [r7, #6]
 800be82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	88fa      	ldrh	r2, [r7, #6]
 800be8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be96:	d10e      	bne.n	800beb6 <HAL_UART_Receive+0x96>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d105      	bne.n	800beac <HAL_UART_Receive+0x8c>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800beaa:	e02d      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	22ff      	movs	r2, #255	; 0xff
 800beb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800beb4:	e028      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10d      	bne.n	800beda <HAL_UART_Receive+0xba>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d104      	bne.n	800bed0 <HAL_UART_Receive+0xb0>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	22ff      	movs	r2, #255	; 0xff
 800beca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bece:	e01b      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	227f      	movs	r2, #127	; 0x7f
 800bed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bed8:	e016      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bee2:	d10d      	bne.n	800bf00 <HAL_UART_Receive+0xe0>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d104      	bne.n	800bef6 <HAL_UART_Receive+0xd6>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	227f      	movs	r2, #127	; 0x7f
 800bef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bef4:	e008      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	223f      	movs	r2, #63	; 0x3f
 800befa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800befe:	e003      	b.n	800bf08 <HAL_UART_Receive+0xe8>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf18:	d108      	bne.n	800bf2c <HAL_UART_Receive+0x10c>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d104      	bne.n	800bf2c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	61bb      	str	r3, [r7, #24]
 800bf2a:	e003      	b.n	800bf34 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bf3c:	e032      	b.n	800bfa4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2200      	movs	r2, #0
 800bf46:	2120      	movs	r1, #32
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 ff88 	bl	800ce5e <UART_WaitOnFlagUntilTimeout>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e032      	b.n	800bfbe <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10c      	bne.n	800bf78 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	8a7b      	ldrh	r3, [r7, #18]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	3302      	adds	r3, #2
 800bf74:	61bb      	str	r3, [r7, #24]
 800bf76:	e00c      	b.n	800bf92 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	8a7b      	ldrh	r3, [r7, #18]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	4013      	ands	r3, r2
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1c6      	bne.n	800bf3e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2220      	movs	r2, #32
 800bfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	e000      	b.n	800bfbe <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800bfbc:	2302      	movs	r3, #2
  }
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3720      	adds	r7, #32
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfc8:	b5b0      	push	{r4, r5, r7, lr}
 800bfca:	b08e      	sub	sp, #56	; 0x38
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	4bbf      	ldr	r3, [pc, #764]	; (800c2f4 <UART_SetConfig+0x32c>)
 800bff6:	4013      	ands	r3, r2
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	6812      	ldr	r2, [r2, #0]
 800bffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bffe:	430b      	orrs	r3, r1
 800c000:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	430a      	orrs	r2, r1
 800c016:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4ab5      	ldr	r2, [pc, #724]	; (800c2f8 <UART_SetConfig+0x330>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d004      	beq.n	800c032 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c02e:	4313      	orrs	r3, r2
 800c030:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	4bb0      	ldr	r3, [pc, #704]	; (800c2fc <UART_SetConfig+0x334>)
 800c03a:	4013      	ands	r3, r2
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6812      	ldr	r2, [r2, #0]
 800c040:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c042:	430b      	orrs	r3, r1
 800c044:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	f023 010f 	bic.w	r1, r3, #15
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4aa7      	ldr	r2, [pc, #668]	; (800c300 <UART_SetConfig+0x338>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d176      	bne.n	800c154 <UART_SetConfig+0x18c>
 800c066:	4ba7      	ldr	r3, [pc, #668]	; (800c304 <UART_SetConfig+0x33c>)
 800c068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c06e:	2b28      	cmp	r3, #40	; 0x28
 800c070:	d86c      	bhi.n	800c14c <UART_SetConfig+0x184>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <UART_SetConfig+0xb0>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c11d 	.word	0x0800c11d
 800c07c:	0800c14d 	.word	0x0800c14d
 800c080:	0800c14d 	.word	0x0800c14d
 800c084:	0800c14d 	.word	0x0800c14d
 800c088:	0800c14d 	.word	0x0800c14d
 800c08c:	0800c14d 	.word	0x0800c14d
 800c090:	0800c14d 	.word	0x0800c14d
 800c094:	0800c14d 	.word	0x0800c14d
 800c098:	0800c125 	.word	0x0800c125
 800c09c:	0800c14d 	.word	0x0800c14d
 800c0a0:	0800c14d 	.word	0x0800c14d
 800c0a4:	0800c14d 	.word	0x0800c14d
 800c0a8:	0800c14d 	.word	0x0800c14d
 800c0ac:	0800c14d 	.word	0x0800c14d
 800c0b0:	0800c14d 	.word	0x0800c14d
 800c0b4:	0800c14d 	.word	0x0800c14d
 800c0b8:	0800c12d 	.word	0x0800c12d
 800c0bc:	0800c14d 	.word	0x0800c14d
 800c0c0:	0800c14d 	.word	0x0800c14d
 800c0c4:	0800c14d 	.word	0x0800c14d
 800c0c8:	0800c14d 	.word	0x0800c14d
 800c0cc:	0800c14d 	.word	0x0800c14d
 800c0d0:	0800c14d 	.word	0x0800c14d
 800c0d4:	0800c14d 	.word	0x0800c14d
 800c0d8:	0800c135 	.word	0x0800c135
 800c0dc:	0800c14d 	.word	0x0800c14d
 800c0e0:	0800c14d 	.word	0x0800c14d
 800c0e4:	0800c14d 	.word	0x0800c14d
 800c0e8:	0800c14d 	.word	0x0800c14d
 800c0ec:	0800c14d 	.word	0x0800c14d
 800c0f0:	0800c14d 	.word	0x0800c14d
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c13d 	.word	0x0800c13d
 800c0fc:	0800c14d 	.word	0x0800c14d
 800c100:	0800c14d 	.word	0x0800c14d
 800c104:	0800c14d 	.word	0x0800c14d
 800c108:	0800c14d 	.word	0x0800c14d
 800c10c:	0800c14d 	.word	0x0800c14d
 800c110:	0800c14d 	.word	0x0800c14d
 800c114:	0800c14d 	.word	0x0800c14d
 800c118:	0800c145 	.word	0x0800c145
 800c11c:	2301      	movs	r3, #1
 800c11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c122:	e326      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c124:	2304      	movs	r3, #4
 800c126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12a:	e322      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c12c:	2308      	movs	r3, #8
 800c12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c132:	e31e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c134:	2310      	movs	r3, #16
 800c136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13a:	e31a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c13c:	2320      	movs	r3, #32
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c142:	e316      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14a:	e312      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c14c:	2380      	movs	r3, #128	; 0x80
 800c14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c152:	e30e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a6b      	ldr	r2, [pc, #428]	; (800c308 <UART_SetConfig+0x340>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d130      	bne.n	800c1c0 <UART_SetConfig+0x1f8>
 800c15e:	4b69      	ldr	r3, [pc, #420]	; (800c304 <UART_SetConfig+0x33c>)
 800c160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	2b05      	cmp	r3, #5
 800c168:	d826      	bhi.n	800c1b8 <UART_SetConfig+0x1f0>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <UART_SetConfig+0x1a8>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c189 	.word	0x0800c189
 800c174:	0800c191 	.word	0x0800c191
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c1a1 	.word	0x0800c1a1
 800c180:	0800c1a9 	.word	0x0800c1a9
 800c184:	0800c1b1 	.word	0x0800c1b1
 800c188:	2300      	movs	r3, #0
 800c18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18e:	e2f0      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c190:	2304      	movs	r3, #4
 800c192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c196:	e2ec      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c198:	2308      	movs	r3, #8
 800c19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19e:	e2e8      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a6:	e2e4      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1a8:	2320      	movs	r3, #32
 800c1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ae:	e2e0      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1b0:	2340      	movs	r3, #64	; 0x40
 800c1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1b6:	e2dc      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1b8:	2380      	movs	r3, #128	; 0x80
 800c1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1be:	e2d8      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a51      	ldr	r2, [pc, #324]	; (800c30c <UART_SetConfig+0x344>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d130      	bne.n	800c22c <UART_SetConfig+0x264>
 800c1ca:	4b4e      	ldr	r3, [pc, #312]	; (800c304 <UART_SetConfig+0x33c>)
 800c1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b05      	cmp	r3, #5
 800c1d4:	d826      	bhi.n	800c224 <UART_SetConfig+0x25c>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <UART_SetConfig+0x214>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c1f5 	.word	0x0800c1f5
 800c1e0:	0800c1fd 	.word	0x0800c1fd
 800c1e4:	0800c205 	.word	0x0800c205
 800c1e8:	0800c20d 	.word	0x0800c20d
 800c1ec:	0800c215 	.word	0x0800c215
 800c1f0:	0800c21d 	.word	0x0800c21d
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fa:	e2ba      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c202:	e2b6      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c204:	2308      	movs	r3, #8
 800c206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20a:	e2b2      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c20c:	2310      	movs	r3, #16
 800c20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c212:	e2ae      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c214:	2320      	movs	r3, #32
 800c216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c21a:	e2aa      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c21c:	2340      	movs	r3, #64	; 0x40
 800c21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c222:	e2a6      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c224:	2380      	movs	r3, #128	; 0x80
 800c226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22a:	e2a2      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a37      	ldr	r2, [pc, #220]	; (800c310 <UART_SetConfig+0x348>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d130      	bne.n	800c298 <UART_SetConfig+0x2d0>
 800c236:	4b33      	ldr	r3, [pc, #204]	; (800c304 <UART_SetConfig+0x33c>)
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	f003 0307 	and.w	r3, r3, #7
 800c23e:	2b05      	cmp	r3, #5
 800c240:	d826      	bhi.n	800c290 <UART_SetConfig+0x2c8>
 800c242:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <UART_SetConfig+0x280>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c261 	.word	0x0800c261
 800c24c:	0800c269 	.word	0x0800c269
 800c250:	0800c271 	.word	0x0800c271
 800c254:	0800c279 	.word	0x0800c279
 800c258:	0800c281 	.word	0x0800c281
 800c25c:	0800c289 	.word	0x0800c289
 800c260:	2300      	movs	r3, #0
 800c262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c266:	e284      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c268:	2304      	movs	r3, #4
 800c26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26e:	e280      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c270:	2308      	movs	r3, #8
 800c272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c276:	e27c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c278:	2310      	movs	r3, #16
 800c27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c27e:	e278      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c280:	2320      	movs	r3, #32
 800c282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c286:	e274      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c28e:	e270      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c290:	2380      	movs	r3, #128	; 0x80
 800c292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c296:	e26c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <UART_SetConfig+0x34c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d142      	bne.n	800c328 <UART_SetConfig+0x360>
 800c2a2:	4b18      	ldr	r3, [pc, #96]	; (800c304 <UART_SetConfig+0x33c>)
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	d838      	bhi.n	800c320 <UART_SetConfig+0x358>
 800c2ae:	a201      	add	r2, pc, #4	; (adr r2, 800c2b4 <UART_SetConfig+0x2ec>)
 800c2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b4:	0800c2cd 	.word	0x0800c2cd
 800c2b8:	0800c2d5 	.word	0x0800c2d5
 800c2bc:	0800c2dd 	.word	0x0800c2dd
 800c2c0:	0800c2e5 	.word	0x0800c2e5
 800c2c4:	0800c2ed 	.word	0x0800c2ed
 800c2c8:	0800c319 	.word	0x0800c319
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e24e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e24a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c2dc:	2308      	movs	r3, #8
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	e246      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ea:	e242      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c2ec:	2320      	movs	r3, #32
 800c2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2f2:	e23e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c2f4:	cfff69f3 	.word	0xcfff69f3
 800c2f8:	58000c00 	.word	0x58000c00
 800c2fc:	11fff4ff 	.word	0x11fff4ff
 800c300:	40011000 	.word	0x40011000
 800c304:	58024400 	.word	0x58024400
 800c308:	40004400 	.word	0x40004400
 800c30c:	40004800 	.word	0x40004800
 800c310:	40004c00 	.word	0x40004c00
 800c314:	40005000 	.word	0x40005000
 800c318:	2340      	movs	r3, #64	; 0x40
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e228      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c320:	2380      	movs	r3, #128	; 0x80
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e224      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4ab1      	ldr	r2, [pc, #708]	; (800c5f4 <UART_SetConfig+0x62c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d176      	bne.n	800c420 <UART_SetConfig+0x458>
 800c332:	4bb1      	ldr	r3, [pc, #708]	; (800c5f8 <UART_SetConfig+0x630>)
 800c334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c33a:	2b28      	cmp	r3, #40	; 0x28
 800c33c:	d86c      	bhi.n	800c418 <UART_SetConfig+0x450>
 800c33e:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <UART_SetConfig+0x37c>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c3e9 	.word	0x0800c3e9
 800c348:	0800c419 	.word	0x0800c419
 800c34c:	0800c419 	.word	0x0800c419
 800c350:	0800c419 	.word	0x0800c419
 800c354:	0800c419 	.word	0x0800c419
 800c358:	0800c419 	.word	0x0800c419
 800c35c:	0800c419 	.word	0x0800c419
 800c360:	0800c419 	.word	0x0800c419
 800c364:	0800c3f1 	.word	0x0800c3f1
 800c368:	0800c419 	.word	0x0800c419
 800c36c:	0800c419 	.word	0x0800c419
 800c370:	0800c419 	.word	0x0800c419
 800c374:	0800c419 	.word	0x0800c419
 800c378:	0800c419 	.word	0x0800c419
 800c37c:	0800c419 	.word	0x0800c419
 800c380:	0800c419 	.word	0x0800c419
 800c384:	0800c3f9 	.word	0x0800c3f9
 800c388:	0800c419 	.word	0x0800c419
 800c38c:	0800c419 	.word	0x0800c419
 800c390:	0800c419 	.word	0x0800c419
 800c394:	0800c419 	.word	0x0800c419
 800c398:	0800c419 	.word	0x0800c419
 800c39c:	0800c419 	.word	0x0800c419
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c401 	.word	0x0800c401
 800c3a8:	0800c419 	.word	0x0800c419
 800c3ac:	0800c419 	.word	0x0800c419
 800c3b0:	0800c419 	.word	0x0800c419
 800c3b4:	0800c419 	.word	0x0800c419
 800c3b8:	0800c419 	.word	0x0800c419
 800c3bc:	0800c419 	.word	0x0800c419
 800c3c0:	0800c419 	.word	0x0800c419
 800c3c4:	0800c409 	.word	0x0800c409
 800c3c8:	0800c419 	.word	0x0800c419
 800c3cc:	0800c419 	.word	0x0800c419
 800c3d0:	0800c419 	.word	0x0800c419
 800c3d4:	0800c419 	.word	0x0800c419
 800c3d8:	0800c419 	.word	0x0800c419
 800c3dc:	0800c419 	.word	0x0800c419
 800c3e0:	0800c419 	.word	0x0800c419
 800c3e4:	0800c411 	.word	0x0800c411
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e1c0      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c3f0:	2304      	movs	r3, #4
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e1bc      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e1b8      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c400:	2310      	movs	r3, #16
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e1b4      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c408:	2320      	movs	r3, #32
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	e1b0      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c410:	2340      	movs	r3, #64	; 0x40
 800c412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c416:	e1ac      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c418:	2380      	movs	r3, #128	; 0x80
 800c41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41e:	e1a8      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a75      	ldr	r2, [pc, #468]	; (800c5fc <UART_SetConfig+0x634>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d130      	bne.n	800c48c <UART_SetConfig+0x4c4>
 800c42a:	4b73      	ldr	r3, [pc, #460]	; (800c5f8 <UART_SetConfig+0x630>)
 800c42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	2b05      	cmp	r3, #5
 800c434:	d826      	bhi.n	800c484 <UART_SetConfig+0x4bc>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <UART_SetConfig+0x474>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c455 	.word	0x0800c455
 800c440:	0800c45d 	.word	0x0800c45d
 800c444:	0800c465 	.word	0x0800c465
 800c448:	0800c46d 	.word	0x0800c46d
 800c44c:	0800c475 	.word	0x0800c475
 800c450:	0800c47d 	.word	0x0800c47d
 800c454:	2300      	movs	r3, #0
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e18a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c45c:	2304      	movs	r3, #4
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e186      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c464:	2308      	movs	r3, #8
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e182      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c46c:	2310      	movs	r3, #16
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e17e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c474:	2320      	movs	r3, #32
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47a:	e17a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c47c:	2340      	movs	r3, #64	; 0x40
 800c47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c482:	e176      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c484:	2380      	movs	r3, #128	; 0x80
 800c486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48a:	e172      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a5b      	ldr	r2, [pc, #364]	; (800c600 <UART_SetConfig+0x638>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d130      	bne.n	800c4f8 <UART_SetConfig+0x530>
 800c496:	4b58      	ldr	r3, [pc, #352]	; (800c5f8 <UART_SetConfig+0x630>)
 800c498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	2b05      	cmp	r3, #5
 800c4a0:	d826      	bhi.n	800c4f0 <UART_SetConfig+0x528>
 800c4a2:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <UART_SetConfig+0x4e0>)
 800c4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a8:	0800c4c1 	.word	0x0800c4c1
 800c4ac:	0800c4c9 	.word	0x0800c4c9
 800c4b0:	0800c4d1 	.word	0x0800c4d1
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4e1 	.word	0x0800c4e1
 800c4bc:	0800c4e9 	.word	0x0800c4e9
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c6:	e154      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ce:	e150      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4d0:	2308      	movs	r3, #8
 800c4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d6:	e14c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4de:	e148      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4e0:	2320      	movs	r3, #32
 800c4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e6:	e144      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4e8:	2340      	movs	r3, #64	; 0x40
 800c4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ee:	e140      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4f0:	2380      	movs	r3, #128	; 0x80
 800c4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f6:	e13c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a41      	ldr	r2, [pc, #260]	; (800c604 <UART_SetConfig+0x63c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	f040 8082 	bne.w	800c608 <UART_SetConfig+0x640>
 800c504:	4b3c      	ldr	r3, [pc, #240]	; (800c5f8 <UART_SetConfig+0x630>)
 800c506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c50c:	2b28      	cmp	r3, #40	; 0x28
 800c50e:	d86d      	bhi.n	800c5ec <UART_SetConfig+0x624>
 800c510:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <UART_SetConfig+0x550>)
 800c512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c516:	bf00      	nop
 800c518:	0800c5bd 	.word	0x0800c5bd
 800c51c:	0800c5ed 	.word	0x0800c5ed
 800c520:	0800c5ed 	.word	0x0800c5ed
 800c524:	0800c5ed 	.word	0x0800c5ed
 800c528:	0800c5ed 	.word	0x0800c5ed
 800c52c:	0800c5ed 	.word	0x0800c5ed
 800c530:	0800c5ed 	.word	0x0800c5ed
 800c534:	0800c5ed 	.word	0x0800c5ed
 800c538:	0800c5c5 	.word	0x0800c5c5
 800c53c:	0800c5ed 	.word	0x0800c5ed
 800c540:	0800c5ed 	.word	0x0800c5ed
 800c544:	0800c5ed 	.word	0x0800c5ed
 800c548:	0800c5ed 	.word	0x0800c5ed
 800c54c:	0800c5ed 	.word	0x0800c5ed
 800c550:	0800c5ed 	.word	0x0800c5ed
 800c554:	0800c5ed 	.word	0x0800c5ed
 800c558:	0800c5cd 	.word	0x0800c5cd
 800c55c:	0800c5ed 	.word	0x0800c5ed
 800c560:	0800c5ed 	.word	0x0800c5ed
 800c564:	0800c5ed 	.word	0x0800c5ed
 800c568:	0800c5ed 	.word	0x0800c5ed
 800c56c:	0800c5ed 	.word	0x0800c5ed
 800c570:	0800c5ed 	.word	0x0800c5ed
 800c574:	0800c5ed 	.word	0x0800c5ed
 800c578:	0800c5d5 	.word	0x0800c5d5
 800c57c:	0800c5ed 	.word	0x0800c5ed
 800c580:	0800c5ed 	.word	0x0800c5ed
 800c584:	0800c5ed 	.word	0x0800c5ed
 800c588:	0800c5ed 	.word	0x0800c5ed
 800c58c:	0800c5ed 	.word	0x0800c5ed
 800c590:	0800c5ed 	.word	0x0800c5ed
 800c594:	0800c5ed 	.word	0x0800c5ed
 800c598:	0800c5dd 	.word	0x0800c5dd
 800c59c:	0800c5ed 	.word	0x0800c5ed
 800c5a0:	0800c5ed 	.word	0x0800c5ed
 800c5a4:	0800c5ed 	.word	0x0800c5ed
 800c5a8:	0800c5ed 	.word	0x0800c5ed
 800c5ac:	0800c5ed 	.word	0x0800c5ed
 800c5b0:	0800c5ed 	.word	0x0800c5ed
 800c5b4:	0800c5ed 	.word	0x0800c5ed
 800c5b8:	0800c5e5 	.word	0x0800c5e5
 800c5bc:	2301      	movs	r3, #1
 800c5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c2:	e0d6      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ca:	e0d2      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5cc:	2308      	movs	r3, #8
 800c5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d2:	e0ce      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5d4:	2310      	movs	r3, #16
 800c5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5da:	e0ca      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5dc:	2320      	movs	r3, #32
 800c5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e2:	e0c6      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5e4:	2340      	movs	r3, #64	; 0x40
 800c5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ea:	e0c2      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5ec:	2380      	movs	r3, #128	; 0x80
 800c5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f2:	e0be      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c5f4:	40011400 	.word	0x40011400
 800c5f8:	58024400 	.word	0x58024400
 800c5fc:	40007800 	.word	0x40007800
 800c600:	40007c00 	.word	0x40007c00
 800c604:	40011800 	.word	0x40011800
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4aad      	ldr	r2, [pc, #692]	; (800c8c4 <UART_SetConfig+0x8fc>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d176      	bne.n	800c700 <UART_SetConfig+0x738>
 800c612:	4bad      	ldr	r3, [pc, #692]	; (800c8c8 <UART_SetConfig+0x900>)
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c61a:	2b28      	cmp	r3, #40	; 0x28
 800c61c:	d86c      	bhi.n	800c6f8 <UART_SetConfig+0x730>
 800c61e:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x65c>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c6c9 	.word	0x0800c6c9
 800c628:	0800c6f9 	.word	0x0800c6f9
 800c62c:	0800c6f9 	.word	0x0800c6f9
 800c630:	0800c6f9 	.word	0x0800c6f9
 800c634:	0800c6f9 	.word	0x0800c6f9
 800c638:	0800c6f9 	.word	0x0800c6f9
 800c63c:	0800c6f9 	.word	0x0800c6f9
 800c640:	0800c6f9 	.word	0x0800c6f9
 800c644:	0800c6d1 	.word	0x0800c6d1
 800c648:	0800c6f9 	.word	0x0800c6f9
 800c64c:	0800c6f9 	.word	0x0800c6f9
 800c650:	0800c6f9 	.word	0x0800c6f9
 800c654:	0800c6f9 	.word	0x0800c6f9
 800c658:	0800c6f9 	.word	0x0800c6f9
 800c65c:	0800c6f9 	.word	0x0800c6f9
 800c660:	0800c6f9 	.word	0x0800c6f9
 800c664:	0800c6d9 	.word	0x0800c6d9
 800c668:	0800c6f9 	.word	0x0800c6f9
 800c66c:	0800c6f9 	.word	0x0800c6f9
 800c670:	0800c6f9 	.word	0x0800c6f9
 800c674:	0800c6f9 	.word	0x0800c6f9
 800c678:	0800c6f9 	.word	0x0800c6f9
 800c67c:	0800c6f9 	.word	0x0800c6f9
 800c680:	0800c6f9 	.word	0x0800c6f9
 800c684:	0800c6e1 	.word	0x0800c6e1
 800c688:	0800c6f9 	.word	0x0800c6f9
 800c68c:	0800c6f9 	.word	0x0800c6f9
 800c690:	0800c6f9 	.word	0x0800c6f9
 800c694:	0800c6f9 	.word	0x0800c6f9
 800c698:	0800c6f9 	.word	0x0800c6f9
 800c69c:	0800c6f9 	.word	0x0800c6f9
 800c6a0:	0800c6f9 	.word	0x0800c6f9
 800c6a4:	0800c6e9 	.word	0x0800c6e9
 800c6a8:	0800c6f9 	.word	0x0800c6f9
 800c6ac:	0800c6f9 	.word	0x0800c6f9
 800c6b0:	0800c6f9 	.word	0x0800c6f9
 800c6b4:	0800c6f9 	.word	0x0800c6f9
 800c6b8:	0800c6f9 	.word	0x0800c6f9
 800c6bc:	0800c6f9 	.word	0x0800c6f9
 800c6c0:	0800c6f9 	.word	0x0800c6f9
 800c6c4:	0800c6f1 	.word	0x0800c6f1
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e050      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6d0:	2304      	movs	r3, #4
 800c6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d6:	e04c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6d8:	2308      	movs	r3, #8
 800c6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6de:	e048      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6e6:	e044      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6e8:	2320      	movs	r3, #32
 800c6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ee:	e040      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f6:	e03c      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c6f8:	2380      	movs	r3, #128	; 0x80
 800c6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6fe:	e038      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a71      	ldr	r2, [pc, #452]	; (800c8cc <UART_SetConfig+0x904>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d130      	bne.n	800c76c <UART_SetConfig+0x7a4>
 800c70a:	4b6f      	ldr	r3, [pc, #444]	; (800c8c8 <UART_SetConfig+0x900>)
 800c70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	2b05      	cmp	r3, #5
 800c714:	d826      	bhi.n	800c764 <UART_SetConfig+0x79c>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <UART_SetConfig+0x754>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c735 	.word	0x0800c735
 800c720:	0800c73d 	.word	0x0800c73d
 800c724:	0800c745 	.word	0x0800c745
 800c728:	0800c74d 	.word	0x0800c74d
 800c72c:	0800c755 	.word	0x0800c755
 800c730:	0800c75d 	.word	0x0800c75d
 800c734:	2302      	movs	r3, #2
 800c736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73a:	e01a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c73c:	2304      	movs	r3, #4
 800c73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c742:	e016      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c744:	2308      	movs	r3, #8
 800c746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74a:	e012      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c74c:	2310      	movs	r3, #16
 800c74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c752:	e00e      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c754:	2320      	movs	r3, #32
 800c756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75a:	e00a      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c75c:	2340      	movs	r3, #64	; 0x40
 800c75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c762:	e006      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c764:	2380      	movs	r3, #128	; 0x80
 800c766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c76a:	e002      	b.n	800c772 <UART_SetConfig+0x7aa>
 800c76c:	2380      	movs	r3, #128	; 0x80
 800c76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a55      	ldr	r2, [pc, #340]	; (800c8cc <UART_SetConfig+0x904>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	f040 80f0 	bne.w	800c95e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c77e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c782:	2b20      	cmp	r3, #32
 800c784:	dc46      	bgt.n	800c814 <UART_SetConfig+0x84c>
 800c786:	2b02      	cmp	r3, #2
 800c788:	db75      	blt.n	800c876 <UART_SetConfig+0x8ae>
 800c78a:	3b02      	subs	r3, #2
 800c78c:	2b1e      	cmp	r3, #30
 800c78e:	d872      	bhi.n	800c876 <UART_SetConfig+0x8ae>
 800c790:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <UART_SetConfig+0x7d0>)
 800c792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c796:	bf00      	nop
 800c798:	0800c81b 	.word	0x0800c81b
 800c79c:	0800c877 	.word	0x0800c877
 800c7a0:	0800c823 	.word	0x0800c823
 800c7a4:	0800c877 	.word	0x0800c877
 800c7a8:	0800c877 	.word	0x0800c877
 800c7ac:	0800c877 	.word	0x0800c877
 800c7b0:	0800c833 	.word	0x0800c833
 800c7b4:	0800c877 	.word	0x0800c877
 800c7b8:	0800c877 	.word	0x0800c877
 800c7bc:	0800c877 	.word	0x0800c877
 800c7c0:	0800c877 	.word	0x0800c877
 800c7c4:	0800c877 	.word	0x0800c877
 800c7c8:	0800c877 	.word	0x0800c877
 800c7cc:	0800c877 	.word	0x0800c877
 800c7d0:	0800c843 	.word	0x0800c843
 800c7d4:	0800c877 	.word	0x0800c877
 800c7d8:	0800c877 	.word	0x0800c877
 800c7dc:	0800c877 	.word	0x0800c877
 800c7e0:	0800c877 	.word	0x0800c877
 800c7e4:	0800c877 	.word	0x0800c877
 800c7e8:	0800c877 	.word	0x0800c877
 800c7ec:	0800c877 	.word	0x0800c877
 800c7f0:	0800c877 	.word	0x0800c877
 800c7f4:	0800c877 	.word	0x0800c877
 800c7f8:	0800c877 	.word	0x0800c877
 800c7fc:	0800c877 	.word	0x0800c877
 800c800:	0800c877 	.word	0x0800c877
 800c804:	0800c877 	.word	0x0800c877
 800c808:	0800c877 	.word	0x0800c877
 800c80c:	0800c877 	.word	0x0800c877
 800c810:	0800c869 	.word	0x0800c869
 800c814:	2b40      	cmp	r3, #64	; 0x40
 800c816:	d02a      	beq.n	800c86e <UART_SetConfig+0x8a6>
 800c818:	e02d      	b.n	800c876 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c81a:	f7fd f8b9 	bl	8009990 <HAL_RCCEx_GetD3PCLK1Freq>
 800c81e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c820:	e02f      	b.n	800c882 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c822:	f107 0314 	add.w	r3, r7, #20
 800c826:	4618      	mov	r0, r3
 800c828:	f7fd f8c8 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c830:	e027      	b.n	800c882 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c832:	f107 0308 	add.w	r3, r7, #8
 800c836:	4618      	mov	r0, r3
 800c838:	f7fd fa14 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c840:	e01f      	b.n	800c882 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c842:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <UART_SetConfig+0x900>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c84e:	4b1e      	ldr	r3, [pc, #120]	; (800c8c8 <UART_SetConfig+0x900>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	4a1d      	ldr	r2, [pc, #116]	; (800c8d0 <UART_SetConfig+0x908>)
 800c85a:	fa22 f303 	lsr.w	r3, r2, r3
 800c85e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c860:	e00f      	b.n	800c882 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c862:	4b1b      	ldr	r3, [pc, #108]	; (800c8d0 <UART_SetConfig+0x908>)
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c866:	e00c      	b.n	800c882 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c868:	4b1a      	ldr	r3, [pc, #104]	; (800c8d4 <UART_SetConfig+0x90c>)
 800c86a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c86c:	e009      	b.n	800c882 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c86e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c874:	e005      	b.n	800c882 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c876:	2300      	movs	r3, #0
 800c878:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c880:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 81e6 	beq.w	800cc56 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	4a12      	ldr	r2, [pc, #72]	; (800c8d8 <UART_SetConfig+0x910>)
 800c890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c894:	461a      	mov	r2, r3
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	fbb3 f3f2 	udiv	r3, r3, r2
 800c89c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	4413      	add	r3, r2
 800c8a8:	6a3a      	ldr	r2, [r7, #32]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d305      	bcc.n	800c8ba <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8b4:	6a3a      	ldr	r2, [r7, #32]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d910      	bls.n	800c8dc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c8c0:	e1c9      	b.n	800cc56 <UART_SetConfig+0xc8e>
 800c8c2:	bf00      	nop
 800c8c4:	40011c00 	.word	0x40011c00
 800c8c8:	58024400 	.word	0x58024400
 800c8cc:	58000c00 	.word	0x58000c00
 800c8d0:	03d09000 	.word	0x03d09000
 800c8d4:	003d0900 	.word	0x003d0900
 800c8d8:	0800fb10 	.word	0x0800fb10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f04f 0100 	mov.w	r1, #0
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e8:	4ac1      	ldr	r2, [pc, #772]	; (800cbf0 <UART_SetConfig+0xc28>)
 800c8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	f04f 0300 	mov.w	r3, #0
 800c8f4:	f7f3 fd64 	bl	80003c0 <__aeabi_uldivmod>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4619      	mov	r1, r3
 800c900:	f04f 0200 	mov.w	r2, #0
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	020b      	lsls	r3, r1, #8
 800c90a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c90e:	0202      	lsls	r2, r0, #8
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	6849      	ldr	r1, [r1, #4]
 800c914:	0849      	lsrs	r1, r1, #1
 800c916:	4608      	mov	r0, r1
 800c918:	f04f 0100 	mov.w	r1, #0
 800c91c:	1814      	adds	r4, r2, r0
 800c91e:	eb43 0501 	adc.w	r5, r3, r1
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	461a      	mov	r2, r3
 800c928:	f04f 0300 	mov.w	r3, #0
 800c92c:	4620      	mov	r0, r4
 800c92e:	4629      	mov	r1, r5
 800c930:	f7f3 fd46 	bl	80003c0 <__aeabi_uldivmod>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4613      	mov	r3, r2
 800c93a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c942:	d308      	bcc.n	800c956 <UART_SetConfig+0x98e>
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c94a:	d204      	bcs.n	800c956 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c952:	60da      	str	r2, [r3, #12]
 800c954:	e17f      	b.n	800cc56 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c95c:	e17b      	b.n	800cc56 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c966:	f040 80bd 	bne.w	800cae4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800c96a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c96e:	2b20      	cmp	r3, #32
 800c970:	dc48      	bgt.n	800ca04 <UART_SetConfig+0xa3c>
 800c972:	2b00      	cmp	r3, #0
 800c974:	db7b      	blt.n	800ca6e <UART_SetConfig+0xaa6>
 800c976:	2b20      	cmp	r3, #32
 800c978:	d879      	bhi.n	800ca6e <UART_SetConfig+0xaa6>
 800c97a:	a201      	add	r2, pc, #4	; (adr r2, 800c980 <UART_SetConfig+0x9b8>)
 800c97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c980:	0800ca0b 	.word	0x0800ca0b
 800c984:	0800ca13 	.word	0x0800ca13
 800c988:	0800ca6f 	.word	0x0800ca6f
 800c98c:	0800ca6f 	.word	0x0800ca6f
 800c990:	0800ca1b 	.word	0x0800ca1b
 800c994:	0800ca6f 	.word	0x0800ca6f
 800c998:	0800ca6f 	.word	0x0800ca6f
 800c99c:	0800ca6f 	.word	0x0800ca6f
 800c9a0:	0800ca2b 	.word	0x0800ca2b
 800c9a4:	0800ca6f 	.word	0x0800ca6f
 800c9a8:	0800ca6f 	.word	0x0800ca6f
 800c9ac:	0800ca6f 	.word	0x0800ca6f
 800c9b0:	0800ca6f 	.word	0x0800ca6f
 800c9b4:	0800ca6f 	.word	0x0800ca6f
 800c9b8:	0800ca6f 	.word	0x0800ca6f
 800c9bc:	0800ca6f 	.word	0x0800ca6f
 800c9c0:	0800ca3b 	.word	0x0800ca3b
 800c9c4:	0800ca6f 	.word	0x0800ca6f
 800c9c8:	0800ca6f 	.word	0x0800ca6f
 800c9cc:	0800ca6f 	.word	0x0800ca6f
 800c9d0:	0800ca6f 	.word	0x0800ca6f
 800c9d4:	0800ca6f 	.word	0x0800ca6f
 800c9d8:	0800ca6f 	.word	0x0800ca6f
 800c9dc:	0800ca6f 	.word	0x0800ca6f
 800c9e0:	0800ca6f 	.word	0x0800ca6f
 800c9e4:	0800ca6f 	.word	0x0800ca6f
 800c9e8:	0800ca6f 	.word	0x0800ca6f
 800c9ec:	0800ca6f 	.word	0x0800ca6f
 800c9f0:	0800ca6f 	.word	0x0800ca6f
 800c9f4:	0800ca6f 	.word	0x0800ca6f
 800c9f8:	0800ca6f 	.word	0x0800ca6f
 800c9fc:	0800ca6f 	.word	0x0800ca6f
 800ca00:	0800ca61 	.word	0x0800ca61
 800ca04:	2b40      	cmp	r3, #64	; 0x40
 800ca06:	d02e      	beq.n	800ca66 <UART_SetConfig+0xa9e>
 800ca08:	e031      	b.n	800ca6e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca0a:	f7fb fc5b 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800ca0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca10:	e033      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca12:	f7fb fc6d 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800ca16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca18:	e02f      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca1a:	f107 0314 	add.w	r3, r7, #20
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fc ffcc 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca28:	e027      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca2a:	f107 0308 	add.w	r3, r7, #8
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fd f918 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca38:	e01f      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca3a:	4b6e      	ldr	r3, [pc, #440]	; (800cbf4 <UART_SetConfig+0xc2c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d009      	beq.n	800ca5a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca46:	4b6b      	ldr	r3, [pc, #428]	; (800cbf4 <UART_SetConfig+0xc2c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	08db      	lsrs	r3, r3, #3
 800ca4c:	f003 0303 	and.w	r3, r3, #3
 800ca50:	4a69      	ldr	r2, [pc, #420]	; (800cbf8 <UART_SetConfig+0xc30>)
 800ca52:	fa22 f303 	lsr.w	r3, r2, r3
 800ca56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca58:	e00f      	b.n	800ca7a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ca5a:	4b67      	ldr	r3, [pc, #412]	; (800cbf8 <UART_SetConfig+0xc30>)
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca5e:	e00c      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca60:	4b66      	ldr	r3, [pc, #408]	; (800cbfc <UART_SetConfig+0xc34>)
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca64:	e009      	b.n	800ca7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca6c:	e005      	b.n	800ca7a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ca78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 80ea 	beq.w	800cc56 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca86:	4a5a      	ldr	r2, [pc, #360]	; (800cbf0 <UART_SetConfig+0xc28>)
 800ca88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca94:	005a      	lsls	r2, r3, #1
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	085b      	lsrs	r3, r3, #1
 800ca9c:	441a      	add	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	2b0f      	cmp	r3, #15
 800caac:	d916      	bls.n	800cadc <UART_SetConfig+0xb14>
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cab4:	d212      	bcs.n	800cadc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f023 030f 	bic.w	r3, r3, #15
 800cabe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	085b      	lsrs	r3, r3, #1
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	b29a      	uxth	r2, r3
 800cacc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cace:	4313      	orrs	r3, r2
 800cad0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cad8:	60da      	str	r2, [r3, #12]
 800cada:	e0bc      	b.n	800cc56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cae2:	e0b8      	b.n	800cc56 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cae8:	2b20      	cmp	r3, #32
 800caea:	dc4b      	bgt.n	800cb84 <UART_SetConfig+0xbbc>
 800caec:	2b00      	cmp	r3, #0
 800caee:	f2c0 8087 	blt.w	800cc00 <UART_SetConfig+0xc38>
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	f200 8084 	bhi.w	800cc00 <UART_SetConfig+0xc38>
 800caf8:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <UART_SetConfig+0xb38>)
 800cafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafe:	bf00      	nop
 800cb00:	0800cb8b 	.word	0x0800cb8b
 800cb04:	0800cb93 	.word	0x0800cb93
 800cb08:	0800cc01 	.word	0x0800cc01
 800cb0c:	0800cc01 	.word	0x0800cc01
 800cb10:	0800cb9b 	.word	0x0800cb9b
 800cb14:	0800cc01 	.word	0x0800cc01
 800cb18:	0800cc01 	.word	0x0800cc01
 800cb1c:	0800cc01 	.word	0x0800cc01
 800cb20:	0800cbab 	.word	0x0800cbab
 800cb24:	0800cc01 	.word	0x0800cc01
 800cb28:	0800cc01 	.word	0x0800cc01
 800cb2c:	0800cc01 	.word	0x0800cc01
 800cb30:	0800cc01 	.word	0x0800cc01
 800cb34:	0800cc01 	.word	0x0800cc01
 800cb38:	0800cc01 	.word	0x0800cc01
 800cb3c:	0800cc01 	.word	0x0800cc01
 800cb40:	0800cbbb 	.word	0x0800cbbb
 800cb44:	0800cc01 	.word	0x0800cc01
 800cb48:	0800cc01 	.word	0x0800cc01
 800cb4c:	0800cc01 	.word	0x0800cc01
 800cb50:	0800cc01 	.word	0x0800cc01
 800cb54:	0800cc01 	.word	0x0800cc01
 800cb58:	0800cc01 	.word	0x0800cc01
 800cb5c:	0800cc01 	.word	0x0800cc01
 800cb60:	0800cc01 	.word	0x0800cc01
 800cb64:	0800cc01 	.word	0x0800cc01
 800cb68:	0800cc01 	.word	0x0800cc01
 800cb6c:	0800cc01 	.word	0x0800cc01
 800cb70:	0800cc01 	.word	0x0800cc01
 800cb74:	0800cc01 	.word	0x0800cc01
 800cb78:	0800cc01 	.word	0x0800cc01
 800cb7c:	0800cc01 	.word	0x0800cc01
 800cb80:	0800cbe1 	.word	0x0800cbe1
 800cb84:	2b40      	cmp	r3, #64	; 0x40
 800cb86:	d02e      	beq.n	800cbe6 <UART_SetConfig+0xc1e>
 800cb88:	e03a      	b.n	800cc00 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb8a:	f7fb fb9b 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800cb8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb90:	e03c      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb92:	f7fb fbad 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800cb96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb98:	e038      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9a:	f107 0314 	add.w	r3, r7, #20
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fc ff0c 	bl	80099bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cba8:	e030      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbaa:	f107 0308 	add.w	r3, r7, #8
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd f858 	bl	8009c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbb8:	e028      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <UART_SetConfig+0xc2c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d009      	beq.n	800cbda <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbc6:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <UART_SetConfig+0xc2c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	08db      	lsrs	r3, r3, #3
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	4a09      	ldr	r2, [pc, #36]	; (800cbf8 <UART_SetConfig+0xc30>)
 800cbd2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbd8:	e018      	b.n	800cc0c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800cbda:	4b07      	ldr	r3, [pc, #28]	; (800cbf8 <UART_SetConfig+0xc30>)
 800cbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbde:	e015      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbe0:	4b06      	ldr	r3, [pc, #24]	; (800cbfc <UART_SetConfig+0xc34>)
 800cbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbe4:	e012      	b.n	800cc0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbec:	e00e      	b.n	800cc0c <UART_SetConfig+0xc44>
 800cbee:	bf00      	nop
 800cbf0:	0800fb10 	.word	0x0800fb10
 800cbf4:	58024400 	.word	0x58024400
 800cbf8:	03d09000 	.word	0x03d09000
 800cbfc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cc0a:	bf00      	nop
    }

    if (pclk != 0U)
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d021      	beq.n	800cc56 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc16:	4a1a      	ldr	r2, [pc, #104]	; (800cc80 <UART_SetConfig+0xcb8>)
 800cc18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc20:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	085b      	lsrs	r3, r3, #1
 800cc2a:	441a      	add	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc38:	2b0f      	cmp	r3, #15
 800cc3a:	d909      	bls.n	800cc50 <UART_SetConfig+0xc88>
 800cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc42:	d205      	bcs.n	800cc50 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60da      	str	r2, [r3, #12]
 800cc4e:	e002      	b.n	800cc56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3738      	adds	r7, #56	; 0x38
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	0800fb10 	.word	0x0800fb10

0800cc84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00a      	beq.n	800ccae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb2:	f003 0302 	and.w	r3, r3, #2
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	430a      	orrs	r2, r1
 800ccce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00a      	beq.n	800ccf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf6:	f003 0308 	and.w	r3, r3, #8
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	430a      	orrs	r2, r1
 800cd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00a      	beq.n	800cd36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	430a      	orrs	r2, r1
 800cd34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00a      	beq.n	800cd58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01a      	beq.n	800cd9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd82:	d10a      	bne.n	800cd9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	430a      	orrs	r2, r1
 800cd98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	605a      	str	r2, [r3, #4]
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdd8:	f7f6 fd46 	bl	8003868 <HAL_GetTick>
 800cddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0308 	and.w	r3, r3, #8
 800cde8:	2b08      	cmp	r3, #8
 800cdea:	d10e      	bne.n	800ce0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f82f 	bl	800ce5e <UART_WaitOnFlagUntilTimeout>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e025      	b.n	800ce56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b04      	cmp	r3, #4
 800ce16:	d10e      	bne.n	800ce36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f819 	bl	800ce5e <UART_WaitOnFlagUntilTimeout>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e00f      	b.n	800ce56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2220      	movs	r2, #32
 800ce3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b09c      	sub	sp, #112	; 0x70
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce6e:	e0a9      	b.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce76:	f000 80a5 	beq.w	800cfc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce7a:	f7f6 fcf5 	bl	8003868 <HAL_GetTick>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d302      	bcc.n	800ce90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ce8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d140      	bne.n	800cf12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce98:	e853 3f00 	ldrex	r3, [r3]
 800ce9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cea4:	667b      	str	r3, [r7, #100]	; 0x64
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ceb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceb6:	e841 2300 	strex	r3, r2, [r1]
 800ceba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1e6      	bne.n	800ce90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3308      	adds	r3, #8
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cecc:	e853 3f00 	ldrex	r3, [r3]
 800ced0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	f023 0301 	bic.w	r3, r3, #1
 800ced8:	663b      	str	r3, [r7, #96]	; 0x60
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3308      	adds	r3, #8
 800cee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cee2:	64ba      	str	r2, [r7, #72]	; 0x48
 800cee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceea:	e841 2300 	strex	r3, r2, [r1]
 800ceee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1e5      	bne.n	800cec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2220      	movs	r2, #32
 800cefa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e069      	b.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 0304 	and.w	r3, r3, #4
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d051      	beq.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	69db      	ldr	r3, [r3, #28]
 800cf26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf2e:	d149      	bne.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	e853 3f00 	ldrex	r3, [r3]
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf58:	637b      	str	r3, [r7, #52]	; 0x34
 800cf5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf60:	e841 2300 	strex	r3, r2, [r1]
 800cf64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1e6      	bne.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3308      	adds	r3, #8
 800cf72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	e853 3f00 	ldrex	r3, [r3]
 800cf7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	f023 0301 	bic.w	r3, r3, #1
 800cf82:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3308      	adds	r3, #8
 800cf8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf8c:	623a      	str	r2, [r7, #32]
 800cf8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf90:	69f9      	ldr	r1, [r7, #28]
 800cf92:	6a3a      	ldr	r2, [r7, #32]
 800cf94:	e841 2300 	strex	r3, r2, [r1]
 800cf98:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1e5      	bne.n	800cf6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2220      	movs	r2, #32
 800cfac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e010      	b.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	69da      	ldr	r2, [r3, #28]
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	4013      	ands	r3, r2
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	bf0c      	ite	eq
 800cfd4:	2301      	moveq	r3, #1
 800cfd6:	2300      	movne	r3, #0
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	461a      	mov	r2, r3
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	f43f af46 	beq.w	800ce70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3770      	adds	r7, #112	; 0x70
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b085      	sub	sp, #20
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d101      	bne.n	800d004 <HAL_UARTEx_DisableFifoMode+0x16>
 800d000:	2302      	movs	r3, #2
 800d002:	e027      	b.n	800d054 <HAL_UARTEx_DisableFifoMode+0x66>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2224      	movs	r2, #36	; 0x24
 800d010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0201 	bic.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d032:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2220      	movs	r2, #32
 800d046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d070:	2b01      	cmp	r3, #1
 800d072:	d101      	bne.n	800d078 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d074:	2302      	movs	r3, #2
 800d076:	e02d      	b.n	800d0d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2224      	movs	r2, #36	; 0x24
 800d084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f022 0201 	bic.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f84f 	bl	800d158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d101      	bne.n	800d0f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	e02d      	b.n	800d150 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2224      	movs	r2, #36	; 0x24
 800d100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0201 	bic.w	r2, r2, #1
 800d11a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	430a      	orrs	r2, r1
 800d12e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f811 	bl	800d158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2220      	movs	r2, #32
 800d142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d164:	2b00      	cmp	r3, #0
 800d166:	d108      	bne.n	800d17a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d178:	e031      	b.n	800d1de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d17a:	2310      	movs	r3, #16
 800d17c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d17e:	2310      	movs	r3, #16
 800d180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	0e5b      	lsrs	r3, r3, #25
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	f003 0307 	and.w	r3, r3, #7
 800d190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	0f5b      	lsrs	r3, r3, #29
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	f003 0307 	and.w	r3, r3, #7
 800d1a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
 800d1a4:	7b3a      	ldrb	r2, [r7, #12]
 800d1a6:	4911      	ldr	r1, [pc, #68]	; (800d1ec <UARTEx_SetNbDataToProcess+0x94>)
 800d1a8:	5c8a      	ldrb	r2, [r1, r2]
 800d1aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1ae:	7b3a      	ldrb	r2, [r7, #12]
 800d1b0:	490f      	ldr	r1, [pc, #60]	; (800d1f0 <UARTEx_SetNbDataToProcess+0x98>)
 800d1b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	7b7a      	ldrb	r2, [r7, #13]
 800d1c4:	4909      	ldr	r1, [pc, #36]	; (800d1ec <UARTEx_SetNbDataToProcess+0x94>)
 800d1c6:	5c8a      	ldrb	r2, [r1, r2]
 800d1c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1cc:	7b7a      	ldrb	r2, [r7, #13]
 800d1ce:	4908      	ldr	r1, [pc, #32]	; (800d1f0 <UARTEx_SetNbDataToProcess+0x98>)
 800d1d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1de:	bf00      	nop
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	0800fb28 	.word	0x0800fb28
 800d1f0:	0800fb30 	.word	0x0800fb30

0800d1f4 <__errno>:
 800d1f4:	4b01      	ldr	r3, [pc, #4]	; (800d1fc <__errno+0x8>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2400001c 	.word	0x2400001c

0800d200 <__libc_init_array>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4d0d      	ldr	r5, [pc, #52]	; (800d238 <__libc_init_array+0x38>)
 800d204:	4c0d      	ldr	r4, [pc, #52]	; (800d23c <__libc_init_array+0x3c>)
 800d206:	1b64      	subs	r4, r4, r5
 800d208:	10a4      	asrs	r4, r4, #2
 800d20a:	2600      	movs	r6, #0
 800d20c:	42a6      	cmp	r6, r4
 800d20e:	d109      	bne.n	800d224 <__libc_init_array+0x24>
 800d210:	4d0b      	ldr	r5, [pc, #44]	; (800d240 <__libc_init_array+0x40>)
 800d212:	4c0c      	ldr	r4, [pc, #48]	; (800d244 <__libc_init_array+0x44>)
 800d214:	f002 fc62 	bl	800fadc <_init>
 800d218:	1b64      	subs	r4, r4, r5
 800d21a:	10a4      	asrs	r4, r4, #2
 800d21c:	2600      	movs	r6, #0
 800d21e:	42a6      	cmp	r6, r4
 800d220:	d105      	bne.n	800d22e <__libc_init_array+0x2e>
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	f855 3b04 	ldr.w	r3, [r5], #4
 800d228:	4798      	blx	r3
 800d22a:	3601      	adds	r6, #1
 800d22c:	e7ee      	b.n	800d20c <__libc_init_array+0xc>
 800d22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d232:	4798      	blx	r3
 800d234:	3601      	adds	r6, #1
 800d236:	e7f2      	b.n	800d21e <__libc_init_array+0x1e>
 800d238:	0800ff24 	.word	0x0800ff24
 800d23c:	0800ff24 	.word	0x0800ff24
 800d240:	0800ff24 	.word	0x0800ff24
 800d244:	0800ff28 	.word	0x0800ff28

0800d248 <memcpy>:
 800d248:	440a      	add	r2, r1
 800d24a:	4291      	cmp	r1, r2
 800d24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d250:	d100      	bne.n	800d254 <memcpy+0xc>
 800d252:	4770      	bx	lr
 800d254:	b510      	push	{r4, lr}
 800d256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d25e:	4291      	cmp	r1, r2
 800d260:	d1f9      	bne.n	800d256 <memcpy+0xe>
 800d262:	bd10      	pop	{r4, pc}

0800d264 <memset>:
 800d264:	4402      	add	r2, r0
 800d266:	4603      	mov	r3, r0
 800d268:	4293      	cmp	r3, r2
 800d26a:	d100      	bne.n	800d26e <memset+0xa>
 800d26c:	4770      	bx	lr
 800d26e:	f803 1b01 	strb.w	r1, [r3], #1
 800d272:	e7f9      	b.n	800d268 <memset+0x4>

0800d274 <__cvt>:
 800d274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d276:	ed2d 8b02 	vpush	{d8}
 800d27a:	eeb0 8b40 	vmov.f64	d8, d0
 800d27e:	b085      	sub	sp, #20
 800d280:	4617      	mov	r7, r2
 800d282:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d284:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d286:	ee18 2a90 	vmov	r2, s17
 800d28a:	f025 0520 	bic.w	r5, r5, #32
 800d28e:	2a00      	cmp	r2, #0
 800d290:	bfb6      	itet	lt
 800d292:	222d      	movlt	r2, #45	; 0x2d
 800d294:	2200      	movge	r2, #0
 800d296:	eeb1 8b40 	vneglt.f64	d8, d0
 800d29a:	2d46      	cmp	r5, #70	; 0x46
 800d29c:	460c      	mov	r4, r1
 800d29e:	701a      	strb	r2, [r3, #0]
 800d2a0:	d004      	beq.n	800d2ac <__cvt+0x38>
 800d2a2:	2d45      	cmp	r5, #69	; 0x45
 800d2a4:	d100      	bne.n	800d2a8 <__cvt+0x34>
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	2102      	movs	r1, #2
 800d2aa:	e000      	b.n	800d2ae <__cvt+0x3a>
 800d2ac:	2103      	movs	r1, #3
 800d2ae:	ab03      	add	r3, sp, #12
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	ab02      	add	r3, sp, #8
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	4633      	mov	r3, r6
 800d2ba:	eeb0 0b48 	vmov.f64	d0, d8
 800d2be:	f000 fcab 	bl	800dc18 <_dtoa_r>
 800d2c2:	2d47      	cmp	r5, #71	; 0x47
 800d2c4:	d109      	bne.n	800d2da <__cvt+0x66>
 800d2c6:	07fb      	lsls	r3, r7, #31
 800d2c8:	d407      	bmi.n	800d2da <__cvt+0x66>
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2ce:	1a1b      	subs	r3, r3, r0
 800d2d0:	6013      	str	r3, [r2, #0]
 800d2d2:	b005      	add	sp, #20
 800d2d4:	ecbd 8b02 	vpop	{d8}
 800d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2da:	2d46      	cmp	r5, #70	; 0x46
 800d2dc:	eb00 0204 	add.w	r2, r0, r4
 800d2e0:	d10c      	bne.n	800d2fc <__cvt+0x88>
 800d2e2:	7803      	ldrb	r3, [r0, #0]
 800d2e4:	2b30      	cmp	r3, #48	; 0x30
 800d2e6:	d107      	bne.n	800d2f8 <__cvt+0x84>
 800d2e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f0:	bf1c      	itt	ne
 800d2f2:	f1c4 0401 	rsbne	r4, r4, #1
 800d2f6:	6034      	strne	r4, [r6, #0]
 800d2f8:	6833      	ldr	r3, [r6, #0]
 800d2fa:	441a      	add	r2, r3
 800d2fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d304:	bf08      	it	eq
 800d306:	9203      	streq	r2, [sp, #12]
 800d308:	2130      	movs	r1, #48	; 0x30
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d2dc      	bcs.n	800d2ca <__cvt+0x56>
 800d310:	1c5c      	adds	r4, r3, #1
 800d312:	9403      	str	r4, [sp, #12]
 800d314:	7019      	strb	r1, [r3, #0]
 800d316:	e7f8      	b.n	800d30a <__cvt+0x96>

0800d318 <__exponent>:
 800d318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d31a:	4603      	mov	r3, r0
 800d31c:	2900      	cmp	r1, #0
 800d31e:	bfb8      	it	lt
 800d320:	4249      	neglt	r1, r1
 800d322:	f803 2b02 	strb.w	r2, [r3], #2
 800d326:	bfb4      	ite	lt
 800d328:	222d      	movlt	r2, #45	; 0x2d
 800d32a:	222b      	movge	r2, #43	; 0x2b
 800d32c:	2909      	cmp	r1, #9
 800d32e:	7042      	strb	r2, [r0, #1]
 800d330:	dd2a      	ble.n	800d388 <__exponent+0x70>
 800d332:	f10d 0407 	add.w	r4, sp, #7
 800d336:	46a4      	mov	ip, r4
 800d338:	270a      	movs	r7, #10
 800d33a:	46a6      	mov	lr, r4
 800d33c:	460a      	mov	r2, r1
 800d33e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d342:	fb07 1516 	mls	r5, r7, r6, r1
 800d346:	3530      	adds	r5, #48	; 0x30
 800d348:	2a63      	cmp	r2, #99	; 0x63
 800d34a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d34e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d352:	4631      	mov	r1, r6
 800d354:	dcf1      	bgt.n	800d33a <__exponent+0x22>
 800d356:	3130      	adds	r1, #48	; 0x30
 800d358:	f1ae 0502 	sub.w	r5, lr, #2
 800d35c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d360:	1c44      	adds	r4, r0, #1
 800d362:	4629      	mov	r1, r5
 800d364:	4561      	cmp	r1, ip
 800d366:	d30a      	bcc.n	800d37e <__exponent+0x66>
 800d368:	f10d 0209 	add.w	r2, sp, #9
 800d36c:	eba2 020e 	sub.w	r2, r2, lr
 800d370:	4565      	cmp	r5, ip
 800d372:	bf88      	it	hi
 800d374:	2200      	movhi	r2, #0
 800d376:	4413      	add	r3, r2
 800d378:	1a18      	subs	r0, r3, r0
 800d37a:	b003      	add	sp, #12
 800d37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d382:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d386:	e7ed      	b.n	800d364 <__exponent+0x4c>
 800d388:	2330      	movs	r3, #48	; 0x30
 800d38a:	3130      	adds	r1, #48	; 0x30
 800d38c:	7083      	strb	r3, [r0, #2]
 800d38e:	70c1      	strb	r1, [r0, #3]
 800d390:	1d03      	adds	r3, r0, #4
 800d392:	e7f1      	b.n	800d378 <__exponent+0x60>
 800d394:	0000      	movs	r0, r0
	...

0800d398 <_printf_float>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	b08b      	sub	sp, #44	; 0x2c
 800d39e:	460c      	mov	r4, r1
 800d3a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d3a4:	4616      	mov	r6, r2
 800d3a6:	461f      	mov	r7, r3
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	f001 f9b7 	bl	800e71c <_localeconv_r>
 800d3ae:	f8d0 b000 	ldr.w	fp, [r0]
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	f7f2 ffac 	bl	8000310 <strlen>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9308      	str	r3, [sp, #32]
 800d3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d3c4:	6822      	ldr	r2, [r4, #0]
 800d3c6:	3307      	adds	r3, #7
 800d3c8:	f023 0307 	bic.w	r3, r3, #7
 800d3cc:	f103 0108 	add.w	r1, r3, #8
 800d3d0:	f8c8 1000 	str.w	r1, [r8]
 800d3d4:	4682      	mov	sl, r0
 800d3d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d3de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d640 <_printf_float+0x2a8>
 800d3e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d3e6:	eeb0 6bc0 	vabs.f64	d6, d0
 800d3ea:	eeb4 6b47 	vcmp.f64	d6, d7
 800d3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f2:	dd24      	ble.n	800d43e <_printf_float+0xa6>
 800d3f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fc:	d502      	bpl.n	800d404 <_printf_float+0x6c>
 800d3fe:	232d      	movs	r3, #45	; 0x2d
 800d400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d404:	4b90      	ldr	r3, [pc, #576]	; (800d648 <_printf_float+0x2b0>)
 800d406:	4891      	ldr	r0, [pc, #580]	; (800d64c <_printf_float+0x2b4>)
 800d408:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d40c:	bf94      	ite	ls
 800d40e:	4698      	movls	r8, r3
 800d410:	4680      	movhi	r8, r0
 800d412:	2303      	movs	r3, #3
 800d414:	6123      	str	r3, [r4, #16]
 800d416:	f022 0204 	bic.w	r2, r2, #4
 800d41a:	2300      	movs	r3, #0
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	9700      	str	r7, [sp, #0]
 800d422:	4633      	mov	r3, r6
 800d424:	aa09      	add	r2, sp, #36	; 0x24
 800d426:	4621      	mov	r1, r4
 800d428:	4628      	mov	r0, r5
 800d42a:	f000 f9d3 	bl	800d7d4 <_printf_common>
 800d42e:	3001      	adds	r0, #1
 800d430:	f040 808a 	bne.w	800d548 <_printf_float+0x1b0>
 800d434:	f04f 30ff 	mov.w	r0, #4294967295
 800d438:	b00b      	add	sp, #44	; 0x2c
 800d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d446:	d709      	bvc.n	800d45c <_printf_float+0xc4>
 800d448:	ee10 3a90 	vmov	r3, s1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bfbc      	itt	lt
 800d450:	232d      	movlt	r3, #45	; 0x2d
 800d452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d456:	487e      	ldr	r0, [pc, #504]	; (800d650 <_printf_float+0x2b8>)
 800d458:	4b7e      	ldr	r3, [pc, #504]	; (800d654 <_printf_float+0x2bc>)
 800d45a:	e7d5      	b.n	800d408 <_printf_float+0x70>
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d462:	9104      	str	r1, [sp, #16]
 800d464:	1c59      	adds	r1, r3, #1
 800d466:	d13c      	bne.n	800d4e2 <_printf_float+0x14a>
 800d468:	2306      	movs	r3, #6
 800d46a:	6063      	str	r3, [r4, #4]
 800d46c:	2300      	movs	r3, #0
 800d46e:	9303      	str	r3, [sp, #12]
 800d470:	ab08      	add	r3, sp, #32
 800d472:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d47a:	ab07      	add	r3, sp, #28
 800d47c:	6861      	ldr	r1, [r4, #4]
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	6022      	str	r2, [r4, #0]
 800d482:	f10d 031b 	add.w	r3, sp, #27
 800d486:	4628      	mov	r0, r5
 800d488:	f7ff fef4 	bl	800d274 <__cvt>
 800d48c:	9b04      	ldr	r3, [sp, #16]
 800d48e:	9907      	ldr	r1, [sp, #28]
 800d490:	2b47      	cmp	r3, #71	; 0x47
 800d492:	4680      	mov	r8, r0
 800d494:	d108      	bne.n	800d4a8 <_printf_float+0x110>
 800d496:	1cc8      	adds	r0, r1, #3
 800d498:	db02      	blt.n	800d4a0 <_printf_float+0x108>
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	4299      	cmp	r1, r3
 800d49e:	dd41      	ble.n	800d524 <_printf_float+0x18c>
 800d4a0:	f1a9 0902 	sub.w	r9, r9, #2
 800d4a4:	fa5f f989 	uxtb.w	r9, r9
 800d4a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d4ac:	d820      	bhi.n	800d4f0 <_printf_float+0x158>
 800d4ae:	3901      	subs	r1, #1
 800d4b0:	464a      	mov	r2, r9
 800d4b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d4b6:	9107      	str	r1, [sp, #28]
 800d4b8:	f7ff ff2e 	bl	800d318 <__exponent>
 800d4bc:	9a08      	ldr	r2, [sp, #32]
 800d4be:	9004      	str	r0, [sp, #16]
 800d4c0:	1813      	adds	r3, r2, r0
 800d4c2:	2a01      	cmp	r2, #1
 800d4c4:	6123      	str	r3, [r4, #16]
 800d4c6:	dc02      	bgt.n	800d4ce <_printf_float+0x136>
 800d4c8:	6822      	ldr	r2, [r4, #0]
 800d4ca:	07d2      	lsls	r2, r2, #31
 800d4cc:	d501      	bpl.n	800d4d2 <_printf_float+0x13a>
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	6123      	str	r3, [r4, #16]
 800d4d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0a2      	beq.n	800d420 <_printf_float+0x88>
 800d4da:	232d      	movs	r3, #45	; 0x2d
 800d4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e0:	e79e      	b.n	800d420 <_printf_float+0x88>
 800d4e2:	9904      	ldr	r1, [sp, #16]
 800d4e4:	2947      	cmp	r1, #71	; 0x47
 800d4e6:	d1c1      	bne.n	800d46c <_printf_float+0xd4>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1bf      	bne.n	800d46c <_printf_float+0xd4>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e7bc      	b.n	800d46a <_printf_float+0xd2>
 800d4f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d4f4:	d118      	bne.n	800d528 <_printf_float+0x190>
 800d4f6:	2900      	cmp	r1, #0
 800d4f8:	6863      	ldr	r3, [r4, #4]
 800d4fa:	dd0b      	ble.n	800d514 <_printf_float+0x17c>
 800d4fc:	6121      	str	r1, [r4, #16]
 800d4fe:	b913      	cbnz	r3, 800d506 <_printf_float+0x16e>
 800d500:	6822      	ldr	r2, [r4, #0]
 800d502:	07d0      	lsls	r0, r2, #31
 800d504:	d502      	bpl.n	800d50c <_printf_float+0x174>
 800d506:	3301      	adds	r3, #1
 800d508:	440b      	add	r3, r1
 800d50a:	6123      	str	r3, [r4, #16]
 800d50c:	2300      	movs	r3, #0
 800d50e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d510:	9304      	str	r3, [sp, #16]
 800d512:	e7de      	b.n	800d4d2 <_printf_float+0x13a>
 800d514:	b913      	cbnz	r3, 800d51c <_printf_float+0x184>
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	07d2      	lsls	r2, r2, #31
 800d51a:	d501      	bpl.n	800d520 <_printf_float+0x188>
 800d51c:	3302      	adds	r3, #2
 800d51e:	e7f4      	b.n	800d50a <_printf_float+0x172>
 800d520:	2301      	movs	r3, #1
 800d522:	e7f2      	b.n	800d50a <_printf_float+0x172>
 800d524:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	4299      	cmp	r1, r3
 800d52c:	db05      	blt.n	800d53a <_printf_float+0x1a2>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	6121      	str	r1, [r4, #16]
 800d532:	07d8      	lsls	r0, r3, #31
 800d534:	d5ea      	bpl.n	800d50c <_printf_float+0x174>
 800d536:	1c4b      	adds	r3, r1, #1
 800d538:	e7e7      	b.n	800d50a <_printf_float+0x172>
 800d53a:	2900      	cmp	r1, #0
 800d53c:	bfd4      	ite	le
 800d53e:	f1c1 0202 	rsble	r2, r1, #2
 800d542:	2201      	movgt	r2, #1
 800d544:	4413      	add	r3, r2
 800d546:	e7e0      	b.n	800d50a <_printf_float+0x172>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	055a      	lsls	r2, r3, #21
 800d54c:	d407      	bmi.n	800d55e <_printf_float+0x1c6>
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	4642      	mov	r2, r8
 800d552:	4631      	mov	r1, r6
 800d554:	4628      	mov	r0, r5
 800d556:	47b8      	blx	r7
 800d558:	3001      	adds	r0, #1
 800d55a:	d12a      	bne.n	800d5b2 <_printf_float+0x21a>
 800d55c:	e76a      	b.n	800d434 <_printf_float+0x9c>
 800d55e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d562:	f240 80e2 	bls.w	800d72a <_printf_float+0x392>
 800d566:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d56a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d572:	d133      	bne.n	800d5dc <_printf_float+0x244>
 800d574:	4a38      	ldr	r2, [pc, #224]	; (800d658 <_printf_float+0x2c0>)
 800d576:	2301      	movs	r3, #1
 800d578:	4631      	mov	r1, r6
 800d57a:	4628      	mov	r0, r5
 800d57c:	47b8      	blx	r7
 800d57e:	3001      	adds	r0, #1
 800d580:	f43f af58 	beq.w	800d434 <_printf_float+0x9c>
 800d584:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d588:	429a      	cmp	r2, r3
 800d58a:	db02      	blt.n	800d592 <_printf_float+0x1fa>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	07d8      	lsls	r0, r3, #31
 800d590:	d50f      	bpl.n	800d5b2 <_printf_float+0x21a>
 800d592:	4653      	mov	r3, sl
 800d594:	465a      	mov	r2, fp
 800d596:	4631      	mov	r1, r6
 800d598:	4628      	mov	r0, r5
 800d59a:	47b8      	blx	r7
 800d59c:	3001      	adds	r0, #1
 800d59e:	f43f af49 	beq.w	800d434 <_printf_float+0x9c>
 800d5a2:	f04f 0800 	mov.w	r8, #0
 800d5a6:	f104 091a 	add.w	r9, r4, #26
 800d5aa:	9b08      	ldr	r3, [sp, #32]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	4543      	cmp	r3, r8
 800d5b0:	dc09      	bgt.n	800d5c6 <_printf_float+0x22e>
 800d5b2:	6823      	ldr	r3, [r4, #0]
 800d5b4:	079b      	lsls	r3, r3, #30
 800d5b6:	f100 8108 	bmi.w	800d7ca <_printf_float+0x432>
 800d5ba:	68e0      	ldr	r0, [r4, #12]
 800d5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5be:	4298      	cmp	r0, r3
 800d5c0:	bfb8      	it	lt
 800d5c2:	4618      	movlt	r0, r3
 800d5c4:	e738      	b.n	800d438 <_printf_float+0xa0>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	464a      	mov	r2, r9
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b8      	blx	r7
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	f43f af2f 	beq.w	800d434 <_printf_float+0x9c>
 800d5d6:	f108 0801 	add.w	r8, r8, #1
 800d5da:	e7e6      	b.n	800d5aa <_printf_float+0x212>
 800d5dc:	9b07      	ldr	r3, [sp, #28]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	dc3c      	bgt.n	800d65c <_printf_float+0x2c4>
 800d5e2:	4a1d      	ldr	r2, [pc, #116]	; (800d658 <_printf_float+0x2c0>)
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	47b8      	blx	r7
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	f43f af21 	beq.w	800d434 <_printf_float+0x9c>
 800d5f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	d102      	bne.n	800d600 <_printf_float+0x268>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	07d9      	lsls	r1, r3, #31
 800d5fe:	d5d8      	bpl.n	800d5b2 <_printf_float+0x21a>
 800d600:	4653      	mov	r3, sl
 800d602:	465a      	mov	r2, fp
 800d604:	4631      	mov	r1, r6
 800d606:	4628      	mov	r0, r5
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	f43f af12 	beq.w	800d434 <_printf_float+0x9c>
 800d610:	f04f 0900 	mov.w	r9, #0
 800d614:	f104 0a1a 	add.w	sl, r4, #26
 800d618:	9b07      	ldr	r3, [sp, #28]
 800d61a:	425b      	negs	r3, r3
 800d61c:	454b      	cmp	r3, r9
 800d61e:	dc01      	bgt.n	800d624 <_printf_float+0x28c>
 800d620:	9b08      	ldr	r3, [sp, #32]
 800d622:	e795      	b.n	800d550 <_printf_float+0x1b8>
 800d624:	2301      	movs	r3, #1
 800d626:	4652      	mov	r2, sl
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	f43f af00 	beq.w	800d434 <_printf_float+0x9c>
 800d634:	f109 0901 	add.w	r9, r9, #1
 800d638:	e7ee      	b.n	800d618 <_printf_float+0x280>
 800d63a:	bf00      	nop
 800d63c:	f3af 8000 	nop.w
 800d640:	ffffffff 	.word	0xffffffff
 800d644:	7fefffff 	.word	0x7fefffff
 800d648:	0800fb3c 	.word	0x0800fb3c
 800d64c:	0800fb40 	.word	0x0800fb40
 800d650:	0800fb48 	.word	0x0800fb48
 800d654:	0800fb44 	.word	0x0800fb44
 800d658:	0800fb4c 	.word	0x0800fb4c
 800d65c:	9a08      	ldr	r2, [sp, #32]
 800d65e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d660:	429a      	cmp	r2, r3
 800d662:	bfa8      	it	ge
 800d664:	461a      	movge	r2, r3
 800d666:	2a00      	cmp	r2, #0
 800d668:	4691      	mov	r9, r2
 800d66a:	dc38      	bgt.n	800d6de <_printf_float+0x346>
 800d66c:	2300      	movs	r3, #0
 800d66e:	9305      	str	r3, [sp, #20]
 800d670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d674:	f104 021a 	add.w	r2, r4, #26
 800d678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d67a:	9905      	ldr	r1, [sp, #20]
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	eba3 0309 	sub.w	r3, r3, r9
 800d682:	428b      	cmp	r3, r1
 800d684:	dc33      	bgt.n	800d6ee <_printf_float+0x356>
 800d686:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	db3c      	blt.n	800d708 <_printf_float+0x370>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	07da      	lsls	r2, r3, #31
 800d692:	d439      	bmi.n	800d708 <_printf_float+0x370>
 800d694:	9a08      	ldr	r2, [sp, #32]
 800d696:	9b04      	ldr	r3, [sp, #16]
 800d698:	9907      	ldr	r1, [sp, #28]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	eba2 0901 	sub.w	r9, r2, r1
 800d6a0:	4599      	cmp	r9, r3
 800d6a2:	bfa8      	it	ge
 800d6a4:	4699      	movge	r9, r3
 800d6a6:	f1b9 0f00 	cmp.w	r9, #0
 800d6aa:	dc35      	bgt.n	800d718 <_printf_float+0x380>
 800d6ac:	f04f 0800 	mov.w	r8, #0
 800d6b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6b4:	f104 0a1a 	add.w	sl, r4, #26
 800d6b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d6bc:	1a9b      	subs	r3, r3, r2
 800d6be:	eba3 0309 	sub.w	r3, r3, r9
 800d6c2:	4543      	cmp	r3, r8
 800d6c4:	f77f af75 	ble.w	800d5b2 <_printf_float+0x21a>
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	4652      	mov	r2, sl
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	47b8      	blx	r7
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	f43f aeae 	beq.w	800d434 <_printf_float+0x9c>
 800d6d8:	f108 0801 	add.w	r8, r8, #1
 800d6dc:	e7ec      	b.n	800d6b8 <_printf_float+0x320>
 800d6de:	4613      	mov	r3, r2
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	4642      	mov	r2, r8
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	47b8      	blx	r7
 800d6e8:	3001      	adds	r0, #1
 800d6ea:	d1bf      	bne.n	800d66c <_printf_float+0x2d4>
 800d6ec:	e6a2      	b.n	800d434 <_printf_float+0x9c>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4631      	mov	r1, r6
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	9204      	str	r2, [sp, #16]
 800d6f6:	47b8      	blx	r7
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f43f ae9b 	beq.w	800d434 <_printf_float+0x9c>
 800d6fe:	9b05      	ldr	r3, [sp, #20]
 800d700:	9a04      	ldr	r2, [sp, #16]
 800d702:	3301      	adds	r3, #1
 800d704:	9305      	str	r3, [sp, #20]
 800d706:	e7b7      	b.n	800d678 <_printf_float+0x2e0>
 800d708:	4653      	mov	r3, sl
 800d70a:	465a      	mov	r2, fp
 800d70c:	4631      	mov	r1, r6
 800d70e:	4628      	mov	r0, r5
 800d710:	47b8      	blx	r7
 800d712:	3001      	adds	r0, #1
 800d714:	d1be      	bne.n	800d694 <_printf_float+0x2fc>
 800d716:	e68d      	b.n	800d434 <_printf_float+0x9c>
 800d718:	9a04      	ldr	r2, [sp, #16]
 800d71a:	464b      	mov	r3, r9
 800d71c:	4442      	add	r2, r8
 800d71e:	4631      	mov	r1, r6
 800d720:	4628      	mov	r0, r5
 800d722:	47b8      	blx	r7
 800d724:	3001      	adds	r0, #1
 800d726:	d1c1      	bne.n	800d6ac <_printf_float+0x314>
 800d728:	e684      	b.n	800d434 <_printf_float+0x9c>
 800d72a:	9a08      	ldr	r2, [sp, #32]
 800d72c:	2a01      	cmp	r2, #1
 800d72e:	dc01      	bgt.n	800d734 <_printf_float+0x39c>
 800d730:	07db      	lsls	r3, r3, #31
 800d732:	d537      	bpl.n	800d7a4 <_printf_float+0x40c>
 800d734:	2301      	movs	r3, #1
 800d736:	4642      	mov	r2, r8
 800d738:	4631      	mov	r1, r6
 800d73a:	4628      	mov	r0, r5
 800d73c:	47b8      	blx	r7
 800d73e:	3001      	adds	r0, #1
 800d740:	f43f ae78 	beq.w	800d434 <_printf_float+0x9c>
 800d744:	4653      	mov	r3, sl
 800d746:	465a      	mov	r2, fp
 800d748:	4631      	mov	r1, r6
 800d74a:	4628      	mov	r0, r5
 800d74c:	47b8      	blx	r7
 800d74e:	3001      	adds	r0, #1
 800d750:	f43f ae70 	beq.w	800d434 <_printf_float+0x9c>
 800d754:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d758:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d760:	d01b      	beq.n	800d79a <_printf_float+0x402>
 800d762:	9b08      	ldr	r3, [sp, #32]
 800d764:	f108 0201 	add.w	r2, r8, #1
 800d768:	3b01      	subs	r3, #1
 800d76a:	4631      	mov	r1, r6
 800d76c:	4628      	mov	r0, r5
 800d76e:	47b8      	blx	r7
 800d770:	3001      	adds	r0, #1
 800d772:	d10e      	bne.n	800d792 <_printf_float+0x3fa>
 800d774:	e65e      	b.n	800d434 <_printf_float+0x9c>
 800d776:	2301      	movs	r3, #1
 800d778:	464a      	mov	r2, r9
 800d77a:	4631      	mov	r1, r6
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b8      	blx	r7
 800d780:	3001      	adds	r0, #1
 800d782:	f43f ae57 	beq.w	800d434 <_printf_float+0x9c>
 800d786:	f108 0801 	add.w	r8, r8, #1
 800d78a:	9b08      	ldr	r3, [sp, #32]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	4543      	cmp	r3, r8
 800d790:	dcf1      	bgt.n	800d776 <_printf_float+0x3de>
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d798:	e6db      	b.n	800d552 <_printf_float+0x1ba>
 800d79a:	f04f 0800 	mov.w	r8, #0
 800d79e:	f104 091a 	add.w	r9, r4, #26
 800d7a2:	e7f2      	b.n	800d78a <_printf_float+0x3f2>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	4642      	mov	r2, r8
 800d7a8:	e7df      	b.n	800d76a <_printf_float+0x3d2>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	464a      	mov	r2, r9
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	47b8      	blx	r7
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	f43f ae3d 	beq.w	800d434 <_printf_float+0x9c>
 800d7ba:	f108 0801 	add.w	r8, r8, #1
 800d7be:	68e3      	ldr	r3, [r4, #12]
 800d7c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7c2:	1a5b      	subs	r3, r3, r1
 800d7c4:	4543      	cmp	r3, r8
 800d7c6:	dcf0      	bgt.n	800d7aa <_printf_float+0x412>
 800d7c8:	e6f7      	b.n	800d5ba <_printf_float+0x222>
 800d7ca:	f04f 0800 	mov.w	r8, #0
 800d7ce:	f104 0919 	add.w	r9, r4, #25
 800d7d2:	e7f4      	b.n	800d7be <_printf_float+0x426>

0800d7d4 <_printf_common>:
 800d7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d8:	4616      	mov	r6, r2
 800d7da:	4699      	mov	r9, r3
 800d7dc:	688a      	ldr	r2, [r1, #8]
 800d7de:	690b      	ldr	r3, [r1, #16]
 800d7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	bfb8      	it	lt
 800d7e8:	4613      	movlt	r3, r2
 800d7ea:	6033      	str	r3, [r6, #0]
 800d7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	b10a      	cbz	r2, 800d7fa <_printf_common+0x26>
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	6033      	str	r3, [r6, #0]
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	0699      	lsls	r1, r3, #26
 800d7fe:	bf42      	ittt	mi
 800d800:	6833      	ldrmi	r3, [r6, #0]
 800d802:	3302      	addmi	r3, #2
 800d804:	6033      	strmi	r3, [r6, #0]
 800d806:	6825      	ldr	r5, [r4, #0]
 800d808:	f015 0506 	ands.w	r5, r5, #6
 800d80c:	d106      	bne.n	800d81c <_printf_common+0x48>
 800d80e:	f104 0a19 	add.w	sl, r4, #25
 800d812:	68e3      	ldr	r3, [r4, #12]
 800d814:	6832      	ldr	r2, [r6, #0]
 800d816:	1a9b      	subs	r3, r3, r2
 800d818:	42ab      	cmp	r3, r5
 800d81a:	dc26      	bgt.n	800d86a <_printf_common+0x96>
 800d81c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d820:	1e13      	subs	r3, r2, #0
 800d822:	6822      	ldr	r2, [r4, #0]
 800d824:	bf18      	it	ne
 800d826:	2301      	movne	r3, #1
 800d828:	0692      	lsls	r2, r2, #26
 800d82a:	d42b      	bmi.n	800d884 <_printf_common+0xb0>
 800d82c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d830:	4649      	mov	r1, r9
 800d832:	4638      	mov	r0, r7
 800d834:	47c0      	blx	r8
 800d836:	3001      	adds	r0, #1
 800d838:	d01e      	beq.n	800d878 <_printf_common+0xa4>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	68e5      	ldr	r5, [r4, #12]
 800d83e:	6832      	ldr	r2, [r6, #0]
 800d840:	f003 0306 	and.w	r3, r3, #6
 800d844:	2b04      	cmp	r3, #4
 800d846:	bf08      	it	eq
 800d848:	1aad      	subeq	r5, r5, r2
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	6922      	ldr	r2, [r4, #16]
 800d84e:	bf0c      	ite	eq
 800d850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d854:	2500      	movne	r5, #0
 800d856:	4293      	cmp	r3, r2
 800d858:	bfc4      	itt	gt
 800d85a:	1a9b      	subgt	r3, r3, r2
 800d85c:	18ed      	addgt	r5, r5, r3
 800d85e:	2600      	movs	r6, #0
 800d860:	341a      	adds	r4, #26
 800d862:	42b5      	cmp	r5, r6
 800d864:	d11a      	bne.n	800d89c <_printf_common+0xc8>
 800d866:	2000      	movs	r0, #0
 800d868:	e008      	b.n	800d87c <_printf_common+0xa8>
 800d86a:	2301      	movs	r3, #1
 800d86c:	4652      	mov	r2, sl
 800d86e:	4649      	mov	r1, r9
 800d870:	4638      	mov	r0, r7
 800d872:	47c0      	blx	r8
 800d874:	3001      	adds	r0, #1
 800d876:	d103      	bne.n	800d880 <_printf_common+0xac>
 800d878:	f04f 30ff 	mov.w	r0, #4294967295
 800d87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d880:	3501      	adds	r5, #1
 800d882:	e7c6      	b.n	800d812 <_printf_common+0x3e>
 800d884:	18e1      	adds	r1, r4, r3
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	2030      	movs	r0, #48	; 0x30
 800d88a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d88e:	4422      	add	r2, r4
 800d890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d898:	3302      	adds	r3, #2
 800d89a:	e7c7      	b.n	800d82c <_printf_common+0x58>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4622      	mov	r2, r4
 800d8a0:	4649      	mov	r1, r9
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	47c0      	blx	r8
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	d0e6      	beq.n	800d878 <_printf_common+0xa4>
 800d8aa:	3601      	adds	r6, #1
 800d8ac:	e7d9      	b.n	800d862 <_printf_common+0x8e>
	...

0800d8b0 <_printf_i>:
 800d8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	4691      	mov	r9, r2
 800d8b8:	7e27      	ldrb	r7, [r4, #24]
 800d8ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d8bc:	2f78      	cmp	r7, #120	; 0x78
 800d8be:	4680      	mov	r8, r0
 800d8c0:	469a      	mov	sl, r3
 800d8c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8c6:	d807      	bhi.n	800d8d8 <_printf_i+0x28>
 800d8c8:	2f62      	cmp	r7, #98	; 0x62
 800d8ca:	d80a      	bhi.n	800d8e2 <_printf_i+0x32>
 800d8cc:	2f00      	cmp	r7, #0
 800d8ce:	f000 80d8 	beq.w	800da82 <_printf_i+0x1d2>
 800d8d2:	2f58      	cmp	r7, #88	; 0x58
 800d8d4:	f000 80a3 	beq.w	800da1e <_printf_i+0x16e>
 800d8d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d8dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8e0:	e03a      	b.n	800d958 <_printf_i+0xa8>
 800d8e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8e6:	2b15      	cmp	r3, #21
 800d8e8:	d8f6      	bhi.n	800d8d8 <_printf_i+0x28>
 800d8ea:	a001      	add	r0, pc, #4	; (adr r0, 800d8f0 <_printf_i+0x40>)
 800d8ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d8f0:	0800d949 	.word	0x0800d949
 800d8f4:	0800d95d 	.word	0x0800d95d
 800d8f8:	0800d8d9 	.word	0x0800d8d9
 800d8fc:	0800d8d9 	.word	0x0800d8d9
 800d900:	0800d8d9 	.word	0x0800d8d9
 800d904:	0800d8d9 	.word	0x0800d8d9
 800d908:	0800d95d 	.word	0x0800d95d
 800d90c:	0800d8d9 	.word	0x0800d8d9
 800d910:	0800d8d9 	.word	0x0800d8d9
 800d914:	0800d8d9 	.word	0x0800d8d9
 800d918:	0800d8d9 	.word	0x0800d8d9
 800d91c:	0800da69 	.word	0x0800da69
 800d920:	0800d98d 	.word	0x0800d98d
 800d924:	0800da4b 	.word	0x0800da4b
 800d928:	0800d8d9 	.word	0x0800d8d9
 800d92c:	0800d8d9 	.word	0x0800d8d9
 800d930:	0800da8b 	.word	0x0800da8b
 800d934:	0800d8d9 	.word	0x0800d8d9
 800d938:	0800d98d 	.word	0x0800d98d
 800d93c:	0800d8d9 	.word	0x0800d8d9
 800d940:	0800d8d9 	.word	0x0800d8d9
 800d944:	0800da53 	.word	0x0800da53
 800d948:	680b      	ldr	r3, [r1, #0]
 800d94a:	1d1a      	adds	r2, r3, #4
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	600a      	str	r2, [r1, #0]
 800d950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d958:	2301      	movs	r3, #1
 800d95a:	e0a3      	b.n	800daa4 <_printf_i+0x1f4>
 800d95c:	6825      	ldr	r5, [r4, #0]
 800d95e:	6808      	ldr	r0, [r1, #0]
 800d960:	062e      	lsls	r6, r5, #24
 800d962:	f100 0304 	add.w	r3, r0, #4
 800d966:	d50a      	bpl.n	800d97e <_printf_i+0xce>
 800d968:	6805      	ldr	r5, [r0, #0]
 800d96a:	600b      	str	r3, [r1, #0]
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	da03      	bge.n	800d978 <_printf_i+0xc8>
 800d970:	232d      	movs	r3, #45	; 0x2d
 800d972:	426d      	negs	r5, r5
 800d974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d978:	485e      	ldr	r0, [pc, #376]	; (800daf4 <_printf_i+0x244>)
 800d97a:	230a      	movs	r3, #10
 800d97c:	e019      	b.n	800d9b2 <_printf_i+0x102>
 800d97e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d982:	6805      	ldr	r5, [r0, #0]
 800d984:	600b      	str	r3, [r1, #0]
 800d986:	bf18      	it	ne
 800d988:	b22d      	sxthne	r5, r5
 800d98a:	e7ef      	b.n	800d96c <_printf_i+0xbc>
 800d98c:	680b      	ldr	r3, [r1, #0]
 800d98e:	6825      	ldr	r5, [r4, #0]
 800d990:	1d18      	adds	r0, r3, #4
 800d992:	6008      	str	r0, [r1, #0]
 800d994:	0628      	lsls	r0, r5, #24
 800d996:	d501      	bpl.n	800d99c <_printf_i+0xec>
 800d998:	681d      	ldr	r5, [r3, #0]
 800d99a:	e002      	b.n	800d9a2 <_printf_i+0xf2>
 800d99c:	0669      	lsls	r1, r5, #25
 800d99e:	d5fb      	bpl.n	800d998 <_printf_i+0xe8>
 800d9a0:	881d      	ldrh	r5, [r3, #0]
 800d9a2:	4854      	ldr	r0, [pc, #336]	; (800daf4 <_printf_i+0x244>)
 800d9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2308      	moveq	r3, #8
 800d9aa:	230a      	movne	r3, #10
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9b2:	6866      	ldr	r6, [r4, #4]
 800d9b4:	60a6      	str	r6, [r4, #8]
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	bfa2      	ittt	ge
 800d9ba:	6821      	ldrge	r1, [r4, #0]
 800d9bc:	f021 0104 	bicge.w	r1, r1, #4
 800d9c0:	6021      	strge	r1, [r4, #0]
 800d9c2:	b90d      	cbnz	r5, 800d9c8 <_printf_i+0x118>
 800d9c4:	2e00      	cmp	r6, #0
 800d9c6:	d04d      	beq.n	800da64 <_printf_i+0x1b4>
 800d9c8:	4616      	mov	r6, r2
 800d9ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9ce:	fb03 5711 	mls	r7, r3, r1, r5
 800d9d2:	5dc7      	ldrb	r7, [r0, r7]
 800d9d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9d8:	462f      	mov	r7, r5
 800d9da:	42bb      	cmp	r3, r7
 800d9dc:	460d      	mov	r5, r1
 800d9de:	d9f4      	bls.n	800d9ca <_printf_i+0x11a>
 800d9e0:	2b08      	cmp	r3, #8
 800d9e2:	d10b      	bne.n	800d9fc <_printf_i+0x14c>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	07df      	lsls	r7, r3, #31
 800d9e8:	d508      	bpl.n	800d9fc <_printf_i+0x14c>
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	6861      	ldr	r1, [r4, #4]
 800d9ee:	4299      	cmp	r1, r3
 800d9f0:	bfde      	ittt	le
 800d9f2:	2330      	movle	r3, #48	; 0x30
 800d9f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9fc:	1b92      	subs	r2, r2, r6
 800d9fe:	6122      	str	r2, [r4, #16]
 800da00:	f8cd a000 	str.w	sl, [sp]
 800da04:	464b      	mov	r3, r9
 800da06:	aa03      	add	r2, sp, #12
 800da08:	4621      	mov	r1, r4
 800da0a:	4640      	mov	r0, r8
 800da0c:	f7ff fee2 	bl	800d7d4 <_printf_common>
 800da10:	3001      	adds	r0, #1
 800da12:	d14c      	bne.n	800daae <_printf_i+0x1fe>
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	b004      	add	sp, #16
 800da1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1e:	4835      	ldr	r0, [pc, #212]	; (800daf4 <_printf_i+0x244>)
 800da20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	680e      	ldr	r6, [r1, #0]
 800da28:	061f      	lsls	r7, r3, #24
 800da2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800da2e:	600e      	str	r6, [r1, #0]
 800da30:	d514      	bpl.n	800da5c <_printf_i+0x1ac>
 800da32:	07d9      	lsls	r1, r3, #31
 800da34:	bf44      	itt	mi
 800da36:	f043 0320 	orrmi.w	r3, r3, #32
 800da3a:	6023      	strmi	r3, [r4, #0]
 800da3c:	b91d      	cbnz	r5, 800da46 <_printf_i+0x196>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	f023 0320 	bic.w	r3, r3, #32
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	2310      	movs	r3, #16
 800da48:	e7b0      	b.n	800d9ac <_printf_i+0xfc>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	f043 0320 	orr.w	r3, r3, #32
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	2378      	movs	r3, #120	; 0x78
 800da54:	4828      	ldr	r0, [pc, #160]	; (800daf8 <_printf_i+0x248>)
 800da56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da5a:	e7e3      	b.n	800da24 <_printf_i+0x174>
 800da5c:	065e      	lsls	r6, r3, #25
 800da5e:	bf48      	it	mi
 800da60:	b2ad      	uxthmi	r5, r5
 800da62:	e7e6      	b.n	800da32 <_printf_i+0x182>
 800da64:	4616      	mov	r6, r2
 800da66:	e7bb      	b.n	800d9e0 <_printf_i+0x130>
 800da68:	680b      	ldr	r3, [r1, #0]
 800da6a:	6826      	ldr	r6, [r4, #0]
 800da6c:	6960      	ldr	r0, [r4, #20]
 800da6e:	1d1d      	adds	r5, r3, #4
 800da70:	600d      	str	r5, [r1, #0]
 800da72:	0635      	lsls	r5, r6, #24
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	d501      	bpl.n	800da7c <_printf_i+0x1cc>
 800da78:	6018      	str	r0, [r3, #0]
 800da7a:	e002      	b.n	800da82 <_printf_i+0x1d2>
 800da7c:	0671      	lsls	r1, r6, #25
 800da7e:	d5fb      	bpl.n	800da78 <_printf_i+0x1c8>
 800da80:	8018      	strh	r0, [r3, #0]
 800da82:	2300      	movs	r3, #0
 800da84:	6123      	str	r3, [r4, #16]
 800da86:	4616      	mov	r6, r2
 800da88:	e7ba      	b.n	800da00 <_printf_i+0x150>
 800da8a:	680b      	ldr	r3, [r1, #0]
 800da8c:	1d1a      	adds	r2, r3, #4
 800da8e:	600a      	str	r2, [r1, #0]
 800da90:	681e      	ldr	r6, [r3, #0]
 800da92:	6862      	ldr	r2, [r4, #4]
 800da94:	2100      	movs	r1, #0
 800da96:	4630      	mov	r0, r6
 800da98:	f7f2 fc42 	bl	8000320 <memchr>
 800da9c:	b108      	cbz	r0, 800daa2 <_printf_i+0x1f2>
 800da9e:	1b80      	subs	r0, r0, r6
 800daa0:	6060      	str	r0, [r4, #4]
 800daa2:	6863      	ldr	r3, [r4, #4]
 800daa4:	6123      	str	r3, [r4, #16]
 800daa6:	2300      	movs	r3, #0
 800daa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daac:	e7a8      	b.n	800da00 <_printf_i+0x150>
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	4632      	mov	r2, r6
 800dab2:	4649      	mov	r1, r9
 800dab4:	4640      	mov	r0, r8
 800dab6:	47d0      	blx	sl
 800dab8:	3001      	adds	r0, #1
 800daba:	d0ab      	beq.n	800da14 <_printf_i+0x164>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	079b      	lsls	r3, r3, #30
 800dac0:	d413      	bmi.n	800daea <_printf_i+0x23a>
 800dac2:	68e0      	ldr	r0, [r4, #12]
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	4298      	cmp	r0, r3
 800dac8:	bfb8      	it	lt
 800daca:	4618      	movlt	r0, r3
 800dacc:	e7a4      	b.n	800da18 <_printf_i+0x168>
 800dace:	2301      	movs	r3, #1
 800dad0:	4632      	mov	r2, r6
 800dad2:	4649      	mov	r1, r9
 800dad4:	4640      	mov	r0, r8
 800dad6:	47d0      	blx	sl
 800dad8:	3001      	adds	r0, #1
 800dada:	d09b      	beq.n	800da14 <_printf_i+0x164>
 800dadc:	3501      	adds	r5, #1
 800dade:	68e3      	ldr	r3, [r4, #12]
 800dae0:	9903      	ldr	r1, [sp, #12]
 800dae2:	1a5b      	subs	r3, r3, r1
 800dae4:	42ab      	cmp	r3, r5
 800dae6:	dcf2      	bgt.n	800dace <_printf_i+0x21e>
 800dae8:	e7eb      	b.n	800dac2 <_printf_i+0x212>
 800daea:	2500      	movs	r5, #0
 800daec:	f104 0619 	add.w	r6, r4, #25
 800daf0:	e7f5      	b.n	800dade <_printf_i+0x22e>
 800daf2:	bf00      	nop
 800daf4:	0800fb4e 	.word	0x0800fb4e
 800daf8:	0800fb5f 	.word	0x0800fb5f

0800dafc <quorem>:
 800dafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	6903      	ldr	r3, [r0, #16]
 800db02:	690c      	ldr	r4, [r1, #16]
 800db04:	42a3      	cmp	r3, r4
 800db06:	4607      	mov	r7, r0
 800db08:	f2c0 8081 	blt.w	800dc0e <quorem+0x112>
 800db0c:	3c01      	subs	r4, #1
 800db0e:	f101 0814 	add.w	r8, r1, #20
 800db12:	f100 0514 	add.w	r5, r0, #20
 800db16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db24:	3301      	adds	r3, #1
 800db26:	429a      	cmp	r2, r3
 800db28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db30:	fbb2 f6f3 	udiv	r6, r2, r3
 800db34:	d331      	bcc.n	800db9a <quorem+0x9e>
 800db36:	f04f 0e00 	mov.w	lr, #0
 800db3a:	4640      	mov	r0, r8
 800db3c:	46ac      	mov	ip, r5
 800db3e:	46f2      	mov	sl, lr
 800db40:	f850 2b04 	ldr.w	r2, [r0], #4
 800db44:	b293      	uxth	r3, r2
 800db46:	fb06 e303 	mla	r3, r6, r3, lr
 800db4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800db4e:	b29b      	uxth	r3, r3
 800db50:	ebaa 0303 	sub.w	r3, sl, r3
 800db54:	0c12      	lsrs	r2, r2, #16
 800db56:	f8dc a000 	ldr.w	sl, [ip]
 800db5a:	fb06 e202 	mla	r2, r6, r2, lr
 800db5e:	fa13 f38a 	uxtah	r3, r3, sl
 800db62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db66:	fa1f fa82 	uxth.w	sl, r2
 800db6a:	f8dc 2000 	ldr.w	r2, [ip]
 800db6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800db72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db76:	b29b      	uxth	r3, r3
 800db78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db7c:	4581      	cmp	r9, r0
 800db7e:	f84c 3b04 	str.w	r3, [ip], #4
 800db82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db86:	d2db      	bcs.n	800db40 <quorem+0x44>
 800db88:	f855 300b 	ldr.w	r3, [r5, fp]
 800db8c:	b92b      	cbnz	r3, 800db9a <quorem+0x9e>
 800db8e:	9b01      	ldr	r3, [sp, #4]
 800db90:	3b04      	subs	r3, #4
 800db92:	429d      	cmp	r5, r3
 800db94:	461a      	mov	r2, r3
 800db96:	d32e      	bcc.n	800dbf6 <quorem+0xfa>
 800db98:	613c      	str	r4, [r7, #16]
 800db9a:	4638      	mov	r0, r7
 800db9c:	f001 f848 	bl	800ec30 <__mcmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	db24      	blt.n	800dbee <quorem+0xf2>
 800dba4:	3601      	adds	r6, #1
 800dba6:	4628      	mov	r0, r5
 800dba8:	f04f 0c00 	mov.w	ip, #0
 800dbac:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbb0:	f8d0 e000 	ldr.w	lr, [r0]
 800dbb4:	b293      	uxth	r3, r2
 800dbb6:	ebac 0303 	sub.w	r3, ip, r3
 800dbba:	0c12      	lsrs	r2, r2, #16
 800dbbc:	fa13 f38e 	uxtah	r3, r3, lr
 800dbc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dbc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbce:	45c1      	cmp	r9, r8
 800dbd0:	f840 3b04 	str.w	r3, [r0], #4
 800dbd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dbd8:	d2e8      	bcs.n	800dbac <quorem+0xb0>
 800dbda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbe2:	b922      	cbnz	r2, 800dbee <quorem+0xf2>
 800dbe4:	3b04      	subs	r3, #4
 800dbe6:	429d      	cmp	r5, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	d30a      	bcc.n	800dc02 <quorem+0x106>
 800dbec:	613c      	str	r4, [r7, #16]
 800dbee:	4630      	mov	r0, r6
 800dbf0:	b003      	add	sp, #12
 800dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	3b04      	subs	r3, #4
 800dbfa:	2a00      	cmp	r2, #0
 800dbfc:	d1cc      	bne.n	800db98 <quorem+0x9c>
 800dbfe:	3c01      	subs	r4, #1
 800dc00:	e7c7      	b.n	800db92 <quorem+0x96>
 800dc02:	6812      	ldr	r2, [r2, #0]
 800dc04:	3b04      	subs	r3, #4
 800dc06:	2a00      	cmp	r2, #0
 800dc08:	d1f0      	bne.n	800dbec <quorem+0xf0>
 800dc0a:	3c01      	subs	r4, #1
 800dc0c:	e7eb      	b.n	800dbe6 <quorem+0xea>
 800dc0e:	2000      	movs	r0, #0
 800dc10:	e7ee      	b.n	800dbf0 <quorem+0xf4>
 800dc12:	0000      	movs	r0, r0
 800dc14:	0000      	movs	r0, r0
	...

0800dc18 <_dtoa_r>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	ec59 8b10 	vmov	r8, r9, d0
 800dc20:	b095      	sub	sp, #84	; 0x54
 800dc22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc24:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800dc26:	9107      	str	r1, [sp, #28]
 800dc28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc30:	9310      	str	r3, [sp, #64]	; 0x40
 800dc32:	b975      	cbnz	r5, 800dc52 <_dtoa_r+0x3a>
 800dc34:	2010      	movs	r0, #16
 800dc36:	f000 fd75 	bl	800e724 <malloc>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	6270      	str	r0, [r6, #36]	; 0x24
 800dc3e:	b920      	cbnz	r0, 800dc4a <_dtoa_r+0x32>
 800dc40:	4bab      	ldr	r3, [pc, #684]	; (800def0 <_dtoa_r+0x2d8>)
 800dc42:	21ea      	movs	r1, #234	; 0xea
 800dc44:	48ab      	ldr	r0, [pc, #684]	; (800def4 <_dtoa_r+0x2dc>)
 800dc46:	f001 f9bd 	bl	800efc4 <__assert_func>
 800dc4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc4e:	6005      	str	r5, [r0, #0]
 800dc50:	60c5      	str	r5, [r0, #12]
 800dc52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc54:	6819      	ldr	r1, [r3, #0]
 800dc56:	b151      	cbz	r1, 800dc6e <_dtoa_r+0x56>
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	604a      	str	r2, [r1, #4]
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	4093      	lsls	r3, r2
 800dc60:	608b      	str	r3, [r1, #8]
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 fda6 	bl	800e7b4 <_Bfree>
 800dc68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
 800dc6e:	f1b9 0300 	subs.w	r3, r9, #0
 800dc72:	bfbb      	ittet	lt
 800dc74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc78:	9303      	strlt	r3, [sp, #12]
 800dc7a:	2300      	movge	r3, #0
 800dc7c:	2201      	movlt	r2, #1
 800dc7e:	bfac      	ite	ge
 800dc80:	6023      	strge	r3, [r4, #0]
 800dc82:	6022      	strlt	r2, [r4, #0]
 800dc84:	4b9c      	ldr	r3, [pc, #624]	; (800def8 <_dtoa_r+0x2e0>)
 800dc86:	9c03      	ldr	r4, [sp, #12]
 800dc88:	43a3      	bics	r3, r4
 800dc8a:	d11a      	bne.n	800dcc2 <_dtoa_r+0xaa>
 800dc8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dc98:	ea53 0308 	orrs.w	r3, r3, r8
 800dc9c:	f000 8512 	beq.w	800e6c4 <_dtoa_r+0xaac>
 800dca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dca2:	b953      	cbnz	r3, 800dcba <_dtoa_r+0xa2>
 800dca4:	4b95      	ldr	r3, [pc, #596]	; (800defc <_dtoa_r+0x2e4>)
 800dca6:	e01f      	b.n	800dce8 <_dtoa_r+0xd0>
 800dca8:	4b95      	ldr	r3, [pc, #596]	; (800df00 <_dtoa_r+0x2e8>)
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	3308      	adds	r3, #8
 800dcae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	9800      	ldr	r0, [sp, #0]
 800dcb4:	b015      	add	sp, #84	; 0x54
 800dcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcba:	4b90      	ldr	r3, [pc, #576]	; (800defc <_dtoa_r+0x2e4>)
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	3303      	adds	r3, #3
 800dcc0:	e7f5      	b.n	800dcae <_dtoa_r+0x96>
 800dcc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dcd2:	d10b      	bne.n	800dcec <_dtoa_r+0xd4>
 800dcd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 84ee 	beq.w	800e6be <_dtoa_r+0xaa6>
 800dce2:	4888      	ldr	r0, [pc, #544]	; (800df04 <_dtoa_r+0x2ec>)
 800dce4:	6018      	str	r0, [r3, #0]
 800dce6:	1e43      	subs	r3, r0, #1
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	e7e2      	b.n	800dcb2 <_dtoa_r+0x9a>
 800dcec:	a913      	add	r1, sp, #76	; 0x4c
 800dcee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dcf2:	aa12      	add	r2, sp, #72	; 0x48
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f001 f83f 	bl	800ed78 <__d2b>
 800dcfa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800dcfe:	4605      	mov	r5, r0
 800dd00:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dd02:	2900      	cmp	r1, #0
 800dd04:	d047      	beq.n	800dd96 <_dtoa_r+0x17e>
 800dd06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dd08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dd0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dd10:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800dd14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd18:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dd1c:	2400      	movs	r4, #0
 800dd1e:	ec43 2b16 	vmov	d6, r2, r3
 800dd22:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dd26:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ded8 <_dtoa_r+0x2c0>
 800dd2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd2e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800dee0 <_dtoa_r+0x2c8>
 800dd32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dd36:	eeb0 7b46 	vmov.f64	d7, d6
 800dd3a:	ee06 1a90 	vmov	s13, r1
 800dd3e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800dd42:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dee8 <_dtoa_r+0x2d0>
 800dd46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dd4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd56:	ee16 ba90 	vmov	fp, s13
 800dd5a:	9411      	str	r4, [sp, #68]	; 0x44
 800dd5c:	d508      	bpl.n	800dd70 <_dtoa_r+0x158>
 800dd5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800dd62:	eeb4 6b47 	vcmp.f64	d6, d7
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	bf18      	it	ne
 800dd6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dd70:	f1bb 0f16 	cmp.w	fp, #22
 800dd74:	d832      	bhi.n	800dddc <_dtoa_r+0x1c4>
 800dd76:	4b64      	ldr	r3, [pc, #400]	; (800df08 <_dtoa_r+0x2f0>)
 800dd78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd7c:	ed93 7b00 	vldr	d7, [r3]
 800dd80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800dd84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8c:	d501      	bpl.n	800dd92 <_dtoa_r+0x17a>
 800dd8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd92:	2300      	movs	r3, #0
 800dd94:	e023      	b.n	800ddde <_dtoa_r+0x1c6>
 800dd96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dd98:	4401      	add	r1, r0
 800dd9a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800dd9e:	2b20      	cmp	r3, #32
 800dda0:	bfc3      	ittte	gt
 800dda2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dda6:	fa04 f303 	lslgt.w	r3, r4, r3
 800ddaa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ddae:	f1c3 0320 	rsble	r3, r3, #32
 800ddb2:	bfc6      	itte	gt
 800ddb4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ddb8:	ea43 0308 	orrgt.w	r3, r3, r8
 800ddbc:	fa08 f303 	lslle.w	r3, r8, r3
 800ddc0:	ee07 3a90 	vmov	s15, r3
 800ddc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddc8:	3901      	subs	r1, #1
 800ddca:	ed8d 7b00 	vstr	d7, [sp]
 800ddce:	9c01      	ldr	r4, [sp, #4]
 800ddd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddd4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ddd8:	2401      	movs	r4, #1
 800ddda:	e7a0      	b.n	800dd1e <_dtoa_r+0x106>
 800dddc:	2301      	movs	r3, #1
 800ddde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dde0:	1a43      	subs	r3, r0, r1
 800dde2:	1e5a      	subs	r2, r3, #1
 800dde4:	bf45      	ittet	mi
 800dde6:	f1c3 0301 	rsbmi	r3, r3, #1
 800ddea:	9305      	strmi	r3, [sp, #20]
 800ddec:	2300      	movpl	r3, #0
 800ddee:	2300      	movmi	r3, #0
 800ddf0:	9206      	str	r2, [sp, #24]
 800ddf2:	bf54      	ite	pl
 800ddf4:	9305      	strpl	r3, [sp, #20]
 800ddf6:	9306      	strmi	r3, [sp, #24]
 800ddf8:	f1bb 0f00 	cmp.w	fp, #0
 800ddfc:	db18      	blt.n	800de30 <_dtoa_r+0x218>
 800ddfe:	9b06      	ldr	r3, [sp, #24]
 800de00:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800de04:	445b      	add	r3, fp
 800de06:	9306      	str	r3, [sp, #24]
 800de08:	2300      	movs	r3, #0
 800de0a:	9a07      	ldr	r2, [sp, #28]
 800de0c:	2a09      	cmp	r2, #9
 800de0e:	d849      	bhi.n	800dea4 <_dtoa_r+0x28c>
 800de10:	2a05      	cmp	r2, #5
 800de12:	bfc4      	itt	gt
 800de14:	3a04      	subgt	r2, #4
 800de16:	9207      	strgt	r2, [sp, #28]
 800de18:	9a07      	ldr	r2, [sp, #28]
 800de1a:	f1a2 0202 	sub.w	r2, r2, #2
 800de1e:	bfcc      	ite	gt
 800de20:	2400      	movgt	r4, #0
 800de22:	2401      	movle	r4, #1
 800de24:	2a03      	cmp	r2, #3
 800de26:	d848      	bhi.n	800deba <_dtoa_r+0x2a2>
 800de28:	e8df f002 	tbb	[pc, r2]
 800de2c:	3a2c2e0b 	.word	0x3a2c2e0b
 800de30:	9b05      	ldr	r3, [sp, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	eba3 030b 	sub.w	r3, r3, fp
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	920e      	str	r2, [sp, #56]	; 0x38
 800de3c:	f1cb 0300 	rsb	r3, fp, #0
 800de40:	e7e3      	b.n	800de0a <_dtoa_r+0x1f2>
 800de42:	2200      	movs	r2, #0
 800de44:	9208      	str	r2, [sp, #32]
 800de46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de48:	2a00      	cmp	r2, #0
 800de4a:	dc39      	bgt.n	800dec0 <_dtoa_r+0x2a8>
 800de4c:	f04f 0a01 	mov.w	sl, #1
 800de50:	46d1      	mov	r9, sl
 800de52:	4652      	mov	r2, sl
 800de54:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de58:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800de5a:	2100      	movs	r1, #0
 800de5c:	6079      	str	r1, [r7, #4]
 800de5e:	2004      	movs	r0, #4
 800de60:	f100 0c14 	add.w	ip, r0, #20
 800de64:	4594      	cmp	ip, r2
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	d92f      	bls.n	800deca <_dtoa_r+0x2b2>
 800de6a:	4630      	mov	r0, r6
 800de6c:	930c      	str	r3, [sp, #48]	; 0x30
 800de6e:	f000 fc61 	bl	800e734 <_Balloc>
 800de72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de74:	9000      	str	r0, [sp, #0]
 800de76:	4602      	mov	r2, r0
 800de78:	2800      	cmp	r0, #0
 800de7a:	d149      	bne.n	800df10 <_dtoa_r+0x2f8>
 800de7c:	4b23      	ldr	r3, [pc, #140]	; (800df0c <_dtoa_r+0x2f4>)
 800de7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800de82:	e6df      	b.n	800dc44 <_dtoa_r+0x2c>
 800de84:	2201      	movs	r2, #1
 800de86:	e7dd      	b.n	800de44 <_dtoa_r+0x22c>
 800de88:	2200      	movs	r2, #0
 800de8a:	9208      	str	r2, [sp, #32]
 800de8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8e:	eb0b 0a02 	add.w	sl, fp, r2
 800de92:	f10a 0901 	add.w	r9, sl, #1
 800de96:	464a      	mov	r2, r9
 800de98:	2a01      	cmp	r2, #1
 800de9a:	bfb8      	it	lt
 800de9c:	2201      	movlt	r2, #1
 800de9e:	e7db      	b.n	800de58 <_dtoa_r+0x240>
 800dea0:	2201      	movs	r2, #1
 800dea2:	e7f2      	b.n	800de8a <_dtoa_r+0x272>
 800dea4:	2401      	movs	r4, #1
 800dea6:	2200      	movs	r2, #0
 800dea8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800deac:	f04f 3aff 	mov.w	sl, #4294967295
 800deb0:	2100      	movs	r1, #0
 800deb2:	46d1      	mov	r9, sl
 800deb4:	2212      	movs	r2, #18
 800deb6:	9109      	str	r1, [sp, #36]	; 0x24
 800deb8:	e7ce      	b.n	800de58 <_dtoa_r+0x240>
 800deba:	2201      	movs	r2, #1
 800debc:	9208      	str	r2, [sp, #32]
 800debe:	e7f5      	b.n	800deac <_dtoa_r+0x294>
 800dec0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800dec4:	46d1      	mov	r9, sl
 800dec6:	4652      	mov	r2, sl
 800dec8:	e7c6      	b.n	800de58 <_dtoa_r+0x240>
 800deca:	3101      	adds	r1, #1
 800decc:	6079      	str	r1, [r7, #4]
 800dece:	0040      	lsls	r0, r0, #1
 800ded0:	e7c6      	b.n	800de60 <_dtoa_r+0x248>
 800ded2:	bf00      	nop
 800ded4:	f3af 8000 	nop.w
 800ded8:	636f4361 	.word	0x636f4361
 800dedc:	3fd287a7 	.word	0x3fd287a7
 800dee0:	8b60c8b3 	.word	0x8b60c8b3
 800dee4:	3fc68a28 	.word	0x3fc68a28
 800dee8:	509f79fb 	.word	0x509f79fb
 800deec:	3fd34413 	.word	0x3fd34413
 800def0:	0800fb7d 	.word	0x0800fb7d
 800def4:	0800fb94 	.word	0x0800fb94
 800def8:	7ff00000 	.word	0x7ff00000
 800defc:	0800fb79 	.word	0x0800fb79
 800df00:	0800fb70 	.word	0x0800fb70
 800df04:	0800fb4d 	.word	0x0800fb4d
 800df08:	0800fc90 	.word	0x0800fc90
 800df0c:	0800fbf3 	.word	0x0800fbf3
 800df10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800df12:	9900      	ldr	r1, [sp, #0]
 800df14:	6011      	str	r1, [r2, #0]
 800df16:	f1b9 0f0e 	cmp.w	r9, #14
 800df1a:	d872      	bhi.n	800e002 <_dtoa_r+0x3ea>
 800df1c:	2c00      	cmp	r4, #0
 800df1e:	d070      	beq.n	800e002 <_dtoa_r+0x3ea>
 800df20:	f1bb 0f00 	cmp.w	fp, #0
 800df24:	f340 80a6 	ble.w	800e074 <_dtoa_r+0x45c>
 800df28:	49ca      	ldr	r1, [pc, #808]	; (800e254 <_dtoa_r+0x63c>)
 800df2a:	f00b 020f 	and.w	r2, fp, #15
 800df2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800df32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800df36:	ed92 7b00 	vldr	d7, [r2]
 800df3a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800df3e:	f000 808d 	beq.w	800e05c <_dtoa_r+0x444>
 800df42:	4ac5      	ldr	r2, [pc, #788]	; (800e258 <_dtoa_r+0x640>)
 800df44:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800df48:	ed92 6b08 	vldr	d6, [r2, #32]
 800df4c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800df50:	ed8d 6b02 	vstr	d6, [sp, #8]
 800df54:	f001 010f 	and.w	r1, r1, #15
 800df58:	2203      	movs	r2, #3
 800df5a:	48bf      	ldr	r0, [pc, #764]	; (800e258 <_dtoa_r+0x640>)
 800df5c:	2900      	cmp	r1, #0
 800df5e:	d17f      	bne.n	800e060 <_dtoa_r+0x448>
 800df60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800df64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800df6e:	2900      	cmp	r1, #0
 800df70:	f000 80b2 	beq.w	800e0d8 <_dtoa_r+0x4c0>
 800df74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800df78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800df80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df84:	f140 80a8 	bpl.w	800e0d8 <_dtoa_r+0x4c0>
 800df88:	f1b9 0f00 	cmp.w	r9, #0
 800df8c:	f000 80a4 	beq.w	800e0d8 <_dtoa_r+0x4c0>
 800df90:	f1ba 0f00 	cmp.w	sl, #0
 800df94:	dd31      	ble.n	800dffa <_dtoa_r+0x3e2>
 800df96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800df9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dfa2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dfa6:	3201      	adds	r2, #1
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dfae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dfb2:	ee07 2a90 	vmov	s15, r2
 800dfb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dfbe:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dfc2:	9c03      	ldr	r4, [sp, #12]
 800dfc4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dfc8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f040 8086 	bne.w	800e0de <_dtoa_r+0x4c6>
 800dfd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dfd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dfda:	ec42 1b17 	vmov	d7, r1, r2
 800dfde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe6:	f300 8272 	bgt.w	800e4ce <_dtoa_r+0x8b6>
 800dfea:	eeb1 7b47 	vneg.f64	d7, d7
 800dfee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff6:	f100 8267 	bmi.w	800e4c8 <_dtoa_r+0x8b0>
 800dffa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800dffe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e002:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e004:	2a00      	cmp	r2, #0
 800e006:	f2c0 8129 	blt.w	800e25c <_dtoa_r+0x644>
 800e00a:	f1bb 0f0e 	cmp.w	fp, #14
 800e00e:	f300 8125 	bgt.w	800e25c <_dtoa_r+0x644>
 800e012:	4b90      	ldr	r3, [pc, #576]	; (800e254 <_dtoa_r+0x63c>)
 800e014:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e018:	ed93 6b00 	vldr	d6, [r3]
 800e01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f280 80c3 	bge.w	800e1aa <_dtoa_r+0x592>
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	f300 80bf 	bgt.w	800e1aa <_dtoa_r+0x592>
 800e02c:	f040 824c 	bne.w	800e4c8 <_dtoa_r+0x8b0>
 800e030:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e034:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e03c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e044:	464c      	mov	r4, r9
 800e046:	464f      	mov	r7, r9
 800e048:	f280 8222 	bge.w	800e490 <_dtoa_r+0x878>
 800e04c:	f8dd 8000 	ldr.w	r8, [sp]
 800e050:	2331      	movs	r3, #49	; 0x31
 800e052:	f808 3b01 	strb.w	r3, [r8], #1
 800e056:	f10b 0b01 	add.w	fp, fp, #1
 800e05a:	e21e      	b.n	800e49a <_dtoa_r+0x882>
 800e05c:	2202      	movs	r2, #2
 800e05e:	e77c      	b.n	800df5a <_dtoa_r+0x342>
 800e060:	07cc      	lsls	r4, r1, #31
 800e062:	d504      	bpl.n	800e06e <_dtoa_r+0x456>
 800e064:	ed90 6b00 	vldr	d6, [r0]
 800e068:	3201      	adds	r2, #1
 800e06a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e06e:	1049      	asrs	r1, r1, #1
 800e070:	3008      	adds	r0, #8
 800e072:	e773      	b.n	800df5c <_dtoa_r+0x344>
 800e074:	d02e      	beq.n	800e0d4 <_dtoa_r+0x4bc>
 800e076:	f1cb 0100 	rsb	r1, fp, #0
 800e07a:	4a76      	ldr	r2, [pc, #472]	; (800e254 <_dtoa_r+0x63c>)
 800e07c:	f001 000f 	and.w	r0, r1, #15
 800e080:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e084:	ed92 7b00 	vldr	d7, [r2]
 800e088:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e08c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e090:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e094:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e098:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e09c:	486e      	ldr	r0, [pc, #440]	; (800e258 <_dtoa_r+0x640>)
 800e09e:	1109      	asrs	r1, r1, #4
 800e0a0:	2400      	movs	r4, #0
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	b939      	cbnz	r1, 800e0b6 <_dtoa_r+0x49e>
 800e0a6:	2c00      	cmp	r4, #0
 800e0a8:	f43f af60 	beq.w	800df6c <_dtoa_r+0x354>
 800e0ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b4:	e75a      	b.n	800df6c <_dtoa_r+0x354>
 800e0b6:	07cf      	lsls	r7, r1, #31
 800e0b8:	d509      	bpl.n	800e0ce <_dtoa_r+0x4b6>
 800e0ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e0be:	ed90 7b00 	vldr	d7, [r0]
 800e0c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e0ca:	3201      	adds	r2, #1
 800e0cc:	2401      	movs	r4, #1
 800e0ce:	1049      	asrs	r1, r1, #1
 800e0d0:	3008      	adds	r0, #8
 800e0d2:	e7e7      	b.n	800e0a4 <_dtoa_r+0x48c>
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	e749      	b.n	800df6c <_dtoa_r+0x354>
 800e0d8:	465f      	mov	r7, fp
 800e0da:	4648      	mov	r0, r9
 800e0dc:	e765      	b.n	800dfaa <_dtoa_r+0x392>
 800e0de:	ec42 1b17 	vmov	d7, r1, r2
 800e0e2:	4a5c      	ldr	r2, [pc, #368]	; (800e254 <_dtoa_r+0x63c>)
 800e0e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e0e8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e0ec:	9a00      	ldr	r2, [sp, #0]
 800e0ee:	1814      	adds	r4, r2, r0
 800e0f0:	9a08      	ldr	r2, [sp, #32]
 800e0f2:	b352      	cbz	r2, 800e14a <_dtoa_r+0x532>
 800e0f4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e0f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e0fc:	f8dd 8000 	ldr.w	r8, [sp]
 800e100:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e104:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e108:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e10c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e110:	ee14 2a90 	vmov	r2, s9
 800e114:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e118:	3230      	adds	r2, #48	; 0x30
 800e11a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e11e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e126:	f808 2b01 	strb.w	r2, [r8], #1
 800e12a:	d439      	bmi.n	800e1a0 <_dtoa_r+0x588>
 800e12c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e130:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	d472      	bmi.n	800e220 <_dtoa_r+0x608>
 800e13a:	45a0      	cmp	r8, r4
 800e13c:	f43f af5d 	beq.w	800dffa <_dtoa_r+0x3e2>
 800e140:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e144:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e148:	e7e0      	b.n	800e10c <_dtoa_r+0x4f4>
 800e14a:	f8dd 8000 	ldr.w	r8, [sp]
 800e14e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e152:	4621      	mov	r1, r4
 800e154:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e158:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e15c:	ee14 2a90 	vmov	r2, s9
 800e160:	3230      	adds	r2, #48	; 0x30
 800e162:	f808 2b01 	strb.w	r2, [r8], #1
 800e166:	45a0      	cmp	r8, r4
 800e168:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e16c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e170:	d118      	bne.n	800e1a4 <_dtoa_r+0x58c>
 800e172:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e176:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e17a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e182:	dc4d      	bgt.n	800e220 <_dtoa_r+0x608>
 800e184:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e188:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e190:	f57f af33 	bpl.w	800dffa <_dtoa_r+0x3e2>
 800e194:	4688      	mov	r8, r1
 800e196:	3901      	subs	r1, #1
 800e198:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e19c:	2b30      	cmp	r3, #48	; 0x30
 800e19e:	d0f9      	beq.n	800e194 <_dtoa_r+0x57c>
 800e1a0:	46bb      	mov	fp, r7
 800e1a2:	e02a      	b.n	800e1fa <_dtoa_r+0x5e2>
 800e1a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1a8:	e7d6      	b.n	800e158 <_dtoa_r+0x540>
 800e1aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e1b2:	f8dd 8000 	ldr.w	r8, [sp]
 800e1b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e1ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e1be:	ee15 3a10 	vmov	r3, s10
 800e1c2:	3330      	adds	r3, #48	; 0x30
 800e1c4:	f808 3b01 	strb.w	r3, [r8], #1
 800e1c8:	9b00      	ldr	r3, [sp, #0]
 800e1ca:	eba8 0303 	sub.w	r3, r8, r3
 800e1ce:	4599      	cmp	r9, r3
 800e1d0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e1d4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e1d8:	d133      	bne.n	800e242 <_dtoa_r+0x62a>
 800e1da:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e1de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e6:	dc1a      	bgt.n	800e21e <_dtoa_r+0x606>
 800e1e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f0:	d103      	bne.n	800e1fa <_dtoa_r+0x5e2>
 800e1f2:	ee15 3a10 	vmov	r3, s10
 800e1f6:	07d9      	lsls	r1, r3, #31
 800e1f8:	d411      	bmi.n	800e21e <_dtoa_r+0x606>
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f000 fad9 	bl	800e7b4 <_Bfree>
 800e202:	2300      	movs	r3, #0
 800e204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e206:	f888 3000 	strb.w	r3, [r8]
 800e20a:	f10b 0301 	add.w	r3, fp, #1
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e212:	2b00      	cmp	r3, #0
 800e214:	f43f ad4d 	beq.w	800dcb2 <_dtoa_r+0x9a>
 800e218:	f8c3 8000 	str.w	r8, [r3]
 800e21c:	e549      	b.n	800dcb2 <_dtoa_r+0x9a>
 800e21e:	465f      	mov	r7, fp
 800e220:	4643      	mov	r3, r8
 800e222:	4698      	mov	r8, r3
 800e224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e228:	2a39      	cmp	r2, #57	; 0x39
 800e22a:	d106      	bne.n	800e23a <_dtoa_r+0x622>
 800e22c:	9a00      	ldr	r2, [sp, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d1f7      	bne.n	800e222 <_dtoa_r+0x60a>
 800e232:	9900      	ldr	r1, [sp, #0]
 800e234:	2230      	movs	r2, #48	; 0x30
 800e236:	3701      	adds	r7, #1
 800e238:	700a      	strb	r2, [r1, #0]
 800e23a:	781a      	ldrb	r2, [r3, #0]
 800e23c:	3201      	adds	r2, #1
 800e23e:	701a      	strb	r2, [r3, #0]
 800e240:	e7ae      	b.n	800e1a0 <_dtoa_r+0x588>
 800e242:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e246:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24e:	d1b2      	bne.n	800e1b6 <_dtoa_r+0x59e>
 800e250:	e7d3      	b.n	800e1fa <_dtoa_r+0x5e2>
 800e252:	bf00      	nop
 800e254:	0800fc90 	.word	0x0800fc90
 800e258:	0800fc68 	.word	0x0800fc68
 800e25c:	9908      	ldr	r1, [sp, #32]
 800e25e:	2900      	cmp	r1, #0
 800e260:	f000 80d1 	beq.w	800e406 <_dtoa_r+0x7ee>
 800e264:	9907      	ldr	r1, [sp, #28]
 800e266:	2901      	cmp	r1, #1
 800e268:	f300 80b4 	bgt.w	800e3d4 <_dtoa_r+0x7bc>
 800e26c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e26e:	2900      	cmp	r1, #0
 800e270:	f000 80ac 	beq.w	800e3cc <_dtoa_r+0x7b4>
 800e274:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e278:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e27c:	461c      	mov	r4, r3
 800e27e:	930a      	str	r3, [sp, #40]	; 0x28
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	4413      	add	r3, r2
 800e284:	9305      	str	r3, [sp, #20]
 800e286:	9b06      	ldr	r3, [sp, #24]
 800e288:	2101      	movs	r1, #1
 800e28a:	4413      	add	r3, r2
 800e28c:	4630      	mov	r0, r6
 800e28e:	9306      	str	r3, [sp, #24]
 800e290:	f000 fb4c 	bl	800e92c <__i2b>
 800e294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e296:	4607      	mov	r7, r0
 800e298:	f1b8 0f00 	cmp.w	r8, #0
 800e29c:	dd0d      	ble.n	800e2ba <_dtoa_r+0x6a2>
 800e29e:	9a06      	ldr	r2, [sp, #24]
 800e2a0:	2a00      	cmp	r2, #0
 800e2a2:	dd0a      	ble.n	800e2ba <_dtoa_r+0x6a2>
 800e2a4:	4542      	cmp	r2, r8
 800e2a6:	9905      	ldr	r1, [sp, #20]
 800e2a8:	bfa8      	it	ge
 800e2aa:	4642      	movge	r2, r8
 800e2ac:	1a89      	subs	r1, r1, r2
 800e2ae:	9105      	str	r1, [sp, #20]
 800e2b0:	9906      	ldr	r1, [sp, #24]
 800e2b2:	eba8 0802 	sub.w	r8, r8, r2
 800e2b6:	1a8a      	subs	r2, r1, r2
 800e2b8:	9206      	str	r2, [sp, #24]
 800e2ba:	b303      	cbz	r3, 800e2fe <_dtoa_r+0x6e6>
 800e2bc:	9a08      	ldr	r2, [sp, #32]
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	f000 80a6 	beq.w	800e410 <_dtoa_r+0x7f8>
 800e2c4:	2c00      	cmp	r4, #0
 800e2c6:	dd13      	ble.n	800e2f0 <_dtoa_r+0x6d8>
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d0:	f000 fbe8 	bl	800eaa4 <__pow5mult>
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4601      	mov	r1, r0
 800e2d8:	4607      	mov	r7, r0
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f000 fb3c 	bl	800e958 <__multiply>
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	900a      	str	r0, [sp, #40]	; 0x28
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f000 fa65 	bl	800e7b4 <_Bfree>
 800e2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2ee:	4615      	mov	r5, r2
 800e2f0:	1b1a      	subs	r2, r3, r4
 800e2f2:	d004      	beq.n	800e2fe <_dtoa_r+0x6e6>
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f000 fbd4 	bl	800eaa4 <__pow5mult>
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	2101      	movs	r1, #1
 800e300:	4630      	mov	r0, r6
 800e302:	f000 fb13 	bl	800e92c <__i2b>
 800e306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e308:	2b00      	cmp	r3, #0
 800e30a:	4604      	mov	r4, r0
 800e30c:	f340 8082 	ble.w	800e414 <_dtoa_r+0x7fc>
 800e310:	461a      	mov	r2, r3
 800e312:	4601      	mov	r1, r0
 800e314:	4630      	mov	r0, r6
 800e316:	f000 fbc5 	bl	800eaa4 <__pow5mult>
 800e31a:	9b07      	ldr	r3, [sp, #28]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	4604      	mov	r4, r0
 800e320:	dd7b      	ble.n	800e41a <_dtoa_r+0x802>
 800e322:	2300      	movs	r3, #0
 800e324:	930a      	str	r3, [sp, #40]	; 0x28
 800e326:	6922      	ldr	r2, [r4, #16]
 800e328:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e32c:	6910      	ldr	r0, [r2, #16]
 800e32e:	f000 faad 	bl	800e88c <__hi0bits>
 800e332:	f1c0 0020 	rsb	r0, r0, #32
 800e336:	9b06      	ldr	r3, [sp, #24]
 800e338:	4418      	add	r0, r3
 800e33a:	f010 001f 	ands.w	r0, r0, #31
 800e33e:	f000 808d 	beq.w	800e45c <_dtoa_r+0x844>
 800e342:	f1c0 0220 	rsb	r2, r0, #32
 800e346:	2a04      	cmp	r2, #4
 800e348:	f340 8086 	ble.w	800e458 <_dtoa_r+0x840>
 800e34c:	f1c0 001c 	rsb	r0, r0, #28
 800e350:	9b05      	ldr	r3, [sp, #20]
 800e352:	4403      	add	r3, r0
 800e354:	9305      	str	r3, [sp, #20]
 800e356:	9b06      	ldr	r3, [sp, #24]
 800e358:	4403      	add	r3, r0
 800e35a:	4480      	add	r8, r0
 800e35c:	9306      	str	r3, [sp, #24]
 800e35e:	9b05      	ldr	r3, [sp, #20]
 800e360:	2b00      	cmp	r3, #0
 800e362:	dd05      	ble.n	800e370 <_dtoa_r+0x758>
 800e364:	4629      	mov	r1, r5
 800e366:	461a      	mov	r2, r3
 800e368:	4630      	mov	r0, r6
 800e36a:	f000 fbf5 	bl	800eb58 <__lshift>
 800e36e:	4605      	mov	r5, r0
 800e370:	9b06      	ldr	r3, [sp, #24]
 800e372:	2b00      	cmp	r3, #0
 800e374:	dd05      	ble.n	800e382 <_dtoa_r+0x76a>
 800e376:	4621      	mov	r1, r4
 800e378:	461a      	mov	r2, r3
 800e37a:	4630      	mov	r0, r6
 800e37c:	f000 fbec 	bl	800eb58 <__lshift>
 800e380:	4604      	mov	r4, r0
 800e382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e384:	2b00      	cmp	r3, #0
 800e386:	d06b      	beq.n	800e460 <_dtoa_r+0x848>
 800e388:	4621      	mov	r1, r4
 800e38a:	4628      	mov	r0, r5
 800e38c:	f000 fc50 	bl	800ec30 <__mcmp>
 800e390:	2800      	cmp	r0, #0
 800e392:	da65      	bge.n	800e460 <_dtoa_r+0x848>
 800e394:	2300      	movs	r3, #0
 800e396:	4629      	mov	r1, r5
 800e398:	220a      	movs	r2, #10
 800e39a:	4630      	mov	r0, r6
 800e39c:	f000 fa2c 	bl	800e7f8 <__multadd>
 800e3a0:	9b08      	ldr	r3, [sp, #32]
 800e3a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 8192 	beq.w	800e6d2 <_dtoa_r+0xaba>
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	220a      	movs	r2, #10
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f000 fa1f 	bl	800e7f8 <__multadd>
 800e3ba:	f1ba 0f00 	cmp.w	sl, #0
 800e3be:	4607      	mov	r7, r0
 800e3c0:	f300 808e 	bgt.w	800e4e0 <_dtoa_r+0x8c8>
 800e3c4:	9b07      	ldr	r3, [sp, #28]
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	dc51      	bgt.n	800e46e <_dtoa_r+0x856>
 800e3ca:	e089      	b.n	800e4e0 <_dtoa_r+0x8c8>
 800e3cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e3d2:	e751      	b.n	800e278 <_dtoa_r+0x660>
 800e3d4:	f109 34ff 	add.w	r4, r9, #4294967295
 800e3d8:	42a3      	cmp	r3, r4
 800e3da:	bfbf      	itttt	lt
 800e3dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e3de:	1ae3      	sublt	r3, r4, r3
 800e3e0:	18d2      	addlt	r2, r2, r3
 800e3e2:	4613      	movlt	r3, r2
 800e3e4:	bfb7      	itett	lt
 800e3e6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e3e8:	1b1c      	subge	r4, r3, r4
 800e3ea:	4623      	movlt	r3, r4
 800e3ec:	2400      	movlt	r4, #0
 800e3ee:	f1b9 0f00 	cmp.w	r9, #0
 800e3f2:	bfb5      	itete	lt
 800e3f4:	9a05      	ldrlt	r2, [sp, #20]
 800e3f6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e3fa:	eba2 0809 	sublt.w	r8, r2, r9
 800e3fe:	464a      	movge	r2, r9
 800e400:	bfb8      	it	lt
 800e402:	2200      	movlt	r2, #0
 800e404:	e73b      	b.n	800e27e <_dtoa_r+0x666>
 800e406:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e40a:	9f08      	ldr	r7, [sp, #32]
 800e40c:	461c      	mov	r4, r3
 800e40e:	e743      	b.n	800e298 <_dtoa_r+0x680>
 800e410:	461a      	mov	r2, r3
 800e412:	e76f      	b.n	800e2f4 <_dtoa_r+0x6dc>
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	2b01      	cmp	r3, #1
 800e418:	dc18      	bgt.n	800e44c <_dtoa_r+0x834>
 800e41a:	9b02      	ldr	r3, [sp, #8]
 800e41c:	b9b3      	cbnz	r3, 800e44c <_dtoa_r+0x834>
 800e41e:	9b03      	ldr	r3, [sp, #12]
 800e420:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e424:	b9a2      	cbnz	r2, 800e450 <_dtoa_r+0x838>
 800e426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e42a:	0d12      	lsrs	r2, r2, #20
 800e42c:	0512      	lsls	r2, r2, #20
 800e42e:	b18a      	cbz	r2, 800e454 <_dtoa_r+0x83c>
 800e430:	9b05      	ldr	r3, [sp, #20]
 800e432:	3301      	adds	r3, #1
 800e434:	9305      	str	r3, [sp, #20]
 800e436:	9b06      	ldr	r3, [sp, #24]
 800e438:	3301      	adds	r3, #1
 800e43a:	9306      	str	r3, [sp, #24]
 800e43c:	2301      	movs	r3, #1
 800e43e:	930a      	str	r3, [sp, #40]	; 0x28
 800e440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e442:	2b00      	cmp	r3, #0
 800e444:	f47f af6f 	bne.w	800e326 <_dtoa_r+0x70e>
 800e448:	2001      	movs	r0, #1
 800e44a:	e774      	b.n	800e336 <_dtoa_r+0x71e>
 800e44c:	2300      	movs	r3, #0
 800e44e:	e7f6      	b.n	800e43e <_dtoa_r+0x826>
 800e450:	9b02      	ldr	r3, [sp, #8]
 800e452:	e7f4      	b.n	800e43e <_dtoa_r+0x826>
 800e454:	920a      	str	r2, [sp, #40]	; 0x28
 800e456:	e7f3      	b.n	800e440 <_dtoa_r+0x828>
 800e458:	d081      	beq.n	800e35e <_dtoa_r+0x746>
 800e45a:	4610      	mov	r0, r2
 800e45c:	301c      	adds	r0, #28
 800e45e:	e777      	b.n	800e350 <_dtoa_r+0x738>
 800e460:	f1b9 0f00 	cmp.w	r9, #0
 800e464:	dc37      	bgt.n	800e4d6 <_dtoa_r+0x8be>
 800e466:	9b07      	ldr	r3, [sp, #28]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	dd34      	ble.n	800e4d6 <_dtoa_r+0x8be>
 800e46c:	46ca      	mov	sl, r9
 800e46e:	f1ba 0f00 	cmp.w	sl, #0
 800e472:	d10d      	bne.n	800e490 <_dtoa_r+0x878>
 800e474:	4621      	mov	r1, r4
 800e476:	4653      	mov	r3, sl
 800e478:	2205      	movs	r2, #5
 800e47a:	4630      	mov	r0, r6
 800e47c:	f000 f9bc 	bl	800e7f8 <__multadd>
 800e480:	4601      	mov	r1, r0
 800e482:	4604      	mov	r4, r0
 800e484:	4628      	mov	r0, r5
 800e486:	f000 fbd3 	bl	800ec30 <__mcmp>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	f73f adde 	bgt.w	800e04c <_dtoa_r+0x434>
 800e490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e492:	f8dd 8000 	ldr.w	r8, [sp]
 800e496:	ea6f 0b03 	mvn.w	fp, r3
 800e49a:	f04f 0900 	mov.w	r9, #0
 800e49e:	4621      	mov	r1, r4
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f000 f987 	bl	800e7b4 <_Bfree>
 800e4a6:	2f00      	cmp	r7, #0
 800e4a8:	f43f aea7 	beq.w	800e1fa <_dtoa_r+0x5e2>
 800e4ac:	f1b9 0f00 	cmp.w	r9, #0
 800e4b0:	d005      	beq.n	800e4be <_dtoa_r+0x8a6>
 800e4b2:	45b9      	cmp	r9, r7
 800e4b4:	d003      	beq.n	800e4be <_dtoa_r+0x8a6>
 800e4b6:	4649      	mov	r1, r9
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f000 f97b 	bl	800e7b4 <_Bfree>
 800e4be:	4639      	mov	r1, r7
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f000 f977 	bl	800e7b4 <_Bfree>
 800e4c6:	e698      	b.n	800e1fa <_dtoa_r+0x5e2>
 800e4c8:	2400      	movs	r4, #0
 800e4ca:	4627      	mov	r7, r4
 800e4cc:	e7e0      	b.n	800e490 <_dtoa_r+0x878>
 800e4ce:	46bb      	mov	fp, r7
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	4607      	mov	r7, r0
 800e4d4:	e5ba      	b.n	800e04c <_dtoa_r+0x434>
 800e4d6:	9b08      	ldr	r3, [sp, #32]
 800e4d8:	46ca      	mov	sl, r9
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 8100 	beq.w	800e6e0 <_dtoa_r+0xac8>
 800e4e0:	f1b8 0f00 	cmp.w	r8, #0
 800e4e4:	dd05      	ble.n	800e4f2 <_dtoa_r+0x8da>
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	4642      	mov	r2, r8
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f000 fb34 	bl	800eb58 <__lshift>
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d05d      	beq.n	800e5b4 <_dtoa_r+0x99c>
 800e4f8:	6879      	ldr	r1, [r7, #4]
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f000 f91a 	bl	800e734 <_Balloc>
 800e500:	4680      	mov	r8, r0
 800e502:	b928      	cbnz	r0, 800e510 <_dtoa_r+0x8f8>
 800e504:	4b82      	ldr	r3, [pc, #520]	; (800e710 <_dtoa_r+0xaf8>)
 800e506:	4602      	mov	r2, r0
 800e508:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e50c:	f7ff bb9a 	b.w	800dc44 <_dtoa_r+0x2c>
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	3202      	adds	r2, #2
 800e514:	0092      	lsls	r2, r2, #2
 800e516:	f107 010c 	add.w	r1, r7, #12
 800e51a:	300c      	adds	r0, #12
 800e51c:	f7fe fe94 	bl	800d248 <memcpy>
 800e520:	2201      	movs	r2, #1
 800e522:	4641      	mov	r1, r8
 800e524:	4630      	mov	r0, r6
 800e526:	f000 fb17 	bl	800eb58 <__lshift>
 800e52a:	9b00      	ldr	r3, [sp, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	9305      	str	r3, [sp, #20]
 800e530:	9b00      	ldr	r3, [sp, #0]
 800e532:	4453      	add	r3, sl
 800e534:	9309      	str	r3, [sp, #36]	; 0x24
 800e536:	9b02      	ldr	r3, [sp, #8]
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	46b9      	mov	r9, r7
 800e53e:	9308      	str	r3, [sp, #32]
 800e540:	4607      	mov	r7, r0
 800e542:	9b05      	ldr	r3, [sp, #20]
 800e544:	4621      	mov	r1, r4
 800e546:	3b01      	subs	r3, #1
 800e548:	4628      	mov	r0, r5
 800e54a:	9302      	str	r3, [sp, #8]
 800e54c:	f7ff fad6 	bl	800dafc <quorem>
 800e550:	4603      	mov	r3, r0
 800e552:	3330      	adds	r3, #48	; 0x30
 800e554:	9006      	str	r0, [sp, #24]
 800e556:	4649      	mov	r1, r9
 800e558:	4628      	mov	r0, r5
 800e55a:	930a      	str	r3, [sp, #40]	; 0x28
 800e55c:	f000 fb68 	bl	800ec30 <__mcmp>
 800e560:	463a      	mov	r2, r7
 800e562:	4682      	mov	sl, r0
 800e564:	4621      	mov	r1, r4
 800e566:	4630      	mov	r0, r6
 800e568:	f000 fb7e 	bl	800ec68 <__mdiff>
 800e56c:	68c2      	ldr	r2, [r0, #12]
 800e56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e570:	4680      	mov	r8, r0
 800e572:	bb0a      	cbnz	r2, 800e5b8 <_dtoa_r+0x9a0>
 800e574:	4601      	mov	r1, r0
 800e576:	4628      	mov	r0, r5
 800e578:	f000 fb5a 	bl	800ec30 <__mcmp>
 800e57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e57e:	4602      	mov	r2, r0
 800e580:	4641      	mov	r1, r8
 800e582:	4630      	mov	r0, r6
 800e584:	920e      	str	r2, [sp, #56]	; 0x38
 800e586:	930a      	str	r3, [sp, #40]	; 0x28
 800e588:	f000 f914 	bl	800e7b4 <_Bfree>
 800e58c:	9b07      	ldr	r3, [sp, #28]
 800e58e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e590:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e594:	ea43 0102 	orr.w	r1, r3, r2
 800e598:	9b08      	ldr	r3, [sp, #32]
 800e59a:	430b      	orrs	r3, r1
 800e59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e59e:	d10d      	bne.n	800e5bc <_dtoa_r+0x9a4>
 800e5a0:	2b39      	cmp	r3, #57	; 0x39
 800e5a2:	d029      	beq.n	800e5f8 <_dtoa_r+0x9e0>
 800e5a4:	f1ba 0f00 	cmp.w	sl, #0
 800e5a8:	dd01      	ble.n	800e5ae <_dtoa_r+0x996>
 800e5aa:	9b06      	ldr	r3, [sp, #24]
 800e5ac:	3331      	adds	r3, #49	; 0x31
 800e5ae:	9a02      	ldr	r2, [sp, #8]
 800e5b0:	7013      	strb	r3, [r2, #0]
 800e5b2:	e774      	b.n	800e49e <_dtoa_r+0x886>
 800e5b4:	4638      	mov	r0, r7
 800e5b6:	e7b8      	b.n	800e52a <_dtoa_r+0x912>
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	e7e1      	b.n	800e580 <_dtoa_r+0x968>
 800e5bc:	f1ba 0f00 	cmp.w	sl, #0
 800e5c0:	db06      	blt.n	800e5d0 <_dtoa_r+0x9b8>
 800e5c2:	9907      	ldr	r1, [sp, #28]
 800e5c4:	ea41 0a0a 	orr.w	sl, r1, sl
 800e5c8:	9908      	ldr	r1, [sp, #32]
 800e5ca:	ea5a 0101 	orrs.w	r1, sl, r1
 800e5ce:	d120      	bne.n	800e612 <_dtoa_r+0x9fa>
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	ddec      	ble.n	800e5ae <_dtoa_r+0x996>
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	4630      	mov	r0, r6
 800e5da:	9305      	str	r3, [sp, #20]
 800e5dc:	f000 fabc 	bl	800eb58 <__lshift>
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	f000 fb24 	bl	800ec30 <__mcmp>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	9b05      	ldr	r3, [sp, #20]
 800e5ec:	dc02      	bgt.n	800e5f4 <_dtoa_r+0x9dc>
 800e5ee:	d1de      	bne.n	800e5ae <_dtoa_r+0x996>
 800e5f0:	07da      	lsls	r2, r3, #31
 800e5f2:	d5dc      	bpl.n	800e5ae <_dtoa_r+0x996>
 800e5f4:	2b39      	cmp	r3, #57	; 0x39
 800e5f6:	d1d8      	bne.n	800e5aa <_dtoa_r+0x992>
 800e5f8:	9a02      	ldr	r2, [sp, #8]
 800e5fa:	2339      	movs	r3, #57	; 0x39
 800e5fc:	7013      	strb	r3, [r2, #0]
 800e5fe:	4643      	mov	r3, r8
 800e600:	4698      	mov	r8, r3
 800e602:	3b01      	subs	r3, #1
 800e604:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e608:	2a39      	cmp	r2, #57	; 0x39
 800e60a:	d051      	beq.n	800e6b0 <_dtoa_r+0xa98>
 800e60c:	3201      	adds	r2, #1
 800e60e:	701a      	strb	r2, [r3, #0]
 800e610:	e745      	b.n	800e49e <_dtoa_r+0x886>
 800e612:	2a00      	cmp	r2, #0
 800e614:	dd03      	ble.n	800e61e <_dtoa_r+0xa06>
 800e616:	2b39      	cmp	r3, #57	; 0x39
 800e618:	d0ee      	beq.n	800e5f8 <_dtoa_r+0x9e0>
 800e61a:	3301      	adds	r3, #1
 800e61c:	e7c7      	b.n	800e5ae <_dtoa_r+0x996>
 800e61e:	9a05      	ldr	r2, [sp, #20]
 800e620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e622:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e626:	428a      	cmp	r2, r1
 800e628:	d02b      	beq.n	800e682 <_dtoa_r+0xa6a>
 800e62a:	4629      	mov	r1, r5
 800e62c:	2300      	movs	r3, #0
 800e62e:	220a      	movs	r2, #10
 800e630:	4630      	mov	r0, r6
 800e632:	f000 f8e1 	bl	800e7f8 <__multadd>
 800e636:	45b9      	cmp	r9, r7
 800e638:	4605      	mov	r5, r0
 800e63a:	f04f 0300 	mov.w	r3, #0
 800e63e:	f04f 020a 	mov.w	r2, #10
 800e642:	4649      	mov	r1, r9
 800e644:	4630      	mov	r0, r6
 800e646:	d107      	bne.n	800e658 <_dtoa_r+0xa40>
 800e648:	f000 f8d6 	bl	800e7f8 <__multadd>
 800e64c:	4681      	mov	r9, r0
 800e64e:	4607      	mov	r7, r0
 800e650:	9b05      	ldr	r3, [sp, #20]
 800e652:	3301      	adds	r3, #1
 800e654:	9305      	str	r3, [sp, #20]
 800e656:	e774      	b.n	800e542 <_dtoa_r+0x92a>
 800e658:	f000 f8ce 	bl	800e7f8 <__multadd>
 800e65c:	4639      	mov	r1, r7
 800e65e:	4681      	mov	r9, r0
 800e660:	2300      	movs	r3, #0
 800e662:	220a      	movs	r2, #10
 800e664:	4630      	mov	r0, r6
 800e666:	f000 f8c7 	bl	800e7f8 <__multadd>
 800e66a:	4607      	mov	r7, r0
 800e66c:	e7f0      	b.n	800e650 <_dtoa_r+0xa38>
 800e66e:	f1ba 0f00 	cmp.w	sl, #0
 800e672:	9a00      	ldr	r2, [sp, #0]
 800e674:	bfcc      	ite	gt
 800e676:	46d0      	movgt	r8, sl
 800e678:	f04f 0801 	movle.w	r8, #1
 800e67c:	4490      	add	r8, r2
 800e67e:	f04f 0900 	mov.w	r9, #0
 800e682:	4629      	mov	r1, r5
 800e684:	2201      	movs	r2, #1
 800e686:	4630      	mov	r0, r6
 800e688:	9302      	str	r3, [sp, #8]
 800e68a:	f000 fa65 	bl	800eb58 <__lshift>
 800e68e:	4621      	mov	r1, r4
 800e690:	4605      	mov	r5, r0
 800e692:	f000 facd 	bl	800ec30 <__mcmp>
 800e696:	2800      	cmp	r0, #0
 800e698:	dcb1      	bgt.n	800e5fe <_dtoa_r+0x9e6>
 800e69a:	d102      	bne.n	800e6a2 <_dtoa_r+0xa8a>
 800e69c:	9b02      	ldr	r3, [sp, #8]
 800e69e:	07db      	lsls	r3, r3, #31
 800e6a0:	d4ad      	bmi.n	800e5fe <_dtoa_r+0x9e6>
 800e6a2:	4643      	mov	r3, r8
 800e6a4:	4698      	mov	r8, r3
 800e6a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6aa:	2a30      	cmp	r2, #48	; 0x30
 800e6ac:	d0fa      	beq.n	800e6a4 <_dtoa_r+0xa8c>
 800e6ae:	e6f6      	b.n	800e49e <_dtoa_r+0x886>
 800e6b0:	9a00      	ldr	r2, [sp, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d1a4      	bne.n	800e600 <_dtoa_r+0x9e8>
 800e6b6:	f10b 0b01 	add.w	fp, fp, #1
 800e6ba:	2331      	movs	r3, #49	; 0x31
 800e6bc:	e778      	b.n	800e5b0 <_dtoa_r+0x998>
 800e6be:	4b15      	ldr	r3, [pc, #84]	; (800e714 <_dtoa_r+0xafc>)
 800e6c0:	f7ff bb12 	b.w	800dce8 <_dtoa_r+0xd0>
 800e6c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f47f aaee 	bne.w	800dca8 <_dtoa_r+0x90>
 800e6cc:	4b12      	ldr	r3, [pc, #72]	; (800e718 <_dtoa_r+0xb00>)
 800e6ce:	f7ff bb0b 	b.w	800dce8 <_dtoa_r+0xd0>
 800e6d2:	f1ba 0f00 	cmp.w	sl, #0
 800e6d6:	dc03      	bgt.n	800e6e0 <_dtoa_r+0xac8>
 800e6d8:	9b07      	ldr	r3, [sp, #28]
 800e6da:	2b02      	cmp	r3, #2
 800e6dc:	f73f aec7 	bgt.w	800e46e <_dtoa_r+0x856>
 800e6e0:	f8dd 8000 	ldr.w	r8, [sp]
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f7ff fa08 	bl	800dafc <quorem>
 800e6ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e6f0:	f808 3b01 	strb.w	r3, [r8], #1
 800e6f4:	9a00      	ldr	r2, [sp, #0]
 800e6f6:	eba8 0202 	sub.w	r2, r8, r2
 800e6fa:	4592      	cmp	sl, r2
 800e6fc:	ddb7      	ble.n	800e66e <_dtoa_r+0xa56>
 800e6fe:	4629      	mov	r1, r5
 800e700:	2300      	movs	r3, #0
 800e702:	220a      	movs	r2, #10
 800e704:	4630      	mov	r0, r6
 800e706:	f000 f877 	bl	800e7f8 <__multadd>
 800e70a:	4605      	mov	r5, r0
 800e70c:	e7ea      	b.n	800e6e4 <_dtoa_r+0xacc>
 800e70e:	bf00      	nop
 800e710:	0800fbf3 	.word	0x0800fbf3
 800e714:	0800fb4c 	.word	0x0800fb4c
 800e718:	0800fb70 	.word	0x0800fb70

0800e71c <_localeconv_r>:
 800e71c:	4800      	ldr	r0, [pc, #0]	; (800e720 <_localeconv_r+0x4>)
 800e71e:	4770      	bx	lr
 800e720:	24000170 	.word	0x24000170

0800e724 <malloc>:
 800e724:	4b02      	ldr	r3, [pc, #8]	; (800e730 <malloc+0xc>)
 800e726:	4601      	mov	r1, r0
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	f000 bbe1 	b.w	800eef0 <_malloc_r>
 800e72e:	bf00      	nop
 800e730:	2400001c 	.word	0x2400001c

0800e734 <_Balloc>:
 800e734:	b570      	push	{r4, r5, r6, lr}
 800e736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	b976      	cbnz	r6, 800e75c <_Balloc+0x28>
 800e73e:	2010      	movs	r0, #16
 800e740:	f7ff fff0 	bl	800e724 <malloc>
 800e744:	4602      	mov	r2, r0
 800e746:	6260      	str	r0, [r4, #36]	; 0x24
 800e748:	b920      	cbnz	r0, 800e754 <_Balloc+0x20>
 800e74a:	4b18      	ldr	r3, [pc, #96]	; (800e7ac <_Balloc+0x78>)
 800e74c:	4818      	ldr	r0, [pc, #96]	; (800e7b0 <_Balloc+0x7c>)
 800e74e:	2166      	movs	r1, #102	; 0x66
 800e750:	f000 fc38 	bl	800efc4 <__assert_func>
 800e754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e758:	6006      	str	r6, [r0, #0]
 800e75a:	60c6      	str	r6, [r0, #12]
 800e75c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e75e:	68f3      	ldr	r3, [r6, #12]
 800e760:	b183      	cbz	r3, 800e784 <_Balloc+0x50>
 800e762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e76a:	b9b8      	cbnz	r0, 800e79c <_Balloc+0x68>
 800e76c:	2101      	movs	r1, #1
 800e76e:	fa01 f605 	lsl.w	r6, r1, r5
 800e772:	1d72      	adds	r2, r6, #5
 800e774:	0092      	lsls	r2, r2, #2
 800e776:	4620      	mov	r0, r4
 800e778:	f000 fb5a 	bl	800ee30 <_calloc_r>
 800e77c:	b160      	cbz	r0, 800e798 <_Balloc+0x64>
 800e77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e782:	e00e      	b.n	800e7a2 <_Balloc+0x6e>
 800e784:	2221      	movs	r2, #33	; 0x21
 800e786:	2104      	movs	r1, #4
 800e788:	4620      	mov	r0, r4
 800e78a:	f000 fb51 	bl	800ee30 <_calloc_r>
 800e78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e790:	60f0      	str	r0, [r6, #12]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1e4      	bne.n	800e762 <_Balloc+0x2e>
 800e798:	2000      	movs	r0, #0
 800e79a:	bd70      	pop	{r4, r5, r6, pc}
 800e79c:	6802      	ldr	r2, [r0, #0]
 800e79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7a8:	e7f7      	b.n	800e79a <_Balloc+0x66>
 800e7aa:	bf00      	nop
 800e7ac:	0800fb7d 	.word	0x0800fb7d
 800e7b0:	0800fc04 	.word	0x0800fc04

0800e7b4 <_Bfree>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	b976      	cbnz	r6, 800e7dc <_Bfree+0x28>
 800e7be:	2010      	movs	r0, #16
 800e7c0:	f7ff ffb0 	bl	800e724 <malloc>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	6268      	str	r0, [r5, #36]	; 0x24
 800e7c8:	b920      	cbnz	r0, 800e7d4 <_Bfree+0x20>
 800e7ca:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <_Bfree+0x3c>)
 800e7cc:	4809      	ldr	r0, [pc, #36]	; (800e7f4 <_Bfree+0x40>)
 800e7ce:	218a      	movs	r1, #138	; 0x8a
 800e7d0:	f000 fbf8 	bl	800efc4 <__assert_func>
 800e7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7d8:	6006      	str	r6, [r0, #0]
 800e7da:	60c6      	str	r6, [r0, #12]
 800e7dc:	b13c      	cbz	r4, 800e7ee <_Bfree+0x3a>
 800e7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7e0:	6862      	ldr	r2, [r4, #4]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7e8:	6021      	str	r1, [r4, #0]
 800e7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}
 800e7f0:	0800fb7d 	.word	0x0800fb7d
 800e7f4:	0800fc04 	.word	0x0800fc04

0800e7f8 <__multadd>:
 800e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fc:	690e      	ldr	r6, [r1, #16]
 800e7fe:	4607      	mov	r7, r0
 800e800:	4698      	mov	r8, r3
 800e802:	460c      	mov	r4, r1
 800e804:	f101 0014 	add.w	r0, r1, #20
 800e808:	2300      	movs	r3, #0
 800e80a:	6805      	ldr	r5, [r0, #0]
 800e80c:	b2a9      	uxth	r1, r5
 800e80e:	fb02 8101 	mla	r1, r2, r1, r8
 800e812:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e816:	0c2d      	lsrs	r5, r5, #16
 800e818:	fb02 c505 	mla	r5, r2, r5, ip
 800e81c:	b289      	uxth	r1, r1
 800e81e:	3301      	adds	r3, #1
 800e820:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e824:	429e      	cmp	r6, r3
 800e826:	f840 1b04 	str.w	r1, [r0], #4
 800e82a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e82e:	dcec      	bgt.n	800e80a <__multadd+0x12>
 800e830:	f1b8 0f00 	cmp.w	r8, #0
 800e834:	d022      	beq.n	800e87c <__multadd+0x84>
 800e836:	68a3      	ldr	r3, [r4, #8]
 800e838:	42b3      	cmp	r3, r6
 800e83a:	dc19      	bgt.n	800e870 <__multadd+0x78>
 800e83c:	6861      	ldr	r1, [r4, #4]
 800e83e:	4638      	mov	r0, r7
 800e840:	3101      	adds	r1, #1
 800e842:	f7ff ff77 	bl	800e734 <_Balloc>
 800e846:	4605      	mov	r5, r0
 800e848:	b928      	cbnz	r0, 800e856 <__multadd+0x5e>
 800e84a:	4602      	mov	r2, r0
 800e84c:	4b0d      	ldr	r3, [pc, #52]	; (800e884 <__multadd+0x8c>)
 800e84e:	480e      	ldr	r0, [pc, #56]	; (800e888 <__multadd+0x90>)
 800e850:	21b5      	movs	r1, #181	; 0xb5
 800e852:	f000 fbb7 	bl	800efc4 <__assert_func>
 800e856:	6922      	ldr	r2, [r4, #16]
 800e858:	3202      	adds	r2, #2
 800e85a:	f104 010c 	add.w	r1, r4, #12
 800e85e:	0092      	lsls	r2, r2, #2
 800e860:	300c      	adds	r0, #12
 800e862:	f7fe fcf1 	bl	800d248 <memcpy>
 800e866:	4621      	mov	r1, r4
 800e868:	4638      	mov	r0, r7
 800e86a:	f7ff ffa3 	bl	800e7b4 <_Bfree>
 800e86e:	462c      	mov	r4, r5
 800e870:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e874:	3601      	adds	r6, #1
 800e876:	f8c3 8014 	str.w	r8, [r3, #20]
 800e87a:	6126      	str	r6, [r4, #16]
 800e87c:	4620      	mov	r0, r4
 800e87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e882:	bf00      	nop
 800e884:	0800fbf3 	.word	0x0800fbf3
 800e888:	0800fc04 	.word	0x0800fc04

0800e88c <__hi0bits>:
 800e88c:	0c03      	lsrs	r3, r0, #16
 800e88e:	041b      	lsls	r3, r3, #16
 800e890:	b9d3      	cbnz	r3, 800e8c8 <__hi0bits+0x3c>
 800e892:	0400      	lsls	r0, r0, #16
 800e894:	2310      	movs	r3, #16
 800e896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e89a:	bf04      	itt	eq
 800e89c:	0200      	lsleq	r0, r0, #8
 800e89e:	3308      	addeq	r3, #8
 800e8a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e8a4:	bf04      	itt	eq
 800e8a6:	0100      	lsleq	r0, r0, #4
 800e8a8:	3304      	addeq	r3, #4
 800e8aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e8ae:	bf04      	itt	eq
 800e8b0:	0080      	lsleq	r0, r0, #2
 800e8b2:	3302      	addeq	r3, #2
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	db05      	blt.n	800e8c4 <__hi0bits+0x38>
 800e8b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8bc:	f103 0301 	add.w	r3, r3, #1
 800e8c0:	bf08      	it	eq
 800e8c2:	2320      	moveq	r3, #32
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	4770      	bx	lr
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e7e4      	b.n	800e896 <__hi0bits+0xa>

0800e8cc <__lo0bits>:
 800e8cc:	6803      	ldr	r3, [r0, #0]
 800e8ce:	f013 0207 	ands.w	r2, r3, #7
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	d00b      	beq.n	800e8ee <__lo0bits+0x22>
 800e8d6:	07da      	lsls	r2, r3, #31
 800e8d8:	d424      	bmi.n	800e924 <__lo0bits+0x58>
 800e8da:	0798      	lsls	r0, r3, #30
 800e8dc:	bf49      	itett	mi
 800e8de:	085b      	lsrmi	r3, r3, #1
 800e8e0:	089b      	lsrpl	r3, r3, #2
 800e8e2:	2001      	movmi	r0, #1
 800e8e4:	600b      	strmi	r3, [r1, #0]
 800e8e6:	bf5c      	itt	pl
 800e8e8:	600b      	strpl	r3, [r1, #0]
 800e8ea:	2002      	movpl	r0, #2
 800e8ec:	4770      	bx	lr
 800e8ee:	b298      	uxth	r0, r3
 800e8f0:	b9b0      	cbnz	r0, 800e920 <__lo0bits+0x54>
 800e8f2:	0c1b      	lsrs	r3, r3, #16
 800e8f4:	2010      	movs	r0, #16
 800e8f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e8fa:	bf04      	itt	eq
 800e8fc:	0a1b      	lsreq	r3, r3, #8
 800e8fe:	3008      	addeq	r0, #8
 800e900:	071a      	lsls	r2, r3, #28
 800e902:	bf04      	itt	eq
 800e904:	091b      	lsreq	r3, r3, #4
 800e906:	3004      	addeq	r0, #4
 800e908:	079a      	lsls	r2, r3, #30
 800e90a:	bf04      	itt	eq
 800e90c:	089b      	lsreq	r3, r3, #2
 800e90e:	3002      	addeq	r0, #2
 800e910:	07da      	lsls	r2, r3, #31
 800e912:	d403      	bmi.n	800e91c <__lo0bits+0x50>
 800e914:	085b      	lsrs	r3, r3, #1
 800e916:	f100 0001 	add.w	r0, r0, #1
 800e91a:	d005      	beq.n	800e928 <__lo0bits+0x5c>
 800e91c:	600b      	str	r3, [r1, #0]
 800e91e:	4770      	bx	lr
 800e920:	4610      	mov	r0, r2
 800e922:	e7e8      	b.n	800e8f6 <__lo0bits+0x2a>
 800e924:	2000      	movs	r0, #0
 800e926:	4770      	bx	lr
 800e928:	2020      	movs	r0, #32
 800e92a:	4770      	bx	lr

0800e92c <__i2b>:
 800e92c:	b510      	push	{r4, lr}
 800e92e:	460c      	mov	r4, r1
 800e930:	2101      	movs	r1, #1
 800e932:	f7ff feff 	bl	800e734 <_Balloc>
 800e936:	4602      	mov	r2, r0
 800e938:	b928      	cbnz	r0, 800e946 <__i2b+0x1a>
 800e93a:	4b05      	ldr	r3, [pc, #20]	; (800e950 <__i2b+0x24>)
 800e93c:	4805      	ldr	r0, [pc, #20]	; (800e954 <__i2b+0x28>)
 800e93e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e942:	f000 fb3f 	bl	800efc4 <__assert_func>
 800e946:	2301      	movs	r3, #1
 800e948:	6144      	str	r4, [r0, #20]
 800e94a:	6103      	str	r3, [r0, #16]
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	bf00      	nop
 800e950:	0800fbf3 	.word	0x0800fbf3
 800e954:	0800fc04 	.word	0x0800fc04

0800e958 <__multiply>:
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	4614      	mov	r4, r2
 800e95e:	690a      	ldr	r2, [r1, #16]
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	429a      	cmp	r2, r3
 800e964:	bfb8      	it	lt
 800e966:	460b      	movlt	r3, r1
 800e968:	460d      	mov	r5, r1
 800e96a:	bfbc      	itt	lt
 800e96c:	4625      	movlt	r5, r4
 800e96e:	461c      	movlt	r4, r3
 800e970:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e974:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e978:	68ab      	ldr	r3, [r5, #8]
 800e97a:	6869      	ldr	r1, [r5, #4]
 800e97c:	eb0a 0709 	add.w	r7, sl, r9
 800e980:	42bb      	cmp	r3, r7
 800e982:	b085      	sub	sp, #20
 800e984:	bfb8      	it	lt
 800e986:	3101      	addlt	r1, #1
 800e988:	f7ff fed4 	bl	800e734 <_Balloc>
 800e98c:	b930      	cbnz	r0, 800e99c <__multiply+0x44>
 800e98e:	4602      	mov	r2, r0
 800e990:	4b42      	ldr	r3, [pc, #264]	; (800ea9c <__multiply+0x144>)
 800e992:	4843      	ldr	r0, [pc, #268]	; (800eaa0 <__multiply+0x148>)
 800e994:	f240 115d 	movw	r1, #349	; 0x15d
 800e998:	f000 fb14 	bl	800efc4 <__assert_func>
 800e99c:	f100 0614 	add.w	r6, r0, #20
 800e9a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e9a4:	4633      	mov	r3, r6
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4543      	cmp	r3, r8
 800e9aa:	d31e      	bcc.n	800e9ea <__multiply+0x92>
 800e9ac:	f105 0c14 	add.w	ip, r5, #20
 800e9b0:	f104 0314 	add.w	r3, r4, #20
 800e9b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e9b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e9bc:	9202      	str	r2, [sp, #8]
 800e9be:	ebac 0205 	sub.w	r2, ip, r5
 800e9c2:	3a15      	subs	r2, #21
 800e9c4:	f022 0203 	bic.w	r2, r2, #3
 800e9c8:	3204      	adds	r2, #4
 800e9ca:	f105 0115 	add.w	r1, r5, #21
 800e9ce:	458c      	cmp	ip, r1
 800e9d0:	bf38      	it	cc
 800e9d2:	2204      	movcc	r2, #4
 800e9d4:	9201      	str	r2, [sp, #4]
 800e9d6:	9a02      	ldr	r2, [sp, #8]
 800e9d8:	9303      	str	r3, [sp, #12]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d808      	bhi.n	800e9f0 <__multiply+0x98>
 800e9de:	2f00      	cmp	r7, #0
 800e9e0:	dc55      	bgt.n	800ea8e <__multiply+0x136>
 800e9e2:	6107      	str	r7, [r0, #16]
 800e9e4:	b005      	add	sp, #20
 800e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ea:	f843 2b04 	str.w	r2, [r3], #4
 800e9ee:	e7db      	b.n	800e9a8 <__multiply+0x50>
 800e9f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800e9f4:	f1ba 0f00 	cmp.w	sl, #0
 800e9f8:	d020      	beq.n	800ea3c <__multiply+0xe4>
 800e9fa:	f105 0e14 	add.w	lr, r5, #20
 800e9fe:	46b1      	mov	r9, r6
 800ea00:	2200      	movs	r2, #0
 800ea02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ea06:	f8d9 b000 	ldr.w	fp, [r9]
 800ea0a:	b2a1      	uxth	r1, r4
 800ea0c:	fa1f fb8b 	uxth.w	fp, fp
 800ea10:	fb0a b101 	mla	r1, sl, r1, fp
 800ea14:	4411      	add	r1, r2
 800ea16:	f8d9 2000 	ldr.w	r2, [r9]
 800ea1a:	0c24      	lsrs	r4, r4, #16
 800ea1c:	0c12      	lsrs	r2, r2, #16
 800ea1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ea22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ea26:	b289      	uxth	r1, r1
 800ea28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ea2c:	45f4      	cmp	ip, lr
 800ea2e:	f849 1b04 	str.w	r1, [r9], #4
 800ea32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ea36:	d8e4      	bhi.n	800ea02 <__multiply+0xaa>
 800ea38:	9901      	ldr	r1, [sp, #4]
 800ea3a:	5072      	str	r2, [r6, r1]
 800ea3c:	9a03      	ldr	r2, [sp, #12]
 800ea3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea42:	3304      	adds	r3, #4
 800ea44:	f1b9 0f00 	cmp.w	r9, #0
 800ea48:	d01f      	beq.n	800ea8a <__multiply+0x132>
 800ea4a:	6834      	ldr	r4, [r6, #0]
 800ea4c:	f105 0114 	add.w	r1, r5, #20
 800ea50:	46b6      	mov	lr, r6
 800ea52:	f04f 0a00 	mov.w	sl, #0
 800ea56:	880a      	ldrh	r2, [r1, #0]
 800ea58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea5c:	fb09 b202 	mla	r2, r9, r2, fp
 800ea60:	4492      	add	sl, r2
 800ea62:	b2a4      	uxth	r4, r4
 800ea64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ea68:	f84e 4b04 	str.w	r4, [lr], #4
 800ea6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea70:	f8be 2000 	ldrh.w	r2, [lr]
 800ea74:	0c24      	lsrs	r4, r4, #16
 800ea76:	fb09 2404 	mla	r4, r9, r4, r2
 800ea7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ea7e:	458c      	cmp	ip, r1
 800ea80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea84:	d8e7      	bhi.n	800ea56 <__multiply+0xfe>
 800ea86:	9a01      	ldr	r2, [sp, #4]
 800ea88:	50b4      	str	r4, [r6, r2]
 800ea8a:	3604      	adds	r6, #4
 800ea8c:	e7a3      	b.n	800e9d6 <__multiply+0x7e>
 800ea8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1a5      	bne.n	800e9e2 <__multiply+0x8a>
 800ea96:	3f01      	subs	r7, #1
 800ea98:	e7a1      	b.n	800e9de <__multiply+0x86>
 800ea9a:	bf00      	nop
 800ea9c:	0800fbf3 	.word	0x0800fbf3
 800eaa0:	0800fc04 	.word	0x0800fc04

0800eaa4 <__pow5mult>:
 800eaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	4615      	mov	r5, r2
 800eaaa:	f012 0203 	ands.w	r2, r2, #3
 800eaae:	4606      	mov	r6, r0
 800eab0:	460f      	mov	r7, r1
 800eab2:	d007      	beq.n	800eac4 <__pow5mult+0x20>
 800eab4:	4c25      	ldr	r4, [pc, #148]	; (800eb4c <__pow5mult+0xa8>)
 800eab6:	3a01      	subs	r2, #1
 800eab8:	2300      	movs	r3, #0
 800eaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eabe:	f7ff fe9b 	bl	800e7f8 <__multadd>
 800eac2:	4607      	mov	r7, r0
 800eac4:	10ad      	asrs	r5, r5, #2
 800eac6:	d03d      	beq.n	800eb44 <__pow5mult+0xa0>
 800eac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eaca:	b97c      	cbnz	r4, 800eaec <__pow5mult+0x48>
 800eacc:	2010      	movs	r0, #16
 800eace:	f7ff fe29 	bl	800e724 <malloc>
 800ead2:	4602      	mov	r2, r0
 800ead4:	6270      	str	r0, [r6, #36]	; 0x24
 800ead6:	b928      	cbnz	r0, 800eae4 <__pow5mult+0x40>
 800ead8:	4b1d      	ldr	r3, [pc, #116]	; (800eb50 <__pow5mult+0xac>)
 800eada:	481e      	ldr	r0, [pc, #120]	; (800eb54 <__pow5mult+0xb0>)
 800eadc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eae0:	f000 fa70 	bl	800efc4 <__assert_func>
 800eae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eae8:	6004      	str	r4, [r0, #0]
 800eaea:	60c4      	str	r4, [r0, #12]
 800eaec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eaf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eaf4:	b94c      	cbnz	r4, 800eb0a <__pow5mult+0x66>
 800eaf6:	f240 2171 	movw	r1, #625	; 0x271
 800eafa:	4630      	mov	r0, r6
 800eafc:	f7ff ff16 	bl	800e92c <__i2b>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb06:	4604      	mov	r4, r0
 800eb08:	6003      	str	r3, [r0, #0]
 800eb0a:	f04f 0900 	mov.w	r9, #0
 800eb0e:	07eb      	lsls	r3, r5, #31
 800eb10:	d50a      	bpl.n	800eb28 <__pow5mult+0x84>
 800eb12:	4639      	mov	r1, r7
 800eb14:	4622      	mov	r2, r4
 800eb16:	4630      	mov	r0, r6
 800eb18:	f7ff ff1e 	bl	800e958 <__multiply>
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7ff fe47 	bl	800e7b4 <_Bfree>
 800eb26:	4647      	mov	r7, r8
 800eb28:	106d      	asrs	r5, r5, #1
 800eb2a:	d00b      	beq.n	800eb44 <__pow5mult+0xa0>
 800eb2c:	6820      	ldr	r0, [r4, #0]
 800eb2e:	b938      	cbnz	r0, 800eb40 <__pow5mult+0x9c>
 800eb30:	4622      	mov	r2, r4
 800eb32:	4621      	mov	r1, r4
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7ff ff0f 	bl	800e958 <__multiply>
 800eb3a:	6020      	str	r0, [r4, #0]
 800eb3c:	f8c0 9000 	str.w	r9, [r0]
 800eb40:	4604      	mov	r4, r0
 800eb42:	e7e4      	b.n	800eb0e <__pow5mult+0x6a>
 800eb44:	4638      	mov	r0, r7
 800eb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb4a:	bf00      	nop
 800eb4c:	0800fd58 	.word	0x0800fd58
 800eb50:	0800fb7d 	.word	0x0800fb7d
 800eb54:	0800fc04 	.word	0x0800fc04

0800eb58 <__lshift>:
 800eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	6849      	ldr	r1, [r1, #4]
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb66:	68a3      	ldr	r3, [r4, #8]
 800eb68:	4607      	mov	r7, r0
 800eb6a:	4691      	mov	r9, r2
 800eb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb70:	f108 0601 	add.w	r6, r8, #1
 800eb74:	42b3      	cmp	r3, r6
 800eb76:	db0b      	blt.n	800eb90 <__lshift+0x38>
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f7ff fddb 	bl	800e734 <_Balloc>
 800eb7e:	4605      	mov	r5, r0
 800eb80:	b948      	cbnz	r0, 800eb96 <__lshift+0x3e>
 800eb82:	4602      	mov	r2, r0
 800eb84:	4b28      	ldr	r3, [pc, #160]	; (800ec28 <__lshift+0xd0>)
 800eb86:	4829      	ldr	r0, [pc, #164]	; (800ec2c <__lshift+0xd4>)
 800eb88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eb8c:	f000 fa1a 	bl	800efc4 <__assert_func>
 800eb90:	3101      	adds	r1, #1
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	e7ee      	b.n	800eb74 <__lshift+0x1c>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f100 0114 	add.w	r1, r0, #20
 800eb9c:	f100 0210 	add.w	r2, r0, #16
 800eba0:	4618      	mov	r0, r3
 800eba2:	4553      	cmp	r3, sl
 800eba4:	db33      	blt.n	800ec0e <__lshift+0xb6>
 800eba6:	6920      	ldr	r0, [r4, #16]
 800eba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebac:	f104 0314 	add.w	r3, r4, #20
 800ebb0:	f019 091f 	ands.w	r9, r9, #31
 800ebb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebbc:	d02b      	beq.n	800ec16 <__lshift+0xbe>
 800ebbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ebc2:	468a      	mov	sl, r1
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	6818      	ldr	r0, [r3, #0]
 800ebc8:	fa00 f009 	lsl.w	r0, r0, r9
 800ebcc:	4302      	orrs	r2, r0
 800ebce:	f84a 2b04 	str.w	r2, [sl], #4
 800ebd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd6:	459c      	cmp	ip, r3
 800ebd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebdc:	d8f3      	bhi.n	800ebc6 <__lshift+0x6e>
 800ebde:	ebac 0304 	sub.w	r3, ip, r4
 800ebe2:	3b15      	subs	r3, #21
 800ebe4:	f023 0303 	bic.w	r3, r3, #3
 800ebe8:	3304      	adds	r3, #4
 800ebea:	f104 0015 	add.w	r0, r4, #21
 800ebee:	4584      	cmp	ip, r0
 800ebf0:	bf38      	it	cc
 800ebf2:	2304      	movcc	r3, #4
 800ebf4:	50ca      	str	r2, [r1, r3]
 800ebf6:	b10a      	cbz	r2, 800ebfc <__lshift+0xa4>
 800ebf8:	f108 0602 	add.w	r6, r8, #2
 800ebfc:	3e01      	subs	r6, #1
 800ebfe:	4638      	mov	r0, r7
 800ec00:	612e      	str	r6, [r5, #16]
 800ec02:	4621      	mov	r1, r4
 800ec04:	f7ff fdd6 	bl	800e7b4 <_Bfree>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec12:	3301      	adds	r3, #1
 800ec14:	e7c5      	b.n	800eba2 <__lshift+0x4a>
 800ec16:	3904      	subs	r1, #4
 800ec18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec20:	459c      	cmp	ip, r3
 800ec22:	d8f9      	bhi.n	800ec18 <__lshift+0xc0>
 800ec24:	e7ea      	b.n	800ebfc <__lshift+0xa4>
 800ec26:	bf00      	nop
 800ec28:	0800fbf3 	.word	0x0800fbf3
 800ec2c:	0800fc04 	.word	0x0800fc04

0800ec30 <__mcmp>:
 800ec30:	b530      	push	{r4, r5, lr}
 800ec32:	6902      	ldr	r2, [r0, #16]
 800ec34:	690c      	ldr	r4, [r1, #16]
 800ec36:	1b12      	subs	r2, r2, r4
 800ec38:	d10e      	bne.n	800ec58 <__mcmp+0x28>
 800ec3a:	f100 0314 	add.w	r3, r0, #20
 800ec3e:	3114      	adds	r1, #20
 800ec40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec50:	42a5      	cmp	r5, r4
 800ec52:	d003      	beq.n	800ec5c <__mcmp+0x2c>
 800ec54:	d305      	bcc.n	800ec62 <__mcmp+0x32>
 800ec56:	2201      	movs	r2, #1
 800ec58:	4610      	mov	r0, r2
 800ec5a:	bd30      	pop	{r4, r5, pc}
 800ec5c:	4283      	cmp	r3, r0
 800ec5e:	d3f3      	bcc.n	800ec48 <__mcmp+0x18>
 800ec60:	e7fa      	b.n	800ec58 <__mcmp+0x28>
 800ec62:	f04f 32ff 	mov.w	r2, #4294967295
 800ec66:	e7f7      	b.n	800ec58 <__mcmp+0x28>

0800ec68 <__mdiff>:
 800ec68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	460c      	mov	r4, r1
 800ec6e:	4606      	mov	r6, r0
 800ec70:	4611      	mov	r1, r2
 800ec72:	4620      	mov	r0, r4
 800ec74:	4617      	mov	r7, r2
 800ec76:	f7ff ffdb 	bl	800ec30 <__mcmp>
 800ec7a:	1e05      	subs	r5, r0, #0
 800ec7c:	d110      	bne.n	800eca0 <__mdiff+0x38>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7ff fd57 	bl	800e734 <_Balloc>
 800ec86:	b930      	cbnz	r0, 800ec96 <__mdiff+0x2e>
 800ec88:	4b39      	ldr	r3, [pc, #228]	; (800ed70 <__mdiff+0x108>)
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	f240 2132 	movw	r1, #562	; 0x232
 800ec90:	4838      	ldr	r0, [pc, #224]	; (800ed74 <__mdiff+0x10c>)
 800ec92:	f000 f997 	bl	800efc4 <__assert_func>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca0:	bfa4      	itt	ge
 800eca2:	463b      	movge	r3, r7
 800eca4:	4627      	movge	r7, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	6879      	ldr	r1, [r7, #4]
 800ecaa:	bfa6      	itte	ge
 800ecac:	461c      	movge	r4, r3
 800ecae:	2500      	movge	r5, #0
 800ecb0:	2501      	movlt	r5, #1
 800ecb2:	f7ff fd3f 	bl	800e734 <_Balloc>
 800ecb6:	b920      	cbnz	r0, 800ecc2 <__mdiff+0x5a>
 800ecb8:	4b2d      	ldr	r3, [pc, #180]	; (800ed70 <__mdiff+0x108>)
 800ecba:	4602      	mov	r2, r0
 800ecbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ecc0:	e7e6      	b.n	800ec90 <__mdiff+0x28>
 800ecc2:	693e      	ldr	r6, [r7, #16]
 800ecc4:	60c5      	str	r5, [r0, #12]
 800ecc6:	6925      	ldr	r5, [r4, #16]
 800ecc8:	f107 0114 	add.w	r1, r7, #20
 800eccc:	f104 0914 	add.w	r9, r4, #20
 800ecd0:	f100 0e14 	add.w	lr, r0, #20
 800ecd4:	f107 0210 	add.w	r2, r7, #16
 800ecd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ecdc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ece0:	46f2      	mov	sl, lr
 800ece2:	2700      	movs	r7, #0
 800ece4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ece8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ecec:	fa1f f883 	uxth.w	r8, r3
 800ecf0:	fa17 f78b 	uxtah	r7, r7, fp
 800ecf4:	0c1b      	lsrs	r3, r3, #16
 800ecf6:	eba7 0808 	sub.w	r8, r7, r8
 800ecfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ecfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ed02:	fa1f f888 	uxth.w	r8, r8
 800ed06:	141f      	asrs	r7, r3, #16
 800ed08:	454d      	cmp	r5, r9
 800ed0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ed0e:	f84a 3b04 	str.w	r3, [sl], #4
 800ed12:	d8e7      	bhi.n	800ece4 <__mdiff+0x7c>
 800ed14:	1b2b      	subs	r3, r5, r4
 800ed16:	3b15      	subs	r3, #21
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	3415      	adds	r4, #21
 800ed20:	42a5      	cmp	r5, r4
 800ed22:	bf38      	it	cc
 800ed24:	2304      	movcc	r3, #4
 800ed26:	4419      	add	r1, r3
 800ed28:	4473      	add	r3, lr
 800ed2a:	469e      	mov	lr, r3
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	4565      	cmp	r5, ip
 800ed30:	d30e      	bcc.n	800ed50 <__mdiff+0xe8>
 800ed32:	f10c 0203 	add.w	r2, ip, #3
 800ed36:	1a52      	subs	r2, r2, r1
 800ed38:	f022 0203 	bic.w	r2, r2, #3
 800ed3c:	3903      	subs	r1, #3
 800ed3e:	458c      	cmp	ip, r1
 800ed40:	bf38      	it	cc
 800ed42:	2200      	movcc	r2, #0
 800ed44:	441a      	add	r2, r3
 800ed46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed4a:	b17b      	cbz	r3, 800ed6c <__mdiff+0x104>
 800ed4c:	6106      	str	r6, [r0, #16]
 800ed4e:	e7a5      	b.n	800ec9c <__mdiff+0x34>
 800ed50:	f855 8b04 	ldr.w	r8, [r5], #4
 800ed54:	fa17 f488 	uxtah	r4, r7, r8
 800ed58:	1422      	asrs	r2, r4, #16
 800ed5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ed5e:	b2a4      	uxth	r4, r4
 800ed60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ed64:	f84e 4b04 	str.w	r4, [lr], #4
 800ed68:	1417      	asrs	r7, r2, #16
 800ed6a:	e7e0      	b.n	800ed2e <__mdiff+0xc6>
 800ed6c:	3e01      	subs	r6, #1
 800ed6e:	e7ea      	b.n	800ed46 <__mdiff+0xde>
 800ed70:	0800fbf3 	.word	0x0800fbf3
 800ed74:	0800fc04 	.word	0x0800fc04

0800ed78 <__d2b>:
 800ed78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	4689      	mov	r9, r1
 800ed7e:	2101      	movs	r1, #1
 800ed80:	ec57 6b10 	vmov	r6, r7, d0
 800ed84:	4690      	mov	r8, r2
 800ed86:	f7ff fcd5 	bl	800e734 <_Balloc>
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	b930      	cbnz	r0, 800ed9c <__d2b+0x24>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	4b25      	ldr	r3, [pc, #148]	; (800ee28 <__d2b+0xb0>)
 800ed92:	4826      	ldr	r0, [pc, #152]	; (800ee2c <__d2b+0xb4>)
 800ed94:	f240 310a 	movw	r1, #778	; 0x30a
 800ed98:	f000 f914 	bl	800efc4 <__assert_func>
 800ed9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eda4:	bb35      	cbnz	r5, 800edf4 <__d2b+0x7c>
 800eda6:	2e00      	cmp	r6, #0
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	d028      	beq.n	800edfe <__d2b+0x86>
 800edac:	4668      	mov	r0, sp
 800edae:	9600      	str	r6, [sp, #0]
 800edb0:	f7ff fd8c 	bl	800e8cc <__lo0bits>
 800edb4:	9900      	ldr	r1, [sp, #0]
 800edb6:	b300      	cbz	r0, 800edfa <__d2b+0x82>
 800edb8:	9a01      	ldr	r2, [sp, #4]
 800edba:	f1c0 0320 	rsb	r3, r0, #32
 800edbe:	fa02 f303 	lsl.w	r3, r2, r3
 800edc2:	430b      	orrs	r3, r1
 800edc4:	40c2      	lsrs	r2, r0
 800edc6:	6163      	str	r3, [r4, #20]
 800edc8:	9201      	str	r2, [sp, #4]
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	61a3      	str	r3, [r4, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	bf14      	ite	ne
 800edd2:	2202      	movne	r2, #2
 800edd4:	2201      	moveq	r2, #1
 800edd6:	6122      	str	r2, [r4, #16]
 800edd8:	b1d5      	cbz	r5, 800ee10 <__d2b+0x98>
 800edda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800edde:	4405      	add	r5, r0
 800ede0:	f8c9 5000 	str.w	r5, [r9]
 800ede4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ede8:	f8c8 0000 	str.w	r0, [r8]
 800edec:	4620      	mov	r0, r4
 800edee:	b003      	add	sp, #12
 800edf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edf8:	e7d5      	b.n	800eda6 <__d2b+0x2e>
 800edfa:	6161      	str	r1, [r4, #20]
 800edfc:	e7e5      	b.n	800edca <__d2b+0x52>
 800edfe:	a801      	add	r0, sp, #4
 800ee00:	f7ff fd64 	bl	800e8cc <__lo0bits>
 800ee04:	9b01      	ldr	r3, [sp, #4]
 800ee06:	6163      	str	r3, [r4, #20]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	6122      	str	r2, [r4, #16]
 800ee0c:	3020      	adds	r0, #32
 800ee0e:	e7e3      	b.n	800edd8 <__d2b+0x60>
 800ee10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee18:	f8c9 0000 	str.w	r0, [r9]
 800ee1c:	6918      	ldr	r0, [r3, #16]
 800ee1e:	f7ff fd35 	bl	800e88c <__hi0bits>
 800ee22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee26:	e7df      	b.n	800ede8 <__d2b+0x70>
 800ee28:	0800fbf3 	.word	0x0800fbf3
 800ee2c:	0800fc04 	.word	0x0800fc04

0800ee30 <_calloc_r>:
 800ee30:	b513      	push	{r0, r1, r4, lr}
 800ee32:	434a      	muls	r2, r1
 800ee34:	4611      	mov	r1, r2
 800ee36:	9201      	str	r2, [sp, #4]
 800ee38:	f000 f85a 	bl	800eef0 <_malloc_r>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	b118      	cbz	r0, 800ee48 <_calloc_r+0x18>
 800ee40:	9a01      	ldr	r2, [sp, #4]
 800ee42:	2100      	movs	r1, #0
 800ee44:	f7fe fa0e 	bl	800d264 <memset>
 800ee48:	4620      	mov	r0, r4
 800ee4a:	b002      	add	sp, #8
 800ee4c:	bd10      	pop	{r4, pc}
	...

0800ee50 <_free_r>:
 800ee50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee52:	2900      	cmp	r1, #0
 800ee54:	d048      	beq.n	800eee8 <_free_r+0x98>
 800ee56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee5a:	9001      	str	r0, [sp, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee62:	bfb8      	it	lt
 800ee64:	18e4      	addlt	r4, r4, r3
 800ee66:	f000 f8ef 	bl	800f048 <__malloc_lock>
 800ee6a:	4a20      	ldr	r2, [pc, #128]	; (800eeec <_free_r+0x9c>)
 800ee6c:	9801      	ldr	r0, [sp, #4]
 800ee6e:	6813      	ldr	r3, [r2, #0]
 800ee70:	4615      	mov	r5, r2
 800ee72:	b933      	cbnz	r3, 800ee82 <_free_r+0x32>
 800ee74:	6063      	str	r3, [r4, #4]
 800ee76:	6014      	str	r4, [r2, #0]
 800ee78:	b003      	add	sp, #12
 800ee7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee7e:	f000 b8e9 	b.w	800f054 <__malloc_unlock>
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	d90b      	bls.n	800ee9e <_free_r+0x4e>
 800ee86:	6821      	ldr	r1, [r4, #0]
 800ee88:	1862      	adds	r2, r4, r1
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	bf04      	itt	eq
 800ee8e:	681a      	ldreq	r2, [r3, #0]
 800ee90:	685b      	ldreq	r3, [r3, #4]
 800ee92:	6063      	str	r3, [r4, #4]
 800ee94:	bf04      	itt	eq
 800ee96:	1852      	addeq	r2, r2, r1
 800ee98:	6022      	streq	r2, [r4, #0]
 800ee9a:	602c      	str	r4, [r5, #0]
 800ee9c:	e7ec      	b.n	800ee78 <_free_r+0x28>
 800ee9e:	461a      	mov	r2, r3
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	b10b      	cbz	r3, 800eea8 <_free_r+0x58>
 800eea4:	42a3      	cmp	r3, r4
 800eea6:	d9fa      	bls.n	800ee9e <_free_r+0x4e>
 800eea8:	6811      	ldr	r1, [r2, #0]
 800eeaa:	1855      	adds	r5, r2, r1
 800eeac:	42a5      	cmp	r5, r4
 800eeae:	d10b      	bne.n	800eec8 <_free_r+0x78>
 800eeb0:	6824      	ldr	r4, [r4, #0]
 800eeb2:	4421      	add	r1, r4
 800eeb4:	1854      	adds	r4, r2, r1
 800eeb6:	42a3      	cmp	r3, r4
 800eeb8:	6011      	str	r1, [r2, #0]
 800eeba:	d1dd      	bne.n	800ee78 <_free_r+0x28>
 800eebc:	681c      	ldr	r4, [r3, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	6053      	str	r3, [r2, #4]
 800eec2:	4421      	add	r1, r4
 800eec4:	6011      	str	r1, [r2, #0]
 800eec6:	e7d7      	b.n	800ee78 <_free_r+0x28>
 800eec8:	d902      	bls.n	800eed0 <_free_r+0x80>
 800eeca:	230c      	movs	r3, #12
 800eecc:	6003      	str	r3, [r0, #0]
 800eece:	e7d3      	b.n	800ee78 <_free_r+0x28>
 800eed0:	6825      	ldr	r5, [r4, #0]
 800eed2:	1961      	adds	r1, r4, r5
 800eed4:	428b      	cmp	r3, r1
 800eed6:	bf04      	itt	eq
 800eed8:	6819      	ldreq	r1, [r3, #0]
 800eeda:	685b      	ldreq	r3, [r3, #4]
 800eedc:	6063      	str	r3, [r4, #4]
 800eede:	bf04      	itt	eq
 800eee0:	1949      	addeq	r1, r1, r5
 800eee2:	6021      	streq	r1, [r4, #0]
 800eee4:	6054      	str	r4, [r2, #4]
 800eee6:	e7c7      	b.n	800ee78 <_free_r+0x28>
 800eee8:	b003      	add	sp, #12
 800eeea:	bd30      	pop	{r4, r5, pc}
 800eeec:	24000224 	.word	0x24000224

0800eef0 <_malloc_r>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	1ccd      	adds	r5, r1, #3
 800eef4:	f025 0503 	bic.w	r5, r5, #3
 800eef8:	3508      	adds	r5, #8
 800eefa:	2d0c      	cmp	r5, #12
 800eefc:	bf38      	it	cc
 800eefe:	250c      	movcc	r5, #12
 800ef00:	2d00      	cmp	r5, #0
 800ef02:	4606      	mov	r6, r0
 800ef04:	db01      	blt.n	800ef0a <_malloc_r+0x1a>
 800ef06:	42a9      	cmp	r1, r5
 800ef08:	d903      	bls.n	800ef12 <_malloc_r+0x22>
 800ef0a:	230c      	movs	r3, #12
 800ef0c:	6033      	str	r3, [r6, #0]
 800ef0e:	2000      	movs	r0, #0
 800ef10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef12:	f000 f899 	bl	800f048 <__malloc_lock>
 800ef16:	4921      	ldr	r1, [pc, #132]	; (800ef9c <_malloc_r+0xac>)
 800ef18:	680a      	ldr	r2, [r1, #0]
 800ef1a:	4614      	mov	r4, r2
 800ef1c:	b99c      	cbnz	r4, 800ef46 <_malloc_r+0x56>
 800ef1e:	4f20      	ldr	r7, [pc, #128]	; (800efa0 <_malloc_r+0xb0>)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	b923      	cbnz	r3, 800ef2e <_malloc_r+0x3e>
 800ef24:	4621      	mov	r1, r4
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 f83c 	bl	800efa4 <_sbrk_r>
 800ef2c:	6038      	str	r0, [r7, #0]
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4630      	mov	r0, r6
 800ef32:	f000 f837 	bl	800efa4 <_sbrk_r>
 800ef36:	1c43      	adds	r3, r0, #1
 800ef38:	d123      	bne.n	800ef82 <_malloc_r+0x92>
 800ef3a:	230c      	movs	r3, #12
 800ef3c:	6033      	str	r3, [r6, #0]
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f000 f888 	bl	800f054 <__malloc_unlock>
 800ef44:	e7e3      	b.n	800ef0e <_malloc_r+0x1e>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	1b5b      	subs	r3, r3, r5
 800ef4a:	d417      	bmi.n	800ef7c <_malloc_r+0x8c>
 800ef4c:	2b0b      	cmp	r3, #11
 800ef4e:	d903      	bls.n	800ef58 <_malloc_r+0x68>
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	441c      	add	r4, r3
 800ef54:	6025      	str	r5, [r4, #0]
 800ef56:	e004      	b.n	800ef62 <_malloc_r+0x72>
 800ef58:	6863      	ldr	r3, [r4, #4]
 800ef5a:	42a2      	cmp	r2, r4
 800ef5c:	bf0c      	ite	eq
 800ef5e:	600b      	streq	r3, [r1, #0]
 800ef60:	6053      	strne	r3, [r2, #4]
 800ef62:	4630      	mov	r0, r6
 800ef64:	f000 f876 	bl	800f054 <__malloc_unlock>
 800ef68:	f104 000b 	add.w	r0, r4, #11
 800ef6c:	1d23      	adds	r3, r4, #4
 800ef6e:	f020 0007 	bic.w	r0, r0, #7
 800ef72:	1ac2      	subs	r2, r0, r3
 800ef74:	d0cc      	beq.n	800ef10 <_malloc_r+0x20>
 800ef76:	1a1b      	subs	r3, r3, r0
 800ef78:	50a3      	str	r3, [r4, r2]
 800ef7a:	e7c9      	b.n	800ef10 <_malloc_r+0x20>
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	6864      	ldr	r4, [r4, #4]
 800ef80:	e7cc      	b.n	800ef1c <_malloc_r+0x2c>
 800ef82:	1cc4      	adds	r4, r0, #3
 800ef84:	f024 0403 	bic.w	r4, r4, #3
 800ef88:	42a0      	cmp	r0, r4
 800ef8a:	d0e3      	beq.n	800ef54 <_malloc_r+0x64>
 800ef8c:	1a21      	subs	r1, r4, r0
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f000 f808 	bl	800efa4 <_sbrk_r>
 800ef94:	3001      	adds	r0, #1
 800ef96:	d1dd      	bne.n	800ef54 <_malloc_r+0x64>
 800ef98:	e7cf      	b.n	800ef3a <_malloc_r+0x4a>
 800ef9a:	bf00      	nop
 800ef9c:	24000224 	.word	0x24000224
 800efa0:	24000228 	.word	0x24000228

0800efa4 <_sbrk_r>:
 800efa4:	b538      	push	{r3, r4, r5, lr}
 800efa6:	4d06      	ldr	r5, [pc, #24]	; (800efc0 <_sbrk_r+0x1c>)
 800efa8:	2300      	movs	r3, #0
 800efaa:	4604      	mov	r4, r0
 800efac:	4608      	mov	r0, r1
 800efae:	602b      	str	r3, [r5, #0]
 800efb0:	f7f3 f80e 	bl	8001fd0 <_sbrk>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d102      	bne.n	800efbe <_sbrk_r+0x1a>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	b103      	cbz	r3, 800efbe <_sbrk_r+0x1a>
 800efbc:	6023      	str	r3, [r4, #0]
 800efbe:	bd38      	pop	{r3, r4, r5, pc}
 800efc0:	24000c38 	.word	0x24000c38

0800efc4 <__assert_func>:
 800efc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efc6:	4614      	mov	r4, r2
 800efc8:	461a      	mov	r2, r3
 800efca:	4b09      	ldr	r3, [pc, #36]	; (800eff0 <__assert_func+0x2c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4605      	mov	r5, r0
 800efd0:	68d8      	ldr	r0, [r3, #12]
 800efd2:	b14c      	cbz	r4, 800efe8 <__assert_func+0x24>
 800efd4:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <__assert_func+0x30>)
 800efd6:	9100      	str	r1, [sp, #0]
 800efd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800efdc:	4906      	ldr	r1, [pc, #24]	; (800eff8 <__assert_func+0x34>)
 800efde:	462b      	mov	r3, r5
 800efe0:	f000 f80e 	bl	800f000 <fiprintf>
 800efe4:	f000 fa64 	bl	800f4b0 <abort>
 800efe8:	4b04      	ldr	r3, [pc, #16]	; (800effc <__assert_func+0x38>)
 800efea:	461c      	mov	r4, r3
 800efec:	e7f3      	b.n	800efd6 <__assert_func+0x12>
 800efee:	bf00      	nop
 800eff0:	2400001c 	.word	0x2400001c
 800eff4:	0800fd64 	.word	0x0800fd64
 800eff8:	0800fd71 	.word	0x0800fd71
 800effc:	0800fd9f 	.word	0x0800fd9f

0800f000 <fiprintf>:
 800f000:	b40e      	push	{r1, r2, r3}
 800f002:	b503      	push	{r0, r1, lr}
 800f004:	4601      	mov	r1, r0
 800f006:	ab03      	add	r3, sp, #12
 800f008:	4805      	ldr	r0, [pc, #20]	; (800f020 <fiprintf+0x20>)
 800f00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00e:	6800      	ldr	r0, [r0, #0]
 800f010:	9301      	str	r3, [sp, #4]
 800f012:	f000 f84f 	bl	800f0b4 <_vfiprintf_r>
 800f016:	b002      	add	sp, #8
 800f018:	f85d eb04 	ldr.w	lr, [sp], #4
 800f01c:	b003      	add	sp, #12
 800f01e:	4770      	bx	lr
 800f020:	2400001c 	.word	0x2400001c

0800f024 <__ascii_mbtowc>:
 800f024:	b082      	sub	sp, #8
 800f026:	b901      	cbnz	r1, 800f02a <__ascii_mbtowc+0x6>
 800f028:	a901      	add	r1, sp, #4
 800f02a:	b142      	cbz	r2, 800f03e <__ascii_mbtowc+0x1a>
 800f02c:	b14b      	cbz	r3, 800f042 <__ascii_mbtowc+0x1e>
 800f02e:	7813      	ldrb	r3, [r2, #0]
 800f030:	600b      	str	r3, [r1, #0]
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	1e10      	subs	r0, r2, #0
 800f036:	bf18      	it	ne
 800f038:	2001      	movne	r0, #1
 800f03a:	b002      	add	sp, #8
 800f03c:	4770      	bx	lr
 800f03e:	4610      	mov	r0, r2
 800f040:	e7fb      	b.n	800f03a <__ascii_mbtowc+0x16>
 800f042:	f06f 0001 	mvn.w	r0, #1
 800f046:	e7f8      	b.n	800f03a <__ascii_mbtowc+0x16>

0800f048 <__malloc_lock>:
 800f048:	4801      	ldr	r0, [pc, #4]	; (800f050 <__malloc_lock+0x8>)
 800f04a:	f000 bbf1 	b.w	800f830 <__retarget_lock_acquire_recursive>
 800f04e:	bf00      	nop
 800f050:	24000c40 	.word	0x24000c40

0800f054 <__malloc_unlock>:
 800f054:	4801      	ldr	r0, [pc, #4]	; (800f05c <__malloc_unlock+0x8>)
 800f056:	f000 bbec 	b.w	800f832 <__retarget_lock_release_recursive>
 800f05a:	bf00      	nop
 800f05c:	24000c40 	.word	0x24000c40

0800f060 <__sfputc_r>:
 800f060:	6893      	ldr	r3, [r2, #8]
 800f062:	3b01      	subs	r3, #1
 800f064:	2b00      	cmp	r3, #0
 800f066:	b410      	push	{r4}
 800f068:	6093      	str	r3, [r2, #8]
 800f06a:	da08      	bge.n	800f07e <__sfputc_r+0x1e>
 800f06c:	6994      	ldr	r4, [r2, #24]
 800f06e:	42a3      	cmp	r3, r4
 800f070:	db01      	blt.n	800f076 <__sfputc_r+0x16>
 800f072:	290a      	cmp	r1, #10
 800f074:	d103      	bne.n	800f07e <__sfputc_r+0x1e>
 800f076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f07a:	f000 b94b 	b.w	800f314 <__swbuf_r>
 800f07e:	6813      	ldr	r3, [r2, #0]
 800f080:	1c58      	adds	r0, r3, #1
 800f082:	6010      	str	r0, [r2, #0]
 800f084:	7019      	strb	r1, [r3, #0]
 800f086:	4608      	mov	r0, r1
 800f088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <__sfputs_r>:
 800f08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f090:	4606      	mov	r6, r0
 800f092:	460f      	mov	r7, r1
 800f094:	4614      	mov	r4, r2
 800f096:	18d5      	adds	r5, r2, r3
 800f098:	42ac      	cmp	r4, r5
 800f09a:	d101      	bne.n	800f0a0 <__sfputs_r+0x12>
 800f09c:	2000      	movs	r0, #0
 800f09e:	e007      	b.n	800f0b0 <__sfputs_r+0x22>
 800f0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a4:	463a      	mov	r2, r7
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f7ff ffda 	bl	800f060 <__sfputc_r>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d1f3      	bne.n	800f098 <__sfputs_r+0xa>
 800f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0b4 <_vfiprintf_r>:
 800f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	b09d      	sub	sp, #116	; 0x74
 800f0bc:	4614      	mov	r4, r2
 800f0be:	4698      	mov	r8, r3
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	b118      	cbz	r0, 800f0cc <_vfiprintf_r+0x18>
 800f0c4:	6983      	ldr	r3, [r0, #24]
 800f0c6:	b90b      	cbnz	r3, 800f0cc <_vfiprintf_r+0x18>
 800f0c8:	f000 fb14 	bl	800f6f4 <__sinit>
 800f0cc:	4b89      	ldr	r3, [pc, #548]	; (800f2f4 <_vfiprintf_r+0x240>)
 800f0ce:	429d      	cmp	r5, r3
 800f0d0:	d11b      	bne.n	800f10a <_vfiprintf_r+0x56>
 800f0d2:	6875      	ldr	r5, [r6, #4]
 800f0d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0d6:	07d9      	lsls	r1, r3, #31
 800f0d8:	d405      	bmi.n	800f0e6 <_vfiprintf_r+0x32>
 800f0da:	89ab      	ldrh	r3, [r5, #12]
 800f0dc:	059a      	lsls	r2, r3, #22
 800f0de:	d402      	bmi.n	800f0e6 <_vfiprintf_r+0x32>
 800f0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0e2:	f000 fba5 	bl	800f830 <__retarget_lock_acquire_recursive>
 800f0e6:	89ab      	ldrh	r3, [r5, #12]
 800f0e8:	071b      	lsls	r3, r3, #28
 800f0ea:	d501      	bpl.n	800f0f0 <_vfiprintf_r+0x3c>
 800f0ec:	692b      	ldr	r3, [r5, #16]
 800f0ee:	b9eb      	cbnz	r3, 800f12c <_vfiprintf_r+0x78>
 800f0f0:	4629      	mov	r1, r5
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f000 f96e 	bl	800f3d4 <__swsetup_r>
 800f0f8:	b1c0      	cbz	r0, 800f12c <_vfiprintf_r+0x78>
 800f0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0fc:	07dc      	lsls	r4, r3, #31
 800f0fe:	d50e      	bpl.n	800f11e <_vfiprintf_r+0x6a>
 800f100:	f04f 30ff 	mov.w	r0, #4294967295
 800f104:	b01d      	add	sp, #116	; 0x74
 800f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10a:	4b7b      	ldr	r3, [pc, #492]	; (800f2f8 <_vfiprintf_r+0x244>)
 800f10c:	429d      	cmp	r5, r3
 800f10e:	d101      	bne.n	800f114 <_vfiprintf_r+0x60>
 800f110:	68b5      	ldr	r5, [r6, #8]
 800f112:	e7df      	b.n	800f0d4 <_vfiprintf_r+0x20>
 800f114:	4b79      	ldr	r3, [pc, #484]	; (800f2fc <_vfiprintf_r+0x248>)
 800f116:	429d      	cmp	r5, r3
 800f118:	bf08      	it	eq
 800f11a:	68f5      	ldreq	r5, [r6, #12]
 800f11c:	e7da      	b.n	800f0d4 <_vfiprintf_r+0x20>
 800f11e:	89ab      	ldrh	r3, [r5, #12]
 800f120:	0598      	lsls	r0, r3, #22
 800f122:	d4ed      	bmi.n	800f100 <_vfiprintf_r+0x4c>
 800f124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f126:	f000 fb84 	bl	800f832 <__retarget_lock_release_recursive>
 800f12a:	e7e9      	b.n	800f100 <_vfiprintf_r+0x4c>
 800f12c:	2300      	movs	r3, #0
 800f12e:	9309      	str	r3, [sp, #36]	; 0x24
 800f130:	2320      	movs	r3, #32
 800f132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f136:	f8cd 800c 	str.w	r8, [sp, #12]
 800f13a:	2330      	movs	r3, #48	; 0x30
 800f13c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f300 <_vfiprintf_r+0x24c>
 800f140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f144:	f04f 0901 	mov.w	r9, #1
 800f148:	4623      	mov	r3, r4
 800f14a:	469a      	mov	sl, r3
 800f14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f150:	b10a      	cbz	r2, 800f156 <_vfiprintf_r+0xa2>
 800f152:	2a25      	cmp	r2, #37	; 0x25
 800f154:	d1f9      	bne.n	800f14a <_vfiprintf_r+0x96>
 800f156:	ebba 0b04 	subs.w	fp, sl, r4
 800f15a:	d00b      	beq.n	800f174 <_vfiprintf_r+0xc0>
 800f15c:	465b      	mov	r3, fp
 800f15e:	4622      	mov	r2, r4
 800f160:	4629      	mov	r1, r5
 800f162:	4630      	mov	r0, r6
 800f164:	f7ff ff93 	bl	800f08e <__sfputs_r>
 800f168:	3001      	adds	r0, #1
 800f16a:	f000 80aa 	beq.w	800f2c2 <_vfiprintf_r+0x20e>
 800f16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f170:	445a      	add	r2, fp
 800f172:	9209      	str	r2, [sp, #36]	; 0x24
 800f174:	f89a 3000 	ldrb.w	r3, [sl]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 80a2 	beq.w	800f2c2 <_vfiprintf_r+0x20e>
 800f17e:	2300      	movs	r3, #0
 800f180:	f04f 32ff 	mov.w	r2, #4294967295
 800f184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f188:	f10a 0a01 	add.w	sl, sl, #1
 800f18c:	9304      	str	r3, [sp, #16]
 800f18e:	9307      	str	r3, [sp, #28]
 800f190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f194:	931a      	str	r3, [sp, #104]	; 0x68
 800f196:	4654      	mov	r4, sl
 800f198:	2205      	movs	r2, #5
 800f19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f19e:	4858      	ldr	r0, [pc, #352]	; (800f300 <_vfiprintf_r+0x24c>)
 800f1a0:	f7f1 f8be 	bl	8000320 <memchr>
 800f1a4:	9a04      	ldr	r2, [sp, #16]
 800f1a6:	b9d8      	cbnz	r0, 800f1e0 <_vfiprintf_r+0x12c>
 800f1a8:	06d1      	lsls	r1, r2, #27
 800f1aa:	bf44      	itt	mi
 800f1ac:	2320      	movmi	r3, #32
 800f1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1b2:	0713      	lsls	r3, r2, #28
 800f1b4:	bf44      	itt	mi
 800f1b6:	232b      	movmi	r3, #43	; 0x2b
 800f1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c2:	d015      	beq.n	800f1f0 <_vfiprintf_r+0x13c>
 800f1c4:	9a07      	ldr	r2, [sp, #28]
 800f1c6:	4654      	mov	r4, sl
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f04f 0c0a 	mov.w	ip, #10
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1d4:	3b30      	subs	r3, #48	; 0x30
 800f1d6:	2b09      	cmp	r3, #9
 800f1d8:	d94e      	bls.n	800f278 <_vfiprintf_r+0x1c4>
 800f1da:	b1b0      	cbz	r0, 800f20a <_vfiprintf_r+0x156>
 800f1dc:	9207      	str	r2, [sp, #28]
 800f1de:	e014      	b.n	800f20a <_vfiprintf_r+0x156>
 800f1e0:	eba0 0308 	sub.w	r3, r0, r8
 800f1e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	46a2      	mov	sl, r4
 800f1ee:	e7d2      	b.n	800f196 <_vfiprintf_r+0xe2>
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	1d19      	adds	r1, r3, #4
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	9103      	str	r1, [sp, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	bfbb      	ittet	lt
 800f1fc:	425b      	neglt	r3, r3
 800f1fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f202:	9307      	strge	r3, [sp, #28]
 800f204:	9307      	strlt	r3, [sp, #28]
 800f206:	bfb8      	it	lt
 800f208:	9204      	strlt	r2, [sp, #16]
 800f20a:	7823      	ldrb	r3, [r4, #0]
 800f20c:	2b2e      	cmp	r3, #46	; 0x2e
 800f20e:	d10c      	bne.n	800f22a <_vfiprintf_r+0x176>
 800f210:	7863      	ldrb	r3, [r4, #1]
 800f212:	2b2a      	cmp	r3, #42	; 0x2a
 800f214:	d135      	bne.n	800f282 <_vfiprintf_r+0x1ce>
 800f216:	9b03      	ldr	r3, [sp, #12]
 800f218:	1d1a      	adds	r2, r3, #4
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	9203      	str	r2, [sp, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	bfb8      	it	lt
 800f222:	f04f 33ff 	movlt.w	r3, #4294967295
 800f226:	3402      	adds	r4, #2
 800f228:	9305      	str	r3, [sp, #20]
 800f22a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f310 <_vfiprintf_r+0x25c>
 800f22e:	7821      	ldrb	r1, [r4, #0]
 800f230:	2203      	movs	r2, #3
 800f232:	4650      	mov	r0, sl
 800f234:	f7f1 f874 	bl	8000320 <memchr>
 800f238:	b140      	cbz	r0, 800f24c <_vfiprintf_r+0x198>
 800f23a:	2340      	movs	r3, #64	; 0x40
 800f23c:	eba0 000a 	sub.w	r0, r0, sl
 800f240:	fa03 f000 	lsl.w	r0, r3, r0
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	4303      	orrs	r3, r0
 800f248:	3401      	adds	r4, #1
 800f24a:	9304      	str	r3, [sp, #16]
 800f24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f250:	482c      	ldr	r0, [pc, #176]	; (800f304 <_vfiprintf_r+0x250>)
 800f252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f256:	2206      	movs	r2, #6
 800f258:	f7f1 f862 	bl	8000320 <memchr>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d03f      	beq.n	800f2e0 <_vfiprintf_r+0x22c>
 800f260:	4b29      	ldr	r3, [pc, #164]	; (800f308 <_vfiprintf_r+0x254>)
 800f262:	bb1b      	cbnz	r3, 800f2ac <_vfiprintf_r+0x1f8>
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	3307      	adds	r3, #7
 800f268:	f023 0307 	bic.w	r3, r3, #7
 800f26c:	3308      	adds	r3, #8
 800f26e:	9303      	str	r3, [sp, #12]
 800f270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f272:	443b      	add	r3, r7
 800f274:	9309      	str	r3, [sp, #36]	; 0x24
 800f276:	e767      	b.n	800f148 <_vfiprintf_r+0x94>
 800f278:	fb0c 3202 	mla	r2, ip, r2, r3
 800f27c:	460c      	mov	r4, r1
 800f27e:	2001      	movs	r0, #1
 800f280:	e7a5      	b.n	800f1ce <_vfiprintf_r+0x11a>
 800f282:	2300      	movs	r3, #0
 800f284:	3401      	adds	r4, #1
 800f286:	9305      	str	r3, [sp, #20]
 800f288:	4619      	mov	r1, r3
 800f28a:	f04f 0c0a 	mov.w	ip, #10
 800f28e:	4620      	mov	r0, r4
 800f290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f294:	3a30      	subs	r2, #48	; 0x30
 800f296:	2a09      	cmp	r2, #9
 800f298:	d903      	bls.n	800f2a2 <_vfiprintf_r+0x1ee>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0c5      	beq.n	800f22a <_vfiprintf_r+0x176>
 800f29e:	9105      	str	r1, [sp, #20]
 800f2a0:	e7c3      	b.n	800f22a <_vfiprintf_r+0x176>
 800f2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e7f0      	b.n	800f28e <_vfiprintf_r+0x1da>
 800f2ac:	ab03      	add	r3, sp, #12
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	462a      	mov	r2, r5
 800f2b2:	4b16      	ldr	r3, [pc, #88]	; (800f30c <_vfiprintf_r+0x258>)
 800f2b4:	a904      	add	r1, sp, #16
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7fe f86e 	bl	800d398 <_printf_float>
 800f2bc:	4607      	mov	r7, r0
 800f2be:	1c78      	adds	r0, r7, #1
 800f2c0:	d1d6      	bne.n	800f270 <_vfiprintf_r+0x1bc>
 800f2c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2c4:	07d9      	lsls	r1, r3, #31
 800f2c6:	d405      	bmi.n	800f2d4 <_vfiprintf_r+0x220>
 800f2c8:	89ab      	ldrh	r3, [r5, #12]
 800f2ca:	059a      	lsls	r2, r3, #22
 800f2cc:	d402      	bmi.n	800f2d4 <_vfiprintf_r+0x220>
 800f2ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2d0:	f000 faaf 	bl	800f832 <__retarget_lock_release_recursive>
 800f2d4:	89ab      	ldrh	r3, [r5, #12]
 800f2d6:	065b      	lsls	r3, r3, #25
 800f2d8:	f53f af12 	bmi.w	800f100 <_vfiprintf_r+0x4c>
 800f2dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2de:	e711      	b.n	800f104 <_vfiprintf_r+0x50>
 800f2e0:	ab03      	add	r3, sp, #12
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <_vfiprintf_r+0x258>)
 800f2e8:	a904      	add	r1, sp, #16
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7fe fae0 	bl	800d8b0 <_printf_i>
 800f2f0:	e7e4      	b.n	800f2bc <_vfiprintf_r+0x208>
 800f2f2:	bf00      	nop
 800f2f4:	0800fedc 	.word	0x0800fedc
 800f2f8:	0800fefc 	.word	0x0800fefc
 800f2fc:	0800febc 	.word	0x0800febc
 800f300:	0800fdaa 	.word	0x0800fdaa
 800f304:	0800fdb4 	.word	0x0800fdb4
 800f308:	0800d399 	.word	0x0800d399
 800f30c:	0800f08f 	.word	0x0800f08f
 800f310:	0800fdb0 	.word	0x0800fdb0

0800f314 <__swbuf_r>:
 800f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f316:	460e      	mov	r6, r1
 800f318:	4614      	mov	r4, r2
 800f31a:	4605      	mov	r5, r0
 800f31c:	b118      	cbz	r0, 800f326 <__swbuf_r+0x12>
 800f31e:	6983      	ldr	r3, [r0, #24]
 800f320:	b90b      	cbnz	r3, 800f326 <__swbuf_r+0x12>
 800f322:	f000 f9e7 	bl	800f6f4 <__sinit>
 800f326:	4b21      	ldr	r3, [pc, #132]	; (800f3ac <__swbuf_r+0x98>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	d12b      	bne.n	800f384 <__swbuf_r+0x70>
 800f32c:	686c      	ldr	r4, [r5, #4]
 800f32e:	69a3      	ldr	r3, [r4, #24]
 800f330:	60a3      	str	r3, [r4, #8]
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	071a      	lsls	r2, r3, #28
 800f336:	d52f      	bpl.n	800f398 <__swbuf_r+0x84>
 800f338:	6923      	ldr	r3, [r4, #16]
 800f33a:	b36b      	cbz	r3, 800f398 <__swbuf_r+0x84>
 800f33c:	6923      	ldr	r3, [r4, #16]
 800f33e:	6820      	ldr	r0, [r4, #0]
 800f340:	1ac0      	subs	r0, r0, r3
 800f342:	6963      	ldr	r3, [r4, #20]
 800f344:	b2f6      	uxtb	r6, r6
 800f346:	4283      	cmp	r3, r0
 800f348:	4637      	mov	r7, r6
 800f34a:	dc04      	bgt.n	800f356 <__swbuf_r+0x42>
 800f34c:	4621      	mov	r1, r4
 800f34e:	4628      	mov	r0, r5
 800f350:	f000 f93c 	bl	800f5cc <_fflush_r>
 800f354:	bb30      	cbnz	r0, 800f3a4 <__swbuf_r+0x90>
 800f356:	68a3      	ldr	r3, [r4, #8]
 800f358:	3b01      	subs	r3, #1
 800f35a:	60a3      	str	r3, [r4, #8]
 800f35c:	6823      	ldr	r3, [r4, #0]
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	6022      	str	r2, [r4, #0]
 800f362:	701e      	strb	r6, [r3, #0]
 800f364:	6963      	ldr	r3, [r4, #20]
 800f366:	3001      	adds	r0, #1
 800f368:	4283      	cmp	r3, r0
 800f36a:	d004      	beq.n	800f376 <__swbuf_r+0x62>
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	07db      	lsls	r3, r3, #31
 800f370:	d506      	bpl.n	800f380 <__swbuf_r+0x6c>
 800f372:	2e0a      	cmp	r6, #10
 800f374:	d104      	bne.n	800f380 <__swbuf_r+0x6c>
 800f376:	4621      	mov	r1, r4
 800f378:	4628      	mov	r0, r5
 800f37a:	f000 f927 	bl	800f5cc <_fflush_r>
 800f37e:	b988      	cbnz	r0, 800f3a4 <__swbuf_r+0x90>
 800f380:	4638      	mov	r0, r7
 800f382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f384:	4b0a      	ldr	r3, [pc, #40]	; (800f3b0 <__swbuf_r+0x9c>)
 800f386:	429c      	cmp	r4, r3
 800f388:	d101      	bne.n	800f38e <__swbuf_r+0x7a>
 800f38a:	68ac      	ldr	r4, [r5, #8]
 800f38c:	e7cf      	b.n	800f32e <__swbuf_r+0x1a>
 800f38e:	4b09      	ldr	r3, [pc, #36]	; (800f3b4 <__swbuf_r+0xa0>)
 800f390:	429c      	cmp	r4, r3
 800f392:	bf08      	it	eq
 800f394:	68ec      	ldreq	r4, [r5, #12]
 800f396:	e7ca      	b.n	800f32e <__swbuf_r+0x1a>
 800f398:	4621      	mov	r1, r4
 800f39a:	4628      	mov	r0, r5
 800f39c:	f000 f81a 	bl	800f3d4 <__swsetup_r>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d0cb      	beq.n	800f33c <__swbuf_r+0x28>
 800f3a4:	f04f 37ff 	mov.w	r7, #4294967295
 800f3a8:	e7ea      	b.n	800f380 <__swbuf_r+0x6c>
 800f3aa:	bf00      	nop
 800f3ac:	0800fedc 	.word	0x0800fedc
 800f3b0:	0800fefc 	.word	0x0800fefc
 800f3b4:	0800febc 	.word	0x0800febc

0800f3b8 <__ascii_wctomb>:
 800f3b8:	b149      	cbz	r1, 800f3ce <__ascii_wctomb+0x16>
 800f3ba:	2aff      	cmp	r2, #255	; 0xff
 800f3bc:	bf85      	ittet	hi
 800f3be:	238a      	movhi	r3, #138	; 0x8a
 800f3c0:	6003      	strhi	r3, [r0, #0]
 800f3c2:	700a      	strbls	r2, [r1, #0]
 800f3c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f3c8:	bf98      	it	ls
 800f3ca:	2001      	movls	r0, #1
 800f3cc:	4770      	bx	lr
 800f3ce:	4608      	mov	r0, r1
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <__swsetup_r>:
 800f3d4:	4b32      	ldr	r3, [pc, #200]	; (800f4a0 <__swsetup_r+0xcc>)
 800f3d6:	b570      	push	{r4, r5, r6, lr}
 800f3d8:	681d      	ldr	r5, [r3, #0]
 800f3da:	4606      	mov	r6, r0
 800f3dc:	460c      	mov	r4, r1
 800f3de:	b125      	cbz	r5, 800f3ea <__swsetup_r+0x16>
 800f3e0:	69ab      	ldr	r3, [r5, #24]
 800f3e2:	b913      	cbnz	r3, 800f3ea <__swsetup_r+0x16>
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f000 f985 	bl	800f6f4 <__sinit>
 800f3ea:	4b2e      	ldr	r3, [pc, #184]	; (800f4a4 <__swsetup_r+0xd0>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	d10f      	bne.n	800f410 <__swsetup_r+0x3c>
 800f3f0:	686c      	ldr	r4, [r5, #4]
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3f8:	0719      	lsls	r1, r3, #28
 800f3fa:	d42c      	bmi.n	800f456 <__swsetup_r+0x82>
 800f3fc:	06dd      	lsls	r5, r3, #27
 800f3fe:	d411      	bmi.n	800f424 <__swsetup_r+0x50>
 800f400:	2309      	movs	r3, #9
 800f402:	6033      	str	r3, [r6, #0]
 800f404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f408:	81a3      	strh	r3, [r4, #12]
 800f40a:	f04f 30ff 	mov.w	r0, #4294967295
 800f40e:	e03e      	b.n	800f48e <__swsetup_r+0xba>
 800f410:	4b25      	ldr	r3, [pc, #148]	; (800f4a8 <__swsetup_r+0xd4>)
 800f412:	429c      	cmp	r4, r3
 800f414:	d101      	bne.n	800f41a <__swsetup_r+0x46>
 800f416:	68ac      	ldr	r4, [r5, #8]
 800f418:	e7eb      	b.n	800f3f2 <__swsetup_r+0x1e>
 800f41a:	4b24      	ldr	r3, [pc, #144]	; (800f4ac <__swsetup_r+0xd8>)
 800f41c:	429c      	cmp	r4, r3
 800f41e:	bf08      	it	eq
 800f420:	68ec      	ldreq	r4, [r5, #12]
 800f422:	e7e6      	b.n	800f3f2 <__swsetup_r+0x1e>
 800f424:	0758      	lsls	r0, r3, #29
 800f426:	d512      	bpl.n	800f44e <__swsetup_r+0x7a>
 800f428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f42a:	b141      	cbz	r1, 800f43e <__swsetup_r+0x6a>
 800f42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f430:	4299      	cmp	r1, r3
 800f432:	d002      	beq.n	800f43a <__swsetup_r+0x66>
 800f434:	4630      	mov	r0, r6
 800f436:	f7ff fd0b 	bl	800ee50 <_free_r>
 800f43a:	2300      	movs	r3, #0
 800f43c:	6363      	str	r3, [r4, #52]	; 0x34
 800f43e:	89a3      	ldrh	r3, [r4, #12]
 800f440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f444:	81a3      	strh	r3, [r4, #12]
 800f446:	2300      	movs	r3, #0
 800f448:	6063      	str	r3, [r4, #4]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	f043 0308 	orr.w	r3, r3, #8
 800f454:	81a3      	strh	r3, [r4, #12]
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	b94b      	cbnz	r3, 800f46e <__swsetup_r+0x9a>
 800f45a:	89a3      	ldrh	r3, [r4, #12]
 800f45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f464:	d003      	beq.n	800f46e <__swsetup_r+0x9a>
 800f466:	4621      	mov	r1, r4
 800f468:	4630      	mov	r0, r6
 800f46a:	f000 fa07 	bl	800f87c <__smakebuf_r>
 800f46e:	89a0      	ldrh	r0, [r4, #12]
 800f470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f474:	f010 0301 	ands.w	r3, r0, #1
 800f478:	d00a      	beq.n	800f490 <__swsetup_r+0xbc>
 800f47a:	2300      	movs	r3, #0
 800f47c:	60a3      	str	r3, [r4, #8]
 800f47e:	6963      	ldr	r3, [r4, #20]
 800f480:	425b      	negs	r3, r3
 800f482:	61a3      	str	r3, [r4, #24]
 800f484:	6923      	ldr	r3, [r4, #16]
 800f486:	b943      	cbnz	r3, 800f49a <__swsetup_r+0xc6>
 800f488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f48c:	d1ba      	bne.n	800f404 <__swsetup_r+0x30>
 800f48e:	bd70      	pop	{r4, r5, r6, pc}
 800f490:	0781      	lsls	r1, r0, #30
 800f492:	bf58      	it	pl
 800f494:	6963      	ldrpl	r3, [r4, #20]
 800f496:	60a3      	str	r3, [r4, #8]
 800f498:	e7f4      	b.n	800f484 <__swsetup_r+0xb0>
 800f49a:	2000      	movs	r0, #0
 800f49c:	e7f7      	b.n	800f48e <__swsetup_r+0xba>
 800f49e:	bf00      	nop
 800f4a0:	2400001c 	.word	0x2400001c
 800f4a4:	0800fedc 	.word	0x0800fedc
 800f4a8:	0800fefc 	.word	0x0800fefc
 800f4ac:	0800febc 	.word	0x0800febc

0800f4b0 <abort>:
 800f4b0:	b508      	push	{r3, lr}
 800f4b2:	2006      	movs	r0, #6
 800f4b4:	f000 fa4a 	bl	800f94c <raise>
 800f4b8:	2001      	movs	r0, #1
 800f4ba:	f7f2 fd11 	bl	8001ee0 <_exit>
	...

0800f4c0 <__sflush_r>:
 800f4c0:	898a      	ldrh	r2, [r1, #12]
 800f4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	0710      	lsls	r0, r2, #28
 800f4ca:	460c      	mov	r4, r1
 800f4cc:	d458      	bmi.n	800f580 <__sflush_r+0xc0>
 800f4ce:	684b      	ldr	r3, [r1, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dc05      	bgt.n	800f4e0 <__sflush_r+0x20>
 800f4d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	dc02      	bgt.n	800f4e0 <__sflush_r+0x20>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4e2:	2e00      	cmp	r6, #0
 800f4e4:	d0f9      	beq.n	800f4da <__sflush_r+0x1a>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4ec:	682f      	ldr	r7, [r5, #0]
 800f4ee:	602b      	str	r3, [r5, #0]
 800f4f0:	d032      	beq.n	800f558 <__sflush_r+0x98>
 800f4f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4f4:	89a3      	ldrh	r3, [r4, #12]
 800f4f6:	075a      	lsls	r2, r3, #29
 800f4f8:	d505      	bpl.n	800f506 <__sflush_r+0x46>
 800f4fa:	6863      	ldr	r3, [r4, #4]
 800f4fc:	1ac0      	subs	r0, r0, r3
 800f4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f500:	b10b      	cbz	r3, 800f506 <__sflush_r+0x46>
 800f502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f504:	1ac0      	subs	r0, r0, r3
 800f506:	2300      	movs	r3, #0
 800f508:	4602      	mov	r2, r0
 800f50a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f50c:	6a21      	ldr	r1, [r4, #32]
 800f50e:	4628      	mov	r0, r5
 800f510:	47b0      	blx	r6
 800f512:	1c43      	adds	r3, r0, #1
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	d106      	bne.n	800f526 <__sflush_r+0x66>
 800f518:	6829      	ldr	r1, [r5, #0]
 800f51a:	291d      	cmp	r1, #29
 800f51c:	d82c      	bhi.n	800f578 <__sflush_r+0xb8>
 800f51e:	4a2a      	ldr	r2, [pc, #168]	; (800f5c8 <__sflush_r+0x108>)
 800f520:	40ca      	lsrs	r2, r1
 800f522:	07d6      	lsls	r6, r2, #31
 800f524:	d528      	bpl.n	800f578 <__sflush_r+0xb8>
 800f526:	2200      	movs	r2, #0
 800f528:	6062      	str	r2, [r4, #4]
 800f52a:	04d9      	lsls	r1, r3, #19
 800f52c:	6922      	ldr	r2, [r4, #16]
 800f52e:	6022      	str	r2, [r4, #0]
 800f530:	d504      	bpl.n	800f53c <__sflush_r+0x7c>
 800f532:	1c42      	adds	r2, r0, #1
 800f534:	d101      	bne.n	800f53a <__sflush_r+0x7a>
 800f536:	682b      	ldr	r3, [r5, #0]
 800f538:	b903      	cbnz	r3, 800f53c <__sflush_r+0x7c>
 800f53a:	6560      	str	r0, [r4, #84]	; 0x54
 800f53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f53e:	602f      	str	r7, [r5, #0]
 800f540:	2900      	cmp	r1, #0
 800f542:	d0ca      	beq.n	800f4da <__sflush_r+0x1a>
 800f544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f548:	4299      	cmp	r1, r3
 800f54a:	d002      	beq.n	800f552 <__sflush_r+0x92>
 800f54c:	4628      	mov	r0, r5
 800f54e:	f7ff fc7f 	bl	800ee50 <_free_r>
 800f552:	2000      	movs	r0, #0
 800f554:	6360      	str	r0, [r4, #52]	; 0x34
 800f556:	e7c1      	b.n	800f4dc <__sflush_r+0x1c>
 800f558:	6a21      	ldr	r1, [r4, #32]
 800f55a:	2301      	movs	r3, #1
 800f55c:	4628      	mov	r0, r5
 800f55e:	47b0      	blx	r6
 800f560:	1c41      	adds	r1, r0, #1
 800f562:	d1c7      	bne.n	800f4f4 <__sflush_r+0x34>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d0c4      	beq.n	800f4f4 <__sflush_r+0x34>
 800f56a:	2b1d      	cmp	r3, #29
 800f56c:	d001      	beq.n	800f572 <__sflush_r+0xb2>
 800f56e:	2b16      	cmp	r3, #22
 800f570:	d101      	bne.n	800f576 <__sflush_r+0xb6>
 800f572:	602f      	str	r7, [r5, #0]
 800f574:	e7b1      	b.n	800f4da <__sflush_r+0x1a>
 800f576:	89a3      	ldrh	r3, [r4, #12]
 800f578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f57c:	81a3      	strh	r3, [r4, #12]
 800f57e:	e7ad      	b.n	800f4dc <__sflush_r+0x1c>
 800f580:	690f      	ldr	r7, [r1, #16]
 800f582:	2f00      	cmp	r7, #0
 800f584:	d0a9      	beq.n	800f4da <__sflush_r+0x1a>
 800f586:	0793      	lsls	r3, r2, #30
 800f588:	680e      	ldr	r6, [r1, #0]
 800f58a:	bf08      	it	eq
 800f58c:	694b      	ldreq	r3, [r1, #20]
 800f58e:	600f      	str	r7, [r1, #0]
 800f590:	bf18      	it	ne
 800f592:	2300      	movne	r3, #0
 800f594:	eba6 0807 	sub.w	r8, r6, r7
 800f598:	608b      	str	r3, [r1, #8]
 800f59a:	f1b8 0f00 	cmp.w	r8, #0
 800f59e:	dd9c      	ble.n	800f4da <__sflush_r+0x1a>
 800f5a0:	6a21      	ldr	r1, [r4, #32]
 800f5a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5a4:	4643      	mov	r3, r8
 800f5a6:	463a      	mov	r2, r7
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	47b0      	blx	r6
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	dc06      	bgt.n	800f5be <__sflush_r+0xfe>
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b6:	81a3      	strh	r3, [r4, #12]
 800f5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5bc:	e78e      	b.n	800f4dc <__sflush_r+0x1c>
 800f5be:	4407      	add	r7, r0
 800f5c0:	eba8 0800 	sub.w	r8, r8, r0
 800f5c4:	e7e9      	b.n	800f59a <__sflush_r+0xda>
 800f5c6:	bf00      	nop
 800f5c8:	20400001 	.word	0x20400001

0800f5cc <_fflush_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	690b      	ldr	r3, [r1, #16]
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	b913      	cbnz	r3, 800f5dc <_fflush_r+0x10>
 800f5d6:	2500      	movs	r5, #0
 800f5d8:	4628      	mov	r0, r5
 800f5da:	bd38      	pop	{r3, r4, r5, pc}
 800f5dc:	b118      	cbz	r0, 800f5e6 <_fflush_r+0x1a>
 800f5de:	6983      	ldr	r3, [r0, #24]
 800f5e0:	b90b      	cbnz	r3, 800f5e6 <_fflush_r+0x1a>
 800f5e2:	f000 f887 	bl	800f6f4 <__sinit>
 800f5e6:	4b14      	ldr	r3, [pc, #80]	; (800f638 <_fflush_r+0x6c>)
 800f5e8:	429c      	cmp	r4, r3
 800f5ea:	d11b      	bne.n	800f624 <_fflush_r+0x58>
 800f5ec:	686c      	ldr	r4, [r5, #4]
 800f5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d0ef      	beq.n	800f5d6 <_fflush_r+0xa>
 800f5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5f8:	07d0      	lsls	r0, r2, #31
 800f5fa:	d404      	bmi.n	800f606 <_fflush_r+0x3a>
 800f5fc:	0599      	lsls	r1, r3, #22
 800f5fe:	d402      	bmi.n	800f606 <_fflush_r+0x3a>
 800f600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f602:	f000 f915 	bl	800f830 <__retarget_lock_acquire_recursive>
 800f606:	4628      	mov	r0, r5
 800f608:	4621      	mov	r1, r4
 800f60a:	f7ff ff59 	bl	800f4c0 <__sflush_r>
 800f60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f610:	07da      	lsls	r2, r3, #31
 800f612:	4605      	mov	r5, r0
 800f614:	d4e0      	bmi.n	800f5d8 <_fflush_r+0xc>
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	059b      	lsls	r3, r3, #22
 800f61a:	d4dd      	bmi.n	800f5d8 <_fflush_r+0xc>
 800f61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61e:	f000 f908 	bl	800f832 <__retarget_lock_release_recursive>
 800f622:	e7d9      	b.n	800f5d8 <_fflush_r+0xc>
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <_fflush_r+0x70>)
 800f626:	429c      	cmp	r4, r3
 800f628:	d101      	bne.n	800f62e <_fflush_r+0x62>
 800f62a:	68ac      	ldr	r4, [r5, #8]
 800f62c:	e7df      	b.n	800f5ee <_fflush_r+0x22>
 800f62e:	4b04      	ldr	r3, [pc, #16]	; (800f640 <_fflush_r+0x74>)
 800f630:	429c      	cmp	r4, r3
 800f632:	bf08      	it	eq
 800f634:	68ec      	ldreq	r4, [r5, #12]
 800f636:	e7da      	b.n	800f5ee <_fflush_r+0x22>
 800f638:	0800fedc 	.word	0x0800fedc
 800f63c:	0800fefc 	.word	0x0800fefc
 800f640:	0800febc 	.word	0x0800febc

0800f644 <std>:
 800f644:	2300      	movs	r3, #0
 800f646:	b510      	push	{r4, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	e9c0 3300 	strd	r3, r3, [r0]
 800f64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f652:	6083      	str	r3, [r0, #8]
 800f654:	8181      	strh	r1, [r0, #12]
 800f656:	6643      	str	r3, [r0, #100]	; 0x64
 800f658:	81c2      	strh	r2, [r0, #14]
 800f65a:	6183      	str	r3, [r0, #24]
 800f65c:	4619      	mov	r1, r3
 800f65e:	2208      	movs	r2, #8
 800f660:	305c      	adds	r0, #92	; 0x5c
 800f662:	f7fd fdff 	bl	800d264 <memset>
 800f666:	4b05      	ldr	r3, [pc, #20]	; (800f67c <std+0x38>)
 800f668:	6263      	str	r3, [r4, #36]	; 0x24
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <std+0x3c>)
 800f66c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <std+0x40>)
 800f670:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <std+0x44>)
 800f674:	6224      	str	r4, [r4, #32]
 800f676:	6323      	str	r3, [r4, #48]	; 0x30
 800f678:	bd10      	pop	{r4, pc}
 800f67a:	bf00      	nop
 800f67c:	0800f985 	.word	0x0800f985
 800f680:	0800f9a7 	.word	0x0800f9a7
 800f684:	0800f9df 	.word	0x0800f9df
 800f688:	0800fa03 	.word	0x0800fa03

0800f68c <_cleanup_r>:
 800f68c:	4901      	ldr	r1, [pc, #4]	; (800f694 <_cleanup_r+0x8>)
 800f68e:	f000 b8af 	b.w	800f7f0 <_fwalk_reent>
 800f692:	bf00      	nop
 800f694:	0800f5cd 	.word	0x0800f5cd

0800f698 <__sfmoreglue>:
 800f698:	b570      	push	{r4, r5, r6, lr}
 800f69a:	1e4a      	subs	r2, r1, #1
 800f69c:	2568      	movs	r5, #104	; 0x68
 800f69e:	4355      	muls	r5, r2
 800f6a0:	460e      	mov	r6, r1
 800f6a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6a6:	f7ff fc23 	bl	800eef0 <_malloc_r>
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	b140      	cbz	r0, 800f6c0 <__sfmoreglue+0x28>
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	e9c0 1600 	strd	r1, r6, [r0]
 800f6b4:	300c      	adds	r0, #12
 800f6b6:	60a0      	str	r0, [r4, #8]
 800f6b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6bc:	f7fd fdd2 	bl	800d264 <memset>
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}

0800f6c4 <__sfp_lock_acquire>:
 800f6c4:	4801      	ldr	r0, [pc, #4]	; (800f6cc <__sfp_lock_acquire+0x8>)
 800f6c6:	f000 b8b3 	b.w	800f830 <__retarget_lock_acquire_recursive>
 800f6ca:	bf00      	nop
 800f6cc:	24000c44 	.word	0x24000c44

0800f6d0 <__sfp_lock_release>:
 800f6d0:	4801      	ldr	r0, [pc, #4]	; (800f6d8 <__sfp_lock_release+0x8>)
 800f6d2:	f000 b8ae 	b.w	800f832 <__retarget_lock_release_recursive>
 800f6d6:	bf00      	nop
 800f6d8:	24000c44 	.word	0x24000c44

0800f6dc <__sinit_lock_acquire>:
 800f6dc:	4801      	ldr	r0, [pc, #4]	; (800f6e4 <__sinit_lock_acquire+0x8>)
 800f6de:	f000 b8a7 	b.w	800f830 <__retarget_lock_acquire_recursive>
 800f6e2:	bf00      	nop
 800f6e4:	24000c3f 	.word	0x24000c3f

0800f6e8 <__sinit_lock_release>:
 800f6e8:	4801      	ldr	r0, [pc, #4]	; (800f6f0 <__sinit_lock_release+0x8>)
 800f6ea:	f000 b8a2 	b.w	800f832 <__retarget_lock_release_recursive>
 800f6ee:	bf00      	nop
 800f6f0:	24000c3f 	.word	0x24000c3f

0800f6f4 <__sinit>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	f7ff fff0 	bl	800f6dc <__sinit_lock_acquire>
 800f6fc:	69a3      	ldr	r3, [r4, #24]
 800f6fe:	b11b      	cbz	r3, 800f708 <__sinit+0x14>
 800f700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f704:	f7ff bff0 	b.w	800f6e8 <__sinit_lock_release>
 800f708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f70c:	6523      	str	r3, [r4, #80]	; 0x50
 800f70e:	4b13      	ldr	r3, [pc, #76]	; (800f75c <__sinit+0x68>)
 800f710:	4a13      	ldr	r2, [pc, #76]	; (800f760 <__sinit+0x6c>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	62a2      	str	r2, [r4, #40]	; 0x28
 800f716:	42a3      	cmp	r3, r4
 800f718:	bf04      	itt	eq
 800f71a:	2301      	moveq	r3, #1
 800f71c:	61a3      	streq	r3, [r4, #24]
 800f71e:	4620      	mov	r0, r4
 800f720:	f000 f820 	bl	800f764 <__sfp>
 800f724:	6060      	str	r0, [r4, #4]
 800f726:	4620      	mov	r0, r4
 800f728:	f000 f81c 	bl	800f764 <__sfp>
 800f72c:	60a0      	str	r0, [r4, #8]
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 f818 	bl	800f764 <__sfp>
 800f734:	2200      	movs	r2, #0
 800f736:	60e0      	str	r0, [r4, #12]
 800f738:	2104      	movs	r1, #4
 800f73a:	6860      	ldr	r0, [r4, #4]
 800f73c:	f7ff ff82 	bl	800f644 <std>
 800f740:	68a0      	ldr	r0, [r4, #8]
 800f742:	2201      	movs	r2, #1
 800f744:	2109      	movs	r1, #9
 800f746:	f7ff ff7d 	bl	800f644 <std>
 800f74a:	68e0      	ldr	r0, [r4, #12]
 800f74c:	2202      	movs	r2, #2
 800f74e:	2112      	movs	r1, #18
 800f750:	f7ff ff78 	bl	800f644 <std>
 800f754:	2301      	movs	r3, #1
 800f756:	61a3      	str	r3, [r4, #24]
 800f758:	e7d2      	b.n	800f700 <__sinit+0xc>
 800f75a:	bf00      	nop
 800f75c:	0800fb38 	.word	0x0800fb38
 800f760:	0800f68d 	.word	0x0800f68d

0800f764 <__sfp>:
 800f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f766:	4607      	mov	r7, r0
 800f768:	f7ff ffac 	bl	800f6c4 <__sfp_lock_acquire>
 800f76c:	4b1e      	ldr	r3, [pc, #120]	; (800f7e8 <__sfp+0x84>)
 800f76e:	681e      	ldr	r6, [r3, #0]
 800f770:	69b3      	ldr	r3, [r6, #24]
 800f772:	b913      	cbnz	r3, 800f77a <__sfp+0x16>
 800f774:	4630      	mov	r0, r6
 800f776:	f7ff ffbd 	bl	800f6f4 <__sinit>
 800f77a:	3648      	adds	r6, #72	; 0x48
 800f77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f780:	3b01      	subs	r3, #1
 800f782:	d503      	bpl.n	800f78c <__sfp+0x28>
 800f784:	6833      	ldr	r3, [r6, #0]
 800f786:	b30b      	cbz	r3, 800f7cc <__sfp+0x68>
 800f788:	6836      	ldr	r6, [r6, #0]
 800f78a:	e7f7      	b.n	800f77c <__sfp+0x18>
 800f78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f790:	b9d5      	cbnz	r5, 800f7c8 <__sfp+0x64>
 800f792:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <__sfp+0x88>)
 800f794:	60e3      	str	r3, [r4, #12]
 800f796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f79a:	6665      	str	r5, [r4, #100]	; 0x64
 800f79c:	f000 f847 	bl	800f82e <__retarget_lock_init_recursive>
 800f7a0:	f7ff ff96 	bl	800f6d0 <__sfp_lock_release>
 800f7a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7ac:	6025      	str	r5, [r4, #0]
 800f7ae:	61a5      	str	r5, [r4, #24]
 800f7b0:	2208      	movs	r2, #8
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7b8:	f7fd fd54 	bl	800d264 <memset>
 800f7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c8:	3468      	adds	r4, #104	; 0x68
 800f7ca:	e7d9      	b.n	800f780 <__sfp+0x1c>
 800f7cc:	2104      	movs	r1, #4
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	f7ff ff62 	bl	800f698 <__sfmoreglue>
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	6030      	str	r0, [r6, #0]
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d1d5      	bne.n	800f788 <__sfp+0x24>
 800f7dc:	f7ff ff78 	bl	800f6d0 <__sfp_lock_release>
 800f7e0:	230c      	movs	r3, #12
 800f7e2:	603b      	str	r3, [r7, #0]
 800f7e4:	e7ee      	b.n	800f7c4 <__sfp+0x60>
 800f7e6:	bf00      	nop
 800f7e8:	0800fb38 	.word	0x0800fb38
 800f7ec:	ffff0001 	.word	0xffff0001

0800f7f0 <_fwalk_reent>:
 800f7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f4:	4606      	mov	r6, r0
 800f7f6:	4688      	mov	r8, r1
 800f7f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7fc:	2700      	movs	r7, #0
 800f7fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f802:	f1b9 0901 	subs.w	r9, r9, #1
 800f806:	d505      	bpl.n	800f814 <_fwalk_reent+0x24>
 800f808:	6824      	ldr	r4, [r4, #0]
 800f80a:	2c00      	cmp	r4, #0
 800f80c:	d1f7      	bne.n	800f7fe <_fwalk_reent+0xe>
 800f80e:	4638      	mov	r0, r7
 800f810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f814:	89ab      	ldrh	r3, [r5, #12]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d907      	bls.n	800f82a <_fwalk_reent+0x3a>
 800f81a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f81e:	3301      	adds	r3, #1
 800f820:	d003      	beq.n	800f82a <_fwalk_reent+0x3a>
 800f822:	4629      	mov	r1, r5
 800f824:	4630      	mov	r0, r6
 800f826:	47c0      	blx	r8
 800f828:	4307      	orrs	r7, r0
 800f82a:	3568      	adds	r5, #104	; 0x68
 800f82c:	e7e9      	b.n	800f802 <_fwalk_reent+0x12>

0800f82e <__retarget_lock_init_recursive>:
 800f82e:	4770      	bx	lr

0800f830 <__retarget_lock_acquire_recursive>:
 800f830:	4770      	bx	lr

0800f832 <__retarget_lock_release_recursive>:
 800f832:	4770      	bx	lr

0800f834 <__swhatbuf_r>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	460e      	mov	r6, r1
 800f838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f83c:	2900      	cmp	r1, #0
 800f83e:	b096      	sub	sp, #88	; 0x58
 800f840:	4614      	mov	r4, r2
 800f842:	461d      	mov	r5, r3
 800f844:	da07      	bge.n	800f856 <__swhatbuf_r+0x22>
 800f846:	2300      	movs	r3, #0
 800f848:	602b      	str	r3, [r5, #0]
 800f84a:	89b3      	ldrh	r3, [r6, #12]
 800f84c:	061a      	lsls	r2, r3, #24
 800f84e:	d410      	bmi.n	800f872 <__swhatbuf_r+0x3e>
 800f850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f854:	e00e      	b.n	800f874 <__swhatbuf_r+0x40>
 800f856:	466a      	mov	r2, sp
 800f858:	f000 f8fa 	bl	800fa50 <_fstat_r>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	dbf2      	blt.n	800f846 <__swhatbuf_r+0x12>
 800f860:	9a01      	ldr	r2, [sp, #4]
 800f862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f866:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f86a:	425a      	negs	r2, r3
 800f86c:	415a      	adcs	r2, r3
 800f86e:	602a      	str	r2, [r5, #0]
 800f870:	e7ee      	b.n	800f850 <__swhatbuf_r+0x1c>
 800f872:	2340      	movs	r3, #64	; 0x40
 800f874:	2000      	movs	r0, #0
 800f876:	6023      	str	r3, [r4, #0]
 800f878:	b016      	add	sp, #88	; 0x58
 800f87a:	bd70      	pop	{r4, r5, r6, pc}

0800f87c <__smakebuf_r>:
 800f87c:	898b      	ldrh	r3, [r1, #12]
 800f87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f880:	079d      	lsls	r5, r3, #30
 800f882:	4606      	mov	r6, r0
 800f884:	460c      	mov	r4, r1
 800f886:	d507      	bpl.n	800f898 <__smakebuf_r+0x1c>
 800f888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	6123      	str	r3, [r4, #16]
 800f890:	2301      	movs	r3, #1
 800f892:	6163      	str	r3, [r4, #20]
 800f894:	b002      	add	sp, #8
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	ab01      	add	r3, sp, #4
 800f89a:	466a      	mov	r2, sp
 800f89c:	f7ff ffca 	bl	800f834 <__swhatbuf_r>
 800f8a0:	9900      	ldr	r1, [sp, #0]
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f7ff fb23 	bl	800eef0 <_malloc_r>
 800f8aa:	b948      	cbnz	r0, 800f8c0 <__smakebuf_r+0x44>
 800f8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8b0:	059a      	lsls	r2, r3, #22
 800f8b2:	d4ef      	bmi.n	800f894 <__smakebuf_r+0x18>
 800f8b4:	f023 0303 	bic.w	r3, r3, #3
 800f8b8:	f043 0302 	orr.w	r3, r3, #2
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	e7e3      	b.n	800f888 <__smakebuf_r+0xc>
 800f8c0:	4b0d      	ldr	r3, [pc, #52]	; (800f8f8 <__smakebuf_r+0x7c>)
 800f8c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	6020      	str	r0, [r4, #0]
 800f8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8cc:	81a3      	strh	r3, [r4, #12]
 800f8ce:	9b00      	ldr	r3, [sp, #0]
 800f8d0:	6163      	str	r3, [r4, #20]
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	6120      	str	r0, [r4, #16]
 800f8d6:	b15b      	cbz	r3, 800f8f0 <__smakebuf_r+0x74>
 800f8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f000 f8c9 	bl	800fa74 <_isatty_r>
 800f8e2:	b128      	cbz	r0, 800f8f0 <__smakebuf_r+0x74>
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	f023 0303 	bic.w	r3, r3, #3
 800f8ea:	f043 0301 	orr.w	r3, r3, #1
 800f8ee:	81a3      	strh	r3, [r4, #12]
 800f8f0:	89a0      	ldrh	r0, [r4, #12]
 800f8f2:	4305      	orrs	r5, r0
 800f8f4:	81a5      	strh	r5, [r4, #12]
 800f8f6:	e7cd      	b.n	800f894 <__smakebuf_r+0x18>
 800f8f8:	0800f68d 	.word	0x0800f68d

0800f8fc <_raise_r>:
 800f8fc:	291f      	cmp	r1, #31
 800f8fe:	b538      	push	{r3, r4, r5, lr}
 800f900:	4604      	mov	r4, r0
 800f902:	460d      	mov	r5, r1
 800f904:	d904      	bls.n	800f910 <_raise_r+0x14>
 800f906:	2316      	movs	r3, #22
 800f908:	6003      	str	r3, [r0, #0]
 800f90a:	f04f 30ff 	mov.w	r0, #4294967295
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
 800f910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f912:	b112      	cbz	r2, 800f91a <_raise_r+0x1e>
 800f914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f918:	b94b      	cbnz	r3, 800f92e <_raise_r+0x32>
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 f830 	bl	800f980 <_getpid_r>
 800f920:	462a      	mov	r2, r5
 800f922:	4601      	mov	r1, r0
 800f924:	4620      	mov	r0, r4
 800f926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f92a:	f000 b817 	b.w	800f95c <_kill_r>
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d00a      	beq.n	800f948 <_raise_r+0x4c>
 800f932:	1c59      	adds	r1, r3, #1
 800f934:	d103      	bne.n	800f93e <_raise_r+0x42>
 800f936:	2316      	movs	r3, #22
 800f938:	6003      	str	r3, [r0, #0]
 800f93a:	2001      	movs	r0, #1
 800f93c:	e7e7      	b.n	800f90e <_raise_r+0x12>
 800f93e:	2400      	movs	r4, #0
 800f940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f944:	4628      	mov	r0, r5
 800f946:	4798      	blx	r3
 800f948:	2000      	movs	r0, #0
 800f94a:	e7e0      	b.n	800f90e <_raise_r+0x12>

0800f94c <raise>:
 800f94c:	4b02      	ldr	r3, [pc, #8]	; (800f958 <raise+0xc>)
 800f94e:	4601      	mov	r1, r0
 800f950:	6818      	ldr	r0, [r3, #0]
 800f952:	f7ff bfd3 	b.w	800f8fc <_raise_r>
 800f956:	bf00      	nop
 800f958:	2400001c 	.word	0x2400001c

0800f95c <_kill_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	4d07      	ldr	r5, [pc, #28]	; (800f97c <_kill_r+0x20>)
 800f960:	2300      	movs	r3, #0
 800f962:	4604      	mov	r4, r0
 800f964:	4608      	mov	r0, r1
 800f966:	4611      	mov	r1, r2
 800f968:	602b      	str	r3, [r5, #0]
 800f96a:	f7f2 faa9 	bl	8001ec0 <_kill>
 800f96e:	1c43      	adds	r3, r0, #1
 800f970:	d102      	bne.n	800f978 <_kill_r+0x1c>
 800f972:	682b      	ldr	r3, [r5, #0]
 800f974:	b103      	cbz	r3, 800f978 <_kill_r+0x1c>
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	bd38      	pop	{r3, r4, r5, pc}
 800f97a:	bf00      	nop
 800f97c:	24000c38 	.word	0x24000c38

0800f980 <_getpid_r>:
 800f980:	f7f2 ba96 	b.w	8001eb0 <_getpid>

0800f984 <__sread>:
 800f984:	b510      	push	{r4, lr}
 800f986:	460c      	mov	r4, r1
 800f988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f98c:	f000 f894 	bl	800fab8 <_read_r>
 800f990:	2800      	cmp	r0, #0
 800f992:	bfab      	itete	ge
 800f994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f996:	89a3      	ldrhlt	r3, [r4, #12]
 800f998:	181b      	addge	r3, r3, r0
 800f99a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f99e:	bfac      	ite	ge
 800f9a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9a2:	81a3      	strhlt	r3, [r4, #12]
 800f9a4:	bd10      	pop	{r4, pc}

0800f9a6 <__swrite>:
 800f9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9aa:	461f      	mov	r7, r3
 800f9ac:	898b      	ldrh	r3, [r1, #12]
 800f9ae:	05db      	lsls	r3, r3, #23
 800f9b0:	4605      	mov	r5, r0
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	d505      	bpl.n	800f9c4 <__swrite+0x1e>
 800f9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9bc:	2302      	movs	r3, #2
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f000 f868 	bl	800fa94 <_lseek_r>
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9ce:	81a3      	strh	r3, [r4, #12]
 800f9d0:	4632      	mov	r2, r6
 800f9d2:	463b      	mov	r3, r7
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9da:	f000 b817 	b.w	800fa0c <_write_r>

0800f9de <__sseek>:
 800f9de:	b510      	push	{r4, lr}
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e6:	f000 f855 	bl	800fa94 <_lseek_r>
 800f9ea:	1c43      	adds	r3, r0, #1
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	bf15      	itete	ne
 800f9f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9fa:	81a3      	strheq	r3, [r4, #12]
 800f9fc:	bf18      	it	ne
 800f9fe:	81a3      	strhne	r3, [r4, #12]
 800fa00:	bd10      	pop	{r4, pc}

0800fa02 <__sclose>:
 800fa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa06:	f000 b813 	b.w	800fa30 <_close_r>
	...

0800fa0c <_write_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d07      	ldr	r5, [pc, #28]	; (800fa2c <_write_r+0x20>)
 800fa10:	4604      	mov	r4, r0
 800fa12:	4608      	mov	r0, r1
 800fa14:	4611      	mov	r1, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	602a      	str	r2, [r5, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f7f2 fa87 	bl	8001f2e <_write>
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	d102      	bne.n	800fa2a <_write_r+0x1e>
 800fa24:	682b      	ldr	r3, [r5, #0]
 800fa26:	b103      	cbz	r3, 800fa2a <_write_r+0x1e>
 800fa28:	6023      	str	r3, [r4, #0]
 800fa2a:	bd38      	pop	{r3, r4, r5, pc}
 800fa2c:	24000c38 	.word	0x24000c38

0800fa30 <_close_r>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	4d06      	ldr	r5, [pc, #24]	; (800fa4c <_close_r+0x1c>)
 800fa34:	2300      	movs	r3, #0
 800fa36:	4604      	mov	r4, r0
 800fa38:	4608      	mov	r0, r1
 800fa3a:	602b      	str	r3, [r5, #0]
 800fa3c:	f7f2 fa93 	bl	8001f66 <_close>
 800fa40:	1c43      	adds	r3, r0, #1
 800fa42:	d102      	bne.n	800fa4a <_close_r+0x1a>
 800fa44:	682b      	ldr	r3, [r5, #0]
 800fa46:	b103      	cbz	r3, 800fa4a <_close_r+0x1a>
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	bd38      	pop	{r3, r4, r5, pc}
 800fa4c:	24000c38 	.word	0x24000c38

0800fa50 <_fstat_r>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4d07      	ldr	r5, [pc, #28]	; (800fa70 <_fstat_r+0x20>)
 800fa54:	2300      	movs	r3, #0
 800fa56:	4604      	mov	r4, r0
 800fa58:	4608      	mov	r0, r1
 800fa5a:	4611      	mov	r1, r2
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	f7f2 fa8e 	bl	8001f7e <_fstat>
 800fa62:	1c43      	adds	r3, r0, #1
 800fa64:	d102      	bne.n	800fa6c <_fstat_r+0x1c>
 800fa66:	682b      	ldr	r3, [r5, #0]
 800fa68:	b103      	cbz	r3, 800fa6c <_fstat_r+0x1c>
 800fa6a:	6023      	str	r3, [r4, #0]
 800fa6c:	bd38      	pop	{r3, r4, r5, pc}
 800fa6e:	bf00      	nop
 800fa70:	24000c38 	.word	0x24000c38

0800fa74 <_isatty_r>:
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	4d06      	ldr	r5, [pc, #24]	; (800fa90 <_isatty_r+0x1c>)
 800fa78:	2300      	movs	r3, #0
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	4608      	mov	r0, r1
 800fa7e:	602b      	str	r3, [r5, #0]
 800fa80:	f7f2 fa8d 	bl	8001f9e <_isatty>
 800fa84:	1c43      	adds	r3, r0, #1
 800fa86:	d102      	bne.n	800fa8e <_isatty_r+0x1a>
 800fa88:	682b      	ldr	r3, [r5, #0]
 800fa8a:	b103      	cbz	r3, 800fa8e <_isatty_r+0x1a>
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	bd38      	pop	{r3, r4, r5, pc}
 800fa90:	24000c38 	.word	0x24000c38

0800fa94 <_lseek_r>:
 800fa94:	b538      	push	{r3, r4, r5, lr}
 800fa96:	4d07      	ldr	r5, [pc, #28]	; (800fab4 <_lseek_r+0x20>)
 800fa98:	4604      	mov	r4, r0
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	2200      	movs	r2, #0
 800faa0:	602a      	str	r2, [r5, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	f7f2 fa86 	bl	8001fb4 <_lseek>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_lseek_r+0x1e>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_lseek_r+0x1e>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	24000c38 	.word	0x24000c38

0800fab8 <_read_r>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4d07      	ldr	r5, [pc, #28]	; (800fad8 <_read_r+0x20>)
 800fabc:	4604      	mov	r4, r0
 800fabe:	4608      	mov	r0, r1
 800fac0:	4611      	mov	r1, r2
 800fac2:	2200      	movs	r2, #0
 800fac4:	602a      	str	r2, [r5, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	f7f2 fa14 	bl	8001ef4 <_read>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	d102      	bne.n	800fad6 <_read_r+0x1e>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	b103      	cbz	r3, 800fad6 <_read_r+0x1e>
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	24000c38 	.word	0x24000c38

0800fadc <_init>:
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	bf00      	nop
 800fae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fae2:	bc08      	pop	{r3}
 800fae4:	469e      	mov	lr, r3
 800fae6:	4770      	bx	lr

0800fae8 <_fini>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	bf00      	nop
 800faec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faee:	bc08      	pop	{r3}
 800faf0:	469e      	mov	lr, r3
 800faf2:	4770      	bx	lr
